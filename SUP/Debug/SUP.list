
SUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab3c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001704  0800acdc  0800acdc  0001acdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3e0  0800c3e0  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3e0  0800c3e0  0001c3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3e8  0800c3e8  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3e8  0800c3e8  0001c3e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3ec  0800c3ec  0001c3ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800c3f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005118  200000a4  0800c494  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  200051bc  0800c494  000251bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021049  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bdc  00000000  00000000  0004111d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba0  00000000  00000000  00045d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001998  00000000  00000000  000478a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c52a  00000000  00000000  00049238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021fef  00000000  00000000  00065762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d4d6  00000000  00000000  00087751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00124c27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077d8  00000000  00000000  00124c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800acc4 	.word	0x0800acc4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	0800acc4 	.word	0x0800acc4

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b974 	b.w	8000cbc <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	4604      	mov	r4, r0
 80009f4:	468e      	mov	lr, r1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d14d      	bne.n	8000a96 <__udivmoddi4+0xaa>
 80009fa:	428a      	cmp	r2, r1
 80009fc:	4694      	mov	ip, r2
 80009fe:	d969      	bls.n	8000ad4 <__udivmoddi4+0xe8>
 8000a00:	fab2 f282 	clz	r2, r2
 8000a04:	b152      	cbz	r2, 8000a1c <__udivmoddi4+0x30>
 8000a06:	fa01 f302 	lsl.w	r3, r1, r2
 8000a0a:	f1c2 0120 	rsb	r1, r2, #32
 8000a0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a16:	ea41 0e03 	orr.w	lr, r1, r3
 8000a1a:	4094      	lsls	r4, r2
 8000a1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a20:	0c21      	lsrs	r1, r4, #16
 8000a22:	fbbe f6f8 	udiv	r6, lr, r8
 8000a26:	fa1f f78c 	uxth.w	r7, ip
 8000a2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a32:	fb06 f107 	mul.w	r1, r6, r7
 8000a36:	4299      	cmp	r1, r3
 8000a38:	d90a      	bls.n	8000a50 <__udivmoddi4+0x64>
 8000a3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a42:	f080 811f 	bcs.w	8000c84 <__udivmoddi4+0x298>
 8000a46:	4299      	cmp	r1, r3
 8000a48:	f240 811c 	bls.w	8000c84 <__udivmoddi4+0x298>
 8000a4c:	3e02      	subs	r6, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a5b      	subs	r3, r3, r1
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a58:	fb08 3310 	mls	r3, r8, r0, r3
 8000a5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a60:	fb00 f707 	mul.w	r7, r0, r7
 8000a64:	42a7      	cmp	r7, r4
 8000a66:	d90a      	bls.n	8000a7e <__udivmoddi4+0x92>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a70:	f080 810a 	bcs.w	8000c88 <__udivmoddi4+0x29c>
 8000a74:	42a7      	cmp	r7, r4
 8000a76:	f240 8107 	bls.w	8000c88 <__udivmoddi4+0x29c>
 8000a7a:	4464      	add	r4, ip
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a82:	1be4      	subs	r4, r4, r7
 8000a84:	2600      	movs	r6, #0
 8000a86:	b11d      	cbz	r5, 8000a90 <__udivmoddi4+0xa4>
 8000a88:	40d4      	lsrs	r4, r2
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d909      	bls.n	8000aae <__udivmoddi4+0xc2>
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	f000 80ef 	beq.w	8000c7e <__udivmoddi4+0x292>
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa6:	4630      	mov	r0, r6
 8000aa8:	4631      	mov	r1, r6
 8000aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aae:	fab3 f683 	clz	r6, r3
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d14a      	bne.n	8000b4c <__udivmoddi4+0x160>
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d302      	bcc.n	8000ac0 <__udivmoddi4+0xd4>
 8000aba:	4282      	cmp	r2, r0
 8000abc:	f200 80f9 	bhi.w	8000cb2 <__udivmoddi4+0x2c6>
 8000ac0:	1a84      	subs	r4, r0, r2
 8000ac2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	469e      	mov	lr, r3
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d0e0      	beq.n	8000a90 <__udivmoddi4+0xa4>
 8000ace:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ad2:	e7dd      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000ad4:	b902      	cbnz	r2, 8000ad8 <__udivmoddi4+0xec>
 8000ad6:	deff      	udf	#255	; 0xff
 8000ad8:	fab2 f282 	clz	r2, r2
 8000adc:	2a00      	cmp	r2, #0
 8000ade:	f040 8092 	bne.w	8000c06 <__udivmoddi4+0x21a>
 8000ae2:	eba1 010c 	sub.w	r1, r1, ip
 8000ae6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aea:	fa1f fe8c 	uxth.w	lr, ip
 8000aee:	2601      	movs	r6, #1
 8000af0:	0c20      	lsrs	r0, r4, #16
 8000af2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000af6:	fb07 1113 	mls	r1, r7, r3, r1
 8000afa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000afe:	fb0e f003 	mul.w	r0, lr, r3
 8000b02:	4288      	cmp	r0, r1
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x12c>
 8000b06:	eb1c 0101 	adds.w	r1, ip, r1
 8000b0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x12a>
 8000b10:	4288      	cmp	r0, r1
 8000b12:	f200 80cb 	bhi.w	8000cac <__udivmoddi4+0x2c0>
 8000b16:	4643      	mov	r3, r8
 8000b18:	1a09      	subs	r1, r1, r0
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b20:	fb07 1110 	mls	r1, r7, r0, r1
 8000b24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b28:	fb0e fe00 	mul.w	lr, lr, r0
 8000b2c:	45a6      	cmp	lr, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x156>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x154>
 8000b3a:	45a6      	cmp	lr, r4
 8000b3c:	f200 80bb 	bhi.w	8000cb6 <__udivmoddi4+0x2ca>
 8000b40:	4608      	mov	r0, r1
 8000b42:	eba4 040e 	sub.w	r4, r4, lr
 8000b46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b4a:	e79c      	b.n	8000a86 <__udivmoddi4+0x9a>
 8000b4c:	f1c6 0720 	rsb	r7, r6, #32
 8000b50:	40b3      	lsls	r3, r6
 8000b52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b62:	431c      	orrs	r4, r3
 8000b64:	40f9      	lsrs	r1, r7
 8000b66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b72:	0c20      	lsrs	r0, r4, #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fb09 1118 	mls	r1, r9, r8, r1
 8000b7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b80:	fb08 f00e 	mul.w	r0, r8, lr
 8000b84:	4288      	cmp	r0, r1
 8000b86:	fa02 f206 	lsl.w	r2, r2, r6
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b8>
 8000b8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b94:	f080 8088 	bcs.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f240 8085 	bls.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1a09      	subs	r1, r1, r0
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bac:	fb09 1110 	mls	r1, r9, r0, r1
 8000bb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb8:	458e      	cmp	lr, r1
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1e2>
 8000bbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc4:	d26c      	bcs.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bc6:	458e      	cmp	lr, r1
 8000bc8:	d96a      	bls.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bca:	3802      	subs	r0, #2
 8000bcc:	4461      	add	r1, ip
 8000bce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000bd6:	eba1 010e 	sub.w	r1, r1, lr
 8000bda:	42a1      	cmp	r1, r4
 8000bdc:	46c8      	mov	r8, r9
 8000bde:	46a6      	mov	lr, r4
 8000be0:	d356      	bcc.n	8000c90 <__udivmoddi4+0x2a4>
 8000be2:	d053      	beq.n	8000c8c <__udivmoddi4+0x2a0>
 8000be4:	b15d      	cbz	r5, 8000bfe <__udivmoddi4+0x212>
 8000be6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bea:	eb61 010e 	sbc.w	r1, r1, lr
 8000bee:	fa01 f707 	lsl.w	r7, r1, r7
 8000bf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000bf6:	40f1      	lsrs	r1, r6
 8000bf8:	431f      	orrs	r7, r3
 8000bfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000bfe:	2600      	movs	r6, #0
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	40d8      	lsrs	r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	fa21 f303 	lsr.w	r3, r1, r3
 8000c14:	4091      	lsls	r1, r2
 8000c16:	4301      	orrs	r1, r0
 8000c18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1c:	fa1f fe8c 	uxth.w	lr, ip
 8000c20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c24:	fb07 3610 	mls	r6, r7, r0, r3
 8000c28:	0c0b      	lsrs	r3, r1, #16
 8000c2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c32:	429e      	cmp	r6, r3
 8000c34:	fa04 f402 	lsl.w	r4, r4, r2
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x260>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c42:	d22f      	bcs.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c44:	429e      	cmp	r6, r3
 8000c46:	d92d      	bls.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1b9b      	subs	r3, r3, r6
 8000c4e:	b289      	uxth	r1, r1
 8000c50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c54:	fb07 3316 	mls	r3, r7, r6, r3
 8000c58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c60:	428b      	cmp	r3, r1
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x28a>
 8000c64:	eb1c 0101 	adds.w	r1, ip, r1
 8000c68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c6c:	d216      	bcs.n	8000c9c <__udivmoddi4+0x2b0>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d914      	bls.n	8000c9c <__udivmoddi4+0x2b0>
 8000c72:	3e02      	subs	r6, #2
 8000c74:	4461      	add	r1, ip
 8000c76:	1ac9      	subs	r1, r1, r3
 8000c78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c7c:	e738      	b.n	8000af0 <__udivmoddi4+0x104>
 8000c7e:	462e      	mov	r6, r5
 8000c80:	4628      	mov	r0, r5
 8000c82:	e705      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000c84:	4606      	mov	r6, r0
 8000c86:	e6e3      	b.n	8000a50 <__udivmoddi4+0x64>
 8000c88:	4618      	mov	r0, r3
 8000c8a:	e6f8      	b.n	8000a7e <__udivmoddi4+0x92>
 8000c8c:	454b      	cmp	r3, r9
 8000c8e:	d2a9      	bcs.n	8000be4 <__udivmoddi4+0x1f8>
 8000c90:	ebb9 0802 	subs.w	r8, r9, r2
 8000c94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c98:	3801      	subs	r0, #1
 8000c9a:	e7a3      	b.n	8000be4 <__udivmoddi4+0x1f8>
 8000c9c:	4646      	mov	r6, r8
 8000c9e:	e7ea      	b.n	8000c76 <__udivmoddi4+0x28a>
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	e794      	b.n	8000bce <__udivmoddi4+0x1e2>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	e7d1      	b.n	8000c4c <__udivmoddi4+0x260>
 8000ca8:	46d0      	mov	r8, sl
 8000caa:	e77b      	b.n	8000ba4 <__udivmoddi4+0x1b8>
 8000cac:	3b02      	subs	r3, #2
 8000cae:	4461      	add	r1, ip
 8000cb0:	e732      	b.n	8000b18 <__udivmoddi4+0x12c>
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	e709      	b.n	8000aca <__udivmoddi4+0xde>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	e742      	b.n	8000b42 <__udivmoddi4+0x156>

08000cbc <__aeabi_idiv0>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <ADS1115_init>:
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	4608      	mov	r0, r1
 8000cca:	4639      	mov	r1, r7
 8000ccc:	e881 000c 	stmia.w	r1, {r2, r3}
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	817b      	strh	r3, [r7, #10]
 8000cd4:	2010      	movs	r0, #16
 8000cd6:	f009 fe2f 	bl	800a938 <malloc>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	897a      	ldrh	r2, [r7, #10]
 8000ce8:	809a      	strh	r2, [r3, #4]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	1d9a      	adds	r2, r3, #6
 8000cee:	463b      	mov	r3, r7
 8000cf0:	cb03      	ldmia	r3!, {r0, r1}
 8000cf2:	6010      	str	r0, [r2, #0]
 8000cf4:	6051      	str	r1, [r2, #4]
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <ADS1115_updateConfig>:
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af02      	add	r7, sp, #8
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	e883 0006 	stmia.w	r3, {r1, r2}
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	1d9a      	adds	r2, r3, #6
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	cb03      	ldmia	r3!, {r0, r1}
 8000d16:	6010      	str	r0, [r2, #0]
 8000d18:	6051      	str	r1, [r2, #4]
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <ADS1115_updateConfig+0x60>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	82bb      	strh	r3, [r7, #20]
 8000d20:	2300      	movs	r3, #0
 8000d22:	75bb      	strb	r3, [r7, #22]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f107 0014 	add.w	r0, r7, #20
 8000d2a:	f8d3 1006 	ldr.w	r1, [r3, #6]
 8000d2e:	460a      	mov	r2, r1
 8000d30:	f8d3 100a 	ldr.w	r1, [r3, #10]
 8000d34:	460b      	mov	r3, r1
 8000d36:	4611      	mov	r1, r2
 8000d38:	461a      	mov	r2, r3
 8000d3a:	f000 f841 	bl	8000dc0 <prepareConfigFrame>
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	6818      	ldr	r0, [r3, #0]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	889b      	ldrh	r3, [r3, #4]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	b299      	uxth	r1, r3
 8000d4a:	f107 0214 	add.w	r2, r7, #20
 8000d4e:	2364      	movs	r3, #100	; 0x64
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	2303      	movs	r3, #3
 8000d54:	f003 fb24 	bl	80043a0 <HAL_I2C_Master_Transmit>
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	0800acdc 	.word	0x0800acdc

08000d64 <ADS1115_startContinousMode>:
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af02      	add	r7, sp, #8
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <ADS1115_startContinousMode+0x58>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	82bb      	strh	r3, [r7, #20]
 8000d72:	2300      	movs	r3, #0
 8000d74:	75bb      	strb	r3, [r7, #22]
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	3206      	adds	r2, #6
 8000d7e:	6810      	ldr	r0, [r2, #0]
 8000d80:	6851      	ldr	r1, [r2, #4]
 8000d82:	c303      	stmia	r3!, {r0, r1}
 8000d84:	2300      	movs	r3, #0
 8000d86:	73bb      	strb	r3, [r7, #14]
 8000d88:	f107 0014 	add.w	r0, r7, #20
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000d94:	f000 f814 	bl	8000dc0 <prepareConfigFrame>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6818      	ldr	r0, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	889b      	ldrh	r3, [r3, #4]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	b299      	uxth	r1, r3
 8000da4:	f107 0214 	add.w	r2, r7, #20
 8000da8:	2364      	movs	r3, #100	; 0x64
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	2303      	movs	r3, #3
 8000dae:	f003 faf7 	bl	80043a0 <HAL_I2C_Master_Transmit>
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	0800acdc 	.word	0x0800acdc

08000dc0 <prepareConfigFrame>:
 8000dc0:	b480      	push	{r7}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	e883 0006 	stmia.w	r3, {r1, r2}
 8000dce:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <prepareConfigFrame+0xac>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	82bb      	strh	r3, [r7, #20]
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	75bb      	strb	r3, [r7, #22]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	3301      	adds	r3, #1
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b25a      	sxtb	r2, r3
 8000de6:	793b      	ldrb	r3, [r7, #4]
 8000de8:	011b      	lsls	r3, r3, #4
 8000dea:	b259      	sxtb	r1, r3
 8000dec:	797b      	ldrb	r3, [r7, #5]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	430b      	orrs	r3, r1
 8000df4:	b259      	sxtb	r1, r3
 8000df6:	79bb      	ldrb	r3, [r7, #6]
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	430b      	orrs	r3, r1
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b25a      	sxtb	r2, r3
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	3301      	adds	r3, #1
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	701a      	strb	r2, [r3, #0]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b25a      	sxtb	r2, r3
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	015b      	lsls	r3, r3, #5
 8000e16:	b259      	sxtb	r1, r3
 8000e18:	7a3b      	ldrb	r3, [r7, #8]
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	430b      	orrs	r3, r1
 8000e20:	b259      	sxtb	r1, r3
 8000e22:	7a7b      	ldrb	r3, [r7, #9]
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	b259      	sxtb	r1, r3
 8000e2c:	7abb      	ldrb	r3, [r7, #10]
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	430b      	orrs	r3, r1
 8000e34:	b259      	sxtb	r1, r3
 8000e36:	7afb      	ldrb	r3, [r7, #11]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	430b      	orrs	r3, r1
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b25a      	sxtb	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	3302      	adds	r3, #2
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	753b      	strb	r3, [r7, #20]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	785b      	ldrb	r3, [r3, #1]
 8000e56:	757b      	strb	r3, [r7, #21]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	789b      	ldrb	r3, [r3, #2]
 8000e5c:	75bb      	strb	r3, [r7, #22]
 8000e5e:	bf00      	nop
 8000e60:	371c      	adds	r7, #28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	0800acdc 	.word	0x0800acdc

08000e70 <MCP4725_init>:

    Constructor
*/
/**************************************************************************/ 
MCP4725 MCP4725_init(I2C_HandleTypeDef* hi2c, MCP4725Ax_ADDRESS addr, float refV)
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	ed87 0a00 	vstr	s0, [r7]
 8000e80:	71fb      	strb	r3, [r7, #7]
	MCP4725 _MCP4725;

	_MCP4725._i2cAddress = (uint16_t)(addr<<1);
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	753b      	strb	r3, [r7, #20]
	_MCP4725.hi2c = hi2c;
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	613b      	str	r3, [r7, #16]

	MCP4725_setReferenceVoltage(&_MCP4725, refV); //set _refVoltage & _bitsPerVolt variables
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	ed97 0a00 	vldr	s0, [r7]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f822 	bl	8000ee0 <MCP4725_setReferenceVoltage>

	return _MCP4725;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	461c      	mov	r4, r3
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ea6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd90      	pop	{r4, r7, pc}

08000eb2 <MCP4725_isConnected>:

    Check the connection 
*/
/**************************************************************************/ 
uint8_t MCP4725_isConnected(MCP4725* _MCP4725)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
	return HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, 100) == HAL_OK;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6818      	ldr	r0, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	791b      	ldrb	r3, [r3, #4]
 8000ec2:	b299      	uxth	r1, r3
 8000ec4:	2364      	movs	r3, #100	; 0x64
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	f004 f8ae 	bl	8005028 <HAL_I2C_IsDeviceReady>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	bf0c      	ite	eq
 8000ed2:	2301      	moveq	r3, #1
 8000ed4:	2300      	movne	r3, #0
 8000ed6:	b2db      	uxtb	r3, r3
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <MCP4725_setReferenceVoltage>:

    Set reference voltage
*/
/**************************************************************************/
void MCP4725_setReferenceVoltage(MCP4725* _MCP4725, float value)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	ed87 0a00 	vstr	s0, [r7]
   if   (value == 0) _MCP4725->_refVoltage = MCP4725_REFERENCE_VOLTAGE; //sanity check, avoid division by zero
 8000eec:	edd7 7a00 	vldr	s15, [r7]
 8000ef0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef8:	d103      	bne.n	8000f02 <MCP4725_setReferenceVoltage+0x22>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a0c      	ldr	r2, [pc, #48]	; (8000f30 <MCP4725_setReferenceVoltage+0x50>)
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	e002      	b.n	8000f08 <MCP4725_setReferenceVoltage+0x28>
   else              _MCP4725->_refVoltage = value;    
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	609a      	str	r2, [r3, #8]

   _MCP4725->_bitsPerVolt = (float)MCP4725_STEPS / _MCP4725->_refVoltage;         //TODO: check accuracy with +0.5
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f0e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000f34 <MCP4725_setReferenceVoltage+0x54>
 8000f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f1a:	ee17 3a90 	vmov	r3, s15
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	819a      	strh	r2, [r3, #12]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	40533333 	.word	0x40533333
 8000f34:	45800000 	.word	0x45800000

08000f38 <MCP4725_setValue>:
      - "MCP4725_POWER_DOWN_100KOHM"..power down on with 100 kOhm to ground
      - "MCP4725_POWER_DOWN_500KOHM"..power down on with 500kOhm to ground
*/
/**************************************************************************/ 
uint8_t MCP4725_setValue(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	4608      	mov	r0, r1
 8000f42:	4611      	mov	r1, r2
 8000f44:	461a      	mov	r2, r3
 8000f46:	4603      	mov	r3, r0
 8000f48:	807b      	strh	r3, [r7, #2]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	707b      	strb	r3, [r7, #1]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	703b      	strb	r3, [r7, #0]
  #ifndef MCP4725_DISABLE_SANITY_CHECK
  if (value > MCP4725_MAX_VALUE) value = MCP4725_MAX_VALUE; //make sure value never exceeds threshold
  #endif

  return MCP4725_writeComand(_MCP4725, value, mode, powerType);
 8000f52:	783b      	ldrb	r3, [r7, #0]
 8000f54:	787a      	ldrb	r2, [r7, #1]
 8000f56:	8879      	ldrh	r1, [r7, #2]
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 f822 	bl	8000fa2 <MCP4725_writeComand>
 8000f5e:	4603      	mov	r3, r0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <MCP4725_getEepromBusyFlag>:
      is ignored
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint8_t MCP4725_getEepromBusyFlag(MCP4725* _MCP4725)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint16_t value = MCP4725_readRegister(_MCP4725, MCP4725_READ_SETTINGS); //BSY,POR,xx,xx,xx,PD1,PD0,xx
 8000f70:	2101      	movs	r1, #1
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 f895 	bl	80010a2 <MCP4725_readRegister>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	81fb      	strh	r3, [r7, #14]

  if (value != MCP4725_ERROR) return (value & 0x80)==0x80;		//1 - completed, 0 - incompleted
 8000f7c:	89fb      	ldrh	r3, [r7, #14]
 8000f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d008      	beq.n	8000f98 <MCP4725_getEepromBusyFlag+0x30>
 8000f86:	89fb      	ldrh	r3, [r7, #14]
 8000f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	bf14      	ite	ne
 8000f90:	2301      	movne	r3, #1
 8000f92:	2300      	moveq	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	e000      	b.n	8000f9a <MCP4725_getEepromBusyFlag+0x32>
                              return 0;										//collision on i2c bus
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <MCP4725_writeComand>:
    - "MCP4725_POWER_DOWN_500KOHM"
      1,  1
*/
/**************************************************************************/ 
uint8_t	MCP4725_writeComand(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af02      	add	r7, sp, #8
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	4608      	mov	r0, r1
 8000fac:	4611      	mov	r1, r2
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	807b      	strh	r3, [r7, #2]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	707b      	strb	r3, [r7, #1]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	703b      	strb	r3, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef I2C_Stat;
  //Wire.beginTransmission(_i2cAddress);

  switch (mode)
 8000fbc:	787b      	ldrb	r3, [r7, #1]
 8000fbe:	2b60      	cmp	r3, #96	; 0x60
 8000fc0:	d028      	beq.n	8001014 <MCP4725_writeComand+0x72>
 8000fc2:	2b60      	cmp	r3, #96	; 0x60
 8000fc4:	dc4a      	bgt.n	800105c <MCP4725_writeComand+0xba>
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d002      	beq.n	8000fd0 <MCP4725_writeComand+0x2e>
 8000fca:	2b40      	cmp	r3, #64	; 0x40
 8000fcc:	d022      	beq.n	8001014 <MCP4725_writeComand+0x72>
 8000fce:	e045      	b.n	800105c <MCP4725_writeComand+0xba>
    case MCP4725_FAST_MODE:                                            //see MCP4725 datasheet on p.18
		
      //Wire.send(mode | (powerType << 4)  | highByte(value));
      //Wire.send(lowByte(value));
		
			buffer[0] = mode | (powerType << 4)  | highByte(value);
 8000fd0:	783b      	ldrb	r3, [r7, #0]
 8000fd2:	011b      	lsls	r3, r3, #4
 8000fd4:	b25a      	sxtb	r2, r3
 8000fd6:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b25a      	sxtb	r2, r3
 8000fde:	887b      	ldrh	r3, [r7, #2]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	b25b      	sxtb	r3, r3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	733b      	strb	r3, [r7, #12]
			buffer[1] = lowByte(value);
 8000fee:	887b      	ldrh	r3, [r7, #2]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	737b      	strb	r3, [r7, #13]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 2, 1000);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	791b      	ldrb	r3, [r3, #4]
 8000ffc:	b299      	uxth	r1, r3
 8000ffe:	f107 020c 	add.w	r2, r7, #12
 8001002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2302      	movs	r3, #2
 800100a:	f003 f9c9 	bl	80043a0 <HAL_I2C_Master_Transmit>
 800100e:	4603      	mov	r3, r0
 8001010:	73fb      	strb	r3, [r7, #15]
		
      break;
 8001012:	e023      	b.n	800105c <MCP4725_writeComand+0xba>

    case MCP4725_REGISTER_MODE: case MCP4725_EEPROM_MODE:              //see MCP4725 datasheet on p.19
      value = value << 4;                                              //D11,D10,D9,D8,D7,D6,D5,D4,  D3,D2,D1,D0,xx,xx,xx,xx
 8001014:	887b      	ldrh	r3, [r7, #2]
 8001016:	011b      	lsls	r3, r3, #4
 8001018:	807b      	strh	r3, [r7, #2]
      //Wire.send(mode  | (powerType << 1));
      //Wire.send(highByte(value));
      //Wire.send(lowByte(value));
      
			buffer[0] = mode  | (powerType << 1);
 800101a:	783b      	ldrb	r3, [r7, #0]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	b25a      	sxtb	r2, r3
 8001020:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001024:	4313      	orrs	r3, r2
 8001026:	b25b      	sxtb	r3, r3
 8001028:	b2db      	uxtb	r3, r3
 800102a:	733b      	strb	r3, [r7, #12]
			buffer[1] = highByte(value);
 800102c:	887b      	ldrh	r3, [r7, #2]
 800102e:	0a1b      	lsrs	r3, r3, #8
 8001030:	b29b      	uxth	r3, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	737b      	strb	r3, [r7, #13]
			buffer[2] = lowByte(value);
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	73bb      	strb	r3, [r7, #14]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 3, 1000);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	791b      	ldrb	r3, [r3, #4]
 8001044:	b299      	uxth	r1, r3
 8001046:	f107 020c 	add.w	r2, r7, #12
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2303      	movs	r3, #3
 8001052:	f003 f9a5 	bl	80043a0 <HAL_I2C_Master_Transmit>
 8001056:	4603      	mov	r3, r0
 8001058:	73fb      	strb	r3, [r7, #15]
		
			break;
 800105a:	bf00      	nop
  }

  if (I2C_Stat != HAL_OK) return 0;                   //send data over i2c & check for collision on i2c bus
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MCP4725_writeComand+0xc4>
 8001062:	2300      	movs	r3, #0
 8001064:	e019      	b.n	800109a <MCP4725_writeComand+0xf8>

  if (mode == MCP4725_EEPROM_MODE)
 8001066:	787b      	ldrb	r3, [r7, #1]
 8001068:	2b60      	cmp	r3, #96	; 0x60
 800106a:	d115      	bne.n	8001098 <MCP4725_writeComand+0xf6>
  {
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff7b 	bl	8000f68 <MCP4725_getEepromBusyFlag>
 8001072:	4603      	mov	r3, r0
 8001074:	2b01      	cmp	r3, #1
 8001076:	d101      	bne.n	800107c <MCP4725_writeComand+0xda>
 8001078:	2301      	movs	r3, #1
 800107a:	e00e      	b.n	800109a <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //typical EEPROM write time 25 msec
 800107c:	2019      	movs	r0, #25
 800107e:	f002 f9fd 	bl	800347c <HAL_Delay>
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ff70 	bl	8000f68 <MCP4725_getEepromBusyFlag>
 8001088:	4603      	mov	r3, r0
 800108a:	2b01      	cmp	r3, #1
 800108c:	d101      	bne.n	8001092 <MCP4725_writeComand+0xf0>
 800108e:	2301      	movs	r3, #1
 8001090:	e003      	b.n	800109a <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //maximum EEPROM write time 25 + 25 = 50 msec
 8001092:	2019      	movs	r0, #25
 8001094:	f002 f9f2 	bl	800347c <HAL_Delay>
  }

  return 1;                                                         //success!!!
 8001098:	2301      	movs	r3, #1
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <MCP4725_readRegister>:
      ------ Settings data ------  ---------------- DAC register data ---------------  ------------------- EEPROM data --------------------
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint16_t MCP4725_readRegister(MCP4725* _MCP4725, MCP4725_READ_TYPE dataType)
{
 80010a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
 80010b0:	466b      	mov	r3, sp
 80010b2:	461e      	mov	r6, r3
  uint16_t value = dataType;                             //convert enum to integer to avoid compiler warnings                                    
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	82bb      	strh	r3, [r7, #20]
	uint16_t ret_val = 0 ;
 80010b8:	2300      	movs	r3, #0
 80010ba:	82fb      	strh	r3, [r7, #22]
	uint8_t buffer[dataType];
 80010bc:	78f9      	ldrb	r1, [r7, #3]
 80010be:	460b      	mov	r3, r1
 80010c0:	3b01      	subs	r3, #1
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	b2cb      	uxtb	r3, r1
 80010c6:	2200      	movs	r2, #0
 80010c8:	4698      	mov	r8, r3
 80010ca:	4691      	mov	r9, r2
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010e0:	b2cb      	uxtb	r3, r1
 80010e2:	2200      	movs	r2, #0
 80010e4:	461c      	mov	r4, r3
 80010e6:	4615      	mov	r5, r2
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	00eb      	lsls	r3, r5, #3
 80010f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80010f6:	00e2      	lsls	r2, r4, #3
 80010f8:	460b      	mov	r3, r1
 80010fa:	3307      	adds	r3, #7
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	ebad 0d03 	sub.w	sp, sp, r3
 8001104:	ab02      	add	r3, sp, #8
 8001106:	3300      	adds	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef I2C_Stat;
	
	I2C_Stat = HAL_I2C_Master_Receive(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, dataType, 1000);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	791b      	ldrb	r3, [r3, #4]
 8001112:	b299      	uxth	r1, r3
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	b29b      	uxth	r3, r3
 8001118:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800111c:	9200      	str	r2, [sp, #0]
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	f003 fa3c 	bl	800459c <HAL_I2C_Master_Receive>
 8001124:	4603      	mov	r3, r0
 8001126:	72fb      	strb	r3, [r7, #11]

  if (I2C_Stat != HAL_OK) return MCP4725_ERROR;
 8001128:	7afb      	ldrb	r3, [r7, #11]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <MCP4725_readRegister+0x92>
 800112e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001132:	e01f      	b.n	8001174 <MCP4725_readRegister+0xd2>


  /* read data from buffer */
  switch (dataType)
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	2b05      	cmp	r3, #5
 8001138:	d00a      	beq.n	8001150 <MCP4725_readRegister+0xae>
 800113a:	2b05      	cmp	r3, #5
 800113c:	dc19      	bgt.n	8001172 <MCP4725_readRegister+0xd0>
 800113e:	2b01      	cmp	r3, #1
 8001140:	d002      	beq.n	8001148 <MCP4725_readRegister+0xa6>
 8001142:	2b03      	cmp	r3, #3
 8001144:	d004      	beq.n	8001150 <MCP4725_readRegister+0xae>
 8001146:	e014      	b.n	8001172 <MCP4725_readRegister+0xd0>
  {
    case MCP4725_READ_SETTINGS:
      ret_val = buffer[0];
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	82fb      	strh	r3, [r7, #22]

      break;
 800114e:	e010      	b.n	8001172 <MCP4725_readRegister+0xd0>

    case MCP4725_READ_DAC_REG: case MCP4725_READ_EEPROM:

      ret_val = buffer[value-2];
 8001150:	8abb      	ldrh	r3, [r7, #20]
 8001152:	3b02      	subs	r3, #2
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	5cd3      	ldrb	r3, [r2, r3]
 8001158:	82fb      	strh	r3, [r7, #22]
      ret_val = (ret_val << 8) | buffer[value-1];
 800115a:	8afb      	ldrh	r3, [r7, #22]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	8abb      	ldrh	r3, [r7, #20]
 8001162:	3b01      	subs	r3, #1
 8001164:	68f9      	ldr	r1, [r7, #12]
 8001166:	5ccb      	ldrb	r3, [r1, r3]
 8001168:	b21b      	sxth	r3, r3
 800116a:	4313      	orrs	r3, r2
 800116c:	b21b      	sxth	r3, r3
 800116e:	82fb      	strh	r3, [r7, #22]
      break;
 8001170:	bf00      	nop
  }

  return ret_val;
 8001172:	8afb      	ldrh	r3, [r7, #22]
 8001174:	46b5      	mov	sp, r6
}
 8001176:	4618      	mov	r0, r3
 8001178:	371c      	adds	r7, #28
 800117a:	46bd      	mov	sp, r7
 800117c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001180 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af04      	add	r7, sp, #16
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	2301      	movs	r3, #1
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	1dfb      	adds	r3, r7, #7
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	2200      	movs	r2, #0
 80011ac:	2178      	movs	r1, #120	; 0x78
 80011ae:	4803      	ldr	r0, [pc, #12]	; (80011bc <ssd1306_WriteCommand+0x2c>)
 80011b0:	f003 fc1a 	bl	80049e8 <HAL_I2C_Mem_Write>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200005b0 	.word	0x200005b0

080011c0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af04      	add	r7, sp, #16
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	f04f 32ff 	mov.w	r2, #4294967295
 80011d2:	9202      	str	r2, [sp, #8]
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	2240      	movs	r2, #64	; 0x40
 80011de:	2178      	movs	r1, #120	; 0x78
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <ssd1306_WriteData+0x30>)
 80011e2:	f003 fc01 	bl	80049e8 <HAL_I2C_Mem_Write>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200005b0 	.word	0x200005b0

080011f4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80011f8:	f7ff ffc2 	bl	8001180 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80011fc:	2064      	movs	r0, #100	; 0x64
 80011fe:	f002 f93d 	bl	800347c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001202:	2000      	movs	r0, #0
 8001204:	f000 fa7c 	bl	8001700 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001208:	2020      	movs	r0, #32
 800120a:	f7ff ffc1 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff ffbe 	bl	8001190 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001214:	20b0      	movs	r0, #176	; 0xb0
 8001216:	f7ff ffbb 	bl	8001190 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800121a:	20c8      	movs	r0, #200	; 0xc8
 800121c:	f7ff ffb8 	bl	8001190 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff ffb5 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001226:	2010      	movs	r0, #16
 8001228:	f7ff ffb2 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800122c:	2040      	movs	r0, #64	; 0x40
 800122e:	f7ff ffaf 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001232:	20ff      	movs	r0, #255	; 0xff
 8001234:	f000 fa51 	bl	80016da <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001238:	20a1      	movs	r0, #161	; 0xa1
 800123a:	f7ff ffa9 	bl	8001190 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800123e:	20a6      	movs	r0, #166	; 0xa6
 8001240:	f7ff ffa6 	bl	8001190 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001244:	20a8      	movs	r0, #168	; 0xa8
 8001246:	f7ff ffa3 	bl	8001190 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800124a:	203f      	movs	r0, #63	; 0x3f
 800124c:	f7ff ffa0 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001250:	20a4      	movs	r0, #164	; 0xa4
 8001252:	f7ff ff9d 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001256:	20d3      	movs	r0, #211	; 0xd3
 8001258:	f7ff ff9a 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800125c:	2000      	movs	r0, #0
 800125e:	f7ff ff97 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001262:	20d5      	movs	r0, #213	; 0xd5
 8001264:	f7ff ff94 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001268:	20f0      	movs	r0, #240	; 0xf0
 800126a:	f7ff ff91 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800126e:	20d9      	movs	r0, #217	; 0xd9
 8001270:	f7ff ff8e 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001274:	2022      	movs	r0, #34	; 0x22
 8001276:	f7ff ff8b 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800127a:	20da      	movs	r0, #218	; 0xda
 800127c:	f7ff ff88 	bl	8001190 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001280:	2012      	movs	r0, #18
 8001282:	f7ff ff85 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001286:	20db      	movs	r0, #219	; 0xdb
 8001288:	f7ff ff82 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800128c:	2020      	movs	r0, #32
 800128e:	f7ff ff7f 	bl	8001190 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001292:	208d      	movs	r0, #141	; 0x8d
 8001294:	f7ff ff7c 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001298:	2014      	movs	r0, #20
 800129a:	f7ff ff79 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800129e:	2001      	movs	r0, #1
 80012a0:	f000 fa2e 	bl	8001700 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80012a4:	2000      	movs	r0, #0
 80012a6:	f000 f80f 	bl	80012c8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80012aa:	f000 f831 	bl	8001310 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <ssd1306_Init+0xd0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <ssd1306_Init+0xd0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80012ba:	4b02      	ldr	r3, [pc, #8]	; (80012c4 <ssd1306_Init+0xd0>)
 80012bc:	2201      	movs	r2, #1
 80012be:	711a      	strb	r2, [r3, #4]
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200004c0 	.word	0x200004c0

080012c8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	e00d      	b.n	80012f4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <ssd1306_Fill+0x1a>
 80012de:	2100      	movs	r1, #0
 80012e0:	e000      	b.n	80012e4 <ssd1306_Fill+0x1c>
 80012e2:	21ff      	movs	r1, #255	; 0xff
 80012e4:	4a09      	ldr	r2, [pc, #36]	; (800130c <ssd1306_Fill+0x44>)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4413      	add	r3, r2
 80012ea:	460a      	mov	r2, r1
 80012ec:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3301      	adds	r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012fa:	d3ed      	bcc.n	80012d8 <ssd1306_Fill+0x10>
    }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	200000c0 	.word	0x200000c0

08001310 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001316:	2300      	movs	r3, #0
 8001318:	71fb      	strb	r3, [r7, #7]
 800131a:	e016      	b.n	800134a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	3b50      	subs	r3, #80	; 0x50
 8001320:	b2db      	uxtb	r3, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff34 	bl	8001190 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff ff31 	bl	8001190 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800132e:	2010      	movs	r0, #16
 8001330:	f7ff ff2e 	bl	8001190 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	01db      	lsls	r3, r3, #7
 8001338:	4a08      	ldr	r2, [pc, #32]	; (800135c <ssd1306_UpdateScreen+0x4c>)
 800133a:	4413      	add	r3, r2
 800133c:	2180      	movs	r1, #128	; 0x80
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff3e 	bl	80011c0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	3301      	adds	r3, #1
 8001348:	71fb      	strb	r3, [r7, #7]
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2b07      	cmp	r3, #7
 800134e:	d9e5      	bls.n	800131c <ssd1306_UpdateScreen+0xc>
    }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200000c0 	.word	0x200000c0

08001360 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
 800136a:	460b      	mov	r3, r1
 800136c:	71bb      	strb	r3, [r7, #6]
 800136e:	4613      	mov	r3, r2
 8001370:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db3d      	blt.n	80013f6 <ssd1306_DrawPixel+0x96>
 800137a:	79bb      	ldrb	r3, [r7, #6]
 800137c:	2b3f      	cmp	r3, #63	; 0x3f
 800137e:	d83a      	bhi.n	80013f6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001380:	797b      	ldrb	r3, [r7, #5]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d11a      	bne.n	80013bc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001386:	79fa      	ldrb	r2, [r7, #7]
 8001388:	79bb      	ldrb	r3, [r7, #6]
 800138a:	08db      	lsrs	r3, r3, #3
 800138c:	b2d8      	uxtb	r0, r3
 800138e:	4603      	mov	r3, r0
 8001390:	01db      	lsls	r3, r3, #7
 8001392:	4413      	add	r3, r2
 8001394:	4a1b      	ldr	r2, [pc, #108]	; (8001404 <ssd1306_DrawPixel+0xa4>)
 8001396:	5cd3      	ldrb	r3, [r2, r3]
 8001398:	b25a      	sxtb	r2, r3
 800139a:	79bb      	ldrb	r3, [r7, #6]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	2101      	movs	r1, #1
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	b25b      	sxtb	r3, r3
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b259      	sxtb	r1, r3
 80013ac:	79fa      	ldrb	r2, [r7, #7]
 80013ae:	4603      	mov	r3, r0
 80013b0:	01db      	lsls	r3, r3, #7
 80013b2:	4413      	add	r3, r2
 80013b4:	b2c9      	uxtb	r1, r1
 80013b6:	4a13      	ldr	r2, [pc, #76]	; (8001404 <ssd1306_DrawPixel+0xa4>)
 80013b8:	54d1      	strb	r1, [r2, r3]
 80013ba:	e01d      	b.n	80013f8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013bc:	79fa      	ldrb	r2, [r7, #7]
 80013be:	79bb      	ldrb	r3, [r7, #6]
 80013c0:	08db      	lsrs	r3, r3, #3
 80013c2:	b2d8      	uxtb	r0, r3
 80013c4:	4603      	mov	r3, r0
 80013c6:	01db      	lsls	r3, r3, #7
 80013c8:	4413      	add	r3, r2
 80013ca:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <ssd1306_DrawPixel+0xa4>)
 80013cc:	5cd3      	ldrb	r3, [r2, r3]
 80013ce:	b25a      	sxtb	r2, r3
 80013d0:	79bb      	ldrb	r3, [r7, #6]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	2101      	movs	r1, #1
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	4013      	ands	r3, r2
 80013e4:	b259      	sxtb	r1, r3
 80013e6:	79fa      	ldrb	r2, [r7, #7]
 80013e8:	4603      	mov	r3, r0
 80013ea:	01db      	lsls	r3, r3, #7
 80013ec:	4413      	add	r3, r2
 80013ee:	b2c9      	uxtb	r1, r1
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <ssd1306_DrawPixel+0xa4>)
 80013f2:	54d1      	strb	r1, [r2, r3]
 80013f4:	e000      	b.n	80013f8 <ssd1306_DrawPixel+0x98>
        return;
 80013f6:	bf00      	nop
    }
}
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	200000c0 	.word	0x200000c0

08001408 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	4604      	mov	r4, r0
 8001410:	1d38      	adds	r0, r7, #4
 8001412:	e880 0006 	stmia.w	r0, {r1, r2}
 8001416:	461a      	mov	r2, r3
 8001418:	4623      	mov	r3, r4
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	4613      	mov	r3, r2
 800141e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	2b1f      	cmp	r3, #31
 8001424:	d902      	bls.n	800142c <ssd1306_WriteChar+0x24>
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	2b7e      	cmp	r3, #126	; 0x7e
 800142a:	d901      	bls.n	8001430 <ssd1306_WriteChar+0x28>
        return 0;
 800142c:	2300      	movs	r3, #0
 800142e:	e06d      	b.n	800150c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001430:	4b38      	ldr	r3, [pc, #224]	; (8001514 <ssd1306_WriteChar+0x10c>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	793b      	ldrb	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	2b80      	cmp	r3, #128	; 0x80
 800143c:	dc06      	bgt.n	800144c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800143e:	4b35      	ldr	r3, [pc, #212]	; (8001514 <ssd1306_WriteChar+0x10c>)
 8001440:	885b      	ldrh	r3, [r3, #2]
 8001442:	461a      	mov	r2, r3
 8001444:	797b      	ldrb	r3, [r7, #5]
 8001446:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001448:	2b40      	cmp	r3, #64	; 0x40
 800144a:	dd01      	ble.n	8001450 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800144c:	2300      	movs	r3, #0
 800144e:	e05d      	b.n	800150c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	e04c      	b.n	80014f0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	3b20      	subs	r3, #32
 800145c:	7979      	ldrb	r1, [r7, #5]
 800145e:	fb01 f303 	mul.w	r3, r1, r3
 8001462:	4619      	mov	r1, r3
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	440b      	add	r3, r1
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001470:	2300      	movs	r3, #0
 8001472:	61bb      	str	r3, [r7, #24]
 8001474:	e034      	b.n	80014e0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d012      	beq.n	80014ac <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <ssd1306_WriteChar+0x10c>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	4413      	add	r3, r2
 8001492:	b2d8      	uxtb	r0, r3
 8001494:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <ssd1306_WriteChar+0x10c>)
 8001496:	885b      	ldrh	r3, [r3, #2]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	4413      	add	r3, r2
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	7bba      	ldrb	r2, [r7, #14]
 80014a4:	4619      	mov	r1, r3
 80014a6:	f7ff ff5b 	bl	8001360 <ssd1306_DrawPixel>
 80014aa:	e016      	b.n	80014da <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80014ac:	4b19      	ldr	r3, [pc, #100]	; (8001514 <ssd1306_WriteChar+0x10c>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	4413      	add	r3, r2
 80014b8:	b2d8      	uxtb	r0, r3
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <ssd1306_WriteChar+0x10c>)
 80014bc:	885b      	ldrh	r3, [r3, #2]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	4413      	add	r3, r2
 80014c6:	b2d9      	uxtb	r1, r3
 80014c8:	7bbb      	ldrb	r3, [r7, #14]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bf0c      	ite	eq
 80014ce:	2301      	moveq	r3, #1
 80014d0:	2300      	movne	r3, #0
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	f7ff ff43 	bl	8001360 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	3301      	adds	r3, #1
 80014de:	61bb      	str	r3, [r7, #24]
 80014e0:	793b      	ldrb	r3, [r7, #4]
 80014e2:	461a      	mov	r2, r3
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d3c5      	bcc.n	8001476 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3301      	adds	r3, #1
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	797b      	ldrb	r3, [r7, #5]
 80014f2:	461a      	mov	r2, r3
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d3ad      	bcc.n	8001456 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <ssd1306_WriteChar+0x10c>)
 80014fc:	881a      	ldrh	r2, [r3, #0]
 80014fe:	793b      	ldrb	r3, [r7, #4]
 8001500:	b29b      	uxth	r3, r3
 8001502:	4413      	add	r3, r2
 8001504:	b29a      	uxth	r2, r3
 8001506:	4b03      	ldr	r3, [pc, #12]	; (8001514 <ssd1306_WriteChar+0x10c>)
 8001508:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800150a:	7bfb      	ldrb	r3, [r7, #15]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3724      	adds	r7, #36	; 0x24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd90      	pop	{r4, r7, pc}
 8001514:	200004c0 	.word	0x200004c0

08001518 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	1d38      	adds	r0, r7, #4
 8001522:	e880 0006 	stmia.w	r0, {r1, r2}
 8001526:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001528:	e012      	b.n	8001550 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	7818      	ldrb	r0, [r3, #0]
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	1d3a      	adds	r2, r7, #4
 8001532:	ca06      	ldmia	r2, {r1, r2}
 8001534:	f7ff ff68 	bl	8001408 <ssd1306_WriteChar>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d002      	beq.n	800154a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	e008      	b.n	800155c <ssd1306_WriteString+0x44>
        }
        str++;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3301      	adds	r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e8      	bne.n	800152a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	781b      	ldrb	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	460a      	mov	r2, r1
 800156e:	71fb      	strb	r3, [r7, #7]
 8001570:	4613      	mov	r3, r2
 8001572:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	b29a      	uxth	r2, r3
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <ssd1306_SetCursor+0x2c>)
 800157a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800157c:	79bb      	ldrb	r3, [r7, #6]
 800157e:	b29a      	uxth	r2, r3
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <ssd1306_SetCursor+0x2c>)
 8001582:	805a      	strh	r2, [r3, #2]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	200004c0 	.word	0x200004c0

08001594 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b089      	sub	sp, #36	; 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	4604      	mov	r4, r0
 800159c:	4608      	mov	r0, r1
 800159e:	4611      	mov	r1, r2
 80015a0:	461a      	mov	r2, r3
 80015a2:	4623      	mov	r3, r4
 80015a4:	71fb      	strb	r3, [r7, #7]
 80015a6:	4603      	mov	r3, r0
 80015a8:	71bb      	strb	r3, [r7, #6]
 80015aa:	460b      	mov	r3, r1
 80015ac:	717b      	strb	r3, [r7, #5]
 80015ae:	4613      	mov	r3, r2
 80015b0:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80015b2:	797a      	ldrb	r2, [r7, #5]
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bfb8      	it	lt
 80015bc:	425b      	neglt	r3, r3
 80015be:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80015c0:	793a      	ldrb	r2, [r7, #4]
 80015c2:	79bb      	ldrb	r3, [r7, #6]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	bfb8      	it	lt
 80015ca:	425b      	neglt	r3, r3
 80015cc:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80015ce:	79fa      	ldrb	r2, [r7, #7]
 80015d0:	797b      	ldrb	r3, [r7, #5]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d201      	bcs.n	80015da <ssd1306_Line+0x46>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e001      	b.n	80015de <ssd1306_Line+0x4a>
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
 80015de:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80015e0:	79ba      	ldrb	r2, [r7, #6]
 80015e2:	793b      	ldrb	r3, [r7, #4]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d201      	bcs.n	80015ec <ssd1306_Line+0x58>
 80015e8:	2301      	movs	r3, #1
 80015ea:	e001      	b.n	80015f0 <ssd1306_Line+0x5c>
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295
 80015f0:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80015fa:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80015fe:	7939      	ldrb	r1, [r7, #4]
 8001600:	797b      	ldrb	r3, [r7, #5]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff feac 	bl	8001360 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001608:	e024      	b.n	8001654 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800160a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800160e:	79b9      	ldrb	r1, [r7, #6]
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fea4 	bl	8001360 <ssd1306_DrawPixel>
        error2 = error * 2;
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	425b      	negs	r3, r3
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	429a      	cmp	r2, r3
 8001626:	dd08      	ble.n	800163a <ssd1306_Line+0xa6>
            error -= deltaY;
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	4413      	add	r3, r2
 8001638:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	429a      	cmp	r2, r3
 8001640:	da08      	bge.n	8001654 <ssd1306_Line+0xc0>
            error += deltaX;
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	4413      	add	r3, r2
 8001648:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	79bb      	ldrb	r3, [r7, #6]
 8001650:	4413      	add	r3, r2
 8001652:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8001654:	79fa      	ldrb	r2, [r7, #7]
 8001656:	797b      	ldrb	r3, [r7, #5]
 8001658:	429a      	cmp	r2, r3
 800165a:	d1d6      	bne.n	800160a <ssd1306_Line+0x76>
 800165c:	79ba      	ldrb	r2, [r7, #6]
 800165e:	793b      	ldrb	r3, [r7, #4]
 8001660:	429a      	cmp	r2, r3
 8001662:	d1d2      	bne.n	800160a <ssd1306_Line+0x76>
        }
    }
    return;
 8001664:	bf00      	nop
}
 8001666:	3724      	adds	r7, #36	; 0x24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd90      	pop	{r4, r7, pc}

0800166c <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b085      	sub	sp, #20
 8001670:	af02      	add	r7, sp, #8
 8001672:	4604      	mov	r4, r0
 8001674:	4608      	mov	r0, r1
 8001676:	4611      	mov	r1, r2
 8001678:	461a      	mov	r2, r3
 800167a:	4623      	mov	r3, r4
 800167c:	71fb      	strb	r3, [r7, #7]
 800167e:	4603      	mov	r3, r0
 8001680:	71bb      	strb	r3, [r7, #6]
 8001682:	460b      	mov	r3, r1
 8001684:	717b      	strb	r3, [r7, #5]
 8001686:	4613      	mov	r3, r2
 8001688:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 800168a:	79bc      	ldrb	r4, [r7, #6]
 800168c:	797a      	ldrb	r2, [r7, #5]
 800168e:	79b9      	ldrb	r1, [r7, #6]
 8001690:	79f8      	ldrb	r0, [r7, #7]
 8001692:	7e3b      	ldrb	r3, [r7, #24]
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	4623      	mov	r3, r4
 8001698:	f7ff ff7c 	bl	8001594 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 800169c:	793c      	ldrb	r4, [r7, #4]
 800169e:	797a      	ldrb	r2, [r7, #5]
 80016a0:	79b9      	ldrb	r1, [r7, #6]
 80016a2:	7978      	ldrb	r0, [r7, #5]
 80016a4:	7e3b      	ldrb	r3, [r7, #24]
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	4623      	mov	r3, r4
 80016aa:	f7ff ff73 	bl	8001594 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80016ae:	793c      	ldrb	r4, [r7, #4]
 80016b0:	79fa      	ldrb	r2, [r7, #7]
 80016b2:	7939      	ldrb	r1, [r7, #4]
 80016b4:	7978      	ldrb	r0, [r7, #5]
 80016b6:	7e3b      	ldrb	r3, [r7, #24]
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	4623      	mov	r3, r4
 80016bc:	f7ff ff6a 	bl	8001594 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80016c0:	79bc      	ldrb	r4, [r7, #6]
 80016c2:	79fa      	ldrb	r2, [r7, #7]
 80016c4:	7939      	ldrb	r1, [r7, #4]
 80016c6:	79f8      	ldrb	r0, [r7, #7]
 80016c8:	7e3b      	ldrb	r3, [r7, #24]
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	4623      	mov	r3, r4
 80016ce:	f7ff ff61 	bl	8001594 <ssd1306_Line>

    return;
 80016d2:	bf00      	nop
}
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd90      	pop	{r4, r7, pc}

080016da <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80016e4:	2381      	movs	r3, #129	; 0x81
 80016e6:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fd50 	bl	8001190 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fd4c 	bl	8001190 <ssd1306_WriteCommand>
}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001710:	23af      	movs	r3, #175	; 0xaf
 8001712:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <ssd1306_SetDisplayOn+0x38>)
 8001716:	2201      	movs	r2, #1
 8001718:	715a      	strb	r2, [r3, #5]
 800171a:	e004      	b.n	8001726 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800171c:	23ae      	movs	r3, #174	; 0xae
 800171e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <ssd1306_SetDisplayOn+0x38>)
 8001722:	2200      	movs	r2, #0
 8001724:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fd31 	bl	8001190 <ssd1306_WriteCommand>
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200004c0 	.word	0x200004c0
 800173c:	00000000 	.word	0x00000000

08001740 <ARGB_Init>:

/**
 * @brief Init timer & prescalers
 * @param none
 */
void ARGB_Init(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
#endif
#ifdef APB2
    APBfq = HAL_RCC_GetPCLK2Freq();
 8001746:	f004 fe8d 	bl	8006464 <HAL_RCC_GetPCLK2Freq>
 800174a:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
 800174c:	4b32      	ldr	r3, [pc, #200]	; (8001818 <ARGB_Init+0xd8>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <ARGB_Init+0x1c>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <ARGB_Init+0x1e>
 800175c:	2302      	movs	r3, #2
 800175e:	461a      	mov	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	fb02 f303 	mul.w	r3, r2, r3
 8001766:	607b      	str	r3, [r7, #4]
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	0a1b      	lsrs	r3, r3, #8
 800176c:	4a2b      	ldr	r2, [pc, #172]	; (800181c <ARGB_Init+0xdc>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	607b      	str	r3, [r7, #4]
#endif
    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8001776:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <ARGB_Init+0xe0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2200      	movs	r2, #0
 800177c:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	b29b      	uxth	r3, r3
 8001782:	3b01      	subs	r3, #1
 8001784:	b29a      	uxth	r2, r3
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <ARGB_Init+0xe0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 800178c:	4b24      	ldr	r3, [pc, #144]	; (8001820 <ARGB_Init+0xe0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2201      	movs	r2, #1
 8001792:	615a      	str	r2, [r3, #20]
#if defined(WS2811F) || defined(WS2811S)
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us/1.2us
    PWM_LO = (u8_t) (APBfq * 0.20) - 1;     // Log.0 - 20% - 0.25us/0.5us
#endif
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7fe fe65 	bl	8000464 <__aeabi_ui2d>
 800179a:	a31b      	add	r3, pc, #108	; (adr r3, 8001808 <ARGB_Init+0xc8>)
 800179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a0:	f7fe feda 	bl	8000558 <__aeabi_dmul>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff f8e6 	bl	800097c <__aeabi_d2uiz>
 80017b0:	4603      	mov	r3, r0
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	3b01      	subs	r3, #1
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <ARGB_Init+0xe4>)
 80017ba:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7fe fe51 	bl	8000464 <__aeabi_ui2d>
 80017c2:	a313      	add	r3, pc, #76	; (adr r3, 8001810 <ARGB_Init+0xd0>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f7fe fec6 	bl	8000558 <__aeabi_dmul>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f7ff f8d2 	bl	800097c <__aeabi_d2uiz>
 80017d8:	4603      	mov	r3, r0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	3b01      	subs	r3, #1
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <ARGB_Init+0xe8>)
 80017e2:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <ARGB_Init+0xec>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 80017ea:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <ARGB_Init+0xe0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2201      	movs	r2, #1
 80017f0:	2104      	movs	r1, #4
 80017f2:	4618      	mov	r0, r3
 80017f4:	f005 fdc2 	bl	800737c <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 80017f8:	2001      	movs	r0, #1
 80017fa:	f001 fe3f 	bl	800347c <HAL_Delay>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	1eb851ec 	.word	0x1eb851ec
 800180c:	3fe1eb85 	.word	0x3fe1eb85
 8001810:	1eb851ec 	.word	0x1eb851ec
 8001814:	3fd1eb85 	.word	0x3fd1eb85
 8001818:	40023800 	.word	0x40023800
 800181c:	014f8b59 	.word	0x014f8b59
 8001820:	2000065c 	.word	0x2000065c
 8001824:	200004c6 	.word	0x200004c6
 8001828:	200004c7 	.word	0x200004c7
 800182c:	200005a2 	.word	0x200005a2

08001830 <ARGB_Clear>:
/**
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 */
void ARGB_Clear(void) {
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
    ARGB_FillRGB(0, 0, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	2100      	movs	r1, #0
 8001838:	2000      	movs	r0, #0
 800183a:	f000 f885 	bl	8001948 <ARGB_FillRGB>
#ifdef SK6812
    ARGB_FillWhite(0);
#endif
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <ARGB_SetBrightness>:

/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 */
void ARGB_SetBrightness(u8_t br) {
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 800184e:	4a04      	ldr	r2, [pc, #16]	; (8001860 <ARGB_SetBrightness+0x1c>)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	7013      	strb	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	20000010 	.word	0x20000010

08001864 <ARGB_SetRGB>:
 * @param[in] i LED position
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	4604      	mov	r4, r0
 800186c:	4608      	mov	r0, r1
 800186e:	4611      	mov	r1, r2
 8001870:	461a      	mov	r2, r3
 8001872:	4623      	mov	r3, r4
 8001874:	80fb      	strh	r3, [r7, #6]
 8001876:	4603      	mov	r3, r0
 8001878:	717b      	strb	r3, [r7, #5]
 800187a:	460b      	mov	r3, r1
 800187c:	713b      	strb	r3, [r7, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	2b07      	cmp	r3, #7
 8001886:	d908      	bls.n	800189a <ARGB_SetRGB+0x36>
        u16_t _i = i / NUM_PIXELS;
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	08db      	lsrs	r3, r3, #3
 800188c:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 800188e:	89fb      	ldrh	r3, [r7, #14]
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	b29b      	uxth	r3, r3
 8001894:	88fa      	ldrh	r2, [r7, #6]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 800189a:	4b29      	ldr	r3, [pc, #164]	; (8001940 <ARGB_SetRGB+0xdc>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	3301      	adds	r3, #1
 80018a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80018aa:	797a      	ldrb	r2, [r7, #5]
 80018ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80018b0:	717b      	strb	r3, [r7, #5]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 80018b2:	4b23      	ldr	r3, [pc, #140]	; (8001940 <ARGB_SetRGB+0xdc>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	3301      	adds	r3, #1
 80018ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018be:	fb92 f3f3 	sdiv	r3, r2, r3
 80018c2:	793a      	ldrb	r2, [r7, #4]
 80018c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80018c8:	713b      	strb	r3, [r7, #4]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 80018ca:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <ARGB_SetRGB+0xdc>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	3301      	adds	r3, #1
 80018d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80018da:	78fa      	ldrb	r2, [r7, #3]
 80018dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80018e0:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 80018e2:	793b      	ldrb	r3, [r7, #4]
 80018e4:	21b0      	movs	r1, #176	; 0xb0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 f9ca 	bl	8001c80 <scale8>
 80018ec:	4603      	mov	r3, r0
 80018ee:	713b      	strb	r3, [r7, #4]
    b = scale8(b, 0xF0);
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	21f0      	movs	r1, #240	; 0xf0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 f9c3 	bl	8001c80 <scale8>
 80018fa:	4603      	mov	r3, r0
 80018fc:	70fb      	strb	r3, [r7, #3]
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
    const u8_t subp2 = g;
    const u8_t subp3 = b;
#else
    const u8_t subp1 = g;
 80018fe:	793b      	ldrb	r3, [r7, #4]
 8001900:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = r;
 8001902:	797b      	ldrb	r3, [r7, #5]
 8001904:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	72fb      	strb	r3, [r7, #11]
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
 800190a:	88fa      	ldrh	r2, [r7, #6]
 800190c:	4613      	mov	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4413      	add	r3, r2
 8001912:	490c      	ldr	r1, [pc, #48]	; (8001944 <ARGB_SetRGB+0xe0>)
 8001914:	7b7a      	ldrb	r2, [r7, #13]
 8001916:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
 8001918:	88fa      	ldrh	r2, [r7, #6]
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	3301      	adds	r3, #1
 8001922:	4908      	ldr	r1, [pc, #32]	; (8001944 <ARGB_SetRGB+0xe0>)
 8001924:	7b3a      	ldrb	r2, [r7, #12]
 8001926:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
 8001928:	88fa      	ldrh	r2, [r7, #6]
 800192a:	4613      	mov	r3, r2
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	4413      	add	r3, r2
 8001930:	3302      	adds	r3, #2
 8001932:	4904      	ldr	r1, [pc, #16]	; (8001944 <ARGB_SetRGB+0xe0>)
 8001934:	7afa      	ldrb	r2, [r7, #11]
 8001936:	54ca      	strb	r2, [r1, r3]
#endif
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	bd90      	pop	{r4, r7, pc}
 8001940:	20000010 	.word	0x20000010
 8001944:	200004c8 	.word	0x200004c8

08001948 <ARGB_FillRGB>:
 * @brief Fill ALL LEDs with RGB color
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
 8001952:	460b      	mov	r3, r1
 8001954:	71bb      	strb	r3, [r7, #6]
 8001956:	4613      	mov	r3, r2
 8001958:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800195a:	2300      	movs	r3, #0
 800195c:	81fb      	strh	r3, [r7, #14]
 800195e:	e00b      	b.n	8001978 <ARGB_FillRGB+0x30>
        ARGB_SetRGB(i, r, g, b);
 8001960:	89fb      	ldrh	r3, [r7, #14]
 8001962:	b298      	uxth	r0, r3
 8001964:	797b      	ldrb	r3, [r7, #5]
 8001966:	79ba      	ldrb	r2, [r7, #6]
 8001968:	79f9      	ldrb	r1, [r7, #7]
 800196a:	f7ff ff7b 	bl	8001864 <ARGB_SetRGB>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800196e:	89fb      	ldrh	r3, [r7, #14]
 8001970:	b29b      	uxth	r3, r3
 8001972:	3301      	adds	r3, #1
 8001974:	b29b      	uxth	r3, r3
 8001976:	81fb      	strh	r3, [r7, #14]
 8001978:	89fb      	ldrh	r3, [r7, #14]
 800197a:	b29b      	uxth	r3, r3
 800197c:	2b07      	cmp	r3, #7
 800197e:	d9ef      	bls.n	8001960 <ARGB_FillRGB+0x18>
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <ARGB_Show>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show(void) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
    ARGB_LOC_ST = ARGB_BUSY;
 8001992:	4b9d      	ldr	r3, [pc, #628]	; (8001c08 <ARGB_Show+0x27c>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 8001998:	4b9c      	ldr	r3, [pc, #624]	; (8001c0c <ARGB_Show+0x280>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	b29b      	uxth	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d105      	bne.n	80019ae <ARGB_Show+0x22>
 80019a2:	4b9b      	ldr	r3, [pc, #620]	; (8001c10 <ARGB_Show+0x284>)
 80019a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d001      	beq.n	80019b2 <ARGB_Show+0x26>
        return ARGB_BUSY;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e15e      	b.n	8001c70 <ARGB_Show+0x2e4>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 80019b2:	2300      	movs	r3, #0
 80019b4:	71fb      	strb	r3, [r7, #7]
 80019b6:	e0a6      	b.n	8001b06 <ARGB_Show+0x17a>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80019b8:	4b96      	ldr	r3, [pc, #600]	; (8001c14 <ARGB_Show+0x288>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	461a      	mov	r2, r3
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	dd04      	ble.n	80019da <ARGB_Show+0x4e>
 80019d0:	4b91      	ldr	r3, [pc, #580]	; (8001c18 <ARGB_Show+0x28c>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	e003      	b.n	80019e2 <ARGB_Show+0x56>
 80019da:	4b90      	ldr	r3, [pc, #576]	; (8001c1c <ARGB_Show+0x290>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	461a      	mov	r2, r3
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	4619      	mov	r1, r3
 80019e8:	4b8d      	ldr	r3, [pc, #564]	; (8001c20 <ARGB_Show+0x294>)
 80019ea:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80019ee:	4b89      	ldr	r3, [pc, #548]	; (8001c14 <ARGB_Show+0x288>)
 80019f0:	785b      	ldrb	r3, [r3, #1]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	dd04      	ble.n	8001a10 <ARGB_Show+0x84>
 8001a06:	4b84      	ldr	r3, [pc, #528]	; (8001c18 <ARGB_Show+0x28c>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	e003      	b.n	8001a18 <ARGB_Show+0x8c>
 8001a10:	4b82      	ldr	r3, [pc, #520]	; (8001c1c <ARGB_Show+0x290>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	4619      	mov	r1, r3
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	3308      	adds	r3, #8
 8001a1e:	4a80      	ldr	r2, [pc, #512]	; (8001c20 <ARGB_Show+0x294>)
 8001a20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001a24:	4b7b      	ldr	r3, [pc, #492]	; (8001c14 <ARGB_Show+0x288>)
 8001a26:	789b      	ldrb	r3, [r3, #2]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	dd04      	ble.n	8001a46 <ARGB_Show+0xba>
 8001a3c:	4b76      	ldr	r3, [pc, #472]	; (8001c18 <ARGB_Show+0x28c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	4619      	mov	r1, r3
 8001a44:	e003      	b.n	8001a4e <ARGB_Show+0xc2>
 8001a46:	4b75      	ldr	r3, [pc, #468]	; (8001c1c <ARGB_Show+0x290>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	3310      	adds	r3, #16
 8001a54:	4a72      	ldr	r2, [pc, #456]	; (8001c20 <ARGB_Show+0x294>)
 8001a56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001a5a:	4b6e      	ldr	r3, [pc, #440]	; (8001c14 <ARGB_Show+0x288>)
 8001a5c:	78db      	ldrb	r3, [r3, #3]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	461a      	mov	r2, r3
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	dd04      	ble.n	8001a7c <ARGB_Show+0xf0>
 8001a72:	4b69      	ldr	r3, [pc, #420]	; (8001c18 <ARGB_Show+0x28c>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	4619      	mov	r1, r3
 8001a7a:	e003      	b.n	8001a84 <ARGB_Show+0xf8>
 8001a7c:	4b67      	ldr	r3, [pc, #412]	; (8001c1c <ARGB_Show+0x290>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	4619      	mov	r1, r3
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	3318      	adds	r3, #24
 8001a8a:	4a65      	ldr	r2, [pc, #404]	; (8001c20 <ARGB_Show+0x294>)
 8001a8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001a90:	4b60      	ldr	r3, [pc, #384]	; (8001c14 <ARGB_Show+0x288>)
 8001a92:	791b      	ldrb	r3, [r3, #4]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	461a      	mov	r2, r3
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	dd04      	ble.n	8001ab2 <ARGB_Show+0x126>
 8001aa8:	4b5b      	ldr	r3, [pc, #364]	; (8001c18 <ARGB_Show+0x28c>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	4619      	mov	r1, r3
 8001ab0:	e003      	b.n	8001aba <ARGB_Show+0x12e>
 8001ab2:	4b5a      	ldr	r3, [pc, #360]	; (8001c1c <ARGB_Show+0x290>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	4619      	mov	r1, r3
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	3320      	adds	r3, #32
 8001ac0:	4a57      	ldr	r2, [pc, #348]	; (8001c20 <ARGB_Show+0x294>)
 8001ac2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001ac6:	4b53      	ldr	r3, [pc, #332]	; (8001c14 <ARGB_Show+0x288>)
 8001ac8:	795b      	ldrb	r3, [r3, #5]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	461a      	mov	r2, r3
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	dd04      	ble.n	8001ae8 <ARGB_Show+0x15c>
 8001ade:	4b4e      	ldr	r3, [pc, #312]	; (8001c18 <ARGB_Show+0x28c>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	e003      	b.n	8001af0 <ARGB_Show+0x164>
 8001ae8:	4b4c      	ldr	r3, [pc, #304]	; (8001c1c <ARGB_Show+0x290>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	4619      	mov	r1, r3
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	3328      	adds	r3, #40	; 0x28
 8001af6:	4a4a      	ldr	r2, [pc, #296]	; (8001c20 <ARGB_Show+0x294>)
 8001af8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	3301      	adds	r3, #1
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	71fb      	strb	r3, [r7, #7]
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b07      	cmp	r3, #7
 8001b0c:	f67f af54 	bls.w	80019b8 <ARGB_Show+0x2c>
#ifdef SK6812
            PWM_BUF[i + 48] = (((RGB_BUF[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001b14:	e0a4      	b.n	8001c60 <ARGB_Show+0x2d4>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8001b16:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <ARGB_Show+0x298>)
 8001b18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d102      	bne.n	8001b28 <ARGB_Show+0x19c>
                DMA_Send_Stat = HAL_BUSY;
 8001b22:	2302      	movs	r3, #2
 8001b24:	73fb      	strb	r3, [r7, #15]
                continue;
 8001b26:	e09b      	b.n	8001c60 <ARGB_Show+0x2d4>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 8001b28:	4b3e      	ldr	r3, [pc, #248]	; (8001c24 <ARGB_Show+0x298>)
 8001b2a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d11d      	bne.n	8001b70 <ARGB_Show+0x1e4>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b34:	4b3b      	ldr	r3, [pc, #236]	; (8001c24 <ARGB_Show+0x298>)
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
#elif TIM_CH == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 8001b3c:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <ARGB_Show+0x298>)
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b40:	4a39      	ldr	r2, [pc, #228]	; (8001c28 <ARGB_Show+0x29c>)
 8001b42:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 8001b44:	4b37      	ldr	r3, [pc, #220]	; (8001c24 <ARGB_Show+0x298>)
 8001b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b48:	4a38      	ldr	r2, [pc, #224]	; (8001c2c <ARGB_Show+0x2a0>)
 8001b4a:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8001b4c:	4b35      	ldr	r3, [pc, #212]	; (8001c24 <ARGB_Show+0x298>)
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b50:	4a37      	ldr	r2, [pc, #220]	; (8001c30 <ARGB_Show+0x2a4>)
 8001b52:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8001b54:	4b33      	ldr	r3, [pc, #204]	; (8001c24 <ARGB_Show+0x298>)
 8001b56:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001b58:	4931      	ldr	r1, [pc, #196]	; (8001c20 <ARGB_Show+0x294>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 8001b5a:	4b32      	ldr	r3, [pc, #200]	; (8001c24 <ARGB_Show+0x298>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	3338      	adds	r3, #56	; 0x38
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8001b60:	461a      	mov	r2, r3
 8001b62:	2330      	movs	r3, #48	; 0x30
 8001b64:	f001 fe3e 	bl	80037e4 <HAL_DMA_Start_IT>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d006      	beq.n	8001b7c <ARGB_Show+0x1f0>
 8001b6e:	e002      	b.n	8001b76 <ARGB_Show+0x1ea>
                DMA_Send_Stat = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
                continue;
 8001b74:	e074      	b.n	8001c60 <ARGB_Show+0x2d4>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
                continue;
 8001b7a:	e071      	b.n	8001c60 <ARGB_Show+0x2d4>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 8001b7c:	4b29      	ldr	r3, [pc, #164]	; (8001c24 <ARGB_Show+0x298>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <ARGB_Show+0x298>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b8a:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8001b8c:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <ARGB_Show+0x298>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a28      	ldr	r2, [pc, #160]	; (8001c34 <ARGB_Show+0x2a8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d107      	bne.n	8001ba6 <ARGB_Show+0x21a>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8001b96:	4b23      	ldr	r3, [pc, #140]	; (8001c24 <ARGB_Show+0x298>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b9c:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <ARGB_Show+0x298>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ba4:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001ba6:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <ARGB_Show+0x298>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a22      	ldr	r2, [pc, #136]	; (8001c34 <ARGB_Show+0x2a8>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d018      	beq.n	8001be2 <ARGB_Show+0x256>
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <ARGB_Show+0x298>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb8:	d013      	beq.n	8001be2 <ARGB_Show+0x256>
 8001bba:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <ARGB_Show+0x298>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a1e      	ldr	r2, [pc, #120]	; (8001c38 <ARGB_Show+0x2ac>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d00e      	beq.n	8001be2 <ARGB_Show+0x256>
 8001bc4:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <ARGB_Show+0x298>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1c      	ldr	r2, [pc, #112]	; (8001c3c <ARGB_Show+0x2b0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d009      	beq.n	8001be2 <ARGB_Show+0x256>
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <ARGB_Show+0x298>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a1b      	ldr	r2, [pc, #108]	; (8001c40 <ARGB_Show+0x2b4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d004      	beq.n	8001be2 <ARGB_Show+0x256>
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <ARGB_Show+0x298>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a19      	ldr	r2, [pc, #100]	; (8001c44 <ARGB_Show+0x2b8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d132      	bne.n	8001c48 <ARGB_Show+0x2bc>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <ARGB_Show+0x298>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2b06      	cmp	r3, #6
 8001bf2:	d032      	beq.n	8001c5a <ARGB_Show+0x2ce>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <ARGB_Show+0x298>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <ARGB_Show+0x298>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001c04:	e029      	b.n	8001c5a <ARGB_Show+0x2ce>
 8001c06:	bf00      	nop
 8001c08:	200005a2 	.word	0x200005a2
 8001c0c:	200005a0 	.word	0x200005a0
 8001c10:	200006a4 	.word	0x200006a4
 8001c14:	200004c8 	.word	0x200004c8
 8001c18:	200004c6 	.word	0x200004c6
 8001c1c:	200004c7 	.word	0x200004c7
 8001c20:	200004e0 	.word	0x200004e0
 8001c24:	2000065c 	.word	0x2000065c
 8001c28:	08001ca9 	.word	0x08001ca9
 8001c2c:	08001f59 	.word	0x08001f59
 8001c30:	08006d9f 	.word	0x08006d9f
 8001c34:	40010000 	.word	0x40010000
 8001c38:	40000400 	.word	0x40000400
 8001c3c:	40000800 	.word	0x40000800
 8001c40:	40000c00 	.word	0x40000c00
 8001c44:	40014000 	.word	0x40014000
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <ARGB_Show+0x2ec>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <ARGB_Show+0x2ec>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	e000      	b.n	8001c5c <ARGB_Show+0x2d0>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001c5a:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f47f af57 	bne.w	8001b16 <ARGB_Show+0x18a>
        }
        BUF_COUNTER = 2;
 8001c68:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <ARGB_Show+0x2f0>)
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 8001c6e:	2302      	movs	r3, #2
    }
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	2000065c 	.word	0x2000065c
 8001c7c:	200005a0 	.word	0x200005a0

08001c80 <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	460a      	mov	r2, r1
 8001c8a:	71fb      	strb	r3, [r7, #7]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	79ba      	ldrb	r2, [r7, #6]
 8001c94:	fb02 f303 	mul.w	r3, r2, r3
 8001c98:	121b      	asrs	r3, r3, #8
 8001c9a:	b2db      	uxtb	r3, r3
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <ARGB_TIM_DMADelayPulseCplt>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb4:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a9d      	ldr	r2, [pc, #628]	; (8001f30 <ARGB_TIM_DMADelayPulseCplt+0x288>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	f040 8131 	bne.w	8001f22 <ARGB_TIM_DMADelayPulseCplt+0x27a>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4a9c      	ldr	r2, [pc, #624]	; (8001f34 <ARGB_TIM_DMADelayPulseCplt+0x28c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	f040 812c 	bne.w	8001f22 <ARGB_TIM_DMADelayPulseCplt+0x27a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001cca:	4b9b      	ldr	r3, [pc, #620]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 8128 	beq.w	8001f26 <ARGB_TIM_DMADelayPulseCplt+0x27e>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d10b      	bne.n	8001cf8 <ARGB_TIM_DMADelayPulseCplt+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d136      	bne.n	8001d5c <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cf6:	e031      	b.n	8001d5c <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d10b      	bne.n	8001d1a <ARGB_TIM_DMADelayPulseCplt+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2202      	movs	r2, #2
 8001d06:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d125      	bne.n	8001d5c <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d18:	e020      	b.n	8001d5c <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d10b      	bne.n	8001d3c <ARGB_TIM_DMADelayPulseCplt+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2204      	movs	r2, #4
 8001d28:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d114      	bne.n	8001d5c <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d3a:	e00f      	b.n	8001d5c <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d10a      	bne.n	8001d5c <ARGB_TIM_DMADelayPulseCplt+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2208      	movs	r2, #8
 8001d4a:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d103      	bne.n	8001d5c <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8001d5c:	4b76      	ldr	r3, [pc, #472]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	2b07      	cmp	r3, #7
 8001d64:	d87b      	bhi.n	8001e5e <ARGB_TIM_DMADelayPulseCplt+0x1b6>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001d66:	2300      	movs	r3, #0
 8001d68:	72fb      	strb	r3, [r7, #11]
 8001d6a:	e06c      	b.n	8001e46 <ARGB_TIM_DMADelayPulseCplt+0x19e>
            PWM_BUF[i + 32] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 40] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 48] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#else
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001d6c:	4b72      	ldr	r3, [pc, #456]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	4a70      	ldr	r2, [pc, #448]	; (8001f3c <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001d7c:	5cd3      	ldrb	r3, [r2, r3]
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	7afb      	ldrb	r3, [r7, #11]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	dd04      	ble.n	8001d9c <ARGB_TIM_DMADelayPulseCplt+0xf4>
 8001d92:	4b6b      	ldr	r3, [pc, #428]	; (8001f40 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	4619      	mov	r1, r3
 8001d9a:	e003      	b.n	8001da4 <ARGB_TIM_DMADelayPulseCplt+0xfc>
 8001d9c:	4b69      	ldr	r3, [pc, #420]	; (8001f44 <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	4619      	mov	r1, r3
 8001da4:	7afb      	ldrb	r3, [r7, #11]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	3318      	adds	r3, #24
 8001daa:	4a67      	ldr	r2, [pc, #412]	; (8001f48 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001dac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001db0:	4b61      	ldr	r3, [pc, #388]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	461a      	mov	r2, r3
 8001db8:	4613      	mov	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	4a5e      	ldr	r2, [pc, #376]	; (8001f3c <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001dc2:	5cd3      	ldrb	r3, [r2, r3]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	7afb      	ldrb	r3, [r7, #11]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	dd04      	ble.n	8001de2 <ARGB_TIM_DMADelayPulseCplt+0x13a>
 8001dd8:	4b59      	ldr	r3, [pc, #356]	; (8001f40 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	4619      	mov	r1, r3
 8001de0:	e003      	b.n	8001dea <ARGB_TIM_DMADelayPulseCplt+0x142>
 8001de2:	4b58      	ldr	r3, [pc, #352]	; (8001f44 <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	4619      	mov	r1, r3
 8001dea:	7afb      	ldrb	r3, [r7, #11]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	3320      	adds	r3, #32
 8001df0:	4a55      	ldr	r2, [pc, #340]	; (8001f48 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001df2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001df6:	4b50      	ldr	r3, [pc, #320]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	3302      	adds	r3, #2
 8001e06:	4a4d      	ldr	r2, [pc, #308]	; (8001f3c <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001e08:	5cd3      	ldrb	r3, [r2, r3]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	7afb      	ldrb	r3, [r7, #11]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	dd04      	ble.n	8001e28 <ARGB_TIM_DMADelayPulseCplt+0x180>
 8001e1e:	4b48      	ldr	r3, [pc, #288]	; (8001f40 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	4619      	mov	r1, r3
 8001e26:	e003      	b.n	8001e30 <ARGB_TIM_DMADelayPulseCplt+0x188>
 8001e28:	4b46      	ldr	r3, [pc, #280]	; (8001f44 <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	4619      	mov	r1, r3
 8001e30:	7afb      	ldrb	r3, [r7, #11]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	3328      	adds	r3, #40	; 0x28
 8001e36:	4a44      	ldr	r2, [pc, #272]	; (8001f48 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001e38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001e3c:	7afb      	ldrb	r3, [r7, #11]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	3301      	adds	r3, #1
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	72fb      	strb	r3, [r7, #11]
 8001e46:	7afb      	ldrb	r3, [r7, #11]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b07      	cmp	r3, #7
 8001e4c:	d98e      	bls.n	8001d6c <ARGB_TIM_DMADelayPulseCplt+0xc4>
#endif
        }
        BUF_COUNTER++;
 8001e4e:	4b3a      	ldr	r3, [pc, #232]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	3301      	adds	r3, #1
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	4b37      	ldr	r3, [pc, #220]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e5a:	801a      	strh	r2, [r3, #0]
 8001e5c:	e05d      	b.n	8001f1a <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 8001e5e:	4b36      	ldr	r3, [pc, #216]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	2b09      	cmp	r3, #9
 8001e66:	d80c      	bhi.n	8001e82 <ARGB_TIM_DMADelayPulseCplt+0x1da>
        memset((dma_siz *) &PWM_BUF[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 8001e68:	2260      	movs	r2, #96	; 0x60
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4837      	ldr	r0, [pc, #220]	; (8001f4c <ARGB_TIM_DMADelayPulseCplt+0x2a4>)
 8001e6e:	f008 fd79 	bl	800a964 <memset>
        BUF_COUNTER++;
 8001e72:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	3301      	adds	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e7e:	801a      	strh	r2, [r3, #0]
 8001e80:	e04b      	b.n	8001f1a <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else { // if END of transfer
        BUF_COUNTER = 0;
 8001e82:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	801a      	strh	r2, [r3, #0]
#if TIM_CH == TIM_CHANNEL_1
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
#endif
#if TIM_CH == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e96:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f001 fcf9 	bl	8003894 <HAL_DMA_Abort_IT>
#endif
#if TIM_CH == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a2a      	ldr	r2, [pc, #168]	; (8001f50 <ARGB_TIM_DMADelayPulseCplt+0x2a8>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d117      	bne.n	8001edc <ARGB_TIM_DMADelayPulseCplt+0x234>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6a1a      	ldr	r2, [r3, #32]
 8001eb2:	f241 1311 	movw	r3, #4369	; 0x1111
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10f      	bne.n	8001edc <ARGB_TIM_DMADelayPulseCplt+0x234>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6a1a      	ldr	r2, [r3, #32]
 8001ec2:	f240 4344 	movw	r3, #1092	; 0x444
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d107      	bne.n	8001edc <ARGB_TIM_DMADelayPulseCplt+0x234>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eda:	645a      	str	r2, [r3, #68]	; 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6a1a      	ldr	r2, [r3, #32]
 8001ee2:	f241 1311 	movw	r3, #4369	; 0x1111
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10f      	bne.n	8001f0c <ARGB_TIM_DMADelayPulseCplt+0x264>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6a1a      	ldr	r2, [r3, #32]
 8001ef2:	f240 4344 	movw	r3, #1092	; 0x444
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d107      	bne.n	8001f0c <ARGB_TIM_DMADelayPulseCplt+0x264>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0201 	bic.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        ARGB_LOC_ST = ARGB_READY;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <ARGB_TIM_DMADelayPulseCplt+0x2ac>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	771a      	strb	r2, [r3, #28]
 8001f20:	e002      	b.n	8001f28 <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001f22:	bf00      	nop
 8001f24:	e000      	b.n	8001f28 <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001f26:	bf00      	nop
}
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200006a4 	.word	0x200006a4
 8001f34:	2000065c 	.word	0x2000065c
 8001f38:	200005a0 	.word	0x200005a0
 8001f3c:	200004c8 	.word	0x200004c8
 8001f40:	200004c6 	.word	0x200004c6
 8001f44:	200004c7 	.word	0x200004c7
 8001f48:	200004e0 	.word	0x200004e0
 8001f4c:	20000540 	.word	0x20000540
 8001f50:	40010000 	.word	0x40010000
 8001f54:	200005a2 	.word	0x200005a2

08001f58 <ARGB_TIM_DMADelayPulseHalfCplt>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f64:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a53      	ldr	r2, [pc, #332]	; (80020b8 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	f040 809e 	bne.w	80020ac <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4a52      	ldr	r2, [pc, #328]	; (80020bc <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	f040 8099 	bne.w	80020ac <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001f7a:	4b51      	ldr	r3, [pc, #324]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 8095 	beq.w	80020b0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>
    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8001f86:	4b4e      	ldr	r3, [pc, #312]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	2b07      	cmp	r3, #7
 8001f8e:	d87b      	bhi.n	8002088 <ARGB_TIM_DMADelayPulseHalfCplt+0x130>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001f90:	2300      	movs	r3, #0
 8001f92:	72fb      	strb	r3, [r7, #11]
 8001f94:	e06c      	b.n	8002070 <ARGB_TIM_DMADelayPulseHalfCplt+0x118>
            PWM_BUF[i] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 8] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 16] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 24] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
#else
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001f96:	4b4a      	ldr	r3, [pc, #296]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	4a47      	ldr	r2, [pc, #284]	; (80020c4 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8001fa6:	5cd3      	ldrb	r3, [r2, r3]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	7afb      	ldrb	r3, [r7, #11]
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	dd04      	ble.n	8001fc6 <ARGB_TIM_DMADelayPulseHalfCplt+0x6e>
 8001fbc:	4b42      	ldr	r3, [pc, #264]	; (80020c8 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	e003      	b.n	8001fce <ARGB_TIM_DMADelayPulseHalfCplt+0x76>
 8001fc6:	4b41      	ldr	r3, [pc, #260]	; (80020cc <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	7afb      	ldrb	r3, [r7, #11]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4b3e      	ldr	r3, [pc, #248]	; (80020d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8001fd6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001fda:	4b39      	ldr	r3, [pc, #228]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3301      	adds	r3, #1
 8001fea:	4a36      	ldr	r2, [pc, #216]	; (80020c4 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8001fec:	5cd3      	ldrb	r3, [r2, r3]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	7afb      	ldrb	r3, [r7, #11]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	dd04      	ble.n	800200c <ARGB_TIM_DMADelayPulseHalfCplt+0xb4>
 8002002:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	4619      	mov	r1, r3
 800200a:	e003      	b.n	8002014 <ARGB_TIM_DMADelayPulseHalfCplt+0xbc>
 800200c:	4b2f      	ldr	r3, [pc, #188]	; (80020cc <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	4619      	mov	r1, r3
 8002014:	7afb      	ldrb	r3, [r7, #11]
 8002016:	b2db      	uxtb	r3, r3
 8002018:	3308      	adds	r3, #8
 800201a:	4a2d      	ldr	r2, [pc, #180]	; (80020d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 800201c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002020:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	3302      	adds	r3, #2
 8002030:	4a24      	ldr	r2, [pc, #144]	; (80020c4 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8002032:	5cd3      	ldrb	r3, [r2, r3]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	7afb      	ldrb	r3, [r7, #11]
 800203a:	b2db      	uxtb	r3, r3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002044:	2b00      	cmp	r3, #0
 8002046:	dd04      	ble.n	8002052 <ARGB_TIM_DMADelayPulseHalfCplt+0xfa>
 8002048:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	4619      	mov	r1, r3
 8002050:	e003      	b.n	800205a <ARGB_TIM_DMADelayPulseHalfCplt+0x102>
 8002052:	4b1e      	ldr	r3, [pc, #120]	; (80020cc <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	4619      	mov	r1, r3
 800205a:	7afb      	ldrb	r3, [r7, #11]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	3310      	adds	r3, #16
 8002060:	4a1b      	ldr	r2, [pc, #108]	; (80020d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8002062:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8002066:	7afb      	ldrb	r3, [r7, #11]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	3301      	adds	r3, #1
 800206c:	b2db      	uxtb	r3, r3
 800206e:	72fb      	strb	r3, [r7, #11]
 8002070:	7afb      	ldrb	r3, [r7, #11]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b07      	cmp	r3, #7
 8002076:	d98e      	bls.n	8001f96 <ARGB_TIM_DMADelayPulseHalfCplt+0x3e>
#endif
        }
        BUF_COUNTER++;
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	b29b      	uxth	r3, r3
 800207e:	3301      	adds	r3, #1
 8002080:	b29a      	uxth	r2, r3
 8002082:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8002084:	801a      	strh	r2, [r3, #0]
 8002086:	e014      	b.n	80020b2 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 8002088:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	b29b      	uxth	r3, r3
 800208e:	2b09      	cmp	r3, #9
 8002090:	d80f      	bhi.n	80020b2 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
        memset((dma_siz *) &PWM_BUF[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 8002092:	2260      	movs	r2, #96	; 0x60
 8002094:	2100      	movs	r1, #0
 8002096:	480e      	ldr	r0, [pc, #56]	; (80020d0 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8002098:	f008 fc64 	bl	800a964 <memset>
        BUF_COUNTER++;
 800209c:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	3301      	adds	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80020a8:	801a      	strh	r2, [r3, #0]
 80020aa:	e002      	b.n	80020b2 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 80020ac:	bf00      	nop
 80020ae:	e000      	b.n	80020b2 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 80020b0:	bf00      	nop
    }
}
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	200006a4 	.word	0x200006a4
 80020bc:	2000065c 	.word	0x2000065c
 80020c0:	200005a0 	.word	0x200005a0
 80020c4:	200004c8 	.word	0x200004c8
 80020c8:	200004c6 	.word	0x200004c6
 80020cc:	200004c7 	.word	0x200004c7
 80020d0:	200004e0 	.word	0x200004e0

080020d4 <AS5600_ReadReg>:
	HAL_I2C_Master_Transmit(&hi2c1,AS5600_ADDR,&Data,1,10);	
	HAL_I2C_Mem_Write(&hi2c1,(AS5600_ADDR << 1),Reg,1,&Data,1,100);
}

uint8_t AS5600_ReadReg(uint8_t Reg)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af04      	add	r7, sp, #16
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
	uint8_t DataRead=0;	
 80020de:	2300      	movs	r3, #0
 80020e0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c1,(AS5600_ADDR << 1),Reg,1,&DataRead,1,100);
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	2364      	movs	r3, #100	; 0x64
 80020e8:	9302      	str	r3, [sp, #8]
 80020ea:	2301      	movs	r3, #1
 80020ec:	9301      	str	r3, [sp, #4]
 80020ee:	f107 030f 	add.w	r3, r7, #15
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2301      	movs	r3, #1
 80020f6:	216c      	movs	r1, #108	; 0x6c
 80020f8:	4803      	ldr	r0, [pc, #12]	; (8002108 <AS5600_ReadReg+0x34>)
 80020fa:	f002 fd6f 	bl	8004bdc <HAL_I2C_Mem_Read>
	
	
	return DataRead;
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	200005b0 	.word	0x200005b0

0800210c <AS5600_GetRawAngle>:
	return (int)((float)(AS5600_ReadReg(ANGLE_L) + (AS5600_ReadReg(ANGLE_H) << 8))/4096*360);	
}


uint16_t AS5600_GetRawAngle()
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
	uint16_t AngleVal=AS5600_ReadReg(RAWANG_L) + (AS5600_ReadReg(RAWANG_H) << 8);
 8002112:	200d      	movs	r0, #13
 8002114:	f7ff ffde 	bl	80020d4 <AS5600_ReadReg>
 8002118:	4603      	mov	r3, r0
 800211a:	b29c      	uxth	r4, r3
 800211c:	200c      	movs	r0, #12
 800211e:	f7ff ffd9 	bl	80020d4 <AS5600_ReadReg>
 8002122:	4603      	mov	r3, r0
 8002124:	b29b      	uxth	r3, r3
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	b29b      	uxth	r3, r3
 800212a:	4423      	add	r3, r4
 800212c:	80fb      	strh	r3, [r7, #6]
	return AngleVal;	
 800212e:	88fb      	ldrh	r3, [r7, #6]
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	bd90      	pop	{r4, r7, pc}

08002138 <AS5600_GetStatus>:

uint8_t AS5600_GetStatus()
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
	return AS5600_ReadReg(STATUS) & 0x38;	
 800213c:	200b      	movs	r0, #11
 800213e:	f7ff ffc9 	bl	80020d4 <AS5600_ReadReg>
 8002142:	4603      	mov	r3, r0
 8002144:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002148:	b2db      	uxtb	r3, r3
}
 800214a:	4618      	mov	r0, r3
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <drawMainMenu>:
	"5:Encod.  ",
	"6:DAC     ",
	"0:Exit    "
};

void drawMainMenu() {
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8002156:	2000      	movs	r0, #0
 8002158:	f7ff f8b6 	bl	80012c8 <ssd1306_Fill>
    uint8_t exit = 1;
 800215c:	2301      	movs	r3, #1
 800215e:	713b      	strb	r3, [r7, #4]
    uint8_t current_item_menu = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	71fb      	strb	r3, [r7, #7]
    uint8_t next_item_menu = current_item_menu + 1;
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	3301      	adds	r3, #1
 8002168:	71bb      	strb	r3, [r7, #6]
    uint8_t prev_item_menu = MENU_ITEMS_COUNT - 1;
 800216a:	2306      	movs	r3, #6
 800216c:	717b      	strb	r3, [r7, #5]
    ssd1306_DrawRectangle(1, 1, 127, 63, White);
 800216e:	2301      	movs	r3, #1
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	233f      	movs	r3, #63	; 0x3f
 8002174:	227f      	movs	r2, #127	; 0x7f
 8002176:	2101      	movs	r1, #1
 8002178:	2001      	movs	r0, #1
 800217a:	f7ff fa77 	bl	800166c <ssd1306_DrawRectangle>
#define SIZE_FONT_X 7
#define SIZE_FONT_Y 10

#define SIZE_MAIN_FONT_X 11
#define SIZE_MAIN_FONT_Y 18
    udpateDisplay();
 800217e:	f000 f8b5 	bl	80022ec <udpateDisplay>
    while( exit ){
 8002182:	e0a2      	b.n	80022ca <drawMainMenu+0x17a>
         next_item_menu = current_item_menu + 1;
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	3301      	adds	r3, #1
 8002188:	71bb      	strb	r3, [r7, #6]
         prev_item_menu = current_item_menu - 1;
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	3b01      	subs	r3, #1
 800218e:	717b      	strb	r3, [r7, #5]
    	if(current_item_menu == (MENU_ITEMS_COUNT-1))
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	2b06      	cmp	r3, #6
 8002194:	d101      	bne.n	800219a <drawMainMenu+0x4a>
    		next_item_menu = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	71bb      	strb	r3, [r7, #6]
    	if(current_item_menu == 0) // Для нулевого элемента предыдущий символ будет последним
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <drawMainMenu+0x54>
    		prev_item_menu = MENU_ITEMS_COUNT - 1;
 80021a0:	2306      	movs	r3, #6
 80021a2:	717b      	strb	r3, [r7, #5]

    	ssd1306_SetCursor(START_POS_X, SIZE_FONT_Y + START_POS_Y+8);// Магический номер что бы сделать по центру
 80021a4:	2117      	movs	r1, #23
 80021a6:	2005      	movs	r0, #5
 80021a8:	f7ff f9dc 	bl	8001564 <ssd1306_SetCursor>
    		ssd1306_WriteString(">", Font_11x18, White);
 80021ac:	4a4b      	ldr	r2, [pc, #300]	; (80022dc <drawMainMenu+0x18c>)
 80021ae:	2301      	movs	r3, #1
 80021b0:	ca06      	ldmia	r2, {r1, r2}
 80021b2:	484b      	ldr	r0, [pc, #300]	; (80022e0 <drawMainMenu+0x190>)
 80021b4:	f7ff f9b0 	bl	8001518 <ssd1306_WriteString>
    	ssd1306_SetCursor(START_POS_X+SIZE_MAIN_FONT_X+5, SIZE_FONT_Y + START_POS_Y+8);
 80021b8:	2117      	movs	r1, #23
 80021ba:	2015      	movs	r0, #21
 80021bc:	f7ff f9d2 	bl	8001564 <ssd1306_SetCursor>
    		ssd1306_WriteString(menuItems[current_item_menu], Font_11x18, White);
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	4a48      	ldr	r2, [pc, #288]	; (80022e4 <drawMainMenu+0x194>)
 80021c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80021c8:	4a44      	ldr	r2, [pc, #272]	; (80022dc <drawMainMenu+0x18c>)
 80021ca:	2301      	movs	r3, #1
 80021cc:	ca06      	ldmia	r2, {r1, r2}
 80021ce:	f7ff f9a3 	bl	8001518 <ssd1306_WriteString>

    	udpateDisplay();
 80021d2:	f000 f88b 	bl	80022ec <udpateDisplay>
    	HAL_Delay(50);
 80021d6:	2032      	movs	r0, #50	; 0x32
 80021d8:	f001 f950 	bl	800347c <HAL_Delay>

    	ssd1306_SetCursor(START_POS_X, START_POS_Y); // В первой строке пишем предыдущий пункт
 80021dc:	2105      	movs	r1, #5
 80021de:	2005      	movs	r0, #5
 80021e0:	f7ff f9c0 	bl	8001564 <ssd1306_SetCursor>
    		ssd1306_WriteString(menuItems[prev_item_menu], Font_7x10, White);
 80021e4:	797b      	ldrb	r3, [r7, #5]
 80021e6:	4a3f      	ldr	r2, [pc, #252]	; (80022e4 <drawMainMenu+0x194>)
 80021e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80021ec:	4a3e      	ldr	r2, [pc, #248]	; (80022e8 <drawMainMenu+0x198>)
 80021ee:	2301      	movs	r3, #1
 80021f0:	ca06      	ldmia	r2, {r1, r2}
 80021f2:	f7ff f991 	bl	8001518 <ssd1306_WriteString>
    	udpateDisplay();
 80021f6:	f000 f879 	bl	80022ec <udpateDisplay>

        	ssd1306_SetCursor(START_POS_X, LAST_POS_Y - SIZE_FONT_Y);
 80021fa:	2130      	movs	r1, #48	; 0x30
 80021fc:	2005      	movs	r0, #5
 80021fe:	f7ff f9b1 	bl	8001564 <ssd1306_SetCursor>
        		ssd1306_WriteString(menuItems[next_item_menu], Font_7x10, White);
 8002202:	79bb      	ldrb	r3, [r7, #6]
 8002204:	4a37      	ldr	r2, [pc, #220]	; (80022e4 <drawMainMenu+0x194>)
 8002206:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800220a:	4a37      	ldr	r2, [pc, #220]	; (80022e8 <drawMainMenu+0x198>)
 800220c:	2301      	movs	r3, #1
 800220e:	ca06      	ldmia	r2, {r1, r2}
 8002210:	f7ff f982 	bl	8001518 <ssd1306_WriteString>
        udpateDisplay();
 8002214:	f000 f86a 	bl	80022ec <udpateDisplay>
        HAL_Delay(500);
 8002218:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800221c:	f001 f92e 	bl	800347c <HAL_Delay>
        buttonEnReset();
 8002220:	f000 f8cc 	bl	80023bc <buttonEnReset>
        buttonLongReset();
 8002224:	f000 f916 	bl	8002454 <buttonLongReset>
        encoderReset();
 8002228:	f000 f944 	bl	80024b4 <encoderReset>
    	while(1){
    		if(encoderData() > 0){
 800222c:	f000 f91e 	bl	800246c <encoderData>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	dd05      	ble.n	8002242 <drawMainMenu+0xf2>
    			current_item_menu++;
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	3301      	adds	r3, #1
 800223a:	71fb      	strb	r3, [r7, #7]
    			encoderReset();
 800223c:	f000 f93a 	bl	80024b4 <encoderReset>
    			break;
 8002240:	e043      	b.n	80022ca <drawMainMenu+0x17a>
    		}
    		if(encoderData() < 0){
 8002242:	f000 f913 	bl	800246c <encoderData>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	da05      	bge.n	8002258 <drawMainMenu+0x108>
    			current_item_menu--;
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	3b01      	subs	r3, #1
 8002250:	71fb      	strb	r3, [r7, #7]
    			encoderReset();
 8002252:	f000 f92f 	bl	80024b4 <encoderReset>
    			break;
 8002256:	e038      	b.n	80022ca <drawMainMenu+0x17a>
    		}
    		if(buttonLong()){
 8002258:	f000 f8e4 	bl	8002424 <buttonLong>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <drawMainMenu+0x118>
    			// Вернуться на стартовый дисплей
    			current_item_menu = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	71fb      	strb	r3, [r7, #7]
    			break;
 8002266:	e030      	b.n	80022ca <drawMainMenu+0x17a>
    		}
    		if(buttonEn()){
 8002268:	f000 f890 	bl	800238c <buttonEn>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d024      	beq.n	80022bc <drawMainMenu+0x16c>
    			switch(current_item_menu){
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	2b05      	cmp	r3, #5
 8002276:	d822      	bhi.n	80022be <drawMainMenu+0x16e>
 8002278:	a201      	add	r2, pc, #4	; (adr r2, 8002280 <drawMainMenu+0x130>)
 800227a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227e:	bf00      	nop
 8002280:	08002299 	.word	0x08002299
 8002284:	0800229f 	.word	0x0800229f
 8002288:	080022a5 	.word	0x080022a5
 800228c:	080022ab 	.word	0x080022ab
 8002290:	080022b1 	.word	0x080022b1
 8002294:	080022b7 	.word	0x080022b7
    				case 0: drawItemNum01(); break;
 8002298:	f000 f918 	bl	80024cc <drawItemNum01>
 800229c:	e00f      	b.n	80022be <drawMainMenu+0x16e>
    				case 1: drawItemNum02(); break;
 800229e:	f000 f9b1 	bl	8002604 <drawItemNum02>
 80022a2:	e00c      	b.n	80022be <drawMainMenu+0x16e>
    				case 2: drawItemNum03(); break;
 80022a4:	f000 f9c4 	bl	8002630 <drawItemNum03>
 80022a8:	e009      	b.n	80022be <drawMainMenu+0x16e>
    				case 3: drawItemNum04(); break;
 80022aa:	f000 f9d7 	bl	800265c <drawItemNum04>
 80022ae:	e006      	b.n	80022be <drawMainMenu+0x16e>
    				case 4: drawItemNum05(); break;
 80022b0:	f000 f9ea 	bl	8002688 <drawItemNum05>
 80022b4:	e003      	b.n	80022be <drawMainMenu+0x16e>
    				case 5: drawItemNum06(); break;
 80022b6:	f000 f9fd 	bl	80026b4 <drawItemNum06>
 80022ba:	e000      	b.n	80022be <drawMainMenu+0x16e>
    			}
    		}
 80022bc:	bf00      	nop
    		if(current_item_menu >= MENU_ITEMS_COUNT )
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	2b06      	cmp	r3, #6
 80022c2:	d9b3      	bls.n	800222c <drawMainMenu+0xdc>
    			current_item_menu = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	71fb      	strb	r3, [r7, #7]
    		if(encoderData() > 0){
 80022c8:	e7b0      	b.n	800222c <drawMainMenu+0xdc>
    while( exit ){
 80022ca:	793b      	ldrb	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f47f af59 	bne.w	8002184 <drawMainMenu+0x34>
    	}
    }

}
 80022d2:	bf00      	nop
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000008 	.word	0x20000008
 80022e0:	0800ad34 	.word	0x0800ad34
 80022e4:	20000014 	.word	0x20000014
 80022e8:	20000000 	.word	0x20000000

080022ec <udpateDisplay>:

extern osMutexId_t BlockI2CHandle;
void udpateDisplay(){
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
	statusMutex = osMutexAcquire(BlockI2CHandle, 1000);
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <udpateDisplay+0x34>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022f8:	4618      	mov	r0, r3
 80022fa:	f005 faa8 	bl	800784e <osMutexAcquire>
 80022fe:	4603      	mov	r3, r0
 8002300:	4a08      	ldr	r2, [pc, #32]	; (8002324 <udpateDisplay+0x38>)
 8002302:	6013      	str	r3, [r2, #0]
	if(statusMutex == osOK)
 8002304:	4b07      	ldr	r3, [pc, #28]	; (8002324 <udpateDisplay+0x38>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <udpateDisplay+0x24>
		ssd1306_UpdateScreen();
 800230c:	f7ff f800 	bl	8001310 <ssd1306_UpdateScreen>
	osMutexRelease(BlockI2CHandle);// Освобождение мьютекса
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <udpateDisplay+0x34>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f005 fae5 	bl	80078e4 <osMutexRelease>
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000708 	.word	0x20000708
 8002324:	200005a4 	.word	0x200005a4

08002328 <drawSubMenu>:

void drawSubMenu(uint8_t i){
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
	ssd1306_SetCursor(20, 2);
 8002332:	2102      	movs	r1, #2
 8002334:	2014      	movs	r0, #20
 8002336:	f7ff f915 	bl	8001564 <ssd1306_SetCursor>
	ssd1306_WriteString(menuItems[i], Font_7x10, White);
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	4a05      	ldr	r2, [pc, #20]	; (8002354 <drawSubMenu+0x2c>)
 800233e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002342:	4a05      	ldr	r2, [pc, #20]	; (8002358 <drawSubMenu+0x30>)
 8002344:	2301      	movs	r3, #1
 8002346:	ca06      	ldmia	r2, {r1, r2}
 8002348:	f7ff f8e6 	bl	8001518 <ssd1306_WriteString>
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000014 	.word	0x20000014
 8002358:	20000000 	.word	0x20000000

0800235c <buttonUpSet>:

uint8_t buttonUp(){
	return buttonUpper;
}
void buttonUpSet(){
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
	buttonUpper = 1;
 8002360:	4b03      	ldr	r3, [pc, #12]	; (8002370 <buttonUpSet+0x14>)
 8002362:	2201      	movs	r2, #1
 8002364:	701a      	strb	r2, [r3, #0]
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	200005a8 	.word	0x200005a8

08002374 <buttonUpReset>:
void buttonUpReset(){
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
	buttonUpper = 0;
 8002378:	4b03      	ldr	r3, [pc, #12]	; (8002388 <buttonUpReset+0x14>)
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
}
 800237e:	bf00      	nop
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	200005a8 	.word	0x200005a8

0800238c <buttonEn>:

uint8_t buttonEn(){
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
	return buttonEnable;
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <buttonEn+0x14>)
 8002392:	781b      	ldrb	r3, [r3, #0]
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	200005a9 	.word	0x200005a9

080023a4 <buttonEnSet>:
void buttonEnSet(){
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
	buttonEnable = 1;
 80023a8:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <buttonEnSet+0x14>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	701a      	strb	r2, [r3, #0]
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	200005a9 	.word	0x200005a9

080023bc <buttonEnReset>:
void buttonEnReset(){
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
	buttonEnable = 0;
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <buttonEnReset+0x14>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	200005a9 	.word	0x200005a9

080023d4 <buttonCounter>:

uint8_t buttonCounter(){
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
	return button_counter;
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <buttonCounter+0x14>)
 80023da:	781b      	ldrb	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	200005aa 	.word	0x200005aa

080023ec <buttonCounterSet>:
void buttonCounterSet(){
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
	button_counter++;
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <buttonCounterSet+0x1c>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	3301      	adds	r3, #1
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <buttonCounterSet+0x1c>)
 80023fa:	701a      	strb	r2, [r3, #0]
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	200005aa 	.word	0x200005aa

0800240c <buttonCounterReset>:

void buttonCounterReset(){
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
	button_counter = 0;
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <buttonCounterReset+0x14>)
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	200005aa 	.word	0x200005aa

08002424 <buttonLong>:

uint8_t buttonLong(){
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
	return button_long;
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <buttonLong+0x14>)
 800242a:	781b      	ldrb	r3, [r3, #0]
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	200005ab 	.word	0x200005ab

0800243c <buttonLongSet>:
void buttonLongSet(){
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
	button_long = 1;
 8002440:	4b03      	ldr	r3, [pc, #12]	; (8002450 <buttonLongSet+0x14>)
 8002442:	2201      	movs	r2, #1
 8002444:	701a      	strb	r2, [r3, #0]
}
 8002446:	bf00      	nop
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	200005ab 	.word	0x200005ab

08002454 <buttonLongReset>:
void buttonLongReset(){
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
	button_long = 0;
 8002458:	4b03      	ldr	r3, [pc, #12]	; (8002468 <buttonLongReset+0x14>)
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	200005ab 	.word	0x200005ab

0800246c <encoderData>:

int8_t encoderData(){
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
	return encoderAS56;
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <encoderData+0x14>)
 8002472:	f993 3000 	ldrsb.w	r3, [r3]
}
 8002476:	4618      	mov	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	200005ac 	.word	0x200005ac

08002484 <encoderSetUp>:
void encoderSetUp(){
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
	encoderAS56 = 1;
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <encoderSetUp+0x14>)
 800248a:	2201      	movs	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	200005ac 	.word	0x200005ac

0800249c <encoderSetDown>:

void encoderSetDown(){
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
	encoderAS56 = -1;
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <encoderSetDown+0x14>)
 80024a2:	22ff      	movs	r2, #255	; 0xff
 80024a4:	701a      	strb	r2, [r3, #0]
}
 80024a6:	bf00      	nop
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	200005ac 	.word	0x200005ac

080024b4 <encoderReset>:

void encoderReset(){
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
	encoderAS56 = 0;
 80024b8:	4b03      	ldr	r3, [pc, #12]	; (80024c8 <encoderReset+0x14>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
}
 80024be:	bf00      	nop
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	200005ac 	.word	0x200005ac

080024cc <drawItemNum01>:
	        HAL_Delay(100);
	    }

}
*/
void drawItemNum01(){
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
	uint8_t butEn = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	73fb      	strb	r3, [r7, #15]
	uint8_t butLo = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	73bb      	strb	r3, [r7, #14]
	 int8_t encod = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	737b      	strb	r3, [r7, #13]
	char sym_butLo[3];
	char sym_encod[3];



	ssd1306_Fill(Black);
 80024de:	2000      	movs	r0, #0
 80024e0:	f7fe fef2 	bl	80012c8 <ssd1306_Fill>
	//ssd1306_DrawRectangle(1, 1, 127, 63, White);
	drawSubMenu(0);
 80024e4:	2000      	movs	r0, #0
 80024e6:	f7ff ff1f 	bl	8002328 <drawSubMenu>
	ssd1306_SetCursor(10, 25);
 80024ea:	2119      	movs	r1, #25
 80024ec:	200a      	movs	r0, #10
 80024ee:	f7ff f839 	bl	8001564 <ssd1306_SetCursor>
	ssd1306_WriteString("ButEn:", Font_7x10, White);
 80024f2:	4a40      	ldr	r2, [pc, #256]	; (80025f4 <drawItemNum01+0x128>)
 80024f4:	2301      	movs	r3, #1
 80024f6:	ca06      	ldmia	r2, {r1, r2}
 80024f8:	483f      	ldr	r0, [pc, #252]	; (80025f8 <drawItemNum01+0x12c>)
 80024fa:	f7ff f80d 	bl	8001518 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 40);
 80024fe:	2128      	movs	r1, #40	; 0x28
 8002500:	200a      	movs	r0, #10
 8002502:	f7ff f82f 	bl	8001564 <ssd1306_SetCursor>
	ssd1306_WriteString("ButLo:", Font_7x10, White);
 8002506:	4a3b      	ldr	r2, [pc, #236]	; (80025f4 <drawItemNum01+0x128>)
 8002508:	2301      	movs	r3, #1
 800250a:	ca06      	ldmia	r2, {r1, r2}
 800250c:	483b      	ldr	r0, [pc, #236]	; (80025fc <drawItemNum01+0x130>)
 800250e:	f7ff f803 	bl	8001518 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 55);
 8002512:	2137      	movs	r1, #55	; 0x37
 8002514:	200a      	movs	r0, #10
 8002516:	f7ff f825 	bl	8001564 <ssd1306_SetCursor>
	ssd1306_WriteString("Encod:", Font_7x10, White);
 800251a:	4a36      	ldr	r2, [pc, #216]	; (80025f4 <drawItemNum01+0x128>)
 800251c:	2301      	movs	r3, #1
 800251e:	ca06      	ldmia	r2, {r1, r2}
 8002520:	4837      	ldr	r0, [pc, #220]	; (8002600 <drawItemNum01+0x134>)
 8002522:	f7fe fff9 	bl	8001518 <ssd1306_WriteString>
	while(1){
		if(buttonEn() == ON){
 8002526:	f7ff ff31 	bl	800238c <buttonEn>
 800252a:	4603      	mov	r3, r0
 800252c:	2b01      	cmp	r3, #1
 800252e:	d104      	bne.n	800253a <drawItemNum01+0x6e>
			buttonEnReset();
 8002530:	f7ff ff44 	bl	80023bc <buttonEnReset>
			butEn++;
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	3301      	adds	r3, #1
 8002538:	73fb      	strb	r3, [r7, #15]
		}
		if(buttonLong() == ON){
 800253a:	f7ff ff73 	bl	8002424 <buttonLong>
 800253e:	4603      	mov	r3, r0
 8002540:	2b01      	cmp	r3, #1
 8002542:	d104      	bne.n	800254e <drawItemNum01+0x82>
			buttonLongReset();
 8002544:	f7ff ff86 	bl	8002454 <buttonLongReset>
			butLo++;
 8002548:	7bbb      	ldrb	r3, [r7, #14]
 800254a:	3301      	adds	r3, #1
 800254c:	73bb      	strb	r3, [r7, #14]
		}
		if(encoderData() > 0){
 800254e:	f7ff ff8d 	bl	800246c <encoderData>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	dd07      	ble.n	8002568 <drawItemNum01+0x9c>
			encoderReset();
 8002558:	f7ff ffac 	bl	80024b4 <encoderReset>
			encod++;
 800255c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	3301      	adds	r3, #1
 8002564:	b2db      	uxtb	r3, r3
 8002566:	737b      	strb	r3, [r7, #13]
		}
		if(encoderData() < 0){
 8002568:	f7ff ff80 	bl	800246c <encoderData>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	da07      	bge.n	8002582 <drawItemNum01+0xb6>
			encoderReset();
 8002572:	f7ff ff9f 	bl	80024b4 <encoderReset>
			encod--;
 8002576:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	b2db      	uxtb	r3, r3
 8002580:	737b      	strb	r3, [r7, #13]
		}
		itoa(butEn, sym_butEn, 10);
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	f107 0108 	add.w	r1, r7, #8
 8002588:	220a      	movs	r2, #10
 800258a:	4618      	mov	r0, r3
 800258c:	f008 f9d0 	bl	800a930 <itoa>
		itoa(butLo, sym_butLo, 10);
 8002590:	7bbb      	ldrb	r3, [r7, #14]
 8002592:	1d39      	adds	r1, r7, #4
 8002594:	220a      	movs	r2, #10
 8002596:	4618      	mov	r0, r3
 8002598:	f008 f9ca 	bl	800a930 <itoa>
		itoa(encod, sym_encod, 10);
 800259c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80025a0:	4639      	mov	r1, r7
 80025a2:	220a      	movs	r2, #10
 80025a4:	4618      	mov	r0, r3
 80025a6:	f008 f9c3 	bl	800a930 <itoa>
		ssd1306_SetCursor(50, 25);
 80025aa:	2119      	movs	r1, #25
 80025ac:	2032      	movs	r0, #50	; 0x32
 80025ae:	f7fe ffd9 	bl	8001564 <ssd1306_SetCursor>
			ssd1306_WriteString(sym_butEn, Font_7x10, White);
 80025b2:	4a10      	ldr	r2, [pc, #64]	; (80025f4 <drawItemNum01+0x128>)
 80025b4:	f107 0008 	add.w	r0, r7, #8
 80025b8:	2301      	movs	r3, #1
 80025ba:	ca06      	ldmia	r2, {r1, r2}
 80025bc:	f7fe ffac 	bl	8001518 <ssd1306_WriteString>
		ssd1306_SetCursor(50, 40);
 80025c0:	2128      	movs	r1, #40	; 0x28
 80025c2:	2032      	movs	r0, #50	; 0x32
 80025c4:	f7fe ffce 	bl	8001564 <ssd1306_SetCursor>
			ssd1306_WriteString(sym_butLo, Font_7x10, White);
 80025c8:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <drawItemNum01+0x128>)
 80025ca:	1d38      	adds	r0, r7, #4
 80025cc:	2301      	movs	r3, #1
 80025ce:	ca06      	ldmia	r2, {r1, r2}
 80025d0:	f7fe ffa2 	bl	8001518 <ssd1306_WriteString>
		ssd1306_SetCursor(50, 55);
 80025d4:	2137      	movs	r1, #55	; 0x37
 80025d6:	2032      	movs	r0, #50	; 0x32
 80025d8:	f7fe ffc4 	bl	8001564 <ssd1306_SetCursor>
			ssd1306_WriteString(sym_encod, Font_7x10, White);
 80025dc:	4a05      	ldr	r2, [pc, #20]	; (80025f4 <drawItemNum01+0x128>)
 80025de:	4638      	mov	r0, r7
 80025e0:	2301      	movs	r3, #1
 80025e2:	ca06      	ldmia	r2, {r1, r2}
 80025e4:	f7fe ff98 	bl	8001518 <ssd1306_WriteString>
		udpateDisplay();
 80025e8:	f7ff fe80 	bl	80022ec <udpateDisplay>
		HAL_Delay(80);
 80025ec:	2050      	movs	r0, #80	; 0x50
 80025ee:	f000 ff45 	bl	800347c <HAL_Delay>
		if(buttonEn() == ON){
 80025f2:	e798      	b.n	8002526 <drawItemNum01+0x5a>
 80025f4:	20000000 	.word	0x20000000
 80025f8:	0800ad38 	.word	0x0800ad38
 80025fc:	0800ad40 	.word	0x0800ad40
 8002600:	0800ad48 	.word	0x0800ad48

08002604 <drawItemNum02>:
	}
}

void drawItemNum02(){
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 800260a:	2000      	movs	r0, #0
 800260c:	f7fe fe5c 	bl	80012c8 <ssd1306_Fill>
	ssd1306_DrawRectangle(1, 1, 127, 63, White);
 8002610:	2301      	movs	r3, #1
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	233f      	movs	r3, #63	; 0x3f
 8002616:	227f      	movs	r2, #127	; 0x7f
 8002618:	2101      	movs	r1, #1
 800261a:	2001      	movs	r0, #1
 800261c:	f7ff f826 	bl	800166c <ssd1306_DrawRectangle>
	drawSubMenu(1);
 8002620:	2001      	movs	r0, #1
 8002622:	f7ff fe81 	bl	8002328 <drawSubMenu>
	udpateDisplay();
 8002626:	f7ff fe61 	bl	80022ec <udpateDisplay>
}
 800262a:	bf00      	nop
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <drawItemNum03>:

void drawItemNum03(){
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 8002636:	2000      	movs	r0, #0
 8002638:	f7fe fe46 	bl	80012c8 <ssd1306_Fill>
	ssd1306_DrawRectangle(1, 1, 127, 63, White);
 800263c:	2301      	movs	r3, #1
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	233f      	movs	r3, #63	; 0x3f
 8002642:	227f      	movs	r2, #127	; 0x7f
 8002644:	2101      	movs	r1, #1
 8002646:	2001      	movs	r0, #1
 8002648:	f7ff f810 	bl	800166c <ssd1306_DrawRectangle>
	drawSubMenu(2);
 800264c:	2002      	movs	r0, #2
 800264e:	f7ff fe6b 	bl	8002328 <drawSubMenu>
	udpateDisplay();
 8002652:	f7ff fe4b 	bl	80022ec <udpateDisplay>
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <drawItemNum04>:

void drawItemNum04(){
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 8002662:	2000      	movs	r0, #0
 8002664:	f7fe fe30 	bl	80012c8 <ssd1306_Fill>
	ssd1306_DrawRectangle(1, 1, 127, 63, White);
 8002668:	2301      	movs	r3, #1
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	233f      	movs	r3, #63	; 0x3f
 800266e:	227f      	movs	r2, #127	; 0x7f
 8002670:	2101      	movs	r1, #1
 8002672:	2001      	movs	r0, #1
 8002674:	f7fe fffa 	bl	800166c <ssd1306_DrawRectangle>
	drawSubMenu(3);
 8002678:	2003      	movs	r0, #3
 800267a:	f7ff fe55 	bl	8002328 <drawSubMenu>
	udpateDisplay();
 800267e:	f7ff fe35 	bl	80022ec <udpateDisplay>
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <drawItemNum05>:

void drawItemNum05(){
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 800268e:	2000      	movs	r0, #0
 8002690:	f7fe fe1a 	bl	80012c8 <ssd1306_Fill>
	ssd1306_DrawRectangle(1, 1, 127, 63, White);
 8002694:	2301      	movs	r3, #1
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	233f      	movs	r3, #63	; 0x3f
 800269a:	227f      	movs	r2, #127	; 0x7f
 800269c:	2101      	movs	r1, #1
 800269e:	2001      	movs	r0, #1
 80026a0:	f7fe ffe4 	bl	800166c <ssd1306_DrawRectangle>
	drawSubMenu(4);
 80026a4:	2004      	movs	r0, #4
 80026a6:	f7ff fe3f 	bl	8002328 <drawSubMenu>
	udpateDisplay();
 80026aa:	f7ff fe1f 	bl	80022ec <udpateDisplay>
}
 80026ae:	bf00      	nop
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <drawItemNum06>:

void drawItemNum06(){
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 80026ba:	2000      	movs	r0, #0
 80026bc:	f7fe fe04 	bl	80012c8 <ssd1306_Fill>
	ssd1306_DrawRectangle(1, 1, 127, 63, White);
 80026c0:	2301      	movs	r3, #1
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	233f      	movs	r3, #63	; 0x3f
 80026c6:	227f      	movs	r2, #127	; 0x7f
 80026c8:	2101      	movs	r1, #1
 80026ca:	2001      	movs	r0, #1
 80026cc:	f7fe ffce 	bl	800166c <ssd1306_DrawRectangle>
	drawSubMenu(5);
 80026d0:	2005      	movs	r0, #5
 80026d2:	f7ff fe29 	bl	8002328 <drawSubMenu>
	udpateDisplay();
 80026d6:	f7ff fe09 	bl	80022ec <udpateDisplay>
}
 80026da:	bf00      	nop
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026e6:	f000 fe87 	bl	80033f8 <HAL_Init>
  //MCP4725 myMCP4725;
  //MCP4725_setValue(&myMCP4725, 2048, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026ea:	f000 f86b 	bl	80027c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026ee:	f000 f9c9 	bl	8002a84 <MX_GPIO_Init>
  MX_DMA_Init();
 80026f2:	f000 f9a7 	bl	8002a44 <MX_DMA_Init>
  MX_I2C1_Init();
 80026f6:	f000 f8cd 	bl	8002894 <MX_I2C1_Init>
  MX_SPI1_Init();
 80026fa:	f000 f8f9 	bl	80028f0 <MX_SPI1_Init>
  MX_TIM2_Init();
 80026fe:	f000 f92d 	bl	800295c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t test_i2c_dev(); // Определяем что все устройства на линии i2c подключены
  ssd1306_Init();
 8002702:	f7fe fd77 	bl	80011f4 <ssd1306_Init>
  startDisplay();
 8002706:	f000 fa43 	bl	8002b90 <startDisplay>

  BlockI2CHandle = osMutexNew(&BlockI2C_attributes);
 800270a:	4827      	ldr	r0, [pc, #156]	; (80027a8 <main+0xc8>)
 800270c:	f005 f819 	bl	8007742 <osMutexNew>
 8002710:	4603      	mov	r3, r0
 8002712:	4a26      	ldr	r2, [pc, #152]	; (80027ac <main+0xcc>)
 8002714:	6013      	str	r3, [r2, #0]
  //osStatus_t status = osMutexAcquire(BlockI2CHandle, 1000);
  //osMutexRelease (BlockI2CHandle);

  HAL_Delay(1000);
 8002716:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800271a:	f000 feaf 	bl	800347c <HAL_Delay>
  //EPD_WhiteScreen_ALL(gqImage_R,gqImage_R); //Refresh the picture in full screen
  //EPD_WhiteScreen_ALL(default_dis,gqImage_R);
  //EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!

  //ADS1115_setConversionReadyPin(pADS);
  float data_from_adc_0 = 0;
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	61bb      	str	r3, [r7, #24]
  MCP4725 myMCP4725 = MCP4725_init(&hi2c1, MCP4725A0_ADDR_A00, 3.30);
 8002724:	1d3b      	adds	r3, r7, #4
 8002726:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80027b0 <main+0xd0>
 800272a:	2260      	movs	r2, #96	; 0x60
 800272c:	4921      	ldr	r1, [pc, #132]	; (80027b4 <main+0xd4>)
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe fb9e 	bl	8000e70 <MCP4725_init>
	// Check the connection:
	uint8_t state_dac = MCP4725_isConnected(&myMCP4725);
 8002734:	1d3b      	adds	r3, r7, #4
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe fbbb 	bl	8000eb2 <MCP4725_isConnected>
 800273c:	4603      	mov	r3, r0
 800273e:	75fb      	strb	r3, [r7, #23]
	uint16_t v_out = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	83fb      	strh	r3, [r7, #30]
  for(uint8_t temp = 0; temp < 80; temp++){
 8002744:	2300      	movs	r3, #0
 8002746:	777b      	strb	r3, [r7, #29]
 8002748:	e015      	b.n	8002776 <main+0x96>
	  MCP4725_setValue(&myMCP4725, v_out, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 800274a:	8bf9      	ldrh	r1, [r7, #30]
 800274c:	1d38      	adds	r0, r7, #4
 800274e:	2300      	movs	r3, #0
 8002750:	2200      	movs	r2, #0
 8002752:	f7fe fbf1 	bl	8000f38 <MCP4725_setValue>
	  HAL_Delay(50);
 8002756:	2032      	movs	r0, #50	; 0x32
 8002758:	f000 fe90 	bl	800347c <HAL_Delay>
	  //data_from_adc_0 = (ADS1115_getData(pADS));
	  v_out+= 150;
 800275c:	8bfb      	ldrh	r3, [r7, #30]
 800275e:	3396      	adds	r3, #150	; 0x96
 8002760:	83fb      	strh	r3, [r7, #30]
	  if(v_out > 4060)
 8002762:	8bfb      	ldrh	r3, [r7, #30]
 8002764:	f640 72dc 	movw	r2, #4060	; 0xfdc
 8002768:	4293      	cmp	r3, r2
 800276a:	d901      	bls.n	8002770 <main+0x90>
		  v_out = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	83fb      	strh	r3, [r7, #30]
  for(uint8_t temp = 0; temp < 80; temp++){
 8002770:	7f7b      	ldrb	r3, [r7, #29]
 8002772:	3301      	adds	r3, #1
 8002774:	777b      	strb	r3, [r7, #29]
 8002776:	7f7b      	ldrb	r3, [r7, #29]
 8002778:	2b4f      	cmp	r3, #79	; 0x4f
 800277a:	d9e6      	bls.n	800274a <main+0x6a>
  //EPD_WhiteScreen_ALL_Clean();
  //EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800277c:	f004 feea 	bl	8007554 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of BlockI2C */
  BlockI2CHandle = osMutexNew(&BlockI2C_attributes);
 8002780:	4809      	ldr	r0, [pc, #36]	; (80027a8 <main+0xc8>)
 8002782:	f004 ffde 	bl	8007742 <osMutexNew>
 8002786:	4603      	mov	r3, r0
 8002788:	4a08      	ldr	r2, [pc, #32]	; (80027ac <main+0xcc>)
 800278a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of EmptyTask */
  EmptyTaskHandle = osThreadNew(StartEmptyTask, NULL, &EmptyTask_attributes);
 800278c:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <main+0xd8>)
 800278e:	2100      	movs	r1, #0
 8002790:	480a      	ldr	r0, [pc, #40]	; (80027bc <main+0xdc>)
 8002792:	f004 ff29 	bl	80075e8 <osThreadNew>
 8002796:	4603      	mov	r3, r0
 8002798:	4a09      	ldr	r2, [pc, #36]	; (80027c0 <main+0xe0>)
 800279a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  initUserTasks();
 800279c:	f000 fdd4 	bl	8003348 <initUserTasks>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80027a0:	f004 fefc 	bl	800759c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80027a4:	e7fe      	b.n	80027a4 <main+0xc4>
 80027a6:	bf00      	nop
 80027a8:	0800c2bc 	.word	0x0800c2bc
 80027ac:	20000708 	.word	0x20000708
 80027b0:	40533333 	.word	0x40533333
 80027b4:	200005b0 	.word	0x200005b0
 80027b8:	0800c298 	.word	0x0800c298
 80027bc:	08002bdd 	.word	0x08002bdd
 80027c0:	20000704 	.word	0x20000704

080027c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b094      	sub	sp, #80	; 0x50
 80027c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027ca:	f107 0320 	add.w	r3, r7, #32
 80027ce:	2230      	movs	r2, #48	; 0x30
 80027d0:	2100      	movs	r1, #0
 80027d2:	4618      	mov	r0, r3
 80027d4:	f008 f8c6 	bl	800a964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027d8:	f107 030c 	add.w	r3, r7, #12
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	4b27      	ldr	r3, [pc, #156]	; (800288c <SystemClock_Config+0xc8>)
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	4a26      	ldr	r2, [pc, #152]	; (800288c <SystemClock_Config+0xc8>)
 80027f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f6:	6413      	str	r3, [r2, #64]	; 0x40
 80027f8:	4b24      	ldr	r3, [pc, #144]	; (800288c <SystemClock_Config+0xc8>)
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002804:	2300      	movs	r3, #0
 8002806:	607b      	str	r3, [r7, #4]
 8002808:	4b21      	ldr	r3, [pc, #132]	; (8002890 <SystemClock_Config+0xcc>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a20      	ldr	r2, [pc, #128]	; (8002890 <SystemClock_Config+0xcc>)
 800280e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <SystemClock_Config+0xcc>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800281c:	607b      	str	r3, [r7, #4]
 800281e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002820:	2301      	movs	r3, #1
 8002822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002824:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800282a:	2302      	movs	r3, #2
 800282c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800282e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002832:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002834:	2319      	movs	r3, #25
 8002836:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002838:	2390      	movs	r3, #144	; 0x90
 800283a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800283c:	2302      	movs	r3, #2
 800283e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002840:	2304      	movs	r3, #4
 8002842:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002844:	f107 0320 	add.w	r3, r7, #32
 8002848:	4618      	mov	r0, r3
 800284a:	f003 f9c7 	bl	8005bdc <HAL_RCC_OscConfig>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002854:	f000 f9dc 	bl	8002c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002858:	230f      	movs	r3, #15
 800285a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800285c:	2302      	movs	r3, #2
 800285e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002868:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800286e:	f107 030c 	add.w	r3, r7, #12
 8002872:	2102      	movs	r1, #2
 8002874:	4618      	mov	r0, r3
 8002876:	f003 fc29 	bl	80060cc <HAL_RCC_ClockConfig>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002880:	f000 f9c6 	bl	8002c10 <Error_Handler>
  }
}
 8002884:	bf00      	nop
 8002886:	3750      	adds	r7, #80	; 0x50
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40023800 	.word	0x40023800
 8002890:	40007000 	.word	0x40007000

08002894 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002898:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <MX_I2C1_Init+0x50>)
 800289a:	4a13      	ldr	r2, [pc, #76]	; (80028e8 <MX_I2C1_Init+0x54>)
 800289c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800289e:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <MX_I2C1_Init+0x50>)
 80028a0:	4a12      	ldr	r2, [pc, #72]	; (80028ec <MX_I2C1_Init+0x58>)
 80028a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028a4:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <MX_I2C1_Init+0x50>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80028aa:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <MX_I2C1_Init+0x50>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <MX_I2C1_Init+0x50>)
 80028b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028b8:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <MX_I2C1_Init+0x50>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <MX_I2C1_Init+0x50>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028c4:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <MX_I2C1_Init+0x50>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028ca:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <MX_I2C1_Init+0x50>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028d0:	4804      	ldr	r0, [pc, #16]	; (80028e4 <MX_I2C1_Init+0x50>)
 80028d2:	f001 fc21 	bl	8004118 <HAL_I2C_Init>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80028dc:	f000 f998 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028e0:	bf00      	nop
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	200005b0 	.word	0x200005b0
 80028e8:	40005400 	.word	0x40005400
 80028ec:	00061a80 	.word	0x00061a80

080028f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80028f4:	4b17      	ldr	r3, [pc, #92]	; (8002954 <MX_SPI1_Init+0x64>)
 80028f6:	4a18      	ldr	r2, [pc, #96]	; (8002958 <MX_SPI1_Init+0x68>)
 80028f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028fa:	4b16      	ldr	r3, [pc, #88]	; (8002954 <MX_SPI1_Init+0x64>)
 80028fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002900:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002902:	4b14      	ldr	r3, [pc, #80]	; (8002954 <MX_SPI1_Init+0x64>)
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002908:	4b12      	ldr	r3, [pc, #72]	; (8002954 <MX_SPI1_Init+0x64>)
 800290a:	2200      	movs	r2, #0
 800290c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800290e:	4b11      	ldr	r3, [pc, #68]	; (8002954 <MX_SPI1_Init+0x64>)
 8002910:	2200      	movs	r2, #0
 8002912:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002914:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <MX_SPI1_Init+0x64>)
 8002916:	2200      	movs	r2, #0
 8002918:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800291a:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <MX_SPI1_Init+0x64>)
 800291c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002920:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002922:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <MX_SPI1_Init+0x64>)
 8002924:	2230      	movs	r2, #48	; 0x30
 8002926:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002928:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <MX_SPI1_Init+0x64>)
 800292a:	2200      	movs	r2, #0
 800292c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800292e:	4b09      	ldr	r3, [pc, #36]	; (8002954 <MX_SPI1_Init+0x64>)
 8002930:	2200      	movs	r2, #0
 8002932:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002934:	4b07      	ldr	r3, [pc, #28]	; (8002954 <MX_SPI1_Init+0x64>)
 8002936:	2200      	movs	r2, #0
 8002938:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <MX_SPI1_Init+0x64>)
 800293c:	220a      	movs	r2, #10
 800293e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002940:	4804      	ldr	r0, [pc, #16]	; (8002954 <MX_SPI1_Init+0x64>)
 8002942:	f003 fdd5 	bl	80064f0 <HAL_SPI_Init>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800294c:	f000 f960 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002950:	bf00      	nop
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20000604 	.word	0x20000604
 8002958:	40013000 	.word	0x40013000

0800295c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08e      	sub	sp, #56	; 0x38
 8002960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002962:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	605a      	str	r2, [r3, #4]
 800296c:	609a      	str	r2, [r3, #8]
 800296e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002970:	f107 0320 	add.w	r3, r7, #32
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800297a:	1d3b      	adds	r3, r7, #4
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	611a      	str	r2, [r3, #16]
 8002988:	615a      	str	r2, [r3, #20]
 800298a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800298c:	4b2c      	ldr	r3, [pc, #176]	; (8002a40 <MX_TIM2_Init+0xe4>)
 800298e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002992:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002994:	4b2a      	ldr	r3, [pc, #168]	; (8002a40 <MX_TIM2_Init+0xe4>)
 8002996:	2200      	movs	r2, #0
 8002998:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800299a:	4b29      	ldr	r3, [pc, #164]	; (8002a40 <MX_TIM2_Init+0xe4>)
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 80029a0:	4b27      	ldr	r3, [pc, #156]	; (8002a40 <MX_TIM2_Init+0xe4>)
 80029a2:	2259      	movs	r2, #89	; 0x59
 80029a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a6:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <MX_TIM2_Init+0xe4>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ac:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <MX_TIM2_Init+0xe4>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029b2:	4823      	ldr	r0, [pc, #140]	; (8002a40 <MX_TIM2_Init+0xe4>)
 80029b4:	f003 fe25 	bl	8006602 <HAL_TIM_Base_Init>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80029be:	f000 f927 	bl	8002c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029cc:	4619      	mov	r1, r3
 80029ce:	481c      	ldr	r0, [pc, #112]	; (8002a40 <MX_TIM2_Init+0xe4>)
 80029d0:	f004 f8ec 	bl	8006bac <HAL_TIM_ConfigClockSource>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80029da:	f000 f919 	bl	8002c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80029de:	4818      	ldr	r0, [pc, #96]	; (8002a40 <MX_TIM2_Init+0xe4>)
 80029e0:	f003 fec0 	bl	8006764 <HAL_TIM_PWM_Init>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80029ea:	f000 f911 	bl	8002c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ee:	2300      	movs	r3, #0
 80029f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029f2:	2300      	movs	r3, #0
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029f6:	f107 0320 	add.w	r3, r7, #32
 80029fa:	4619      	mov	r1, r3
 80029fc:	4810      	ldr	r0, [pc, #64]	; (8002a40 <MX_TIM2_Init+0xe4>)
 80029fe:	f004 fce3 	bl	80073c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002a08:	f000 f902 	bl	8002c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a0c:	2360      	movs	r3, #96	; 0x60
 8002a0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a1c:	1d3b      	adds	r3, r7, #4
 8002a1e:	2204      	movs	r2, #4
 8002a20:	4619      	mov	r1, r3
 8002a22:	4807      	ldr	r0, [pc, #28]	; (8002a40 <MX_TIM2_Init+0xe4>)
 8002a24:	f004 f800 	bl	8006a28 <HAL_TIM_PWM_ConfigChannel>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002a2e:	f000 f8ef 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a32:	4803      	ldr	r0, [pc, #12]	; (8002a40 <MX_TIM2_Init+0xe4>)
 8002a34:	f000 fa0e 	bl	8002e54 <HAL_TIM_MspPostInit>

}
 8002a38:	bf00      	nop
 8002a3a:	3738      	adds	r7, #56	; 0x38
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	2000065c 	.word	0x2000065c

08002a44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	607b      	str	r3, [r7, #4]
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <MX_DMA_Init+0x3c>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	4a0b      	ldr	r2, [pc, #44]	; (8002a80 <MX_DMA_Init+0x3c>)
 8002a54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a58:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <MX_DMA_Init+0x3c>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a62:	607b      	str	r3, [r7, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002a66:	2200      	movs	r2, #0
 8002a68:	2105      	movs	r1, #5
 8002a6a:	2011      	movs	r0, #17
 8002a6c:	f000 fde2 	bl	8003634 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002a70:	2011      	movs	r0, #17
 8002a72:	f000 fdfb 	bl	800366c <HAL_NVIC_EnableIRQ>

}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800

08002a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8a:	f107 030c 	add.w	r3, r7, #12
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	609a      	str	r2, [r3, #8]
 8002a96:	60da      	str	r2, [r3, #12]
 8002a98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	4b31      	ldr	r3, [pc, #196]	; (8002b64 <MX_GPIO_Init+0xe0>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	4a30      	ldr	r2, [pc, #192]	; (8002b64 <MX_GPIO_Init+0xe0>)
 8002aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aaa:	4b2e      	ldr	r3, [pc, #184]	; (8002b64 <MX_GPIO_Init+0xe0>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]
 8002aba:	4b2a      	ldr	r3, [pc, #168]	; (8002b64 <MX_GPIO_Init+0xe0>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	4a29      	ldr	r2, [pc, #164]	; (8002b64 <MX_GPIO_Init+0xe0>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac6:	4b27      	ldr	r3, [pc, #156]	; (8002b64 <MX_GPIO_Init+0xe0>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	607b      	str	r3, [r7, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	603b      	str	r3, [r7, #0]
 8002ad6:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <MX_GPIO_Init+0xe0>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	4a22      	ldr	r2, [pc, #136]	; (8002b64 <MX_GPIO_Init+0xe0>)
 8002adc:	f043 0302 	orr.w	r3, r3, #2
 8002ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae2:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <MX_GPIO_Init+0xe0>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin, GPIO_PIN_RESET);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2107      	movs	r1, #7
 8002af2:	481d      	ldr	r0, [pc, #116]	; (8002b68 <MX_GPIO_Init+0xe4>)
 8002af4:	f001 fade 	bl	80040b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_CS_Pin EPD_Reset_Pin EPD_Data_Control_Pin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin;
 8002af8:	2307      	movs	r3, #7
 8002afa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002afc:	2301      	movs	r3, #1
 8002afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b08:	f107 030c 	add.w	r3, r7, #12
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4816      	ldr	r0, [pc, #88]	; (8002b68 <MX_GPIO_Init+0xe4>)
 8002b10:	f001 f94c 	bl	8003dac <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_Busy_Pin */
  GPIO_InitStruct.Pin = EPD_Busy_Pin;
 8002b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EPD_Busy_GPIO_Port, &GPIO_InitStruct);
 8002b22:	f107 030c 	add.w	r3, r7, #12
 8002b26:	4619      	mov	r1, r3
 8002b28:	480f      	ldr	r0, [pc, #60]	; (8002b68 <MX_GPIO_Init+0xe4>)
 8002b2a:	f001 f93f 	bl	8003dac <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_button_on_Pin */
  GPIO_InitStruct.Pin = EXT_button_on_Pin;
 8002b2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b34:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EXT_button_on_GPIO_Port, &GPIO_InitStruct);
 8002b3e:	f107 030c 	add.w	r3, r7, #12
 8002b42:	4619      	mov	r1, r3
 8002b44:	4808      	ldr	r0, [pc, #32]	; (8002b68 <MX_GPIO_Init+0xe4>)
 8002b46:	f001 f931 	bl	8003dac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2105      	movs	r1, #5
 8002b4e:	2028      	movs	r0, #40	; 0x28
 8002b50:	f000 fd70 	bl	8003634 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b54:	2028      	movs	r0, #40	; 0x28
 8002b56:	f000 fd89 	bl	800366c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b5a:	bf00      	nop
 8002b5c:	3720      	adds	r7, #32
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40020400 	.word	0x40020400

08002b6c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EXT_button_on_Pin){
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b7c:	d104      	bne.n	8002b88 <HAL_GPIO_EXTI_Callback+0x1c>
		buttonEnSet(ON);
 8002b7e:	2001      	movs	r0, #1
 8002b80:	f7ff fc10 	bl	80023a4 <buttonEnSet>
		buttonUpSet();
 8002b84:	f7ff fbea 	bl	800235c <buttonUpSet>
	}
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <startDisplay>:
void startDisplay(){
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
	    ssd1306_Fill(Black);
 8002b94:	2000      	movs	r0, #0
 8002b96:	f7fe fb97 	bl	80012c8 <ssd1306_Fill>
	    ssd1306_SetCursor(5, 10);
 8002b9a:	210a      	movs	r1, #10
 8002b9c:	2005      	movs	r0, #5
 8002b9e:	f7fe fce1 	bl	8001564 <ssd1306_SetCursor>
	    ssd1306_WriteString("JetPro,Bro!", Font_11x18, White);
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <startDisplay+0x3c>)
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	ca06      	ldmia	r2, {r1, r2}
 8002ba8:	4809      	ldr	r0, [pc, #36]	; (8002bd0 <startDisplay+0x40>)
 8002baa:	f7fe fcb5 	bl	8001518 <ssd1306_WriteString>
	    ssd1306_SetCursor(3, 40);
 8002bae:	2128      	movs	r1, #40	; 0x28
 8002bb0:	2003      	movs	r0, #3
 8002bb2:	f7fe fcd7 	bl	8001564 <ssd1306_SetCursor>
	    ssd1306_WriteString("Tap Start for continue", Font_7x10, White);
 8002bb6:	4a07      	ldr	r2, [pc, #28]	; (8002bd4 <startDisplay+0x44>)
 8002bb8:	2301      	movs	r3, #1
 8002bba:	ca06      	ldmia	r2, {r1, r2}
 8002bbc:	4806      	ldr	r0, [pc, #24]	; (8002bd8 <startDisplay+0x48>)
 8002bbe:	f7fe fcab 	bl	8001518 <ssd1306_WriteString>
	    ssd1306_UpdateScreen();
 8002bc2:	f7fe fba5 	bl	8001310 <ssd1306_UpdateScreen>
  }
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000008 	.word	0x20000008
 8002bd0:	0800ad68 	.word	0x0800ad68
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	0800ad74 	.word	0x0800ad74

08002bdc <StartEmptyTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEmptyTask */
void StartEmptyTask(void *argument)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(1);
 8002be4:	2001      	movs	r0, #1
 8002be6:	f004 fd91 	bl	800770c <osDelay>
 8002bea:	e7fb      	b.n	8002be4 <StartEmptyTask+0x8>

08002bec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a04      	ldr	r2, [pc, #16]	; (8002c0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d101      	bne.n	8002c02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002bfe:	f000 fc1d 	bl	800343c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40014000 	.word	0x40014000

08002c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c14:	b672      	cpsid	i
}
 8002c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c18:	e7fe      	b.n	8002c18 <Error_Handler+0x8>
	...

08002c1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	607b      	str	r3, [r7, #4]
 8002c26:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <HAL_MspInit+0x54>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	4a11      	ldr	r2, [pc, #68]	; (8002c70 <HAL_MspInit+0x54>)
 8002c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c30:	6453      	str	r3, [r2, #68]	; 0x44
 8002c32:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <HAL_MspInit+0x54>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c3a:	607b      	str	r3, [r7, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	603b      	str	r3, [r7, #0]
 8002c42:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_MspInit+0x54>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	4a0a      	ldr	r2, [pc, #40]	; (8002c70 <HAL_MspInit+0x54>)
 8002c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <HAL_MspInit+0x54>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	210f      	movs	r1, #15
 8002c5e:	f06f 0001 	mvn.w	r0, #1
 8002c62:	f000 fce7 	bl	8003634 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800

08002c74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08a      	sub	sp, #40	; 0x28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7c:	f107 0314 	add.w	r3, r7, #20
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a19      	ldr	r2, [pc, #100]	; (8002cf8 <HAL_I2C_MspInit+0x84>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d12b      	bne.n	8002cee <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	4b18      	ldr	r3, [pc, #96]	; (8002cfc <HAL_I2C_MspInit+0x88>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	4a17      	ldr	r2, [pc, #92]	; (8002cfc <HAL_I2C_MspInit+0x88>)
 8002ca0:	f043 0302 	orr.w	r3, r3, #2
 8002ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca6:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <HAL_I2C_MspInit+0x88>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cb2:	23c0      	movs	r3, #192	; 0xc0
 8002cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cb6:	2312      	movs	r3, #18
 8002cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc6:	f107 0314 	add.w	r3, r7, #20
 8002cca:	4619      	mov	r1, r3
 8002ccc:	480c      	ldr	r0, [pc, #48]	; (8002d00 <HAL_I2C_MspInit+0x8c>)
 8002cce:	f001 f86d 	bl	8003dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <HAL_I2C_MspInit+0x88>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	4a08      	ldr	r2, [pc, #32]	; (8002cfc <HAL_I2C_MspInit+0x88>)
 8002cdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce2:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_I2C_MspInit+0x88>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002cee:	bf00      	nop
 8002cf0:	3728      	adds	r7, #40	; 0x28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40005400 	.word	0x40005400
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40020400 	.word	0x40020400

08002d04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08a      	sub	sp, #40	; 0x28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d0c:	f107 0314 	add.w	r3, r7, #20
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a19      	ldr	r2, [pc, #100]	; (8002d88 <HAL_SPI_MspInit+0x84>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d12b      	bne.n	8002d7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	4b18      	ldr	r3, [pc, #96]	; (8002d8c <HAL_SPI_MspInit+0x88>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	4a17      	ldr	r2, [pc, #92]	; (8002d8c <HAL_SPI_MspInit+0x88>)
 8002d30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d34:	6453      	str	r3, [r2, #68]	; 0x44
 8002d36:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <HAL_SPI_MspInit+0x88>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <HAL_SPI_MspInit+0x88>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	4a10      	ldr	r2, [pc, #64]	; (8002d8c <HAL_SPI_MspInit+0x88>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6313      	str	r3, [r2, #48]	; 0x30
 8002d52:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <HAL_SPI_MspInit+0x88>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002d5e:	23a0      	movs	r3, #160	; 0xa0
 8002d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d62:	2302      	movs	r3, #2
 8002d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d6e:	2305      	movs	r3, #5
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d72:	f107 0314 	add.w	r3, r7, #20
 8002d76:	4619      	mov	r1, r3
 8002d78:	4805      	ldr	r0, [pc, #20]	; (8002d90 <HAL_SPI_MspInit+0x8c>)
 8002d7a:	f001 f817 	bl	8003dac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d7e:	bf00      	nop
 8002d80:	3728      	adds	r7, #40	; 0x28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40013000 	.word	0x40013000
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	40020000 	.word	0x40020000

08002d94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da4:	d14c      	bne.n	8002e40 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	4b27      	ldr	r3, [pc, #156]	; (8002e48 <HAL_TIM_Base_MspInit+0xb4>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	4a26      	ldr	r2, [pc, #152]	; (8002e48 <HAL_TIM_Base_MspInit+0xb4>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	6413      	str	r3, [r2, #64]	; 0x40
 8002db6:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <HAL_TIM_Base_MspInit+0xb4>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 8002dc2:	4b22      	ldr	r3, [pc, #136]	; (8002e4c <HAL_TIM_Base_MspInit+0xb8>)
 8002dc4:	4a22      	ldr	r2, [pc, #136]	; (8002e50 <HAL_TIM_Base_MspInit+0xbc>)
 8002dc6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 8002dc8:	4b20      	ldr	r3, [pc, #128]	; (8002e4c <HAL_TIM_Base_MspInit+0xb8>)
 8002dca:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002dce:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dd0:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <HAL_TIM_Base_MspInit+0xb8>)
 8002dd2:	2240      	movs	r2, #64	; 0x40
 8002dd4:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dd6:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <HAL_TIM_Base_MspInit+0xb8>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	; (8002e4c <HAL_TIM_Base_MspInit+0xb8>)
 8002dde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002de2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <HAL_TIM_Base_MspInit+0xb8>)
 8002de6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002dea:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dec:	4b17      	ldr	r3, [pc, #92]	; (8002e4c <HAL_TIM_Base_MspInit+0xb8>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8002df2:	4b16      	ldr	r3, [pc, #88]	; (8002e4c <HAL_TIM_Base_MspInit+0xb8>)
 8002df4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002df8:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002dfa:	4b14      	ldr	r3, [pc, #80]	; (8002e4c <HAL_TIM_Base_MspInit+0xb8>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002e00:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <HAL_TIM_Base_MspInit+0xb8>)
 8002e02:	2204      	movs	r2, #4
 8002e04:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch2_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002e06:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <HAL_TIM_Base_MspInit+0xb8>)
 8002e08:	2203      	movs	r2, #3
 8002e0a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch2_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <HAL_TIM_Base_MspInit+0xb8>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch2_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002e12:	4b0e      	ldr	r3, [pc, #56]	; (8002e4c <HAL_TIM_Base_MspInit+0xb8>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8002e18:	480c      	ldr	r0, [pc, #48]	; (8002e4c <HAL_TIM_Base_MspInit+0xb8>)
 8002e1a:	f000 fc35 	bl	8003688 <HAL_DMA_Init>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <HAL_TIM_Base_MspInit+0x94>
    {
      Error_Handler();
 8002e24:	f7ff fef4 	bl	8002c10 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a08      	ldr	r2, [pc, #32]	; (8002e4c <HAL_TIM_Base_MspInit+0xb8>)
 8002e2c:	629a      	str	r2, [r3, #40]	; 0x28
 8002e2e:	4a07      	ldr	r2, [pc, #28]	; (8002e4c <HAL_TIM_Base_MspInit+0xb8>)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a05      	ldr	r2, [pc, #20]	; (8002e4c <HAL_TIM_Base_MspInit+0xb8>)
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30
 8002e3a:	4a04      	ldr	r2, [pc, #16]	; (8002e4c <HAL_TIM_Base_MspInit+0xb8>)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e40:	bf00      	nop
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	200006a4 	.word	0x200006a4
 8002e50:	400260a0 	.word	0x400260a0

08002e54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5c:	f107 030c 	add.w	r3, r7, #12
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	60da      	str	r2, [r3, #12]
 8002e6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e74:	d11d      	bne.n	8002eb2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <HAL_TIM_MspPostInit+0x68>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	4a0f      	ldr	r2, [pc, #60]	; (8002ebc <HAL_TIM_MspPostInit+0x68>)
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	6313      	str	r3, [r2, #48]	; 0x30
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <HAL_TIM_MspPostInit+0x68>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e92:	2302      	movs	r3, #2
 8002e94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e96:	2302      	movs	r3, #2
 8002e98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea6:	f107 030c 	add.w	r3, r7, #12
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4804      	ldr	r0, [pc, #16]	; (8002ec0 <HAL_TIM_MspPostInit+0x6c>)
 8002eae:	f000 ff7d 	bl	8003dac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002eb2:	bf00      	nop
 8002eb4:	3720      	adds	r7, #32
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40020000 	.word	0x40020000

08002ec4 <HAL_InitTick>:
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08c      	sub	sp, #48	; 0x30
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	2300      	movs	r3, #0
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	4b2e      	ldr	r3, [pc, #184]	; (8002f94 <HAL_InitTick+0xd0>)
 8002eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002edc:	4a2d      	ldr	r2, [pc, #180]	; (8002f94 <HAL_InitTick+0xd0>)
 8002ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ee4:	4b2b      	ldr	r3, [pc, #172]	; (8002f94 <HAL_InitTick+0xd0>)
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f107 020c 	add.w	r2, r7, #12
 8002ef4:	f107 0310 	add.w	r3, r7, #16
 8002ef8:	4611      	mov	r1, r2
 8002efa:	4618      	mov	r0, r3
 8002efc:	f003 fac6 	bl	800648c <HAL_RCC_GetClockConfig>
 8002f00:	f003 fab0 	bl	8006464 <HAL_RCC_GetPCLK2Freq>
 8002f04:	62b8      	str	r0, [r7, #40]	; 0x28
 8002f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f08:	4a23      	ldr	r2, [pc, #140]	; (8002f98 <HAL_InitTick+0xd4>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	0c9b      	lsrs	r3, r3, #18
 8002f10:	3b01      	subs	r3, #1
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
 8002f14:	4b21      	ldr	r3, [pc, #132]	; (8002f9c <HAL_InitTick+0xd8>)
 8002f16:	4a22      	ldr	r2, [pc, #136]	; (8002fa0 <HAL_InitTick+0xdc>)
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <HAL_InitTick+0xd8>)
 8002f1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f20:	60da      	str	r2, [r3, #12]
 8002f22:	4a1e      	ldr	r2, [pc, #120]	; (8002f9c <HAL_InitTick+0xd8>)
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	6053      	str	r3, [r2, #4]
 8002f28:	4b1c      	ldr	r3, [pc, #112]	; (8002f9c <HAL_InitTick+0xd8>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	611a      	str	r2, [r3, #16]
 8002f2e:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <HAL_InitTick+0xd8>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	4b19      	ldr	r3, [pc, #100]	; (8002f9c <HAL_InitTick+0xd8>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	619a      	str	r2, [r3, #24]
 8002f3a:	4818      	ldr	r0, [pc, #96]	; (8002f9c <HAL_InitTick+0xd8>)
 8002f3c:	f003 fb61 	bl	8006602 <HAL_TIM_Base_Init>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002f46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d11b      	bne.n	8002f86 <HAL_InitTick+0xc2>
 8002f4e:	4813      	ldr	r0, [pc, #76]	; (8002f9c <HAL_InitTick+0xd8>)
 8002f50:	f003 fba6 	bl	80066a0 <HAL_TIM_Base_Start_IT>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002f5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d111      	bne.n	8002f86 <HAL_InitTick+0xc2>
 8002f62:	2018      	movs	r0, #24
 8002f64:	f000 fb82 	bl	800366c <HAL_NVIC_EnableIRQ>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b0f      	cmp	r3, #15
 8002f6c:	d808      	bhi.n	8002f80 <HAL_InitTick+0xbc>
 8002f6e:	2200      	movs	r2, #0
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	2018      	movs	r0, #24
 8002f74:	f000 fb5e 	bl	8003634 <HAL_NVIC_SetPriority>
 8002f78:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <HAL_InitTick+0xe0>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	e002      	b.n	8002f86 <HAL_InitTick+0xc2>
 8002f80:	2301      	movs	r3, #1
 8002f82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002f86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3730      	adds	r7, #48	; 0x30
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800
 8002f98:	431bde83 	.word	0x431bde83
 8002f9c:	2000070c 	.word	0x2000070c
 8002fa0:	40014000 	.word	0x40014000
 8002fa4:	20000034 	.word	0x20000034

08002fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fac:	e7fe      	b.n	8002fac <NMI_Handler+0x4>

08002fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fb2:	e7fe      	b.n	8002fb2 <HardFault_Handler+0x4>

08002fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fb8:	e7fe      	b.n	8002fb8 <MemManage_Handler+0x4>

08002fba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fbe:	e7fe      	b.n	8002fbe <BusFault_Handler+0x4>

08002fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fc4:	e7fe      	b.n	8002fc4 <UsageFault_Handler+0x4>

08002fc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8002fd8:	4802      	ldr	r0, [pc, #8]	; (8002fe4 <DMA1_Stream6_IRQHandler+0x10>)
 8002fda:	f000 fc7d 	bl	80038d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	200006a4 	.word	0x200006a4

08002fe8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002fec:	4802      	ldr	r0, [pc, #8]	; (8002ff8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002fee:	f003 fc12 	bl	8006816 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	2000070c 	.word	0x2000070c

08002ffc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT_button_on_Pin);
 8003000:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003004:	f001 f870 	bl	80040e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003008:	bf00      	nop
 800300a:	bd80      	pop	{r7, pc}

0800300c <_sbrk>:
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	4a14      	ldr	r2, [pc, #80]	; (8003068 <_sbrk+0x5c>)
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <_sbrk+0x60>)
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	613b      	str	r3, [r7, #16]
 8003020:	4b13      	ldr	r3, [pc, #76]	; (8003070 <_sbrk+0x64>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d102      	bne.n	800302e <_sbrk+0x22>
 8003028:	4b11      	ldr	r3, [pc, #68]	; (8003070 <_sbrk+0x64>)
 800302a:	4a12      	ldr	r2, [pc, #72]	; (8003074 <_sbrk+0x68>)
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	4b10      	ldr	r3, [pc, #64]	; (8003070 <_sbrk+0x64>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4413      	add	r3, r2
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	429a      	cmp	r2, r3
 800303a:	d207      	bcs.n	800304c <_sbrk+0x40>
 800303c:	f007 fc36 	bl	800a8ac <__errno>
 8003040:	4603      	mov	r3, r0
 8003042:	220c      	movs	r2, #12
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	f04f 33ff 	mov.w	r3, #4294967295
 800304a:	e009      	b.n	8003060 <_sbrk+0x54>
 800304c:	4b08      	ldr	r3, [pc, #32]	; (8003070 <_sbrk+0x64>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	4b07      	ldr	r3, [pc, #28]	; (8003070 <_sbrk+0x64>)
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	4a05      	ldr	r2, [pc, #20]	; (8003070 <_sbrk+0x64>)
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	20020000 	.word	0x20020000
 800306c:	00004000 	.word	0x00004000
 8003070:	20000754 	.word	0x20000754
 8003074:	200051c0 	.word	0x200051c0

08003078 <SystemInit>:
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <SystemInit+0x20>)
 800307e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003082:	4a05      	ldr	r2, [pc, #20]	; (8003098 <SystemInit+0x20>)
 8003084:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003088:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <StartLedControlTask>:

#include "tasks/LedControl.h"

void StartLedControlTask(void *argument){
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
	  ARGB_Init();  // Initialization
 80030a4:	f7fe fb4c 	bl	8001740 <ARGB_Init>
	  ARGB_Clear();
 80030a8:	f7fe fbc2 	bl	8001830 <ARGB_Clear>
	  while (ARGB_Show() != ARGB_OK);
 80030ac:	bf00      	nop
 80030ae:	f7fe fc6d 	bl	800198c <ARGB_Show>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d1fa      	bne.n	80030ae <StartLedControlTask+0x12>
	  ARGB_SetBrightness(100);
 80030b8:	2064      	movs	r0, #100	; 0x64
 80030ba:	f7fe fbc3 	bl	8001844 <ARGB_SetBrightness>
	  ARGB_Clear(); // Clear stirp
 80030be:	f7fe fbb7 	bl	8001830 <ARGB_Clear>
	  while (ARGB_Show() != ARGB_OK);
 80030c2:	bf00      	nop
 80030c4:	f7fe fc62 	bl	800198c <ARGB_Show>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d1fa      	bne.n	80030c4 <StartLedControlTask+0x28>

	for(;;){
		ARGB_SetRGB(1, 0, 50, 0); // Set LED №1 with 255 Green
 80030ce:	2300      	movs	r3, #0
 80030d0:	2232      	movs	r2, #50	; 0x32
 80030d2:	2100      	movs	r1, #0
 80030d4:	2001      	movs	r0, #1
 80030d6:	f7fe fbc5 	bl	8001864 <ARGB_SetRGB>
		ARGB_SetRGB(2, 50, 0, 0); // Set LED №2 with 255 Green
 80030da:	2300      	movs	r3, #0
 80030dc:	2200      	movs	r2, #0
 80030de:	2132      	movs	r1, #50	; 0x32
 80030e0:	2002      	movs	r0, #2
 80030e2:	f7fe fbbf 	bl	8001864 <ARGB_SetRGB>
		ARGB_SetRGB(3, 0, 0, 50); // Set LED №3 with 255 Green
 80030e6:	2332      	movs	r3, #50	; 0x32
 80030e8:	2200      	movs	r2, #0
 80030ea:	2100      	movs	r1, #0
 80030ec:	2003      	movs	r0, #3
 80030ee:	f7fe fbb9 	bl	8001864 <ARGB_SetRGB>
		while (ARGB_Show() != ARGB_OK);
 80030f2:	bf00      	nop
 80030f4:	f7fe fc4a 	bl	800198c <ARGB_Show>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d1fa      	bne.n	80030f4 <StartLedControlTask+0x58>
		osDelay(25);
 80030fe:	2019      	movs	r0, #25
 8003100:	f004 fb04 	bl	800770c <osDelay>
		ARGB_SetRGB(1, 0, 50, 0); // Set LED №1 with 255 Green
 8003104:	e7e3      	b.n	80030ce <StartLedControlTask+0x32>

08003106 <StartOledMenuTask>:

#include "tasks/OledMenu.h"

void StartOledMenuTask(void *argument){
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
	for(;;){
		if(buttonEn() == ON){
 800310e:	f7ff f93d 	bl	800238c <buttonEn>
 8003112:	4603      	mov	r3, r0
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <StartOledMenuTask+0x16>
			drawMainMenu();
 8003118:	f7ff f81a 	bl	8002150 <drawMainMenu>
		}
	osDelay(100);
 800311c:	2064      	movs	r0, #100	; 0x64
 800311e:	f004 faf5 	bl	800770c <osDelay>
		if(buttonEn() == ON){
 8003122:	e7f4      	b.n	800310e <StartOledMenuTask+0x8>

08003124 <StartSensOutTask>:
ADS1115_Handle_t *pADS;

osStatus_t statusMutexI2C;

// Задача для опросо кнопок ADC и энкодера
void StartSensOutTask(void *argument){
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
	initAllChanelADC();
 800312c:	f000 f8b6 	bl	800329c <initAllChanelADC>
    pADS = ADS1115_init(&hi2c1, ADS1115_ADR, configChanel1);
 8003130:	4b1a      	ldr	r3, [pc, #104]	; (800319c <StartSensOutTask+0x78>)
 8003132:	cb0c      	ldmia	r3, {r2, r3}
 8003134:	2148      	movs	r1, #72	; 0x48
 8003136:	481a      	ldr	r0, [pc, #104]	; (80031a0 <StartSensOutTask+0x7c>)
 8003138:	f7fd fdc2 	bl	8000cc0 <ADS1115_init>
 800313c:	4603      	mov	r3, r0
 800313e:	4a19      	ldr	r2, [pc, #100]	; (80031a4 <StartSensOutTask+0x80>)
 8003140:	6013      	str	r3, [r2, #0]
    ADS1115_updateConfig(pADS, configChanel1);
 8003142:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <StartSensOutTask+0x80>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a15      	ldr	r2, [pc, #84]	; (800319c <StartSensOutTask+0x78>)
 8003148:	ca06      	ldmia	r2, {r1, r2}
 800314a:	4618      	mov	r0, r3
 800314c:	f7fd fdd8 	bl	8000d00 <ADS1115_updateConfig>
    ADS1115_startContinousMode(pADS);
 8003150:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <StartSensOutTask+0x80>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7fd fe05 	bl	8000d64 <ADS1115_startContinousMode>
	for(;;){
		// Попытка захвата мьютекса с таймаутом 1000 мс
		statusMutexI2C = osMutexAcquire(BlockI2CHandle, 1000);
 800315a:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <StartSensOutTask+0x84>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003162:	4618      	mov	r0, r3
 8003164:	f004 fb73 	bl	800784e <osMutexAcquire>
 8003168:	4603      	mov	r3, r0
 800316a:	4a10      	ldr	r2, [pc, #64]	; (80031ac <StartSensOutTask+0x88>)
 800316c:	6013      	str	r3, [r2, #0]
		if(statusMutexI2C == osOK){
 800316e:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <StartSensOutTask+0x88>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10b      	bne.n	800318e <StartSensOutTask+0x6a>
			calcDeltaAngle((int16_t)getEncoderData()); // Расчитываем смещение энкодера
 8003176:	f000 f873 	bl	8003260 <getEncoderData>
 800317a:	4603      	mov	r3, r0
 800317c:	b21b      	sxth	r3, r3
 800317e:	4618      	mov	r0, r3
 8003180:	f000 f816 	bl	80031b0 <calcDeltaAngle>
			osMutexRelease(BlockI2CHandle);// Освобождение мьютекса
 8003184:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <StartSensOutTask+0x84>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f004 fbab 	bl	80078e4 <osMutexRelease>
		}
		longButton();
 800318e:	f000 f847 	bl	8003220 <longButton>
		osDelay(50);
 8003192:	2032      	movs	r0, #50	; 0x32
 8003194:	f004 faba 	bl	800770c <osDelay>
		statusMutexI2C = osMutexAcquire(BlockI2CHandle, 1000);
 8003198:	e7df      	b.n	800315a <StartSensOutTask+0x36>
 800319a:	bf00      	nop
 800319c:	20000760 	.word	0x20000760
 80031a0:	200005b0 	.word	0x200005b0
 80031a4:	20000780 	.word	0x20000780
 80031a8:	20000708 	.word	0x20000708
 80031ac:	20000784 	.word	0x20000784

080031b0 <calcDeltaAngle>:
	}
}

void calcDeltaAngle(int16_t current_encoder_data){
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	80fb      	strh	r3, [r7, #6]
	delta_encoder = current_encoder_data - old_encoder_data;
 80031ba:	88fa      	ldrh	r2, [r7, #6]
 80031bc:	4b16      	ldr	r3, [pc, #88]	; (8003218 <calcDeltaAngle+0x68>)
 80031be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	b21a      	sxth	r2, r3
 80031ca:	4b14      	ldr	r3, [pc, #80]	; (800321c <calcDeltaAngle+0x6c>)
 80031cc:	801a      	strh	r2, [r3, #0]
	old_encoder_data = current_encoder_data;
 80031ce:	4a12      	ldr	r2, [pc, #72]	; (8003218 <calcDeltaAngle+0x68>)
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	8013      	strh	r3, [r2, #0]
	if(delta_encoder > MAX_ANGLE || delta_encoder < (-1)*MAX_ANGLE){
 80031d4:	4b11      	ldr	r3, [pc, #68]	; (800321c <calcDeltaAngle+0x6c>)
 80031d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031da:	2bb4      	cmp	r3, #180	; 0xb4
 80031dc:	dc05      	bgt.n	80031ea <calcDeltaAngle+0x3a>
 80031de:	4b0f      	ldr	r3, [pc, #60]	; (800321c <calcDeltaAngle+0x6c>)
 80031e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031e4:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 80031e8:	da02      	bge.n	80031f0 <calcDeltaAngle+0x40>
		delta_encoder = 0;
 80031ea:	4b0c      	ldr	r3, [pc, #48]	; (800321c <calcDeltaAngle+0x6c>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	801a      	strh	r2, [r3, #0]
	}
	if(delta_encoder > MIN_ANGLE )
 80031f0:	4b0a      	ldr	r3, [pc, #40]	; (800321c <calcDeltaAngle+0x6c>)
 80031f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031f6:	2b05      	cmp	r3, #5
 80031f8:	dd01      	ble.n	80031fe <calcDeltaAngle+0x4e>
		encoderSetUp();
 80031fa:	f7ff f943 	bl	8002484 <encoderSetUp>
	if(delta_encoder < (-1)*MIN_ANGLE)
 80031fe:	4b07      	ldr	r3, [pc, #28]	; (800321c <calcDeltaAngle+0x6c>)
 8003200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003204:	f113 0f05 	cmn.w	r3, #5
 8003208:	da01      	bge.n	800320e <calcDeltaAngle+0x5e>
		encoderSetDown();
 800320a:	f7ff f947 	bl	800249c <encoderSetDown>
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	2000075a 	.word	0x2000075a
 800321c:	2000075c 	.word	0x2000075c

08003220 <longButton>:
void longButton(){
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
	if(buttonEn() == OFF){
 8003224:	f7ff f8b2 	bl	800238c <buttonEn>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <longButton+0x12>
		buttonCounterReset();
 800322e:	f7ff f8ed 	bl	800240c <buttonCounterReset>
	}
	if(buttonEn() == ON){
 8003232:	f7ff f8ab 	bl	800238c <buttonEn>
 8003236:	4603      	mov	r3, r0
 8003238:	2b01      	cmp	r3, #1
 800323a:	d103      	bne.n	8003244 <longButton+0x24>
		buttonCounterSet();
 800323c:	f7ff f8d6 	bl	80023ec <buttonCounterSet>
		buttonEnReset();
 8003240:	f7ff f8bc 	bl	80023bc <buttonEnReset>
	}
	if(buttonCounter() > 10){
 8003244:	f7ff f8c6 	bl	80023d4 <buttonCounter>
 8003248:	4603      	mov	r3, r0
 800324a:	2b0a      	cmp	r3, #10
 800324c:	d905      	bls.n	800325a <longButton+0x3a>
		buttonLongSet();
 800324e:	f7ff f8f5 	bl	800243c <buttonLongSet>
		buttonCounterReset();
 8003252:	f7ff f8db 	bl	800240c <buttonCounterReset>
		buttonUpReset();
 8003256:	f7ff f88d 	bl	8002374 <buttonUpReset>
	}
}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <getEncoderData>:

u_magnituda magnituda;
uint16_t getEncoderData(){
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
	magnituda.data = AS5600_GetStatus();
 8003264:	f7fe ff68 	bl	8002138 <AS5600_GetStatus>
 8003268:	4603      	mov	r3, r0
 800326a:	b2da      	uxtb	r2, r3
 800326c:	4b09      	ldr	r3, [pc, #36]	; (8003294 <getEncoderData+0x34>)
 800326e:	701a      	strb	r2, [r3, #0]
	if(magnituda.state_magnit.MD == ON)
 8003270:	4b08      	ldr	r3, [pc, #32]	; (8003294 <getEncoderData+0x34>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	f003 0320 	and.w	r3, r3, #32
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <getEncoderData+0x2a>
		raw_angle = AS5600_GetRawAngle();
 800327e:	f7fe ff45 	bl	800210c <AS5600_GetRawAngle>
 8003282:	4603      	mov	r3, r0
 8003284:	b29a      	uxth	r2, r3
 8003286:	4b04      	ldr	r3, [pc, #16]	; (8003298 <getEncoderData+0x38>)
 8003288:	801a      	strh	r2, [r3, #0]
	return 	raw_angle;
 800328a:	4b03      	ldr	r3, [pc, #12]	; (8003298 <getEncoderData+0x38>)
 800328c:	881b      	ldrh	r3, [r3, #0]
}
 800328e:	4618      	mov	r0, r3
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	20000788 	.word	0x20000788
 8003298:	20000758 	.word	0x20000758

0800329c <initAllChanelADC>:

void initAllChanelADC(){
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
	initADC(&configChanel1);
 80032a0:	480e      	ldr	r0, [pc, #56]	; (80032dc <initAllChanelADC+0x40>)
 80032a2:	f000 f823 	bl	80032ec <initADC>
	initADC(&configChanel2);
 80032a6:	480e      	ldr	r0, [pc, #56]	; (80032e0 <initAllChanelADC+0x44>)
 80032a8:	f000 f820 	bl	80032ec <initADC>
	initADC(&configChanel3);
 80032ac:	480d      	ldr	r0, [pc, #52]	; (80032e4 <initAllChanelADC+0x48>)
 80032ae:	f000 f81d 	bl	80032ec <initADC>
	initADC(&configChanel4);
 80032b2:	480d      	ldr	r0, [pc, #52]	; (80032e8 <initAllChanelADC+0x4c>)
 80032b4:	f000 f81a 	bl	80032ec <initADC>

	initChanelADC(&configChanel1, CHANNEL_AIN0_GND);
 80032b8:	2104      	movs	r1, #4
 80032ba:	4808      	ldr	r0, [pc, #32]	; (80032dc <initAllChanelADC+0x40>)
 80032bc:	f000 f835 	bl	800332a <initChanelADC>
	initChanelADC(&configChanel2, CHANNEL_AIN1_GND);
 80032c0:	2105      	movs	r1, #5
 80032c2:	4807      	ldr	r0, [pc, #28]	; (80032e0 <initAllChanelADC+0x44>)
 80032c4:	f000 f831 	bl	800332a <initChanelADC>
	initChanelADC(&configChanel3, CHANNEL_AIN2_GND);
 80032c8:	2106      	movs	r1, #6
 80032ca:	4806      	ldr	r0, [pc, #24]	; (80032e4 <initAllChanelADC+0x48>)
 80032cc:	f000 f82d 	bl	800332a <initChanelADC>
	initChanelADC(&configChanel4, CHANNEL_AIN3_GND);
 80032d0:	2107      	movs	r1, #7
 80032d2:	4805      	ldr	r0, [pc, #20]	; (80032e8 <initAllChanelADC+0x4c>)
 80032d4:	f000 f829 	bl	800332a <initChanelADC>
}
 80032d8:	bf00      	nop
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20000760 	.word	0x20000760
 80032e0:	20000768 	.word	0x20000768
 80032e4:	20000770 	.word	0x20000770
 80032e8:	20000778 	.word	0x20000778

080032ec <initADC>:

void initADC(ADS1115_Config_t* configReg){
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
	configReg->pgaConfig 		= PGA_4_096;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	705a      	strb	r2, [r3, #1]
	configReg->operatingMode 	= MODE_CONTINOUS;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	709a      	strb	r2, [r3, #2]
	configReg->dataRate 		= DRATE_250;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2205      	movs	r2, #5
 8003304:	70da      	strb	r2, [r3, #3]
	configReg->compareMode 		= COMP_HYSTERESIS;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	711a      	strb	r2, [r3, #4]
	configReg->polarityMode 	= POLARITY_ACTIVE_LOW;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	715a      	strb	r2, [r3, #5]
	configReg->latchingMode  	= LATCHING_NONE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	719a      	strb	r2, [r3, #6]
	configReg->queueComparator 	= QUEUE_ONE; 			// ПОднять флаг через сколько измерений
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	71da      	strb	r2, [r3, #7]
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <initChanelADC>:

void initChanelADC(ADS1115_Config_t* configReg, MultiplexerConfig_t chanel){
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	460b      	mov	r3, r1
 8003334:	70fb      	strb	r3, [r7, #3]
	configReg->channel = chanel;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	701a      	strb	r2, [r3, #0]
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <initUserTasks>:
  .name = "SensOutTask",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

void initUserTasks(){
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
	OledMenuTaskHandle   = osThreadNew(StartOledMenuTask,   NULL, &OledMenuTask_attributes);
 800334c:	4a0c      	ldr	r2, [pc, #48]	; (8003380 <initUserTasks+0x38>)
 800334e:	2100      	movs	r1, #0
 8003350:	480c      	ldr	r0, [pc, #48]	; (8003384 <initUserTasks+0x3c>)
 8003352:	f004 f949 	bl	80075e8 <osThreadNew>
 8003356:	4603      	mov	r3, r0
 8003358:	4a0b      	ldr	r2, [pc, #44]	; (8003388 <initUserTasks+0x40>)
 800335a:	6013      	str	r3, [r2, #0]
	LedControlTaskHandle = osThreadNew(StartLedControlTask, NULL, &LedControlTask_attributes);
 800335c:	4a0b      	ldr	r2, [pc, #44]	; (800338c <initUserTasks+0x44>)
 800335e:	2100      	movs	r1, #0
 8003360:	480b      	ldr	r0, [pc, #44]	; (8003390 <initUserTasks+0x48>)
 8003362:	f004 f941 	bl	80075e8 <osThreadNew>
 8003366:	4603      	mov	r3, r0
 8003368:	4a0a      	ldr	r2, [pc, #40]	; (8003394 <initUserTasks+0x4c>)
 800336a:	6013      	str	r3, [r2, #0]
	SensOutTaskHandle    = osThreadNew(StartSensOutTask,    NULL, &SensOutTask_attributes);
 800336c:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <initUserTasks+0x50>)
 800336e:	2100      	movs	r1, #0
 8003370:	480a      	ldr	r0, [pc, #40]	; (800339c <initUserTasks+0x54>)
 8003372:	f004 f939 	bl	80075e8 <osThreadNew>
 8003376:	4603      	mov	r3, r0
 8003378:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <initUserTasks+0x58>)
 800337a:	6013      	str	r3, [r2, #0]
};
 800337c:	bf00      	nop
 800337e:	bd80      	pop	{r7, pc}
 8003380:	0800c2e4 	.word	0x0800c2e4
 8003384:	08003107 	.word	0x08003107
 8003388:	2000078c 	.word	0x2000078c
 800338c:	0800c308 	.word	0x0800c308
 8003390:	0800309d 	.word	0x0800309d
 8003394:	20000790 	.word	0x20000790
 8003398:	0800c32c 	.word	0x0800c32c
 800339c:	08003125 	.word	0x08003125
 80033a0:	20000794 	.word	0x20000794

080033a4 <Reset_Handler>:
 80033a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033dc <LoopFillZerobss+0x12>
 80033a8:	480d      	ldr	r0, [pc, #52]	; (80033e0 <LoopFillZerobss+0x16>)
 80033aa:	490e      	ldr	r1, [pc, #56]	; (80033e4 <LoopFillZerobss+0x1a>)
 80033ac:	4a0e      	ldr	r2, [pc, #56]	; (80033e8 <LoopFillZerobss+0x1e>)
 80033ae:	2300      	movs	r3, #0
 80033b0:	e002      	b.n	80033b8 <LoopCopyDataInit>

080033b2 <CopyDataInit>:
 80033b2:	58d4      	ldr	r4, [r2, r3]
 80033b4:	50c4      	str	r4, [r0, r3]
 80033b6:	3304      	adds	r3, #4

080033b8 <LoopCopyDataInit>:
 80033b8:	18c4      	adds	r4, r0, r3
 80033ba:	428c      	cmp	r4, r1
 80033bc:	d3f9      	bcc.n	80033b2 <CopyDataInit>
 80033be:	4a0b      	ldr	r2, [pc, #44]	; (80033ec <LoopFillZerobss+0x22>)
 80033c0:	4c0b      	ldr	r4, [pc, #44]	; (80033f0 <LoopFillZerobss+0x26>)
 80033c2:	2300      	movs	r3, #0
 80033c4:	e001      	b.n	80033ca <LoopFillZerobss>

080033c6 <FillZerobss>:
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	3204      	adds	r2, #4

080033ca <LoopFillZerobss>:
 80033ca:	42a2      	cmp	r2, r4
 80033cc:	d3fb      	bcc.n	80033c6 <FillZerobss>
 80033ce:	f7ff fe53 	bl	8003078 <SystemInit>
 80033d2:	f007 fa71 	bl	800a8b8 <__libc_init_array>
 80033d6:	f7ff f983 	bl	80026e0 <main>
 80033da:	4770      	bx	lr
 80033dc:	20020000 	.word	0x20020000
 80033e0:	20000000 	.word	0x20000000
 80033e4:	200000a4 	.word	0x200000a4
 80033e8:	0800c3f0 	.word	0x0800c3f0
 80033ec:	200000a4 	.word	0x200000a4
 80033f0:	200051bc 	.word	0x200051bc

080033f4 <ADC_IRQHandler>:
 80033f4:	e7fe      	b.n	80033f4 <ADC_IRQHandler>
	...

080033f8 <HAL_Init>:
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	4b0e      	ldr	r3, [pc, #56]	; (8003438 <HAL_Init+0x40>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a0d      	ldr	r2, [pc, #52]	; (8003438 <HAL_Init+0x40>)
 8003402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <HAL_Init+0x40>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a0a      	ldr	r2, [pc, #40]	; (8003438 <HAL_Init+0x40>)
 800340e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	4b08      	ldr	r3, [pc, #32]	; (8003438 <HAL_Init+0x40>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a07      	ldr	r2, [pc, #28]	; (8003438 <HAL_Init+0x40>)
 800341a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	2003      	movs	r0, #3
 8003422:	f000 f8fc 	bl	800361e <HAL_NVIC_SetPriorityGrouping>
 8003426:	2000      	movs	r0, #0
 8003428:	f7ff fd4c 	bl	8002ec4 <HAL_InitTick>
 800342c:	f7ff fbf6 	bl	8002c1c <HAL_MspInit>
 8003430:	2300      	movs	r3, #0
 8003432:	4618      	mov	r0, r3
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40023c00 	.word	0x40023c00

0800343c <HAL_IncTick>:
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
 8003440:	4b06      	ldr	r3, [pc, #24]	; (800345c <HAL_IncTick+0x20>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_IncTick+0x24>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4413      	add	r3, r2
 800344c:	4a04      	ldr	r2, [pc, #16]	; (8003460 <HAL_IncTick+0x24>)
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	20000038 	.word	0x20000038
 8003460:	20000798 	.word	0x20000798

08003464 <HAL_GetTick>:
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
 8003468:	4b03      	ldr	r3, [pc, #12]	; (8003478 <HAL_GetTick+0x14>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	20000798 	.word	0x20000798

0800347c <HAL_Delay>:
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	f7ff ffee 	bl	8003464 <HAL_GetTick>
 8003488:	60b8      	str	r0, [r7, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003494:	d005      	beq.n	80034a2 <HAL_Delay+0x26>
 8003496:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <HAL_Delay+0x44>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4413      	add	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	bf00      	nop
 80034a4:	f7ff ffde 	bl	8003464 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d8f7      	bhi.n	80034a4 <HAL_Delay+0x28>
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000038 	.word	0x20000038

080034c4 <__NVIC_SetPriorityGrouping>:
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <__NVIC_SetPriorityGrouping+0x44>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034e0:	4013      	ands	r3, r2
 80034e2:	60bb      	str	r3, [r7, #8]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	021a      	lsls	r2, r3, #8
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	4a04      	ldr	r2, [pc, #16]	; (8003508 <__NVIC_SetPriorityGrouping+0x44>)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	60d3      	str	r3, [r2, #12]
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	e000ed00 	.word	0xe000ed00

0800350c <__NVIC_GetPriorityGrouping>:
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
 8003510:	4b04      	ldr	r3, [pc, #16]	; (8003524 <__NVIC_GetPriorityGrouping+0x18>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	0a1b      	lsrs	r3, r3, #8
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	4618      	mov	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <__NVIC_EnableIRQ>:
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	71fb      	strb	r3, [r7, #7]
 8003532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003536:	2b00      	cmp	r3, #0
 8003538:	db0b      	blt.n	8003552 <__NVIC_EnableIRQ+0x2a>
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	f003 021f 	and.w	r2, r3, #31
 8003540:	4907      	ldr	r1, [pc, #28]	; (8003560 <__NVIC_EnableIRQ+0x38>)
 8003542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	2001      	movs	r0, #1
 800354a:	fa00 f202 	lsl.w	r2, r0, r2
 800354e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	e000e100 	.word	0xe000e100

08003564 <__NVIC_SetPriority>:
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	4603      	mov	r3, r0
 800356c:	6039      	str	r1, [r7, #0]
 800356e:	71fb      	strb	r3, [r7, #7]
 8003570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003574:	2b00      	cmp	r3, #0
 8003576:	db0a      	blt.n	800358e <__NVIC_SetPriority+0x2a>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	b2da      	uxtb	r2, r3
 800357c:	490c      	ldr	r1, [pc, #48]	; (80035b0 <__NVIC_SetPriority+0x4c>)
 800357e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003582:	0112      	lsls	r2, r2, #4
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	440b      	add	r3, r1
 8003588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800358c:	e00a      	b.n	80035a4 <__NVIC_SetPriority+0x40>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	b2da      	uxtb	r2, r3
 8003592:	4908      	ldr	r1, [pc, #32]	; (80035b4 <__NVIC_SetPriority+0x50>)
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	3b04      	subs	r3, #4
 800359c:	0112      	lsls	r2, r2, #4
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	440b      	add	r3, r1
 80035a2:	761a      	strb	r2, [r3, #24]
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	e000e100 	.word	0xe000e100
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <NVIC_EncodePriority>:
 80035b8:	b480      	push	{r7}
 80035ba:	b089      	sub	sp, #36	; 0x24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f003 0307 	and.w	r3, r3, #7
 80035ca:	61fb      	str	r3, [r7, #28]
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f1c3 0307 	rsb	r3, r3, #7
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	bf28      	it	cs
 80035d6:	2304      	movcs	r3, #4
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	3304      	adds	r3, #4
 80035de:	2b06      	cmp	r3, #6
 80035e0:	d902      	bls.n	80035e8 <NVIC_EncodePriority+0x30>
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	3b03      	subs	r3, #3
 80035e6:	e000      	b.n	80035ea <NVIC_EncodePriority+0x32>
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	f04f 32ff 	mov.w	r2, #4294967295
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43da      	mvns	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	401a      	ands	r2, r3
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	409a      	lsls	r2, r3
 8003600:	f04f 31ff 	mov.w	r1, #4294967295
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	fa01 f303 	lsl.w	r3, r1, r3
 800360a:	43d9      	mvns	r1, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	400b      	ands	r3, r1
 8003610:	4313      	orrs	r3, r2
 8003612:	4618      	mov	r0, r3
 8003614:	3724      	adds	r7, #36	; 0x24
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <HAL_NVIC_SetPriorityGrouping>:
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff ff4c 	bl	80034c4 <__NVIC_SetPriorityGrouping>
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_NVIC_SetPriority>:
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	73fb      	strb	r3, [r7, #15]
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	f7ff ff61 	bl	800350c <__NVIC_GetPriorityGrouping>
 800364a:	6178      	str	r0, [r7, #20]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	6978      	ldr	r0, [r7, #20]
 8003652:	f7ff ffb1 	bl	80035b8 <NVIC_EncodePriority>
 8003656:	4602      	mov	r2, r0
 8003658:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800365c:	4611      	mov	r1, r2
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff ff80 	bl	8003564 <__NVIC_SetPriority>
 8003664:	bf00      	nop
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_NVIC_EnableIRQ>:
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	71fb      	strb	r3, [r7, #7]
 8003676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff ff54 	bl	8003528 <__NVIC_EnableIRQ>
 8003680:	bf00      	nop
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_DMA_Init>:
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	f7ff fee6 	bl	8003464 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_DMA_Init+0x1c>
 80036a0:	2301      	movs	r3, #1
 80036a2:	e099      	b.n	80037d8 <HAL_DMA_Init+0x150>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0201 	bic.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	e00f      	b.n	80036e6 <HAL_DMA_Init+0x5e>
 80036c6:	f7ff fecd 	bl	8003464 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b05      	cmp	r3, #5
 80036d2:	d908      	bls.n	80036e6 <HAL_DMA_Init+0x5e>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2220      	movs	r2, #32
 80036d8:	655a      	str	r2, [r3, #84]	; 0x54
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2203      	movs	r2, #3
 80036de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80036e2:	2303      	movs	r3, #3
 80036e4:	e078      	b.n	80037d8 <HAL_DMA_Init+0x150>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1e8      	bne.n	80036c6 <HAL_DMA_Init+0x3e>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	4b38      	ldr	r3, [pc, #224]	; (80037e0 <HAL_DMA_Init+0x158>)
 8003700:	4013      	ands	r3, r2
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	4313      	orrs	r3, r2
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	2b04      	cmp	r3, #4
 800373e:	d107      	bne.n	8003750 <HAL_DMA_Init+0xc8>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	4313      	orrs	r3, r2
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f023 0307 	bic.w	r3, r3, #7
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	2b04      	cmp	r3, #4
 8003778:	d117      	bne.n	80037aa <HAL_DMA_Init+0x122>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00e      	beq.n	80037aa <HAL_DMA_Init+0x122>
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fa91 	bl	8003cb4 <DMA_CheckFifoParam>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d008      	beq.n	80037aa <HAL_DMA_Init+0x122>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2240      	movs	r2, #64	; 0x40
 800379c:	655a      	str	r2, [r3, #84]	; 0x54
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80037a6:	2301      	movs	r3, #1
 80037a8:	e016      	b.n	80037d8 <HAL_DMA_Init+0x150>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	615a      	str	r2, [r3, #20]
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fa48 	bl	8003c48 <DMA_CalcBaseAndBitshift>
 80037b8:	4603      	mov	r3, r0
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c0:	223f      	movs	r2, #63	; 0x3f
 80037c2:	409a      	lsls	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	655a      	str	r2, [r3, #84]	; 0x54
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80037d6:	2300      	movs	r3, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	f010803f 	.word	0xf010803f

080037e4 <HAL_DMA_Start_IT>:
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	603b      	str	r3, [r7, #0]
 80037f2:	2300      	movs	r3, #0
 80037f4:	75fb      	strb	r3, [r7, #23]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_DMA_Start_IT+0x26>
 8003806:	2302      	movs	r3, #2
 8003808:	e040      	b.n	800388c <HAL_DMA_Start_IT+0xa8>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b01      	cmp	r3, #1
 800381c:	d12f      	bne.n	800387e <HAL_DMA_Start_IT+0x9a>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2202      	movs	r2, #2
 8003822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	655a      	str	r2, [r3, #84]	; 0x54
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 f9da 	bl	8003bec <DMA_SetConfig>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383c:	223f      	movs	r2, #63	; 0x3f
 800383e:	409a      	lsls	r2, r3
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	609a      	str	r2, [r3, #8]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0216 	orr.w	r2, r2, #22
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <HAL_DMA_Start_IT+0x88>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0208 	orr.w	r2, r2, #8
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	e005      	b.n	800388a <HAL_DMA_Start_IT+0xa6>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003886:	2302      	movs	r3, #2
 8003888:	75fb      	strb	r3, [r7, #23]
 800388a:	7dfb      	ldrb	r3, [r7, #23]
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_DMA_Abort_IT>:
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d004      	beq.n	80038b2 <HAL_DMA_Abort_IT+0x1e>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2280      	movs	r2, #128	; 0x80
 80038ac:	655a      	str	r2, [r3, #84]	; 0x54
 80038ae:	2301      	movs	r3, #1
 80038b0:	e00c      	b.n	80038cc <HAL_DMA_Abort_IT+0x38>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2205      	movs	r2, #5
 80038b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0201 	bic.w	r2, r2, #1
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	2300      	movs	r3, #0
 80038cc:	4618      	mov	r0, r3
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_DMA_IRQHandler>:
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	2300      	movs	r3, #0
 80038e2:	60bb      	str	r3, [r7, #8]
 80038e4:	4b8e      	ldr	r3, [pc, #568]	; (8003b20 <HAL_DMA_IRQHandler+0x248>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a8e      	ldr	r2, [pc, #568]	; (8003b24 <HAL_DMA_IRQHandler+0x24c>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	0a9b      	lsrs	r3, r3, #10
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003902:	2208      	movs	r2, #8
 8003904:	409a      	lsls	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4013      	ands	r3, r2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d01a      	beq.n	8003944 <HAL_DMA_IRQHandler+0x6c>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d013      	beq.n	8003944 <HAL_DMA_IRQHandler+0x6c>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0204 	bic.w	r2, r2, #4
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	2208      	movs	r2, #8
 8003932:	409a      	lsls	r2, r3
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	609a      	str	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	f043 0201 	orr.w	r2, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	655a      	str	r2, [r3, #84]	; 0x54
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003948:	2201      	movs	r2, #1
 800394a:	409a      	lsls	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d012      	beq.n	800397a <HAL_DMA_IRQHandler+0xa2>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <HAL_DMA_IRQHandler+0xa2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003966:	2201      	movs	r2, #1
 8003968:	409a      	lsls	r2, r3
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	609a      	str	r2, [r3, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003972:	f043 0202 	orr.w	r2, r3, #2
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	655a      	str	r2, [r3, #84]	; 0x54
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397e:	2204      	movs	r2, #4
 8003980:	409a      	lsls	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4013      	ands	r3, r2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d012      	beq.n	80039b0 <HAL_DMA_IRQHandler+0xd8>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00b      	beq.n	80039b0 <HAL_DMA_IRQHandler+0xd8>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399c:	2204      	movs	r2, #4
 800399e:	409a      	lsls	r2, r3
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	609a      	str	r2, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a8:	f043 0204 	orr.w	r2, r3, #4
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b4:	2210      	movs	r2, #16
 80039b6:	409a      	lsls	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d043      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x170>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d03c      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x170>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d2:	2210      	movs	r2, #16
 80039d4:	409a      	lsls	r2, r3
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	609a      	str	r2, [r3, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d018      	beq.n	8003a1a <HAL_DMA_IRQHandler+0x142>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d108      	bne.n	8003a08 <HAL_DMA_IRQHandler+0x130>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d024      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x170>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	4798      	blx	r3
 8003a06:	e01f      	b.n	8003a48 <HAL_DMA_IRQHandler+0x170>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01b      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x170>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	4798      	blx	r3
 8003a18:	e016      	b.n	8003a48 <HAL_DMA_IRQHandler+0x170>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d107      	bne.n	8003a38 <HAL_DMA_IRQHandler+0x160>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0208 	bic.w	r2, r2, #8
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x170>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	4798      	blx	r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 808f 	beq.w	8003b78 <HAL_DMA_IRQHandler+0x2a0>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8087 	beq.w	8003b78 <HAL_DMA_IRQHandler+0x2a0>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6e:	2220      	movs	r2, #32
 8003a70:	409a      	lsls	r2, r3
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	609a      	str	r2, [r3, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b05      	cmp	r3, #5
 8003a80:	d136      	bne.n	8003af0 <HAL_DMA_IRQHandler+0x218>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0216 	bic.w	r2, r2, #22
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695a      	ldr	r2, [r3, #20]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aa0:	615a      	str	r2, [r3, #20]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d103      	bne.n	8003ab2 <HAL_DMA_IRQHandler+0x1da>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d007      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x1ea>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0208 	bic.w	r2, r2, #8
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac6:	223f      	movs	r2, #63	; 0x3f
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	609a      	str	r2, [r3, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d07e      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x30c>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	4798      	blx	r3
 8003aee:	e079      	b.n	8003be4 <HAL_DMA_IRQHandler+0x30c>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d01d      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x262>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10d      	bne.n	8003b28 <HAL_DMA_IRQHandler+0x250>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d031      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x2a0>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	4798      	blx	r3
 8003b1c:	e02c      	b.n	8003b78 <HAL_DMA_IRQHandler+0x2a0>
 8003b1e:	bf00      	nop
 8003b20:	20000030 	.word	0x20000030
 8003b24:	1b4e81b5 	.word	0x1b4e81b5
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d023      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x2a0>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4798      	blx	r3
 8003b38:	e01e      	b.n	8003b78 <HAL_DMA_IRQHandler+0x2a0>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10f      	bne.n	8003b68 <HAL_DMA_IRQHandler+0x290>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0210 	bic.w	r2, r2, #16
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x2a0>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4798      	blx	r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d032      	beq.n	8003be6 <HAL_DMA_IRQHandler+0x30e>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d022      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x2fa>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2205      	movs	r2, #5
 8003b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0201 	bic.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d307      	bcc.n	8003bc0 <HAL_DMA_IRQHandler+0x2e8>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f2      	bne.n	8003ba4 <HAL_DMA_IRQHandler+0x2cc>
 8003bbe:	e000      	b.n	8003bc2 <HAL_DMA_IRQHandler+0x2ea>
 8003bc0:	bf00      	nop
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d005      	beq.n	8003be6 <HAL_DMA_IRQHandler+0x30e>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	4798      	blx	r3
 8003be2:	e000      	b.n	8003be6 <HAL_DMA_IRQHandler+0x30e>
 8003be4:	bf00      	nop
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <DMA_SetConfig>:
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b40      	cmp	r3, #64	; 0x40
 8003c18:	d108      	bne.n	8003c2c <DMA_SetConfig+0x40>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	609a      	str	r2, [r3, #8]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	60da      	str	r2, [r3, #12]
 8003c2a:	e007      	b.n	8003c3c <DMA_SetConfig+0x50>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	609a      	str	r2, [r3, #8]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	60da      	str	r2, [r3, #12]
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <DMA_CalcBaseAndBitshift>:
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	3b10      	subs	r3, #16
 8003c58:	4a14      	ldr	r2, [pc, #80]	; (8003cac <DMA_CalcBaseAndBitshift+0x64>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	4a13      	ldr	r2, [pc, #76]	; (8003cb0 <DMA_CalcBaseAndBitshift+0x68>)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4413      	add	r3, r2
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	d909      	bls.n	8003c8a <DMA_CalcBaseAndBitshift+0x42>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c7e:	f023 0303 	bic.w	r3, r3, #3
 8003c82:	1d1a      	adds	r2, r3, #4
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	659a      	str	r2, [r3, #88]	; 0x58
 8003c88:	e007      	b.n	8003c9a <DMA_CalcBaseAndBitshift+0x52>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c92:	f023 0303 	bic.w	r3, r3, #3
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6593      	str	r3, [r2, #88]	; 0x58
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	aaaaaaab 	.word	0xaaaaaaab
 8003cb0:	0800c350 	.word	0x0800c350

08003cb4 <DMA_CheckFifoParam>:
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	73fb      	strb	r3, [r7, #15]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d11f      	bne.n	8003d0e <DMA_CheckFifoParam+0x5a>
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d856      	bhi.n	8003d82 <DMA_CheckFifoParam+0xce>
 8003cd4:	a201      	add	r2, pc, #4	; (adr r2, 8003cdc <DMA_CheckFifoParam+0x28>)
 8003cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cda:	bf00      	nop
 8003cdc:	08003ced 	.word	0x08003ced
 8003ce0:	08003cff 	.word	0x08003cff
 8003ce4:	08003ced 	.word	0x08003ced
 8003ce8:	08003d83 	.word	0x08003d83
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d046      	beq.n	8003d86 <DMA_CheckFifoParam+0xd2>
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
 8003cfc:	e043      	b.n	8003d86 <DMA_CheckFifoParam+0xd2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d06:	d140      	bne.n	8003d8a <DMA_CheckFifoParam+0xd6>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
 8003d0c:	e03d      	b.n	8003d8a <DMA_CheckFifoParam+0xd6>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d16:	d121      	bne.n	8003d5c <DMA_CheckFifoParam+0xa8>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d837      	bhi.n	8003d8e <DMA_CheckFifoParam+0xda>
 8003d1e:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <DMA_CheckFifoParam+0x70>)
 8003d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d24:	08003d35 	.word	0x08003d35
 8003d28:	08003d3b 	.word	0x08003d3b
 8003d2c:	08003d35 	.word	0x08003d35
 8003d30:	08003d4d 	.word	0x08003d4d
 8003d34:	2301      	movs	r3, #1
 8003d36:	73fb      	strb	r3, [r7, #15]
 8003d38:	e030      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d025      	beq.n	8003d92 <DMA_CheckFifoParam+0xde>
 8003d46:	2301      	movs	r3, #1
 8003d48:	73fb      	strb	r3, [r7, #15]
 8003d4a:	e022      	b.n	8003d92 <DMA_CheckFifoParam+0xde>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d54:	d11f      	bne.n	8003d96 <DMA_CheckFifoParam+0xe2>
 8003d56:	2301      	movs	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
 8003d5a:	e01c      	b.n	8003d96 <DMA_CheckFifoParam+0xe2>
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d903      	bls.n	8003d6a <DMA_CheckFifoParam+0xb6>
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d003      	beq.n	8003d70 <DMA_CheckFifoParam+0xbc>
 8003d68:	e018      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	73fb      	strb	r3, [r7, #15]
 8003d6e:	e015      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00e      	beq.n	8003d9a <DMA_CheckFifoParam+0xe6>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]
 8003d80:	e00b      	b.n	8003d9a <DMA_CheckFifoParam+0xe6>
 8003d82:	bf00      	nop
 8003d84:	e00a      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
 8003d86:	bf00      	nop
 8003d88:	e008      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
 8003d8a:	bf00      	nop
 8003d8c:	e006      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
 8003d8e:	bf00      	nop
 8003d90:	e004      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
 8003d92:	bf00      	nop
 8003d94:	e002      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
 8003d96:	bf00      	nop
 8003d98:	e000      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
 8003d9a:	bf00      	nop
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop

08003dac <HAL_GPIO_Init>:
 8003dac:	b480      	push	{r7}
 8003dae:	b089      	sub	sp, #36	; 0x24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61bb      	str	r3, [r7, #24]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	e159      	b.n	800407c <HAL_GPIO_Init+0x2d0>
 8003dc8:	2201      	movs	r2, #1
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	f040 8148 	bne.w	8004076 <HAL_GPIO_Init+0x2ca>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d005      	beq.n	8003dfe <HAL_GPIO_Init+0x52>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d130      	bne.n	8003e60 <HAL_GPIO_Init+0xb4>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	61bb      	str	r3, [r7, #24]
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	2203      	movs	r2, #3
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4013      	ands	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	609a      	str	r2, [r3, #8]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	61bb      	str	r3, [r7, #24]
 8003e34:	2201      	movs	r2, #1
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	f003 0201 	and.w	r2, r3, #1
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	605a      	str	r2, [r3, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d017      	beq.n	8003e9c <HAL_GPIO_Init+0xf0>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	61bb      	str	r3, [r7, #24]
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	2203      	movs	r2, #3
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4013      	ands	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	60da      	str	r2, [r3, #12]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 0303 	and.w	r3, r3, #3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d123      	bne.n	8003ef0 <HAL_GPIO_Init+0x144>
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	08da      	lsrs	r2, r3, #3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3208      	adds	r2, #8
 8003eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb4:	61bb      	str	r3, [r7, #24]
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	220f      	movs	r2, #15
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	08da      	lsrs	r2, r3, #3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3208      	adds	r2, #8
 8003eea:	69b9      	ldr	r1, [r7, #24]
 8003eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	61bb      	str	r3, [r7, #24]
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	2203      	movs	r2, #3
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	43db      	mvns	r3, r3
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4013      	ands	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 0203 	and.w	r2, r3, #3
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80a2 	beq.w	8004076 <HAL_GPIO_Init+0x2ca>
 8003f32:	2300      	movs	r3, #0
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	4b57      	ldr	r3, [pc, #348]	; (8004094 <HAL_GPIO_Init+0x2e8>)
 8003f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3a:	4a56      	ldr	r2, [pc, #344]	; (8004094 <HAL_GPIO_Init+0x2e8>)
 8003f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f40:	6453      	str	r3, [r2, #68]	; 0x44
 8003f42:	4b54      	ldr	r3, [pc, #336]	; (8004094 <HAL_GPIO_Init+0x2e8>)
 8003f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4a52      	ldr	r2, [pc, #328]	; (8004098 <HAL_GPIO_Init+0x2ec>)
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	089b      	lsrs	r3, r3, #2
 8003f54:	3302      	adds	r3, #2
 8003f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f5a:	61bb      	str	r3, [r7, #24]
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	220f      	movs	r2, #15
 8003f66:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a49      	ldr	r2, [pc, #292]	; (800409c <HAL_GPIO_Init+0x2f0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d019      	beq.n	8003fae <HAL_GPIO_Init+0x202>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a48      	ldr	r2, [pc, #288]	; (80040a0 <HAL_GPIO_Init+0x2f4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <HAL_GPIO_Init+0x1fe>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a47      	ldr	r2, [pc, #284]	; (80040a4 <HAL_GPIO_Init+0x2f8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00d      	beq.n	8003fa6 <HAL_GPIO_Init+0x1fa>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a46      	ldr	r2, [pc, #280]	; (80040a8 <HAL_GPIO_Init+0x2fc>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d007      	beq.n	8003fa2 <HAL_GPIO_Init+0x1f6>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a45      	ldr	r2, [pc, #276]	; (80040ac <HAL_GPIO_Init+0x300>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d101      	bne.n	8003f9e <HAL_GPIO_Init+0x1f2>
 8003f9a:	2304      	movs	r3, #4
 8003f9c:	e008      	b.n	8003fb0 <HAL_GPIO_Init+0x204>
 8003f9e:	2307      	movs	r3, #7
 8003fa0:	e006      	b.n	8003fb0 <HAL_GPIO_Init+0x204>
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e004      	b.n	8003fb0 <HAL_GPIO_Init+0x204>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e002      	b.n	8003fb0 <HAL_GPIO_Init+0x204>
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <HAL_GPIO_Init+0x204>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	69fa      	ldr	r2, [r7, #28]
 8003fb2:	f002 0203 	and.w	r2, r2, #3
 8003fb6:	0092      	lsls	r2, r2, #2
 8003fb8:	4093      	lsls	r3, r2
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
 8003fc0:	4935      	ldr	r1, [pc, #212]	; (8004098 <HAL_GPIO_Init+0x2ec>)
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	089b      	lsrs	r3, r3, #2
 8003fc6:	3302      	adds	r3, #2
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003fce:	4b38      	ldr	r3, [pc, #224]	; (80040b0 <HAL_GPIO_Init+0x304>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	61bb      	str	r3, [r7, #24]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	61bb      	str	r3, [r7, #24]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_GPIO_Init+0x246>
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
 8003ff2:	4a2f      	ldr	r2, [pc, #188]	; (80040b0 <HAL_GPIO_Init+0x304>)
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	6093      	str	r3, [r2, #8]
 8003ff8:	4b2d      	ldr	r3, [pc, #180]	; (80040b0 <HAL_GPIO_Init+0x304>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	61bb      	str	r3, [r7, #24]
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	43db      	mvns	r3, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	4013      	ands	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <HAL_GPIO_Init+0x270>
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
 800401c:	4a24      	ldr	r2, [pc, #144]	; (80040b0 <HAL_GPIO_Init+0x304>)
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	60d3      	str	r3, [r2, #12]
 8004022:	4b23      	ldr	r3, [pc, #140]	; (80040b0 <HAL_GPIO_Init+0x304>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	61bb      	str	r3, [r7, #24]
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	43db      	mvns	r3, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4013      	ands	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_GPIO_Init+0x29a>
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	4313      	orrs	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
 8004046:	4a1a      	ldr	r2, [pc, #104]	; (80040b0 <HAL_GPIO_Init+0x304>)
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	6053      	str	r3, [r2, #4]
 800404c:	4b18      	ldr	r3, [pc, #96]	; (80040b0 <HAL_GPIO_Init+0x304>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	61bb      	str	r3, [r7, #24]
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	43db      	mvns	r3, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4013      	ands	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <HAL_GPIO_Init+0x2c4>
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4313      	orrs	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
 8004070:	4a0f      	ldr	r2, [pc, #60]	; (80040b0 <HAL_GPIO_Init+0x304>)
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	3301      	adds	r3, #1
 800407a:	61fb      	str	r3, [r7, #28]
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	2b0f      	cmp	r3, #15
 8004080:	f67f aea2 	bls.w	8003dc8 <HAL_GPIO_Init+0x1c>
 8004084:	bf00      	nop
 8004086:	bf00      	nop
 8004088:	3724      	adds	r7, #36	; 0x24
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	40023800 	.word	0x40023800
 8004098:	40013800 	.word	0x40013800
 800409c:	40020000 	.word	0x40020000
 80040a0:	40020400 	.word	0x40020400
 80040a4:	40020800 	.word	0x40020800
 80040a8:	40020c00 	.word	0x40020c00
 80040ac:	40021000 	.word	0x40021000
 80040b0:	40013c00 	.word	0x40013c00

080040b4 <HAL_GPIO_WritePin>:
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	807b      	strh	r3, [r7, #2]
 80040c0:	4613      	mov	r3, r2
 80040c2:	707b      	strb	r3, [r7, #1]
 80040c4:	787b      	ldrb	r3, [r7, #1]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_GPIO_WritePin+0x1e>
 80040ca:	887a      	ldrh	r2, [r7, #2]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	619a      	str	r2, [r3, #24]
 80040d0:	e003      	b.n	80040da <HAL_GPIO_WritePin+0x26>
 80040d2:	887b      	ldrh	r3, [r7, #2]
 80040d4:	041a      	lsls	r2, r3, #16
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	619a      	str	r2, [r3, #24]
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
	...

080040e8 <HAL_GPIO_EXTI_IRQHandler>:
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	80fb      	strh	r3, [r7, #6]
 80040f2:	4b08      	ldr	r3, [pc, #32]	; (8004114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040f4:	695a      	ldr	r2, [r3, #20]
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	4013      	ands	r3, r2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d006      	beq.n	800410c <HAL_GPIO_EXTI_IRQHandler+0x24>
 80040fe:	4a05      	ldr	r2, [pc, #20]	; (8004114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004100:	88fb      	ldrh	r3, [r7, #6]
 8004102:	6153      	str	r3, [r2, #20]
 8004104:	88fb      	ldrh	r3, [r7, #6]
 8004106:	4618      	mov	r0, r3
 8004108:	f7fe fd30 	bl	8002b6c <HAL_GPIO_EXTI_Callback>
 800410c:	bf00      	nop
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	40013c00 	.word	0x40013c00

08004118 <HAL_I2C_Init>:
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_I2C_Init+0x12>
 8004126:	2301      	movs	r3, #1
 8004128:	e12b      	b.n	8004382 <HAL_I2C_Init+0x26a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_I2C_Init+0x2c>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fe fd98 	bl	8002c74 <HAL_I2C_MspInit>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2224      	movs	r2, #36	; 0x24
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0201 	bic.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	f002 f95e 	bl	800643c <HAL_RCC_GetPCLK1Freq>
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	4a81      	ldr	r2, [pc, #516]	; (800438c <HAL_I2C_Init+0x274>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d807      	bhi.n	800419c <HAL_I2C_Init+0x84>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4a80      	ldr	r2, [pc, #512]	; (8004390 <HAL_I2C_Init+0x278>)
 8004190:	4293      	cmp	r3, r2
 8004192:	bf94      	ite	ls
 8004194:	2301      	movls	r3, #1
 8004196:	2300      	movhi	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	e006      	b.n	80041aa <HAL_I2C_Init+0x92>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4a7d      	ldr	r2, [pc, #500]	; (8004394 <HAL_I2C_Init+0x27c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	bf94      	ite	ls
 80041a4:	2301      	movls	r3, #1
 80041a6:	2300      	movhi	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <HAL_I2C_Init+0x9a>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e0e7      	b.n	8004382 <HAL_I2C_Init+0x26a>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4a78      	ldr	r2, [pc, #480]	; (8004398 <HAL_I2C_Init+0x280>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	0c9b      	lsrs	r3, r3, #18
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	605a      	str	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	4a6a      	ldr	r2, [pc, #424]	; (800438c <HAL_I2C_Init+0x274>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d802      	bhi.n	80041ec <HAL_I2C_Init+0xd4>
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	3301      	adds	r3, #1
 80041ea:	e009      	b.n	8004200 <HAL_I2C_Init+0xe8>
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041f2:	fb02 f303 	mul.w	r3, r2, r3
 80041f6:	4a69      	ldr	r2, [pc, #420]	; (800439c <HAL_I2C_Init+0x284>)
 80041f8:	fba2 2303 	umull	r2, r3, r2, r3
 80041fc:	099b      	lsrs	r3, r3, #6
 80041fe:	3301      	adds	r3, #1
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	430b      	orrs	r3, r1
 8004206:	6213      	str	r3, [r2, #32]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004212:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	495c      	ldr	r1, [pc, #368]	; (800438c <HAL_I2C_Init+0x274>)
 800421c:	428b      	cmp	r3, r1
 800421e:	d819      	bhi.n	8004254 <HAL_I2C_Init+0x13c>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	1e59      	subs	r1, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	fbb1 f3f3 	udiv	r3, r1, r3
 800422e:	1c59      	adds	r1, r3, #1
 8004230:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004234:	400b      	ands	r3, r1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00a      	beq.n	8004250 <HAL_I2C_Init+0x138>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	1e59      	subs	r1, r3, #1
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	fbb1 f3f3 	udiv	r3, r1, r3
 8004248:	3301      	adds	r3, #1
 800424a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800424e:	e051      	b.n	80042f4 <HAL_I2C_Init+0x1dc>
 8004250:	2304      	movs	r3, #4
 8004252:	e04f      	b.n	80042f4 <HAL_I2C_Init+0x1dc>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d111      	bne.n	8004280 <HAL_I2C_Init+0x168>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	1e58      	subs	r0, r3, #1
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6859      	ldr	r1, [r3, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	440b      	add	r3, r1
 800426a:	fbb0 f3f3 	udiv	r3, r0, r3
 800426e:	3301      	adds	r3, #1
 8004270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004274:	2b00      	cmp	r3, #0
 8004276:	bf0c      	ite	eq
 8004278:	2301      	moveq	r3, #1
 800427a:	2300      	movne	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	e012      	b.n	80042a6 <HAL_I2C_Init+0x18e>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	1e58      	subs	r0, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6859      	ldr	r1, [r3, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	440b      	add	r3, r1
 800428e:	0099      	lsls	r1, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	fbb0 f3f3 	udiv	r3, r0, r3
 8004296:	3301      	adds	r3, #1
 8004298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800429c:	2b00      	cmp	r3, #0
 800429e:	bf0c      	ite	eq
 80042a0:	2301      	moveq	r3, #1
 80042a2:	2300      	movne	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_I2C_Init+0x196>
 80042aa:	2301      	movs	r3, #1
 80042ac:	e022      	b.n	80042f4 <HAL_I2C_Init+0x1dc>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10e      	bne.n	80042d4 <HAL_I2C_Init+0x1bc>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	1e58      	subs	r0, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6859      	ldr	r1, [r3, #4]
 80042be:	460b      	mov	r3, r1
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	440b      	add	r3, r1
 80042c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80042c8:	3301      	adds	r3, #1
 80042ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042d2:	e00f      	b.n	80042f4 <HAL_I2C_Init+0x1dc>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	1e58      	subs	r0, r3, #1
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6859      	ldr	r1, [r3, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	0099      	lsls	r1, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ea:	3301      	adds	r3, #1
 80042ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	6809      	ldr	r1, [r1, #0]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	61cb      	str	r3, [r1, #28]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69da      	ldr	r2, [r3, #28]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	431a      	orrs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004322:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6911      	ldr	r1, [r2, #16]
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	68d2      	ldr	r2, [r2, #12]
 800432e:	4311      	orrs	r1, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6812      	ldr	r2, [r2, #0]
 8004334:	430b      	orrs	r3, r1
 8004336:	6093      	str	r3, [r2, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695a      	ldr	r2, [r3, #20]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	60da      	str	r2, [r3, #12]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0201 	orr.w	r2, r2, #1
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	641a      	str	r2, [r3, #64]	; 0x40
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2220      	movs	r2, #32
 800436e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	631a      	str	r2, [r3, #48]	; 0x30
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004380:	2300      	movs	r3, #0
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	000186a0 	.word	0x000186a0
 8004390:	001e847f 	.word	0x001e847f
 8004394:	003d08ff 	.word	0x003d08ff
 8004398:	431bde83 	.word	0x431bde83
 800439c:	10624dd3 	.word	0x10624dd3

080043a0 <HAL_I2C_Master_Transmit>:
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b088      	sub	sp, #32
 80043a4:	af02      	add	r7, sp, #8
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	607a      	str	r2, [r7, #4]
 80043aa:	461a      	mov	r2, r3
 80043ac:	460b      	mov	r3, r1
 80043ae:	817b      	strh	r3, [r7, #10]
 80043b0:	4613      	mov	r3, r2
 80043b2:	813b      	strh	r3, [r7, #8]
 80043b4:	f7ff f856 	bl	8003464 <HAL_GetTick>
 80043b8:	6178      	str	r0, [r7, #20]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	f040 80e0 	bne.w	8004588 <HAL_I2C_Master_Transmit+0x1e8>
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	2319      	movs	r3, #25
 80043ce:	2201      	movs	r2, #1
 80043d0:	4970      	ldr	r1, [pc, #448]	; (8004594 <HAL_I2C_Master_Transmit+0x1f4>)
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f001 fa24 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <HAL_I2C_Master_Transmit+0x42>
 80043de:	2302      	movs	r3, #2
 80043e0:	e0d3      	b.n	800458a <HAL_I2C_Master_Transmit+0x1ea>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <HAL_I2C_Master_Transmit+0x50>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e0cc      	b.n	800458a <HAL_I2C_Master_Transmit+0x1ea>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b01      	cmp	r3, #1
 8004404:	d007      	beq.n	8004416 <HAL_I2C_Master_Transmit+0x76>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f042 0201 	orr.w	r2, r2, #1
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2221      	movs	r2, #33	; 0x21
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2210      	movs	r2, #16
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	641a      	str	r2, [r3, #64]	; 0x40
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	625a      	str	r2, [r3, #36]	; 0x24
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	893a      	ldrh	r2, [r7, #8]
 8004446:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444c:	b29a      	uxth	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	851a      	strh	r2, [r3, #40]	; 0x28
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4a50      	ldr	r2, [pc, #320]	; (8004598 <HAL_I2C_Master_Transmit+0x1f8>)
 8004456:	62da      	str	r2, [r3, #44]	; 0x2c
 8004458:	8979      	ldrh	r1, [r7, #10]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	6a3a      	ldr	r2, [r7, #32]
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 ff10 	bl	8005284 <I2C_MasterRequestWrite>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_I2C_Master_Transmit+0xce>
 800446a:	2301      	movs	r3, #1
 800446c:	e08d      	b.n	800458a <HAL_I2C_Master_Transmit+0x1ea>
 800446e:	2300      	movs	r3, #0
 8004470:	613b      	str	r3, [r7, #16]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	e066      	b.n	8004554 <HAL_I2C_Master_Transmit+0x1b4>
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	6a39      	ldr	r1, [r7, #32]
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f001 fa9e 	bl	80059cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00d      	beq.n	80044b2 <HAL_I2C_Master_Transmit+0x112>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	2b04      	cmp	r3, #4
 800449c:	d107      	bne.n	80044ae <HAL_I2C_Master_Transmit+0x10e>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	2301      	movs	r3, #1
 80044b0:	e06b      	b.n	800458a <HAL_I2C_Master_Transmit+0x1ea>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	781a      	ldrb	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	611a      	str	r2, [r3, #16]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	625a      	str	r2, [r3, #36]	; 0x24
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	851a      	strh	r2, [r3, #40]	; 0x28
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d11b      	bne.n	8004528 <HAL_I2C_Master_Transmit+0x188>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d017      	beq.n	8004528 <HAL_I2C_Master_Transmit+0x188>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	781a      	ldrb	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	611a      	str	r2, [r3, #16]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	625a      	str	r2, [r3, #36]	; 0x24
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	851a      	strh	r2, [r3, #40]	; 0x28
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	6a39      	ldr	r1, [r7, #32]
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f001 fa8e 	bl	8005a4e <I2C_WaitOnBTFFlagUntilTimeout>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00d      	beq.n	8004554 <HAL_I2C_Master_Transmit+0x1b4>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	2b04      	cmp	r3, #4
 800453e:	d107      	bne.n	8004550 <HAL_I2C_Master_Transmit+0x1b0>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	2301      	movs	r3, #1
 8004552:	e01a      	b.n	800458a <HAL_I2C_Master_Transmit+0x1ea>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004558:	2b00      	cmp	r3, #0
 800455a:	d194      	bne.n	8004486 <HAL_I2C_Master_Transmit+0xe6>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004584:	2300      	movs	r3, #0
 8004586:	e000      	b.n	800458a <HAL_I2C_Master_Transmit+0x1ea>
 8004588:	2302      	movs	r3, #2
 800458a:	4618      	mov	r0, r3
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	00100002 	.word	0x00100002
 8004598:	ffff0000 	.word	0xffff0000

0800459c <HAL_I2C_Master_Receive>:
 800459c:	b580      	push	{r7, lr}
 800459e:	b08c      	sub	sp, #48	; 0x30
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	607a      	str	r2, [r7, #4]
 80045a6:	461a      	mov	r2, r3
 80045a8:	460b      	mov	r3, r1
 80045aa:	817b      	strh	r3, [r7, #10]
 80045ac:	4613      	mov	r3, r2
 80045ae:	813b      	strh	r3, [r7, #8]
 80045b0:	f7fe ff58 	bl	8003464 <HAL_GetTick>
 80045b4:	6278      	str	r0, [r7, #36]	; 0x24
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b20      	cmp	r3, #32
 80045c0:	f040 820b 	bne.w	80049da <HAL_I2C_Master_Receive+0x43e>
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	2319      	movs	r3, #25
 80045ca:	2201      	movs	r2, #1
 80045cc:	497c      	ldr	r1, [pc, #496]	; (80047c0 <HAL_I2C_Master_Receive+0x224>)
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f001 f926 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <HAL_I2C_Master_Receive+0x42>
 80045da:	2302      	movs	r3, #2
 80045dc:	e1fe      	b.n	80049dc <HAL_I2C_Master_Receive+0x440>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_I2C_Master_Receive+0x50>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e1f7      	b.n	80049dc <HAL_I2C_Master_Receive+0x440>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d007      	beq.n	8004612 <HAL_I2C_Master_Receive+0x76>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0201 	orr.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2222      	movs	r2, #34	; 0x22
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2210      	movs	r2, #16
 800462e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	641a      	str	r2, [r3, #64]	; 0x40
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	625a      	str	r2, [r3, #36]	; 0x24
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	893a      	ldrh	r2, [r7, #8]
 8004642:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	851a      	strh	r2, [r3, #40]	; 0x28
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4a5c      	ldr	r2, [pc, #368]	; (80047c4 <HAL_I2C_Master_Receive+0x228>)
 8004652:	62da      	str	r2, [r3, #44]	; 0x2c
 8004654:	8979      	ldrh	r1, [r7, #10]
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 fe94 	bl	8005388 <I2C_MasterRequestRead>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <HAL_I2C_Master_Receive+0xce>
 8004666:	2301      	movs	r3, #1
 8004668:	e1b8      	b.n	80049dc <HAL_I2C_Master_Receive+0x440>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466e:	2b00      	cmp	r3, #0
 8004670:	d113      	bne.n	800469a <HAL_I2C_Master_Receive+0xfe>
 8004672:	2300      	movs	r3, #0
 8004674:	623b      	str	r3, [r7, #32]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	623b      	str	r3, [r7, #32]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	623b      	str	r3, [r7, #32]
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	e18c      	b.n	80049b4 <HAL_I2C_Master_Receive+0x418>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d11b      	bne.n	80046da <HAL_I2C_Master_Receive+0x13e>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	2300      	movs	r3, #0
 80046b4:	61fb      	str	r3, [r7, #28]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	61fb      	str	r3, [r7, #28]
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	e16c      	b.n	80049b4 <HAL_I2C_Master_Receive+0x418>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d11b      	bne.n	800471a <HAL_I2C_Master_Receive+0x17e>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	2300      	movs	r3, #0
 8004704:	61bb      	str	r3, [r7, #24]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	61bb      	str	r3, [r7, #24]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	61bb      	str	r3, [r7, #24]
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	e14c      	b.n	80049b4 <HAL_I2C_Master_Receive+0x418>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	617b      	str	r3, [r7, #20]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	e138      	b.n	80049b4 <HAL_I2C_Master_Receive+0x418>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004746:	2b03      	cmp	r3, #3
 8004748:	f200 80f1 	bhi.w	800492e <HAL_I2C_Master_Receive+0x392>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004750:	2b01      	cmp	r3, #1
 8004752:	d123      	bne.n	800479c <HAL_I2C_Master_Receive+0x200>
 8004754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004756:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f001 f9b9 	bl	8005ad0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <HAL_I2C_Master_Receive+0x1cc>
 8004764:	2301      	movs	r3, #1
 8004766:	e139      	b.n	80049dc <HAL_I2C_Master_Receive+0x440>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	691a      	ldr	r2, [r3, #16]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	701a      	strb	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	625a      	str	r2, [r3, #36]	; 0x24
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	851a      	strh	r2, [r3, #40]	; 0x28
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	855a      	strh	r2, [r3, #42]	; 0x2a
 800479a:	e10b      	b.n	80049b4 <HAL_I2C_Master_Receive+0x418>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d14e      	bne.n	8004842 <HAL_I2C_Master_Receive+0x2a6>
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047aa:	2200      	movs	r2, #0
 80047ac:	4906      	ldr	r1, [pc, #24]	; (80047c8 <HAL_I2C_Master_Receive+0x22c>)
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f001 f836 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d008      	beq.n	80047cc <HAL_I2C_Master_Receive+0x230>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e10e      	b.n	80049dc <HAL_I2C_Master_Receive+0x440>
 80047be:	bf00      	nop
 80047c0:	00100002 	.word	0x00100002
 80047c4:	ffff0000 	.word	0xffff0000
 80047c8:	00010004 	.word	0x00010004
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691a      	ldr	r2, [r3, #16]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	701a      	strb	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	1c5a      	adds	r2, r3, #1
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	625a      	str	r2, [r3, #36]	; 0x24
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	851a      	strh	r2, [r3, #40]	; 0x28
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b01      	subs	r3, #1
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	701a      	strb	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	625a      	str	r2, [r3, #36]	; 0x24
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482a:	3b01      	subs	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	851a      	strh	r2, [r3, #40]	; 0x28
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004840:	e0b8      	b.n	80049b4 <HAL_I2C_Master_Receive+0x418>
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004848:	2200      	movs	r2, #0
 800484a:	4966      	ldr	r1, [pc, #408]	; (80049e4 <HAL_I2C_Master_Receive+0x448>)
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 ffe7 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <HAL_I2C_Master_Receive+0x2c0>
 8004858:	2301      	movs	r3, #1
 800485a:	e0bf      	b.n	80049dc <HAL_I2C_Master_Receive+0x440>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691a      	ldr	r2, [r3, #16]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	625a      	str	r2, [r3, #36]	; 0x24
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	851a      	strh	r2, [r3, #40]	; 0x28
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004894:	b29b      	uxth	r3, r3
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	2200      	movs	r2, #0
 80048a6:	494f      	ldr	r1, [pc, #316]	; (80049e4 <HAL_I2C_Master_Receive+0x448>)
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 ffb9 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <HAL_I2C_Master_Receive+0x31c>
 80048b4:	2301      	movs	r3, #1
 80048b6:	e091      	b.n	80049dc <HAL_I2C_Master_Receive+0x440>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691a      	ldr	r2, [r3, #16]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	625a      	str	r2, [r3, #36]	; 0x24
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	851a      	strh	r2, [r3, #40]	; 0x28
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	701a      	strb	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	625a      	str	r2, [r3, #36]	; 0x24
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004916:	3b01      	subs	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	851a      	strh	r2, [r3, #40]	; 0x28
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800492c:	e042      	b.n	80049b4 <HAL_I2C_Master_Receive+0x418>
 800492e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004930:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f001 f8cc 	bl	8005ad0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <HAL_I2C_Master_Receive+0x3a6>
 800493e:	2301      	movs	r3, #1
 8004940:	e04c      	b.n	80049dc <HAL_I2C_Master_Receive+0x440>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	b2d2      	uxtb	r2, r2
 800494e:	701a      	strb	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	625a      	str	r2, [r3, #36]	; 0x24
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495e:	3b01      	subs	r3, #1
 8004960:	b29a      	uxth	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	851a      	strh	r2, [r3, #40]	; 0x28
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	2b04      	cmp	r3, #4
 8004980:	d118      	bne.n	80049b4 <HAL_I2C_Master_Receive+0x418>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	b2d2      	uxtb	r2, r2
 800498e:	701a      	strb	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	625a      	str	r2, [r3, #36]	; 0x24
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	851a      	strh	r2, [r3, #40]	; 0x28
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f47f aec2 	bne.w	8004742 <HAL_I2C_Master_Receive+0x1a6>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80049d6:	2300      	movs	r3, #0
 80049d8:	e000      	b.n	80049dc <HAL_I2C_Master_Receive+0x440>
 80049da:	2302      	movs	r3, #2
 80049dc:	4618      	mov	r0, r3
 80049de:	3728      	adds	r7, #40	; 0x28
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	00010004 	.word	0x00010004

080049e8 <HAL_I2C_Mem_Write>:
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af02      	add	r7, sp, #8
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	4608      	mov	r0, r1
 80049f2:	4611      	mov	r1, r2
 80049f4:	461a      	mov	r2, r3
 80049f6:	4603      	mov	r3, r0
 80049f8:	817b      	strh	r3, [r7, #10]
 80049fa:	460b      	mov	r3, r1
 80049fc:	813b      	strh	r3, [r7, #8]
 80049fe:	4613      	mov	r3, r2
 8004a00:	80fb      	strh	r3, [r7, #6]
 8004a02:	f7fe fd2f 	bl	8003464 <HAL_GetTick>
 8004a06:	6178      	str	r0, [r7, #20]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b20      	cmp	r3, #32
 8004a12:	f040 80d9 	bne.w	8004bc8 <HAL_I2C_Mem_Write+0x1e0>
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	2319      	movs	r3, #25
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	496d      	ldr	r1, [pc, #436]	; (8004bd4 <HAL_I2C_Mem_Write+0x1ec>)
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 fefd 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <HAL_I2C_Mem_Write+0x48>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e0cc      	b.n	8004bca <HAL_I2C_Mem_Write+0x1e2>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_I2C_Mem_Write+0x56>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e0c5      	b.n	8004bca <HAL_I2C_Mem_Write+0x1e2>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d007      	beq.n	8004a64 <HAL_I2C_Mem_Write+0x7c>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f042 0201 	orr.w	r2, r2, #1
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2221      	movs	r2, #33	; 0x21
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2240      	movs	r2, #64	; 0x40
 8004a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	641a      	str	r2, [r3, #64]	; 0x40
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a3a      	ldr	r2, [r7, #32]
 8004a8e:	625a      	str	r2, [r3, #36]	; 0x24
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	851a      	strh	r2, [r3, #40]	; 0x28
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4a4d      	ldr	r2, [pc, #308]	; (8004bd8 <HAL_I2C_Mem_Write+0x1f0>)
 8004aa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004aa6:	88f8      	ldrh	r0, [r7, #6]
 8004aa8:	893a      	ldrh	r2, [r7, #8]
 8004aaa:	8979      	ldrh	r1, [r7, #10]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	9301      	str	r3, [sp, #4]
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 fd34 	bl	8005524 <I2C_RequestMemoryWrite>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d052      	beq.n	8004b68 <HAL_I2C_Mem_Write+0x180>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e081      	b.n	8004bca <HAL_I2C_Mem_Write+0x1e2>
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 ff7e 	bl	80059cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00d      	beq.n	8004af2 <HAL_I2C_Mem_Write+0x10a>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d107      	bne.n	8004aee <HAL_I2C_Mem_Write+0x106>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	2301      	movs	r3, #1
 8004af0:	e06b      	b.n	8004bca <HAL_I2C_Mem_Write+0x1e2>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	781a      	ldrb	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	611a      	str	r2, [r3, #16]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	625a      	str	r2, [r3, #36]	; 0x24
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	851a      	strh	r2, [r3, #40]	; 0x28
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d11b      	bne.n	8004b68 <HAL_I2C_Mem_Write+0x180>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d017      	beq.n	8004b68 <HAL_I2C_Mem_Write+0x180>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	781a      	ldrb	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	611a      	str	r2, [r3, #16]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	625a      	str	r2, [r3, #36]	; 0x24
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	851a      	strh	r2, [r3, #40]	; 0x28
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1aa      	bne.n	8004ac6 <HAL_I2C_Mem_Write+0xde>
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 ff6a 	bl	8005a4e <I2C_WaitOnBTFFlagUntilTimeout>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00d      	beq.n	8004b9c <HAL_I2C_Mem_Write+0x1b4>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b84:	2b04      	cmp	r3, #4
 8004b86:	d107      	bne.n	8004b98 <HAL_I2C_Mem_Write+0x1b0>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e016      	b.n	8004bca <HAL_I2C_Mem_Write+0x1e2>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	e000      	b.n	8004bca <HAL_I2C_Mem_Write+0x1e2>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	00100002 	.word	0x00100002
 8004bd8:	ffff0000 	.word	0xffff0000

08004bdc <HAL_I2C_Mem_Read>:
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08c      	sub	sp, #48	; 0x30
 8004be0:	af02      	add	r7, sp, #8
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	4608      	mov	r0, r1
 8004be6:	4611      	mov	r1, r2
 8004be8:	461a      	mov	r2, r3
 8004bea:	4603      	mov	r3, r0
 8004bec:	817b      	strh	r3, [r7, #10]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	813b      	strh	r3, [r7, #8]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	80fb      	strh	r3, [r7, #6]
 8004bf6:	f7fe fc35 	bl	8003464 <HAL_GetTick>
 8004bfa:	6278      	str	r0, [r7, #36]	; 0x24
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	f040 8208 	bne.w	800501a <HAL_I2C_Mem_Read+0x43e>
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	2319      	movs	r3, #25
 8004c10:	2201      	movs	r2, #1
 8004c12:	497b      	ldr	r1, [pc, #492]	; (8004e00 <HAL_I2C_Mem_Read+0x224>)
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 fe03 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <HAL_I2C_Mem_Read+0x48>
 8004c20:	2302      	movs	r3, #2
 8004c22:	e1fb      	b.n	800501c <HAL_I2C_Mem_Read+0x440>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d101      	bne.n	8004c32 <HAL_I2C_Mem_Read+0x56>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	e1f4      	b.n	800501c <HAL_I2C_Mem_Read+0x440>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d007      	beq.n	8004c58 <HAL_I2C_Mem_Read+0x7c>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0201 	orr.w	r2, r2, #1
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2222      	movs	r2, #34	; 0x22
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2240      	movs	r2, #64	; 0x40
 8004c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c82:	625a      	str	r2, [r3, #36]	; 0x24
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004c88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	851a      	strh	r2, [r3, #40]	; 0x28
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4a5b      	ldr	r2, [pc, #364]	; (8004e04 <HAL_I2C_Mem_Read+0x228>)
 8004c98:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c9a:	88f8      	ldrh	r0, [r7, #6]
 8004c9c:	893a      	ldrh	r2, [r7, #8]
 8004c9e:	8979      	ldrh	r1, [r7, #10]
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	9301      	str	r3, [sp, #4]
 8004ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	4603      	mov	r3, r0
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 fcd0 	bl	8005650 <I2C_RequestMemoryRead>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_I2C_Mem_Read+0xde>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e1b0      	b.n	800501c <HAL_I2C_Mem_Read+0x440>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d113      	bne.n	8004cea <HAL_I2C_Mem_Read+0x10e>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	623b      	str	r3, [r7, #32]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	623b      	str	r3, [r7, #32]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	623b      	str	r3, [r7, #32]
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	e184      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x418>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d11b      	bne.n	8004d2a <HAL_I2C_Mem_Read+0x14e>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	2300      	movs	r3, #0
 8004d04:	61fb      	str	r3, [r7, #28]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	61fb      	str	r3, [r7, #28]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	61fb      	str	r3, [r7, #28]
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	e164      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x418>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d11b      	bne.n	8004d6a <HAL_I2C_Mem_Read+0x18e>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	2300      	movs	r3, #0
 8004d54:	61bb      	str	r3, [r7, #24]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	61bb      	str	r3, [r7, #24]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	61bb      	str	r3, [r7, #24]
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	e144      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x418>
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	617b      	str	r3, [r7, #20]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	e138      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x418>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d86:	2b03      	cmp	r3, #3
 8004d88:	f200 80f1 	bhi.w	8004f6e <HAL_I2C_Mem_Read+0x392>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d123      	bne.n	8004ddc <HAL_I2C_Mem_Read+0x200>
 8004d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 fe99 	bl	8005ad0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <HAL_I2C_Mem_Read+0x1cc>
 8004da4:	2301      	movs	r3, #1
 8004da6:	e139      	b.n	800501c <HAL_I2C_Mem_Read+0x440>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	625a      	str	r2, [r3, #36]	; 0x24
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	851a      	strh	r2, [r3, #40]	; 0x28
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dda:	e10b      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x418>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d14e      	bne.n	8004e82 <HAL_I2C_Mem_Read+0x2a6>
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dea:	2200      	movs	r2, #0
 8004dec:	4906      	ldr	r1, [pc, #24]	; (8004e08 <HAL_I2C_Mem_Read+0x22c>)
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 fd16 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d008      	beq.n	8004e0c <HAL_I2C_Mem_Read+0x230>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e10e      	b.n	800501c <HAL_I2C_Mem_Read+0x440>
 8004dfe:	bf00      	nop
 8004e00:	00100002 	.word	0x00100002
 8004e04:	ffff0000 	.word	0xffff0000
 8004e08:	00010004 	.word	0x00010004
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691a      	ldr	r2, [r3, #16]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	701a      	strb	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	625a      	str	r2, [r3, #36]	; 0x24
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	851a      	strh	r2, [r3, #40]	; 0x28
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	701a      	strb	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	625a      	str	r2, [r3, #36]	; 0x24
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	851a      	strh	r2, [r3, #40]	; 0x28
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e80:	e0b8      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x418>
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e88:	2200      	movs	r2, #0
 8004e8a:	4966      	ldr	r1, [pc, #408]	; (8005024 <HAL_I2C_Mem_Read+0x448>)
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 fcc7 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <HAL_I2C_Mem_Read+0x2c0>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e0bf      	b.n	800501c <HAL_I2C_Mem_Read+0x440>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	691a      	ldr	r2, [r3, #16]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	701a      	strb	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	625a      	str	r2, [r3, #36]	; 0x24
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	851a      	strh	r2, [r3, #40]	; 0x28
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	494f      	ldr	r1, [pc, #316]	; (8005024 <HAL_I2C_Mem_Read+0x448>)
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fc99 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <HAL_I2C_Mem_Read+0x31c>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e091      	b.n	800501c <HAL_I2C_Mem_Read+0x440>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691a      	ldr	r2, [r3, #16]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	701a      	strb	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	625a      	str	r2, [r3, #36]	; 0x24
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	851a      	strh	r2, [r3, #40]	; 0x28
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	701a      	strb	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	625a      	str	r2, [r3, #36]	; 0x24
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	851a      	strh	r2, [r3, #40]	; 0x28
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f6c:	e042      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x418>
 8004f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 fdac 	bl	8005ad0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <HAL_I2C_Mem_Read+0x3a6>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e04c      	b.n	800501c <HAL_I2C_Mem_Read+0x440>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	691a      	ldr	r2, [r3, #16]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	b2d2      	uxtb	r2, r2
 8004f8e:	701a      	strb	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	625a      	str	r2, [r3, #36]	; 0x24
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	851a      	strh	r2, [r3, #40]	; 0x28
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f003 0304 	and.w	r3, r3, #4
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d118      	bne.n	8004ff4 <HAL_I2C_Mem_Read+0x418>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	691a      	ldr	r2, [r3, #16]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	b2d2      	uxtb	r2, r2
 8004fce:	701a      	strb	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	625a      	str	r2, [r3, #36]	; 0x24
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	851a      	strh	r2, [r3, #40]	; 0x28
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f47f aec2 	bne.w	8004d82 <HAL_I2C_Mem_Read+0x1a6>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2220      	movs	r2, #32
 8005002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005016:	2300      	movs	r3, #0
 8005018:	e000      	b.n	800501c <HAL_I2C_Mem_Read+0x440>
 800501a:	2302      	movs	r3, #2
 800501c:	4618      	mov	r0, r3
 800501e:	3728      	adds	r7, #40	; 0x28
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	00010004 	.word	0x00010004

08005028 <HAL_I2C_IsDeviceReady>:
 8005028:	b580      	push	{r7, lr}
 800502a:	b08a      	sub	sp, #40	; 0x28
 800502c:	af02      	add	r7, sp, #8
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	607a      	str	r2, [r7, #4]
 8005032:	603b      	str	r3, [r7, #0]
 8005034:	460b      	mov	r3, r1
 8005036:	817b      	strh	r3, [r7, #10]
 8005038:	f7fe fa14 	bl	8003464 <HAL_GetTick>
 800503c:	61f8      	str	r0, [r7, #28]
 800503e:	2300      	movs	r3, #0
 8005040:	61bb      	str	r3, [r7, #24]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b20      	cmp	r3, #32
 800504c:	f040 8111 	bne.w	8005272 <HAL_I2C_IsDeviceReady+0x24a>
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	2319      	movs	r3, #25
 8005056:	2201      	movs	r2, #1
 8005058:	4988      	ldr	r1, [pc, #544]	; (800527c <HAL_I2C_IsDeviceReady+0x254>)
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 fbe0 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <HAL_I2C_IsDeviceReady+0x42>
 8005066:	2302      	movs	r3, #2
 8005068:	e104      	b.n	8005274 <HAL_I2C_IsDeviceReady+0x24c>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <HAL_I2C_IsDeviceReady+0x50>
 8005074:	2302      	movs	r3, #2
 8005076:	e0fd      	b.n	8005274 <HAL_I2C_IsDeviceReady+0x24c>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b01      	cmp	r3, #1
 800508c:	d007      	beq.n	800509e <HAL_I2C_IsDeviceReady+0x76>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f042 0201 	orr.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2224      	movs	r2, #36	; 0x24
 80050b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	641a      	str	r2, [r3, #64]	; 0x40
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4a70      	ldr	r2, [pc, #448]	; (8005280 <HAL_I2C_IsDeviceReady+0x258>)
 80050c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2200      	movs	r2, #0
 80050da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 fb9e 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00d      	beq.n	8005106 <HAL_I2C_IsDeviceReady+0xde>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050f8:	d103      	bne.n	8005102 <HAL_I2C_IsDeviceReady+0xda>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005100:	641a      	str	r2, [r3, #64]	; 0x40
 8005102:	2303      	movs	r3, #3
 8005104:	e0b6      	b.n	8005274 <HAL_I2C_IsDeviceReady+0x24c>
 8005106:	897b      	ldrh	r3, [r7, #10]
 8005108:	b2db      	uxtb	r3, r3
 800510a:	461a      	mov	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005114:	611a      	str	r2, [r3, #16]
 8005116:	f7fe f9a5 	bl	8003464 <HAL_GetTick>
 800511a:	61f8      	str	r0, [r7, #28]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b02      	cmp	r3, #2
 8005128:	bf0c      	ite	eq
 800512a:	2301      	moveq	r3, #1
 800512c:	2300      	movne	r3, #0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	75fb      	strb	r3, [r7, #23]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800513c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005140:	bf0c      	ite	eq
 8005142:	2301      	moveq	r3, #1
 8005144:	2300      	movne	r3, #0
 8005146:	b2db      	uxtb	r3, r3
 8005148:	75bb      	strb	r3, [r7, #22]
 800514a:	e025      	b.n	8005198 <HAL_I2C_IsDeviceReady+0x170>
 800514c:	f7fe f98a 	bl	8003464 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	429a      	cmp	r2, r3
 800515a:	d302      	bcc.n	8005162 <HAL_I2C_IsDeviceReady+0x13a>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d103      	bne.n	800516a <HAL_I2C_IsDeviceReady+0x142>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	22a0      	movs	r2, #160	; 0xa0
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b02      	cmp	r3, #2
 8005176:	bf0c      	ite	eq
 8005178:	2301      	moveq	r3, #1
 800517a:	2300      	movne	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	75fb      	strb	r3, [r7, #23]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800518a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800518e:	bf0c      	ite	eq
 8005190:	2301      	moveq	r3, #1
 8005192:	2300      	movne	r3, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	75bb      	strb	r3, [r7, #22]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2ba0      	cmp	r3, #160	; 0xa0
 80051a2:	d005      	beq.n	80051b0 <HAL_I2C_IsDeviceReady+0x188>
 80051a4:	7dfb      	ldrb	r3, [r7, #23]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d102      	bne.n	80051b0 <HAL_I2C_IsDeviceReady+0x188>
 80051aa:	7dbb      	ldrb	r3, [r7, #22]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0cd      	beq.n	800514c <HAL_I2C_IsDeviceReady+0x124>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d129      	bne.n	800521a <HAL_I2C_IsDeviceReady+0x1f2>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	2300      	movs	r3, #0
 80051d8:	613b      	str	r3, [r7, #16]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	2319      	movs	r3, #25
 80051f2:	2201      	movs	r2, #1
 80051f4:	4921      	ldr	r1, [pc, #132]	; (800527c <HAL_I2C_IsDeviceReady+0x254>)
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 fb12 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <HAL_I2C_IsDeviceReady+0x1de>
 8005202:	2301      	movs	r3, #1
 8005204:	e036      	b.n	8005274 <HAL_I2C_IsDeviceReady+0x24c>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005216:	2300      	movs	r3, #0
 8005218:	e02c      	b.n	8005274 <HAL_I2C_IsDeviceReady+0x24c>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005232:	615a      	str	r2, [r3, #20]
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	2319      	movs	r3, #25
 800523a:	2201      	movs	r2, #1
 800523c:	490f      	ldr	r1, [pc, #60]	; (800527c <HAL_I2C_IsDeviceReady+0x254>)
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 faee 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <HAL_I2C_IsDeviceReady+0x226>
 800524a:	2301      	movs	r3, #1
 800524c:	e012      	b.n	8005274 <HAL_I2C_IsDeviceReady+0x24c>
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	3301      	adds	r3, #1
 8005252:	61bb      	str	r3, [r7, #24]
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	429a      	cmp	r2, r3
 800525a:	f4ff af32 	bcc.w	80050c2 <HAL_I2C_IsDeviceReady+0x9a>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2220      	movs	r2, #32
 8005262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800526e:	2301      	movs	r3, #1
 8005270:	e000      	b.n	8005274 <HAL_I2C_IsDeviceReady+0x24c>
 8005272:	2302      	movs	r3, #2
 8005274:	4618      	mov	r0, r3
 8005276:	3720      	adds	r7, #32
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	00100002 	.word	0x00100002
 8005280:	ffff0000 	.word	0xffff0000

08005284 <I2C_MasterRequestWrite>:
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af02      	add	r7, sp, #8
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	607a      	str	r2, [r7, #4]
 800528e:	603b      	str	r3, [r7, #0]
 8005290:	460b      	mov	r3, r1
 8005292:	817b      	strh	r3, [r7, #10]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	617b      	str	r3, [r7, #20]
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2b08      	cmp	r3, #8
 800529e:	d006      	beq.n	80052ae <I2C_MasterRequestWrite+0x2a>
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d003      	beq.n	80052ae <I2C_MasterRequestWrite+0x2a>
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052ac:	d108      	bne.n	80052c0 <I2C_MasterRequestWrite+0x3c>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	e00b      	b.n	80052d8 <I2C_MasterRequestWrite+0x54>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c4:	2b12      	cmp	r3, #18
 80052c6:	d107      	bne.n	80052d8 <I2C_MasterRequestWrite+0x54>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 fa9b 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00d      	beq.n	800530c <I2C_MasterRequestWrite+0x88>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052fe:	d103      	bne.n	8005308 <I2C_MasterRequestWrite+0x84>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005306:	641a      	str	r2, [r3, #64]	; 0x40
 8005308:	2303      	movs	r3, #3
 800530a:	e035      	b.n	8005378 <I2C_MasterRequestWrite+0xf4>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005314:	d108      	bne.n	8005328 <I2C_MasterRequestWrite+0xa4>
 8005316:	897b      	ldrh	r3, [r7, #10]
 8005318:	b2db      	uxtb	r3, r3
 800531a:	461a      	mov	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005324:	611a      	str	r2, [r3, #16]
 8005326:	e01b      	b.n	8005360 <I2C_MasterRequestWrite+0xdc>
 8005328:	897b      	ldrh	r3, [r7, #10]
 800532a:	11db      	asrs	r3, r3, #7
 800532c:	b2db      	uxtb	r3, r3
 800532e:	f003 0306 	and.w	r3, r3, #6
 8005332:	b2db      	uxtb	r3, r3
 8005334:	f063 030f 	orn	r3, r3, #15
 8005338:	b2da      	uxtb	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	611a      	str	r2, [r3, #16]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	490e      	ldr	r1, [pc, #56]	; (8005380 <I2C_MasterRequestWrite+0xfc>)
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 fac1 	bl	80058ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <I2C_MasterRequestWrite+0xd2>
 8005352:	2301      	movs	r3, #1
 8005354:	e010      	b.n	8005378 <I2C_MasterRequestWrite+0xf4>
 8005356:	897b      	ldrh	r3, [r7, #10]
 8005358:	b2da      	uxtb	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	611a      	str	r2, [r3, #16]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	4907      	ldr	r1, [pc, #28]	; (8005384 <I2C_MasterRequestWrite+0x100>)
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 fab1 	bl	80058ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <I2C_MasterRequestWrite+0xf2>
 8005372:	2301      	movs	r3, #1
 8005374:	e000      	b.n	8005378 <I2C_MasterRequestWrite+0xf4>
 8005376:	2300      	movs	r3, #0
 8005378:	4618      	mov	r0, r3
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	00010008 	.word	0x00010008
 8005384:	00010002 	.word	0x00010002

08005388 <I2C_MasterRequestRead>:
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af02      	add	r7, sp, #8
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	607a      	str	r2, [r7, #4]
 8005392:	603b      	str	r3, [r7, #0]
 8005394:	460b      	mov	r3, r1
 8005396:	817b      	strh	r3, [r7, #10]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d006      	beq.n	80053c2 <I2C_MasterRequestRead+0x3a>
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d003      	beq.n	80053c2 <I2C_MasterRequestRead+0x3a>
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053c0:	d108      	bne.n	80053d4 <I2C_MasterRequestRead+0x4c>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	e00b      	b.n	80053ec <I2C_MasterRequestRead+0x64>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d8:	2b11      	cmp	r3, #17
 80053da:	d107      	bne.n	80053ec <I2C_MasterRequestRead+0x64>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 fa11 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00d      	beq.n	8005420 <I2C_MasterRequestRead+0x98>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005412:	d103      	bne.n	800541c <I2C_MasterRequestRead+0x94>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800541a:	641a      	str	r2, [r3, #64]	; 0x40
 800541c:	2303      	movs	r3, #3
 800541e:	e079      	b.n	8005514 <I2C_MasterRequestRead+0x18c>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005428:	d108      	bne.n	800543c <I2C_MasterRequestRead+0xb4>
 800542a:	897b      	ldrh	r3, [r7, #10]
 800542c:	b2db      	uxtb	r3, r3
 800542e:	f043 0301 	orr.w	r3, r3, #1
 8005432:	b2da      	uxtb	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	611a      	str	r2, [r3, #16]
 800543a:	e05f      	b.n	80054fc <I2C_MasterRequestRead+0x174>
 800543c:	897b      	ldrh	r3, [r7, #10]
 800543e:	11db      	asrs	r3, r3, #7
 8005440:	b2db      	uxtb	r3, r3
 8005442:	f003 0306 	and.w	r3, r3, #6
 8005446:	b2db      	uxtb	r3, r3
 8005448:	f063 030f 	orn	r3, r3, #15
 800544c:	b2da      	uxtb	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	611a      	str	r2, [r3, #16]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	4930      	ldr	r1, [pc, #192]	; (800551c <I2C_MasterRequestRead+0x194>)
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 fa37 	bl	80058ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <I2C_MasterRequestRead+0xe2>
 8005466:	2301      	movs	r3, #1
 8005468:	e054      	b.n	8005514 <I2C_MasterRequestRead+0x18c>
 800546a:	897b      	ldrh	r3, [r7, #10]
 800546c:	b2da      	uxtb	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	611a      	str	r2, [r3, #16]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	4929      	ldr	r1, [pc, #164]	; (8005520 <I2C_MasterRequestRead+0x198>)
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 fa27 	bl	80058ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <I2C_MasterRequestRead+0x102>
 8005486:	2301      	movs	r3, #1
 8005488:	e044      	b.n	8005514 <I2C_MasterRequestRead+0x18c>
 800548a:	2300      	movs	r3, #0
 800548c:	613b      	str	r3, [r7, #16]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	613b      	str	r3, [r7, #16]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	613b      	str	r3, [r7, #16]
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f9af 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00d      	beq.n	80054e4 <I2C_MasterRequestRead+0x15c>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054d6:	d103      	bne.n	80054e0 <I2C_MasterRequestRead+0x158>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054de:	641a      	str	r2, [r3, #64]	; 0x40
 80054e0:	2303      	movs	r3, #3
 80054e2:	e017      	b.n	8005514 <I2C_MasterRequestRead+0x18c>
 80054e4:	897b      	ldrh	r3, [r7, #10]
 80054e6:	11db      	asrs	r3, r3, #7
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	f003 0306 	and.w	r3, r3, #6
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	f063 030e 	orn	r3, r3, #14
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	611a      	str	r2, [r3, #16]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	4907      	ldr	r1, [pc, #28]	; (8005520 <I2C_MasterRequestRead+0x198>)
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 f9e3 	bl	80058ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <I2C_MasterRequestRead+0x18a>
 800550e:	2301      	movs	r3, #1
 8005510:	e000      	b.n	8005514 <I2C_MasterRequestRead+0x18c>
 8005512:	2300      	movs	r3, #0
 8005514:	4618      	mov	r0, r3
 8005516:	3718      	adds	r7, #24
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	00010008 	.word	0x00010008
 8005520:	00010002 	.word	0x00010002

08005524 <I2C_RequestMemoryWrite>:
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af02      	add	r7, sp, #8
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	4608      	mov	r0, r1
 800552e:	4611      	mov	r1, r2
 8005530:	461a      	mov	r2, r3
 8005532:	4603      	mov	r3, r0
 8005534:	817b      	strh	r3, [r7, #10]
 8005536:	460b      	mov	r3, r1
 8005538:	813b      	strh	r3, [r7, #8]
 800553a:	4613      	mov	r3, r2
 800553c:	80fb      	strh	r3, [r7, #6]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	2200      	movs	r2, #0
 8005556:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 f960 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00d      	beq.n	8005582 <I2C_RequestMemoryWrite+0x5e>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005574:	d103      	bne.n	800557e <I2C_RequestMemoryWrite+0x5a>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800557c:	641a      	str	r2, [r3, #64]	; 0x40
 800557e:	2303      	movs	r3, #3
 8005580:	e05f      	b.n	8005642 <I2C_RequestMemoryWrite+0x11e>
 8005582:	897b      	ldrh	r3, [r7, #10]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	461a      	mov	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005590:	611a      	str	r2, [r3, #16]
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	6a3a      	ldr	r2, [r7, #32]
 8005596:	492d      	ldr	r1, [pc, #180]	; (800564c <I2C_RequestMemoryWrite+0x128>)
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 f998 	bl	80058ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <I2C_RequestMemoryWrite+0x84>
 80055a4:	2301      	movs	r3, #1
 80055a6:	e04c      	b.n	8005642 <I2C_RequestMemoryWrite+0x11e>
 80055a8:	2300      	movs	r3, #0
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c0:	6a39      	ldr	r1, [r7, #32]
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 fa02 	bl	80059cc <I2C_WaitOnTXEFlagUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00d      	beq.n	80055ea <I2C_RequestMemoryWrite+0xc6>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d107      	bne.n	80055e6 <I2C_RequestMemoryWrite+0xc2>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	2301      	movs	r3, #1
 80055e8:	e02b      	b.n	8005642 <I2C_RequestMemoryWrite+0x11e>
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d105      	bne.n	80055fc <I2C_RequestMemoryWrite+0xd8>
 80055f0:	893b      	ldrh	r3, [r7, #8]
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	611a      	str	r2, [r3, #16]
 80055fa:	e021      	b.n	8005640 <I2C_RequestMemoryWrite+0x11c>
 80055fc:	893b      	ldrh	r3, [r7, #8]
 80055fe:	0a1b      	lsrs	r3, r3, #8
 8005600:	b29b      	uxth	r3, r3
 8005602:	b2da      	uxtb	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	611a      	str	r2, [r3, #16]
 800560a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800560c:	6a39      	ldr	r1, [r7, #32]
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 f9dc 	bl	80059cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00d      	beq.n	8005636 <I2C_RequestMemoryWrite+0x112>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	2b04      	cmp	r3, #4
 8005620:	d107      	bne.n	8005632 <I2C_RequestMemoryWrite+0x10e>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	2301      	movs	r3, #1
 8005634:	e005      	b.n	8005642 <I2C_RequestMemoryWrite+0x11e>
 8005636:	893b      	ldrh	r3, [r7, #8]
 8005638:	b2da      	uxtb	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	611a      	str	r2, [r3, #16]
 8005640:	2300      	movs	r3, #0
 8005642:	4618      	mov	r0, r3
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	00010002 	.word	0x00010002

08005650 <I2C_RequestMemoryRead>:
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af02      	add	r7, sp, #8
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	4608      	mov	r0, r1
 800565a:	4611      	mov	r1, r2
 800565c:	461a      	mov	r2, r3
 800565e:	4603      	mov	r3, r0
 8005660:	817b      	strh	r3, [r7, #10]
 8005662:	460b      	mov	r3, r1
 8005664:	813b      	strh	r3, [r7, #8]
 8005666:	4613      	mov	r3, r2
 8005668:	80fb      	strh	r3, [r7, #6]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	2200      	movs	r2, #0
 8005692:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 f8c2 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00d      	beq.n	80056be <I2C_RequestMemoryRead+0x6e>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b0:	d103      	bne.n	80056ba <I2C_RequestMemoryRead+0x6a>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056b8:	641a      	str	r2, [r3, #64]	; 0x40
 80056ba:	2303      	movs	r3, #3
 80056bc:	e0aa      	b.n	8005814 <I2C_RequestMemoryRead+0x1c4>
 80056be:	897b      	ldrh	r3, [r7, #10]
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	461a      	mov	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056cc:	611a      	str	r2, [r3, #16]
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	6a3a      	ldr	r2, [r7, #32]
 80056d2:	4952      	ldr	r1, [pc, #328]	; (800581c <I2C_RequestMemoryRead+0x1cc>)
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f000 f8fa 	bl	80058ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <I2C_RequestMemoryRead+0x94>
 80056e0:	2301      	movs	r3, #1
 80056e2:	e097      	b.n	8005814 <I2C_RequestMemoryRead+0x1c4>
 80056e4:	2300      	movs	r3, #0
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fc:	6a39      	ldr	r1, [r7, #32]
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 f964 	bl	80059cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00d      	beq.n	8005726 <I2C_RequestMemoryRead+0xd6>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570e:	2b04      	cmp	r3, #4
 8005710:	d107      	bne.n	8005722 <I2C_RequestMemoryRead+0xd2>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	2301      	movs	r3, #1
 8005724:	e076      	b.n	8005814 <I2C_RequestMemoryRead+0x1c4>
 8005726:	88fb      	ldrh	r3, [r7, #6]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d105      	bne.n	8005738 <I2C_RequestMemoryRead+0xe8>
 800572c:	893b      	ldrh	r3, [r7, #8]
 800572e:	b2da      	uxtb	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	611a      	str	r2, [r3, #16]
 8005736:	e021      	b.n	800577c <I2C_RequestMemoryRead+0x12c>
 8005738:	893b      	ldrh	r3, [r7, #8]
 800573a:	0a1b      	lsrs	r3, r3, #8
 800573c:	b29b      	uxth	r3, r3
 800573e:	b2da      	uxtb	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	611a      	str	r2, [r3, #16]
 8005746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005748:	6a39      	ldr	r1, [r7, #32]
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f000 f93e 	bl	80059cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00d      	beq.n	8005772 <I2C_RequestMemoryRead+0x122>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	2b04      	cmp	r3, #4
 800575c:	d107      	bne.n	800576e <I2C_RequestMemoryRead+0x11e>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	2301      	movs	r3, #1
 8005770:	e050      	b.n	8005814 <I2C_RequestMemoryRead+0x1c4>
 8005772:	893b      	ldrh	r3, [r7, #8]
 8005774:	b2da      	uxtb	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	611a      	str	r2, [r3, #16]
 800577c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800577e:	6a39      	ldr	r1, [r7, #32]
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 f923 	bl	80059cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00d      	beq.n	80057a8 <I2C_RequestMemoryRead+0x158>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005790:	2b04      	cmp	r3, #4
 8005792:	d107      	bne.n	80057a4 <I2C_RequestMemoryRead+0x154>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	2301      	movs	r3, #1
 80057a6:	e035      	b.n	8005814 <I2C_RequestMemoryRead+0x1c4>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	2200      	movs	r2, #0
 80057c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 f82b 	bl	8005820 <I2C_WaitOnFlagUntilTimeout>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00d      	beq.n	80057ec <I2C_RequestMemoryRead+0x19c>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057de:	d103      	bne.n	80057e8 <I2C_RequestMemoryRead+0x198>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057e6:	641a      	str	r2, [r3, #64]	; 0x40
 80057e8:	2303      	movs	r3, #3
 80057ea:	e013      	b.n	8005814 <I2C_RequestMemoryRead+0x1c4>
 80057ec:	897b      	ldrh	r3, [r7, #10]
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	f043 0301 	orr.w	r3, r3, #1
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	611a      	str	r2, [r3, #16]
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	6a3a      	ldr	r2, [r7, #32]
 8005800:	4906      	ldr	r1, [pc, #24]	; (800581c <I2C_RequestMemoryRead+0x1cc>)
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 f863 	bl	80058ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <I2C_RequestMemoryRead+0x1c2>
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <I2C_RequestMemoryRead+0x1c4>
 8005812:	2300      	movs	r3, #0
 8005814:	4618      	mov	r0, r3
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	00010002 	.word	0x00010002

08005820 <I2C_WaitOnFlagUntilTimeout>:
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	603b      	str	r3, [r7, #0]
 800582c:	4613      	mov	r3, r2
 800582e:	71fb      	strb	r3, [r7, #7]
 8005830:	e025      	b.n	800587e <I2C_WaitOnFlagUntilTimeout+0x5e>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005838:	d021      	beq.n	800587e <I2C_WaitOnFlagUntilTimeout+0x5e>
 800583a:	f7fd fe13 	bl	8003464 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	429a      	cmp	r2, r3
 8005848:	d302      	bcc.n	8005850 <I2C_WaitOnFlagUntilTimeout+0x30>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d116      	bne.n	800587e <I2C_WaitOnFlagUntilTimeout+0x5e>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	631a      	str	r2, [r3, #48]	; 0x30
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	f043 0220 	orr.w	r2, r3, #32
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	641a      	str	r2, [r3, #64]	; 0x40
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800587a:	2301      	movs	r3, #1
 800587c:	e023      	b.n	80058c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	0c1b      	lsrs	r3, r3, #16
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b01      	cmp	r3, #1
 8005886:	d10d      	bne.n	80058a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	43da      	mvns	r2, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	4013      	ands	r3, r2
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	bf0c      	ite	eq
 800589a:	2301      	moveq	r3, #1
 800589c:	2300      	movne	r3, #0
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	461a      	mov	r2, r3
 80058a2:	e00c      	b.n	80058be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	43da      	mvns	r2, r3
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4013      	ands	r3, r2
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	bf0c      	ite	eq
 80058b6:	2301      	moveq	r3, #1
 80058b8:	2300      	movne	r3, #0
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	461a      	mov	r2, r3
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d0b6      	beq.n	8005832 <I2C_WaitOnFlagUntilTimeout+0x12>
 80058c4:	2300      	movs	r3, #0
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	607a      	str	r2, [r7, #4]
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	e051      	b.n	8005982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ec:	d123      	bne.n	8005936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005906:	615a      	str	r2, [r3, #20]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	631a      	str	r2, [r3, #48]	; 0x30
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2220      	movs	r2, #32
 8005912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	f043 0204 	orr.w	r2, r3, #4
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	641a      	str	r2, [r3, #64]	; 0x40
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005932:	2301      	movs	r3, #1
 8005934:	e046      	b.n	80059c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593c:	d021      	beq.n	8005982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 800593e:	f7fd fd91 	bl	8003464 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	429a      	cmp	r2, r3
 800594c:	d302      	bcc.n	8005954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d116      	bne.n	8005982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	631a      	str	r2, [r3, #48]	; 0x30
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2220      	movs	r2, #32
 800595e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596e:	f043 0220 	orr.w	r2, r3, #32
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	641a      	str	r2, [r3, #64]	; 0x40
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800597e:	2301      	movs	r3, #1
 8005980:	e020      	b.n	80059c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	0c1b      	lsrs	r3, r3, #16
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b01      	cmp	r3, #1
 800598a:	d10c      	bne.n	80059a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	43da      	mvns	r2, r3
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	4013      	ands	r3, r2
 8005998:	b29b      	uxth	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	bf14      	ite	ne
 800599e:	2301      	movne	r3, #1
 80059a0:	2300      	moveq	r3, #0
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	e00b      	b.n	80059be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	43da      	mvns	r2, r3
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	4013      	ands	r3, r2
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	bf14      	ite	ne
 80059b8:	2301      	movne	r3, #1
 80059ba:	2300      	moveq	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d18d      	bne.n	80058de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80059c2:	2300      	movs	r3, #0
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <I2C_WaitOnTXEFlagUntilTimeout>:
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	e02d      	b.n	8005a36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 f8ce 	bl	8005b7c <I2C_IsAcknowledgeFailed>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 80059e6:	2301      	movs	r3, #1
 80059e8:	e02d      	b.n	8005a46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f0:	d021      	beq.n	8005a36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80059f2:	f7fd fd37 	bl	8003464 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d302      	bcc.n	8005a08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d116      	bne.n	8005a36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	631a      	str	r2, [r3, #48]	; 0x30
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2220      	movs	r2, #32
 8005a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	f043 0220 	orr.w	r2, r3, #32
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	641a      	str	r2, [r3, #64]	; 0x40
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005a32:	2301      	movs	r3, #1
 8005a34:	e007      	b.n	8005a46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a40:	2b80      	cmp	r3, #128	; 0x80
 8005a42:	d1ca      	bne.n	80059da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8005a44:	2300      	movs	r3, #0
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <I2C_WaitOnBTFFlagUntilTimeout>:
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b084      	sub	sp, #16
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	60f8      	str	r0, [r7, #12]
 8005a56:	60b9      	str	r1, [r7, #8]
 8005a58:	607a      	str	r2, [r7, #4]
 8005a5a:	e02d      	b.n	8005ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 f88d 	bl	8005b7c <I2C_IsAcknowledgeFailed>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e02d      	b.n	8005ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a72:	d021      	beq.n	8005ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8005a74:	f7fd fcf6 	bl	8003464 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d302      	bcc.n	8005a8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d116      	bne.n	8005ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	631a      	str	r2, [r3, #48]	; 0x30
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa4:	f043 0220 	orr.w	r2, r3, #32
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	641a      	str	r2, [r3, #64]	; 0x40
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e007      	b.n	8005ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	f003 0304 	and.w	r3, r3, #4
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	d1ca      	bne.n	8005a5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	e042      	b.n	8005b64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	f003 0310 	and.w	r3, r3, #16
 8005ae8:	2b10      	cmp	r3, #16
 8005aea:	d119      	bne.n	8005b20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f06f 0210 	mvn.w	r2, #16
 8005af4:	615a      	str	r2, [r3, #20]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	631a      	str	r2, [r3, #48]	; 0x30
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	641a      	str	r2, [r3, #64]	; 0x40
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e029      	b.n	8005b74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8005b20:	f7fd fca0 	bl	8003464 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d302      	bcc.n	8005b36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d116      	bne.n	8005b64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	631a      	str	r2, [r3, #48]	; 0x30
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	f043 0220 	orr.w	r2, r3, #32
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	641a      	str	r2, [r3, #64]	; 0x40
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b60:	2301      	movs	r3, #1
 8005b62:	e007      	b.n	8005b74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6e:	2b40      	cmp	r3, #64	; 0x40
 8005b70:	d1b5      	bne.n	8005ade <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 8005b72:	2300      	movs	r3, #0
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <I2C_IsAcknowledgeFailed>:
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b92:	d11b      	bne.n	8005bcc <I2C_IsAcknowledgeFailed+0x50>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b9c:	615a      	str	r2, [r3, #20]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	f043 0204 	orr.w	r2, r3, #4
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	641a      	str	r2, [r3, #64]	; 0x40
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e000      	b.n	8005bce <I2C_IsAcknowledgeFailed+0x52>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	4618      	mov	r0, r3
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
	...

08005bdc <HAL_RCC_OscConfig>:
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_RCC_OscConfig+0x12>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e267      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d075      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x10a>
 8005bfa:	4b88      	ldr	r3, [pc, #544]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 030c 	and.w	r3, r3, #12
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d00c      	beq.n	8005c20 <HAL_RCC_OscConfig+0x44>
 8005c06:	4b85      	ldr	r3, [pc, #532]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 030c 	and.w	r3, r3, #12
 8005c0e:	2b08      	cmp	r3, #8
 8005c10:	d112      	bne.n	8005c38 <HAL_RCC_OscConfig+0x5c>
 8005c12:	4b82      	ldr	r3, [pc, #520]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c1e:	d10b      	bne.n	8005c38 <HAL_RCC_OscConfig+0x5c>
 8005c20:	4b7e      	ldr	r3, [pc, #504]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d05b      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x108>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d157      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x108>
 8005c34:	2301      	movs	r3, #1
 8005c36:	e242      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c40:	d106      	bne.n	8005c50 <HAL_RCC_OscConfig+0x74>
 8005c42:	4b76      	ldr	r3, [pc, #472]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a75      	ldr	r2, [pc, #468]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c4c:	6013      	str	r3, [r2, #0]
 8005c4e:	e01d      	b.n	8005c8c <HAL_RCC_OscConfig+0xb0>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c58:	d10c      	bne.n	8005c74 <HAL_RCC_OscConfig+0x98>
 8005c5a:	4b70      	ldr	r3, [pc, #448]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a6f      	ldr	r2, [pc, #444]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	4b6d      	ldr	r3, [pc, #436]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a6c      	ldr	r2, [pc, #432]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c70:	6013      	str	r3, [r2, #0]
 8005c72:	e00b      	b.n	8005c8c <HAL_RCC_OscConfig+0xb0>
 8005c74:	4b69      	ldr	r3, [pc, #420]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a68      	ldr	r2, [pc, #416]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c7e:	6013      	str	r3, [r2, #0]
 8005c80:	4b66      	ldr	r3, [pc, #408]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a65      	ldr	r2, [pc, #404]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c8a:	6013      	str	r3, [r2, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d013      	beq.n	8005cbc <HAL_RCC_OscConfig+0xe0>
 8005c94:	f7fd fbe6 	bl	8003464 <HAL_GetTick>
 8005c98:	6138      	str	r0, [r7, #16]
 8005c9a:	e008      	b.n	8005cae <HAL_RCC_OscConfig+0xd2>
 8005c9c:	f7fd fbe2 	bl	8003464 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	2b64      	cmp	r3, #100	; 0x64
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_OscConfig+0xd2>
 8005caa:	2303      	movs	r3, #3
 8005cac:	e207      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
 8005cae:	4b5b      	ldr	r3, [pc, #364]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d0f0      	beq.n	8005c9c <HAL_RCC_OscConfig+0xc0>
 8005cba:	e014      	b.n	8005ce6 <HAL_RCC_OscConfig+0x10a>
 8005cbc:	f7fd fbd2 	bl	8003464 <HAL_GetTick>
 8005cc0:	6138      	str	r0, [r7, #16]
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0xfa>
 8005cc4:	f7fd fbce 	bl	8003464 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b64      	cmp	r3, #100	; 0x64
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0xfa>
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e1f3      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
 8005cd6:	4b51      	ldr	r3, [pc, #324]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1f0      	bne.n	8005cc4 <HAL_RCC_OscConfig+0xe8>
 8005ce2:	e000      	b.n	8005ce6 <HAL_RCC_OscConfig+0x10a>
 8005ce4:	bf00      	nop
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d063      	beq.n	8005dba <HAL_RCC_OscConfig+0x1de>
 8005cf2:	4b4a      	ldr	r3, [pc, #296]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 030c 	and.w	r3, r3, #12
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00b      	beq.n	8005d16 <HAL_RCC_OscConfig+0x13a>
 8005cfe:	4b47      	ldr	r3, [pc, #284]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f003 030c 	and.w	r3, r3, #12
 8005d06:	2b08      	cmp	r3, #8
 8005d08:	d11c      	bne.n	8005d44 <HAL_RCC_OscConfig+0x168>
 8005d0a:	4b44      	ldr	r3, [pc, #272]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d116      	bne.n	8005d44 <HAL_RCC_OscConfig+0x168>
 8005d16:	4b41      	ldr	r3, [pc, #260]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d005      	beq.n	8005d2e <HAL_RCC_OscConfig+0x152>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d001      	beq.n	8005d2e <HAL_RCC_OscConfig+0x152>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e1c7      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
 8005d2e:	4b3b      	ldr	r3, [pc, #236]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	00db      	lsls	r3, r3, #3
 8005d3c:	4937      	ldr	r1, [pc, #220]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	600b      	str	r3, [r1, #0]
 8005d42:	e03a      	b.n	8005dba <HAL_RCC_OscConfig+0x1de>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d020      	beq.n	8005d8e <HAL_RCC_OscConfig+0x1b2>
 8005d4c:	4b34      	ldr	r3, [pc, #208]	; (8005e20 <HAL_RCC_OscConfig+0x244>)
 8005d4e:	2201      	movs	r2, #1
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	f7fd fb87 	bl	8003464 <HAL_GetTick>
 8005d56:	6138      	str	r0, [r7, #16]
 8005d58:	e008      	b.n	8005d6c <HAL_RCC_OscConfig+0x190>
 8005d5a:	f7fd fb83 	bl	8003464 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d901      	bls.n	8005d6c <HAL_RCC_OscConfig+0x190>
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e1a8      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
 8005d6c:	4b2b      	ldr	r3, [pc, #172]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0f0      	beq.n	8005d5a <HAL_RCC_OscConfig+0x17e>
 8005d78:	4b28      	ldr	r3, [pc, #160]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	4925      	ldr	r1, [pc, #148]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	600b      	str	r3, [r1, #0]
 8005d8c:	e015      	b.n	8005dba <HAL_RCC_OscConfig+0x1de>
 8005d8e:	4b24      	ldr	r3, [pc, #144]	; (8005e20 <HAL_RCC_OscConfig+0x244>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	f7fd fb66 	bl	8003464 <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x1d2>
 8005d9c:	f7fd fb62 	bl	8003464 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x1d2>
 8005daa:	2303      	movs	r3, #3
 8005dac:	e187      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
 8005dae:	4b1b      	ldr	r3, [pc, #108]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f0      	bne.n	8005d9c <HAL_RCC_OscConfig+0x1c0>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0308 	and.w	r3, r3, #8
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d036      	beq.n	8005e34 <HAL_RCC_OscConfig+0x258>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d016      	beq.n	8005dfc <HAL_RCC_OscConfig+0x220>
 8005dce:	4b15      	ldr	r3, [pc, #84]	; (8005e24 <HAL_RCC_OscConfig+0x248>)
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	f7fd fb46 	bl	8003464 <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0x212>
 8005ddc:	f7fd fb42 	bl	8003464 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0x212>
 8005dea:	2303      	movs	r3, #3
 8005dec:	e167      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
 8005dee:	4b0b      	ldr	r3, [pc, #44]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d0f0      	beq.n	8005ddc <HAL_RCC_OscConfig+0x200>
 8005dfa:	e01b      	b.n	8005e34 <HAL_RCC_OscConfig+0x258>
 8005dfc:	4b09      	ldr	r3, [pc, #36]	; (8005e24 <HAL_RCC_OscConfig+0x248>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	f7fd fb2f 	bl	8003464 <HAL_GetTick>
 8005e06:	6138      	str	r0, [r7, #16]
 8005e08:	e00e      	b.n	8005e28 <HAL_RCC_OscConfig+0x24c>
 8005e0a:	f7fd fb2b 	bl	8003464 <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d907      	bls.n	8005e28 <HAL_RCC_OscConfig+0x24c>
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e150      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
 8005e1c:	40023800 	.word	0x40023800
 8005e20:	42470000 	.word	0x42470000
 8005e24:	42470e80 	.word	0x42470e80
 8005e28:	4b88      	ldr	r3, [pc, #544]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1ea      	bne.n	8005e0a <HAL_RCC_OscConfig+0x22e>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 8097 	beq.w	8005f70 <HAL_RCC_OscConfig+0x394>
 8005e42:	2300      	movs	r3, #0
 8005e44:	75fb      	strb	r3, [r7, #23]
 8005e46:	4b81      	ldr	r3, [pc, #516]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10f      	bne.n	8005e72 <HAL_RCC_OscConfig+0x296>
 8005e52:	2300      	movs	r3, #0
 8005e54:	60bb      	str	r3, [r7, #8]
 8005e56:	4b7d      	ldr	r3, [pc, #500]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	4a7c      	ldr	r2, [pc, #496]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e60:	6413      	str	r3, [r2, #64]	; 0x40
 8005e62:	4b7a      	ldr	r3, [pc, #488]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e6a:	60bb      	str	r3, [r7, #8]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2301      	movs	r3, #1
 8005e70:	75fb      	strb	r3, [r7, #23]
 8005e72:	4b77      	ldr	r3, [pc, #476]	; (8006050 <HAL_RCC_OscConfig+0x474>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d118      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x2d4>
 8005e7e:	4b74      	ldr	r3, [pc, #464]	; (8006050 <HAL_RCC_OscConfig+0x474>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a73      	ldr	r2, [pc, #460]	; (8006050 <HAL_RCC_OscConfig+0x474>)
 8005e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e88:	6013      	str	r3, [r2, #0]
 8005e8a:	f7fd faeb 	bl	8003464 <HAL_GetTick>
 8005e8e:	6138      	str	r0, [r7, #16]
 8005e90:	e008      	b.n	8005ea4 <HAL_RCC_OscConfig+0x2c8>
 8005e92:	f7fd fae7 	bl	8003464 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x2c8>
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e10c      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
 8005ea4:	4b6a      	ldr	r3, [pc, #424]	; (8006050 <HAL_RCC_OscConfig+0x474>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0f0      	beq.n	8005e92 <HAL_RCC_OscConfig+0x2b6>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d106      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x2ea>
 8005eb8:	4b64      	ldr	r3, [pc, #400]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ebc:	4a63      	ldr	r2, [pc, #396]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005ebe:	f043 0301 	orr.w	r3, r3, #1
 8005ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ec4:	e01c      	b.n	8005f00 <HAL_RCC_OscConfig+0x324>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	2b05      	cmp	r3, #5
 8005ecc:	d10c      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x30c>
 8005ece:	4b5f      	ldr	r3, [pc, #380]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed2:	4a5e      	ldr	r2, [pc, #376]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005ed4:	f043 0304 	orr.w	r3, r3, #4
 8005ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8005eda:	4b5c      	ldr	r3, [pc, #368]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ede:	4a5b      	ldr	r2, [pc, #364]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005ee0:	f043 0301 	orr.w	r3, r3, #1
 8005ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ee6:	e00b      	b.n	8005f00 <HAL_RCC_OscConfig+0x324>
 8005ee8:	4b58      	ldr	r3, [pc, #352]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eec:	4a57      	ldr	r2, [pc, #348]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005eee:	f023 0301 	bic.w	r3, r3, #1
 8005ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ef4:	4b55      	ldr	r3, [pc, #340]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef8:	4a54      	ldr	r2, [pc, #336]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005efa:	f023 0304 	bic.w	r3, r3, #4
 8005efe:	6713      	str	r3, [r2, #112]	; 0x70
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d015      	beq.n	8005f34 <HAL_RCC_OscConfig+0x358>
 8005f08:	f7fd faac 	bl	8003464 <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]
 8005f0e:	e00a      	b.n	8005f26 <HAL_RCC_OscConfig+0x34a>
 8005f10:	f7fd faa8 	bl	8003464 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x34a>
 8005f22:	2303      	movs	r3, #3
 8005f24:	e0cb      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
 8005f26:	4b49      	ldr	r3, [pc, #292]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d0ee      	beq.n	8005f10 <HAL_RCC_OscConfig+0x334>
 8005f32:	e014      	b.n	8005f5e <HAL_RCC_OscConfig+0x382>
 8005f34:	f7fd fa96 	bl	8003464 <HAL_GetTick>
 8005f38:	6138      	str	r0, [r7, #16]
 8005f3a:	e00a      	b.n	8005f52 <HAL_RCC_OscConfig+0x376>
 8005f3c:	f7fd fa92 	bl	8003464 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_OscConfig+0x376>
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e0b5      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
 8005f52:	4b3e      	ldr	r3, [pc, #248]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1ee      	bne.n	8005f3c <HAL_RCC_OscConfig+0x360>
 8005f5e:	7dfb      	ldrb	r3, [r7, #23]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d105      	bne.n	8005f70 <HAL_RCC_OscConfig+0x394>
 8005f64:	4b39      	ldr	r3, [pc, #228]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f68:	4a38      	ldr	r2, [pc, #224]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 80a1 	beq.w	80060bc <HAL_RCC_OscConfig+0x4e0>
 8005f7a:	4b34      	ldr	r3, [pc, #208]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 030c 	and.w	r3, r3, #12
 8005f82:	2b08      	cmp	r3, #8
 8005f84:	d05c      	beq.n	8006040 <HAL_RCC_OscConfig+0x464>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d141      	bne.n	8006012 <HAL_RCC_OscConfig+0x436>
 8005f8e:	4b31      	ldr	r3, [pc, #196]	; (8006054 <HAL_RCC_OscConfig+0x478>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	f7fd fa66 	bl	8003464 <HAL_GetTick>
 8005f98:	6138      	str	r0, [r7, #16]
 8005f9a:	e008      	b.n	8005fae <HAL_RCC_OscConfig+0x3d2>
 8005f9c:	f7fd fa62 	bl	8003464 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x3d2>
 8005faa:	2303      	movs	r3, #3
 8005fac:	e087      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
 8005fae:	4b27      	ldr	r3, [pc, #156]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1f0      	bne.n	8005f9c <HAL_RCC_OscConfig+0x3c0>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	69da      	ldr	r2, [r3, #28]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	019b      	lsls	r3, r3, #6
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd0:	085b      	lsrs	r3, r3, #1
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	041b      	lsls	r3, r3, #16
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fdc:	061b      	lsls	r3, r3, #24
 8005fde:	491b      	ldr	r1, [pc, #108]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	604b      	str	r3, [r1, #4]
 8005fe4:	4b1b      	ldr	r3, [pc, #108]	; (8006054 <HAL_RCC_OscConfig+0x478>)
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	f7fd fa3b 	bl	8003464 <HAL_GetTick>
 8005fee:	6138      	str	r0, [r7, #16]
 8005ff0:	e008      	b.n	8006004 <HAL_RCC_OscConfig+0x428>
 8005ff2:	f7fd fa37 	bl	8003464 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d901      	bls.n	8006004 <HAL_RCC_OscConfig+0x428>
 8006000:	2303      	movs	r3, #3
 8006002:	e05c      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
 8006004:	4b11      	ldr	r3, [pc, #68]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0f0      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x416>
 8006010:	e054      	b.n	80060bc <HAL_RCC_OscConfig+0x4e0>
 8006012:	4b10      	ldr	r3, [pc, #64]	; (8006054 <HAL_RCC_OscConfig+0x478>)
 8006014:	2200      	movs	r2, #0
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	f7fd fa24 	bl	8003464 <HAL_GetTick>
 800601c:	6138      	str	r0, [r7, #16]
 800601e:	e008      	b.n	8006032 <HAL_RCC_OscConfig+0x456>
 8006020:	f7fd fa20 	bl	8003464 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d901      	bls.n	8006032 <HAL_RCC_OscConfig+0x456>
 800602e:	2303      	movs	r3, #3
 8006030:	e045      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
 8006032:	4b06      	ldr	r3, [pc, #24]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1f0      	bne.n	8006020 <HAL_RCC_OscConfig+0x444>
 800603e:	e03d      	b.n	80060bc <HAL_RCC_OscConfig+0x4e0>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d107      	bne.n	8006058 <HAL_RCC_OscConfig+0x47c>
 8006048:	2301      	movs	r3, #1
 800604a:	e038      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
 800604c:	40023800 	.word	0x40023800
 8006050:	40007000 	.word	0x40007000
 8006054:	42470060 	.word	0x42470060
 8006058:	4b1b      	ldr	r3, [pc, #108]	; (80060c8 <HAL_RCC_OscConfig+0x4ec>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	60fb      	str	r3, [r7, #12]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d028      	beq.n	80060b8 <HAL_RCC_OscConfig+0x4dc>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	429a      	cmp	r2, r3
 8006072:	d121      	bne.n	80060b8 <HAL_RCC_OscConfig+0x4dc>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	429a      	cmp	r2, r3
 8006080:	d11a      	bne.n	80060b8 <HAL_RCC_OscConfig+0x4dc>
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006088:	4013      	ands	r3, r2
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800608e:	0192      	lsls	r2, r2, #6
 8006090:	4293      	cmp	r3, r2
 8006092:	d111      	bne.n	80060b8 <HAL_RCC_OscConfig+0x4dc>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609e:	085b      	lsrs	r3, r3, #1
 80060a0:	3b01      	subs	r3, #1
 80060a2:	041b      	lsls	r3, r3, #16
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d107      	bne.n	80060b8 <HAL_RCC_OscConfig+0x4dc>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b2:	061b      	lsls	r3, r3, #24
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d001      	beq.n	80060bc <HAL_RCC_OscConfig+0x4e0>
 80060b8:	2301      	movs	r3, #1
 80060ba:	e000      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
 80060bc:	2300      	movs	r3, #0
 80060be:	4618      	mov	r0, r3
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	40023800 	.word	0x40023800

080060cc <HAL_RCC_ClockConfig>:
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <HAL_RCC_ClockConfig+0x14>
 80060dc:	2301      	movs	r3, #1
 80060de:	e0cc      	b.n	800627a <HAL_RCC_ClockConfig+0x1ae>
 80060e0:	4b68      	ldr	r3, [pc, #416]	; (8006284 <HAL_RCC_ClockConfig+0x1b8>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0307 	and.w	r3, r3, #7
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d90c      	bls.n	8006108 <HAL_RCC_ClockConfig+0x3c>
 80060ee:	4b65      	ldr	r3, [pc, #404]	; (8006284 <HAL_RCC_ClockConfig+0x1b8>)
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	b2d2      	uxtb	r2, r2
 80060f4:	701a      	strb	r2, [r3, #0]
 80060f6:	4b63      	ldr	r3, [pc, #396]	; (8006284 <HAL_RCC_ClockConfig+0x1b8>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	429a      	cmp	r2, r3
 8006102:	d001      	beq.n	8006108 <HAL_RCC_ClockConfig+0x3c>
 8006104:	2301      	movs	r3, #1
 8006106:	e0b8      	b.n	800627a <HAL_RCC_ClockConfig+0x1ae>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d020      	beq.n	8006156 <HAL_RCC_ClockConfig+0x8a>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0304 	and.w	r3, r3, #4
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <HAL_RCC_ClockConfig+0x60>
 8006120:	4b59      	ldr	r3, [pc, #356]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	4a58      	ldr	r2, [pc, #352]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 8006126:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800612a:	6093      	str	r3, [r2, #8]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0308 	and.w	r3, r3, #8
 8006134:	2b00      	cmp	r3, #0
 8006136:	d005      	beq.n	8006144 <HAL_RCC_ClockConfig+0x78>
 8006138:	4b53      	ldr	r3, [pc, #332]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	4a52      	ldr	r2, [pc, #328]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 800613e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006142:	6093      	str	r3, [r2, #8]
 8006144:	4b50      	ldr	r3, [pc, #320]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	494d      	ldr	r1, [pc, #308]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 8006152:	4313      	orrs	r3, r2
 8006154:	608b      	str	r3, [r1, #8]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d044      	beq.n	80061ec <HAL_RCC_ClockConfig+0x120>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d107      	bne.n	800617a <HAL_RCC_ClockConfig+0xae>
 800616a:	4b47      	ldr	r3, [pc, #284]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d119      	bne.n	80061aa <HAL_RCC_ClockConfig+0xde>
 8006176:	2301      	movs	r3, #1
 8006178:	e07f      	b.n	800627a <HAL_RCC_ClockConfig+0x1ae>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	2b02      	cmp	r3, #2
 8006180:	d003      	beq.n	800618a <HAL_RCC_ClockConfig+0xbe>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	2b03      	cmp	r3, #3
 8006188:	d107      	bne.n	800619a <HAL_RCC_ClockConfig+0xce>
 800618a:	4b3f      	ldr	r3, [pc, #252]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d109      	bne.n	80061aa <HAL_RCC_ClockConfig+0xde>
 8006196:	2301      	movs	r3, #1
 8006198:	e06f      	b.n	800627a <HAL_RCC_ClockConfig+0x1ae>
 800619a:	4b3b      	ldr	r3, [pc, #236]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <HAL_RCC_ClockConfig+0xde>
 80061a6:	2301      	movs	r3, #1
 80061a8:	e067      	b.n	800627a <HAL_RCC_ClockConfig+0x1ae>
 80061aa:	4b37      	ldr	r3, [pc, #220]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f023 0203 	bic.w	r2, r3, #3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	4934      	ldr	r1, [pc, #208]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	608b      	str	r3, [r1, #8]
 80061bc:	f7fd f952 	bl	8003464 <HAL_GetTick>
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	e00a      	b.n	80061da <HAL_RCC_ClockConfig+0x10e>
 80061c4:	f7fd f94e 	bl	8003464 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d901      	bls.n	80061da <HAL_RCC_ClockConfig+0x10e>
 80061d6:	2303      	movs	r3, #3
 80061d8:	e04f      	b.n	800627a <HAL_RCC_ClockConfig+0x1ae>
 80061da:	4b2b      	ldr	r3, [pc, #172]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f003 020c 	and.w	r2, r3, #12
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d1eb      	bne.n	80061c4 <HAL_RCC_ClockConfig+0xf8>
 80061ec:	4b25      	ldr	r3, [pc, #148]	; (8006284 <HAL_RCC_ClockConfig+0x1b8>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0307 	and.w	r3, r3, #7
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d20c      	bcs.n	8006214 <HAL_RCC_ClockConfig+0x148>
 80061fa:	4b22      	ldr	r3, [pc, #136]	; (8006284 <HAL_RCC_ClockConfig+0x1b8>)
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	701a      	strb	r2, [r3, #0]
 8006202:	4b20      	ldr	r3, [pc, #128]	; (8006284 <HAL_RCC_ClockConfig+0x1b8>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0307 	and.w	r3, r3, #7
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	429a      	cmp	r2, r3
 800620e:	d001      	beq.n	8006214 <HAL_RCC_ClockConfig+0x148>
 8006210:	2301      	movs	r3, #1
 8006212:	e032      	b.n	800627a <HAL_RCC_ClockConfig+0x1ae>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b00      	cmp	r3, #0
 800621e:	d008      	beq.n	8006232 <HAL_RCC_ClockConfig+0x166>
 8006220:	4b19      	ldr	r3, [pc, #100]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	4916      	ldr	r1, [pc, #88]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 800622e:	4313      	orrs	r3, r2
 8006230:	608b      	str	r3, [r1, #8]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0308 	and.w	r3, r3, #8
 800623a:	2b00      	cmp	r3, #0
 800623c:	d009      	beq.n	8006252 <HAL_RCC_ClockConfig+0x186>
 800623e:	4b12      	ldr	r3, [pc, #72]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	00db      	lsls	r3, r3, #3
 800624c:	490e      	ldr	r1, [pc, #56]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 800624e:	4313      	orrs	r3, r2
 8006250:	608b      	str	r3, [r1, #8]
 8006252:	f000 f821 	bl	8006298 <HAL_RCC_GetSysClockFreq>
 8006256:	4602      	mov	r2, r0
 8006258:	4b0b      	ldr	r3, [pc, #44]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	091b      	lsrs	r3, r3, #4
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	490a      	ldr	r1, [pc, #40]	; (800628c <HAL_RCC_ClockConfig+0x1c0>)
 8006264:	5ccb      	ldrb	r3, [r1, r3]
 8006266:	fa22 f303 	lsr.w	r3, r2, r3
 800626a:	4a09      	ldr	r2, [pc, #36]	; (8006290 <HAL_RCC_ClockConfig+0x1c4>)
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	4b09      	ldr	r3, [pc, #36]	; (8006294 <HAL_RCC_ClockConfig+0x1c8>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4618      	mov	r0, r3
 8006274:	f7fc fe26 	bl	8002ec4 <HAL_InitTick>
 8006278:	2300      	movs	r3, #0
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	40023c00 	.word	0x40023c00
 8006288:	40023800 	.word	0x40023800
 800628c:	0800c2cc 	.word	0x0800c2cc
 8006290:	20000030 	.word	0x20000030
 8006294:	20000034 	.word	0x20000034

08006298 <HAL_RCC_GetSysClockFreq>:
 8006298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800629c:	b090      	sub	sp, #64	; 0x40
 800629e:	af00      	add	r7, sp, #0
 80062a0:	2300      	movs	r3, #0
 80062a2:	637b      	str	r3, [r7, #52]	; 0x34
 80062a4:	2300      	movs	r3, #0
 80062a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062a8:	2300      	movs	r3, #0
 80062aa:	633b      	str	r3, [r7, #48]	; 0x30
 80062ac:	2300      	movs	r3, #0
 80062ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80062b0:	4b59      	ldr	r3, [pc, #356]	; (8006418 <HAL_RCC_GetSysClockFreq+0x180>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f003 030c 	and.w	r3, r3, #12
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d00d      	beq.n	80062d8 <HAL_RCC_GetSysClockFreq+0x40>
 80062bc:	2b08      	cmp	r3, #8
 80062be:	f200 80a1 	bhi.w	8006404 <HAL_RCC_GetSysClockFreq+0x16c>
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d002      	beq.n	80062cc <HAL_RCC_GetSysClockFreq+0x34>
 80062c6:	2b04      	cmp	r3, #4
 80062c8:	d003      	beq.n	80062d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80062ca:	e09b      	b.n	8006404 <HAL_RCC_GetSysClockFreq+0x16c>
 80062cc:	4b53      	ldr	r3, [pc, #332]	; (800641c <HAL_RCC_GetSysClockFreq+0x184>)
 80062ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80062d0:	e09b      	b.n	800640a <HAL_RCC_GetSysClockFreq+0x172>
 80062d2:	4b53      	ldr	r3, [pc, #332]	; (8006420 <HAL_RCC_GetSysClockFreq+0x188>)
 80062d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80062d6:	e098      	b.n	800640a <HAL_RCC_GetSysClockFreq+0x172>
 80062d8:	4b4f      	ldr	r3, [pc, #316]	; (8006418 <HAL_RCC_GetSysClockFreq+0x180>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062e0:	637b      	str	r3, [r7, #52]	; 0x34
 80062e2:	4b4d      	ldr	r3, [pc, #308]	; (8006418 <HAL_RCC_GetSysClockFreq+0x180>)
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d028      	beq.n	8006340 <HAL_RCC_GetSysClockFreq+0xa8>
 80062ee:	4b4a      	ldr	r3, [pc, #296]	; (8006418 <HAL_RCC_GetSysClockFreq+0x180>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	099b      	lsrs	r3, r3, #6
 80062f4:	2200      	movs	r2, #0
 80062f6:	623b      	str	r3, [r7, #32]
 80062f8:	627a      	str	r2, [r7, #36]	; 0x24
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006300:	2100      	movs	r1, #0
 8006302:	4b47      	ldr	r3, [pc, #284]	; (8006420 <HAL_RCC_GetSysClockFreq+0x188>)
 8006304:	fb03 f201 	mul.w	r2, r3, r1
 8006308:	2300      	movs	r3, #0
 800630a:	fb00 f303 	mul.w	r3, r0, r3
 800630e:	4413      	add	r3, r2
 8006310:	4a43      	ldr	r2, [pc, #268]	; (8006420 <HAL_RCC_GetSysClockFreq+0x188>)
 8006312:	fba0 1202 	umull	r1, r2, r0, r2
 8006316:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006318:	460a      	mov	r2, r1
 800631a:	62ba      	str	r2, [r7, #40]	; 0x28
 800631c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800631e:	4413      	add	r3, r2
 8006320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006324:	2200      	movs	r2, #0
 8006326:	61bb      	str	r3, [r7, #24]
 8006328:	61fa      	str	r2, [r7, #28]
 800632a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800632e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006332:	f7fa fb43 	bl	80009bc <__aeabi_uldivmod>
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	4613      	mov	r3, r2
 800633c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800633e:	e053      	b.n	80063e8 <HAL_RCC_GetSysClockFreq+0x150>
 8006340:	4b35      	ldr	r3, [pc, #212]	; (8006418 <HAL_RCC_GetSysClockFreq+0x180>)
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	099b      	lsrs	r3, r3, #6
 8006346:	2200      	movs	r2, #0
 8006348:	613b      	str	r3, [r7, #16]
 800634a:	617a      	str	r2, [r7, #20]
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006352:	f04f 0b00 	mov.w	fp, #0
 8006356:	4652      	mov	r2, sl
 8006358:	465b      	mov	r3, fp
 800635a:	f04f 0000 	mov.w	r0, #0
 800635e:	f04f 0100 	mov.w	r1, #0
 8006362:	0159      	lsls	r1, r3, #5
 8006364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006368:	0150      	lsls	r0, r2, #5
 800636a:	4602      	mov	r2, r0
 800636c:	460b      	mov	r3, r1
 800636e:	ebb2 080a 	subs.w	r8, r2, sl
 8006372:	eb63 090b 	sbc.w	r9, r3, fp
 8006376:	f04f 0200 	mov.w	r2, #0
 800637a:	f04f 0300 	mov.w	r3, #0
 800637e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006382:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006386:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800638a:	ebb2 0408 	subs.w	r4, r2, r8
 800638e:	eb63 0509 	sbc.w	r5, r3, r9
 8006392:	f04f 0200 	mov.w	r2, #0
 8006396:	f04f 0300 	mov.w	r3, #0
 800639a:	00eb      	lsls	r3, r5, #3
 800639c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063a0:	00e2      	lsls	r2, r4, #3
 80063a2:	4614      	mov	r4, r2
 80063a4:	461d      	mov	r5, r3
 80063a6:	eb14 030a 	adds.w	r3, r4, sl
 80063aa:	603b      	str	r3, [r7, #0]
 80063ac:	eb45 030b 	adc.w	r3, r5, fp
 80063b0:	607b      	str	r3, [r7, #4]
 80063b2:	f04f 0200 	mov.w	r2, #0
 80063b6:	f04f 0300 	mov.w	r3, #0
 80063ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063be:	4629      	mov	r1, r5
 80063c0:	028b      	lsls	r3, r1, #10
 80063c2:	4621      	mov	r1, r4
 80063c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063c8:	4621      	mov	r1, r4
 80063ca:	028a      	lsls	r2, r1, #10
 80063cc:	4610      	mov	r0, r2
 80063ce:	4619      	mov	r1, r3
 80063d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d2:	2200      	movs	r2, #0
 80063d4:	60bb      	str	r3, [r7, #8]
 80063d6:	60fa      	str	r2, [r7, #12]
 80063d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063dc:	f7fa faee 	bl	80009bc <__aeabi_uldivmod>
 80063e0:	4602      	mov	r2, r0
 80063e2:	460b      	mov	r3, r1
 80063e4:	4613      	mov	r3, r2
 80063e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063e8:	4b0b      	ldr	r3, [pc, #44]	; (8006418 <HAL_RCC_GetSysClockFreq+0x180>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	0c1b      	lsrs	r3, r3, #16
 80063ee:	f003 0303 	and.w	r3, r3, #3
 80063f2:	3301      	adds	r3, #1
 80063f4:	005b      	lsls	r3, r3, #1
 80063f6:	633b      	str	r3, [r7, #48]	; 0x30
 80063f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006400:	63bb      	str	r3, [r7, #56]	; 0x38
 8006402:	e002      	b.n	800640a <HAL_RCC_GetSysClockFreq+0x172>
 8006404:	4b05      	ldr	r3, [pc, #20]	; (800641c <HAL_RCC_GetSysClockFreq+0x184>)
 8006406:	63bb      	str	r3, [r7, #56]	; 0x38
 8006408:	bf00      	nop
 800640a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640c:	4618      	mov	r0, r3
 800640e:	3740      	adds	r7, #64	; 0x40
 8006410:	46bd      	mov	sp, r7
 8006412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006416:	bf00      	nop
 8006418:	40023800 	.word	0x40023800
 800641c:	00f42400 	.word	0x00f42400
 8006420:	017d7840 	.word	0x017d7840

08006424 <HAL_RCC_GetHCLKFreq>:
 8006424:	b480      	push	{r7}
 8006426:	af00      	add	r7, sp, #0
 8006428:	4b03      	ldr	r3, [pc, #12]	; (8006438 <HAL_RCC_GetHCLKFreq+0x14>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4618      	mov	r0, r3
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	20000030 	.word	0x20000030

0800643c <HAL_RCC_GetPCLK1Freq>:
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0
 8006440:	f7ff fff0 	bl	8006424 <HAL_RCC_GetHCLKFreq>
 8006444:	4602      	mov	r2, r0
 8006446:	4b05      	ldr	r3, [pc, #20]	; (800645c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	0a9b      	lsrs	r3, r3, #10
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	4903      	ldr	r1, [pc, #12]	; (8006460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006452:	5ccb      	ldrb	r3, [r1, r3]
 8006454:	fa22 f303 	lsr.w	r3, r2, r3
 8006458:	4618      	mov	r0, r3
 800645a:	bd80      	pop	{r7, pc}
 800645c:	40023800 	.word	0x40023800
 8006460:	0800c2dc 	.word	0x0800c2dc

08006464 <HAL_RCC_GetPCLK2Freq>:
 8006464:	b580      	push	{r7, lr}
 8006466:	af00      	add	r7, sp, #0
 8006468:	f7ff ffdc 	bl	8006424 <HAL_RCC_GetHCLKFreq>
 800646c:	4602      	mov	r2, r0
 800646e:	4b05      	ldr	r3, [pc, #20]	; (8006484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	0b5b      	lsrs	r3, r3, #13
 8006474:	f003 0307 	and.w	r3, r3, #7
 8006478:	4903      	ldr	r1, [pc, #12]	; (8006488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800647a:	5ccb      	ldrb	r3, [r1, r3]
 800647c:	fa22 f303 	lsr.w	r3, r2, r3
 8006480:	4618      	mov	r0, r3
 8006482:	bd80      	pop	{r7, pc}
 8006484:	40023800 	.word	0x40023800
 8006488:	0800c2dc 	.word	0x0800c2dc

0800648c <HAL_RCC_GetClockConfig>:
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	220f      	movs	r2, #15
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	4b12      	ldr	r3, [pc, #72]	; (80064e8 <HAL_RCC_GetClockConfig+0x5c>)
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f003 0203 	and.w	r2, r3, #3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	605a      	str	r2, [r3, #4]
 80064a8:	4b0f      	ldr	r3, [pc, #60]	; (80064e8 <HAL_RCC_GetClockConfig+0x5c>)
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	609a      	str	r2, [r3, #8]
 80064b4:	4b0c      	ldr	r3, [pc, #48]	; (80064e8 <HAL_RCC_GetClockConfig+0x5c>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	60da      	str	r2, [r3, #12]
 80064c0:	4b09      	ldr	r3, [pc, #36]	; (80064e8 <HAL_RCC_GetClockConfig+0x5c>)
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	08db      	lsrs	r3, r3, #3
 80064c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	611a      	str	r2, [r3, #16]
 80064ce:	4b07      	ldr	r3, [pc, #28]	; (80064ec <HAL_RCC_GetClockConfig+0x60>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0207 	and.w	r2, r3, #7
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	bf00      	nop
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	40023800 	.word	0x40023800
 80064ec:	40023c00 	.word	0x40023c00

080064f0 <HAL_SPI_Init>:
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <HAL_SPI_Init+0x12>
 80064fe:	2301      	movs	r3, #1
 8006500:	e07b      	b.n	80065fa <HAL_SPI_Init+0x10a>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006506:	2b00      	cmp	r3, #0
 8006508:	d108      	bne.n	800651c <HAL_SPI_Init+0x2c>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006512:	d009      	beq.n	8006528 <HAL_SPI_Init+0x38>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	61da      	str	r2, [r3, #28]
 800651a:	e005      	b.n	8006528 <HAL_SPI_Init+0x38>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	611a      	str	r2, [r3, #16]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	615a      	str	r2, [r3, #20]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	629a      	str	r2, [r3, #40]	; 0x28
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d106      	bne.n	8006548 <HAL_SPI_Init+0x58>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7fc fbde 	bl	8002d04 <HAL_SPI_MspInit>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006570:	431a      	orrs	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800657a:	431a      	orrs	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	431a      	orrs	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	431a      	orrs	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006598:	431a      	orrs	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065a2:	431a      	orrs	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ac:	ea42 0103 	orr.w	r1, r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	430a      	orrs	r2, r1
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	0c1b      	lsrs	r3, r3, #16
 80065c6:	f003 0104 	and.w	r1, r3, #4
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	f003 0210 	and.w	r2, r3, #16
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	605a      	str	r2, [r3, #4]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	69da      	ldr	r2, [r3, #28]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065e8:	61da      	str	r2, [r3, #28]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	655a      	str	r2, [r3, #84]	; 0x54
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80065f8:	2300      	movs	r3, #0
 80065fa:	4618      	mov	r0, r3
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <HAL_TIM_Base_Init>:
 8006602:	b580      	push	{r7, lr}
 8006604:	b082      	sub	sp, #8
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <HAL_TIM_Base_Init+0x12>
 8006610:	2301      	movs	r3, #1
 8006612:	e041      	b.n	8006698 <HAL_TIM_Base_Init+0x96>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	d106      	bne.n	800662e <HAL_TIM_Base_Init+0x2c>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7fc fbb3 	bl	8002d94 <HAL_TIM_Base_MspInit>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2202      	movs	r2, #2
 8006632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3304      	adds	r3, #4
 800663e:	4619      	mov	r1, r3
 8006640:	4610      	mov	r0, r2
 8006642:	f000 fbf5 	bl	8006e30 <TIM_Base_SetConfig>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006696:	2300      	movs	r3, #0
 8006698:	4618      	mov	r0, r3
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <HAL_TIM_Base_Start_IT>:
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d001      	beq.n	80066b8 <HAL_TIM_Base_Start_IT+0x18>
 80066b4:	2301      	movs	r3, #1
 80066b6:	e044      	b.n	8006742 <HAL_TIM_Base_Start_IT+0xa2>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2202      	movs	r2, #2
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f042 0201 	orr.w	r2, r2, #1
 80066ce:	60da      	str	r2, [r3, #12]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a1e      	ldr	r2, [pc, #120]	; (8006750 <HAL_TIM_Base_Start_IT+0xb0>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d018      	beq.n	800670c <HAL_TIM_Base_Start_IT+0x6c>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066e2:	d013      	beq.n	800670c <HAL_TIM_Base_Start_IT+0x6c>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a1a      	ldr	r2, [pc, #104]	; (8006754 <HAL_TIM_Base_Start_IT+0xb4>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d00e      	beq.n	800670c <HAL_TIM_Base_Start_IT+0x6c>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a19      	ldr	r2, [pc, #100]	; (8006758 <HAL_TIM_Base_Start_IT+0xb8>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d009      	beq.n	800670c <HAL_TIM_Base_Start_IT+0x6c>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a17      	ldr	r2, [pc, #92]	; (800675c <HAL_TIM_Base_Start_IT+0xbc>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d004      	beq.n	800670c <HAL_TIM_Base_Start_IT+0x6c>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a16      	ldr	r2, [pc, #88]	; (8006760 <HAL_TIM_Base_Start_IT+0xc0>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d111      	bne.n	8006730 <HAL_TIM_Base_Start_IT+0x90>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b06      	cmp	r3, #6
 800671c:	d010      	beq.n	8006740 <HAL_TIM_Base_Start_IT+0xa0>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f042 0201 	orr.w	r2, r2, #1
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	e007      	b.n	8006740 <HAL_TIM_Base_Start_IT+0xa0>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f042 0201 	orr.w	r2, r2, #1
 800673e:	601a      	str	r2, [r3, #0]
 8006740:	2300      	movs	r3, #0
 8006742:	4618      	mov	r0, r3
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	40010000 	.word	0x40010000
 8006754:	40000400 	.word	0x40000400
 8006758:	40000800 	.word	0x40000800
 800675c:	40000c00 	.word	0x40000c00
 8006760:	40014000 	.word	0x40014000

08006764 <HAL_TIM_PWM_Init>:
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <HAL_TIM_PWM_Init+0x12>
 8006772:	2301      	movs	r3, #1
 8006774:	e041      	b.n	80067fa <HAL_TIM_PWM_Init+0x96>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d106      	bne.n	8006790 <HAL_TIM_PWM_Init+0x2c>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f839 	bl	8006802 <HAL_TIM_PWM_MspInit>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3304      	adds	r3, #4
 80067a0:	4619      	mov	r1, r3
 80067a2:	4610      	mov	r0, r2
 80067a4:	f000 fb44 	bl	8006e30 <TIM_Base_SetConfig>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80067f8:	2300      	movs	r3, #0
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <HAL_TIM_PWM_MspInit>:
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <HAL_TIM_IRQHandler>:
 8006816:	b580      	push	{r7, lr}
 8006818:	b082      	sub	sp, #8
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	2b02      	cmp	r3, #2
 800682a:	d122      	bne.n	8006872 <HAL_TIM_IRQHandler+0x5c>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b02      	cmp	r3, #2
 8006838:	d11b      	bne.n	8006872 <HAL_TIM_IRQHandler+0x5c>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f06f 0202 	mvn.w	r2, #2
 8006842:	611a      	str	r2, [r3, #16]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	771a      	strb	r2, [r3, #28]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	f003 0303 	and.w	r3, r3, #3
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <HAL_TIM_IRQHandler+0x4a>
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fa78 	bl	8006d4e <HAL_TIM_IC_CaptureCallback>
 800685e:	e005      	b.n	800686c <HAL_TIM_IRQHandler+0x56>
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fa6a 	bl	8006d3a <HAL_TIM_OC_DelayElapsedCallback>
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fa7b 	bl	8006d62 <HAL_TIM_PWM_PulseFinishedCallback>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	771a      	strb	r2, [r3, #28]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	f003 0304 	and.w	r3, r3, #4
 800687c:	2b04      	cmp	r3, #4
 800687e:	d122      	bne.n	80068c6 <HAL_TIM_IRQHandler+0xb0>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f003 0304 	and.w	r3, r3, #4
 800688a:	2b04      	cmp	r3, #4
 800688c:	d11b      	bne.n	80068c6 <HAL_TIM_IRQHandler+0xb0>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f06f 0204 	mvn.w	r2, #4
 8006896:	611a      	str	r2, [r3, #16]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	771a      	strb	r2, [r3, #28]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <HAL_TIM_IRQHandler+0x9e>
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fa4e 	bl	8006d4e <HAL_TIM_IC_CaptureCallback>
 80068b2:	e005      	b.n	80068c0 <HAL_TIM_IRQHandler+0xaa>
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fa40 	bl	8006d3a <HAL_TIM_OC_DelayElapsedCallback>
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fa51 	bl	8006d62 <HAL_TIM_PWM_PulseFinishedCallback>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	771a      	strb	r2, [r3, #28]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	f003 0308 	and.w	r3, r3, #8
 80068d0:	2b08      	cmp	r3, #8
 80068d2:	d122      	bne.n	800691a <HAL_TIM_IRQHandler+0x104>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f003 0308 	and.w	r3, r3, #8
 80068de:	2b08      	cmp	r3, #8
 80068e0:	d11b      	bne.n	800691a <HAL_TIM_IRQHandler+0x104>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f06f 0208 	mvn.w	r2, #8
 80068ea:	611a      	str	r2, [r3, #16]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2204      	movs	r2, #4
 80068f0:	771a      	strb	r2, [r3, #28]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69db      	ldr	r3, [r3, #28]
 80068f8:	f003 0303 	and.w	r3, r3, #3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d003      	beq.n	8006908 <HAL_TIM_IRQHandler+0xf2>
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fa24 	bl	8006d4e <HAL_TIM_IC_CaptureCallback>
 8006906:	e005      	b.n	8006914 <HAL_TIM_IRQHandler+0xfe>
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fa16 	bl	8006d3a <HAL_TIM_OC_DelayElapsedCallback>
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fa27 	bl	8006d62 <HAL_TIM_PWM_PulseFinishedCallback>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	771a      	strb	r2, [r3, #28]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	f003 0310 	and.w	r3, r3, #16
 8006924:	2b10      	cmp	r3, #16
 8006926:	d122      	bne.n	800696e <HAL_TIM_IRQHandler+0x158>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	f003 0310 	and.w	r3, r3, #16
 8006932:	2b10      	cmp	r3, #16
 8006934:	d11b      	bne.n	800696e <HAL_TIM_IRQHandler+0x158>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f06f 0210 	mvn.w	r2, #16
 800693e:	611a      	str	r2, [r3, #16]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2208      	movs	r2, #8
 8006944:	771a      	strb	r2, [r3, #28]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006950:	2b00      	cmp	r3, #0
 8006952:	d003      	beq.n	800695c <HAL_TIM_IRQHandler+0x146>
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 f9fa 	bl	8006d4e <HAL_TIM_IC_CaptureCallback>
 800695a:	e005      	b.n	8006968 <HAL_TIM_IRQHandler+0x152>
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f9ec 	bl	8006d3a <HAL_TIM_OC_DelayElapsedCallback>
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f9fd 	bl	8006d62 <HAL_TIM_PWM_PulseFinishedCallback>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	771a      	strb	r2, [r3, #28]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b01      	cmp	r3, #1
 800697a:	d10e      	bne.n	800699a <HAL_TIM_IRQHandler+0x184>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b01      	cmp	r3, #1
 8006988:	d107      	bne.n	800699a <HAL_TIM_IRQHandler+0x184>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f06f 0201 	mvn.w	r2, #1
 8006992:	611a      	str	r2, [r3, #16]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7fc f929 	bl	8002bec <HAL_TIM_PeriodElapsedCallback>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a4:	2b80      	cmp	r3, #128	; 0x80
 80069a6:	d10e      	bne.n	80069c6 <HAL_TIM_IRQHandler+0x1b0>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b2:	2b80      	cmp	r3, #128	; 0x80
 80069b4:	d107      	bne.n	80069c6 <HAL_TIM_IRQHandler+0x1b0>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069be:	611a      	str	r2, [r3, #16]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fd79 	bl	80074b8 <HAL_TIMEx_BreakCallback>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d0:	2b40      	cmp	r3, #64	; 0x40
 80069d2:	d10e      	bne.n	80069f2 <HAL_TIM_IRQHandler+0x1dc>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069de:	2b40      	cmp	r3, #64	; 0x40
 80069e0:	d107      	bne.n	80069f2 <HAL_TIM_IRQHandler+0x1dc>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069ea:	611a      	str	r2, [r3, #16]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f9c2 	bl	8006d76 <HAL_TIM_TriggerCallback>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	f003 0320 	and.w	r3, r3, #32
 80069fc:	2b20      	cmp	r3, #32
 80069fe:	d10e      	bne.n	8006a1e <HAL_TIM_IRQHandler+0x208>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f003 0320 	and.w	r3, r3, #32
 8006a0a:	2b20      	cmp	r3, #32
 8006a0c:	d107      	bne.n	8006a1e <HAL_TIM_IRQHandler+0x208>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f06f 0220 	mvn.w	r2, #32
 8006a16:	611a      	str	r2, [r3, #16]
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 fd43 	bl	80074a4 <HAL_TIMEx_CommutCallback>
 8006a1e:	bf00      	nop
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
	...

08006a28 <HAL_TIM_PWM_ConfigChannel>:
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	2300      	movs	r3, #0
 8006a36:	75fb      	strb	r3, [r7, #23]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d101      	bne.n	8006a46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a42:	2302      	movs	r3, #2
 8006a44:	e0ae      	b.n	8006ba4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2b0c      	cmp	r3, #12
 8006a52:	f200 809f 	bhi.w	8006b94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006a56:	a201      	add	r2, pc, #4	; (adr r2, 8006a5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5c:	08006a91 	.word	0x08006a91
 8006a60:	08006b95 	.word	0x08006b95
 8006a64:	08006b95 	.word	0x08006b95
 8006a68:	08006b95 	.word	0x08006b95
 8006a6c:	08006ad1 	.word	0x08006ad1
 8006a70:	08006b95 	.word	0x08006b95
 8006a74:	08006b95 	.word	0x08006b95
 8006a78:	08006b95 	.word	0x08006b95
 8006a7c:	08006b13 	.word	0x08006b13
 8006a80:	08006b95 	.word	0x08006b95
 8006a84:	08006b95 	.word	0x08006b95
 8006a88:	08006b95 	.word	0x08006b95
 8006a8c:	08006b53 	.word	0x08006b53
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68b9      	ldr	r1, [r7, #8]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 fa4a 	bl	8006f30 <TIM_OC1_SetConfig>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	699a      	ldr	r2, [r3, #24]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f042 0208 	orr.w	r2, r2, #8
 8006aaa:	619a      	str	r2, [r3, #24]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	699a      	ldr	r2, [r3, #24]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0204 	bic.w	r2, r2, #4
 8006aba:	619a      	str	r2, [r3, #24]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6999      	ldr	r1, [r3, #24]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	691a      	ldr	r2, [r3, #16]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	619a      	str	r2, [r3, #24]
 8006ace:	e064      	b.n	8006b9a <HAL_TIM_PWM_ConfigChannel+0x172>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68b9      	ldr	r1, [r7, #8]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 fa90 	bl	8006ffc <TIM_OC2_SetConfig>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	699a      	ldr	r2, [r3, #24]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aea:	619a      	str	r2, [r3, #24]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	699a      	ldr	r2, [r3, #24]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006afa:	619a      	str	r2, [r3, #24]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6999      	ldr	r1, [r3, #24]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	021a      	lsls	r2, r3, #8
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	619a      	str	r2, [r3, #24]
 8006b10:	e043      	b.n	8006b9a <HAL_TIM_PWM_ConfigChannel+0x172>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68b9      	ldr	r1, [r7, #8]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 fadb 	bl	80070d4 <TIM_OC3_SetConfig>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69da      	ldr	r2, [r3, #28]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f042 0208 	orr.w	r2, r2, #8
 8006b2c:	61da      	str	r2, [r3, #28]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	69da      	ldr	r2, [r3, #28]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f022 0204 	bic.w	r2, r2, #4
 8006b3c:	61da      	str	r2, [r3, #28]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	69d9      	ldr	r1, [r3, #28]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	691a      	ldr	r2, [r3, #16]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	61da      	str	r2, [r3, #28]
 8006b50:	e023      	b.n	8006b9a <HAL_TIM_PWM_ConfigChannel+0x172>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68b9      	ldr	r1, [r7, #8]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 fb25 	bl	80071a8 <TIM_OC4_SetConfig>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	69da      	ldr	r2, [r3, #28]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b6c:	61da      	str	r2, [r3, #28]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	69da      	ldr	r2, [r3, #28]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b7c:	61da      	str	r2, [r3, #28]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	69d9      	ldr	r1, [r3, #28]
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	021a      	lsls	r2, r3, #8
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	61da      	str	r2, [r3, #28]
 8006b92:	e002      	b.n	8006b9a <HAL_TIM_PWM_ConfigChannel+0x172>
 8006b94:	2301      	movs	r3, #1
 8006b96:	75fb      	strb	r3, [r7, #23]
 8006b98:	bf00      	nop
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006ba2:	7dfb      	ldrb	r3, [r7, #23]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3718      	adds	r7, #24
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_TIM_ConfigClockSource>:
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	73fb      	strb	r3, [r7, #15]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d101      	bne.n	8006bc8 <HAL_TIM_ConfigClockSource+0x1c>
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	e0b4      	b.n	8006d32 <HAL_TIM_ConfigClockSource+0x186>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	60bb      	str	r3, [r7, #8]
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006be6:	60bb      	str	r3, [r7, #8]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bee:	60bb      	str	r3, [r7, #8]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	609a      	str	r2, [r3, #8]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c00:	d03e      	beq.n	8006c80 <HAL_TIM_ConfigClockSource+0xd4>
 8006c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c06:	f200 8087 	bhi.w	8006d18 <HAL_TIM_ConfigClockSource+0x16c>
 8006c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0e:	f000 8086 	beq.w	8006d1e <HAL_TIM_ConfigClockSource+0x172>
 8006c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c16:	d87f      	bhi.n	8006d18 <HAL_TIM_ConfigClockSource+0x16c>
 8006c18:	2b70      	cmp	r3, #112	; 0x70
 8006c1a:	d01a      	beq.n	8006c52 <HAL_TIM_ConfigClockSource+0xa6>
 8006c1c:	2b70      	cmp	r3, #112	; 0x70
 8006c1e:	d87b      	bhi.n	8006d18 <HAL_TIM_ConfigClockSource+0x16c>
 8006c20:	2b60      	cmp	r3, #96	; 0x60
 8006c22:	d050      	beq.n	8006cc6 <HAL_TIM_ConfigClockSource+0x11a>
 8006c24:	2b60      	cmp	r3, #96	; 0x60
 8006c26:	d877      	bhi.n	8006d18 <HAL_TIM_ConfigClockSource+0x16c>
 8006c28:	2b50      	cmp	r3, #80	; 0x50
 8006c2a:	d03c      	beq.n	8006ca6 <HAL_TIM_ConfigClockSource+0xfa>
 8006c2c:	2b50      	cmp	r3, #80	; 0x50
 8006c2e:	d873      	bhi.n	8006d18 <HAL_TIM_ConfigClockSource+0x16c>
 8006c30:	2b40      	cmp	r3, #64	; 0x40
 8006c32:	d058      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x13a>
 8006c34:	2b40      	cmp	r3, #64	; 0x40
 8006c36:	d86f      	bhi.n	8006d18 <HAL_TIM_ConfigClockSource+0x16c>
 8006c38:	2b30      	cmp	r3, #48	; 0x30
 8006c3a:	d064      	beq.n	8006d06 <HAL_TIM_ConfigClockSource+0x15a>
 8006c3c:	2b30      	cmp	r3, #48	; 0x30
 8006c3e:	d86b      	bhi.n	8006d18 <HAL_TIM_ConfigClockSource+0x16c>
 8006c40:	2b20      	cmp	r3, #32
 8006c42:	d060      	beq.n	8006d06 <HAL_TIM_ConfigClockSource+0x15a>
 8006c44:	2b20      	cmp	r3, #32
 8006c46:	d867      	bhi.n	8006d18 <HAL_TIM_ConfigClockSource+0x16c>
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d05c      	beq.n	8006d06 <HAL_TIM_ConfigClockSource+0x15a>
 8006c4c:	2b10      	cmp	r3, #16
 8006c4e:	d05a      	beq.n	8006d06 <HAL_TIM_ConfigClockSource+0x15a>
 8006c50:	e062      	b.n	8006d18 <HAL_TIM_ConfigClockSource+0x16c>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6818      	ldr	r0, [r3, #0]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	6899      	ldr	r1, [r3, #8]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	f000 fb6b 	bl	800733c <TIM_ETR_SetConfig>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	60bb      	str	r3, [r7, #8]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c74:	60bb      	str	r3, [r7, #8]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	609a      	str	r2, [r3, #8]
 8006c7e:	e04f      	b.n	8006d20 <HAL_TIM_ConfigClockSource+0x174>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6818      	ldr	r0, [r3, #0]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	6899      	ldr	r1, [r3, #8]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f000 fb54 	bl	800733c <TIM_ETR_SetConfig>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689a      	ldr	r2, [r3, #8]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ca2:	609a      	str	r2, [r3, #8]
 8006ca4:	e03c      	b.n	8006d20 <HAL_TIM_ConfigClockSource+0x174>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	6859      	ldr	r1, [r3, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	f000 fac8 	bl	8007248 <TIM_TI1_ConfigInputStage>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2150      	movs	r1, #80	; 0x50
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 fb21 	bl	8007306 <TIM_ITRx_SetConfig>
 8006cc4:	e02c      	b.n	8006d20 <HAL_TIM_ConfigClockSource+0x174>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6818      	ldr	r0, [r3, #0]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	6859      	ldr	r1, [r3, #4]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	f000 fae7 	bl	80072a6 <TIM_TI2_ConfigInputStage>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2160      	movs	r1, #96	; 0x60
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fb11 	bl	8007306 <TIM_ITRx_SetConfig>
 8006ce4:	e01c      	b.n	8006d20 <HAL_TIM_ConfigClockSource+0x174>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6818      	ldr	r0, [r3, #0]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	6859      	ldr	r1, [r3, #4]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	f000 faa8 	bl	8007248 <TIM_TI1_ConfigInputStage>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2140      	movs	r1, #64	; 0x40
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 fb01 	bl	8007306 <TIM_ITRx_SetConfig>
 8006d04:	e00c      	b.n	8006d20 <HAL_TIM_ConfigClockSource+0x174>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4619      	mov	r1, r3
 8006d10:	4610      	mov	r0, r2
 8006d12:	f000 faf8 	bl	8007306 <TIM_ITRx_SetConfig>
 8006d16:	e003      	b.n	8006d20 <HAL_TIM_ConfigClockSource+0x174>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	73fb      	strb	r3, [r7, #15]
 8006d1c:	e000      	b.n	8006d20 <HAL_TIM_ConfigClockSource+0x174>
 8006d1e:	bf00      	nop
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <HAL_TIM_OC_DelayElapsedCallback>:
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	bf00      	nop
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <HAL_TIM_IC_CaptureCallback>:
 8006d4e:	b480      	push	{r7}
 8006d50:	b083      	sub	sp, #12
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	bf00      	nop
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006d62:	b480      	push	{r7}
 8006d64:	b083      	sub	sp, #12
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	bf00      	nop
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <HAL_TIM_TriggerCallback>:
 8006d76:	b480      	push	{r7}
 8006d78:	b083      	sub	sp, #12
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	bf00      	nop
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <HAL_TIM_ErrorCallback>:
 8006d8a:	b480      	push	{r7}
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
 8006d92:	bf00      	nop
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <TIM_DMAError>:
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006daa:	60fb      	str	r3, [r7, #12]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d107      	bne.n	8006dc6 <TIM_DMAError+0x28>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2201      	movs	r2, #1
 8006dba:	771a      	strb	r2, [r3, #28]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dc4:	e02a      	b.n	8006e1c <TIM_DMAError+0x7e>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d107      	bne.n	8006de0 <TIM_DMAError+0x42>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	771a      	strb	r2, [r3, #28]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dde:	e01d      	b.n	8006e1c <TIM_DMAError+0x7e>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d107      	bne.n	8006dfa <TIM_DMAError+0x5c>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2204      	movs	r2, #4
 8006dee:	771a      	strb	r2, [r3, #28]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006df8:	e010      	b.n	8006e1c <TIM_DMAError+0x7e>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d107      	bne.n	8006e14 <TIM_DMAError+0x76>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2208      	movs	r2, #8
 8006e08:	771a      	strb	r2, [r3, #28]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e12:	e003      	b.n	8006e1c <TIM_DMAError+0x7e>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f7ff ffb4 	bl	8006d8a <HAL_TIM_ErrorCallback>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	771a      	strb	r2, [r3, #28]
 8006e28:	bf00      	nop
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <TIM_Base_SetConfig>:
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a34      	ldr	r2, [pc, #208]	; (8006f14 <TIM_Base_SetConfig+0xe4>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d00f      	beq.n	8006e68 <TIM_Base_SetConfig+0x38>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e4e:	d00b      	beq.n	8006e68 <TIM_Base_SetConfig+0x38>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a31      	ldr	r2, [pc, #196]	; (8006f18 <TIM_Base_SetConfig+0xe8>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d007      	beq.n	8006e68 <TIM_Base_SetConfig+0x38>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a30      	ldr	r2, [pc, #192]	; (8006f1c <TIM_Base_SetConfig+0xec>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d003      	beq.n	8006e68 <TIM_Base_SetConfig+0x38>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a2f      	ldr	r2, [pc, #188]	; (8006f20 <TIM_Base_SetConfig+0xf0>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d108      	bne.n	8006e7a <TIM_Base_SetConfig+0x4a>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6e:	60fb      	str	r3, [r7, #12]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a25      	ldr	r2, [pc, #148]	; (8006f14 <TIM_Base_SetConfig+0xe4>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d01b      	beq.n	8006eba <TIM_Base_SetConfig+0x8a>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e88:	d017      	beq.n	8006eba <TIM_Base_SetConfig+0x8a>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a22      	ldr	r2, [pc, #136]	; (8006f18 <TIM_Base_SetConfig+0xe8>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d013      	beq.n	8006eba <TIM_Base_SetConfig+0x8a>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a21      	ldr	r2, [pc, #132]	; (8006f1c <TIM_Base_SetConfig+0xec>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d00f      	beq.n	8006eba <TIM_Base_SetConfig+0x8a>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a20      	ldr	r2, [pc, #128]	; (8006f20 <TIM_Base_SetConfig+0xf0>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d00b      	beq.n	8006eba <TIM_Base_SetConfig+0x8a>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a1f      	ldr	r2, [pc, #124]	; (8006f24 <TIM_Base_SetConfig+0xf4>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d007      	beq.n	8006eba <TIM_Base_SetConfig+0x8a>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a1e      	ldr	r2, [pc, #120]	; (8006f28 <TIM_Base_SetConfig+0xf8>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d003      	beq.n	8006eba <TIM_Base_SetConfig+0x8a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a1d      	ldr	r2, [pc, #116]	; (8006f2c <TIM_Base_SetConfig+0xfc>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d108      	bne.n	8006ecc <TIM_Base_SetConfig+0x9c>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ec0:	60fb      	str	r3, [r7, #12]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	601a      	str	r2, [r3, #0]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	689a      	ldr	r2, [r3, #8]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	62da      	str	r2, [r3, #44]	; 0x2c
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	629a      	str	r2, [r3, #40]	; 0x28
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a08      	ldr	r2, [pc, #32]	; (8006f14 <TIM_Base_SetConfig+0xe4>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d103      	bne.n	8006f00 <TIM_Base_SetConfig+0xd0>
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	691a      	ldr	r2, [r3, #16]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	631a      	str	r2, [r3, #48]	; 0x30
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	615a      	str	r2, [r3, #20]
 8006f06:	bf00      	nop
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	40010000 	.word	0x40010000
 8006f18:	40000400 	.word	0x40000400
 8006f1c:	40000800 	.word	0x40000800
 8006f20:	40000c00 	.word	0x40000c00
 8006f24:	40014000 	.word	0x40014000
 8006f28:	40014400 	.word	0x40014400
 8006f2c:	40014800 	.word	0x40014800

08006f30 <TIM_OC1_SetConfig>:
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	f023 0201 	bic.w	r2, r3, #1
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	621a      	str	r2, [r3, #32]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	617b      	str	r3, [r7, #20]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	613b      	str	r3, [r7, #16]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	60fb      	str	r3, [r7, #12]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f5e:	60fb      	str	r3, [r7, #12]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f023 0303 	bic.w	r3, r3, #3
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	60fb      	str	r3, [r7, #12]
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f023 0302 	bic.w	r3, r3, #2
 8006f78:	617b      	str	r3, [r7, #20]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	617b      	str	r3, [r7, #20]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a1c      	ldr	r2, [pc, #112]	; (8006ff8 <TIM_OC1_SetConfig+0xc8>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d10c      	bne.n	8006fa6 <TIM_OC1_SetConfig+0x76>
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f023 0308 	bic.w	r3, r3, #8
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	617b      	str	r3, [r7, #20]
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f023 0304 	bic.w	r3, r3, #4
 8006fa4:	617b      	str	r3, [r7, #20]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a13      	ldr	r2, [pc, #76]	; (8006ff8 <TIM_OC1_SetConfig+0xc8>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d111      	bne.n	8006fd2 <TIM_OC1_SetConfig+0xa2>
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fb4:	613b      	str	r3, [r7, #16]
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fbc:	613b      	str	r3, [r7, #16]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	613b      	str	r3, [r7, #16]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	613b      	str	r3, [r7, #16]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	605a      	str	r2, [r3, #4]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	619a      	str	r2, [r3, #24]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	635a      	str	r2, [r3, #52]	; 0x34
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	621a      	str	r2, [r3, #32]
 8006fec:	bf00      	nop
 8006fee:	371c      	adds	r7, #28
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr
 8006ff8:	40010000 	.word	0x40010000

08006ffc <TIM_OC2_SetConfig>:
 8006ffc:	b480      	push	{r7}
 8006ffe:	b087      	sub	sp, #28
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	f023 0210 	bic.w	r2, r3, #16
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	621a      	str	r2, [r3, #32]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	617b      	str	r3, [r7, #20]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	613b      	str	r3, [r7, #16]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	60fb      	str	r3, [r7, #12]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800702a:	60fb      	str	r3, [r7, #12]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007032:	60fb      	str	r3, [r7, #12]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	021b      	lsls	r3, r3, #8
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	4313      	orrs	r3, r2
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f023 0320 	bic.w	r3, r3, #32
 8007046:	617b      	str	r3, [r7, #20]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	011b      	lsls	r3, r3, #4
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	4313      	orrs	r3, r2
 8007052:	617b      	str	r3, [r7, #20]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a1e      	ldr	r2, [pc, #120]	; (80070d0 <TIM_OC2_SetConfig+0xd4>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d10d      	bne.n	8007078 <TIM_OC2_SetConfig+0x7c>
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007062:	617b      	str	r3, [r7, #20]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	011b      	lsls	r3, r3, #4
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	4313      	orrs	r3, r2
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007076:	617b      	str	r3, [r7, #20]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a15      	ldr	r2, [pc, #84]	; (80070d0 <TIM_OC2_SetConfig+0xd4>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d113      	bne.n	80070a8 <TIM_OC2_SetConfig+0xac>
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007086:	613b      	str	r3, [r7, #16]
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800708e:	613b      	str	r3, [r7, #16]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	4313      	orrs	r3, r2
 800709a:	613b      	str	r3, [r7, #16]
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	613b      	str	r3, [r7, #16]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	605a      	str	r2, [r3, #4]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	619a      	str	r2, [r3, #24]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	639a      	str	r2, [r3, #56]	; 0x38
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	621a      	str	r2, [r3, #32]
 80070c2:	bf00      	nop
 80070c4:	371c      	adds	r7, #28
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	40010000 	.word	0x40010000

080070d4 <TIM_OC3_SetConfig>:
 80070d4:	b480      	push	{r7}
 80070d6:	b087      	sub	sp, #28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	621a      	str	r2, [r3, #32]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	617b      	str	r3, [r7, #20]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	613b      	str	r3, [r7, #16]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f023 0303 	bic.w	r3, r3, #3
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800711c:	617b      	str	r3, [r7, #20]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	021b      	lsls	r3, r3, #8
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	4313      	orrs	r3, r2
 8007128:	617b      	str	r3, [r7, #20]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a1d      	ldr	r2, [pc, #116]	; (80071a4 <TIM_OC3_SetConfig+0xd0>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d10d      	bne.n	800714e <TIM_OC3_SetConfig+0x7a>
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007138:	617b      	str	r3, [r7, #20]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	021b      	lsls	r3, r3, #8
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	4313      	orrs	r3, r2
 8007144:	617b      	str	r3, [r7, #20]
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800714c:	617b      	str	r3, [r7, #20]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a14      	ldr	r2, [pc, #80]	; (80071a4 <TIM_OC3_SetConfig+0xd0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d113      	bne.n	800717e <TIM_OC3_SetConfig+0xaa>
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800715c:	613b      	str	r3, [r7, #16]
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007164:	613b      	str	r3, [r7, #16]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	011b      	lsls	r3, r3, #4
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	4313      	orrs	r3, r2
 8007170:	613b      	str	r3, [r7, #16]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	011b      	lsls	r3, r3, #4
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	4313      	orrs	r3, r2
 800717c:	613b      	str	r3, [r7, #16]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	605a      	str	r2, [r3, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	61da      	str	r2, [r3, #28]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	63da      	str	r2, [r3, #60]	; 0x3c
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	621a      	str	r2, [r3, #32]
 8007198:	bf00      	nop
 800719a:	371c      	adds	r7, #28
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	40010000 	.word	0x40010000

080071a8 <TIM_OC4_SetConfig>:
 80071a8:	b480      	push	{r7}
 80071aa:	b087      	sub	sp, #28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	621a      	str	r2, [r3, #32]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	613b      	str	r3, [r7, #16]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	617b      	str	r3, [r7, #20]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	60fb      	str	r3, [r7, #12]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071d6:	60fb      	str	r3, [r7, #12]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071de:	60fb      	str	r3, [r7, #12]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	021b      	lsls	r3, r3, #8
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	60fb      	str	r3, [r7, #12]
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071f2:	613b      	str	r3, [r7, #16]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	031b      	lsls	r3, r3, #12
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	613b      	str	r3, [r7, #16]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a10      	ldr	r2, [pc, #64]	; (8007244 <TIM_OC4_SetConfig+0x9c>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d109      	bne.n	800721c <TIM_OC4_SetConfig+0x74>
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800720e:	617b      	str	r3, [r7, #20]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	695b      	ldr	r3, [r3, #20]
 8007214:	019b      	lsls	r3, r3, #6
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	4313      	orrs	r3, r2
 800721a:	617b      	str	r3, [r7, #20]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	605a      	str	r2, [r3, #4]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	61da      	str	r2, [r3, #28]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	641a      	str	r2, [r3, #64]	; 0x40
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	621a      	str	r2, [r3, #32]
 8007236:	bf00      	nop
 8007238:	371c      	adds	r7, #28
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	40010000 	.word	0x40010000

08007248 <TIM_TI1_ConfigInputStage>:
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6a1b      	ldr	r3, [r3, #32]
 8007258:	617b      	str	r3, [r7, #20]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	f023 0201 	bic.w	r2, r3, #1
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	621a      	str	r2, [r3, #32]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	613b      	str	r3, [r7, #16]
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007272:	613b      	str	r3, [r7, #16]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	011b      	lsls	r3, r3, #4
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	4313      	orrs	r3, r2
 800727c:	613b      	str	r3, [r7, #16]
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f023 030a 	bic.w	r3, r3, #10
 8007284:	617b      	str	r3, [r7, #20]
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	4313      	orrs	r3, r2
 800728c:	617b      	str	r3, [r7, #20]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	619a      	str	r2, [r3, #24]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	621a      	str	r2, [r3, #32]
 800729a:	bf00      	nop
 800729c:	371c      	adds	r7, #28
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <TIM_TI2_ConfigInputStage>:
 80072a6:	b480      	push	{r7}
 80072a8:	b087      	sub	sp, #28
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	60f8      	str	r0, [r7, #12]
 80072ae:	60b9      	str	r1, [r7, #8]
 80072b0:	607a      	str	r2, [r7, #4]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	f023 0210 	bic.w	r2, r3, #16
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	621a      	str	r2, [r3, #32]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	617b      	str	r3, [r7, #20]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	613b      	str	r3, [r7, #16]
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072d0:	617b      	str	r3, [r7, #20]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	031b      	lsls	r3, r3, #12
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	4313      	orrs	r3, r2
 80072da:	617b      	str	r3, [r7, #20]
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072e2:	613b      	str	r3, [r7, #16]
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	011b      	lsls	r3, r3, #4
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	613b      	str	r3, [r7, #16]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	619a      	str	r2, [r3, #24]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	621a      	str	r2, [r3, #32]
 80072fa:	bf00      	nop
 80072fc:	371c      	adds	r7, #28
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <TIM_ITRx_SetConfig>:
 8007306:	b480      	push	{r7}
 8007308:	b085      	sub	sp, #20
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	6039      	str	r1, [r7, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	60fb      	str	r3, [r7, #12]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800731c:	60fb      	str	r3, [r7, #12]
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4313      	orrs	r3, r2
 8007324:	f043 0307 	orr.w	r3, r3, #7
 8007328:	60fb      	str	r3, [r7, #12]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	609a      	str	r2, [r3, #8]
 8007330:	bf00      	nop
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <TIM_ETR_SetConfig>:
 800733c:	b480      	push	{r7}
 800733e:	b087      	sub	sp, #28
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
 8007348:	603b      	str	r3, [r7, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	617b      	str	r3, [r7, #20]
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	021a      	lsls	r2, r3, #8
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	431a      	orrs	r2, r3
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	4313      	orrs	r3, r2
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	4313      	orrs	r3, r2
 8007368:	617b      	str	r3, [r7, #20]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	609a      	str	r2, [r3, #8]
 8007370:	bf00      	nop
 8007372:	371c      	adds	r7, #28
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <TIM_CCxChannelCmd>:
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f003 031f 	and.w	r3, r3, #31
 800738e:	2201      	movs	r2, #1
 8007390:	fa02 f303 	lsl.w	r3, r2, r3
 8007394:	617b      	str	r3, [r7, #20]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6a1a      	ldr	r2, [r3, #32]
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	43db      	mvns	r3, r3
 800739e:	401a      	ands	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	621a      	str	r2, [r3, #32]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6a1a      	ldr	r2, [r3, #32]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f003 031f 	and.w	r3, r3, #31
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	fa01 f303 	lsl.w	r3, r1, r3
 80073b4:	431a      	orrs	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	621a      	str	r2, [r3, #32]
 80073ba:	bf00      	nop
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
	...

080073c8 <HAL_TIMEx_MasterConfigSynchronization>:
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d101      	bne.n	80073e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073dc:	2302      	movs	r3, #2
 80073de:	e050      	b.n	8007482 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	60bb      	str	r3, [r7, #8]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007406:	60fb      	str	r3, [r7, #12]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	4313      	orrs	r3, r2
 8007410:	60fb      	str	r3, [r7, #12]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	605a      	str	r2, [r3, #4]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a1c      	ldr	r2, [pc, #112]	; (8007490 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d018      	beq.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800742c:	d013      	beq.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a18      	ldr	r2, [pc, #96]	; (8007494 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d00e      	beq.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a16      	ldr	r2, [pc, #88]	; (8007498 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d009      	beq.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a15      	ldr	r2, [pc, #84]	; (800749c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d004      	beq.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a13      	ldr	r2, [pc, #76]	; (80074a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d10c      	bne.n	8007470 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800745c:	60bb      	str	r3, [r7, #8]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	4313      	orrs	r3, r2
 8007466:	60bb      	str	r3, [r7, #8]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	609a      	str	r2, [r3, #8]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007480:	2300      	movs	r3, #0
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	40010000 	.word	0x40010000
 8007494:	40000400 	.word	0x40000400
 8007498:	40000800 	.word	0x40000800
 800749c:	40000c00 	.word	0x40000c00
 80074a0:	40014000 	.word	0x40014000

080074a4 <HAL_TIMEx_CommutCallback>:
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <HAL_TIMEx_BreakCallback>:
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <__NVIC_SetPriority>:
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	4603      	mov	r3, r0
 80074d4:	6039      	str	r1, [r7, #0]
 80074d6:	71fb      	strb	r3, [r7, #7]
 80074d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	db0a      	blt.n	80074f6 <__NVIC_SetPriority+0x2a>
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	490c      	ldr	r1, [pc, #48]	; (8007518 <__NVIC_SetPriority+0x4c>)
 80074e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ea:	0112      	lsls	r2, r2, #4
 80074ec:	b2d2      	uxtb	r2, r2
 80074ee:	440b      	add	r3, r1
 80074f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80074f4:	e00a      	b.n	800750c <__NVIC_SetPriority+0x40>
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	b2da      	uxtb	r2, r3
 80074fa:	4908      	ldr	r1, [pc, #32]	; (800751c <__NVIC_SetPriority+0x50>)
 80074fc:	79fb      	ldrb	r3, [r7, #7]
 80074fe:	f003 030f 	and.w	r3, r3, #15
 8007502:	3b04      	subs	r3, #4
 8007504:	0112      	lsls	r2, r2, #4
 8007506:	b2d2      	uxtb	r2, r2
 8007508:	440b      	add	r3, r1
 800750a:	761a      	strb	r2, [r3, #24]
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr
 8007518:	e000e100 	.word	0xe000e100
 800751c:	e000ed00 	.word	0xe000ed00

08007520 <SysTick_Handler>:
 8007520:	b580      	push	{r7, lr}
 8007522:	af00      	add	r7, sp, #0
 8007524:	4b05      	ldr	r3, [pc, #20]	; (800753c <SysTick_Handler+0x1c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f002 f85a 	bl	80095e0 <xTaskGetSchedulerState>
 800752c:	4603      	mov	r3, r0
 800752e:	2b01      	cmp	r3, #1
 8007530:	d001      	beq.n	8007536 <SysTick_Handler+0x16>
 8007532:	f002 ff41 	bl	800a3b8 <xPortSysTickHandler>
 8007536:	bf00      	nop
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	e000e010 	.word	0xe000e010

08007540 <SVC_Setup>:
 8007540:	b580      	push	{r7, lr}
 8007542:	af00      	add	r7, sp, #0
 8007544:	2100      	movs	r1, #0
 8007546:	f06f 0004 	mvn.w	r0, #4
 800754a:	f7ff ffbf 	bl	80074cc <__NVIC_SetPriority>
 800754e:	bf00      	nop
 8007550:	bd80      	pop	{r7, pc}
	...

08007554 <osKernelInitialize>:
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	f3ef 8305 	mrs	r3, IPSR
 800755e:	603b      	str	r3, [r7, #0]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d003      	beq.n	800756e <osKernelInitialize+0x1a>
 8007566:	f06f 0305 	mvn.w	r3, #5
 800756a:	607b      	str	r3, [r7, #4]
 800756c:	e00c      	b.n	8007588 <osKernelInitialize+0x34>
 800756e:	4b0a      	ldr	r3, [pc, #40]	; (8007598 <osKernelInitialize+0x44>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d105      	bne.n	8007582 <osKernelInitialize+0x2e>
 8007576:	4b08      	ldr	r3, [pc, #32]	; (8007598 <osKernelInitialize+0x44>)
 8007578:	2201      	movs	r2, #1
 800757a:	601a      	str	r2, [r3, #0]
 800757c:	2300      	movs	r3, #0
 800757e:	607b      	str	r3, [r7, #4]
 8007580:	e002      	b.n	8007588 <osKernelInitialize+0x34>
 8007582:	f04f 33ff 	mov.w	r3, #4294967295
 8007586:	607b      	str	r3, [r7, #4]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4618      	mov	r0, r3
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	2000079c 	.word	0x2000079c

0800759c <osKernelStart>:
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	f3ef 8305 	mrs	r3, IPSR
 80075a6:	603b      	str	r3, [r7, #0]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <osKernelStart+0x1a>
 80075ae:	f06f 0305 	mvn.w	r3, #5
 80075b2:	607b      	str	r3, [r7, #4]
 80075b4:	e010      	b.n	80075d8 <osKernelStart+0x3c>
 80075b6:	4b0b      	ldr	r3, [pc, #44]	; (80075e4 <osKernelStart+0x48>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d109      	bne.n	80075d2 <osKernelStart+0x36>
 80075be:	f7ff ffbf 	bl	8007540 <SVC_Setup>
 80075c2:	4b08      	ldr	r3, [pc, #32]	; (80075e4 <osKernelStart+0x48>)
 80075c4:	2202      	movs	r2, #2
 80075c6:	601a      	str	r2, [r3, #0]
 80075c8:	f001 fb9e 	bl	8008d08 <vTaskStartScheduler>
 80075cc:	2300      	movs	r3, #0
 80075ce:	607b      	str	r3, [r7, #4]
 80075d0:	e002      	b.n	80075d8 <osKernelStart+0x3c>
 80075d2:	f04f 33ff 	mov.w	r3, #4294967295
 80075d6:	607b      	str	r3, [r7, #4]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4618      	mov	r0, r3
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	2000079c 	.word	0x2000079c

080075e8 <osThreadNew>:
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08e      	sub	sp, #56	; 0x38
 80075ec:	af04      	add	r7, sp, #16
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
 80075f4:	2300      	movs	r3, #0
 80075f6:	613b      	str	r3, [r7, #16]
 80075f8:	f3ef 8305 	mrs	r3, IPSR
 80075fc:	617b      	str	r3, [r7, #20]
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d17e      	bne.n	8007702 <osThreadNew+0x11a>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d07b      	beq.n	8007702 <osThreadNew+0x11a>
 800760a:	2380      	movs	r3, #128	; 0x80
 800760c:	623b      	str	r3, [r7, #32]
 800760e:	2318      	movs	r3, #24
 8007610:	61fb      	str	r3, [r7, #28]
 8007612:	2300      	movs	r3, #0
 8007614:	627b      	str	r3, [r7, #36]	; 0x24
 8007616:	f04f 33ff 	mov.w	r3, #4294967295
 800761a:	61bb      	str	r3, [r7, #24]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d045      	beq.n	80076ae <osThreadNew+0xc6>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d002      	beq.n	8007630 <osThreadNew+0x48>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	627b      	str	r3, [r7, #36]	; 0x24
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d002      	beq.n	800763e <osThreadNew+0x56>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	61fb      	str	r3, [r7, #28]
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d008      	beq.n	8007656 <osThreadNew+0x6e>
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	2b38      	cmp	r3, #56	; 0x38
 8007648:	d805      	bhi.n	8007656 <osThreadNew+0x6e>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <osThreadNew+0x72>
 8007656:	2300      	movs	r3, #0
 8007658:	e054      	b.n	8007704 <osThreadNew+0x11c>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <osThreadNew+0x82>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	089b      	lsrs	r3, r3, #2
 8007668:	623b      	str	r3, [r7, #32]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00e      	beq.n	8007690 <osThreadNew+0xa8>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	2bbb      	cmp	r3, #187	; 0xbb
 8007678:	d90a      	bls.n	8007690 <osThreadNew+0xa8>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d006      	beq.n	8007690 <osThreadNew+0xa8>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d002      	beq.n	8007690 <osThreadNew+0xa8>
 800768a:	2301      	movs	r3, #1
 800768c:	61bb      	str	r3, [r7, #24]
 800768e:	e010      	b.n	80076b2 <osThreadNew+0xca>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10c      	bne.n	80076b2 <osThreadNew+0xca>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d108      	bne.n	80076b2 <osThreadNew+0xca>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d104      	bne.n	80076b2 <osThreadNew+0xca>
 80076a8:	2300      	movs	r3, #0
 80076aa:	61bb      	str	r3, [r7, #24]
 80076ac:	e001      	b.n	80076b2 <osThreadNew+0xca>
 80076ae:	2300      	movs	r3, #0
 80076b0:	61bb      	str	r3, [r7, #24]
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d110      	bne.n	80076da <osThreadNew+0xf2>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	6892      	ldr	r2, [r2, #8]
 80076c0:	9202      	str	r2, [sp, #8]
 80076c2:	9301      	str	r3, [sp, #4]
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	6a3a      	ldr	r2, [r7, #32]
 80076cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f001 f92e 	bl	8008930 <xTaskCreateStatic>
 80076d4:	4603      	mov	r3, r0
 80076d6:	613b      	str	r3, [r7, #16]
 80076d8:	e013      	b.n	8007702 <osThreadNew+0x11a>
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d110      	bne.n	8007702 <osThreadNew+0x11a>
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	f107 0310 	add.w	r3, r7, #16
 80076e8:	9301      	str	r3, [sp, #4]
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f001 f979 	bl	80089ea <xTaskCreate>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d001      	beq.n	8007702 <osThreadNew+0x11a>
 80076fe:	2300      	movs	r3, #0
 8007700:	613b      	str	r3, [r7, #16]
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	4618      	mov	r0, r3
 8007706:	3728      	adds	r7, #40	; 0x28
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <osDelay>:
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	f3ef 8305 	mrs	r3, IPSR
 8007718:	60bb      	str	r3, [r7, #8]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d003      	beq.n	8007728 <osDelay+0x1c>
 8007720:	f06f 0305 	mvn.w	r3, #5
 8007724:	60fb      	str	r3, [r7, #12]
 8007726:	e007      	b.n	8007738 <osDelay+0x2c>
 8007728:	2300      	movs	r3, #0
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d002      	beq.n	8007738 <osDelay+0x2c>
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f001 fab4 	bl	8008ca0 <vTaskDelay>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <osMutexNew>:
 8007742:	b580      	push	{r7, lr}
 8007744:	b088      	sub	sp, #32
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	2300      	movs	r3, #0
 800774c:	61fb      	str	r3, [r7, #28]
 800774e:	f3ef 8305 	mrs	r3, IPSR
 8007752:	60bb      	str	r3, [r7, #8]
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d174      	bne.n	8007844 <osMutexNew+0x102>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d003      	beq.n	8007768 <osMutexNew+0x26>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	61bb      	str	r3, [r7, #24]
 8007766:	e001      	b.n	800776c <osMutexNew+0x2a>
 8007768:	2300      	movs	r3, #0
 800776a:	61bb      	str	r3, [r7, #24]
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b00      	cmp	r3, #0
 8007774:	d002      	beq.n	800777c <osMutexNew+0x3a>
 8007776:	2301      	movs	r3, #1
 8007778:	617b      	str	r3, [r7, #20]
 800777a:	e001      	b.n	8007780 <osMutexNew+0x3e>
 800777c:	2300      	movs	r3, #0
 800777e:	617b      	str	r3, [r7, #20]
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	f003 0308 	and.w	r3, r3, #8
 8007786:	2b00      	cmp	r3, #0
 8007788:	d15c      	bne.n	8007844 <osMutexNew+0x102>
 800778a:	f04f 33ff 	mov.w	r3, #4294967295
 800778e:	613b      	str	r3, [r7, #16]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d015      	beq.n	80077c2 <osMutexNew+0x80>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d006      	beq.n	80077ac <osMutexNew+0x6a>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	2b4f      	cmp	r3, #79	; 0x4f
 80077a4:	d902      	bls.n	80077ac <osMutexNew+0x6a>
 80077a6:	2301      	movs	r3, #1
 80077a8:	613b      	str	r3, [r7, #16]
 80077aa:	e00c      	b.n	80077c6 <osMutexNew+0x84>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d108      	bne.n	80077c6 <osMutexNew+0x84>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d104      	bne.n	80077c6 <osMutexNew+0x84>
 80077bc:	2300      	movs	r3, #0
 80077be:	613b      	str	r3, [r7, #16]
 80077c0:	e001      	b.n	80077c6 <osMutexNew+0x84>
 80077c2:	2300      	movs	r3, #0
 80077c4:	613b      	str	r3, [r7, #16]
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d112      	bne.n	80077f2 <osMutexNew+0xb0>
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d007      	beq.n	80077e2 <osMutexNew+0xa0>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	4619      	mov	r1, r3
 80077d8:	2004      	movs	r0, #4
 80077da:	f000 fb18 	bl	8007e0e <xQueueCreateMutexStatic>
 80077de:	61f8      	str	r0, [r7, #28]
 80077e0:	e016      	b.n	8007810 <osMutexNew+0xce>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	4619      	mov	r1, r3
 80077e8:	2001      	movs	r0, #1
 80077ea:	f000 fb10 	bl	8007e0e <xQueueCreateMutexStatic>
 80077ee:	61f8      	str	r0, [r7, #28]
 80077f0:	e00e      	b.n	8007810 <osMutexNew+0xce>
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10b      	bne.n	8007810 <osMutexNew+0xce>
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d004      	beq.n	8007808 <osMutexNew+0xc6>
 80077fe:	2004      	movs	r0, #4
 8007800:	f000 faed 	bl	8007dde <xQueueCreateMutex>
 8007804:	61f8      	str	r0, [r7, #28]
 8007806:	e003      	b.n	8007810 <osMutexNew+0xce>
 8007808:	2001      	movs	r0, #1
 800780a:	f000 fae8 	bl	8007dde <xQueueCreateMutex>
 800780e:	61f8      	str	r0, [r7, #28]
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00c      	beq.n	8007830 <osMutexNew+0xee>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d003      	beq.n	8007824 <osMutexNew+0xe2>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	60fb      	str	r3, [r7, #12]
 8007822:	e001      	b.n	8007828 <osMutexNew+0xe6>
 8007824:	2300      	movs	r3, #0
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	68f9      	ldr	r1, [r7, #12]
 800782a:	69f8      	ldr	r0, [r7, #28]
 800782c:	f001 f822 	bl	8008874 <vQueueAddToRegistry>
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d006      	beq.n	8007844 <osMutexNew+0x102>
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <osMutexNew+0x102>
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	f043 0301 	orr.w	r3, r3, #1
 8007842:	61fb      	str	r3, [r7, #28]
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	4618      	mov	r0, r3
 8007848:	3720      	adds	r7, #32
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <osMutexAcquire>:
 800784e:	b580      	push	{r7, lr}
 8007850:	b086      	sub	sp, #24
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	6039      	str	r1, [r7, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f023 0301 	bic.w	r3, r3, #1
 800785e:	613b      	str	r3, [r7, #16]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	60fb      	str	r3, [r7, #12]
 8007868:	2300      	movs	r3, #0
 800786a:	617b      	str	r3, [r7, #20]
 800786c:	f3ef 8305 	mrs	r3, IPSR
 8007870:	60bb      	str	r3, [r7, #8]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d003      	beq.n	8007880 <osMutexAcquire+0x32>
 8007878:	f06f 0305 	mvn.w	r3, #5
 800787c:	617b      	str	r3, [r7, #20]
 800787e:	e02c      	b.n	80078da <osMutexAcquire+0x8c>
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d103      	bne.n	800788e <osMutexAcquire+0x40>
 8007886:	f06f 0303 	mvn.w	r3, #3
 800788a:	617b      	str	r3, [r7, #20]
 800788c:	e025      	b.n	80078da <osMutexAcquire+0x8c>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d011      	beq.n	80078b8 <osMutexAcquire+0x6a>
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6938      	ldr	r0, [r7, #16]
 8007898:	f000 fb08 	bl	8007eac <xQueueTakeMutexRecursive>
 800789c:	4603      	mov	r3, r0
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d01b      	beq.n	80078da <osMutexAcquire+0x8c>
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d003      	beq.n	80078b0 <osMutexAcquire+0x62>
 80078a8:	f06f 0301 	mvn.w	r3, #1
 80078ac:	617b      	str	r3, [r7, #20]
 80078ae:	e014      	b.n	80078da <osMutexAcquire+0x8c>
 80078b0:	f06f 0302 	mvn.w	r3, #2
 80078b4:	617b      	str	r3, [r7, #20]
 80078b6:	e010      	b.n	80078da <osMutexAcquire+0x8c>
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	6938      	ldr	r0, [r7, #16]
 80078bc:	f000 fda6 	bl	800840c <xQueueSemaphoreTake>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d009      	beq.n	80078da <osMutexAcquire+0x8c>
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <osMutexAcquire+0x86>
 80078cc:	f06f 0301 	mvn.w	r3, #1
 80078d0:	617b      	str	r3, [r7, #20]
 80078d2:	e002      	b.n	80078da <osMutexAcquire+0x8c>
 80078d4:	f06f 0302 	mvn.w	r3, #2
 80078d8:	617b      	str	r3, [r7, #20]
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	4618      	mov	r0, r3
 80078de:	3718      	adds	r7, #24
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <osMutexRelease>:
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b086      	sub	sp, #24
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f023 0301 	bic.w	r3, r3, #1
 80078f2:	613b      	str	r3, [r7, #16]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	2300      	movs	r3, #0
 80078fe:	617b      	str	r3, [r7, #20]
 8007900:	f3ef 8305 	mrs	r3, IPSR
 8007904:	60bb      	str	r3, [r7, #8]
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d003      	beq.n	8007914 <osMutexRelease+0x30>
 800790c:	f06f 0305 	mvn.w	r3, #5
 8007910:	617b      	str	r3, [r7, #20]
 8007912:	e01f      	b.n	8007954 <osMutexRelease+0x70>
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d103      	bne.n	8007922 <osMutexRelease+0x3e>
 800791a:	f06f 0303 	mvn.w	r3, #3
 800791e:	617b      	str	r3, [r7, #20]
 8007920:	e018      	b.n	8007954 <osMutexRelease+0x70>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d009      	beq.n	800793c <osMutexRelease+0x58>
 8007928:	6938      	ldr	r0, [r7, #16]
 800792a:	f000 fa8b 	bl	8007e44 <xQueueGiveMutexRecursive>
 800792e:	4603      	mov	r3, r0
 8007930:	2b01      	cmp	r3, #1
 8007932:	d00f      	beq.n	8007954 <osMutexRelease+0x70>
 8007934:	f06f 0302 	mvn.w	r3, #2
 8007938:	617b      	str	r3, [r7, #20]
 800793a:	e00b      	b.n	8007954 <osMutexRelease+0x70>
 800793c:	2300      	movs	r3, #0
 800793e:	2200      	movs	r2, #0
 8007940:	2100      	movs	r1, #0
 8007942:	6938      	ldr	r0, [r7, #16]
 8007944:	f000 fae8 	bl	8007f18 <xQueueGenericSend>
 8007948:	4603      	mov	r3, r0
 800794a:	2b01      	cmp	r3, #1
 800794c:	d002      	beq.n	8007954 <osMutexRelease+0x70>
 800794e:	f06f 0302 	mvn.w	r3, #2
 8007952:	617b      	str	r3, [r7, #20]
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	4618      	mov	r0, r3
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
	...

08007960 <vApplicationGetIdleTaskMemory>:
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	4a07      	ldr	r2, [pc, #28]	; (800798c <vApplicationGetIdleTaskMemory+0x2c>)
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	4a06      	ldr	r2, [pc, #24]	; (8007990 <vApplicationGetIdleTaskMemory+0x30>)
 8007976:	601a      	str	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2280      	movs	r2, #128	; 0x80
 800797c:	601a      	str	r2, [r3, #0]
 800797e:	bf00      	nop
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	200007a0 	.word	0x200007a0
 8007990:	2000085c 	.word	0x2000085c

08007994 <vApplicationGetTimerTaskMemory>:
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	607a      	str	r2, [r7, #4]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	4a07      	ldr	r2, [pc, #28]	; (80079c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	4a06      	ldr	r2, [pc, #24]	; (80079c4 <vApplicationGetTimerTaskMemory+0x30>)
 80079aa:	601a      	str	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	bf00      	nop
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	20000a5c 	.word	0x20000a5c
 80079c4:	20000b18 	.word	0x20000b18

080079c8 <vListInitialise>:
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f103 0208 	add.w	r2, r3, #8
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	605a      	str	r2, [r3, #4]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f04f 32ff 	mov.w	r2, #4294967295
 80079e0:	609a      	str	r2, [r3, #8]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f103 0208 	add.w	r2, r3, #8
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	60da      	str	r2, [r3, #12]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f103 0208 	add.w	r2, r3, #8
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	611a      	str	r2, [r3, #16]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	601a      	str	r2, [r3, #0]
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <vListInitialiseItem>:
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	611a      	str	r2, [r3, #16]
 8007a16:	bf00      	nop
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <vListInsertEnd>:
 8007a22:	b480      	push	{r7}
 8007a24:	b085      	sub	sp, #20
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	6039      	str	r1, [r7, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	60fb      	str	r3, [r7, #12]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	605a      	str	r2, [r3, #4]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	689a      	ldr	r2, [r3, #8]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	609a      	str	r2, [r3, #8]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	605a      	str	r2, [r3, #4]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	609a      	str	r2, [r3, #8]
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	611a      	str	r2, [r3, #16]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	1c5a      	adds	r2, r3, #1
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	bf00      	nop
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <vListInsert>:
 8007a6a:	b480      	push	{r7}
 8007a6c:	b085      	sub	sp, #20
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
 8007a72:	6039      	str	r1, [r7, #0]
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	60bb      	str	r3, [r7, #8]
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a80:	d103      	bne.n	8007a8a <vListInsert+0x20>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	60fb      	str	r3, [r7, #12]
 8007a88:	e00c      	b.n	8007aa4 <vListInsert+0x3a>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	3308      	adds	r3, #8
 8007a8e:	60fb      	str	r3, [r7, #12]
 8007a90:	e002      	b.n	8007a98 <vListInsert+0x2e>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	60fb      	str	r3, [r7, #12]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d2f6      	bcs.n	8007a92 <vListInsert+0x28>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	685a      	ldr	r2, [r3, #4]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	605a      	str	r2, [r3, #4]
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	683a      	ldr	r2, [r7, #0]
 8007ab2:	609a      	str	r2, [r3, #8]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	609a      	str	r2, [r3, #8]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	683a      	ldr	r2, [r7, #0]
 8007abe:	605a      	str	r2, [r3, #4]
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	611a      	str	r2, [r3, #16]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	1c5a      	adds	r2, r3, #1
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	bf00      	nop
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <uxListRemove>:
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	60fb      	str	r3, [r7, #12]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	6892      	ldr	r2, [r2, #8]
 8007af2:	609a      	str	r2, [r3, #8]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	6852      	ldr	r2, [r2, #4]
 8007afc:	605a      	str	r2, [r3, #4]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d103      	bne.n	8007b10 <uxListRemove+0x34>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	689a      	ldr	r2, [r3, #8]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	605a      	str	r2, [r3, #4]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	611a      	str	r2, [r3, #16]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	1e5a      	subs	r2, r3, #1
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	601a      	str	r2, [r3, #0]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4618      	mov	r0, r3
 8007b26:	3714      	adds	r7, #20
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <xQueueGenericReset>:
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	60fb      	str	r3, [r7, #12]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10a      	bne.n	8007b5a <xQueueGenericReset+0x2a>
 8007b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	60bb      	str	r3, [r7, #8]
 8007b56:	bf00      	nop
 8007b58:	e7fe      	b.n	8007b58 <xQueueGenericReset+0x28>
 8007b5a:	f002 fb9b 	bl	800a294 <vPortEnterCritical>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b66:	68f9      	ldr	r1, [r7, #12]
 8007b68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b6a:	fb01 f303 	mul.w	r3, r1, r3
 8007b6e:	441a      	add	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	609a      	str	r2, [r3, #8]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	639a      	str	r2, [r3, #56]	; 0x38
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	605a      	str	r2, [r3, #4]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	68f9      	ldr	r1, [r7, #12]
 8007b8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b90:	fb01 f303 	mul.w	r3, r1, r3
 8007b94:	441a      	add	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	60da      	str	r2, [r3, #12]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	22ff      	movs	r2, #255	; 0xff
 8007b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	22ff      	movs	r2, #255	; 0xff
 8007ba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d114      	bne.n	8007bda <xQueueGenericReset+0xaa>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01a      	beq.n	8007bee <xQueueGenericReset+0xbe>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	3310      	adds	r3, #16
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f001 fb3d 	bl	800923c <xTaskRemoveFromEventList>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d012      	beq.n	8007bee <xQueueGenericReset+0xbe>
 8007bc8:	4b0c      	ldr	r3, [pc, #48]	; (8007bfc <xQueueGenericReset+0xcc>)
 8007bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bce:	601a      	str	r2, [r3, #0]
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	e009      	b.n	8007bee <xQueueGenericReset+0xbe>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	3310      	adds	r3, #16
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7ff fef2 	bl	80079c8 <vListInitialise>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	3324      	adds	r3, #36	; 0x24
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7ff feed 	bl	80079c8 <vListInitialise>
 8007bee:	f002 fb81 	bl	800a2f4 <vPortExitCritical>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	e000ed04 	.word	0xe000ed04

08007c00 <xQueueGenericCreateStatic>:
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b08e      	sub	sp, #56	; 0x38
 8007c04:	af02      	add	r7, sp, #8
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
 8007c0c:	603b      	str	r3, [r7, #0]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10a      	bne.n	8007c2a <xQueueGenericCreateStatic+0x2a>
 8007c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c26:	bf00      	nop
 8007c28:	e7fe      	b.n	8007c28 <xQueueGenericCreateStatic+0x28>
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10a      	bne.n	8007c46 <xQueueGenericCreateStatic+0x46>
 8007c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	627b      	str	r3, [r7, #36]	; 0x24
 8007c42:	bf00      	nop
 8007c44:	e7fe      	b.n	8007c44 <xQueueGenericCreateStatic+0x44>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d002      	beq.n	8007c52 <xQueueGenericCreateStatic+0x52>
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <xQueueGenericCreateStatic+0x56>
 8007c52:	2301      	movs	r3, #1
 8007c54:	e000      	b.n	8007c58 <xQueueGenericCreateStatic+0x58>
 8007c56:	2300      	movs	r3, #0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10a      	bne.n	8007c72 <xQueueGenericCreateStatic+0x72>
 8007c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	623b      	str	r3, [r7, #32]
 8007c6e:	bf00      	nop
 8007c70:	e7fe      	b.n	8007c70 <xQueueGenericCreateStatic+0x70>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d102      	bne.n	8007c7e <xQueueGenericCreateStatic+0x7e>
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <xQueueGenericCreateStatic+0x82>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e000      	b.n	8007c84 <xQueueGenericCreateStatic+0x84>
 8007c82:	2300      	movs	r3, #0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10a      	bne.n	8007c9e <xQueueGenericCreateStatic+0x9e>
 8007c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8c:	f383 8811 	msr	BASEPRI, r3
 8007c90:	f3bf 8f6f 	isb	sy
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	61fb      	str	r3, [r7, #28]
 8007c9a:	bf00      	nop
 8007c9c:	e7fe      	b.n	8007c9c <xQueueGenericCreateStatic+0x9c>
 8007c9e:	2350      	movs	r3, #80	; 0x50
 8007ca0:	617b      	str	r3, [r7, #20]
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2b50      	cmp	r3, #80	; 0x50
 8007ca6:	d00a      	beq.n	8007cbe <xQueueGenericCreateStatic+0xbe>
 8007ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cac:	f383 8811 	msr	BASEPRI, r3
 8007cb0:	f3bf 8f6f 	isb	sy
 8007cb4:	f3bf 8f4f 	dsb	sy
 8007cb8:	61bb      	str	r3, [r7, #24]
 8007cba:	bf00      	nop
 8007cbc:	e7fe      	b.n	8007cbc <xQueueGenericCreateStatic+0xbc>
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00d      	beq.n	8007ce6 <xQueueGenericCreateStatic+0xe6>
 8007cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007cd2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	68b9      	ldr	r1, [r7, #8]
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f000 f83f 	bl	8007d64 <prvInitialiseNewQueue>
 8007ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3730      	adds	r7, #48	; 0x30
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <xQueueGenericCreate>:
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b08a      	sub	sp, #40	; 0x28
 8007cf4:	af02      	add	r7, sp, #8
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	71fb      	strb	r3, [r7, #7]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10a      	bne.n	8007d1a <xQueueGenericCreate+0x2a>
 8007d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	613b      	str	r3, [r7, #16]
 8007d16:	bf00      	nop
 8007d18:	e7fe      	b.n	8007d18 <xQueueGenericCreate+0x28>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	fb02 f303 	mul.w	r3, r2, r3
 8007d22:	61fb      	str	r3, [r7, #28]
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	3350      	adds	r3, #80	; 0x50
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f002 fbd5 	bl	800a4d8 <pvPortMalloc>
 8007d2e:	61b8      	str	r0, [r7, #24]
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d011      	beq.n	8007d5a <xQueueGenericCreate+0x6a>
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	617b      	str	r3, [r7, #20]
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	3350      	adds	r3, #80	; 0x50
 8007d3e:	617b      	str	r3, [r7, #20]
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d48:	79fa      	ldrb	r2, [r7, #7]
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	68b9      	ldr	r1, [r7, #8]
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 f805 	bl	8007d64 <prvInitialiseNewQueue>
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3720      	adds	r7, #32
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <prvInitialiseNewQueue>:
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	70fb      	strb	r3, [r7, #3]
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d103      	bne.n	8007d80 <prvInitialiseNewQueue+0x1c>
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	e002      	b.n	8007d86 <prvInitialiseNewQueue+0x22>
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	601a      	str	r2, [r3, #0]
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	641a      	str	r2, [r3, #64]	; 0x40
 8007d92:	2101      	movs	r1, #1
 8007d94:	69b8      	ldr	r0, [r7, #24]
 8007d96:	f7ff fecb 	bl	8007b30 <xQueueGenericReset>
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	78fa      	ldrb	r2, [r7, #3]
 8007d9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8007da2:	bf00      	nop
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <prvInitialiseMutex>:
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00e      	beq.n	8007dd6 <prvInitialiseMutex+0x2c>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	609a      	str	r2, [r3, #8]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	60da      	str	r2, [r3, #12]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	2200      	movs	r2, #0
 8007dce:	2100      	movs	r1, #0
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f8a1 	bl	8007f18 <xQueueGenericSend>
 8007dd6:	bf00      	nop
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <xQueueCreateMutex>:
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b086      	sub	sp, #24
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	4603      	mov	r3, r0
 8007de6:	71fb      	strb	r3, [r7, #7]
 8007de8:	2301      	movs	r3, #1
 8007dea:	617b      	str	r3, [r7, #20]
 8007dec:	2300      	movs	r3, #0
 8007dee:	613b      	str	r3, [r7, #16]
 8007df0:	79fb      	ldrb	r3, [r7, #7]
 8007df2:	461a      	mov	r2, r3
 8007df4:	6939      	ldr	r1, [r7, #16]
 8007df6:	6978      	ldr	r0, [r7, #20]
 8007df8:	f7ff ff7a 	bl	8007cf0 <xQueueGenericCreate>
 8007dfc:	60f8      	str	r0, [r7, #12]
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f7ff ffd3 	bl	8007daa <prvInitialiseMutex>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	4618      	mov	r0, r3
 8007e08:	3718      	adds	r7, #24
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <xQueueCreateMutexStatic>:
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b088      	sub	sp, #32
 8007e12:	af02      	add	r7, sp, #8
 8007e14:	4603      	mov	r3, r0
 8007e16:	6039      	str	r1, [r7, #0]
 8007e18:	71fb      	strb	r3, [r7, #7]
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	617b      	str	r3, [r7, #20]
 8007e1e:	2300      	movs	r3, #0
 8007e20:	613b      	str	r3, [r7, #16]
 8007e22:	79fb      	ldrb	r3, [r7, #7]
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	6939      	ldr	r1, [r7, #16]
 8007e2c:	6978      	ldr	r0, [r7, #20]
 8007e2e:	f7ff fee7 	bl	8007c00 <xQueueGenericCreateStatic>
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f7ff ffb8 	bl	8007daa <prvInitialiseMutex>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3718      	adds	r7, #24
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <xQueueGiveMutexRecursive>:
 8007e44:	b590      	push	{r4, r7, lr}
 8007e46:	b087      	sub	sp, #28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	613b      	str	r3, [r7, #16]
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10a      	bne.n	8007e6c <xQueueGiveMutexRecursive+0x28>
 8007e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	bf00      	nop
 8007e6a:	e7fe      	b.n	8007e6a <xQueueGiveMutexRecursive+0x26>
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	689c      	ldr	r4, [r3, #8]
 8007e70:	f001 fba6 	bl	80095c0 <xTaskGetCurrentTaskHandle>
 8007e74:	4603      	mov	r3, r0
 8007e76:	429c      	cmp	r4, r3
 8007e78:	d111      	bne.n	8007e9e <xQueueGiveMutexRecursive+0x5a>
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	1e5a      	subs	r2, r3, #1
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	60da      	str	r2, [r3, #12]
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d105      	bne.n	8007e98 <xQueueGiveMutexRecursive+0x54>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	2200      	movs	r2, #0
 8007e90:	2100      	movs	r1, #0
 8007e92:	6938      	ldr	r0, [r7, #16]
 8007e94:	f000 f840 	bl	8007f18 <xQueueGenericSend>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	617b      	str	r3, [r7, #20]
 8007e9c:	e001      	b.n	8007ea2 <xQueueGiveMutexRecursive+0x5e>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	617b      	str	r3, [r7, #20]
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	371c      	adds	r7, #28
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd90      	pop	{r4, r7, pc}

08007eac <xQueueTakeMutexRecursive>:
 8007eac:	b590      	push	{r4, r7, lr}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	613b      	str	r3, [r7, #16]
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10a      	bne.n	8007ed6 <xQueueTakeMutexRecursive+0x2a>
 8007ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	60fb      	str	r3, [r7, #12]
 8007ed2:	bf00      	nop
 8007ed4:	e7fe      	b.n	8007ed4 <xQueueTakeMutexRecursive+0x28>
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	689c      	ldr	r4, [r3, #8]
 8007eda:	f001 fb71 	bl	80095c0 <xTaskGetCurrentTaskHandle>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	429c      	cmp	r4, r3
 8007ee2:	d107      	bne.n	8007ef4 <xQueueTakeMutexRecursive+0x48>
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	1c5a      	adds	r2, r3, #1
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	60da      	str	r2, [r3, #12]
 8007eee:	2301      	movs	r3, #1
 8007ef0:	617b      	str	r3, [r7, #20]
 8007ef2:	e00c      	b.n	8007f0e <xQueueTakeMutexRecursive+0x62>
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6938      	ldr	r0, [r7, #16]
 8007ef8:	f000 fa88 	bl	800840c <xQueueSemaphoreTake>
 8007efc:	6178      	str	r0, [r7, #20]
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d004      	beq.n	8007f0e <xQueueTakeMutexRecursive+0x62>
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	1c5a      	adds	r2, r3, #1
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	60da      	str	r2, [r3, #12]
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	4618      	mov	r0, r3
 8007f12:	371c      	adds	r7, #28
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd90      	pop	{r4, r7, pc}

08007f18 <xQueueGenericSend>:
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b08e      	sub	sp, #56	; 0x38
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
 8007f24:	603b      	str	r3, [r7, #0]
 8007f26:	2300      	movs	r3, #0
 8007f28:	637b      	str	r3, [r7, #52]	; 0x34
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10a      	bne.n	8007f4a <xQueueGenericSend+0x32>
 8007f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f38:	f383 8811 	msr	BASEPRI, r3
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f46:	bf00      	nop
 8007f48:	e7fe      	b.n	8007f48 <xQueueGenericSend+0x30>
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d103      	bne.n	8007f58 <xQueueGenericSend+0x40>
 8007f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d101      	bne.n	8007f5c <xQueueGenericSend+0x44>
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e000      	b.n	8007f5e <xQueueGenericSend+0x46>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10a      	bne.n	8007f78 <xQueueGenericSend+0x60>
 8007f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f66:	f383 8811 	msr	BASEPRI, r3
 8007f6a:	f3bf 8f6f 	isb	sy
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	627b      	str	r3, [r7, #36]	; 0x24
 8007f74:	bf00      	nop
 8007f76:	e7fe      	b.n	8007f76 <xQueueGenericSend+0x5e>
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d103      	bne.n	8007f86 <xQueueGenericSend+0x6e>
 8007f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d101      	bne.n	8007f8a <xQueueGenericSend+0x72>
 8007f86:	2301      	movs	r3, #1
 8007f88:	e000      	b.n	8007f8c <xQueueGenericSend+0x74>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10a      	bne.n	8007fa6 <xQueueGenericSend+0x8e>
 8007f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	623b      	str	r3, [r7, #32]
 8007fa2:	bf00      	nop
 8007fa4:	e7fe      	b.n	8007fa4 <xQueueGenericSend+0x8c>
 8007fa6:	f001 fb1b 	bl	80095e0 <xTaskGetSchedulerState>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d102      	bne.n	8007fb6 <xQueueGenericSend+0x9e>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <xQueueGenericSend+0xa2>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e000      	b.n	8007fbc <xQueueGenericSend+0xa4>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10a      	bne.n	8007fd6 <xQueueGenericSend+0xbe>
 8007fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc4:	f383 8811 	msr	BASEPRI, r3
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	61fb      	str	r3, [r7, #28]
 8007fd2:	bf00      	nop
 8007fd4:	e7fe      	b.n	8007fd4 <xQueueGenericSend+0xbc>
 8007fd6:	f002 f95d 	bl	800a294 <vPortEnterCritical>
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d302      	bcc.n	8007fec <xQueueGenericSend+0xd4>
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d129      	bne.n	8008040 <xQueueGenericSend+0x128>
 8007fec:	683a      	ldr	r2, [r7, #0]
 8007fee:	68b9      	ldr	r1, [r7, #8]
 8007ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ff2:	f000 fb2f 	bl	8008654 <prvCopyDataToQueue>
 8007ff6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d010      	beq.n	8008022 <xQueueGenericSend+0x10a>
 8008000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008002:	3324      	adds	r3, #36	; 0x24
 8008004:	4618      	mov	r0, r3
 8008006:	f001 f919 	bl	800923c <xTaskRemoveFromEventList>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d013      	beq.n	8008038 <xQueueGenericSend+0x120>
 8008010:	4b3f      	ldr	r3, [pc, #252]	; (8008110 <xQueueGenericSend+0x1f8>)
 8008012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008016:	601a      	str	r2, [r3, #0]
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	e00a      	b.n	8008038 <xQueueGenericSend+0x120>
 8008022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008024:	2b00      	cmp	r3, #0
 8008026:	d007      	beq.n	8008038 <xQueueGenericSend+0x120>
 8008028:	4b39      	ldr	r3, [pc, #228]	; (8008110 <xQueueGenericSend+0x1f8>)
 800802a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800802e:	601a      	str	r2, [r3, #0]
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f002 f95c 	bl	800a2f4 <vPortExitCritical>
 800803c:	2301      	movs	r3, #1
 800803e:	e063      	b.n	8008108 <xQueueGenericSend+0x1f0>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d103      	bne.n	800804e <xQueueGenericSend+0x136>
 8008046:	f002 f955 	bl	800a2f4 <vPortExitCritical>
 800804a:	2300      	movs	r3, #0
 800804c:	e05c      	b.n	8008108 <xQueueGenericSend+0x1f0>
 800804e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008050:	2b00      	cmp	r3, #0
 8008052:	d106      	bne.n	8008062 <xQueueGenericSend+0x14a>
 8008054:	f107 0314 	add.w	r3, r7, #20
 8008058:	4618      	mov	r0, r3
 800805a:	f001 f953 	bl	8009304 <vTaskInternalSetTimeOutState>
 800805e:	2301      	movs	r3, #1
 8008060:	637b      	str	r3, [r7, #52]	; 0x34
 8008062:	f002 f947 	bl	800a2f4 <vPortExitCritical>
 8008066:	f000 febf 	bl	8008de8 <vTaskSuspendAll>
 800806a:	f002 f913 	bl	800a294 <vPortEnterCritical>
 800806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008070:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008074:	b25b      	sxtb	r3, r3
 8008076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807a:	d103      	bne.n	8008084 <xQueueGenericSend+0x16c>
 800807c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800808a:	b25b      	sxtb	r3, r3
 800808c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008090:	d103      	bne.n	800809a <xQueueGenericSend+0x182>
 8008092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800809a:	f002 f92b 	bl	800a2f4 <vPortExitCritical>
 800809e:	1d3a      	adds	r2, r7, #4
 80080a0:	f107 0314 	add.w	r3, r7, #20
 80080a4:	4611      	mov	r1, r2
 80080a6:	4618      	mov	r0, r3
 80080a8:	f001 f942 	bl	8009330 <xTaskCheckForTimeOut>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d124      	bne.n	80080fc <xQueueGenericSend+0x1e4>
 80080b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080b4:	f000 fbc6 	bl	8008844 <prvIsQueueFull>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d018      	beq.n	80080f0 <xQueueGenericSend+0x1d8>
 80080be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c0:	3310      	adds	r3, #16
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	4611      	mov	r1, r2
 80080c6:	4618      	mov	r0, r3
 80080c8:	f001 f868 	bl	800919c <vTaskPlaceOnEventList>
 80080cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080ce:	f000 fb51 	bl	8008774 <prvUnlockQueue>
 80080d2:	f000 fe97 	bl	8008e04 <xTaskResumeAll>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f47f af7c 	bne.w	8007fd6 <xQueueGenericSend+0xbe>
 80080de:	4b0c      	ldr	r3, [pc, #48]	; (8008110 <xQueueGenericSend+0x1f8>)
 80080e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080e4:	601a      	str	r2, [r3, #0]
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	e772      	b.n	8007fd6 <xQueueGenericSend+0xbe>
 80080f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080f2:	f000 fb3f 	bl	8008774 <prvUnlockQueue>
 80080f6:	f000 fe85 	bl	8008e04 <xTaskResumeAll>
 80080fa:	e76c      	b.n	8007fd6 <xQueueGenericSend+0xbe>
 80080fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080fe:	f000 fb39 	bl	8008774 <prvUnlockQueue>
 8008102:	f000 fe7f 	bl	8008e04 <xTaskResumeAll>
 8008106:	2300      	movs	r3, #0
 8008108:	4618      	mov	r0, r3
 800810a:	3738      	adds	r7, #56	; 0x38
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	e000ed04 	.word	0xe000ed04

08008114 <xQueueGenericSendFromISR>:
 8008114:	b580      	push	{r7, lr}
 8008116:	b090      	sub	sp, #64	; 0x40
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
 8008120:	603b      	str	r3, [r7, #0]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	63bb      	str	r3, [r7, #56]	; 0x38
 8008126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10a      	bne.n	8008142 <xQueueGenericSendFromISR+0x2e>
 800812c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	62bb      	str	r3, [r7, #40]	; 0x28
 800813e:	bf00      	nop
 8008140:	e7fe      	b.n	8008140 <xQueueGenericSendFromISR+0x2c>
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d103      	bne.n	8008150 <xQueueGenericSendFromISR+0x3c>
 8008148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <xQueueGenericSendFromISR+0x40>
 8008150:	2301      	movs	r3, #1
 8008152:	e000      	b.n	8008156 <xQueueGenericSendFromISR+0x42>
 8008154:	2300      	movs	r3, #0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10a      	bne.n	8008170 <xQueueGenericSendFromISR+0x5c>
 800815a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815e:	f383 8811 	msr	BASEPRI, r3
 8008162:	f3bf 8f6f 	isb	sy
 8008166:	f3bf 8f4f 	dsb	sy
 800816a:	627b      	str	r3, [r7, #36]	; 0x24
 800816c:	bf00      	nop
 800816e:	e7fe      	b.n	800816e <xQueueGenericSendFromISR+0x5a>
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	2b02      	cmp	r3, #2
 8008174:	d103      	bne.n	800817e <xQueueGenericSendFromISR+0x6a>
 8008176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817a:	2b01      	cmp	r3, #1
 800817c:	d101      	bne.n	8008182 <xQueueGenericSendFromISR+0x6e>
 800817e:	2301      	movs	r3, #1
 8008180:	e000      	b.n	8008184 <xQueueGenericSendFromISR+0x70>
 8008182:	2300      	movs	r3, #0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10a      	bne.n	800819e <xQueueGenericSendFromISR+0x8a>
 8008188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	623b      	str	r3, [r7, #32]
 800819a:	bf00      	nop
 800819c:	e7fe      	b.n	800819c <xQueueGenericSendFromISR+0x88>
 800819e:	f002 f95b 	bl	800a458 <vPortValidateInterruptPriority>
 80081a2:	f3ef 8211 	mrs	r2, BASEPRI
 80081a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081aa:	f383 8811 	msr	BASEPRI, r3
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	61fa      	str	r2, [r7, #28]
 80081b8:	61bb      	str	r3, [r7, #24]
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	637b      	str	r3, [r7, #52]	; 0x34
 80081be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d302      	bcc.n	80081d0 <xQueueGenericSendFromISR+0xbc>
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d12f      	bne.n	8008230 <xQueueGenericSendFromISR+0x11c>
 80081d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081e0:	683a      	ldr	r2, [r7, #0]
 80081e2:	68b9      	ldr	r1, [r7, #8]
 80081e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081e6:	f000 fa35 	bl	8008654 <prvCopyDataToQueue>
 80081ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80081ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f2:	d112      	bne.n	800821a <xQueueGenericSendFromISR+0x106>
 80081f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d016      	beq.n	800822a <xQueueGenericSendFromISR+0x116>
 80081fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fe:	3324      	adds	r3, #36	; 0x24
 8008200:	4618      	mov	r0, r3
 8008202:	f001 f81b 	bl	800923c <xTaskRemoveFromEventList>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00e      	beq.n	800822a <xQueueGenericSendFromISR+0x116>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00b      	beq.n	800822a <xQueueGenericSendFromISR+0x116>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	e007      	b.n	800822a <xQueueGenericSendFromISR+0x116>
 800821a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800821e:	3301      	adds	r3, #1
 8008220:	b2db      	uxtb	r3, r3
 8008222:	b25a      	sxtb	r2, r3
 8008224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800822a:	2301      	movs	r3, #1
 800822c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800822e:	e001      	b.n	8008234 <xQueueGenericSendFromISR+0x120>
 8008230:	2300      	movs	r3, #0
 8008232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008236:	617b      	str	r3, [r7, #20]
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	f383 8811 	msr	BASEPRI, r3
 800823e:	bf00      	nop
 8008240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008242:	4618      	mov	r0, r3
 8008244:	3740      	adds	r7, #64	; 0x40
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
	...

0800824c <xQueueReceive>:
 800824c:	b580      	push	{r7, lr}
 800824e:	b08c      	sub	sp, #48	; 0x30
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
 8008258:	2300      	movs	r3, #0
 800825a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10a      	bne.n	800827c <xQueueReceive+0x30>
 8008266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	623b      	str	r3, [r7, #32]
 8008278:	bf00      	nop
 800827a:	e7fe      	b.n	800827a <xQueueReceive+0x2e>
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d103      	bne.n	800828a <xQueueReceive+0x3e>
 8008282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <xQueueReceive+0x42>
 800828a:	2301      	movs	r3, #1
 800828c:	e000      	b.n	8008290 <xQueueReceive+0x44>
 800828e:	2300      	movs	r3, #0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10a      	bne.n	80082aa <xQueueReceive+0x5e>
 8008294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	61fb      	str	r3, [r7, #28]
 80082a6:	bf00      	nop
 80082a8:	e7fe      	b.n	80082a8 <xQueueReceive+0x5c>
 80082aa:	f001 f999 	bl	80095e0 <xTaskGetSchedulerState>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d102      	bne.n	80082ba <xQueueReceive+0x6e>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d101      	bne.n	80082be <xQueueReceive+0x72>
 80082ba:	2301      	movs	r3, #1
 80082bc:	e000      	b.n	80082c0 <xQueueReceive+0x74>
 80082be:	2300      	movs	r3, #0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10a      	bne.n	80082da <xQueueReceive+0x8e>
 80082c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c8:	f383 8811 	msr	BASEPRI, r3
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	61bb      	str	r3, [r7, #24]
 80082d6:	bf00      	nop
 80082d8:	e7fe      	b.n	80082d8 <xQueueReceive+0x8c>
 80082da:	f001 ffdb 	bl	800a294 <vPortEnterCritical>
 80082de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e2:	627b      	str	r3, [r7, #36]	; 0x24
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d01f      	beq.n	800832a <xQueueReceive+0xde>
 80082ea:	68b9      	ldr	r1, [r7, #8]
 80082ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082ee:	f000 fa1b 	bl	8008728 <prvCopyDataFromQueue>
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f4:	1e5a      	subs	r2, r3, #1
 80082f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f8:	639a      	str	r2, [r3, #56]	; 0x38
 80082fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00f      	beq.n	8008322 <xQueueReceive+0xd6>
 8008302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008304:	3310      	adds	r3, #16
 8008306:	4618      	mov	r0, r3
 8008308:	f000 ff98 	bl	800923c <xTaskRemoveFromEventList>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d007      	beq.n	8008322 <xQueueReceive+0xd6>
 8008312:	4b3d      	ldr	r3, [pc, #244]	; (8008408 <xQueueReceive+0x1bc>)
 8008314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008318:	601a      	str	r2, [r3, #0]
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	f001 ffe7 	bl	800a2f4 <vPortExitCritical>
 8008326:	2301      	movs	r3, #1
 8008328:	e069      	b.n	80083fe <xQueueReceive+0x1b2>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d103      	bne.n	8008338 <xQueueReceive+0xec>
 8008330:	f001 ffe0 	bl	800a2f4 <vPortExitCritical>
 8008334:	2300      	movs	r3, #0
 8008336:	e062      	b.n	80083fe <xQueueReceive+0x1b2>
 8008338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833a:	2b00      	cmp	r3, #0
 800833c:	d106      	bne.n	800834c <xQueueReceive+0x100>
 800833e:	f107 0310 	add.w	r3, r7, #16
 8008342:	4618      	mov	r0, r3
 8008344:	f000 ffde 	bl	8009304 <vTaskInternalSetTimeOutState>
 8008348:	2301      	movs	r3, #1
 800834a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800834c:	f001 ffd2 	bl	800a2f4 <vPortExitCritical>
 8008350:	f000 fd4a 	bl	8008de8 <vTaskSuspendAll>
 8008354:	f001 ff9e 	bl	800a294 <vPortEnterCritical>
 8008358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800835e:	b25b      	sxtb	r3, r3
 8008360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008364:	d103      	bne.n	800836e <xQueueReceive+0x122>
 8008366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008368:	2200      	movs	r2, #0
 800836a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800836e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008370:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008374:	b25b      	sxtb	r3, r3
 8008376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800837a:	d103      	bne.n	8008384 <xQueueReceive+0x138>
 800837c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837e:	2200      	movs	r2, #0
 8008380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008384:	f001 ffb6 	bl	800a2f4 <vPortExitCritical>
 8008388:	1d3a      	adds	r2, r7, #4
 800838a:	f107 0310 	add.w	r3, r7, #16
 800838e:	4611      	mov	r1, r2
 8008390:	4618      	mov	r0, r3
 8008392:	f000 ffcd 	bl	8009330 <xTaskCheckForTimeOut>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d123      	bne.n	80083e4 <xQueueReceive+0x198>
 800839c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800839e:	f000 fa3b 	bl	8008818 <prvIsQueueEmpty>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d017      	beq.n	80083d8 <xQueueReceive+0x18c>
 80083a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083aa:	3324      	adds	r3, #36	; 0x24
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	4611      	mov	r1, r2
 80083b0:	4618      	mov	r0, r3
 80083b2:	f000 fef3 	bl	800919c <vTaskPlaceOnEventList>
 80083b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083b8:	f000 f9dc 	bl	8008774 <prvUnlockQueue>
 80083bc:	f000 fd22 	bl	8008e04 <xTaskResumeAll>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d189      	bne.n	80082da <xQueueReceive+0x8e>
 80083c6:	4b10      	ldr	r3, [pc, #64]	; (8008408 <xQueueReceive+0x1bc>)
 80083c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	e780      	b.n	80082da <xQueueReceive+0x8e>
 80083d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083da:	f000 f9cb 	bl	8008774 <prvUnlockQueue>
 80083de:	f000 fd11 	bl	8008e04 <xTaskResumeAll>
 80083e2:	e77a      	b.n	80082da <xQueueReceive+0x8e>
 80083e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083e6:	f000 f9c5 	bl	8008774 <prvUnlockQueue>
 80083ea:	f000 fd0b 	bl	8008e04 <xTaskResumeAll>
 80083ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083f0:	f000 fa12 	bl	8008818 <prvIsQueueEmpty>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f43f af6f 	beq.w	80082da <xQueueReceive+0x8e>
 80083fc:	2300      	movs	r3, #0
 80083fe:	4618      	mov	r0, r3
 8008400:	3730      	adds	r7, #48	; 0x30
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	e000ed04 	.word	0xe000ed04

0800840c <xQueueSemaphoreTake>:
 800840c:	b580      	push	{r7, lr}
 800840e:	b08e      	sub	sp, #56	; 0x38
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
 8008416:	2300      	movs	r3, #0
 8008418:	637b      	str	r3, [r7, #52]	; 0x34
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800841e:	2300      	movs	r3, #0
 8008420:	633b      	str	r3, [r7, #48]	; 0x30
 8008422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008424:	2b00      	cmp	r3, #0
 8008426:	d10a      	bne.n	800843e <xQueueSemaphoreTake+0x32>
 8008428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	623b      	str	r3, [r7, #32]
 800843a:	bf00      	nop
 800843c:	e7fe      	b.n	800843c <xQueueSemaphoreTake+0x30>
 800843e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00a      	beq.n	800845c <xQueueSemaphoreTake+0x50>
 8008446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844a:	f383 8811 	msr	BASEPRI, r3
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	61fb      	str	r3, [r7, #28]
 8008458:	bf00      	nop
 800845a:	e7fe      	b.n	800845a <xQueueSemaphoreTake+0x4e>
 800845c:	f001 f8c0 	bl	80095e0 <xTaskGetSchedulerState>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d102      	bne.n	800846c <xQueueSemaphoreTake+0x60>
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d101      	bne.n	8008470 <xQueueSemaphoreTake+0x64>
 800846c:	2301      	movs	r3, #1
 800846e:	e000      	b.n	8008472 <xQueueSemaphoreTake+0x66>
 8008470:	2300      	movs	r3, #0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10a      	bne.n	800848c <xQueueSemaphoreTake+0x80>
 8008476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	61bb      	str	r3, [r7, #24]
 8008488:	bf00      	nop
 800848a:	e7fe      	b.n	800848a <xQueueSemaphoreTake+0x7e>
 800848c:	f001 ff02 	bl	800a294 <vPortEnterCritical>
 8008490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008494:	62bb      	str	r3, [r7, #40]	; 0x28
 8008496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008498:	2b00      	cmp	r3, #0
 800849a:	d024      	beq.n	80084e6 <xQueueSemaphoreTake+0xda>
 800849c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849e:	1e5a      	subs	r2, r3, #1
 80084a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a2:	639a      	str	r2, [r3, #56]	; 0x38
 80084a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d104      	bne.n	80084b6 <xQueueSemaphoreTake+0xaa>
 80084ac:	f001 fa0e 	bl	80098cc <pvTaskIncrementMutexHeldCount>
 80084b0:	4602      	mov	r2, r0
 80084b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b4:	609a      	str	r2, [r3, #8]
 80084b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00f      	beq.n	80084de <xQueueSemaphoreTake+0xd2>
 80084be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c0:	3310      	adds	r3, #16
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 feba 	bl	800923c <xTaskRemoveFromEventList>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d007      	beq.n	80084de <xQueueSemaphoreTake+0xd2>
 80084ce:	4b54      	ldr	r3, [pc, #336]	; (8008620 <xQueueSemaphoreTake+0x214>)
 80084d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084d4:	601a      	str	r2, [r3, #0]
 80084d6:	f3bf 8f4f 	dsb	sy
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	f001 ff09 	bl	800a2f4 <vPortExitCritical>
 80084e2:	2301      	movs	r3, #1
 80084e4:	e097      	b.n	8008616 <xQueueSemaphoreTake+0x20a>
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d111      	bne.n	8008510 <xQueueSemaphoreTake+0x104>
 80084ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00a      	beq.n	8008508 <xQueueSemaphoreTake+0xfc>
 80084f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	617b      	str	r3, [r7, #20]
 8008504:	bf00      	nop
 8008506:	e7fe      	b.n	8008506 <xQueueSemaphoreTake+0xfa>
 8008508:	f001 fef4 	bl	800a2f4 <vPortExitCritical>
 800850c:	2300      	movs	r3, #0
 800850e:	e082      	b.n	8008616 <xQueueSemaphoreTake+0x20a>
 8008510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008512:	2b00      	cmp	r3, #0
 8008514:	d106      	bne.n	8008524 <xQueueSemaphoreTake+0x118>
 8008516:	f107 030c 	add.w	r3, r7, #12
 800851a:	4618      	mov	r0, r3
 800851c:	f000 fef2 	bl	8009304 <vTaskInternalSetTimeOutState>
 8008520:	2301      	movs	r3, #1
 8008522:	637b      	str	r3, [r7, #52]	; 0x34
 8008524:	f001 fee6 	bl	800a2f4 <vPortExitCritical>
 8008528:	f000 fc5e 	bl	8008de8 <vTaskSuspendAll>
 800852c:	f001 feb2 	bl	800a294 <vPortEnterCritical>
 8008530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008532:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008536:	b25b      	sxtb	r3, r3
 8008538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800853c:	d103      	bne.n	8008546 <xQueueSemaphoreTake+0x13a>
 800853e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008548:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800854c:	b25b      	sxtb	r3, r3
 800854e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008552:	d103      	bne.n	800855c <xQueueSemaphoreTake+0x150>
 8008554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008556:	2200      	movs	r2, #0
 8008558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800855c:	f001 feca 	bl	800a2f4 <vPortExitCritical>
 8008560:	463a      	mov	r2, r7
 8008562:	f107 030c 	add.w	r3, r7, #12
 8008566:	4611      	mov	r1, r2
 8008568:	4618      	mov	r0, r3
 800856a:	f000 fee1 	bl	8009330 <xTaskCheckForTimeOut>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d132      	bne.n	80085da <xQueueSemaphoreTake+0x1ce>
 8008574:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008576:	f000 f94f 	bl	8008818 <prvIsQueueEmpty>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d026      	beq.n	80085ce <xQueueSemaphoreTake+0x1c2>
 8008580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d109      	bne.n	800859c <xQueueSemaphoreTake+0x190>
 8008588:	f001 fe84 	bl	800a294 <vPortEnterCritical>
 800858c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	4618      	mov	r0, r3
 8008592:	f001 f843 	bl	800961c <xTaskPriorityInherit>
 8008596:	6338      	str	r0, [r7, #48]	; 0x30
 8008598:	f001 feac 	bl	800a2f4 <vPortExitCritical>
 800859c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859e:	3324      	adds	r3, #36	; 0x24
 80085a0:	683a      	ldr	r2, [r7, #0]
 80085a2:	4611      	mov	r1, r2
 80085a4:	4618      	mov	r0, r3
 80085a6:	f000 fdf9 	bl	800919c <vTaskPlaceOnEventList>
 80085aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085ac:	f000 f8e2 	bl	8008774 <prvUnlockQueue>
 80085b0:	f000 fc28 	bl	8008e04 <xTaskResumeAll>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f47f af68 	bne.w	800848c <xQueueSemaphoreTake+0x80>
 80085bc:	4b18      	ldr	r3, [pc, #96]	; (8008620 <xQueueSemaphoreTake+0x214>)
 80085be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	e75e      	b.n	800848c <xQueueSemaphoreTake+0x80>
 80085ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085d0:	f000 f8d0 	bl	8008774 <prvUnlockQueue>
 80085d4:	f000 fc16 	bl	8008e04 <xTaskResumeAll>
 80085d8:	e758      	b.n	800848c <xQueueSemaphoreTake+0x80>
 80085da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085dc:	f000 f8ca 	bl	8008774 <prvUnlockQueue>
 80085e0:	f000 fc10 	bl	8008e04 <xTaskResumeAll>
 80085e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085e6:	f000 f917 	bl	8008818 <prvIsQueueEmpty>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f43f af4d 	beq.w	800848c <xQueueSemaphoreTake+0x80>
 80085f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00d      	beq.n	8008614 <xQueueSemaphoreTake+0x208>
 80085f8:	f001 fe4c 	bl	800a294 <vPortEnterCritical>
 80085fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085fe:	f000 f811 	bl	8008624 <prvGetDisinheritPriorityAfterTimeout>
 8008602:	6278      	str	r0, [r7, #36]	; 0x24
 8008604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800860a:	4618      	mov	r0, r3
 800860c:	f001 f8dc 	bl	80097c8 <vTaskPriorityDisinheritAfterTimeout>
 8008610:	f001 fe70 	bl	800a2f4 <vPortExitCritical>
 8008614:	2300      	movs	r3, #0
 8008616:	4618      	mov	r0, r3
 8008618:	3738      	adds	r7, #56	; 0x38
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	e000ed04 	.word	0xe000ed04

08008624 <prvGetDisinheritPriorityAfterTimeout>:
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008630:	2b00      	cmp	r3, #0
 8008632:	d006      	beq.n	8008642 <prvGetDisinheritPriorityAfterTimeout+0x1e>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800863e:	60fb      	str	r3, [r7, #12]
 8008640:	e001      	b.n	8008646 <prvGetDisinheritPriorityAfterTimeout+0x22>
 8008642:	2300      	movs	r3, #0
 8008644:	60fb      	str	r3, [r7, #12]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	4618      	mov	r0, r3
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <prvCopyDataToQueue>:
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
 8008660:	2300      	movs	r3, #0
 8008662:	617b      	str	r3, [r7, #20]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008668:	613b      	str	r3, [r7, #16]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10d      	bne.n	800868e <prvCopyDataToQueue+0x3a>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d14d      	bne.n	8008716 <prvCopyDataToQueue+0xc2>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	4618      	mov	r0, r3
 8008680:	f001 f834 	bl	80096ec <xTaskPriorityDisinherit>
 8008684:	6178      	str	r0, [r7, #20]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	609a      	str	r2, [r3, #8]
 800868c:	e043      	b.n	8008716 <prvCopyDataToQueue+0xc2>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d119      	bne.n	80086c8 <prvCopyDataToQueue+0x74>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6858      	ldr	r0, [r3, #4]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869c:	461a      	mov	r2, r3
 800869e:	68b9      	ldr	r1, [r7, #8]
 80086a0:	f002 f952 	bl	800a948 <memcpy>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ac:	441a      	add	r2, r3
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	605a      	str	r2, [r3, #4]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	685a      	ldr	r2, [r3, #4]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d32b      	bcc.n	8008716 <prvCopyDataToQueue+0xc2>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	605a      	str	r2, [r3, #4]
 80086c6:	e026      	b.n	8008716 <prvCopyDataToQueue+0xc2>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	68d8      	ldr	r0, [r3, #12]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d0:	461a      	mov	r2, r3
 80086d2:	68b9      	ldr	r1, [r7, #8]
 80086d4:	f002 f938 	bl	800a948 <memcpy>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	68da      	ldr	r2, [r3, #12]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e0:	425b      	negs	r3, r3
 80086e2:	441a      	add	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	60da      	str	r2, [r3, #12]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	68da      	ldr	r2, [r3, #12]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d207      	bcs.n	8008704 <prvCopyDataToQueue+0xb0>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	689a      	ldr	r2, [r3, #8]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fc:	425b      	negs	r3, r3
 80086fe:	441a      	add	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	60da      	str	r2, [r3, #12]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2b02      	cmp	r3, #2
 8008708:	d105      	bne.n	8008716 <prvCopyDataToQueue+0xc2>
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <prvCopyDataToQueue+0xc2>
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	3b01      	subs	r3, #1
 8008714:	613b      	str	r3, [r7, #16]
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	1c5a      	adds	r2, r3, #1
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	639a      	str	r2, [r3, #56]	; 0x38
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	4618      	mov	r0, r3
 8008722:	3718      	adds	r7, #24
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <prvCopyDataFromQueue>:
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008736:	2b00      	cmp	r3, #0
 8008738:	d018      	beq.n	800876c <prvCopyDataFromQueue+0x44>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	68da      	ldr	r2, [r3, #12]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	441a      	add	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	60da      	str	r2, [r3, #12]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	68da      	ldr	r2, [r3, #12]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	429a      	cmp	r2, r3
 8008752:	d303      	bcc.n	800875c <prvCopyDataFromQueue+0x34>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	60da      	str	r2, [r3, #12]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	68d9      	ldr	r1, [r3, #12]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008764:	461a      	mov	r2, r3
 8008766:	6838      	ldr	r0, [r7, #0]
 8008768:	f002 f8ee 	bl	800a948 <memcpy>
 800876c:	bf00      	nop
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <prvUnlockQueue>:
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	f001 fd8a 	bl	800a294 <vPortEnterCritical>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008786:	73fb      	strb	r3, [r7, #15]
 8008788:	e011      	b.n	80087ae <prvUnlockQueue+0x3a>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878e:	2b00      	cmp	r3, #0
 8008790:	d012      	beq.n	80087b8 <prvUnlockQueue+0x44>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	3324      	adds	r3, #36	; 0x24
 8008796:	4618      	mov	r0, r3
 8008798:	f000 fd50 	bl	800923c <xTaskRemoveFromEventList>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <prvUnlockQueue+0x32>
 80087a2:	f000 fe27 	bl	80093f4 <vTaskMissedYield>
 80087a6:	7bfb      	ldrb	r3, [r7, #15]
 80087a8:	3b01      	subs	r3, #1
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	73fb      	strb	r3, [r7, #15]
 80087ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	dce9      	bgt.n	800878a <prvUnlockQueue+0x16>
 80087b6:	e000      	b.n	80087ba <prvUnlockQueue+0x46>
 80087b8:	bf00      	nop
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	22ff      	movs	r2, #255	; 0xff
 80087be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087c2:	f001 fd97 	bl	800a2f4 <vPortExitCritical>
 80087c6:	f001 fd65 	bl	800a294 <vPortEnterCritical>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087d0:	73bb      	strb	r3, [r7, #14]
 80087d2:	e011      	b.n	80087f8 <prvUnlockQueue+0x84>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d012      	beq.n	8008802 <prvUnlockQueue+0x8e>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3310      	adds	r3, #16
 80087e0:	4618      	mov	r0, r3
 80087e2:	f000 fd2b 	bl	800923c <xTaskRemoveFromEventList>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <prvUnlockQueue+0x7c>
 80087ec:	f000 fe02 	bl	80093f4 <vTaskMissedYield>
 80087f0:	7bbb      	ldrb	r3, [r7, #14]
 80087f2:	3b01      	subs	r3, #1
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	73bb      	strb	r3, [r7, #14]
 80087f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	dce9      	bgt.n	80087d4 <prvUnlockQueue+0x60>
 8008800:	e000      	b.n	8008804 <prvUnlockQueue+0x90>
 8008802:	bf00      	nop
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	22ff      	movs	r2, #255	; 0xff
 8008808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800880c:	f001 fd72 	bl	800a2f4 <vPortExitCritical>
 8008810:	bf00      	nop
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <prvIsQueueEmpty>:
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	f001 fd38 	bl	800a294 <vPortEnterCritical>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008828:	2b00      	cmp	r3, #0
 800882a:	d102      	bne.n	8008832 <prvIsQueueEmpty+0x1a>
 800882c:	2301      	movs	r3, #1
 800882e:	60fb      	str	r3, [r7, #12]
 8008830:	e001      	b.n	8008836 <prvIsQueueEmpty+0x1e>
 8008832:	2300      	movs	r3, #0
 8008834:	60fb      	str	r3, [r7, #12]
 8008836:	f001 fd5d 	bl	800a2f4 <vPortExitCritical>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	4618      	mov	r0, r3
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <prvIsQueueFull>:
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	f001 fd22 	bl	800a294 <vPortEnterCritical>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008858:	429a      	cmp	r2, r3
 800885a:	d102      	bne.n	8008862 <prvIsQueueFull+0x1e>
 800885c:	2301      	movs	r3, #1
 800885e:	60fb      	str	r3, [r7, #12]
 8008860:	e001      	b.n	8008866 <prvIsQueueFull+0x22>
 8008862:	2300      	movs	r3, #0
 8008864:	60fb      	str	r3, [r7, #12]
 8008866:	f001 fd45 	bl	800a2f4 <vPortExitCritical>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	4618      	mov	r0, r3
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <vQueueAddToRegistry>:
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
 800887e:	2300      	movs	r3, #0
 8008880:	60fb      	str	r3, [r7, #12]
 8008882:	e014      	b.n	80088ae <vQueueAddToRegistry+0x3a>
 8008884:	4a0f      	ldr	r2, [pc, #60]	; (80088c4 <vQueueAddToRegistry+0x50>)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d10b      	bne.n	80088a8 <vQueueAddToRegistry+0x34>
 8008890:	490c      	ldr	r1, [pc, #48]	; (80088c4 <vQueueAddToRegistry+0x50>)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	683a      	ldr	r2, [r7, #0]
 8008896:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800889a:	4a0a      	ldr	r2, [pc, #40]	; (80088c4 <vQueueAddToRegistry+0x50>)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	00db      	lsls	r3, r3, #3
 80088a0:	4413      	add	r3, r2
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	605a      	str	r2, [r3, #4]
 80088a6:	e006      	b.n	80088b6 <vQueueAddToRegistry+0x42>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	3301      	adds	r3, #1
 80088ac:	60fb      	str	r3, [r7, #12]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2b07      	cmp	r3, #7
 80088b2:	d9e7      	bls.n	8008884 <vQueueAddToRegistry+0x10>
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	20000f18 	.word	0x20000f18

080088c8 <vQueueWaitForMessageRestricted>:
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	617b      	str	r3, [r7, #20]
 80088d8:	f001 fcdc 	bl	800a294 <vPortEnterCritical>
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088e2:	b25b      	sxtb	r3, r3
 80088e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e8:	d103      	bne.n	80088f2 <vQueueWaitForMessageRestricted+0x2a>
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088f8:	b25b      	sxtb	r3, r3
 80088fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088fe:	d103      	bne.n	8008908 <vQueueWaitForMessageRestricted+0x40>
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008908:	f001 fcf4 	bl	800a2f4 <vPortExitCritical>
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008910:	2b00      	cmp	r3, #0
 8008912:	d106      	bne.n	8008922 <vQueueWaitForMessageRestricted+0x5a>
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	3324      	adds	r3, #36	; 0x24
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	68b9      	ldr	r1, [r7, #8]
 800891c:	4618      	mov	r0, r3
 800891e:	f000 fc61 	bl	80091e4 <vTaskPlaceOnEventListRestricted>
 8008922:	6978      	ldr	r0, [r7, #20]
 8008924:	f7ff ff26 	bl	8008774 <prvUnlockQueue>
 8008928:	bf00      	nop
 800892a:	3718      	adds	r7, #24
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <xTaskCreateStatic>:
 8008930:	b580      	push	{r7, lr}
 8008932:	b08e      	sub	sp, #56	; 0x38
 8008934:	af04      	add	r7, sp, #16
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	607a      	str	r2, [r7, #4]
 800893c:	603b      	str	r3, [r7, #0]
 800893e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10a      	bne.n	800895a <xTaskCreateStatic+0x2a>
 8008944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008948:	f383 8811 	msr	BASEPRI, r3
 800894c:	f3bf 8f6f 	isb	sy
 8008950:	f3bf 8f4f 	dsb	sy
 8008954:	623b      	str	r3, [r7, #32]
 8008956:	bf00      	nop
 8008958:	e7fe      	b.n	8008958 <xTaskCreateStatic+0x28>
 800895a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10a      	bne.n	8008976 <xTaskCreateStatic+0x46>
 8008960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	61fb      	str	r3, [r7, #28]
 8008972:	bf00      	nop
 8008974:	e7fe      	b.n	8008974 <xTaskCreateStatic+0x44>
 8008976:	23bc      	movs	r3, #188	; 0xbc
 8008978:	613b      	str	r3, [r7, #16]
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	2bbc      	cmp	r3, #188	; 0xbc
 800897e:	d00a      	beq.n	8008996 <xTaskCreateStatic+0x66>
 8008980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	61bb      	str	r3, [r7, #24]
 8008992:	bf00      	nop
 8008994:	e7fe      	b.n	8008994 <xTaskCreateStatic+0x64>
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899a:	2b00      	cmp	r3, #0
 800899c:	d01e      	beq.n	80089dc <xTaskCreateStatic+0xac>
 800899e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d01b      	beq.n	80089dc <xTaskCreateStatic+0xac>
 80089a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a6:	627b      	str	r3, [r7, #36]	; 0x24
 80089a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089ac:	631a      	str	r2, [r3, #48]	; 0x30
 80089ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b0:	2202      	movs	r2, #2
 80089b2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
 80089b6:	2300      	movs	r3, #0
 80089b8:	9303      	str	r3, [sp, #12]
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	9302      	str	r3, [sp, #8]
 80089be:	f107 0314 	add.w	r3, r7, #20
 80089c2:	9301      	str	r3, [sp, #4]
 80089c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	68b9      	ldr	r1, [r7, #8]
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f000 f850 	bl	8008a74 <prvInitialiseNewTask>
 80089d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089d6:	f000 f8f3 	bl	8008bc0 <prvAddNewTaskToReadyList>
 80089da:	e001      	b.n	80089e0 <xTaskCreateStatic+0xb0>
 80089dc:	2300      	movs	r3, #0
 80089de:	617b      	str	r3, [r7, #20]
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	4618      	mov	r0, r3
 80089e4:	3728      	adds	r7, #40	; 0x28
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <xTaskCreate>:
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b08c      	sub	sp, #48	; 0x30
 80089ee:	af04      	add	r7, sp, #16
 80089f0:	60f8      	str	r0, [r7, #12]
 80089f2:	60b9      	str	r1, [r7, #8]
 80089f4:	603b      	str	r3, [r7, #0]
 80089f6:	4613      	mov	r3, r2
 80089f8:	80fb      	strh	r3, [r7, #6]
 80089fa:	88fb      	ldrh	r3, [r7, #6]
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4618      	mov	r0, r3
 8008a00:	f001 fd6a 	bl	800a4d8 <pvPortMalloc>
 8008a04:	6178      	str	r0, [r7, #20]
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00e      	beq.n	8008a2a <xTaskCreate+0x40>
 8008a0c:	20bc      	movs	r0, #188	; 0xbc
 8008a0e:	f001 fd63 	bl	800a4d8 <pvPortMalloc>
 8008a12:	61f8      	str	r0, [r7, #28]
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <xTaskCreate+0x38>
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	697a      	ldr	r2, [r7, #20]
 8008a1e:	631a      	str	r2, [r3, #48]	; 0x30
 8008a20:	e005      	b.n	8008a2e <xTaskCreate+0x44>
 8008a22:	6978      	ldr	r0, [r7, #20]
 8008a24:	f001 fe24 	bl	800a670 <vPortFree>
 8008a28:	e001      	b.n	8008a2e <xTaskCreate+0x44>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	61fb      	str	r3, [r7, #28]
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d017      	beq.n	8008a64 <xTaskCreate+0x7a>
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
 8008a3c:	88fa      	ldrh	r2, [r7, #6]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	9303      	str	r3, [sp, #12]
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	9302      	str	r3, [sp, #8]
 8008a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a48:	9301      	str	r3, [sp, #4]
 8008a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	68b9      	ldr	r1, [r7, #8]
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f000 f80e 	bl	8008a74 <prvInitialiseNewTask>
 8008a58:	69f8      	ldr	r0, [r7, #28]
 8008a5a:	f000 f8b1 	bl	8008bc0 <prvAddNewTaskToReadyList>
 8008a5e:	2301      	movs	r3, #1
 8008a60:	61bb      	str	r3, [r7, #24]
 8008a62:	e002      	b.n	8008a6a <xTaskCreate+0x80>
 8008a64:	f04f 33ff 	mov.w	r3, #4294967295
 8008a68:	61bb      	str	r3, [r7, #24]
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3720      	adds	r7, #32
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <prvInitialiseNewTask>:
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b088      	sub	sp, #32
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	603b      	str	r3, [r7, #0]
 8008a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	21a5      	movs	r1, #165	; 0xa5
 8008a8e:	f001 ff69 	bl	800a964 <memset>
 8008a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	4413      	add	r3, r2
 8008aa2:	61bb      	str	r3, [r7, #24]
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	f023 0307 	bic.w	r3, r3, #7
 8008aaa:	61bb      	str	r3, [r7, #24]
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	f003 0307 	and.w	r3, r3, #7
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00a      	beq.n	8008acc <prvInitialiseNewTask+0x58>
 8008ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aba:	f383 8811 	msr	BASEPRI, r3
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	617b      	str	r3, [r7, #20]
 8008ac8:	bf00      	nop
 8008aca:	e7fe      	b.n	8008aca <prvInitialiseNewTask+0x56>
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d01f      	beq.n	8008b12 <prvInitialiseNewTask+0x9e>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	61fb      	str	r3, [r7, #28]
 8008ad6:	e012      	b.n	8008afe <prvInitialiseNewTask+0x8a>
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	4413      	add	r3, r2
 8008ade:	7819      	ldrb	r1, [r3, #0]
 8008ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	3334      	adds	r3, #52	; 0x34
 8008ae8:	460a      	mov	r2, r1
 8008aea:	701a      	strb	r2, [r3, #0]
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	4413      	add	r3, r2
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d006      	beq.n	8008b06 <prvInitialiseNewTask+0x92>
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	3301      	adds	r3, #1
 8008afc:	61fb      	str	r3, [r7, #28]
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	2b0f      	cmp	r3, #15
 8008b02:	d9e9      	bls.n	8008ad8 <prvInitialiseNewTask+0x64>
 8008b04:	e000      	b.n	8008b08 <prvInitialiseNewTask+0x94>
 8008b06:	bf00      	nop
 8008b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b10:	e003      	b.n	8008b1a <prvInitialiseNewTask+0xa6>
 8008b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8008b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1c:	2b37      	cmp	r3, #55	; 0x37
 8008b1e:	d901      	bls.n	8008b24 <prvInitialiseNewTask+0xb0>
 8008b20:	2337      	movs	r3, #55	; 0x37
 8008b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b28:	62da      	str	r2, [r3, #44]	; 0x2c
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b2e:	64da      	str	r2, [r3, #76]	; 0x4c
 8008b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b32:	2200      	movs	r2, #0
 8008b34:	651a      	str	r2, [r3, #80]	; 0x50
 8008b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b38:	3304      	adds	r3, #4
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fe ff64 	bl	8007a08 <vListInitialiseItem>
 8008b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b42:	3318      	adds	r3, #24
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7fe ff5f 	bl	8007a08 <vListInitialiseItem>
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b4e:	611a      	str	r2, [r3, #16]
 8008b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	619a      	str	r2, [r3, #24]
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b5e:	625a      	str	r2, [r3, #36]	; 0x24
 8008b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b62:	2200      	movs	r2, #0
 8008b64:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8008b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8008b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b72:	3354      	adds	r3, #84	; 0x54
 8008b74:	2260      	movs	r2, #96	; 0x60
 8008b76:	2100      	movs	r1, #0
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f001 fef3 	bl	800a964 <memset>
 8008b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b80:	4a0c      	ldr	r2, [pc, #48]	; (8008bb4 <prvInitialiseNewTask+0x140>)
 8008b82:	659a      	str	r2, [r3, #88]	; 0x58
 8008b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b86:	4a0c      	ldr	r2, [pc, #48]	; (8008bb8 <prvInitialiseNewTask+0x144>)
 8008b88:	65da      	str	r2, [r3, #92]	; 0x5c
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8c:	4a0b      	ldr	r2, [pc, #44]	; (8008bbc <prvInitialiseNewTask+0x148>)
 8008b8e:	661a      	str	r2, [r3, #96]	; 0x60
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	68f9      	ldr	r1, [r7, #12]
 8008b94:	69b8      	ldr	r0, [r7, #24]
 8008b96:	f001 fa4f 	bl	800a038 <pxPortInitialiseStack>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9e:	601a      	str	r2, [r3, #0]
 8008ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d002      	beq.n	8008bac <prvInitialiseNewTask+0x138>
 8008ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008baa:	601a      	str	r2, [r3, #0]
 8008bac:	bf00      	nop
 8008bae:	3720      	adds	r7, #32
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	0800c378 	.word	0x0800c378
 8008bb8:	0800c398 	.word	0x0800c398
 8008bbc:	0800c358 	.word	0x0800c358

08008bc0 <prvAddNewTaskToReadyList>:
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	f001 fb64 	bl	800a294 <vPortEnterCritical>
 8008bcc:	4b2d      	ldr	r3, [pc, #180]	; (8008c84 <prvAddNewTaskToReadyList+0xc4>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	4a2c      	ldr	r2, [pc, #176]	; (8008c84 <prvAddNewTaskToReadyList+0xc4>)
 8008bd4:	6013      	str	r3, [r2, #0]
 8008bd6:	4b2c      	ldr	r3, [pc, #176]	; (8008c88 <prvAddNewTaskToReadyList+0xc8>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d109      	bne.n	8008bf2 <prvAddNewTaskToReadyList+0x32>
 8008bde:	4a2a      	ldr	r2, [pc, #168]	; (8008c88 <prvAddNewTaskToReadyList+0xc8>)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6013      	str	r3, [r2, #0]
 8008be4:	4b27      	ldr	r3, [pc, #156]	; (8008c84 <prvAddNewTaskToReadyList+0xc4>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d110      	bne.n	8008c0e <prvAddNewTaskToReadyList+0x4e>
 8008bec:	f000 fc26 	bl	800943c <prvInitialiseTaskLists>
 8008bf0:	e00d      	b.n	8008c0e <prvAddNewTaskToReadyList+0x4e>
 8008bf2:	4b26      	ldr	r3, [pc, #152]	; (8008c8c <prvAddNewTaskToReadyList+0xcc>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d109      	bne.n	8008c0e <prvAddNewTaskToReadyList+0x4e>
 8008bfa:	4b23      	ldr	r3, [pc, #140]	; (8008c88 <prvAddNewTaskToReadyList+0xc8>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d802      	bhi.n	8008c0e <prvAddNewTaskToReadyList+0x4e>
 8008c08:	4a1f      	ldr	r2, [pc, #124]	; (8008c88 <prvAddNewTaskToReadyList+0xc8>)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6013      	str	r3, [r2, #0]
 8008c0e:	4b20      	ldr	r3, [pc, #128]	; (8008c90 <prvAddNewTaskToReadyList+0xd0>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	3301      	adds	r3, #1
 8008c14:	4a1e      	ldr	r2, [pc, #120]	; (8008c90 <prvAddNewTaskToReadyList+0xd0>)
 8008c16:	6013      	str	r3, [r2, #0]
 8008c18:	4b1d      	ldr	r3, [pc, #116]	; (8008c90 <prvAddNewTaskToReadyList+0xd0>)
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	645a      	str	r2, [r3, #68]	; 0x44
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c24:	4b1b      	ldr	r3, [pc, #108]	; (8008c94 <prvAddNewTaskToReadyList+0xd4>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d903      	bls.n	8008c34 <prvAddNewTaskToReadyList+0x74>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c30:	4a18      	ldr	r2, [pc, #96]	; (8008c94 <prvAddNewTaskToReadyList+0xd4>)
 8008c32:	6013      	str	r3, [r2, #0]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c38:	4613      	mov	r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	4413      	add	r3, r2
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	4a15      	ldr	r2, [pc, #84]	; (8008c98 <prvAddNewTaskToReadyList+0xd8>)
 8008c42:	441a      	add	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	3304      	adds	r3, #4
 8008c48:	4619      	mov	r1, r3
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	f7fe fee9 	bl	8007a22 <vListInsertEnd>
 8008c50:	f001 fb50 	bl	800a2f4 <vPortExitCritical>
 8008c54:	4b0d      	ldr	r3, [pc, #52]	; (8008c8c <prvAddNewTaskToReadyList+0xcc>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00e      	beq.n	8008c7a <prvAddNewTaskToReadyList+0xba>
 8008c5c:	4b0a      	ldr	r3, [pc, #40]	; (8008c88 <prvAddNewTaskToReadyList+0xc8>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d207      	bcs.n	8008c7a <prvAddNewTaskToReadyList+0xba>
 8008c6a:	4b0c      	ldr	r3, [pc, #48]	; (8008c9c <prvAddNewTaskToReadyList+0xdc>)
 8008c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	bf00      	nop
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	2000142c 	.word	0x2000142c
 8008c88:	20000f58 	.word	0x20000f58
 8008c8c:	20001438 	.word	0x20001438
 8008c90:	20001448 	.word	0x20001448
 8008c94:	20001434 	.word	0x20001434
 8008c98:	20000f5c 	.word	0x20000f5c
 8008c9c:	e000ed04 	.word	0xe000ed04

08008ca0 <vTaskDelay>:
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	2300      	movs	r3, #0
 8008caa:	60fb      	str	r3, [r7, #12]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d017      	beq.n	8008ce2 <vTaskDelay+0x42>
 8008cb2:	4b13      	ldr	r3, [pc, #76]	; (8008d00 <vTaskDelay+0x60>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00a      	beq.n	8008cd0 <vTaskDelay+0x30>
 8008cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbe:	f383 8811 	msr	BASEPRI, r3
 8008cc2:	f3bf 8f6f 	isb	sy
 8008cc6:	f3bf 8f4f 	dsb	sy
 8008cca:	60bb      	str	r3, [r7, #8]
 8008ccc:	bf00      	nop
 8008cce:	e7fe      	b.n	8008cce <vTaskDelay+0x2e>
 8008cd0:	f000 f88a 	bl	8008de8 <vTaskSuspendAll>
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fe0c 	bl	80098f4 <prvAddCurrentTaskToDelayedList>
 8008cdc:	f000 f892 	bl	8008e04 <xTaskResumeAll>
 8008ce0:	60f8      	str	r0, [r7, #12]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d107      	bne.n	8008cf8 <vTaskDelay+0x58>
 8008ce8:	4b06      	ldr	r3, [pc, #24]	; (8008d04 <vTaskDelay+0x64>)
 8008cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cee:	601a      	str	r2, [r3, #0]
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	bf00      	nop
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	20001454 	.word	0x20001454
 8008d04:	e000ed04 	.word	0xe000ed04

08008d08 <vTaskStartScheduler>:
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b08a      	sub	sp, #40	; 0x28
 8008d0c:	af04      	add	r7, sp, #16
 8008d0e:	2300      	movs	r3, #0
 8008d10:	60bb      	str	r3, [r7, #8]
 8008d12:	2300      	movs	r3, #0
 8008d14:	607b      	str	r3, [r7, #4]
 8008d16:	463a      	mov	r2, r7
 8008d18:	1d39      	adds	r1, r7, #4
 8008d1a:	f107 0308 	add.w	r3, r7, #8
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fe fe1e 	bl	8007960 <vApplicationGetIdleTaskMemory>
 8008d24:	6839      	ldr	r1, [r7, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	9202      	str	r2, [sp, #8]
 8008d2c:	9301      	str	r3, [sp, #4]
 8008d2e:	2300      	movs	r3, #0
 8008d30:	9300      	str	r3, [sp, #0]
 8008d32:	2300      	movs	r3, #0
 8008d34:	460a      	mov	r2, r1
 8008d36:	4924      	ldr	r1, [pc, #144]	; (8008dc8 <vTaskStartScheduler+0xc0>)
 8008d38:	4824      	ldr	r0, [pc, #144]	; (8008dcc <vTaskStartScheduler+0xc4>)
 8008d3a:	f7ff fdf9 	bl	8008930 <xTaskCreateStatic>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	4a23      	ldr	r2, [pc, #140]	; (8008dd0 <vTaskStartScheduler+0xc8>)
 8008d42:	6013      	str	r3, [r2, #0]
 8008d44:	4b22      	ldr	r3, [pc, #136]	; (8008dd0 <vTaskStartScheduler+0xc8>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <vTaskStartScheduler+0x4a>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	617b      	str	r3, [r7, #20]
 8008d50:	e001      	b.n	8008d56 <vTaskStartScheduler+0x4e>
 8008d52:	2300      	movs	r3, #0
 8008d54:	617b      	str	r3, [r7, #20]
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d102      	bne.n	8008d62 <vTaskStartScheduler+0x5a>
 8008d5c:	f000 fe1e 	bl	800999c <xTimerCreateTimerTask>
 8008d60:	6178      	str	r0, [r7, #20]
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d11b      	bne.n	8008da0 <vTaskStartScheduler+0x98>
 8008d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6c:	f383 8811 	msr	BASEPRI, r3
 8008d70:	f3bf 8f6f 	isb	sy
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	613b      	str	r3, [r7, #16]
 8008d7a:	bf00      	nop
 8008d7c:	4b15      	ldr	r3, [pc, #84]	; (8008dd4 <vTaskStartScheduler+0xcc>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3354      	adds	r3, #84	; 0x54
 8008d82:	4a15      	ldr	r2, [pc, #84]	; (8008dd8 <vTaskStartScheduler+0xd0>)
 8008d84:	6013      	str	r3, [r2, #0]
 8008d86:	4b15      	ldr	r3, [pc, #84]	; (8008ddc <vTaskStartScheduler+0xd4>)
 8008d88:	f04f 32ff 	mov.w	r2, #4294967295
 8008d8c:	601a      	str	r2, [r3, #0]
 8008d8e:	4b14      	ldr	r3, [pc, #80]	; (8008de0 <vTaskStartScheduler+0xd8>)
 8008d90:	2201      	movs	r2, #1
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	4b13      	ldr	r3, [pc, #76]	; (8008de4 <vTaskStartScheduler+0xdc>)
 8008d96:	2200      	movs	r2, #0
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	f001 f9d9 	bl	800a150 <xPortStartScheduler>
 8008d9e:	e00e      	b.n	8008dbe <vTaskStartScheduler+0xb6>
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da6:	d10a      	bne.n	8008dbe <vTaskStartScheduler+0xb6>
 8008da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dac:	f383 8811 	msr	BASEPRI, r3
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	f3bf 8f4f 	dsb	sy
 8008db8:	60fb      	str	r3, [r7, #12]
 8008dba:	bf00      	nop
 8008dbc:	e7fe      	b.n	8008dbc <vTaskStartScheduler+0xb4>
 8008dbe:	bf00      	nop
 8008dc0:	3718      	adds	r7, #24
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	0800adb8 	.word	0x0800adb8
 8008dcc:	0800940d 	.word	0x0800940d
 8008dd0:	20001450 	.word	0x20001450
 8008dd4:	20000f58 	.word	0x20000f58
 8008dd8:	20000040 	.word	0x20000040
 8008ddc:	2000144c 	.word	0x2000144c
 8008de0:	20001438 	.word	0x20001438
 8008de4:	20001430 	.word	0x20001430

08008de8 <vTaskSuspendAll>:
 8008de8:	b480      	push	{r7}
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	4b04      	ldr	r3, [pc, #16]	; (8008e00 <vTaskSuspendAll+0x18>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	3301      	adds	r3, #1
 8008df2:	4a03      	ldr	r2, [pc, #12]	; (8008e00 <vTaskSuspendAll+0x18>)
 8008df4:	6013      	str	r3, [r2, #0]
 8008df6:	bf00      	nop
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	20001454 	.word	0x20001454

08008e04 <xTaskResumeAll>:
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	60fb      	str	r3, [r7, #12]
 8008e0e:	2300      	movs	r3, #0
 8008e10:	60bb      	str	r3, [r7, #8]
 8008e12:	4b42      	ldr	r3, [pc, #264]	; (8008f1c <xTaskResumeAll+0x118>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10a      	bne.n	8008e30 <xTaskResumeAll+0x2c>
 8008e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1e:	f383 8811 	msr	BASEPRI, r3
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	603b      	str	r3, [r7, #0]
 8008e2c:	bf00      	nop
 8008e2e:	e7fe      	b.n	8008e2e <xTaskResumeAll+0x2a>
 8008e30:	f001 fa30 	bl	800a294 <vPortEnterCritical>
 8008e34:	4b39      	ldr	r3, [pc, #228]	; (8008f1c <xTaskResumeAll+0x118>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	4a38      	ldr	r2, [pc, #224]	; (8008f1c <xTaskResumeAll+0x118>)
 8008e3c:	6013      	str	r3, [r2, #0]
 8008e3e:	4b37      	ldr	r3, [pc, #220]	; (8008f1c <xTaskResumeAll+0x118>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d162      	bne.n	8008f0c <xTaskResumeAll+0x108>
 8008e46:	4b36      	ldr	r3, [pc, #216]	; (8008f20 <xTaskResumeAll+0x11c>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d05e      	beq.n	8008f0c <xTaskResumeAll+0x108>
 8008e4e:	e02f      	b.n	8008eb0 <xTaskResumeAll+0xac>
 8008e50:	4b34      	ldr	r3, [pc, #208]	; (8008f24 <xTaskResumeAll+0x120>)
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	60fb      	str	r3, [r7, #12]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	3318      	adds	r3, #24
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7fe fe3d 	bl	8007adc <uxListRemove>
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	3304      	adds	r3, #4
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7fe fe38 	bl	8007adc <uxListRemove>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e70:	4b2d      	ldr	r3, [pc, #180]	; (8008f28 <xTaskResumeAll+0x124>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d903      	bls.n	8008e80 <xTaskResumeAll+0x7c>
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7c:	4a2a      	ldr	r2, [pc, #168]	; (8008f28 <xTaskResumeAll+0x124>)
 8008e7e:	6013      	str	r3, [r2, #0]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e84:	4613      	mov	r3, r2
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	4413      	add	r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4a27      	ldr	r2, [pc, #156]	; (8008f2c <xTaskResumeAll+0x128>)
 8008e8e:	441a      	add	r2, r3
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3304      	adds	r3, #4
 8008e94:	4619      	mov	r1, r3
 8008e96:	4610      	mov	r0, r2
 8008e98:	f7fe fdc3 	bl	8007a22 <vListInsertEnd>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea0:	4b23      	ldr	r3, [pc, #140]	; (8008f30 <xTaskResumeAll+0x12c>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d302      	bcc.n	8008eb0 <xTaskResumeAll+0xac>
 8008eaa:	4b22      	ldr	r3, [pc, #136]	; (8008f34 <xTaskResumeAll+0x130>)
 8008eac:	2201      	movs	r2, #1
 8008eae:	601a      	str	r2, [r3, #0]
 8008eb0:	4b1c      	ldr	r3, [pc, #112]	; (8008f24 <xTaskResumeAll+0x120>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d1cb      	bne.n	8008e50 <xTaskResumeAll+0x4c>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d001      	beq.n	8008ec2 <xTaskResumeAll+0xbe>
 8008ebe:	f000 fb5f 	bl	8009580 <prvResetNextTaskUnblockTime>
 8008ec2:	4b1d      	ldr	r3, [pc, #116]	; (8008f38 <xTaskResumeAll+0x134>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	607b      	str	r3, [r7, #4]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d010      	beq.n	8008ef0 <xTaskResumeAll+0xec>
 8008ece:	f000 f847 	bl	8008f60 <xTaskIncrementTick>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d002      	beq.n	8008ede <xTaskResumeAll+0xda>
 8008ed8:	4b16      	ldr	r3, [pc, #88]	; (8008f34 <xTaskResumeAll+0x130>)
 8008eda:	2201      	movs	r2, #1
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	607b      	str	r3, [r7, #4]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1f1      	bne.n	8008ece <xTaskResumeAll+0xca>
 8008eea:	4b13      	ldr	r3, [pc, #76]	; (8008f38 <xTaskResumeAll+0x134>)
 8008eec:	2200      	movs	r2, #0
 8008eee:	601a      	str	r2, [r3, #0]
 8008ef0:	4b10      	ldr	r3, [pc, #64]	; (8008f34 <xTaskResumeAll+0x130>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d009      	beq.n	8008f0c <xTaskResumeAll+0x108>
 8008ef8:	2301      	movs	r3, #1
 8008efa:	60bb      	str	r3, [r7, #8]
 8008efc:	4b0f      	ldr	r3, [pc, #60]	; (8008f3c <xTaskResumeAll+0x138>)
 8008efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	f3bf 8f4f 	dsb	sy
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f001 f9f2 	bl	800a2f4 <vPortExitCritical>
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	4618      	mov	r0, r3
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	20001454 	.word	0x20001454
 8008f20:	2000142c 	.word	0x2000142c
 8008f24:	200013ec 	.word	0x200013ec
 8008f28:	20001434 	.word	0x20001434
 8008f2c:	20000f5c 	.word	0x20000f5c
 8008f30:	20000f58 	.word	0x20000f58
 8008f34:	20001440 	.word	0x20001440
 8008f38:	2000143c 	.word	0x2000143c
 8008f3c:	e000ed04 	.word	0xe000ed04

08008f40 <xTaskGetTickCount>:
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4b05      	ldr	r3, [pc, #20]	; (8008f5c <xTaskGetTickCount+0x1c>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	607b      	str	r3, [r7, #4]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	370c      	adds	r7, #12
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	20001430 	.word	0x20001430

08008f60 <xTaskIncrementTick>:
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	2300      	movs	r3, #0
 8008f68:	617b      	str	r3, [r7, #20]
 8008f6a:	4b4f      	ldr	r3, [pc, #316]	; (80090a8 <xTaskIncrementTick+0x148>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	f040 808f 	bne.w	8009092 <xTaskIncrementTick+0x132>
 8008f74:	4b4d      	ldr	r3, [pc, #308]	; (80090ac <xTaskIncrementTick+0x14c>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	613b      	str	r3, [r7, #16]
 8008f7c:	4a4b      	ldr	r2, [pc, #300]	; (80090ac <xTaskIncrementTick+0x14c>)
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	6013      	str	r3, [r2, #0]
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d120      	bne.n	8008fca <xTaskIncrementTick+0x6a>
 8008f88:	4b49      	ldr	r3, [pc, #292]	; (80090b0 <xTaskIncrementTick+0x150>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00a      	beq.n	8008fa8 <xTaskIncrementTick+0x48>
 8008f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f96:	f383 8811 	msr	BASEPRI, r3
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	f3bf 8f4f 	dsb	sy
 8008fa2:	603b      	str	r3, [r7, #0]
 8008fa4:	bf00      	nop
 8008fa6:	e7fe      	b.n	8008fa6 <xTaskIncrementTick+0x46>
 8008fa8:	4b41      	ldr	r3, [pc, #260]	; (80090b0 <xTaskIncrementTick+0x150>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	60fb      	str	r3, [r7, #12]
 8008fae:	4b41      	ldr	r3, [pc, #260]	; (80090b4 <xTaskIncrementTick+0x154>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a3f      	ldr	r2, [pc, #252]	; (80090b0 <xTaskIncrementTick+0x150>)
 8008fb4:	6013      	str	r3, [r2, #0]
 8008fb6:	4a3f      	ldr	r2, [pc, #252]	; (80090b4 <xTaskIncrementTick+0x154>)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	4b3e      	ldr	r3, [pc, #248]	; (80090b8 <xTaskIncrementTick+0x158>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	4a3d      	ldr	r2, [pc, #244]	; (80090b8 <xTaskIncrementTick+0x158>)
 8008fc4:	6013      	str	r3, [r2, #0]
 8008fc6:	f000 fadb 	bl	8009580 <prvResetNextTaskUnblockTime>
 8008fca:	4b3c      	ldr	r3, [pc, #240]	; (80090bc <xTaskIncrementTick+0x15c>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d349      	bcc.n	8009068 <xTaskIncrementTick+0x108>
 8008fd4:	4b36      	ldr	r3, [pc, #216]	; (80090b0 <xTaskIncrementTick+0x150>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d104      	bne.n	8008fe8 <xTaskIncrementTick+0x88>
 8008fde:	4b37      	ldr	r3, [pc, #220]	; (80090bc <xTaskIncrementTick+0x15c>)
 8008fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8008fe4:	601a      	str	r2, [r3, #0]
 8008fe6:	e03f      	b.n	8009068 <xTaskIncrementTick+0x108>
 8008fe8:	4b31      	ldr	r3, [pc, #196]	; (80090b0 <xTaskIncrementTick+0x150>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	60bb      	str	r3, [r7, #8]
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	607b      	str	r3, [r7, #4]
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d203      	bcs.n	8009008 <xTaskIncrementTick+0xa8>
 8009000:	4a2e      	ldr	r2, [pc, #184]	; (80090bc <xTaskIncrementTick+0x15c>)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6013      	str	r3, [r2, #0]
 8009006:	e02f      	b.n	8009068 <xTaskIncrementTick+0x108>
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	3304      	adds	r3, #4
 800900c:	4618      	mov	r0, r3
 800900e:	f7fe fd65 	bl	8007adc <uxListRemove>
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009016:	2b00      	cmp	r3, #0
 8009018:	d004      	beq.n	8009024 <xTaskIncrementTick+0xc4>
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	3318      	adds	r3, #24
 800901e:	4618      	mov	r0, r3
 8009020:	f7fe fd5c 	bl	8007adc <uxListRemove>
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009028:	4b25      	ldr	r3, [pc, #148]	; (80090c0 <xTaskIncrementTick+0x160>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	429a      	cmp	r2, r3
 800902e:	d903      	bls.n	8009038 <xTaskIncrementTick+0xd8>
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009034:	4a22      	ldr	r2, [pc, #136]	; (80090c0 <xTaskIncrementTick+0x160>)
 8009036:	6013      	str	r3, [r2, #0]
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800903c:	4613      	mov	r3, r2
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	4413      	add	r3, r2
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	4a1f      	ldr	r2, [pc, #124]	; (80090c4 <xTaskIncrementTick+0x164>)
 8009046:	441a      	add	r2, r3
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	3304      	adds	r3, #4
 800904c:	4619      	mov	r1, r3
 800904e:	4610      	mov	r0, r2
 8009050:	f7fe fce7 	bl	8007a22 <vListInsertEnd>
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009058:	4b1b      	ldr	r3, [pc, #108]	; (80090c8 <xTaskIncrementTick+0x168>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905e:	429a      	cmp	r2, r3
 8009060:	d3b8      	bcc.n	8008fd4 <xTaskIncrementTick+0x74>
 8009062:	2301      	movs	r3, #1
 8009064:	617b      	str	r3, [r7, #20]
 8009066:	e7b5      	b.n	8008fd4 <xTaskIncrementTick+0x74>
 8009068:	4b17      	ldr	r3, [pc, #92]	; (80090c8 <xTaskIncrementTick+0x168>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906e:	4915      	ldr	r1, [pc, #84]	; (80090c4 <xTaskIncrementTick+0x164>)
 8009070:	4613      	mov	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	440b      	add	r3, r1
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d901      	bls.n	8009084 <xTaskIncrementTick+0x124>
 8009080:	2301      	movs	r3, #1
 8009082:	617b      	str	r3, [r7, #20]
 8009084:	4b11      	ldr	r3, [pc, #68]	; (80090cc <xTaskIncrementTick+0x16c>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d007      	beq.n	800909c <xTaskIncrementTick+0x13c>
 800908c:	2301      	movs	r3, #1
 800908e:	617b      	str	r3, [r7, #20]
 8009090:	e004      	b.n	800909c <xTaskIncrementTick+0x13c>
 8009092:	4b0f      	ldr	r3, [pc, #60]	; (80090d0 <xTaskIncrementTick+0x170>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3301      	adds	r3, #1
 8009098:	4a0d      	ldr	r2, [pc, #52]	; (80090d0 <xTaskIncrementTick+0x170>)
 800909a:	6013      	str	r3, [r2, #0]
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	4618      	mov	r0, r3
 80090a0:	3718      	adds	r7, #24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	20001454 	.word	0x20001454
 80090ac:	20001430 	.word	0x20001430
 80090b0:	200013e4 	.word	0x200013e4
 80090b4:	200013e8 	.word	0x200013e8
 80090b8:	20001444 	.word	0x20001444
 80090bc:	2000144c 	.word	0x2000144c
 80090c0:	20001434 	.word	0x20001434
 80090c4:	20000f5c 	.word	0x20000f5c
 80090c8:	20000f58 	.word	0x20000f58
 80090cc:	20001440 	.word	0x20001440
 80090d0:	2000143c 	.word	0x2000143c

080090d4 <vTaskSwitchContext>:
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	4b2a      	ldr	r3, [pc, #168]	; (8009184 <vTaskSwitchContext+0xb0>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d003      	beq.n	80090ea <vTaskSwitchContext+0x16>
 80090e2:	4b29      	ldr	r3, [pc, #164]	; (8009188 <vTaskSwitchContext+0xb4>)
 80090e4:	2201      	movs	r2, #1
 80090e6:	601a      	str	r2, [r3, #0]
 80090e8:	e046      	b.n	8009178 <vTaskSwitchContext+0xa4>
 80090ea:	4b27      	ldr	r3, [pc, #156]	; (8009188 <vTaskSwitchContext+0xb4>)
 80090ec:	2200      	movs	r2, #0
 80090ee:	601a      	str	r2, [r3, #0]
 80090f0:	4b26      	ldr	r3, [pc, #152]	; (800918c <vTaskSwitchContext+0xb8>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	60fb      	str	r3, [r7, #12]
 80090f6:	e010      	b.n	800911a <vTaskSwitchContext+0x46>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10a      	bne.n	8009114 <vTaskSwitchContext+0x40>
 80090fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009102:	f383 8811 	msr	BASEPRI, r3
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	607b      	str	r3, [r7, #4]
 8009110:	bf00      	nop
 8009112:	e7fe      	b.n	8009112 <vTaskSwitchContext+0x3e>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	3b01      	subs	r3, #1
 8009118:	60fb      	str	r3, [r7, #12]
 800911a:	491d      	ldr	r1, [pc, #116]	; (8009190 <vTaskSwitchContext+0xbc>)
 800911c:	68fa      	ldr	r2, [r7, #12]
 800911e:	4613      	mov	r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	4413      	add	r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	440b      	add	r3, r1
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d0e4      	beq.n	80090f8 <vTaskSwitchContext+0x24>
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	4613      	mov	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4413      	add	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4a15      	ldr	r2, [pc, #84]	; (8009190 <vTaskSwitchContext+0xbc>)
 800913a:	4413      	add	r3, r2
 800913c:	60bb      	str	r3, [r7, #8]
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	685a      	ldr	r2, [r3, #4]
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	605a      	str	r2, [r3, #4]
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	685a      	ldr	r2, [r3, #4]
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	3308      	adds	r3, #8
 8009150:	429a      	cmp	r2, r3
 8009152:	d104      	bne.n	800915e <vTaskSwitchContext+0x8a>
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	685a      	ldr	r2, [r3, #4]
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	605a      	str	r2, [r3, #4]
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	4a0b      	ldr	r2, [pc, #44]	; (8009194 <vTaskSwitchContext+0xc0>)
 8009166:	6013      	str	r3, [r2, #0]
 8009168:	4a08      	ldr	r2, [pc, #32]	; (800918c <vTaskSwitchContext+0xb8>)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6013      	str	r3, [r2, #0]
 800916e:	4b09      	ldr	r3, [pc, #36]	; (8009194 <vTaskSwitchContext+0xc0>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	3354      	adds	r3, #84	; 0x54
 8009174:	4a08      	ldr	r2, [pc, #32]	; (8009198 <vTaskSwitchContext+0xc4>)
 8009176:	6013      	str	r3, [r2, #0]
 8009178:	bf00      	nop
 800917a:	3714      	adds	r7, #20
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr
 8009184:	20001454 	.word	0x20001454
 8009188:	20001440 	.word	0x20001440
 800918c:	20001434 	.word	0x20001434
 8009190:	20000f5c 	.word	0x20000f5c
 8009194:	20000f58 	.word	0x20000f58
 8009198:	20000040 	.word	0x20000040

0800919c <vTaskPlaceOnEventList>:
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d10a      	bne.n	80091c2 <vTaskPlaceOnEventList+0x26>
 80091ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	60fb      	str	r3, [r7, #12]
 80091be:	bf00      	nop
 80091c0:	e7fe      	b.n	80091c0 <vTaskPlaceOnEventList+0x24>
 80091c2:	4b07      	ldr	r3, [pc, #28]	; (80091e0 <vTaskPlaceOnEventList+0x44>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	3318      	adds	r3, #24
 80091c8:	4619      	mov	r1, r3
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f7fe fc4d 	bl	8007a6a <vListInsert>
 80091d0:	2101      	movs	r1, #1
 80091d2:	6838      	ldr	r0, [r7, #0]
 80091d4:	f000 fb8e 	bl	80098f4 <prvAddCurrentTaskToDelayedList>
 80091d8:	bf00      	nop
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	20000f58 	.word	0x20000f58

080091e4 <vTaskPlaceOnEventListRestricted>:
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b086      	sub	sp, #24
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	607a      	str	r2, [r7, #4]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d10a      	bne.n	800920c <vTaskPlaceOnEventListRestricted+0x28>
 80091f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fa:	f383 8811 	msr	BASEPRI, r3
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	617b      	str	r3, [r7, #20]
 8009208:	bf00      	nop
 800920a:	e7fe      	b.n	800920a <vTaskPlaceOnEventListRestricted+0x26>
 800920c:	4b0a      	ldr	r3, [pc, #40]	; (8009238 <vTaskPlaceOnEventListRestricted+0x54>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	3318      	adds	r3, #24
 8009212:	4619      	mov	r1, r3
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f7fe fc04 	bl	8007a22 <vListInsertEnd>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d002      	beq.n	8009226 <vTaskPlaceOnEventListRestricted+0x42>
 8009220:	f04f 33ff 	mov.w	r3, #4294967295
 8009224:	60bb      	str	r3, [r7, #8]
 8009226:	6879      	ldr	r1, [r7, #4]
 8009228:	68b8      	ldr	r0, [r7, #8]
 800922a:	f000 fb63 	bl	80098f4 <prvAddCurrentTaskToDelayedList>
 800922e:	bf00      	nop
 8009230:	3718      	adds	r7, #24
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	20000f58 	.word	0x20000f58

0800923c <xTaskRemoveFromEventList>:
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	613b      	str	r3, [r7, #16]
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10a      	bne.n	8009268 <xTaskRemoveFromEventList+0x2c>
 8009252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	60fb      	str	r3, [r7, #12]
 8009264:	bf00      	nop
 8009266:	e7fe      	b.n	8009266 <xTaskRemoveFromEventList+0x2a>
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	3318      	adds	r3, #24
 800926c:	4618      	mov	r0, r3
 800926e:	f7fe fc35 	bl	8007adc <uxListRemove>
 8009272:	4b1e      	ldr	r3, [pc, #120]	; (80092ec <xTaskRemoveFromEventList+0xb0>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d11d      	bne.n	80092b6 <xTaskRemoveFromEventList+0x7a>
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	3304      	adds	r3, #4
 800927e:	4618      	mov	r0, r3
 8009280:	f7fe fc2c 	bl	8007adc <uxListRemove>
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009288:	4b19      	ldr	r3, [pc, #100]	; (80092f0 <xTaskRemoveFromEventList+0xb4>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	429a      	cmp	r2, r3
 800928e:	d903      	bls.n	8009298 <xTaskRemoveFromEventList+0x5c>
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009294:	4a16      	ldr	r2, [pc, #88]	; (80092f0 <xTaskRemoveFromEventList+0xb4>)
 8009296:	6013      	str	r3, [r2, #0]
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800929c:	4613      	mov	r3, r2
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4a13      	ldr	r2, [pc, #76]	; (80092f4 <xTaskRemoveFromEventList+0xb8>)
 80092a6:	441a      	add	r2, r3
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	3304      	adds	r3, #4
 80092ac:	4619      	mov	r1, r3
 80092ae:	4610      	mov	r0, r2
 80092b0:	f7fe fbb7 	bl	8007a22 <vListInsertEnd>
 80092b4:	e005      	b.n	80092c2 <xTaskRemoveFromEventList+0x86>
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	3318      	adds	r3, #24
 80092ba:	4619      	mov	r1, r3
 80092bc:	480e      	ldr	r0, [pc, #56]	; (80092f8 <xTaskRemoveFromEventList+0xbc>)
 80092be:	f7fe fbb0 	bl	8007a22 <vListInsertEnd>
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c6:	4b0d      	ldr	r3, [pc, #52]	; (80092fc <xTaskRemoveFromEventList+0xc0>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d905      	bls.n	80092dc <xTaskRemoveFromEventList+0xa0>
 80092d0:	2301      	movs	r3, #1
 80092d2:	617b      	str	r3, [r7, #20]
 80092d4:	4b0a      	ldr	r3, [pc, #40]	; (8009300 <xTaskRemoveFromEventList+0xc4>)
 80092d6:	2201      	movs	r2, #1
 80092d8:	601a      	str	r2, [r3, #0]
 80092da:	e001      	b.n	80092e0 <xTaskRemoveFromEventList+0xa4>
 80092dc:	2300      	movs	r3, #0
 80092de:	617b      	str	r3, [r7, #20]
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	4618      	mov	r0, r3
 80092e4:	3718      	adds	r7, #24
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	20001454 	.word	0x20001454
 80092f0:	20001434 	.word	0x20001434
 80092f4:	20000f5c 	.word	0x20000f5c
 80092f8:	200013ec 	.word	0x200013ec
 80092fc:	20000f58 	.word	0x20000f58
 8009300:	20001440 	.word	0x20001440

08009304 <vTaskInternalSetTimeOutState>:
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	4b06      	ldr	r3, [pc, #24]	; (8009328 <vTaskInternalSetTimeOutState+0x24>)
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	601a      	str	r2, [r3, #0]
 8009314:	4b05      	ldr	r3, [pc, #20]	; (800932c <vTaskInternalSetTimeOutState+0x28>)
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	605a      	str	r2, [r3, #4]
 800931c:	bf00      	nop
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr
 8009328:	20001444 	.word	0x20001444
 800932c:	20001430 	.word	0x20001430

08009330 <xTaskCheckForTimeOut>:
 8009330:	b580      	push	{r7, lr}
 8009332:	b088      	sub	sp, #32
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10a      	bne.n	8009356 <xTaskCheckForTimeOut+0x26>
 8009340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009344:	f383 8811 	msr	BASEPRI, r3
 8009348:	f3bf 8f6f 	isb	sy
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	613b      	str	r3, [r7, #16]
 8009352:	bf00      	nop
 8009354:	e7fe      	b.n	8009354 <xTaskCheckForTimeOut+0x24>
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d10a      	bne.n	8009372 <xTaskCheckForTimeOut+0x42>
 800935c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009360:	f383 8811 	msr	BASEPRI, r3
 8009364:	f3bf 8f6f 	isb	sy
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	60fb      	str	r3, [r7, #12]
 800936e:	bf00      	nop
 8009370:	e7fe      	b.n	8009370 <xTaskCheckForTimeOut+0x40>
 8009372:	f000 ff8f 	bl	800a294 <vPortEnterCritical>
 8009376:	4b1d      	ldr	r3, [pc, #116]	; (80093ec <xTaskCheckForTimeOut+0xbc>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	61bb      	str	r3, [r7, #24]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	69ba      	ldr	r2, [r7, #24]
 8009382:	1ad3      	subs	r3, r2, r3
 8009384:	617b      	str	r3, [r7, #20]
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800938e:	d102      	bne.n	8009396 <xTaskCheckForTimeOut+0x66>
 8009390:	2300      	movs	r3, #0
 8009392:	61fb      	str	r3, [r7, #28]
 8009394:	e023      	b.n	80093de <xTaskCheckForTimeOut+0xae>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	4b15      	ldr	r3, [pc, #84]	; (80093f0 <xTaskCheckForTimeOut+0xc0>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d007      	beq.n	80093b2 <xTaskCheckForTimeOut+0x82>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	69ba      	ldr	r2, [r7, #24]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d302      	bcc.n	80093b2 <xTaskCheckForTimeOut+0x82>
 80093ac:	2301      	movs	r3, #1
 80093ae:	61fb      	str	r3, [r7, #28]
 80093b0:	e015      	b.n	80093de <xTaskCheckForTimeOut+0xae>
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	697a      	ldr	r2, [r7, #20]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d20b      	bcs.n	80093d4 <xTaskCheckForTimeOut+0xa4>
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	1ad2      	subs	r2, r2, r3
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	601a      	str	r2, [r3, #0]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f7ff ff9b 	bl	8009304 <vTaskInternalSetTimeOutState>
 80093ce:	2300      	movs	r3, #0
 80093d0:	61fb      	str	r3, [r7, #28]
 80093d2:	e004      	b.n	80093de <xTaskCheckForTimeOut+0xae>
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	2200      	movs	r2, #0
 80093d8:	601a      	str	r2, [r3, #0]
 80093da:	2301      	movs	r3, #1
 80093dc:	61fb      	str	r3, [r7, #28]
 80093de:	f000 ff89 	bl	800a2f4 <vPortExitCritical>
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	4618      	mov	r0, r3
 80093e6:	3720      	adds	r7, #32
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	20001430 	.word	0x20001430
 80093f0:	20001444 	.word	0x20001444

080093f4 <vTaskMissedYield>:
 80093f4:	b480      	push	{r7}
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	4b03      	ldr	r3, [pc, #12]	; (8009408 <vTaskMissedYield+0x14>)
 80093fa:	2201      	movs	r2, #1
 80093fc:	601a      	str	r2, [r3, #0]
 80093fe:	bf00      	nop
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	20001440 	.word	0x20001440

0800940c <prvIdleTask>:
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	f000 f852 	bl	80094bc <prvCheckTasksWaitingTermination>
 8009418:	4b06      	ldr	r3, [pc, #24]	; (8009434 <prvIdleTask+0x28>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d9f9      	bls.n	8009414 <prvIdleTask+0x8>
 8009420:	4b05      	ldr	r3, [pc, #20]	; (8009438 <prvIdleTask+0x2c>)
 8009422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009426:	601a      	str	r2, [r3, #0]
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	e7f0      	b.n	8009414 <prvIdleTask+0x8>
 8009432:	bf00      	nop
 8009434:	20000f5c 	.word	0x20000f5c
 8009438:	e000ed04 	.word	0xe000ed04

0800943c <prvInitialiseTaskLists>:
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	2300      	movs	r3, #0
 8009444:	607b      	str	r3, [r7, #4]
 8009446:	e00c      	b.n	8009462 <prvInitialiseTaskLists+0x26>
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	4613      	mov	r3, r2
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4413      	add	r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	4a12      	ldr	r2, [pc, #72]	; (800949c <prvInitialiseTaskLists+0x60>)
 8009454:	4413      	add	r3, r2
 8009456:	4618      	mov	r0, r3
 8009458:	f7fe fab6 	bl	80079c8 <vListInitialise>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	3301      	adds	r3, #1
 8009460:	607b      	str	r3, [r7, #4]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2b37      	cmp	r3, #55	; 0x37
 8009466:	d9ef      	bls.n	8009448 <prvInitialiseTaskLists+0xc>
 8009468:	480d      	ldr	r0, [pc, #52]	; (80094a0 <prvInitialiseTaskLists+0x64>)
 800946a:	f7fe faad 	bl	80079c8 <vListInitialise>
 800946e:	480d      	ldr	r0, [pc, #52]	; (80094a4 <prvInitialiseTaskLists+0x68>)
 8009470:	f7fe faaa 	bl	80079c8 <vListInitialise>
 8009474:	480c      	ldr	r0, [pc, #48]	; (80094a8 <prvInitialiseTaskLists+0x6c>)
 8009476:	f7fe faa7 	bl	80079c8 <vListInitialise>
 800947a:	480c      	ldr	r0, [pc, #48]	; (80094ac <prvInitialiseTaskLists+0x70>)
 800947c:	f7fe faa4 	bl	80079c8 <vListInitialise>
 8009480:	480b      	ldr	r0, [pc, #44]	; (80094b0 <prvInitialiseTaskLists+0x74>)
 8009482:	f7fe faa1 	bl	80079c8 <vListInitialise>
 8009486:	4b0b      	ldr	r3, [pc, #44]	; (80094b4 <prvInitialiseTaskLists+0x78>)
 8009488:	4a05      	ldr	r2, [pc, #20]	; (80094a0 <prvInitialiseTaskLists+0x64>)
 800948a:	601a      	str	r2, [r3, #0]
 800948c:	4b0a      	ldr	r3, [pc, #40]	; (80094b8 <prvInitialiseTaskLists+0x7c>)
 800948e:	4a05      	ldr	r2, [pc, #20]	; (80094a4 <prvInitialiseTaskLists+0x68>)
 8009490:	601a      	str	r2, [r3, #0]
 8009492:	bf00      	nop
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	20000f5c 	.word	0x20000f5c
 80094a0:	200013bc 	.word	0x200013bc
 80094a4:	200013d0 	.word	0x200013d0
 80094a8:	200013ec 	.word	0x200013ec
 80094ac:	20001400 	.word	0x20001400
 80094b0:	20001418 	.word	0x20001418
 80094b4:	200013e4 	.word	0x200013e4
 80094b8:	200013e8 	.word	0x200013e8

080094bc <prvCheckTasksWaitingTermination>:
 80094bc:	b580      	push	{r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	e019      	b.n	80094f8 <prvCheckTasksWaitingTermination+0x3c>
 80094c4:	f000 fee6 	bl	800a294 <vPortEnterCritical>
 80094c8:	4b10      	ldr	r3, [pc, #64]	; (800950c <prvCheckTasksWaitingTermination+0x50>)
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	607b      	str	r3, [r7, #4]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	3304      	adds	r3, #4
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7fe fb01 	bl	8007adc <uxListRemove>
 80094da:	4b0d      	ldr	r3, [pc, #52]	; (8009510 <prvCheckTasksWaitingTermination+0x54>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	3b01      	subs	r3, #1
 80094e0:	4a0b      	ldr	r2, [pc, #44]	; (8009510 <prvCheckTasksWaitingTermination+0x54>)
 80094e2:	6013      	str	r3, [r2, #0]
 80094e4:	4b0b      	ldr	r3, [pc, #44]	; (8009514 <prvCheckTasksWaitingTermination+0x58>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	3b01      	subs	r3, #1
 80094ea:	4a0a      	ldr	r2, [pc, #40]	; (8009514 <prvCheckTasksWaitingTermination+0x58>)
 80094ec:	6013      	str	r3, [r2, #0]
 80094ee:	f000 ff01 	bl	800a2f4 <vPortExitCritical>
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 f810 	bl	8009518 <prvDeleteTCB>
 80094f8:	4b06      	ldr	r3, [pc, #24]	; (8009514 <prvCheckTasksWaitingTermination+0x58>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1e1      	bne.n	80094c4 <prvCheckTasksWaitingTermination+0x8>
 8009500:	bf00      	nop
 8009502:	bf00      	nop
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	20001400 	.word	0x20001400
 8009510:	2000142c 	.word	0x2000142c
 8009514:	20001414 	.word	0x20001414

08009518 <prvDeleteTCB>:
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	3354      	adds	r3, #84	; 0x54
 8009524:	4618      	mov	r0, r3
 8009526:	f001 fb13 	bl	800ab50 <_reclaim_reent>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009530:	2b00      	cmp	r3, #0
 8009532:	d108      	bne.n	8009546 <prvDeleteTCB+0x2e>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009538:	4618      	mov	r0, r3
 800953a:	f001 f899 	bl	800a670 <vPortFree>
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f001 f896 	bl	800a670 <vPortFree>
 8009544:	e018      	b.n	8009578 <prvDeleteTCB+0x60>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800954c:	2b01      	cmp	r3, #1
 800954e:	d103      	bne.n	8009558 <prvDeleteTCB+0x40>
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f001 f88d 	bl	800a670 <vPortFree>
 8009556:	e00f      	b.n	8009578 <prvDeleteTCB+0x60>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800955e:	2b02      	cmp	r3, #2
 8009560:	d00a      	beq.n	8009578 <prvDeleteTCB+0x60>
 8009562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009566:	f383 8811 	msr	BASEPRI, r3
 800956a:	f3bf 8f6f 	isb	sy
 800956e:	f3bf 8f4f 	dsb	sy
 8009572:	60fb      	str	r3, [r7, #12]
 8009574:	bf00      	nop
 8009576:	e7fe      	b.n	8009576 <prvDeleteTCB+0x5e>
 8009578:	bf00      	nop
 800957a:	3710      	adds	r7, #16
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <prvResetNextTaskUnblockTime>:
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	4b0c      	ldr	r3, [pc, #48]	; (80095b8 <prvResetNextTaskUnblockTime+0x38>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d104      	bne.n	800959a <prvResetNextTaskUnblockTime+0x1a>
 8009590:	4b0a      	ldr	r3, [pc, #40]	; (80095bc <prvResetNextTaskUnblockTime+0x3c>)
 8009592:	f04f 32ff 	mov.w	r2, #4294967295
 8009596:	601a      	str	r2, [r3, #0]
 8009598:	e008      	b.n	80095ac <prvResetNextTaskUnblockTime+0x2c>
 800959a:	4b07      	ldr	r3, [pc, #28]	; (80095b8 <prvResetNextTaskUnblockTime+0x38>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	607b      	str	r3, [r7, #4]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	4a04      	ldr	r2, [pc, #16]	; (80095bc <prvResetNextTaskUnblockTime+0x3c>)
 80095aa:	6013      	str	r3, [r2, #0]
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	200013e4 	.word	0x200013e4
 80095bc:	2000144c 	.word	0x2000144c

080095c0 <xTaskGetCurrentTaskHandle>:
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	4b05      	ldr	r3, [pc, #20]	; (80095dc <xTaskGetCurrentTaskHandle+0x1c>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	607b      	str	r3, [r7, #4]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4618      	mov	r0, r3
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	20000f58 	.word	0x20000f58

080095e0 <xTaskGetSchedulerState>:
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	4b0b      	ldr	r3, [pc, #44]	; (8009614 <xTaskGetSchedulerState+0x34>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d102      	bne.n	80095f4 <xTaskGetSchedulerState+0x14>
 80095ee:	2301      	movs	r3, #1
 80095f0:	607b      	str	r3, [r7, #4]
 80095f2:	e008      	b.n	8009606 <xTaskGetSchedulerState+0x26>
 80095f4:	4b08      	ldr	r3, [pc, #32]	; (8009618 <xTaskGetSchedulerState+0x38>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d102      	bne.n	8009602 <xTaskGetSchedulerState+0x22>
 80095fc:	2302      	movs	r3, #2
 80095fe:	607b      	str	r3, [r7, #4]
 8009600:	e001      	b.n	8009606 <xTaskGetSchedulerState+0x26>
 8009602:	2300      	movs	r3, #0
 8009604:	607b      	str	r3, [r7, #4]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4618      	mov	r0, r3
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr
 8009614:	20001438 	.word	0x20001438
 8009618:	20001454 	.word	0x20001454

0800961c <xTaskPriorityInherit>:
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	60bb      	str	r3, [r7, #8]
 8009628:	2300      	movs	r3, #0
 800962a:	60fb      	str	r3, [r7, #12]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d051      	beq.n	80096d6 <xTaskPriorityInherit+0xba>
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009636:	4b2a      	ldr	r3, [pc, #168]	; (80096e0 <xTaskPriorityInherit+0xc4>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963c:	429a      	cmp	r2, r3
 800963e:	d241      	bcs.n	80096c4 <xTaskPriorityInherit+0xa8>
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	2b00      	cmp	r3, #0
 8009646:	db06      	blt.n	8009656 <xTaskPriorityInherit+0x3a>
 8009648:	4b25      	ldr	r3, [pc, #148]	; (80096e0 <xTaskPriorityInherit+0xc4>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	619a      	str	r2, [r3, #24]
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	6959      	ldr	r1, [r3, #20]
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965e:	4613      	mov	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	4413      	add	r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	4a1f      	ldr	r2, [pc, #124]	; (80096e4 <xTaskPriorityInherit+0xc8>)
 8009668:	4413      	add	r3, r2
 800966a:	4299      	cmp	r1, r3
 800966c:	d122      	bne.n	80096b4 <xTaskPriorityInherit+0x98>
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	3304      	adds	r3, #4
 8009672:	4618      	mov	r0, r3
 8009674:	f7fe fa32 	bl	8007adc <uxListRemove>
 8009678:	4b19      	ldr	r3, [pc, #100]	; (80096e0 <xTaskPriorityInherit+0xc4>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	62da      	str	r2, [r3, #44]	; 0x2c
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009686:	4b18      	ldr	r3, [pc, #96]	; (80096e8 <xTaskPriorityInherit+0xcc>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	429a      	cmp	r2, r3
 800968c:	d903      	bls.n	8009696 <xTaskPriorityInherit+0x7a>
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009692:	4a15      	ldr	r2, [pc, #84]	; (80096e8 <xTaskPriorityInherit+0xcc>)
 8009694:	6013      	str	r3, [r2, #0]
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800969a:	4613      	mov	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	4413      	add	r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	4a10      	ldr	r2, [pc, #64]	; (80096e4 <xTaskPriorityInherit+0xc8>)
 80096a4:	441a      	add	r2, r3
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	3304      	adds	r3, #4
 80096aa:	4619      	mov	r1, r3
 80096ac:	4610      	mov	r0, r2
 80096ae:	f7fe f9b8 	bl	8007a22 <vListInsertEnd>
 80096b2:	e004      	b.n	80096be <xTaskPriorityInherit+0xa2>
 80096b4:	4b0a      	ldr	r3, [pc, #40]	; (80096e0 <xTaskPriorityInherit+0xc4>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80096be:	2301      	movs	r3, #1
 80096c0:	60fb      	str	r3, [r7, #12]
 80096c2:	e008      	b.n	80096d6 <xTaskPriorityInherit+0xba>
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096c8:	4b05      	ldr	r3, [pc, #20]	; (80096e0 <xTaskPriorityInherit+0xc4>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d201      	bcs.n	80096d6 <xTaskPriorityInherit+0xba>
 80096d2:	2301      	movs	r3, #1
 80096d4:	60fb      	str	r3, [r7, #12]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	20000f58 	.word	0x20000f58
 80096e4:	20000f5c 	.word	0x20000f5c
 80096e8:	20001434 	.word	0x20001434

080096ec <xTaskPriorityDisinherit>:
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b086      	sub	sp, #24
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	613b      	str	r3, [r7, #16]
 80096f8:	2300      	movs	r3, #0
 80096fa:	617b      	str	r3, [r7, #20]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d056      	beq.n	80097b0 <xTaskPriorityDisinherit+0xc4>
 8009702:	4b2e      	ldr	r3, [pc, #184]	; (80097bc <xTaskPriorityDisinherit+0xd0>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	693a      	ldr	r2, [r7, #16]
 8009708:	429a      	cmp	r2, r3
 800970a:	d00a      	beq.n	8009722 <xTaskPriorityDisinherit+0x36>
 800970c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009710:	f383 8811 	msr	BASEPRI, r3
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	60fb      	str	r3, [r7, #12]
 800971e:	bf00      	nop
 8009720:	e7fe      	b.n	8009720 <xTaskPriorityDisinherit+0x34>
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009726:	2b00      	cmp	r3, #0
 8009728:	d10a      	bne.n	8009740 <xTaskPriorityDisinherit+0x54>
 800972a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972e:	f383 8811 	msr	BASEPRI, r3
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	60bb      	str	r3, [r7, #8]
 800973c:	bf00      	nop
 800973e:	e7fe      	b.n	800973e <xTaskPriorityDisinherit+0x52>
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009744:	1e5a      	subs	r2, r3, #1
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	651a      	str	r2, [r3, #80]	; 0x50
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009752:	429a      	cmp	r2, r3
 8009754:	d02c      	beq.n	80097b0 <xTaskPriorityDisinherit+0xc4>
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800975a:	2b00      	cmp	r3, #0
 800975c:	d128      	bne.n	80097b0 <xTaskPriorityDisinherit+0xc4>
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	3304      	adds	r3, #4
 8009762:	4618      	mov	r0, r3
 8009764:	f7fe f9ba 	bl	8007adc <uxListRemove>
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	62da      	str	r2, [r3, #44]	; 0x2c
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009774:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	619a      	str	r2, [r3, #24]
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009780:	4b0f      	ldr	r3, [pc, #60]	; (80097c0 <xTaskPriorityDisinherit+0xd4>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	429a      	cmp	r2, r3
 8009786:	d903      	bls.n	8009790 <xTaskPriorityDisinherit+0xa4>
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978c:	4a0c      	ldr	r2, [pc, #48]	; (80097c0 <xTaskPriorityDisinherit+0xd4>)
 800978e:	6013      	str	r3, [r2, #0]
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009794:	4613      	mov	r3, r2
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4413      	add	r3, r2
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	4a09      	ldr	r2, [pc, #36]	; (80097c4 <xTaskPriorityDisinherit+0xd8>)
 800979e:	441a      	add	r2, r3
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	3304      	adds	r3, #4
 80097a4:	4619      	mov	r1, r3
 80097a6:	4610      	mov	r0, r2
 80097a8:	f7fe f93b 	bl	8007a22 <vListInsertEnd>
 80097ac:	2301      	movs	r3, #1
 80097ae:	617b      	str	r3, [r7, #20]
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	4618      	mov	r0, r3
 80097b4:	3718      	adds	r7, #24
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	20000f58 	.word	0x20000f58
 80097c0:	20001434 	.word	0x20001434
 80097c4:	20000f5c 	.word	0x20000f5c

080097c8 <vTaskPriorityDisinheritAfterTimeout>:
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b088      	sub	sp, #32
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	61bb      	str	r3, [r7, #24]
 80097d6:	2301      	movs	r3, #1
 80097d8:	617b      	str	r3, [r7, #20]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d06a      	beq.n	80098b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10a      	bne.n	80097fe <vTaskPriorityDisinheritAfterTimeout+0x36>
 80097e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ec:	f383 8811 	msr	BASEPRI, r3
 80097f0:	f3bf 8f6f 	isb	sy
 80097f4:	f3bf 8f4f 	dsb	sy
 80097f8:	60fb      	str	r3, [r7, #12]
 80097fa:	bf00      	nop
 80097fc:	e7fe      	b.n	80097fc <vTaskPriorityDisinheritAfterTimeout+0x34>
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009802:	683a      	ldr	r2, [r7, #0]
 8009804:	429a      	cmp	r2, r3
 8009806:	d902      	bls.n	800980e <vTaskPriorityDisinheritAfterTimeout+0x46>
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	61fb      	str	r3, [r7, #28]
 800980c:	e002      	b.n	8009814 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009812:	61fb      	str	r3, [r7, #28]
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009818:	69fa      	ldr	r2, [r7, #28]
 800981a:	429a      	cmp	r2, r3
 800981c:	d04b      	beq.n	80098b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009822:	697a      	ldr	r2, [r7, #20]
 8009824:	429a      	cmp	r2, r3
 8009826:	d146      	bne.n	80098b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
 8009828:	4b25      	ldr	r3, [pc, #148]	; (80098c0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	69ba      	ldr	r2, [r7, #24]
 800982e:	429a      	cmp	r2, r3
 8009830:	d10a      	bne.n	8009848 <vTaskPriorityDisinheritAfterTimeout+0x80>
 8009832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009836:	f383 8811 	msr	BASEPRI, r3
 800983a:	f3bf 8f6f 	isb	sy
 800983e:	f3bf 8f4f 	dsb	sy
 8009842:	60bb      	str	r3, [r7, #8]
 8009844:	bf00      	nop
 8009846:	e7fe      	b.n	8009846 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984c:	613b      	str	r3, [r7, #16]
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	69fa      	ldr	r2, [r7, #28]
 8009852:	62da      	str	r2, [r3, #44]	; 0x2c
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	2b00      	cmp	r3, #0
 800985a:	db04      	blt.n	8009866 <vTaskPriorityDisinheritAfterTimeout+0x9e>
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	619a      	str	r2, [r3, #24]
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	6959      	ldr	r1, [r3, #20]
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	4613      	mov	r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	4413      	add	r3, r2
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	4a13      	ldr	r2, [pc, #76]	; (80098c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009876:	4413      	add	r3, r2
 8009878:	4299      	cmp	r1, r3
 800987a:	d11c      	bne.n	80098b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	3304      	adds	r3, #4
 8009880:	4618      	mov	r0, r3
 8009882:	f7fe f92b 	bl	8007adc <uxListRemove>
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800988a:	4b0f      	ldr	r3, [pc, #60]	; (80098c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	429a      	cmp	r2, r3
 8009890:	d903      	bls.n	800989a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009896:	4a0c      	ldr	r2, [pc, #48]	; (80098c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009898:	6013      	str	r3, [r2, #0]
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800989e:	4613      	mov	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4413      	add	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4a07      	ldr	r2, [pc, #28]	; (80098c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80098a8:	441a      	add	r2, r3
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	3304      	adds	r3, #4
 80098ae:	4619      	mov	r1, r3
 80098b0:	4610      	mov	r0, r2
 80098b2:	f7fe f8b6 	bl	8007a22 <vListInsertEnd>
 80098b6:	bf00      	nop
 80098b8:	3720      	adds	r7, #32
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	20000f58 	.word	0x20000f58
 80098c4:	20000f5c 	.word	0x20000f5c
 80098c8:	20001434 	.word	0x20001434

080098cc <pvTaskIncrementMutexHeldCount>:
 80098cc:	b480      	push	{r7}
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	4b07      	ldr	r3, [pc, #28]	; (80098f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d004      	beq.n	80098e2 <pvTaskIncrementMutexHeldCount+0x16>
 80098d8:	4b05      	ldr	r3, [pc, #20]	; (80098f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80098de:	3201      	adds	r2, #1
 80098e0:	651a      	str	r2, [r3, #80]	; 0x50
 80098e2:	4b03      	ldr	r3, [pc, #12]	; (80098f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4618      	mov	r0, r3
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr
 80098f0:	20000f58 	.word	0x20000f58

080098f4 <prvAddCurrentTaskToDelayedList>:
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
 80098fe:	4b21      	ldr	r3, [pc, #132]	; (8009984 <prvAddCurrentTaskToDelayedList+0x90>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	60fb      	str	r3, [r7, #12]
 8009904:	4b20      	ldr	r3, [pc, #128]	; (8009988 <prvAddCurrentTaskToDelayedList+0x94>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	3304      	adds	r3, #4
 800990a:	4618      	mov	r0, r3
 800990c:	f7fe f8e6 	bl	8007adc <uxListRemove>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009916:	d10a      	bne.n	800992e <prvAddCurrentTaskToDelayedList+0x3a>
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d007      	beq.n	800992e <prvAddCurrentTaskToDelayedList+0x3a>
 800991e:	4b1a      	ldr	r3, [pc, #104]	; (8009988 <prvAddCurrentTaskToDelayedList+0x94>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	3304      	adds	r3, #4
 8009924:	4619      	mov	r1, r3
 8009926:	4819      	ldr	r0, [pc, #100]	; (800998c <prvAddCurrentTaskToDelayedList+0x98>)
 8009928:	f7fe f87b 	bl	8007a22 <vListInsertEnd>
 800992c:	e026      	b.n	800997c <prvAddCurrentTaskToDelayedList+0x88>
 800992e:	68fa      	ldr	r2, [r7, #12]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4413      	add	r3, r2
 8009934:	60bb      	str	r3, [r7, #8]
 8009936:	4b14      	ldr	r3, [pc, #80]	; (8009988 <prvAddCurrentTaskToDelayedList+0x94>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	605a      	str	r2, [r3, #4]
 800993e:	68ba      	ldr	r2, [r7, #8]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	429a      	cmp	r2, r3
 8009944:	d209      	bcs.n	800995a <prvAddCurrentTaskToDelayedList+0x66>
 8009946:	4b12      	ldr	r3, [pc, #72]	; (8009990 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	4b0f      	ldr	r3, [pc, #60]	; (8009988 <prvAddCurrentTaskToDelayedList+0x94>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	3304      	adds	r3, #4
 8009950:	4619      	mov	r1, r3
 8009952:	4610      	mov	r0, r2
 8009954:	f7fe f889 	bl	8007a6a <vListInsert>
 8009958:	e010      	b.n	800997c <prvAddCurrentTaskToDelayedList+0x88>
 800995a:	4b0e      	ldr	r3, [pc, #56]	; (8009994 <prvAddCurrentTaskToDelayedList+0xa0>)
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	4b0a      	ldr	r3, [pc, #40]	; (8009988 <prvAddCurrentTaskToDelayedList+0x94>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3304      	adds	r3, #4
 8009964:	4619      	mov	r1, r3
 8009966:	4610      	mov	r0, r2
 8009968:	f7fe f87f 	bl	8007a6a <vListInsert>
 800996c:	4b0a      	ldr	r3, [pc, #40]	; (8009998 <prvAddCurrentTaskToDelayedList+0xa4>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	429a      	cmp	r2, r3
 8009974:	d202      	bcs.n	800997c <prvAddCurrentTaskToDelayedList+0x88>
 8009976:	4a08      	ldr	r2, [pc, #32]	; (8009998 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	6013      	str	r3, [r2, #0]
 800997c:	bf00      	nop
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	20001430 	.word	0x20001430
 8009988:	20000f58 	.word	0x20000f58
 800998c:	20001418 	.word	0x20001418
 8009990:	200013e8 	.word	0x200013e8
 8009994:	200013e4 	.word	0x200013e4
 8009998:	2000144c 	.word	0x2000144c

0800999c <xTimerCreateTimerTask>:
 800999c:	b580      	push	{r7, lr}
 800999e:	b08a      	sub	sp, #40	; 0x28
 80099a0:	af04      	add	r7, sp, #16
 80099a2:	2300      	movs	r3, #0
 80099a4:	617b      	str	r3, [r7, #20]
 80099a6:	f000 fb07 	bl	8009fb8 <prvCheckForValidListAndQueue>
 80099aa:	4b1c      	ldr	r3, [pc, #112]	; (8009a1c <xTimerCreateTimerTask+0x80>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d021      	beq.n	80099f6 <xTimerCreateTimerTask+0x5a>
 80099b2:	2300      	movs	r3, #0
 80099b4:	60fb      	str	r3, [r7, #12]
 80099b6:	2300      	movs	r3, #0
 80099b8:	60bb      	str	r3, [r7, #8]
 80099ba:	1d3a      	adds	r2, r7, #4
 80099bc:	f107 0108 	add.w	r1, r7, #8
 80099c0:	f107 030c 	add.w	r3, r7, #12
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7fd ffe5 	bl	8007994 <vApplicationGetTimerTaskMemory>
 80099ca:	6879      	ldr	r1, [r7, #4]
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	9202      	str	r2, [sp, #8]
 80099d2:	9301      	str	r3, [sp, #4]
 80099d4:	2302      	movs	r3, #2
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	2300      	movs	r3, #0
 80099da:	460a      	mov	r2, r1
 80099dc:	4910      	ldr	r1, [pc, #64]	; (8009a20 <xTimerCreateTimerTask+0x84>)
 80099de:	4811      	ldr	r0, [pc, #68]	; (8009a24 <xTimerCreateTimerTask+0x88>)
 80099e0:	f7fe ffa6 	bl	8008930 <xTaskCreateStatic>
 80099e4:	4603      	mov	r3, r0
 80099e6:	4a10      	ldr	r2, [pc, #64]	; (8009a28 <xTimerCreateTimerTask+0x8c>)
 80099e8:	6013      	str	r3, [r2, #0]
 80099ea:	4b0f      	ldr	r3, [pc, #60]	; (8009a28 <xTimerCreateTimerTask+0x8c>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d001      	beq.n	80099f6 <xTimerCreateTimerTask+0x5a>
 80099f2:	2301      	movs	r3, #1
 80099f4:	617b      	str	r3, [r7, #20]
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d10a      	bne.n	8009a12 <xTimerCreateTimerTask+0x76>
 80099fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a00:	f383 8811 	msr	BASEPRI, r3
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	613b      	str	r3, [r7, #16]
 8009a0e:	bf00      	nop
 8009a10:	e7fe      	b.n	8009a10 <xTimerCreateTimerTask+0x74>
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	4618      	mov	r0, r3
 8009a16:	3718      	adds	r7, #24
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	20001488 	.word	0x20001488
 8009a20:	0800adc0 	.word	0x0800adc0
 8009a24:	08009b61 	.word	0x08009b61
 8009a28:	2000148c 	.word	0x2000148c

08009a2c <xTimerGenericCommand>:
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b08a      	sub	sp, #40	; 0x28
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]
 8009a38:	603b      	str	r3, [r7, #0]
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d10a      	bne.n	8009a5a <xTimerGenericCommand+0x2e>
 8009a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a48:	f383 8811 	msr	BASEPRI, r3
 8009a4c:	f3bf 8f6f 	isb	sy
 8009a50:	f3bf 8f4f 	dsb	sy
 8009a54:	623b      	str	r3, [r7, #32]
 8009a56:	bf00      	nop
 8009a58:	e7fe      	b.n	8009a58 <xTimerGenericCommand+0x2c>
 8009a5a:	4b1a      	ldr	r3, [pc, #104]	; (8009ac4 <xTimerGenericCommand+0x98>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d02a      	beq.n	8009ab8 <xTimerGenericCommand+0x8c>
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	613b      	str	r3, [r7, #16]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	617b      	str	r3, [r7, #20]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	61bb      	str	r3, [r7, #24]
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	2b05      	cmp	r3, #5
 8009a72:	dc18      	bgt.n	8009aa6 <xTimerGenericCommand+0x7a>
 8009a74:	f7ff fdb4 	bl	80095e0 <xTaskGetSchedulerState>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b02      	cmp	r3, #2
 8009a7c:	d109      	bne.n	8009a92 <xTimerGenericCommand+0x66>
 8009a7e:	4b11      	ldr	r3, [pc, #68]	; (8009ac4 <xTimerGenericCommand+0x98>)
 8009a80:	6818      	ldr	r0, [r3, #0]
 8009a82:	f107 0110 	add.w	r1, r7, #16
 8009a86:	2300      	movs	r3, #0
 8009a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a8a:	f7fe fa45 	bl	8007f18 <xQueueGenericSend>
 8009a8e:	6278      	str	r0, [r7, #36]	; 0x24
 8009a90:	e012      	b.n	8009ab8 <xTimerGenericCommand+0x8c>
 8009a92:	4b0c      	ldr	r3, [pc, #48]	; (8009ac4 <xTimerGenericCommand+0x98>)
 8009a94:	6818      	ldr	r0, [r3, #0]
 8009a96:	f107 0110 	add.w	r1, r7, #16
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f7fe fa3b 	bl	8007f18 <xQueueGenericSend>
 8009aa2:	6278      	str	r0, [r7, #36]	; 0x24
 8009aa4:	e008      	b.n	8009ab8 <xTimerGenericCommand+0x8c>
 8009aa6:	4b07      	ldr	r3, [pc, #28]	; (8009ac4 <xTimerGenericCommand+0x98>)
 8009aa8:	6818      	ldr	r0, [r3, #0]
 8009aaa:	f107 0110 	add.w	r1, r7, #16
 8009aae:	2300      	movs	r3, #0
 8009ab0:	683a      	ldr	r2, [r7, #0]
 8009ab2:	f7fe fb2f 	bl	8008114 <xQueueGenericSendFromISR>
 8009ab6:	6278      	str	r0, [r7, #36]	; 0x24
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aba:	4618      	mov	r0, r3
 8009abc:	3728      	adds	r7, #40	; 0x28
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	20001488 	.word	0x20001488

08009ac8 <prvProcessExpiredTimer>:
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b088      	sub	sp, #32
 8009acc:	af02      	add	r7, sp, #8
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
 8009ad2:	4b22      	ldr	r3, [pc, #136]	; (8009b5c <prvProcessExpiredTimer+0x94>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	617b      	str	r3, [r7, #20]
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	3304      	adds	r3, #4
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7fd fffb 	bl	8007adc <uxListRemove>
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009aec:	f003 0304 	and.w	r3, r3, #4
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d022      	beq.n	8009b3a <prvProcessExpiredTimer+0x72>
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	699a      	ldr	r2, [r3, #24]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	18d1      	adds	r1, r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	6978      	ldr	r0, [r7, #20]
 8009b02:	f000 f8d1 	bl	8009ca8 <prvInsertTimerInActiveList>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d01f      	beq.n	8009b4c <prvProcessExpiredTimer+0x84>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	2300      	movs	r3, #0
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	2100      	movs	r1, #0
 8009b16:	6978      	ldr	r0, [r7, #20]
 8009b18:	f7ff ff88 	bl	8009a2c <xTimerGenericCommand>
 8009b1c:	6138      	str	r0, [r7, #16]
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d113      	bne.n	8009b4c <prvProcessExpiredTimer+0x84>
 8009b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b28:	f383 8811 	msr	BASEPRI, r3
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	60fb      	str	r3, [r7, #12]
 8009b36:	bf00      	nop
 8009b38:	e7fe      	b.n	8009b38 <prvProcessExpiredTimer+0x70>
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b40:	f023 0301 	bic.w	r3, r3, #1
 8009b44:	b2da      	uxtb	r2, r3
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	6a1b      	ldr	r3, [r3, #32]
 8009b50:	6978      	ldr	r0, [r7, #20]
 8009b52:	4798      	blx	r3
 8009b54:	bf00      	nop
 8009b56:	3718      	adds	r7, #24
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	20001480 	.word	0x20001480

08009b60 <prvTimerTask>:
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	f107 0308 	add.w	r3, r7, #8
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f000 f857 	bl	8009c20 <prvGetNextExpireTime>
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	4619      	mov	r1, r3
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f000 f803 	bl	8009b84 <prvProcessTimerOrBlockTask>
 8009b7e:	f000 f8d5 	bl	8009d2c <prvProcessReceivedCommands>
 8009b82:	e7f1      	b.n	8009b68 <prvTimerTask+0x8>

08009b84 <prvProcessTimerOrBlockTask>:
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
 8009b8e:	f7ff f92b 	bl	8008de8 <vTaskSuspendAll>
 8009b92:	f107 0308 	add.w	r3, r7, #8
 8009b96:	4618      	mov	r0, r3
 8009b98:	f000 f866 	bl	8009c68 <prvSampleTimeNow>
 8009b9c:	60f8      	str	r0, [r7, #12]
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d130      	bne.n	8009c06 <prvProcessTimerOrBlockTask+0x82>
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d10a      	bne.n	8009bc0 <prvProcessTimerOrBlockTask+0x3c>
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d806      	bhi.n	8009bc0 <prvProcessTimerOrBlockTask+0x3c>
 8009bb2:	f7ff f927 	bl	8008e04 <xTaskResumeAll>
 8009bb6:	68f9      	ldr	r1, [r7, #12]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f7ff ff85 	bl	8009ac8 <prvProcessExpiredTimer>
 8009bbe:	e024      	b.n	8009c0a <prvProcessTimerOrBlockTask+0x86>
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d008      	beq.n	8009bd8 <prvProcessTimerOrBlockTask+0x54>
 8009bc6:	4b13      	ldr	r3, [pc, #76]	; (8009c14 <prvProcessTimerOrBlockTask+0x90>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d101      	bne.n	8009bd4 <prvProcessTimerOrBlockTask+0x50>
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e000      	b.n	8009bd6 <prvProcessTimerOrBlockTask+0x52>
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	603b      	str	r3, [r7, #0]
 8009bd8:	4b0f      	ldr	r3, [pc, #60]	; (8009c18 <prvProcessTimerOrBlockTask+0x94>)
 8009bda:	6818      	ldr	r0, [r3, #0]
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	683a      	ldr	r2, [r7, #0]
 8009be4:	4619      	mov	r1, r3
 8009be6:	f7fe fe6f 	bl	80088c8 <vQueueWaitForMessageRestricted>
 8009bea:	f7ff f90b 	bl	8008e04 <xTaskResumeAll>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d10a      	bne.n	8009c0a <prvProcessTimerOrBlockTask+0x86>
 8009bf4:	4b09      	ldr	r3, [pc, #36]	; (8009c1c <prvProcessTimerOrBlockTask+0x98>)
 8009bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bfa:	601a      	str	r2, [r3, #0]
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	f3bf 8f6f 	isb	sy
 8009c04:	e001      	b.n	8009c0a <prvProcessTimerOrBlockTask+0x86>
 8009c06:	f7ff f8fd 	bl	8008e04 <xTaskResumeAll>
 8009c0a:	bf00      	nop
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	20001484 	.word	0x20001484
 8009c18:	20001488 	.word	0x20001488
 8009c1c:	e000ed04 	.word	0xe000ed04

08009c20 <prvGetNextExpireTime>:
 8009c20:	b480      	push	{r7}
 8009c22:	b085      	sub	sp, #20
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	4b0e      	ldr	r3, [pc, #56]	; (8009c64 <prvGetNextExpireTime+0x44>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d101      	bne.n	8009c36 <prvGetNextExpireTime+0x16>
 8009c32:	2201      	movs	r2, #1
 8009c34:	e000      	b.n	8009c38 <prvGetNextExpireTime+0x18>
 8009c36:	2200      	movs	r2, #0
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	601a      	str	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d105      	bne.n	8009c50 <prvGetNextExpireTime+0x30>
 8009c44:	4b07      	ldr	r3, [pc, #28]	; (8009c64 <prvGetNextExpireTime+0x44>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	60fb      	str	r3, [r7, #12]
 8009c4e:	e001      	b.n	8009c54 <prvGetNextExpireTime+0x34>
 8009c50:	2300      	movs	r3, #0
 8009c52:	60fb      	str	r3, [r7, #12]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	4618      	mov	r0, r3
 8009c58:	3714      	adds	r7, #20
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	20001480 	.word	0x20001480

08009c68 <prvSampleTimeNow>:
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	f7ff f966 	bl	8008f40 <xTaskGetTickCount>
 8009c74:	60f8      	str	r0, [r7, #12]
 8009c76:	4b0b      	ldr	r3, [pc, #44]	; (8009ca4 <prvSampleTimeNow+0x3c>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d205      	bcs.n	8009c8c <prvSampleTimeNow+0x24>
 8009c80:	f000 f936 	bl	8009ef0 <prvSwitchTimerLists>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	601a      	str	r2, [r3, #0]
 8009c8a:	e002      	b.n	8009c92 <prvSampleTimeNow+0x2a>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	601a      	str	r2, [r3, #0]
 8009c92:	4a04      	ldr	r2, [pc, #16]	; (8009ca4 <prvSampleTimeNow+0x3c>)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6013      	str	r3, [r2, #0]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	20001490 	.word	0x20001490

08009ca8 <prvInsertTimerInActiveList>:
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
 8009cb4:	603b      	str	r3, [r7, #0]
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	617b      	str	r3, [r7, #20]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	68ba      	ldr	r2, [r7, #8]
 8009cbe:	605a      	str	r2, [r3, #4]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	611a      	str	r2, [r3, #16]
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d812      	bhi.n	8009cf4 <prvInsertTimerInActiveList+0x4c>
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	1ad2      	subs	r2, r2, r3
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d302      	bcc.n	8009ce2 <prvInsertTimerInActiveList+0x3a>
 8009cdc:	2301      	movs	r3, #1
 8009cde:	617b      	str	r3, [r7, #20]
 8009ce0:	e01b      	b.n	8009d1a <prvInsertTimerInActiveList+0x72>
 8009ce2:	4b10      	ldr	r3, [pc, #64]	; (8009d24 <prvInsertTimerInActiveList+0x7c>)
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	3304      	adds	r3, #4
 8009cea:	4619      	mov	r1, r3
 8009cec:	4610      	mov	r0, r2
 8009cee:	f7fd febc 	bl	8007a6a <vListInsert>
 8009cf2:	e012      	b.n	8009d1a <prvInsertTimerInActiveList+0x72>
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d206      	bcs.n	8009d0a <prvInsertTimerInActiveList+0x62>
 8009cfc:	68ba      	ldr	r2, [r7, #8]
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d302      	bcc.n	8009d0a <prvInsertTimerInActiveList+0x62>
 8009d04:	2301      	movs	r3, #1
 8009d06:	617b      	str	r3, [r7, #20]
 8009d08:	e007      	b.n	8009d1a <prvInsertTimerInActiveList+0x72>
 8009d0a:	4b07      	ldr	r3, [pc, #28]	; (8009d28 <prvInsertTimerInActiveList+0x80>)
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	3304      	adds	r3, #4
 8009d12:	4619      	mov	r1, r3
 8009d14:	4610      	mov	r0, r2
 8009d16:	f7fd fea8 	bl	8007a6a <vListInsert>
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3718      	adds	r7, #24
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	20001484 	.word	0x20001484
 8009d28:	20001480 	.word	0x20001480

08009d2c <prvProcessReceivedCommands>:
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b08e      	sub	sp, #56	; 0x38
 8009d30:	af02      	add	r7, sp, #8
 8009d32:	e0ca      	b.n	8009eca <prvProcessReceivedCommands+0x19e>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	da18      	bge.n	8009d6c <prvProcessReceivedCommands+0x40>
 8009d3a:	1d3b      	adds	r3, r7, #4
 8009d3c:	3304      	adds	r3, #4
 8009d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d10a      	bne.n	8009d5c <prvProcessReceivedCommands+0x30>
 8009d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4a:	f383 8811 	msr	BASEPRI, r3
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f3bf 8f4f 	dsb	sy
 8009d56:	61fb      	str	r3, [r7, #28]
 8009d58:	bf00      	nop
 8009d5a:	e7fe      	b.n	8009d5a <prvProcessReceivedCommands+0x2e>
 8009d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d62:	6850      	ldr	r0, [r2, #4]
 8009d64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d66:	6892      	ldr	r2, [r2, #8]
 8009d68:	4611      	mov	r1, r2
 8009d6a:	4798      	blx	r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f2c0 80aa 	blt.w	8009ec8 <prvProcessReceivedCommands+0x19c>
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7a:	695b      	ldr	r3, [r3, #20]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d004      	beq.n	8009d8a <prvProcessReceivedCommands+0x5e>
 8009d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d82:	3304      	adds	r3, #4
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7fd fea9 	bl	8007adc <uxListRemove>
 8009d8a:	463b      	mov	r3, r7
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7ff ff6b 	bl	8009c68 <prvSampleTimeNow>
 8009d92:	6278      	str	r0, [r7, #36]	; 0x24
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b09      	cmp	r3, #9
 8009d98:	f200 8097 	bhi.w	8009eca <prvProcessReceivedCommands+0x19e>
 8009d9c:	a201      	add	r2, pc, #4	; (adr r2, 8009da4 <prvProcessReceivedCommands+0x78>)
 8009d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da2:	bf00      	nop
 8009da4:	08009dcd 	.word	0x08009dcd
 8009da8:	08009dcd 	.word	0x08009dcd
 8009dac:	08009dcd 	.word	0x08009dcd
 8009db0:	08009e41 	.word	0x08009e41
 8009db4:	08009e55 	.word	0x08009e55
 8009db8:	08009e9f 	.word	0x08009e9f
 8009dbc:	08009dcd 	.word	0x08009dcd
 8009dc0:	08009dcd 	.word	0x08009dcd
 8009dc4:	08009e41 	.word	0x08009e41
 8009dc8:	08009e55 	.word	0x08009e55
 8009dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dd2:	f043 0301 	orr.w	r3, r3, #1
 8009dd6:	b2da      	uxtb	r2, r3
 8009dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de2:	699b      	ldr	r3, [r3, #24]
 8009de4:	18d1      	adds	r1, r2, r3
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dec:	f7ff ff5c 	bl	8009ca8 <prvInsertTimerInActiveList>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d069      	beq.n	8009eca <prvProcessReceivedCommands+0x19e>
 8009df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df8:	6a1b      	ldr	r3, [r3, #32]
 8009dfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dfc:	4798      	blx	r3
 8009dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e04:	f003 0304 	and.w	r3, r3, #4
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d05e      	beq.n	8009eca <prvProcessReceivedCommands+0x19e>
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	441a      	add	r2, r3
 8009e14:	2300      	movs	r3, #0
 8009e16:	9300      	str	r3, [sp, #0]
 8009e18:	2300      	movs	r3, #0
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e1e:	f7ff fe05 	bl	8009a2c <xTimerGenericCommand>
 8009e22:	6238      	str	r0, [r7, #32]
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d14f      	bne.n	8009eca <prvProcessReceivedCommands+0x19e>
 8009e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	61bb      	str	r3, [r7, #24]
 8009e3c:	bf00      	nop
 8009e3e:	e7fe      	b.n	8009e3e <prvProcessReceivedCommands+0x112>
 8009e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e46:	f023 0301 	bic.w	r3, r3, #1
 8009e4a:	b2da      	uxtb	r2, r3
 8009e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009e52:	e03a      	b.n	8009eca <prvProcessReceivedCommands+0x19e>
 8009e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e5a:	f043 0301 	orr.w	r3, r3, #1
 8009e5e:	b2da      	uxtb	r2, r3
 8009e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6a:	619a      	str	r2, [r3, #24]
 8009e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6e:	699b      	ldr	r3, [r3, #24]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d10a      	bne.n	8009e8a <prvProcessReceivedCommands+0x15e>
 8009e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e78:	f383 8811 	msr	BASEPRI, r3
 8009e7c:	f3bf 8f6f 	isb	sy
 8009e80:	f3bf 8f4f 	dsb	sy
 8009e84:	617b      	str	r3, [r7, #20]
 8009e86:	bf00      	nop
 8009e88:	e7fe      	b.n	8009e88 <prvProcessReceivedCommands+0x15c>
 8009e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8c:	699a      	ldr	r2, [r3, #24]
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e90:	18d1      	adds	r1, r2, r3
 8009e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e98:	f7ff ff06 	bl	8009ca8 <prvInsertTimerInActiveList>
 8009e9c:	e015      	b.n	8009eca <prvProcessReceivedCommands+0x19e>
 8009e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ea4:	f003 0302 	and.w	r3, r3, #2
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d103      	bne.n	8009eb4 <prvProcessReceivedCommands+0x188>
 8009eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009eae:	f000 fbdf 	bl	800a670 <vPortFree>
 8009eb2:	e00a      	b.n	8009eca <prvProcessReceivedCommands+0x19e>
 8009eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009eba:	f023 0301 	bic.w	r3, r3, #1
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009ec6:	e000      	b.n	8009eca <prvProcessReceivedCommands+0x19e>
 8009ec8:	bf00      	nop
 8009eca:	4b08      	ldr	r3, [pc, #32]	; (8009eec <prvProcessReceivedCommands+0x1c0>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	1d39      	adds	r1, r7, #4
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fe f9ba 	bl	800824c <xQueueReceive>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f47f af2a 	bne.w	8009d34 <prvProcessReceivedCommands+0x8>
 8009ee0:	bf00      	nop
 8009ee2:	bf00      	nop
 8009ee4:	3730      	adds	r7, #48	; 0x30
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	20001488 	.word	0x20001488

08009ef0 <prvSwitchTimerLists>:
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b088      	sub	sp, #32
 8009ef4:	af02      	add	r7, sp, #8
 8009ef6:	e048      	b.n	8009f8a <prvSwitchTimerLists+0x9a>
 8009ef8:	4b2d      	ldr	r3, [pc, #180]	; (8009fb0 <prvSwitchTimerLists+0xc0>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	613b      	str	r3, [r7, #16]
 8009f02:	4b2b      	ldr	r3, [pc, #172]	; (8009fb0 <prvSwitchTimerLists+0xc0>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	60fb      	str	r3, [r7, #12]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	3304      	adds	r3, #4
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7fd fde3 	bl	8007adc <uxListRemove>
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6a1b      	ldr	r3, [r3, #32]
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	4798      	blx	r3
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f24:	f003 0304 	and.w	r3, r3, #4
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d02e      	beq.n	8009f8a <prvSwitchTimerLists+0x9a>
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	699b      	ldr	r3, [r3, #24]
 8009f30:	693a      	ldr	r2, [r7, #16]
 8009f32:	4413      	add	r3, r2
 8009f34:	60bb      	str	r3, [r7, #8]
 8009f36:	68ba      	ldr	r2, [r7, #8]
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d90e      	bls.n	8009f5c <prvSwitchTimerLists+0x6c>
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	605a      	str	r2, [r3, #4]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	611a      	str	r2, [r3, #16]
 8009f4a:	4b19      	ldr	r3, [pc, #100]	; (8009fb0 <prvSwitchTimerLists+0xc0>)
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	3304      	adds	r3, #4
 8009f52:	4619      	mov	r1, r3
 8009f54:	4610      	mov	r0, r2
 8009f56:	f7fd fd88 	bl	8007a6a <vListInsert>
 8009f5a:	e016      	b.n	8009f8a <prvSwitchTimerLists+0x9a>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	9300      	str	r3, [sp, #0]
 8009f60:	2300      	movs	r3, #0
 8009f62:	693a      	ldr	r2, [r7, #16]
 8009f64:	2100      	movs	r1, #0
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	f7ff fd60 	bl	8009a2c <xTimerGenericCommand>
 8009f6c:	6078      	str	r0, [r7, #4]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10a      	bne.n	8009f8a <prvSwitchTimerLists+0x9a>
 8009f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f78:	f383 8811 	msr	BASEPRI, r3
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	603b      	str	r3, [r7, #0]
 8009f86:	bf00      	nop
 8009f88:	e7fe      	b.n	8009f88 <prvSwitchTimerLists+0x98>
 8009f8a:	4b09      	ldr	r3, [pc, #36]	; (8009fb0 <prvSwitchTimerLists+0xc0>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d1b1      	bne.n	8009ef8 <prvSwitchTimerLists+0x8>
 8009f94:	4b06      	ldr	r3, [pc, #24]	; (8009fb0 <prvSwitchTimerLists+0xc0>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	617b      	str	r3, [r7, #20]
 8009f9a:	4b06      	ldr	r3, [pc, #24]	; (8009fb4 <prvSwitchTimerLists+0xc4>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a04      	ldr	r2, [pc, #16]	; (8009fb0 <prvSwitchTimerLists+0xc0>)
 8009fa0:	6013      	str	r3, [r2, #0]
 8009fa2:	4a04      	ldr	r2, [pc, #16]	; (8009fb4 <prvSwitchTimerLists+0xc4>)
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	6013      	str	r3, [r2, #0]
 8009fa8:	bf00      	nop
 8009faa:	3718      	adds	r7, #24
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	20001480 	.word	0x20001480
 8009fb4:	20001484 	.word	0x20001484

08009fb8 <prvCheckForValidListAndQueue>:
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af02      	add	r7, sp, #8
 8009fbe:	f000 f969 	bl	800a294 <vPortEnterCritical>
 8009fc2:	4b15      	ldr	r3, [pc, #84]	; (800a018 <prvCheckForValidListAndQueue+0x60>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d120      	bne.n	800a00c <prvCheckForValidListAndQueue+0x54>
 8009fca:	4814      	ldr	r0, [pc, #80]	; (800a01c <prvCheckForValidListAndQueue+0x64>)
 8009fcc:	f7fd fcfc 	bl	80079c8 <vListInitialise>
 8009fd0:	4813      	ldr	r0, [pc, #76]	; (800a020 <prvCheckForValidListAndQueue+0x68>)
 8009fd2:	f7fd fcf9 	bl	80079c8 <vListInitialise>
 8009fd6:	4b13      	ldr	r3, [pc, #76]	; (800a024 <prvCheckForValidListAndQueue+0x6c>)
 8009fd8:	4a10      	ldr	r2, [pc, #64]	; (800a01c <prvCheckForValidListAndQueue+0x64>)
 8009fda:	601a      	str	r2, [r3, #0]
 8009fdc:	4b12      	ldr	r3, [pc, #72]	; (800a028 <prvCheckForValidListAndQueue+0x70>)
 8009fde:	4a10      	ldr	r2, [pc, #64]	; (800a020 <prvCheckForValidListAndQueue+0x68>)
 8009fe0:	601a      	str	r2, [r3, #0]
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	9300      	str	r3, [sp, #0]
 8009fe6:	4b11      	ldr	r3, [pc, #68]	; (800a02c <prvCheckForValidListAndQueue+0x74>)
 8009fe8:	4a11      	ldr	r2, [pc, #68]	; (800a030 <prvCheckForValidListAndQueue+0x78>)
 8009fea:	2110      	movs	r1, #16
 8009fec:	200a      	movs	r0, #10
 8009fee:	f7fd fe07 	bl	8007c00 <xQueueGenericCreateStatic>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	4a08      	ldr	r2, [pc, #32]	; (800a018 <prvCheckForValidListAndQueue+0x60>)
 8009ff6:	6013      	str	r3, [r2, #0]
 8009ff8:	4b07      	ldr	r3, [pc, #28]	; (800a018 <prvCheckForValidListAndQueue+0x60>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d005      	beq.n	800a00c <prvCheckForValidListAndQueue+0x54>
 800a000:	4b05      	ldr	r3, [pc, #20]	; (800a018 <prvCheckForValidListAndQueue+0x60>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	490b      	ldr	r1, [pc, #44]	; (800a034 <prvCheckForValidListAndQueue+0x7c>)
 800a006:	4618      	mov	r0, r3
 800a008:	f7fe fc34 	bl	8008874 <vQueueAddToRegistry>
 800a00c:	f000 f972 	bl	800a2f4 <vPortExitCritical>
 800a010:	bf00      	nop
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	20001488 	.word	0x20001488
 800a01c:	20001458 	.word	0x20001458
 800a020:	2000146c 	.word	0x2000146c
 800a024:	20001480 	.word	0x20001480
 800a028:	20001484 	.word	0x20001484
 800a02c:	20001534 	.word	0x20001534
 800a030:	20001494 	.word	0x20001494
 800a034:	0800adc8 	.word	0x0800adc8

0800a038 <pxPortInitialiseStack>:
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	607a      	str	r2, [r7, #4]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	3b04      	subs	r3, #4
 800a048:	60fb      	str	r3, [r7, #12]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a050:	601a      	str	r2, [r3, #0]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	3b04      	subs	r3, #4
 800a056:	60fb      	str	r3, [r7, #12]
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	f023 0201 	bic.w	r2, r3, #1
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	601a      	str	r2, [r3, #0]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	3b04      	subs	r3, #4
 800a066:	60fb      	str	r3, [r7, #12]
 800a068:	4a0c      	ldr	r2, [pc, #48]	; (800a09c <pxPortInitialiseStack+0x64>)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	601a      	str	r2, [r3, #0]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	3b14      	subs	r3, #20
 800a072:	60fb      	str	r3, [r7, #12]
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	601a      	str	r2, [r3, #0]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	3b04      	subs	r3, #4
 800a07e:	60fb      	str	r3, [r7, #12]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f06f 0202 	mvn.w	r2, #2
 800a086:	601a      	str	r2, [r3, #0]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	3b20      	subs	r3, #32
 800a08c:	60fb      	str	r3, [r7, #12]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	4618      	mov	r0, r3
 800a092:	3714      	adds	r7, #20
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr
 800a09c:	0800a0a1 	.word	0x0800a0a1

0800a0a0 <prvTaskExitError>:
 800a0a0:	b480      	push	{r7}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	607b      	str	r3, [r7, #4]
 800a0aa:	4b12      	ldr	r3, [pc, #72]	; (800a0f4 <prvTaskExitError+0x54>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b2:	d00a      	beq.n	800a0ca <prvTaskExitError+0x2a>
 800a0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b8:	f383 8811 	msr	BASEPRI, r3
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	60fb      	str	r3, [r7, #12]
 800a0c6:	bf00      	nop
 800a0c8:	e7fe      	b.n	800a0c8 <prvTaskExitError+0x28>
 800a0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ce:	f383 8811 	msr	BASEPRI, r3
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	60bb      	str	r3, [r7, #8]
 800a0dc:	bf00      	nop
 800a0de:	bf00      	nop
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d0fc      	beq.n	800a0e0 <prvTaskExitError+0x40>
 800a0e6:	bf00      	nop
 800a0e8:	bf00      	nop
 800a0ea:	3714      	adds	r7, #20
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr
 800a0f4:	2000003c 	.word	0x2000003c
	...

0800a100 <SVC_Handler>:
 800a100:	4b07      	ldr	r3, [pc, #28]	; (800a120 <pxCurrentTCBConst2>)
 800a102:	6819      	ldr	r1, [r3, #0]
 800a104:	6808      	ldr	r0, [r1, #0]
 800a106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a10a:	f380 8809 	msr	PSP, r0
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	f04f 0000 	mov.w	r0, #0
 800a116:	f380 8811 	msr	BASEPRI, r0
 800a11a:	4770      	bx	lr
 800a11c:	f3af 8000 	nop.w

0800a120 <pxCurrentTCBConst2>:
 800a120:	20000f58 	.word	0x20000f58
 800a124:	bf00      	nop
 800a126:	bf00      	nop

0800a128 <prvPortStartFirstTask>:
 800a128:	4808      	ldr	r0, [pc, #32]	; (800a14c <prvPortStartFirstTask+0x24>)
 800a12a:	6800      	ldr	r0, [r0, #0]
 800a12c:	6800      	ldr	r0, [r0, #0]
 800a12e:	f380 8808 	msr	MSP, r0
 800a132:	f04f 0000 	mov.w	r0, #0
 800a136:	f380 8814 	msr	CONTROL, r0
 800a13a:	b662      	cpsie	i
 800a13c:	b661      	cpsie	f
 800a13e:	f3bf 8f4f 	dsb	sy
 800a142:	f3bf 8f6f 	isb	sy
 800a146:	df00      	svc	0
 800a148:	bf00      	nop
 800a14a:	bf00      	nop
 800a14c:	e000ed08 	.word	0xe000ed08

0800a150 <xPortStartScheduler>:
 800a150:	b580      	push	{r7, lr}
 800a152:	b086      	sub	sp, #24
 800a154:	af00      	add	r7, sp, #0
 800a156:	4b46      	ldr	r3, [pc, #280]	; (800a270 <xPortStartScheduler+0x120>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a46      	ldr	r2, [pc, #280]	; (800a274 <xPortStartScheduler+0x124>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d10a      	bne.n	800a176 <xPortStartScheduler+0x26>
 800a160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a164:	f383 8811 	msr	BASEPRI, r3
 800a168:	f3bf 8f6f 	isb	sy
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	613b      	str	r3, [r7, #16]
 800a172:	bf00      	nop
 800a174:	e7fe      	b.n	800a174 <xPortStartScheduler+0x24>
 800a176:	4b3e      	ldr	r3, [pc, #248]	; (800a270 <xPortStartScheduler+0x120>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a3f      	ldr	r2, [pc, #252]	; (800a278 <xPortStartScheduler+0x128>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d10a      	bne.n	800a196 <xPortStartScheduler+0x46>
 800a180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a184:	f383 8811 	msr	BASEPRI, r3
 800a188:	f3bf 8f6f 	isb	sy
 800a18c:	f3bf 8f4f 	dsb	sy
 800a190:	60fb      	str	r3, [r7, #12]
 800a192:	bf00      	nop
 800a194:	e7fe      	b.n	800a194 <xPortStartScheduler+0x44>
 800a196:	4b39      	ldr	r3, [pc, #228]	; (800a27c <xPortStartScheduler+0x12c>)
 800a198:	617b      	str	r3, [r7, #20]
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	607b      	str	r3, [r7, #4]
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	22ff      	movs	r2, #255	; 0xff
 800a1a6:	701a      	strb	r2, [r3, #0]
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	70fb      	strb	r3, [r7, #3]
 800a1b0:	78fb      	ldrb	r3, [r7, #3]
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a1b8:	b2da      	uxtb	r2, r3
 800a1ba:	4b31      	ldr	r3, [pc, #196]	; (800a280 <xPortStartScheduler+0x130>)
 800a1bc:	701a      	strb	r2, [r3, #0]
 800a1be:	4b31      	ldr	r3, [pc, #196]	; (800a284 <xPortStartScheduler+0x134>)
 800a1c0:	2207      	movs	r2, #7
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	e009      	b.n	800a1da <xPortStartScheduler+0x8a>
 800a1c6:	4b2f      	ldr	r3, [pc, #188]	; (800a284 <xPortStartScheduler+0x134>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	4a2d      	ldr	r2, [pc, #180]	; (800a284 <xPortStartScheduler+0x134>)
 800a1ce:	6013      	str	r3, [r2, #0]
 800a1d0:	78fb      	ldrb	r3, [r7, #3]
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	005b      	lsls	r3, r3, #1
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	70fb      	strb	r3, [r7, #3]
 800a1da:	78fb      	ldrb	r3, [r7, #3]
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1e2:	2b80      	cmp	r3, #128	; 0x80
 800a1e4:	d0ef      	beq.n	800a1c6 <xPortStartScheduler+0x76>
 800a1e6:	4b27      	ldr	r3, [pc, #156]	; (800a284 <xPortStartScheduler+0x134>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f1c3 0307 	rsb	r3, r3, #7
 800a1ee:	2b04      	cmp	r3, #4
 800a1f0:	d00a      	beq.n	800a208 <xPortStartScheduler+0xb8>
 800a1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f6:	f383 8811 	msr	BASEPRI, r3
 800a1fa:	f3bf 8f6f 	isb	sy
 800a1fe:	f3bf 8f4f 	dsb	sy
 800a202:	60bb      	str	r3, [r7, #8]
 800a204:	bf00      	nop
 800a206:	e7fe      	b.n	800a206 <xPortStartScheduler+0xb6>
 800a208:	4b1e      	ldr	r3, [pc, #120]	; (800a284 <xPortStartScheduler+0x134>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	021b      	lsls	r3, r3, #8
 800a20e:	4a1d      	ldr	r2, [pc, #116]	; (800a284 <xPortStartScheduler+0x134>)
 800a210:	6013      	str	r3, [r2, #0]
 800a212:	4b1c      	ldr	r3, [pc, #112]	; (800a284 <xPortStartScheduler+0x134>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a21a:	4a1a      	ldr	r2, [pc, #104]	; (800a284 <xPortStartScheduler+0x134>)
 800a21c:	6013      	str	r3, [r2, #0]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	b2da      	uxtb	r2, r3
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	701a      	strb	r2, [r3, #0]
 800a226:	4b18      	ldr	r3, [pc, #96]	; (800a288 <xPortStartScheduler+0x138>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a17      	ldr	r2, [pc, #92]	; (800a288 <xPortStartScheduler+0x138>)
 800a22c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a230:	6013      	str	r3, [r2, #0]
 800a232:	4b15      	ldr	r3, [pc, #84]	; (800a288 <xPortStartScheduler+0x138>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a14      	ldr	r2, [pc, #80]	; (800a288 <xPortStartScheduler+0x138>)
 800a238:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a23c:	6013      	str	r3, [r2, #0]
 800a23e:	f000 f8dd 	bl	800a3fc <vPortSetupTimerInterrupt>
 800a242:	4b12      	ldr	r3, [pc, #72]	; (800a28c <xPortStartScheduler+0x13c>)
 800a244:	2200      	movs	r2, #0
 800a246:	601a      	str	r2, [r3, #0]
 800a248:	f000 f8fc 	bl	800a444 <vPortEnableVFP>
 800a24c:	4b10      	ldr	r3, [pc, #64]	; (800a290 <xPortStartScheduler+0x140>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a0f      	ldr	r2, [pc, #60]	; (800a290 <xPortStartScheduler+0x140>)
 800a252:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a256:	6013      	str	r3, [r2, #0]
 800a258:	f7ff ff66 	bl	800a128 <prvPortStartFirstTask>
 800a25c:	f7fe ff3a 	bl	80090d4 <vTaskSwitchContext>
 800a260:	f7ff ff1e 	bl	800a0a0 <prvTaskExitError>
 800a264:	2300      	movs	r3, #0
 800a266:	4618      	mov	r0, r3
 800a268:	3718      	adds	r7, #24
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	e000ed00 	.word	0xe000ed00
 800a274:	410fc271 	.word	0x410fc271
 800a278:	410fc270 	.word	0x410fc270
 800a27c:	e000e400 	.word	0xe000e400
 800a280:	20001584 	.word	0x20001584
 800a284:	20001588 	.word	0x20001588
 800a288:	e000ed20 	.word	0xe000ed20
 800a28c:	2000003c 	.word	0x2000003c
 800a290:	e000ef34 	.word	0xe000ef34

0800a294 <vPortEnterCritical>:
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29e:	f383 8811 	msr	BASEPRI, r3
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	f3bf 8f4f 	dsb	sy
 800a2aa:	607b      	str	r3, [r7, #4]
 800a2ac:	bf00      	nop
 800a2ae:	4b0f      	ldr	r3, [pc, #60]	; (800a2ec <vPortEnterCritical+0x58>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	4a0d      	ldr	r2, [pc, #52]	; (800a2ec <vPortEnterCritical+0x58>)
 800a2b6:	6013      	str	r3, [r2, #0]
 800a2b8:	4b0c      	ldr	r3, [pc, #48]	; (800a2ec <vPortEnterCritical+0x58>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d10f      	bne.n	800a2e0 <vPortEnterCritical+0x4c>
 800a2c0:	4b0b      	ldr	r3, [pc, #44]	; (800a2f0 <vPortEnterCritical+0x5c>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00a      	beq.n	800a2e0 <vPortEnterCritical+0x4c>
 800a2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ce:	f383 8811 	msr	BASEPRI, r3
 800a2d2:	f3bf 8f6f 	isb	sy
 800a2d6:	f3bf 8f4f 	dsb	sy
 800a2da:	603b      	str	r3, [r7, #0]
 800a2dc:	bf00      	nop
 800a2de:	e7fe      	b.n	800a2de <vPortEnterCritical+0x4a>
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr
 800a2ec:	2000003c 	.word	0x2000003c
 800a2f0:	e000ed04 	.word	0xe000ed04

0800a2f4 <vPortExitCritical>:
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	4b12      	ldr	r3, [pc, #72]	; (800a344 <vPortExitCritical+0x50>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d10a      	bne.n	800a318 <vPortExitCritical+0x24>
 800a302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a306:	f383 8811 	msr	BASEPRI, r3
 800a30a:	f3bf 8f6f 	isb	sy
 800a30e:	f3bf 8f4f 	dsb	sy
 800a312:	607b      	str	r3, [r7, #4]
 800a314:	bf00      	nop
 800a316:	e7fe      	b.n	800a316 <vPortExitCritical+0x22>
 800a318:	4b0a      	ldr	r3, [pc, #40]	; (800a344 <vPortExitCritical+0x50>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	3b01      	subs	r3, #1
 800a31e:	4a09      	ldr	r2, [pc, #36]	; (800a344 <vPortExitCritical+0x50>)
 800a320:	6013      	str	r3, [r2, #0]
 800a322:	4b08      	ldr	r3, [pc, #32]	; (800a344 <vPortExitCritical+0x50>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d105      	bne.n	800a336 <vPortExitCritical+0x42>
 800a32a:	2300      	movs	r3, #0
 800a32c:	603b      	str	r3, [r7, #0]
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	f383 8811 	msr	BASEPRI, r3
 800a334:	bf00      	nop
 800a336:	bf00      	nop
 800a338:	370c      	adds	r7, #12
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	2000003c 	.word	0x2000003c
	...

0800a350 <PendSV_Handler>:
 800a350:	f3ef 8009 	mrs	r0, PSP
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	4b15      	ldr	r3, [pc, #84]	; (800a3b0 <pxCurrentTCBConst>)
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	f01e 0f10 	tst.w	lr, #16
 800a360:	bf08      	it	eq
 800a362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a36a:	6010      	str	r0, [r2, #0]
 800a36c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a370:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a374:	f380 8811 	msr	BASEPRI, r0
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	f7fe fea8 	bl	80090d4 <vTaskSwitchContext>
 800a384:	f04f 0000 	mov.w	r0, #0
 800a388:	f380 8811 	msr	BASEPRI, r0
 800a38c:	bc09      	pop	{r0, r3}
 800a38e:	6819      	ldr	r1, [r3, #0]
 800a390:	6808      	ldr	r0, [r1, #0]
 800a392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a396:	f01e 0f10 	tst.w	lr, #16
 800a39a:	bf08      	it	eq
 800a39c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a3a0:	f380 8809 	msr	PSP, r0
 800a3a4:	f3bf 8f6f 	isb	sy
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	f3af 8000 	nop.w

0800a3b0 <pxCurrentTCBConst>:
 800a3b0:	20000f58 	.word	0x20000f58
 800a3b4:	bf00      	nop
 800a3b6:	bf00      	nop

0800a3b8 <xPortSysTickHandler>:
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	607b      	str	r3, [r7, #4]
 800a3d0:	bf00      	nop
 800a3d2:	f7fe fdc5 	bl	8008f60 <xTaskIncrementTick>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d003      	beq.n	800a3e4 <xPortSysTickHandler+0x2c>
 800a3dc:	4b06      	ldr	r3, [pc, #24]	; (800a3f8 <xPortSysTickHandler+0x40>)
 800a3de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3e2:	601a      	str	r2, [r3, #0]
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	603b      	str	r3, [r7, #0]
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	f383 8811 	msr	BASEPRI, r3
 800a3ee:	bf00      	nop
 800a3f0:	bf00      	nop
 800a3f2:	3708      	adds	r7, #8
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	e000ed04 	.word	0xe000ed04

0800a3fc <vPortSetupTimerInterrupt>:
 800a3fc:	b480      	push	{r7}
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	4b0b      	ldr	r3, [pc, #44]	; (800a430 <vPortSetupTimerInterrupt+0x34>)
 800a402:	2200      	movs	r2, #0
 800a404:	601a      	str	r2, [r3, #0]
 800a406:	4b0b      	ldr	r3, [pc, #44]	; (800a434 <vPortSetupTimerInterrupt+0x38>)
 800a408:	2200      	movs	r2, #0
 800a40a:	601a      	str	r2, [r3, #0]
 800a40c:	4b0a      	ldr	r3, [pc, #40]	; (800a438 <vPortSetupTimerInterrupt+0x3c>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a0a      	ldr	r2, [pc, #40]	; (800a43c <vPortSetupTimerInterrupt+0x40>)
 800a412:	fba2 2303 	umull	r2, r3, r2, r3
 800a416:	099b      	lsrs	r3, r3, #6
 800a418:	4a09      	ldr	r2, [pc, #36]	; (800a440 <vPortSetupTimerInterrupt+0x44>)
 800a41a:	3b01      	subs	r3, #1
 800a41c:	6013      	str	r3, [r2, #0]
 800a41e:	4b04      	ldr	r3, [pc, #16]	; (800a430 <vPortSetupTimerInterrupt+0x34>)
 800a420:	2207      	movs	r2, #7
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	bf00      	nop
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop
 800a430:	e000e010 	.word	0xe000e010
 800a434:	e000e018 	.word	0xe000e018
 800a438:	20000030 	.word	0x20000030
 800a43c:	10624dd3 	.word	0x10624dd3
 800a440:	e000e014 	.word	0xe000e014

0800a444 <vPortEnableVFP>:
 800a444:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a454 <vPortEnableVFP+0x10>
 800a448:	6801      	ldr	r1, [r0, #0]
 800a44a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a44e:	6001      	str	r1, [r0, #0]
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	e000ed88 	.word	0xe000ed88

0800a458 <vPortValidateInterruptPriority>:
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	f3ef 8305 	mrs	r3, IPSR
 800a462:	60fb      	str	r3, [r7, #12]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2b0f      	cmp	r3, #15
 800a468:	d914      	bls.n	800a494 <vPortValidateInterruptPriority+0x3c>
 800a46a:	4a17      	ldr	r2, [pc, #92]	; (800a4c8 <vPortValidateInterruptPriority+0x70>)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	4413      	add	r3, r2
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	72fb      	strb	r3, [r7, #11]
 800a474:	4b15      	ldr	r3, [pc, #84]	; (800a4cc <vPortValidateInterruptPriority+0x74>)
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	7afa      	ldrb	r2, [r7, #11]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d20a      	bcs.n	800a494 <vPortValidateInterruptPriority+0x3c>
 800a47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a482:	f383 8811 	msr	BASEPRI, r3
 800a486:	f3bf 8f6f 	isb	sy
 800a48a:	f3bf 8f4f 	dsb	sy
 800a48e:	607b      	str	r3, [r7, #4]
 800a490:	bf00      	nop
 800a492:	e7fe      	b.n	800a492 <vPortValidateInterruptPriority+0x3a>
 800a494:	4b0e      	ldr	r3, [pc, #56]	; (800a4d0 <vPortValidateInterruptPriority+0x78>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a49c:	4b0d      	ldr	r3, [pc, #52]	; (800a4d4 <vPortValidateInterruptPriority+0x7c>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d90a      	bls.n	800a4ba <vPortValidateInterruptPriority+0x62>
 800a4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a8:	f383 8811 	msr	BASEPRI, r3
 800a4ac:	f3bf 8f6f 	isb	sy
 800a4b0:	f3bf 8f4f 	dsb	sy
 800a4b4:	603b      	str	r3, [r7, #0]
 800a4b6:	bf00      	nop
 800a4b8:	e7fe      	b.n	800a4b8 <vPortValidateInterruptPriority+0x60>
 800a4ba:	bf00      	nop
 800a4bc:	3714      	adds	r7, #20
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop
 800a4c8:	e000e3f0 	.word	0xe000e3f0
 800a4cc:	20001584 	.word	0x20001584
 800a4d0:	e000ed0c 	.word	0xe000ed0c
 800a4d4:	20001588 	.word	0x20001588

0800a4d8 <pvPortMalloc>:
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b08a      	sub	sp, #40	; 0x28
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	61fb      	str	r3, [r7, #28]
 800a4e4:	f7fe fc80 	bl	8008de8 <vTaskSuspendAll>
 800a4e8:	4b5b      	ldr	r3, [pc, #364]	; (800a658 <pvPortMalloc+0x180>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d101      	bne.n	800a4f4 <pvPortMalloc+0x1c>
 800a4f0:	f000 f920 	bl	800a734 <prvHeapInit>
 800a4f4:	4b59      	ldr	r3, [pc, #356]	; (800a65c <pvPortMalloc+0x184>)
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f040 8093 	bne.w	800a628 <pvPortMalloc+0x150>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d01d      	beq.n	800a544 <pvPortMalloc+0x6c>
 800a508:	2208      	movs	r2, #8
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4413      	add	r3, r2
 800a50e:	607b      	str	r3, [r7, #4]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f003 0307 	and.w	r3, r3, #7
 800a516:	2b00      	cmp	r3, #0
 800a518:	d014      	beq.n	800a544 <pvPortMalloc+0x6c>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f023 0307 	bic.w	r3, r3, #7
 800a520:	3308      	adds	r3, #8
 800a522:	607b      	str	r3, [r7, #4]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f003 0307 	and.w	r3, r3, #7
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00a      	beq.n	800a544 <pvPortMalloc+0x6c>
 800a52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a532:	f383 8811 	msr	BASEPRI, r3
 800a536:	f3bf 8f6f 	isb	sy
 800a53a:	f3bf 8f4f 	dsb	sy
 800a53e:	617b      	str	r3, [r7, #20]
 800a540:	bf00      	nop
 800a542:	e7fe      	b.n	800a542 <pvPortMalloc+0x6a>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d06e      	beq.n	800a628 <pvPortMalloc+0x150>
 800a54a:	4b45      	ldr	r3, [pc, #276]	; (800a660 <pvPortMalloc+0x188>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	429a      	cmp	r2, r3
 800a552:	d869      	bhi.n	800a628 <pvPortMalloc+0x150>
 800a554:	4b43      	ldr	r3, [pc, #268]	; (800a664 <pvPortMalloc+0x18c>)
 800a556:	623b      	str	r3, [r7, #32]
 800a558:	4b42      	ldr	r3, [pc, #264]	; (800a664 <pvPortMalloc+0x18c>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	627b      	str	r3, [r7, #36]	; 0x24
 800a55e:	e004      	b.n	800a56a <pvPortMalloc+0x92>
 800a560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a562:	623b      	str	r3, [r7, #32]
 800a564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	627b      	str	r3, [r7, #36]	; 0x24
 800a56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	429a      	cmp	r2, r3
 800a572:	d903      	bls.n	800a57c <pvPortMalloc+0xa4>
 800a574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d1f1      	bne.n	800a560 <pvPortMalloc+0x88>
 800a57c:	4b36      	ldr	r3, [pc, #216]	; (800a658 <pvPortMalloc+0x180>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a582:	429a      	cmp	r2, r3
 800a584:	d050      	beq.n	800a628 <pvPortMalloc+0x150>
 800a586:	6a3b      	ldr	r3, [r7, #32]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2208      	movs	r2, #8
 800a58c:	4413      	add	r3, r2
 800a58e:	61fb      	str	r3, [r7, #28]
 800a590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	6a3b      	ldr	r3, [r7, #32]
 800a596:	601a      	str	r2, [r3, #0]
 800a598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59a:	685a      	ldr	r2, [r3, #4]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	1ad2      	subs	r2, r2, r3
 800a5a0:	2308      	movs	r3, #8
 800a5a2:	005b      	lsls	r3, r3, #1
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d91f      	bls.n	800a5e8 <pvPortMalloc+0x110>
 800a5a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	61bb      	str	r3, [r7, #24]
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	f003 0307 	and.w	r3, r3, #7
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00a      	beq.n	800a5d0 <pvPortMalloc+0xf8>
 800a5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5be:	f383 8811 	msr	BASEPRI, r3
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	f3bf 8f4f 	dsb	sy
 800a5ca:	613b      	str	r3, [r7, #16]
 800a5cc:	bf00      	nop
 800a5ce:	e7fe      	b.n	800a5ce <pvPortMalloc+0xf6>
 800a5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d2:	685a      	ldr	r2, [r3, #4]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	1ad2      	subs	r2, r2, r3
 800a5d8:	69bb      	ldr	r3, [r7, #24]
 800a5da:	605a      	str	r2, [r3, #4]
 800a5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	605a      	str	r2, [r3, #4]
 800a5e2:	69b8      	ldr	r0, [r7, #24]
 800a5e4:	f000 f908 	bl	800a7f8 <prvInsertBlockIntoFreeList>
 800a5e8:	4b1d      	ldr	r3, [pc, #116]	; (800a660 <pvPortMalloc+0x188>)
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	1ad3      	subs	r3, r2, r3
 800a5f2:	4a1b      	ldr	r2, [pc, #108]	; (800a660 <pvPortMalloc+0x188>)
 800a5f4:	6013      	str	r3, [r2, #0]
 800a5f6:	4b1a      	ldr	r3, [pc, #104]	; (800a660 <pvPortMalloc+0x188>)
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	4b1b      	ldr	r3, [pc, #108]	; (800a668 <pvPortMalloc+0x190>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d203      	bcs.n	800a60a <pvPortMalloc+0x132>
 800a602:	4b17      	ldr	r3, [pc, #92]	; (800a660 <pvPortMalloc+0x188>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a18      	ldr	r2, [pc, #96]	; (800a668 <pvPortMalloc+0x190>)
 800a608:	6013      	str	r3, [r2, #0]
 800a60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60c:	685a      	ldr	r2, [r3, #4]
 800a60e:	4b13      	ldr	r3, [pc, #76]	; (800a65c <pvPortMalloc+0x184>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	431a      	orrs	r2, r3
 800a614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a616:	605a      	str	r2, [r3, #4]
 800a618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61a:	2200      	movs	r2, #0
 800a61c:	601a      	str	r2, [r3, #0]
 800a61e:	4b13      	ldr	r3, [pc, #76]	; (800a66c <pvPortMalloc+0x194>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	3301      	adds	r3, #1
 800a624:	4a11      	ldr	r2, [pc, #68]	; (800a66c <pvPortMalloc+0x194>)
 800a626:	6013      	str	r3, [r2, #0]
 800a628:	f7fe fbec 	bl	8008e04 <xTaskResumeAll>
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	f003 0307 	and.w	r3, r3, #7
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00a      	beq.n	800a64c <pvPortMalloc+0x174>
 800a636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63a:	f383 8811 	msr	BASEPRI, r3
 800a63e:	f3bf 8f6f 	isb	sy
 800a642:	f3bf 8f4f 	dsb	sy
 800a646:	60fb      	str	r3, [r7, #12]
 800a648:	bf00      	nop
 800a64a:	e7fe      	b.n	800a64a <pvPortMalloc+0x172>
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	4618      	mov	r0, r3
 800a650:	3728      	adds	r7, #40	; 0x28
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	20005194 	.word	0x20005194
 800a65c:	200051a8 	.word	0x200051a8
 800a660:	20005198 	.word	0x20005198
 800a664:	2000518c 	.word	0x2000518c
 800a668:	2000519c 	.word	0x2000519c
 800a66c:	200051a0 	.word	0x200051a0

0800a670 <vPortFree>:
 800a670:	b580      	push	{r7, lr}
 800a672:	b086      	sub	sp, #24
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	617b      	str	r3, [r7, #20]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d04d      	beq.n	800a71e <vPortFree+0xae>
 800a682:	2308      	movs	r3, #8
 800a684:	425b      	negs	r3, r3
 800a686:	697a      	ldr	r2, [r7, #20]
 800a688:	4413      	add	r3, r2
 800a68a:	617b      	str	r3, [r7, #20]
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	613b      	str	r3, [r7, #16]
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	685a      	ldr	r2, [r3, #4]
 800a694:	4b24      	ldr	r3, [pc, #144]	; (800a728 <vPortFree+0xb8>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4013      	ands	r3, r2
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d10a      	bne.n	800a6b4 <vPortFree+0x44>
 800a69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a2:	f383 8811 	msr	BASEPRI, r3
 800a6a6:	f3bf 8f6f 	isb	sy
 800a6aa:	f3bf 8f4f 	dsb	sy
 800a6ae:	60fb      	str	r3, [r7, #12]
 800a6b0:	bf00      	nop
 800a6b2:	e7fe      	b.n	800a6b2 <vPortFree+0x42>
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00a      	beq.n	800a6d2 <vPortFree+0x62>
 800a6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c0:	f383 8811 	msr	BASEPRI, r3
 800a6c4:	f3bf 8f6f 	isb	sy
 800a6c8:	f3bf 8f4f 	dsb	sy
 800a6cc:	60bb      	str	r3, [r7, #8]
 800a6ce:	bf00      	nop
 800a6d0:	e7fe      	b.n	800a6d0 <vPortFree+0x60>
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	685a      	ldr	r2, [r3, #4]
 800a6d6:	4b14      	ldr	r3, [pc, #80]	; (800a728 <vPortFree+0xb8>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4013      	ands	r3, r2
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d01e      	beq.n	800a71e <vPortFree+0xae>
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d11a      	bne.n	800a71e <vPortFree+0xae>
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	685a      	ldr	r2, [r3, #4]
 800a6ec:	4b0e      	ldr	r3, [pc, #56]	; (800a728 <vPortFree+0xb8>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	43db      	mvns	r3, r3
 800a6f2:	401a      	ands	r2, r3
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	605a      	str	r2, [r3, #4]
 800a6f8:	f7fe fb76 	bl	8008de8 <vTaskSuspendAll>
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	685a      	ldr	r2, [r3, #4]
 800a700:	4b0a      	ldr	r3, [pc, #40]	; (800a72c <vPortFree+0xbc>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4413      	add	r3, r2
 800a706:	4a09      	ldr	r2, [pc, #36]	; (800a72c <vPortFree+0xbc>)
 800a708:	6013      	str	r3, [r2, #0]
 800a70a:	6938      	ldr	r0, [r7, #16]
 800a70c:	f000 f874 	bl	800a7f8 <prvInsertBlockIntoFreeList>
 800a710:	4b07      	ldr	r3, [pc, #28]	; (800a730 <vPortFree+0xc0>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	3301      	adds	r3, #1
 800a716:	4a06      	ldr	r2, [pc, #24]	; (800a730 <vPortFree+0xc0>)
 800a718:	6013      	str	r3, [r2, #0]
 800a71a:	f7fe fb73 	bl	8008e04 <xTaskResumeAll>
 800a71e:	bf00      	nop
 800a720:	3718      	adds	r7, #24
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	200051a8 	.word	0x200051a8
 800a72c:	20005198 	.word	0x20005198
 800a730:	200051a4 	.word	0x200051a4

0800a734 <prvHeapInit>:
 800a734:	b480      	push	{r7}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
 800a73a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a73e:	60bb      	str	r3, [r7, #8]
 800a740:	4b27      	ldr	r3, [pc, #156]	; (800a7e0 <prvHeapInit+0xac>)
 800a742:	60fb      	str	r3, [r7, #12]
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f003 0307 	and.w	r3, r3, #7
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00c      	beq.n	800a768 <prvHeapInit+0x34>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	3307      	adds	r3, #7
 800a752:	60fb      	str	r3, [r7, #12]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f023 0307 	bic.w	r3, r3, #7
 800a75a:	60fb      	str	r3, [r7, #12]
 800a75c:	68ba      	ldr	r2, [r7, #8]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	1ad3      	subs	r3, r2, r3
 800a762:	4a1f      	ldr	r2, [pc, #124]	; (800a7e0 <prvHeapInit+0xac>)
 800a764:	4413      	add	r3, r2
 800a766:	60bb      	str	r3, [r7, #8]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	607b      	str	r3, [r7, #4]
 800a76c:	4a1d      	ldr	r2, [pc, #116]	; (800a7e4 <prvHeapInit+0xb0>)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6013      	str	r3, [r2, #0]
 800a772:	4b1c      	ldr	r3, [pc, #112]	; (800a7e4 <prvHeapInit+0xb0>)
 800a774:	2200      	movs	r2, #0
 800a776:	605a      	str	r2, [r3, #4]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	68ba      	ldr	r2, [r7, #8]
 800a77c:	4413      	add	r3, r2
 800a77e:	60fb      	str	r3, [r7, #12]
 800a780:	2208      	movs	r2, #8
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	1a9b      	subs	r3, r3, r2
 800a786:	60fb      	str	r3, [r7, #12]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f023 0307 	bic.w	r3, r3, #7
 800a78e:	60fb      	str	r3, [r7, #12]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	4a15      	ldr	r2, [pc, #84]	; (800a7e8 <prvHeapInit+0xb4>)
 800a794:	6013      	str	r3, [r2, #0]
 800a796:	4b14      	ldr	r3, [pc, #80]	; (800a7e8 <prvHeapInit+0xb4>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2200      	movs	r2, #0
 800a79c:	605a      	str	r2, [r3, #4]
 800a79e:	4b12      	ldr	r3, [pc, #72]	; (800a7e8 <prvHeapInit+0xb4>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	601a      	str	r2, [r3, #0]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	603b      	str	r3, [r7, #0]
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	1ad2      	subs	r2, r2, r3
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	605a      	str	r2, [r3, #4]
 800a7b4:	4b0c      	ldr	r3, [pc, #48]	; (800a7e8 <prvHeapInit+0xb4>)
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	601a      	str	r2, [r3, #0]
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	4a0a      	ldr	r2, [pc, #40]	; (800a7ec <prvHeapInit+0xb8>)
 800a7c2:	6013      	str	r3, [r2, #0]
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	4a09      	ldr	r2, [pc, #36]	; (800a7f0 <prvHeapInit+0xbc>)
 800a7ca:	6013      	str	r3, [r2, #0]
 800a7cc:	4b09      	ldr	r3, [pc, #36]	; (800a7f4 <prvHeapInit+0xc0>)
 800a7ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	bf00      	nop
 800a7d6:	3714      	adds	r7, #20
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr
 800a7e0:	2000158c 	.word	0x2000158c
 800a7e4:	2000518c 	.word	0x2000518c
 800a7e8:	20005194 	.word	0x20005194
 800a7ec:	2000519c 	.word	0x2000519c
 800a7f0:	20005198 	.word	0x20005198
 800a7f4:	200051a8 	.word	0x200051a8

0800a7f8 <prvInsertBlockIntoFreeList>:
 800a7f8:	b480      	push	{r7}
 800a7fa:	b085      	sub	sp, #20
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	4b28      	ldr	r3, [pc, #160]	; (800a8a4 <prvInsertBlockIntoFreeList+0xac>)
 800a802:	60fb      	str	r3, [r7, #12]
 800a804:	e002      	b.n	800a80c <prvInsertBlockIntoFreeList+0x14>
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	60fb      	str	r3, [r7, #12]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	429a      	cmp	r2, r3
 800a814:	d8f7      	bhi.n	800a806 <prvInsertBlockIntoFreeList+0xe>
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	60bb      	str	r3, [r7, #8]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	68ba      	ldr	r2, [r7, #8]
 800a820:	4413      	add	r3, r2
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	429a      	cmp	r2, r3
 800a826:	d108      	bne.n	800a83a <prvInsertBlockIntoFreeList+0x42>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	685a      	ldr	r2, [r3, #4]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	441a      	add	r2, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	605a      	str	r2, [r3, #4]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	607b      	str	r3, [r7, #4]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	60bb      	str	r3, [r7, #8]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	68ba      	ldr	r2, [r7, #8]
 800a844:	441a      	add	r2, r3
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d118      	bne.n	800a880 <prvInsertBlockIntoFreeList+0x88>
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	4b15      	ldr	r3, [pc, #84]	; (800a8a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	429a      	cmp	r2, r3
 800a858:	d00d      	beq.n	800a876 <prvInsertBlockIntoFreeList+0x7e>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	685a      	ldr	r2, [r3, #4]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	441a      	add	r2, r3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	605a      	str	r2, [r3, #4]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	601a      	str	r2, [r3, #0]
 800a874:	e008      	b.n	800a888 <prvInsertBlockIntoFreeList+0x90>
 800a876:	4b0c      	ldr	r3, [pc, #48]	; (800a8a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	601a      	str	r2, [r3, #0]
 800a87e:	e003      	b.n	800a888 <prvInsertBlockIntoFreeList+0x90>
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	601a      	str	r2, [r3, #0]
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d002      	beq.n	800a896 <prvInsertBlockIntoFreeList+0x9e>
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	601a      	str	r2, [r3, #0]
 800a896:	bf00      	nop
 800a898:	3714      	adds	r7, #20
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr
 800a8a2:	bf00      	nop
 800a8a4:	2000518c 	.word	0x2000518c
 800a8a8:	20005194 	.word	0x20005194

0800a8ac <__errno>:
 800a8ac:	4b01      	ldr	r3, [pc, #4]	; (800a8b4 <__errno+0x8>)
 800a8ae:	6818      	ldr	r0, [r3, #0]
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	20000040 	.word	0x20000040

0800a8b8 <__libc_init_array>:
 800a8b8:	b570      	push	{r4, r5, r6, lr}
 800a8ba:	4d0d      	ldr	r5, [pc, #52]	; (800a8f0 <__libc_init_array+0x38>)
 800a8bc:	4c0d      	ldr	r4, [pc, #52]	; (800a8f4 <__libc_init_array+0x3c>)
 800a8be:	1b64      	subs	r4, r4, r5
 800a8c0:	10a4      	asrs	r4, r4, #2
 800a8c2:	2600      	movs	r6, #0
 800a8c4:	42a6      	cmp	r6, r4
 800a8c6:	d109      	bne.n	800a8dc <__libc_init_array+0x24>
 800a8c8:	4d0b      	ldr	r5, [pc, #44]	; (800a8f8 <__libc_init_array+0x40>)
 800a8ca:	4c0c      	ldr	r4, [pc, #48]	; (800a8fc <__libc_init_array+0x44>)
 800a8cc:	f000 f9fa 	bl	800acc4 <_init>
 800a8d0:	1b64      	subs	r4, r4, r5
 800a8d2:	10a4      	asrs	r4, r4, #2
 800a8d4:	2600      	movs	r6, #0
 800a8d6:	42a6      	cmp	r6, r4
 800a8d8:	d105      	bne.n	800a8e6 <__libc_init_array+0x2e>
 800a8da:	bd70      	pop	{r4, r5, r6, pc}
 800a8dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8e0:	4798      	blx	r3
 800a8e2:	3601      	adds	r6, #1
 800a8e4:	e7ee      	b.n	800a8c4 <__libc_init_array+0xc>
 800a8e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ea:	4798      	blx	r3
 800a8ec:	3601      	adds	r6, #1
 800a8ee:	e7f2      	b.n	800a8d6 <__libc_init_array+0x1e>
 800a8f0:	0800c3e8 	.word	0x0800c3e8
 800a8f4:	0800c3e8 	.word	0x0800c3e8
 800a8f8:	0800c3e8 	.word	0x0800c3e8
 800a8fc:	0800c3ec 	.word	0x0800c3ec

0800a900 <__itoa>:
 800a900:	1e93      	subs	r3, r2, #2
 800a902:	2b22      	cmp	r3, #34	; 0x22
 800a904:	b510      	push	{r4, lr}
 800a906:	460c      	mov	r4, r1
 800a908:	d904      	bls.n	800a914 <__itoa+0x14>
 800a90a:	2300      	movs	r3, #0
 800a90c:	700b      	strb	r3, [r1, #0]
 800a90e:	461c      	mov	r4, r3
 800a910:	4620      	mov	r0, r4
 800a912:	bd10      	pop	{r4, pc}
 800a914:	2a0a      	cmp	r2, #10
 800a916:	d109      	bne.n	800a92c <__itoa+0x2c>
 800a918:	2800      	cmp	r0, #0
 800a91a:	da07      	bge.n	800a92c <__itoa+0x2c>
 800a91c:	232d      	movs	r3, #45	; 0x2d
 800a91e:	700b      	strb	r3, [r1, #0]
 800a920:	4240      	negs	r0, r0
 800a922:	2101      	movs	r1, #1
 800a924:	4421      	add	r1, r4
 800a926:	f000 f97f 	bl	800ac28 <__utoa>
 800a92a:	e7f1      	b.n	800a910 <__itoa+0x10>
 800a92c:	2100      	movs	r1, #0
 800a92e:	e7f9      	b.n	800a924 <__itoa+0x24>

0800a930 <itoa>:
 800a930:	f7ff bfe6 	b.w	800a900 <__itoa>

0800a934 <__retarget_lock_acquire_recursive>:
 800a934:	4770      	bx	lr

0800a936 <__retarget_lock_release_recursive>:
 800a936:	4770      	bx	lr

0800a938 <malloc>:
 800a938:	4b02      	ldr	r3, [pc, #8]	; (800a944 <malloc+0xc>)
 800a93a:	4601      	mov	r1, r0
 800a93c:	6818      	ldr	r0, [r3, #0]
 800a93e:	f000 b885 	b.w	800aa4c <_malloc_r>
 800a942:	bf00      	nop
 800a944:	20000040 	.word	0x20000040

0800a948 <memcpy>:
 800a948:	440a      	add	r2, r1
 800a94a:	4291      	cmp	r1, r2
 800a94c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a950:	d100      	bne.n	800a954 <memcpy+0xc>
 800a952:	4770      	bx	lr
 800a954:	b510      	push	{r4, lr}
 800a956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a95a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a95e:	4291      	cmp	r1, r2
 800a960:	d1f9      	bne.n	800a956 <memcpy+0xe>
 800a962:	bd10      	pop	{r4, pc}

0800a964 <memset>:
 800a964:	4402      	add	r2, r0
 800a966:	4603      	mov	r3, r0
 800a968:	4293      	cmp	r3, r2
 800a96a:	d100      	bne.n	800a96e <memset+0xa>
 800a96c:	4770      	bx	lr
 800a96e:	f803 1b01 	strb.w	r1, [r3], #1
 800a972:	e7f9      	b.n	800a968 <memset+0x4>

0800a974 <_free_r>:
 800a974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a976:	2900      	cmp	r1, #0
 800a978:	d044      	beq.n	800aa04 <_free_r+0x90>
 800a97a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a97e:	9001      	str	r0, [sp, #4]
 800a980:	2b00      	cmp	r3, #0
 800a982:	f1a1 0404 	sub.w	r4, r1, #4
 800a986:	bfb8      	it	lt
 800a988:	18e4      	addlt	r4, r4, r3
 800a98a:	f000 f98f 	bl	800acac <__malloc_lock>
 800a98e:	4a1e      	ldr	r2, [pc, #120]	; (800aa08 <_free_r+0x94>)
 800a990:	9801      	ldr	r0, [sp, #4]
 800a992:	6813      	ldr	r3, [r2, #0]
 800a994:	b933      	cbnz	r3, 800a9a4 <_free_r+0x30>
 800a996:	6063      	str	r3, [r4, #4]
 800a998:	6014      	str	r4, [r2, #0]
 800a99a:	b003      	add	sp, #12
 800a99c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9a0:	f000 b98a 	b.w	800acb8 <__malloc_unlock>
 800a9a4:	42a3      	cmp	r3, r4
 800a9a6:	d908      	bls.n	800a9ba <_free_r+0x46>
 800a9a8:	6825      	ldr	r5, [r4, #0]
 800a9aa:	1961      	adds	r1, r4, r5
 800a9ac:	428b      	cmp	r3, r1
 800a9ae:	bf01      	itttt	eq
 800a9b0:	6819      	ldreq	r1, [r3, #0]
 800a9b2:	685b      	ldreq	r3, [r3, #4]
 800a9b4:	1949      	addeq	r1, r1, r5
 800a9b6:	6021      	streq	r1, [r4, #0]
 800a9b8:	e7ed      	b.n	800a996 <_free_r+0x22>
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	b10b      	cbz	r3, 800a9c4 <_free_r+0x50>
 800a9c0:	42a3      	cmp	r3, r4
 800a9c2:	d9fa      	bls.n	800a9ba <_free_r+0x46>
 800a9c4:	6811      	ldr	r1, [r2, #0]
 800a9c6:	1855      	adds	r5, r2, r1
 800a9c8:	42a5      	cmp	r5, r4
 800a9ca:	d10b      	bne.n	800a9e4 <_free_r+0x70>
 800a9cc:	6824      	ldr	r4, [r4, #0]
 800a9ce:	4421      	add	r1, r4
 800a9d0:	1854      	adds	r4, r2, r1
 800a9d2:	42a3      	cmp	r3, r4
 800a9d4:	6011      	str	r1, [r2, #0]
 800a9d6:	d1e0      	bne.n	800a99a <_free_r+0x26>
 800a9d8:	681c      	ldr	r4, [r3, #0]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	6053      	str	r3, [r2, #4]
 800a9de:	4421      	add	r1, r4
 800a9e0:	6011      	str	r1, [r2, #0]
 800a9e2:	e7da      	b.n	800a99a <_free_r+0x26>
 800a9e4:	d902      	bls.n	800a9ec <_free_r+0x78>
 800a9e6:	230c      	movs	r3, #12
 800a9e8:	6003      	str	r3, [r0, #0]
 800a9ea:	e7d6      	b.n	800a99a <_free_r+0x26>
 800a9ec:	6825      	ldr	r5, [r4, #0]
 800a9ee:	1961      	adds	r1, r4, r5
 800a9f0:	428b      	cmp	r3, r1
 800a9f2:	bf04      	itt	eq
 800a9f4:	6819      	ldreq	r1, [r3, #0]
 800a9f6:	685b      	ldreq	r3, [r3, #4]
 800a9f8:	6063      	str	r3, [r4, #4]
 800a9fa:	bf04      	itt	eq
 800a9fc:	1949      	addeq	r1, r1, r5
 800a9fe:	6021      	streq	r1, [r4, #0]
 800aa00:	6054      	str	r4, [r2, #4]
 800aa02:	e7ca      	b.n	800a99a <_free_r+0x26>
 800aa04:	b003      	add	sp, #12
 800aa06:	bd30      	pop	{r4, r5, pc}
 800aa08:	200051b0 	.word	0x200051b0

0800aa0c <sbrk_aligned>:
 800aa0c:	b570      	push	{r4, r5, r6, lr}
 800aa0e:	4e0e      	ldr	r6, [pc, #56]	; (800aa48 <sbrk_aligned+0x3c>)
 800aa10:	460c      	mov	r4, r1
 800aa12:	6831      	ldr	r1, [r6, #0]
 800aa14:	4605      	mov	r5, r0
 800aa16:	b911      	cbnz	r1, 800aa1e <sbrk_aligned+0x12>
 800aa18:	f000 f8f6 	bl	800ac08 <_sbrk_r>
 800aa1c:	6030      	str	r0, [r6, #0]
 800aa1e:	4621      	mov	r1, r4
 800aa20:	4628      	mov	r0, r5
 800aa22:	f000 f8f1 	bl	800ac08 <_sbrk_r>
 800aa26:	1c43      	adds	r3, r0, #1
 800aa28:	d00a      	beq.n	800aa40 <sbrk_aligned+0x34>
 800aa2a:	1cc4      	adds	r4, r0, #3
 800aa2c:	f024 0403 	bic.w	r4, r4, #3
 800aa30:	42a0      	cmp	r0, r4
 800aa32:	d007      	beq.n	800aa44 <sbrk_aligned+0x38>
 800aa34:	1a21      	subs	r1, r4, r0
 800aa36:	4628      	mov	r0, r5
 800aa38:	f000 f8e6 	bl	800ac08 <_sbrk_r>
 800aa3c:	3001      	adds	r0, #1
 800aa3e:	d101      	bne.n	800aa44 <sbrk_aligned+0x38>
 800aa40:	f04f 34ff 	mov.w	r4, #4294967295
 800aa44:	4620      	mov	r0, r4
 800aa46:	bd70      	pop	{r4, r5, r6, pc}
 800aa48:	200051b4 	.word	0x200051b4

0800aa4c <_malloc_r>:
 800aa4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa50:	1ccd      	adds	r5, r1, #3
 800aa52:	f025 0503 	bic.w	r5, r5, #3
 800aa56:	3508      	adds	r5, #8
 800aa58:	2d0c      	cmp	r5, #12
 800aa5a:	bf38      	it	cc
 800aa5c:	250c      	movcc	r5, #12
 800aa5e:	2d00      	cmp	r5, #0
 800aa60:	4607      	mov	r7, r0
 800aa62:	db01      	blt.n	800aa68 <_malloc_r+0x1c>
 800aa64:	42a9      	cmp	r1, r5
 800aa66:	d905      	bls.n	800aa74 <_malloc_r+0x28>
 800aa68:	230c      	movs	r3, #12
 800aa6a:	603b      	str	r3, [r7, #0]
 800aa6c:	2600      	movs	r6, #0
 800aa6e:	4630      	mov	r0, r6
 800aa70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa74:	4e2e      	ldr	r6, [pc, #184]	; (800ab30 <_malloc_r+0xe4>)
 800aa76:	f000 f919 	bl	800acac <__malloc_lock>
 800aa7a:	6833      	ldr	r3, [r6, #0]
 800aa7c:	461c      	mov	r4, r3
 800aa7e:	bb34      	cbnz	r4, 800aace <_malloc_r+0x82>
 800aa80:	4629      	mov	r1, r5
 800aa82:	4638      	mov	r0, r7
 800aa84:	f7ff ffc2 	bl	800aa0c <sbrk_aligned>
 800aa88:	1c43      	adds	r3, r0, #1
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	d14d      	bne.n	800ab2a <_malloc_r+0xde>
 800aa8e:	6834      	ldr	r4, [r6, #0]
 800aa90:	4626      	mov	r6, r4
 800aa92:	2e00      	cmp	r6, #0
 800aa94:	d140      	bne.n	800ab18 <_malloc_r+0xcc>
 800aa96:	6823      	ldr	r3, [r4, #0]
 800aa98:	4631      	mov	r1, r6
 800aa9a:	4638      	mov	r0, r7
 800aa9c:	eb04 0803 	add.w	r8, r4, r3
 800aaa0:	f000 f8b2 	bl	800ac08 <_sbrk_r>
 800aaa4:	4580      	cmp	r8, r0
 800aaa6:	d13a      	bne.n	800ab1e <_malloc_r+0xd2>
 800aaa8:	6821      	ldr	r1, [r4, #0]
 800aaaa:	3503      	adds	r5, #3
 800aaac:	1a6d      	subs	r5, r5, r1
 800aaae:	f025 0503 	bic.w	r5, r5, #3
 800aab2:	3508      	adds	r5, #8
 800aab4:	2d0c      	cmp	r5, #12
 800aab6:	bf38      	it	cc
 800aab8:	250c      	movcc	r5, #12
 800aaba:	4629      	mov	r1, r5
 800aabc:	4638      	mov	r0, r7
 800aabe:	f7ff ffa5 	bl	800aa0c <sbrk_aligned>
 800aac2:	3001      	adds	r0, #1
 800aac4:	d02b      	beq.n	800ab1e <_malloc_r+0xd2>
 800aac6:	6823      	ldr	r3, [r4, #0]
 800aac8:	442b      	add	r3, r5
 800aaca:	6023      	str	r3, [r4, #0]
 800aacc:	e00e      	b.n	800aaec <_malloc_r+0xa0>
 800aace:	6822      	ldr	r2, [r4, #0]
 800aad0:	1b52      	subs	r2, r2, r5
 800aad2:	d41e      	bmi.n	800ab12 <_malloc_r+0xc6>
 800aad4:	2a0b      	cmp	r2, #11
 800aad6:	d916      	bls.n	800ab06 <_malloc_r+0xba>
 800aad8:	1961      	adds	r1, r4, r5
 800aada:	42a3      	cmp	r3, r4
 800aadc:	6025      	str	r5, [r4, #0]
 800aade:	bf18      	it	ne
 800aae0:	6059      	strne	r1, [r3, #4]
 800aae2:	6863      	ldr	r3, [r4, #4]
 800aae4:	bf08      	it	eq
 800aae6:	6031      	streq	r1, [r6, #0]
 800aae8:	5162      	str	r2, [r4, r5]
 800aaea:	604b      	str	r3, [r1, #4]
 800aaec:	4638      	mov	r0, r7
 800aaee:	f104 060b 	add.w	r6, r4, #11
 800aaf2:	f000 f8e1 	bl	800acb8 <__malloc_unlock>
 800aaf6:	f026 0607 	bic.w	r6, r6, #7
 800aafa:	1d23      	adds	r3, r4, #4
 800aafc:	1af2      	subs	r2, r6, r3
 800aafe:	d0b6      	beq.n	800aa6e <_malloc_r+0x22>
 800ab00:	1b9b      	subs	r3, r3, r6
 800ab02:	50a3      	str	r3, [r4, r2]
 800ab04:	e7b3      	b.n	800aa6e <_malloc_r+0x22>
 800ab06:	6862      	ldr	r2, [r4, #4]
 800ab08:	42a3      	cmp	r3, r4
 800ab0a:	bf0c      	ite	eq
 800ab0c:	6032      	streq	r2, [r6, #0]
 800ab0e:	605a      	strne	r2, [r3, #4]
 800ab10:	e7ec      	b.n	800aaec <_malloc_r+0xa0>
 800ab12:	4623      	mov	r3, r4
 800ab14:	6864      	ldr	r4, [r4, #4]
 800ab16:	e7b2      	b.n	800aa7e <_malloc_r+0x32>
 800ab18:	4634      	mov	r4, r6
 800ab1a:	6876      	ldr	r6, [r6, #4]
 800ab1c:	e7b9      	b.n	800aa92 <_malloc_r+0x46>
 800ab1e:	230c      	movs	r3, #12
 800ab20:	603b      	str	r3, [r7, #0]
 800ab22:	4638      	mov	r0, r7
 800ab24:	f000 f8c8 	bl	800acb8 <__malloc_unlock>
 800ab28:	e7a1      	b.n	800aa6e <_malloc_r+0x22>
 800ab2a:	6025      	str	r5, [r4, #0]
 800ab2c:	e7de      	b.n	800aaec <_malloc_r+0xa0>
 800ab2e:	bf00      	nop
 800ab30:	200051b0 	.word	0x200051b0

0800ab34 <cleanup_glue>:
 800ab34:	b538      	push	{r3, r4, r5, lr}
 800ab36:	460c      	mov	r4, r1
 800ab38:	6809      	ldr	r1, [r1, #0]
 800ab3a:	4605      	mov	r5, r0
 800ab3c:	b109      	cbz	r1, 800ab42 <cleanup_glue+0xe>
 800ab3e:	f7ff fff9 	bl	800ab34 <cleanup_glue>
 800ab42:	4621      	mov	r1, r4
 800ab44:	4628      	mov	r0, r5
 800ab46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab4a:	f7ff bf13 	b.w	800a974 <_free_r>
	...

0800ab50 <_reclaim_reent>:
 800ab50:	4b2c      	ldr	r3, [pc, #176]	; (800ac04 <_reclaim_reent+0xb4>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4283      	cmp	r3, r0
 800ab56:	b570      	push	{r4, r5, r6, lr}
 800ab58:	4604      	mov	r4, r0
 800ab5a:	d051      	beq.n	800ac00 <_reclaim_reent+0xb0>
 800ab5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ab5e:	b143      	cbz	r3, 800ab72 <_reclaim_reent+0x22>
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d14a      	bne.n	800abfc <_reclaim_reent+0xac>
 800ab66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab68:	6819      	ldr	r1, [r3, #0]
 800ab6a:	b111      	cbz	r1, 800ab72 <_reclaim_reent+0x22>
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	f7ff ff01 	bl	800a974 <_free_r>
 800ab72:	6961      	ldr	r1, [r4, #20]
 800ab74:	b111      	cbz	r1, 800ab7c <_reclaim_reent+0x2c>
 800ab76:	4620      	mov	r0, r4
 800ab78:	f7ff fefc 	bl	800a974 <_free_r>
 800ab7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ab7e:	b111      	cbz	r1, 800ab86 <_reclaim_reent+0x36>
 800ab80:	4620      	mov	r0, r4
 800ab82:	f7ff fef7 	bl	800a974 <_free_r>
 800ab86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ab88:	b111      	cbz	r1, 800ab90 <_reclaim_reent+0x40>
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	f7ff fef2 	bl	800a974 <_free_r>
 800ab90:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ab92:	b111      	cbz	r1, 800ab9a <_reclaim_reent+0x4a>
 800ab94:	4620      	mov	r0, r4
 800ab96:	f7ff feed 	bl	800a974 <_free_r>
 800ab9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ab9c:	b111      	cbz	r1, 800aba4 <_reclaim_reent+0x54>
 800ab9e:	4620      	mov	r0, r4
 800aba0:	f7ff fee8 	bl	800a974 <_free_r>
 800aba4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800aba6:	b111      	cbz	r1, 800abae <_reclaim_reent+0x5e>
 800aba8:	4620      	mov	r0, r4
 800abaa:	f7ff fee3 	bl	800a974 <_free_r>
 800abae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800abb0:	b111      	cbz	r1, 800abb8 <_reclaim_reent+0x68>
 800abb2:	4620      	mov	r0, r4
 800abb4:	f7ff fede 	bl	800a974 <_free_r>
 800abb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abba:	b111      	cbz	r1, 800abc2 <_reclaim_reent+0x72>
 800abbc:	4620      	mov	r0, r4
 800abbe:	f7ff fed9 	bl	800a974 <_free_r>
 800abc2:	69a3      	ldr	r3, [r4, #24]
 800abc4:	b1e3      	cbz	r3, 800ac00 <_reclaim_reent+0xb0>
 800abc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800abc8:	4620      	mov	r0, r4
 800abca:	4798      	blx	r3
 800abcc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800abce:	b1b9      	cbz	r1, 800ac00 <_reclaim_reent+0xb0>
 800abd0:	4620      	mov	r0, r4
 800abd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800abd6:	f7ff bfad 	b.w	800ab34 <cleanup_glue>
 800abda:	5949      	ldr	r1, [r1, r5]
 800abdc:	b941      	cbnz	r1, 800abf0 <_reclaim_reent+0xa0>
 800abde:	3504      	adds	r5, #4
 800abe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abe2:	2d80      	cmp	r5, #128	; 0x80
 800abe4:	68d9      	ldr	r1, [r3, #12]
 800abe6:	d1f8      	bne.n	800abda <_reclaim_reent+0x8a>
 800abe8:	4620      	mov	r0, r4
 800abea:	f7ff fec3 	bl	800a974 <_free_r>
 800abee:	e7ba      	b.n	800ab66 <_reclaim_reent+0x16>
 800abf0:	680e      	ldr	r6, [r1, #0]
 800abf2:	4620      	mov	r0, r4
 800abf4:	f7ff febe 	bl	800a974 <_free_r>
 800abf8:	4631      	mov	r1, r6
 800abfa:	e7ef      	b.n	800abdc <_reclaim_reent+0x8c>
 800abfc:	2500      	movs	r5, #0
 800abfe:	e7ef      	b.n	800abe0 <_reclaim_reent+0x90>
 800ac00:	bd70      	pop	{r4, r5, r6, pc}
 800ac02:	bf00      	nop
 800ac04:	20000040 	.word	0x20000040

0800ac08 <_sbrk_r>:
 800ac08:	b538      	push	{r3, r4, r5, lr}
 800ac0a:	4d06      	ldr	r5, [pc, #24]	; (800ac24 <_sbrk_r+0x1c>)
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	4604      	mov	r4, r0
 800ac10:	4608      	mov	r0, r1
 800ac12:	602b      	str	r3, [r5, #0]
 800ac14:	f7f8 f9fa 	bl	800300c <_sbrk>
 800ac18:	1c43      	adds	r3, r0, #1
 800ac1a:	d102      	bne.n	800ac22 <_sbrk_r+0x1a>
 800ac1c:	682b      	ldr	r3, [r5, #0]
 800ac1e:	b103      	cbz	r3, 800ac22 <_sbrk_r+0x1a>
 800ac20:	6023      	str	r3, [r4, #0]
 800ac22:	bd38      	pop	{r3, r4, r5, pc}
 800ac24:	200051b8 	.word	0x200051b8

0800ac28 <__utoa>:
 800ac28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac2a:	4c1f      	ldr	r4, [pc, #124]	; (800aca8 <__utoa+0x80>)
 800ac2c:	b08b      	sub	sp, #44	; 0x2c
 800ac2e:	4605      	mov	r5, r0
 800ac30:	460b      	mov	r3, r1
 800ac32:	466e      	mov	r6, sp
 800ac34:	f104 0c20 	add.w	ip, r4, #32
 800ac38:	6820      	ldr	r0, [r4, #0]
 800ac3a:	6861      	ldr	r1, [r4, #4]
 800ac3c:	4637      	mov	r7, r6
 800ac3e:	c703      	stmia	r7!, {r0, r1}
 800ac40:	3408      	adds	r4, #8
 800ac42:	4564      	cmp	r4, ip
 800ac44:	463e      	mov	r6, r7
 800ac46:	d1f7      	bne.n	800ac38 <__utoa+0x10>
 800ac48:	7921      	ldrb	r1, [r4, #4]
 800ac4a:	7139      	strb	r1, [r7, #4]
 800ac4c:	1e91      	subs	r1, r2, #2
 800ac4e:	6820      	ldr	r0, [r4, #0]
 800ac50:	6038      	str	r0, [r7, #0]
 800ac52:	2922      	cmp	r1, #34	; 0x22
 800ac54:	f04f 0100 	mov.w	r1, #0
 800ac58:	d904      	bls.n	800ac64 <__utoa+0x3c>
 800ac5a:	7019      	strb	r1, [r3, #0]
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	4618      	mov	r0, r3
 800ac60:	b00b      	add	sp, #44	; 0x2c
 800ac62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac64:	1e58      	subs	r0, r3, #1
 800ac66:	4684      	mov	ip, r0
 800ac68:	fbb5 f7f2 	udiv	r7, r5, r2
 800ac6c:	fb02 5617 	mls	r6, r2, r7, r5
 800ac70:	3628      	adds	r6, #40	; 0x28
 800ac72:	446e      	add	r6, sp
 800ac74:	460c      	mov	r4, r1
 800ac76:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800ac7a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ac7e:	462e      	mov	r6, r5
 800ac80:	42b2      	cmp	r2, r6
 800ac82:	f101 0101 	add.w	r1, r1, #1
 800ac86:	463d      	mov	r5, r7
 800ac88:	d9ee      	bls.n	800ac68 <__utoa+0x40>
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	545a      	strb	r2, [r3, r1]
 800ac8e:	1919      	adds	r1, r3, r4
 800ac90:	1aa5      	subs	r5, r4, r2
 800ac92:	42aa      	cmp	r2, r5
 800ac94:	dae3      	bge.n	800ac5e <__utoa+0x36>
 800ac96:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800ac9a:	780e      	ldrb	r6, [r1, #0]
 800ac9c:	7006      	strb	r6, [r0, #0]
 800ac9e:	3201      	adds	r2, #1
 800aca0:	f801 5901 	strb.w	r5, [r1], #-1
 800aca4:	e7f4      	b.n	800ac90 <__utoa+0x68>
 800aca6:	bf00      	nop
 800aca8:	0800c3b8 	.word	0x0800c3b8

0800acac <__malloc_lock>:
 800acac:	4801      	ldr	r0, [pc, #4]	; (800acb4 <__malloc_lock+0x8>)
 800acae:	f7ff be41 	b.w	800a934 <__retarget_lock_acquire_recursive>
 800acb2:	bf00      	nop
 800acb4:	200051ac 	.word	0x200051ac

0800acb8 <__malloc_unlock>:
 800acb8:	4801      	ldr	r0, [pc, #4]	; (800acc0 <__malloc_unlock+0x8>)
 800acba:	f7ff be3c 	b.w	800a936 <__retarget_lock_release_recursive>
 800acbe:	bf00      	nop
 800acc0:	200051ac 	.word	0x200051ac

0800acc4 <_init>:
 800acc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc6:	bf00      	nop
 800acc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acca:	bc08      	pop	{r3}
 800accc:	469e      	mov	lr, r3
 800acce:	4770      	bx	lr

0800acd0 <_fini>:
 800acd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd2:	bf00      	nop
 800acd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acd6:	bc08      	pop	{r3}
 800acd8:	469e      	mov	lr, r3
 800acda:	4770      	bx	lr
