
SUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c6c  08006fa0  08006fa0  00016fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c0c  08008c0c  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08008c0c  08008c0c  00018c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c14  08008c14  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c14  08008c14  00018c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c18  08008c18  00018c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08008c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fe8  200000a8  08008cc4  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20005090  08008cc4  00025090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cad5  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dca  00000000  00000000  0003cbad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  00040978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e8  00000000  00000000  00042208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004a90  00000000  00000000  000438f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d35e  00000000  00000000  00048380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c33b  00000000  00000000  000656de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101a19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a4c  00000000  00000000  00101a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006f88 	.word	0x08006f88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	08006f88 	.word	0x08006f88

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
	...

080004f4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af04      	add	r7, sp, #16
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80004fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000502:	9302      	str	r3, [sp, #8]
 8000504:	2301      	movs	r3, #1
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2301      	movs	r3, #1
 800050e:	2200      	movs	r2, #0
 8000510:	2178      	movs	r1, #120	; 0x78
 8000512:	4803      	ldr	r0, [pc, #12]	; (8000520 <ssd1306_WriteCommand+0x2c>)
 8000514:	f001 ff60 	bl	80023d8 <HAL_I2C_Mem_Write>
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	200004cc 	.word	0x200004cc

08000524 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af04      	add	r7, sp, #16
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	b29b      	uxth	r3, r3
 8000532:	f04f 32ff 	mov.w	r2, #4294967295
 8000536:	9202      	str	r2, [sp, #8]
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2301      	movs	r3, #1
 8000540:	2240      	movs	r2, #64	; 0x40
 8000542:	2178      	movs	r1, #120	; 0x78
 8000544:	4803      	ldr	r0, [pc, #12]	; (8000554 <ssd1306_WriteData+0x30>)
 8000546:	f001 ff47 	bl	80023d8 <HAL_I2C_Mem_Write>
}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	200004cc 	.word	0x200004cc

08000558 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800055c:	f7ff ffc2 	bl	80004e4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000560:	2064      	movs	r0, #100	; 0x64
 8000562:	f001 f84f 	bl	8001604 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000566:	2000      	movs	r0, #0
 8000568:	f000 fa7c 	bl	8000a64 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800056c:	2020      	movs	r0, #32
 800056e:	f7ff ffc1 	bl	80004f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000572:	2000      	movs	r0, #0
 8000574:	f7ff ffbe 	bl	80004f4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000578:	20b0      	movs	r0, #176	; 0xb0
 800057a:	f7ff ffbb 	bl	80004f4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800057e:	20c8      	movs	r0, #200	; 0xc8
 8000580:	f7ff ffb8 	bl	80004f4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000584:	2000      	movs	r0, #0
 8000586:	f7ff ffb5 	bl	80004f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800058a:	2010      	movs	r0, #16
 800058c:	f7ff ffb2 	bl	80004f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000590:	2040      	movs	r0, #64	; 0x40
 8000592:	f7ff ffaf 	bl	80004f4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000596:	20ff      	movs	r0, #255	; 0xff
 8000598:	f000 fa51 	bl	8000a3e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800059c:	20a1      	movs	r0, #161	; 0xa1
 800059e:	f7ff ffa9 	bl	80004f4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80005a2:	20a6      	movs	r0, #166	; 0xa6
 80005a4:	f7ff ffa6 	bl	80004f4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80005a8:	20a8      	movs	r0, #168	; 0xa8
 80005aa:	f7ff ffa3 	bl	80004f4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80005ae:	203f      	movs	r0, #63	; 0x3f
 80005b0:	f7ff ffa0 	bl	80004f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80005b4:	20a4      	movs	r0, #164	; 0xa4
 80005b6:	f7ff ff9d 	bl	80004f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80005ba:	20d3      	movs	r0, #211	; 0xd3
 80005bc:	f7ff ff9a 	bl	80004f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80005c0:	2000      	movs	r0, #0
 80005c2:	f7ff ff97 	bl	80004f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80005c6:	20d5      	movs	r0, #213	; 0xd5
 80005c8:	f7ff ff94 	bl	80004f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80005cc:	20f0      	movs	r0, #240	; 0xf0
 80005ce:	f7ff ff91 	bl	80004f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80005d2:	20d9      	movs	r0, #217	; 0xd9
 80005d4:	f7ff ff8e 	bl	80004f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80005d8:	2022      	movs	r0, #34	; 0x22
 80005da:	f7ff ff8b 	bl	80004f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80005de:	20da      	movs	r0, #218	; 0xda
 80005e0:	f7ff ff88 	bl	80004f4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80005e4:	2012      	movs	r0, #18
 80005e6:	f7ff ff85 	bl	80004f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80005ea:	20db      	movs	r0, #219	; 0xdb
 80005ec:	f7ff ff82 	bl	80004f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80005f0:	2020      	movs	r0, #32
 80005f2:	f7ff ff7f 	bl	80004f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80005f6:	208d      	movs	r0, #141	; 0x8d
 80005f8:	f7ff ff7c 	bl	80004f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80005fc:	2014      	movs	r0, #20
 80005fe:	f7ff ff79 	bl	80004f4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000602:	2001      	movs	r0, #1
 8000604:	f000 fa2e 	bl	8000a64 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000608:	2000      	movs	r0, #0
 800060a:	f000 f80f 	bl	800062c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800060e:	f000 f831 	bl	8000674 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <ssd1306_Init+0xd0>)
 8000614:	2200      	movs	r2, #0
 8000616:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <ssd1306_Init+0xd0>)
 800061a:	2200      	movs	r2, #0
 800061c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800061e:	4b02      	ldr	r3, [pc, #8]	; (8000628 <ssd1306_Init+0xd0>)
 8000620:	2201      	movs	r2, #1
 8000622:	711a      	strb	r2, [r3, #4]
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200004c4 	.word	0x200004c4

0800062c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	e00d      	b.n	8000658 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d101      	bne.n	8000646 <ssd1306_Fill+0x1a>
 8000642:	2100      	movs	r1, #0
 8000644:	e000      	b.n	8000648 <ssd1306_Fill+0x1c>
 8000646:	21ff      	movs	r1, #255	; 0xff
 8000648:	4a09      	ldr	r2, [pc, #36]	; (8000670 <ssd1306_Fill+0x44>)
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	4413      	add	r3, r2
 800064e:	460a      	mov	r2, r1
 8000650:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	3301      	adds	r3, #1
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800065e:	d3ed      	bcc.n	800063c <ssd1306_Fill+0x10>
    }
}
 8000660:	bf00      	nop
 8000662:	bf00      	nop
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	200000c4 	.word	0x200000c4

08000674 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800067a:	2300      	movs	r3, #0
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	e016      	b.n	80006ae <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	3b50      	subs	r3, #80	; 0x50
 8000684:	b2db      	uxtb	r3, r3
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ff34 	bl	80004f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800068c:	2000      	movs	r0, #0
 800068e:	f7ff ff31 	bl	80004f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000692:	2010      	movs	r0, #16
 8000694:	f7ff ff2e 	bl	80004f4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	01db      	lsls	r3, r3, #7
 800069c:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <ssd1306_UpdateScreen+0x4c>)
 800069e:	4413      	add	r3, r2
 80006a0:	2180      	movs	r1, #128	; 0x80
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff3e 	bl	8000524 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	3301      	adds	r3, #1
 80006ac:	71fb      	strb	r3, [r7, #7]
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	2b07      	cmp	r3, #7
 80006b2:	d9e5      	bls.n	8000680 <ssd1306_UpdateScreen+0xc>
    }
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000c4 	.word	0x200000c4

080006c4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
 80006ce:	460b      	mov	r3, r1
 80006d0:	71bb      	strb	r3, [r7, #6]
 80006d2:	4613      	mov	r3, r2
 80006d4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	db3d      	blt.n	800075a <ssd1306_DrawPixel+0x96>
 80006de:	79bb      	ldrb	r3, [r7, #6]
 80006e0:	2b3f      	cmp	r3, #63	; 0x3f
 80006e2:	d83a      	bhi.n	800075a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d11a      	bne.n	8000720 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80006ea:	79fa      	ldrb	r2, [r7, #7]
 80006ec:	79bb      	ldrb	r3, [r7, #6]
 80006ee:	08db      	lsrs	r3, r3, #3
 80006f0:	b2d8      	uxtb	r0, r3
 80006f2:	4603      	mov	r3, r0
 80006f4:	01db      	lsls	r3, r3, #7
 80006f6:	4413      	add	r3, r2
 80006f8:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <ssd1306_DrawPixel+0xa4>)
 80006fa:	5cd3      	ldrb	r3, [r2, r3]
 80006fc:	b25a      	sxtb	r2, r3
 80006fe:	79bb      	ldrb	r3, [r7, #6]
 8000700:	f003 0307 	and.w	r3, r3, #7
 8000704:	2101      	movs	r1, #1
 8000706:	fa01 f303 	lsl.w	r3, r1, r3
 800070a:	b25b      	sxtb	r3, r3
 800070c:	4313      	orrs	r3, r2
 800070e:	b259      	sxtb	r1, r3
 8000710:	79fa      	ldrb	r2, [r7, #7]
 8000712:	4603      	mov	r3, r0
 8000714:	01db      	lsls	r3, r3, #7
 8000716:	4413      	add	r3, r2
 8000718:	b2c9      	uxtb	r1, r1
 800071a:	4a13      	ldr	r2, [pc, #76]	; (8000768 <ssd1306_DrawPixel+0xa4>)
 800071c:	54d1      	strb	r1, [r2, r3]
 800071e:	e01d      	b.n	800075c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000720:	79fa      	ldrb	r2, [r7, #7]
 8000722:	79bb      	ldrb	r3, [r7, #6]
 8000724:	08db      	lsrs	r3, r3, #3
 8000726:	b2d8      	uxtb	r0, r3
 8000728:	4603      	mov	r3, r0
 800072a:	01db      	lsls	r3, r3, #7
 800072c:	4413      	add	r3, r2
 800072e:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <ssd1306_DrawPixel+0xa4>)
 8000730:	5cd3      	ldrb	r3, [r2, r3]
 8000732:	b25a      	sxtb	r2, r3
 8000734:	79bb      	ldrb	r3, [r7, #6]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	2101      	movs	r1, #1
 800073c:	fa01 f303 	lsl.w	r3, r1, r3
 8000740:	b25b      	sxtb	r3, r3
 8000742:	43db      	mvns	r3, r3
 8000744:	b25b      	sxtb	r3, r3
 8000746:	4013      	ands	r3, r2
 8000748:	b259      	sxtb	r1, r3
 800074a:	79fa      	ldrb	r2, [r7, #7]
 800074c:	4603      	mov	r3, r0
 800074e:	01db      	lsls	r3, r3, #7
 8000750:	4413      	add	r3, r2
 8000752:	b2c9      	uxtb	r1, r1
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <ssd1306_DrawPixel+0xa4>)
 8000756:	54d1      	strb	r1, [r2, r3]
 8000758:	e000      	b.n	800075c <ssd1306_DrawPixel+0x98>
        return;
 800075a:	bf00      	nop
    }
}
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	200000c4 	.word	0x200000c4

0800076c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b089      	sub	sp, #36	; 0x24
 8000770:	af00      	add	r7, sp, #0
 8000772:	4604      	mov	r4, r0
 8000774:	1d38      	adds	r0, r7, #4
 8000776:	e880 0006 	stmia.w	r0, {r1, r2}
 800077a:	461a      	mov	r2, r3
 800077c:	4623      	mov	r3, r4
 800077e:	73fb      	strb	r3, [r7, #15]
 8000780:	4613      	mov	r3, r2
 8000782:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	2b1f      	cmp	r3, #31
 8000788:	d902      	bls.n	8000790 <ssd1306_WriteChar+0x24>
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	2b7e      	cmp	r3, #126	; 0x7e
 800078e:	d901      	bls.n	8000794 <ssd1306_WriteChar+0x28>
        return 0;
 8000790:	2300      	movs	r3, #0
 8000792:	e06d      	b.n	8000870 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000794:	4b38      	ldr	r3, [pc, #224]	; (8000878 <ssd1306_WriteChar+0x10c>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	461a      	mov	r2, r3
 800079a:	793b      	ldrb	r3, [r7, #4]
 800079c:	4413      	add	r3, r2
 800079e:	2b80      	cmp	r3, #128	; 0x80
 80007a0:	dc06      	bgt.n	80007b0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80007a2:	4b35      	ldr	r3, [pc, #212]	; (8000878 <ssd1306_WriteChar+0x10c>)
 80007a4:	885b      	ldrh	r3, [r3, #2]
 80007a6:	461a      	mov	r2, r3
 80007a8:	797b      	ldrb	r3, [r7, #5]
 80007aa:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80007ac:	2b40      	cmp	r3, #64	; 0x40
 80007ae:	dd01      	ble.n	80007b4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	e05d      	b.n	8000870 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
 80007b8:	e04c      	b.n	8000854 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	3b20      	subs	r3, #32
 80007c0:	7979      	ldrb	r1, [r7, #5]
 80007c2:	fb01 f303 	mul.w	r3, r1, r3
 80007c6:	4619      	mov	r1, r3
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	440b      	add	r3, r1
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	4413      	add	r3, r2
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
 80007d8:	e034      	b.n	8000844 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80007da:	697a      	ldr	r2, [r7, #20]
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d012      	beq.n	8000810 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80007ea:	4b23      	ldr	r3, [pc, #140]	; (8000878 <ssd1306_WriteChar+0x10c>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	4413      	add	r3, r2
 80007f6:	b2d8      	uxtb	r0, r3
 80007f8:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <ssd1306_WriteChar+0x10c>)
 80007fa:	885b      	ldrh	r3, [r3, #2]
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4413      	add	r3, r2
 8000804:	b2db      	uxtb	r3, r3
 8000806:	7bba      	ldrb	r2, [r7, #14]
 8000808:	4619      	mov	r1, r3
 800080a:	f7ff ff5b 	bl	80006c4 <ssd1306_DrawPixel>
 800080e:	e016      	b.n	800083e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000810:	4b19      	ldr	r3, [pc, #100]	; (8000878 <ssd1306_WriteChar+0x10c>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	b2da      	uxtb	r2, r3
 8000816:	69bb      	ldr	r3, [r7, #24]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	4413      	add	r3, r2
 800081c:	b2d8      	uxtb	r0, r3
 800081e:	4b16      	ldr	r3, [pc, #88]	; (8000878 <ssd1306_WriteChar+0x10c>)
 8000820:	885b      	ldrh	r3, [r3, #2]
 8000822:	b2da      	uxtb	r2, r3
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	4413      	add	r3, r2
 800082a:	b2d9      	uxtb	r1, r3
 800082c:	7bbb      	ldrb	r3, [r7, #14]
 800082e:	2b00      	cmp	r3, #0
 8000830:	bf0c      	ite	eq
 8000832:	2301      	moveq	r3, #1
 8000834:	2300      	movne	r3, #0
 8000836:	b2db      	uxtb	r3, r3
 8000838:	461a      	mov	r2, r3
 800083a:	f7ff ff43 	bl	80006c4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800083e:	69bb      	ldr	r3, [r7, #24]
 8000840:	3301      	adds	r3, #1
 8000842:	61bb      	str	r3, [r7, #24]
 8000844:	793b      	ldrb	r3, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	69bb      	ldr	r3, [r7, #24]
 800084a:	4293      	cmp	r3, r2
 800084c:	d3c5      	bcc.n	80007da <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3301      	adds	r3, #1
 8000852:	61fb      	str	r3, [r7, #28]
 8000854:	797b      	ldrb	r3, [r7, #5]
 8000856:	461a      	mov	r2, r3
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	4293      	cmp	r3, r2
 800085c:	d3ad      	bcc.n	80007ba <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <ssd1306_WriteChar+0x10c>)
 8000860:	881a      	ldrh	r2, [r3, #0]
 8000862:	793b      	ldrb	r3, [r7, #4]
 8000864:	b29b      	uxth	r3, r3
 8000866:	4413      	add	r3, r2
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b03      	ldr	r3, [pc, #12]	; (8000878 <ssd1306_WriteChar+0x10c>)
 800086c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800086e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3724      	adds	r7, #36	; 0x24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd90      	pop	{r4, r7, pc}
 8000878:	200004c4 	.word	0x200004c4

0800087c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	1d38      	adds	r0, r7, #4
 8000886:	e880 0006 	stmia.w	r0, {r1, r2}
 800088a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800088c:	e012      	b.n	80008b4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	7818      	ldrb	r0, [r3, #0]
 8000892:	78fb      	ldrb	r3, [r7, #3]
 8000894:	1d3a      	adds	r2, r7, #4
 8000896:	ca06      	ldmia	r2, {r1, r2}
 8000898:	f7ff ff68 	bl	800076c <ssd1306_WriteChar>
 800089c:	4603      	mov	r3, r0
 800089e:	461a      	mov	r2, r3
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d002      	beq.n	80008ae <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	e008      	b.n	80008c0 <ssd1306_WriteString+0x44>
        }
        str++;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	3301      	adds	r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d1e8      	bne.n	800088e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	781b      	ldrb	r3, [r3, #0]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	460a      	mov	r2, r1
 80008d2:	71fb      	strb	r3, [r7, #7]
 80008d4:	4613      	mov	r3, r2
 80008d6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	b29a      	uxth	r2, r3
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <ssd1306_SetCursor+0x2c>)
 80008de:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80008e0:	79bb      	ldrb	r3, [r7, #6]
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <ssd1306_SetCursor+0x2c>)
 80008e6:	805a      	strh	r2, [r3, #2]
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	200004c4 	.word	0x200004c4

080008f8 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b089      	sub	sp, #36	; 0x24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4604      	mov	r4, r0
 8000900:	4608      	mov	r0, r1
 8000902:	4611      	mov	r1, r2
 8000904:	461a      	mov	r2, r3
 8000906:	4623      	mov	r3, r4
 8000908:	71fb      	strb	r3, [r7, #7]
 800090a:	4603      	mov	r3, r0
 800090c:	71bb      	strb	r3, [r7, #6]
 800090e:	460b      	mov	r3, r1
 8000910:	717b      	strb	r3, [r7, #5]
 8000912:	4613      	mov	r3, r2
 8000914:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8000916:	797a      	ldrb	r2, [r7, #5]
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	2b00      	cmp	r3, #0
 800091e:	bfb8      	it	lt
 8000920:	425b      	neglt	r3, r3
 8000922:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8000924:	793a      	ldrb	r2, [r7, #4]
 8000926:	79bb      	ldrb	r3, [r7, #6]
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	bfb8      	it	lt
 800092e:	425b      	neglt	r3, r3
 8000930:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8000932:	79fa      	ldrb	r2, [r7, #7]
 8000934:	797b      	ldrb	r3, [r7, #5]
 8000936:	429a      	cmp	r2, r3
 8000938:	d201      	bcs.n	800093e <ssd1306_Line+0x46>
 800093a:	2301      	movs	r3, #1
 800093c:	e001      	b.n	8000942 <ssd1306_Line+0x4a>
 800093e:	f04f 33ff 	mov.w	r3, #4294967295
 8000942:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8000944:	79ba      	ldrb	r2, [r7, #6]
 8000946:	793b      	ldrb	r3, [r7, #4]
 8000948:	429a      	cmp	r2, r3
 800094a:	d201      	bcs.n	8000950 <ssd1306_Line+0x58>
 800094c:	2301      	movs	r3, #1
 800094e:	e001      	b.n	8000954 <ssd1306_Line+0x5c>
 8000950:	f04f 33ff 	mov.w	r3, #4294967295
 8000954:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8000956:	69ba      	ldr	r2, [r7, #24]
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 800095e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000962:	7939      	ldrb	r1, [r7, #4]
 8000964:	797b      	ldrb	r3, [r7, #5]
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff feac 	bl	80006c4 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 800096c:	e024      	b.n	80009b8 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800096e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000972:	79b9      	ldrb	r1, [r7, #6]
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fea4 	bl	80006c4 <ssd1306_DrawPixel>
        error2 = error * 2;
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	425b      	negs	r3, r3
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	429a      	cmp	r2, r3
 800098a:	dd08      	ble.n	800099e <ssd1306_Line+0xa6>
            error -= deltaY;
 800098c:	69fa      	ldr	r2, [r7, #28]
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	b2da      	uxtb	r2, r3
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	4413      	add	r3, r2
 800099c:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	da08      	bge.n	80009b8 <ssd1306_Line+0xc0>
            error += deltaX;
 80009a6:	69fa      	ldr	r2, [r7, #28]
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	4413      	add	r3, r2
 80009ac:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	79bb      	ldrb	r3, [r7, #6]
 80009b4:	4413      	add	r3, r2
 80009b6:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80009b8:	79fa      	ldrb	r2, [r7, #7]
 80009ba:	797b      	ldrb	r3, [r7, #5]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d1d6      	bne.n	800096e <ssd1306_Line+0x76>
 80009c0:	79ba      	ldrb	r2, [r7, #6]
 80009c2:	793b      	ldrb	r3, [r7, #4]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d1d2      	bne.n	800096e <ssd1306_Line+0x76>
        }
    }
    return;
 80009c8:	bf00      	nop
}
 80009ca:	3724      	adds	r7, #36	; 0x24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd90      	pop	{r4, r7, pc}

080009d0 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af02      	add	r7, sp, #8
 80009d6:	4604      	mov	r4, r0
 80009d8:	4608      	mov	r0, r1
 80009da:	4611      	mov	r1, r2
 80009dc:	461a      	mov	r2, r3
 80009de:	4623      	mov	r3, r4
 80009e0:	71fb      	strb	r3, [r7, #7]
 80009e2:	4603      	mov	r3, r0
 80009e4:	71bb      	strb	r3, [r7, #6]
 80009e6:	460b      	mov	r3, r1
 80009e8:	717b      	strb	r3, [r7, #5]
 80009ea:	4613      	mov	r3, r2
 80009ec:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 80009ee:	79bc      	ldrb	r4, [r7, #6]
 80009f0:	797a      	ldrb	r2, [r7, #5]
 80009f2:	79b9      	ldrb	r1, [r7, #6]
 80009f4:	79f8      	ldrb	r0, [r7, #7]
 80009f6:	7e3b      	ldrb	r3, [r7, #24]
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	4623      	mov	r3, r4
 80009fc:	f7ff ff7c 	bl	80008f8 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8000a00:	793c      	ldrb	r4, [r7, #4]
 8000a02:	797a      	ldrb	r2, [r7, #5]
 8000a04:	79b9      	ldrb	r1, [r7, #6]
 8000a06:	7978      	ldrb	r0, [r7, #5]
 8000a08:	7e3b      	ldrb	r3, [r7, #24]
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	4623      	mov	r3, r4
 8000a0e:	f7ff ff73 	bl	80008f8 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8000a12:	793c      	ldrb	r4, [r7, #4]
 8000a14:	79fa      	ldrb	r2, [r7, #7]
 8000a16:	7939      	ldrb	r1, [r7, #4]
 8000a18:	7978      	ldrb	r0, [r7, #5]
 8000a1a:	7e3b      	ldrb	r3, [r7, #24]
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	4623      	mov	r3, r4
 8000a20:	f7ff ff6a 	bl	80008f8 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8000a24:	79bc      	ldrb	r4, [r7, #6]
 8000a26:	79fa      	ldrb	r2, [r7, #7]
 8000a28:	7939      	ldrb	r1, [r7, #4]
 8000a2a:	79f8      	ldrb	r0, [r7, #7]
 8000a2c:	7e3b      	ldrb	r3, [r7, #24]
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	4623      	mov	r3, r4
 8000a32:	f7ff ff61 	bl	80008f8 <ssd1306_Line>

    return;
 8000a36:	bf00      	nop
}
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd90      	pop	{r4, r7, pc}

08000a3e <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b084      	sub	sp, #16
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000a48:	2381      	movs	r3, #129	; 0x81
 8000a4a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fd50 	bl	80004f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fd4c 	bl	80004f4 <ssd1306_WriteCommand>
}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d005      	beq.n	8000a80 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000a74:	23af      	movs	r3, #175	; 0xaf
 8000a76:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <ssd1306_SetDisplayOn+0x38>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	715a      	strb	r2, [r3, #5]
 8000a7e:	e004      	b.n	8000a8a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000a80:	23ae      	movs	r3, #174	; 0xae
 8000a82:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <ssd1306_SetDisplayOn+0x38>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fd31 	bl	80004f4 <ssd1306_WriteCommand>
}
 8000a92:	bf00      	nop
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200004c4 	.word	0x200004c4

08000aa0 <buttonEnSet>:


void buttonUpSet(uint8_t i){
	buttonUpper = i;
}
void buttonEnSet(uint8_t i){
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
	buttonEnable = i;
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <buttonEnSet+0x1c>)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	7013      	strb	r3, [r2, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	200004ca 	.word	0x200004ca

08000ac0 <buttonEn>:
}

uint8_t buttonUp(){
	return buttonUpper;
}
uint8_t buttonEn(){
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
	return buttonEnable;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <buttonEn+0x14>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	200004ca 	.word	0x200004ca

08000ad8 <drawMainMenu>:
void drawItemNum06(){

}
*/

void drawMainMenu() {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f7ff fda4 	bl	800062c <ssd1306_Fill>
    uint8_t exit = 1;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	713b      	strb	r3, [r7, #4]
    uint8_t current_item_menu = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	71fb      	strb	r3, [r7, #7]
    uint8_t next_item_menu = current_item_menu + 1;
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	3301      	adds	r3, #1
 8000af0:	71bb      	strb	r3, [r7, #6]
    uint8_t prev_item_menu = MENU_ITEMS_COUNT - 1;
 8000af2:	2306      	movs	r3, #6
 8000af4:	717b      	strb	r3, [r7, #5]
    ssd1306_DrawRectangle(1, 1, 127, 63, White);
 8000af6:	2301      	movs	r3, #1
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	233f      	movs	r3, #63	; 0x3f
 8000afc:	227f      	movs	r2, #127	; 0x7f
 8000afe:	2101      	movs	r1, #1
 8000b00:	2001      	movs	r0, #1
 8000b02:	f7ff ff65 	bl	80009d0 <ssd1306_DrawRectangle>
#define SIZE_MAIN_FONT_Y 18
//#define MAIN_FONT_MENU Font_11x18
//#define SECOND_FONT_MENU Font_7x10
	//ssd1306_Line(START_POS_X, START_POS_Y+SIZE_FONT_Y+1, LAST_POS_X, START_POS_Y+SIZE_FONT_Y+1, White);
	//ssd1306_Line(START_POS_X, LAST_POS_Y- SIZE_FONT_Y-1, LAST_POS_X, LAST_POS_Y- SIZE_FONT_Y-1, White);
    ssd1306_UpdateScreen();
 8000b06:	f7ff fdb5 	bl	8000674 <ssd1306_UpdateScreen>
    while( exit ){
 8000b0a:	e05e      	b.n	8000bca <drawMainMenu+0xf2>
         next_item_menu = current_item_menu + 1;
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	71bb      	strb	r3, [r7, #6]
         prev_item_menu = current_item_menu - 1;
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	3b01      	subs	r3, #1
 8000b16:	717b      	strb	r3, [r7, #5]
    	if(current_item_menu == (MENU_ITEMS_COUNT-1))
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	2b06      	cmp	r3, #6
 8000b1c:	d101      	bne.n	8000b22 <drawMainMenu+0x4a>
    		next_item_menu = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	71bb      	strb	r3, [r7, #6]
    	if(current_item_menu == 0) // Для нулевого элемента предыдущий символ будет последним
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d101      	bne.n	8000b2c <drawMainMenu+0x54>
    		prev_item_menu = MENU_ITEMS_COUNT - 1;
 8000b28:	2306      	movs	r3, #6
 8000b2a:	717b      	strb	r3, [r7, #5]

    	ssd1306_SetCursor(START_POS_X, SIZE_FONT_Y + START_POS_Y+8);// Магический номер что бы сделать по центру
 8000b2c:	2117      	movs	r1, #23
 8000b2e:	2005      	movs	r0, #5
 8000b30:	f7ff feca 	bl	80008c8 <ssd1306_SetCursor>
    		ssd1306_WriteString(">", Font_11x18, White);
 8000b34:	4a29      	ldr	r2, [pc, #164]	; (8000bdc <drawMainMenu+0x104>)
 8000b36:	2301      	movs	r3, #1
 8000b38:	ca06      	ldmia	r2, {r1, r2}
 8000b3a:	4829      	ldr	r0, [pc, #164]	; (8000be0 <drawMainMenu+0x108>)
 8000b3c:	f7ff fe9e 	bl	800087c <ssd1306_WriteString>
    	ssd1306_SetCursor(START_POS_X+SIZE_MAIN_FONT_X+5, SIZE_FONT_Y + START_POS_Y+8);
 8000b40:	2117      	movs	r1, #23
 8000b42:	2015      	movs	r0, #21
 8000b44:	f7ff fec0 	bl	80008c8 <ssd1306_SetCursor>
    		ssd1306_WriteString(menuItems[current_item_menu], Font_11x18, White);
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	4a26      	ldr	r2, [pc, #152]	; (8000be4 <drawMainMenu+0x10c>)
 8000b4c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b50:	4a22      	ldr	r2, [pc, #136]	; (8000bdc <drawMainMenu+0x104>)
 8000b52:	2301      	movs	r3, #1
 8000b54:	ca06      	ldmia	r2, {r1, r2}
 8000b56:	f7ff fe91 	bl	800087c <ssd1306_WriteString>
    	ssd1306_UpdateScreen();
 8000b5a:	f7ff fd8b 	bl	8000674 <ssd1306_UpdateScreen>

    	HAL_Delay(50);
 8000b5e:	2032      	movs	r0, #50	; 0x32
 8000b60:	f000 fd50 	bl	8001604 <HAL_Delay>

    	ssd1306_SetCursor(START_POS_X, START_POS_Y); // В первой строке пишем предыдущий пункт
 8000b64:	2105      	movs	r1, #5
 8000b66:	2005      	movs	r0, #5
 8000b68:	f7ff feae 	bl	80008c8 <ssd1306_SetCursor>
    		ssd1306_WriteString(menuItems[prev_item_menu], Font_7x10, White);
 8000b6c:	797b      	ldrb	r3, [r7, #5]
 8000b6e:	4a1d      	ldr	r2, [pc, #116]	; (8000be4 <drawMainMenu+0x10c>)
 8000b70:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b74:	4a1c      	ldr	r2, [pc, #112]	; (8000be8 <drawMainMenu+0x110>)
 8000b76:	2301      	movs	r3, #1
 8000b78:	ca06      	ldmia	r2, {r1, r2}
 8000b7a:	f7ff fe7f 	bl	800087c <ssd1306_WriteString>
    		ssd1306_UpdateScreen();
 8000b7e:	f7ff fd79 	bl	8000674 <ssd1306_UpdateScreen>

        	ssd1306_SetCursor(START_POS_X, LAST_POS_Y - SIZE_FONT_Y);
 8000b82:	2130      	movs	r1, #48	; 0x30
 8000b84:	2005      	movs	r0, #5
 8000b86:	f7ff fe9f 	bl	80008c8 <ssd1306_SetCursor>
        		ssd1306_WriteString(menuItems[next_item_menu], Font_7x10, White);
 8000b8a:	79bb      	ldrb	r3, [r7, #6]
 8000b8c:	4a15      	ldr	r2, [pc, #84]	; (8000be4 <drawMainMenu+0x10c>)
 8000b8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b92:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <drawMainMenu+0x110>)
 8000b94:	2301      	movs	r3, #1
 8000b96:	ca06      	ldmia	r2, {r1, r2}
 8000b98:	f7ff fe70 	bl	800087c <ssd1306_WriteString>
        	ssd1306_UpdateScreen();
 8000b9c:	f7ff fd6a 	bl	8000674 <ssd1306_UpdateScreen>

    	buttonEnSet(OFF);
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f7ff ff7d 	bl	8000aa0 <buttonEnSet>
    	while(buttonEn() != ON){}
 8000ba6:	bf00      	nop
 8000ba8:	f7ff ff8a 	bl	8000ac0 <buttonEn>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d1fa      	bne.n	8000ba8 <drawMainMenu+0xd0>
    		current_item_menu++;
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	71fb      	strb	r3, [r7, #7]
    		HAL_Delay(300);
 8000bb8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000bbc:	f000 fd22 	bl	8001604 <HAL_Delay>
    		if(current_item_menu >= MENU_ITEMS_COUNT )
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	d901      	bls.n	8000bca <drawMainMenu+0xf2>
    			current_item_menu = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	71fb      	strb	r3, [r7, #7]
    while( exit ){
 8000bca:	793b      	ldrb	r3, [r7, #4]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d19d      	bne.n	8000b0c <drawMainMenu+0x34>
    }

}
 8000bd0:	bf00      	nop
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000010 	.word	0x20000010
 8000be0:	08006ff4 	.word	0x08006ff4
 8000be4:	20000018 	.word	0x20000018
 8000be8:	20000008 	.word	0x20000008

08000bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf2:	f000 fcc5 	bl	8001580 <HAL_Init>
  //MCP4725 myMCP4725;
  //MCP4725_setValue(&myMCP4725, 2048, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf6:	f000 f84f 	bl	8000c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfa:	f000 f9ad 	bl	8000f58 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bfe:	f000 f98b 	bl	8000f18 <MX_DMA_Init>
  MX_I2C1_Init();
 8000c02:	f000 f8b1 	bl	8000d68 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c06:	f000 f8dd 	bl	8000dc4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000c0a:	f000 f911 	bl	8000e30 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t num[10] ={0};
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	f107 0308 	add.w	r3, r7, #8
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	809a      	strh	r2, [r3, #4]
  uint8_t coutn = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	73fb      	strb	r3, [r7, #15]
  // Update - Option 1
  //extern  unsigned char *gImage_BW;
  //extern  unsigned char *gImage_R;
   */

  ssd1306_Init();
 8000c20:	f7ff fc9a 	bl	8000558 <ssd1306_Init>
  ssd1306_Fill(Black);
 8000c24:	2000      	movs	r0, #0
 8000c26:	f7ff fd01 	bl	800062c <ssd1306_Fill>
  ssd1306_SetCursor(5, 10);
 8000c2a:	210a      	movs	r1, #10
 8000c2c:	2005      	movs	r0, #5
 8000c2e:	f7ff fe4b 	bl	80008c8 <ssd1306_SetCursor>
  ssd1306_WriteString("JetPro,Bro!", Font_11x18, White);
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <main+0x90>)
 8000c34:	2301      	movs	r3, #1
 8000c36:	ca06      	ldmia	r2, {r1, r2}
 8000c38:	4811      	ldr	r0, [pc, #68]	; (8000c80 <main+0x94>)
 8000c3a:	f7ff fe1f 	bl	800087c <ssd1306_WriteString>
  ssd1306_SetCursor(3, 40);
 8000c3e:	2128      	movs	r1, #40	; 0x28
 8000c40:	2003      	movs	r0, #3
 8000c42:	f7ff fe41 	bl	80008c8 <ssd1306_SetCursor>
  ssd1306_WriteString("Tap Start for continue", Font_6x8, White);
 8000c46:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <main+0x98>)
 8000c48:	2301      	movs	r3, #1
 8000c4a:	ca06      	ldmia	r2, {r1, r2}
 8000c4c:	480e      	ldr	r0, [pc, #56]	; (8000c88 <main+0x9c>)
 8000c4e:	f7ff fe15 	bl	800087c <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000c52:	f7ff fd0f 	bl	8000674 <ssd1306_UpdateScreen>
  HAL_Delay(1000);
 8000c56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c5a:	f000 fcd3 	bl	8001604 <HAL_Delay>
  //EPD_WhiteScreen_ALL_Clean();
  //EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c5e:	f003 fb17 	bl	8004290 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of EmptyTask */
  EmptyTaskHandle = osThreadNew(StartEmptyTask, NULL, &EmptyTask_attributes);
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <main+0xa0>)
 8000c64:	2100      	movs	r1, #0
 8000c66:	480a      	ldr	r0, [pc, #40]	; (8000c90 <main+0xa4>)
 8000c68:	f003 fb5c 	bl	8004324 <osThreadNew>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	4a09      	ldr	r2, [pc, #36]	; (8000c94 <main+0xa8>)
 8000c70:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  initUserTasks();
 8000c72:	f000 fc3b 	bl	80014ec <initUserTasks>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c76:	f003 fb2f 	bl	80042d8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <main+0x8e>
 8000c7c:	20000010 	.word	0x20000010
 8000c80:	08007004 	.word	0x08007004
 8000c84:	20000000 	.word	0x20000000
 8000c88:	08007010 	.word	0x08007010
 8000c8c:	08008b20 	.word	0x08008b20
 8000c90:	08001061 	.word	0x08001061
 8000c94:	20000620 	.word	0x20000620

08000c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b094      	sub	sp, #80	; 0x50
 8000c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9e:	f107 0320 	add.w	r3, r7, #32
 8000ca2:	2230      	movs	r2, #48	; 0x30
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f006 f8a4 	bl	8006df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <SystemClock_Config+0xc8>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	4a26      	ldr	r2, [pc, #152]	; (8000d60 <SystemClock_Config+0xc8>)
 8000cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cca:	6413      	str	r3, [r2, #64]	; 0x40
 8000ccc:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <SystemClock_Config+0xc8>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd8:	2300      	movs	r3, #0
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <SystemClock_Config+0xcc>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a20      	ldr	r2, [pc, #128]	; (8000d64 <SystemClock_Config+0xcc>)
 8000ce2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	4b1e      	ldr	r3, [pc, #120]	; (8000d64 <SystemClock_Config+0xcc>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d08:	2319      	movs	r3, #25
 8000d0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000d0c:	2390      	movs	r3, #144	; 0x90
 8000d0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d14:	2304      	movs	r3, #4
 8000d16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d18:	f107 0320 	add.w	r3, r7, #32
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f001 fe73 	bl	8002a08 <HAL_RCC_OscConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d28:	f000 f9b4 	bl	8001094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2c:	230f      	movs	r3, #15
 8000d2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d30:	2302      	movs	r3, #2
 8000d32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	2102      	movs	r1, #2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f002 f8d5 	bl	8002ef8 <HAL_RCC_ClockConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d54:	f000 f99e 	bl	8001094 <Error_Handler>
  }
}
 8000d58:	bf00      	nop
 8000d5a:	3750      	adds	r7, #80	; 0x50
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40007000 	.word	0x40007000

08000d68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <MX_I2C1_Init+0x50>)
 8000d6e:	4a13      	ldr	r2, [pc, #76]	; (8000dbc <MX_I2C1_Init+0x54>)
 8000d70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <MX_I2C1_Init+0x50>)
 8000d74:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <MX_I2C1_Init+0x58>)
 8000d76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <MX_I2C1_Init+0x50>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <MX_I2C1_Init+0x50>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <MX_I2C1_Init+0x50>)
 8000d86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <MX_I2C1_Init+0x50>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_I2C1_Init+0x50>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <MX_I2C1_Init+0x50>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <MX_I2C1_Init+0x50>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000da4:	4804      	ldr	r0, [pc, #16]	; (8000db8 <MX_I2C1_Init+0x50>)
 8000da6:	f001 f9d3 	bl	8002150 <HAL_I2C_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000db0:	f000 f970 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200004cc 	.word	0x200004cc
 8000dbc:	40005400 	.word	0x40005400
 8000dc0:	00061a80 	.word	0x00061a80

08000dc4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dc8:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000dca:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <MX_SPI1_Init+0x68>)
 8000dcc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000dd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dd6:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000df8:	2230      	movs	r2, #48	; 0x30
 8000dfa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000e10:	220a      	movs	r2, #10
 8000e12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e14:	4804      	ldr	r0, [pc, #16]	; (8000e28 <MX_SPI1_Init+0x64>)
 8000e16:	f002 fa81 	bl	800331c <HAL_SPI_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e20:	f000 f938 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000520 	.word	0x20000520
 8000e2c:	40013000 	.word	0x40013000

08000e30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08e      	sub	sp, #56	; 0x38
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e44:	f107 0320 	add.w	r3, r7, #32
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
 8000e5c:	615a      	str	r2, [r3, #20]
 8000e5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e60:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <MX_TIM2_Init+0xe4>)
 8000e62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e68:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <MX_TIM2_Init+0xe4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6e:	4b29      	ldr	r3, [pc, #164]	; (8000f14 <MX_TIM2_Init+0xe4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 8000e74:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <MX_TIM2_Init+0xe4>)
 8000e76:	2259      	movs	r2, #89	; 0x59
 8000e78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7a:	4b26      	ldr	r3, [pc, #152]	; (8000f14 <MX_TIM2_Init+0xe4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e80:	4b24      	ldr	r3, [pc, #144]	; (8000f14 <MX_TIM2_Init+0xe4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e86:	4823      	ldr	r0, [pc, #140]	; (8000f14 <MX_TIM2_Init+0xe4>)
 8000e88:	f002 fad1 	bl	800342e <HAL_TIM_Base_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000e92:	f000 f8ff 	bl	8001094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	481c      	ldr	r0, [pc, #112]	; (8000f14 <MX_TIM2_Init+0xe4>)
 8000ea4:	f002 fd98 	bl	80039d8 <HAL_TIM_ConfigClockSource>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000eae:	f000 f8f1 	bl	8001094 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000eb2:	4818      	ldr	r0, [pc, #96]	; (8000f14 <MX_TIM2_Init+0xe4>)
 8000eb4:	f002 fb6c 	bl	8003590 <HAL_TIM_PWM_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000ebe:	f000 f8e9 	bl	8001094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eca:	f107 0320 	add.w	r3, r7, #32
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4810      	ldr	r0, [pc, #64]	; (8000f14 <MX_TIM2_Init+0xe4>)
 8000ed2:	f003 f917 	bl	8004104 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000edc:	f000 f8da 	bl	8001094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee0:	2360      	movs	r3, #96	; 0x60
 8000ee2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4807      	ldr	r0, [pc, #28]	; (8000f14 <MX_TIM2_Init+0xe4>)
 8000ef8:	f002 fcac 	bl	8003854 <HAL_TIM_PWM_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000f02:	f000 f8c7 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f06:	4803      	ldr	r0, [pc, #12]	; (8000f14 <MX_TIM2_Init+0xe4>)
 8000f08:	f000 f9e6 	bl	80012d8 <HAL_TIM_MspPostInit>

}
 8000f0c:	bf00      	nop
 8000f0e:	3738      	adds	r7, #56	; 0x38
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000578 	.word	0x20000578

08000f18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MX_DMA_Init+0x3c>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <MX_DMA_Init+0x3c>)
 8000f28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_DMA_Init+0x3c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2105      	movs	r1, #5
 8000f3e:	2011      	movs	r0, #17
 8000f40:	f000 fc3c 	bl	80017bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f44:	2011      	movs	r0, #17
 8000f46:	f000 fc55 	bl	80017f4 <HAL_NVIC_EnableIRQ>

}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800

08000f58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	4b31      	ldr	r3, [pc, #196]	; (8001038 <MX_GPIO_Init+0xe0>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a30      	ldr	r2, [pc, #192]	; (8001038 <MX_GPIO_Init+0xe0>)
 8000f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <MX_GPIO_Init+0xe0>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <MX_GPIO_Init+0xe0>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a29      	ldr	r2, [pc, #164]	; (8001038 <MX_GPIO_Init+0xe0>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b27      	ldr	r3, [pc, #156]	; (8001038 <MX_GPIO_Init+0xe0>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	603b      	str	r3, [r7, #0]
 8000faa:	4b23      	ldr	r3, [pc, #140]	; (8001038 <MX_GPIO_Init+0xe0>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a22      	ldr	r2, [pc, #136]	; (8001038 <MX_GPIO_Init+0xe0>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b20      	ldr	r3, [pc, #128]	; (8001038 <MX_GPIO_Init+0xe0>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2107      	movs	r1, #7
 8000fc6:	481d      	ldr	r0, [pc, #116]	; (800103c <MX_GPIO_Init+0xe4>)
 8000fc8:	f001 f890 	bl	80020ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_CS_Pin EPD_Reset_Pin EPD_Data_Control_Pin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin;
 8000fcc:	2307      	movs	r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4816      	ldr	r0, [pc, #88]	; (800103c <MX_GPIO_Init+0xe4>)
 8000fe4:	f000 fefe 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_Busy_Pin */
  GPIO_InitStruct.Pin = EPD_Busy_Pin;
 8000fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EPD_Busy_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	480f      	ldr	r0, [pc, #60]	; (800103c <MX_GPIO_Init+0xe4>)
 8000ffe:	f000 fef1 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_button_on_Pin */
  GPIO_InitStruct.Pin = EXT_button_on_Pin;
 8001002:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001006:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001008:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800100c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800100e:	2301      	movs	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EXT_button_on_GPIO_Port, &GPIO_InitStruct);
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	4619      	mov	r1, r3
 8001018:	4808      	ldr	r0, [pc, #32]	; (800103c <MX_GPIO_Init+0xe4>)
 800101a:	f000 fee3 	bl	8001de4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2105      	movs	r1, #5
 8001022:	2028      	movs	r0, #40	; 0x28
 8001024:	f000 fbca 	bl	80017bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001028:	2028      	movs	r0, #40	; 0x28
 800102a:	f000 fbe3 	bl	80017f4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800102e:	bf00      	nop
 8001030:	3720      	adds	r7, #32
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800
 800103c:	40020400 	.word	0x40020400

08001040 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
uint8_t ButtonUp = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EXT_button_on_Pin){
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001050:	d102      	bne.n	8001058 <HAL_GPIO_EXTI_Callback+0x18>
		buttonEnSet(ON);
 8001052:	2001      	movs	r0, #1
 8001054:	f7ff fd24 	bl	8000aa0 <buttonEnSet>
	}
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <StartEmptyTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEmptyTask */
void StartEmptyTask(void *argument)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(1);
 8001068:	2001      	movs	r0, #1
 800106a:	f003 f9ed 	bl	8004448 <osDelay>
 800106e:	e7fb      	b.n	8001068 <StartEmptyTask+0x8>

08001070 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a04      	ldr	r2, [pc, #16]	; (8001090 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d101      	bne.n	8001086 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001082:	f000 fa9f 	bl	80015c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40014000 	.word	0x40014000

08001094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800109c:	e7fe      	b.n	800109c <Error_Handler+0x8>
	...

080010a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_MspInit+0x54>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	4a11      	ldr	r2, [pc, #68]	; (80010f4 <HAL_MspInit+0x54>)
 80010b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b4:	6453      	str	r3, [r2, #68]	; 0x44
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_MspInit+0x54>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <HAL_MspInit+0x54>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <HAL_MspInit+0x54>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d0:	6413      	str	r3, [r2, #64]	; 0x40
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <HAL_MspInit+0x54>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	210f      	movs	r1, #15
 80010e2:	f06f 0001 	mvn.w	r0, #1
 80010e6:	f000 fb69 	bl	80017bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800

080010f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a19      	ldr	r2, [pc, #100]	; (800117c <HAL_I2C_MspInit+0x84>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d12b      	bne.n	8001172 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_I2C_MspInit+0x88>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a17      	ldr	r2, [pc, #92]	; (8001180 <HAL_I2C_MspInit+0x88>)
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_I2C_MspInit+0x88>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001136:	23c0      	movs	r3, #192	; 0xc0
 8001138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800113a:	2312      	movs	r3, #18
 800113c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001146:	2304      	movs	r3, #4
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	480c      	ldr	r0, [pc, #48]	; (8001184 <HAL_I2C_MspInit+0x8c>)
 8001152:	f000 fe47 	bl	8001de4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_I2C_MspInit+0x88>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	4a08      	ldr	r2, [pc, #32]	; (8001180 <HAL_I2C_MspInit+0x88>)
 8001160:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001164:	6413      	str	r3, [r2, #64]	; 0x40
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_I2C_MspInit+0x88>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001172:	bf00      	nop
 8001174:	3728      	adds	r7, #40	; 0x28
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40005400 	.word	0x40005400
 8001180:	40023800 	.word	0x40023800
 8001184:	40020400 	.word	0x40020400

08001188 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a19      	ldr	r2, [pc, #100]	; (800120c <HAL_SPI_MspInit+0x84>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d12b      	bne.n	8001202 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a17      	ldr	r2, [pc, #92]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a10      	ldr	r2, [pc, #64]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80011e2:	23a0      	movs	r3, #160	; 0xa0
 80011e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011f2:	2305      	movs	r3, #5
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <HAL_SPI_MspInit+0x8c>)
 80011fe:	f000 fdf1 	bl	8001de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001202:	bf00      	nop
 8001204:	3728      	adds	r7, #40	; 0x28
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40013000 	.word	0x40013000
 8001210:	40023800 	.word	0x40023800
 8001214:	40020000 	.word	0x40020000

08001218 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001228:	d14c      	bne.n	80012c4 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b27      	ldr	r3, [pc, #156]	; (80012cc <HAL_TIM_Base_MspInit+0xb4>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	4a26      	ldr	r2, [pc, #152]	; (80012cc <HAL_TIM_Base_MspInit+0xb4>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6413      	str	r3, [r2, #64]	; 0x40
 800123a:	4b24      	ldr	r3, [pc, #144]	; (80012cc <HAL_TIM_Base_MspInit+0xb4>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 8001246:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <HAL_TIM_Base_MspInit+0xb8>)
 8001248:	4a22      	ldr	r2, [pc, #136]	; (80012d4 <HAL_TIM_Base_MspInit+0xbc>)
 800124a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 800124c:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <HAL_TIM_Base_MspInit+0xb8>)
 800124e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001252:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <HAL_TIM_Base_MspInit+0xb8>)
 8001256:	2240      	movs	r2, #64	; 0x40
 8001258:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HAL_TIM_Base_MspInit+0xb8>)
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <HAL_TIM_Base_MspInit+0xb8>)
 8001262:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001266:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_TIM_Base_MspInit+0xb8>)
 800126a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800126e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001270:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <HAL_TIM_Base_MspInit+0xb8>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8001276:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <HAL_TIM_Base_MspInit+0xb8>)
 8001278:	f44f 7280 	mov.w	r2, #256	; 0x100
 800127c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <HAL_TIM_Base_MspInit+0xb8>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_TIM_Base_MspInit+0xb8>)
 8001286:	2204      	movs	r2, #4
 8001288:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch2_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <HAL_TIM_Base_MspInit+0xb8>)
 800128c:	2203      	movs	r2, #3
 800128e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch2_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 8001290:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <HAL_TIM_Base_MspInit+0xb8>)
 8001292:	2200      	movs	r2, #0
 8001294:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch2_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <HAL_TIM_Base_MspInit+0xb8>)
 8001298:	2200      	movs	r2, #0
 800129a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800129c:	480c      	ldr	r0, [pc, #48]	; (80012d0 <HAL_TIM_Base_MspInit+0xb8>)
 800129e:	f000 fab7 	bl	8001810 <HAL_DMA_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_TIM_Base_MspInit+0x94>
    {
      Error_Handler();
 80012a8:	f7ff fef4 	bl	8001094 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <HAL_TIM_Base_MspInit+0xb8>)
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28
 80012b2:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <HAL_TIM_Base_MspInit+0xb8>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <HAL_TIM_Base_MspInit+0xb8>)
 80012bc:	631a      	str	r2, [r3, #48]	; 0x30
 80012be:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <HAL_TIM_Base_MspInit+0xb8>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40023800 	.word	0x40023800
 80012d0:	200005c0 	.word	0x200005c0
 80012d4:	400260a0 	.word	0x400260a0

080012d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f8:	d11d      	bne.n	8001336 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <HAL_TIM_MspPostInit+0x68>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <HAL_TIM_MspPostInit+0x68>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <HAL_TIM_MspPostInit+0x68>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001316:	2302      	movs	r3, #2
 8001318:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001322:	2302      	movs	r3, #2
 8001324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001326:	2301      	movs	r3, #1
 8001328:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	4619      	mov	r1, r3
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <HAL_TIM_MspPostInit+0x6c>)
 8001332:	f000 fd57 	bl	8001de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001336:	bf00      	nop
 8001338:	3720      	adds	r7, #32
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	40020000 	.word	0x40020000

08001348 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08c      	sub	sp, #48	; 0x30
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <HAL_InitTick+0xd0>)
 800135e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001360:	4a2d      	ldr	r2, [pc, #180]	; (8001418 <HAL_InitTick+0xd0>)
 8001362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001366:	6453      	str	r3, [r2, #68]	; 0x44
 8001368:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <HAL_InitTick+0xd0>)
 800136a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001374:	f107 020c 	add.w	r2, r7, #12
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f001 ff9a 	bl	80032b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001384:	f001 ff84 	bl	8003290 <HAL_RCC_GetPCLK2Freq>
 8001388:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800138a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138c:	4a23      	ldr	r2, [pc, #140]	; (800141c <HAL_InitTick+0xd4>)
 800138e:	fba2 2303 	umull	r2, r3, r2, r3
 8001392:	0c9b      	lsrs	r3, r3, #18
 8001394:	3b01      	subs	r3, #1
 8001396:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001398:	4b21      	ldr	r3, [pc, #132]	; (8001420 <HAL_InitTick+0xd8>)
 800139a:	4a22      	ldr	r2, [pc, #136]	; (8001424 <HAL_InitTick+0xdc>)
 800139c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800139e:	4b20      	ldr	r3, [pc, #128]	; (8001420 <HAL_InitTick+0xd8>)
 80013a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013a4:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 80013a6:	4a1e      	ldr	r2, [pc, #120]	; (8001420 <HAL_InitTick+0xd8>)
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 80013ac:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <HAL_InitTick+0xd8>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b2:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <HAL_InitTick+0xd8>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <HAL_InitTick+0xd8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 80013be:	4818      	ldr	r0, [pc, #96]	; (8001420 <HAL_InitTick+0xd8>)
 80013c0:	f002 f835 	bl	800342e <HAL_TIM_Base_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80013ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d11b      	bne.n	800140a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 80013d2:	4813      	ldr	r0, [pc, #76]	; (8001420 <HAL_InitTick+0xd8>)
 80013d4:	f002 f87a 	bl	80034cc <HAL_TIM_Base_Start_IT>
 80013d8:	4603      	mov	r3, r0
 80013da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80013de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d111      	bne.n	800140a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80013e6:	2018      	movs	r0, #24
 80013e8:	f000 fa04 	bl	80017f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b0f      	cmp	r3, #15
 80013f0:	d808      	bhi.n	8001404 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 80013f2:	2200      	movs	r2, #0
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	2018      	movs	r0, #24
 80013f8:	f000 f9e0 	bl	80017bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013fc:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <HAL_InitTick+0xe0>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e002      	b.n	800140a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800140a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800140e:	4618      	mov	r0, r3
 8001410:	3730      	adds	r7, #48	; 0x30
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	431bde83 	.word	0x431bde83
 8001420:	20000624 	.word	0x20000624
 8001424:	40014000 	.word	0x40014000
 8001428:	20000038 	.word	0x20000038

0800142c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <NMI_Handler+0x4>

08001432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <HardFault_Handler+0x4>

08001438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <MemManage_Handler+0x4>

0800143e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001442:	e7fe      	b.n	8001442 <BusFault_Handler+0x4>

08001444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <UsageFault_Handler+0x4>

0800144a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <DMA1_Stream6_IRQHandler+0x10>)
 800145e:	f000 fa85 	bl	800196c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200005c0 	.word	0x200005c0

0800146c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001472:	f002 f8e6 	bl	8003642 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000624 	.word	0x20000624

08001480 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT_button_on_Pin);
 8001484:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001488:	f000 fe4a 	bl	8002120 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}

08001490 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <SystemInit+0x20>)
 8001496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <SystemInit+0x20>)
 800149c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <StartOledMenuTask>:

#include "tasks/OledMenu.h"

void StartOledMenuTask(void *argument){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	  for(;;)
	  {
		if(buttonEn() == ON){
 80014bc:	f7ff fb00 	bl	8000ac0 <buttonEn>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d104      	bne.n	80014d0 <StartOledMenuTask+0x1c>
			drawMainMenu();
 80014c6:	f7ff fb07 	bl	8000ad8 <drawMainMenu>
			buttonEnSet(OFF);
 80014ca:	2000      	movs	r0, #0
 80014cc:	f7ff fae8 	bl	8000aa0 <buttonEnSet>
		}
	    osDelay(100);
 80014d0:	2064      	movs	r0, #100	; 0x64
 80014d2:	f002 ffb9 	bl	8004448 <osDelay>
	  {
 80014d6:	e7f1      	b.n	80014bc <StartOledMenuTask+0x8>

080014d8 <StartSensOutTask>:
#include "tasks/SensOut.h"

void StartSensOutTask(void *argument){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	  for(;;)
	  {
	    osDelay(1000);
 80014e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014e4:	f002 ffb0 	bl	8004448 <osDelay>
	  {
 80014e8:	e7fa      	b.n	80014e0 <StartSensOutTask+0x8>
	...

080014ec <initUserTasks>:
  .name = "SensOutTask",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityBelowNormal,
};

void initUserTasks(){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	OledMenuTaskHandle = osThreadNew(StartOledMenuTask, NULL, &OledMenuTask_attributes);
 80014f0:	4a08      	ldr	r2, [pc, #32]	; (8001514 <initUserTasks+0x28>)
 80014f2:	2100      	movs	r1, #0
 80014f4:	4808      	ldr	r0, [pc, #32]	; (8001518 <initUserTasks+0x2c>)
 80014f6:	f002 ff15 	bl	8004324 <osThreadNew>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4a07      	ldr	r2, [pc, #28]	; (800151c <initUserTasks+0x30>)
 80014fe:	6013      	str	r3, [r2, #0]
	//OledOutTaskHandle  = osThreadNew(StartOledOutTask,  NULL, &OledOutTask_attributes);
	SensOutTaskHandle  = osThreadNew(StartSensOutTask,  NULL, &SensOutTask_attributes);
 8001500:	4a07      	ldr	r2, [pc, #28]	; (8001520 <initUserTasks+0x34>)
 8001502:	2100      	movs	r1, #0
 8001504:	4807      	ldr	r0, [pc, #28]	; (8001524 <initUserTasks+0x38>)
 8001506:	f002 ff0d 	bl	8004324 <osThreadNew>
 800150a:	4603      	mov	r3, r0
 800150c:	4a06      	ldr	r2, [pc, #24]	; (8001528 <initUserTasks+0x3c>)
 800150e:	6013      	str	r3, [r2, #0]
};
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	08008b5c 	.word	0x08008b5c
 8001518:	080014b5 	.word	0x080014b5
 800151c:	2000066c 	.word	0x2000066c
 8001520:	08008b80 	.word	0x08008b80
 8001524:	080014d9 	.word	0x080014d9
 8001528:	20000670 	.word	0x20000670

0800152c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800152c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001564 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001530:	480d      	ldr	r0, [pc, #52]	; (8001568 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001532:	490e      	ldr	r1, [pc, #56]	; (800156c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001534:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001538:	e002      	b.n	8001540 <LoopCopyDataInit>

0800153a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800153c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153e:	3304      	adds	r3, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001544:	d3f9      	bcc.n	800153a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001546:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001548:	4c0b      	ldr	r4, [pc, #44]	; (8001578 <LoopFillZerobss+0x26>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800154c:	e001      	b.n	8001552 <LoopFillZerobss>

0800154e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001550:	3204      	adds	r2, #4

08001552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001554:	d3fb      	bcc.n	800154e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001556:	f7ff ff9b 	bl	8001490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800155a:	f005 fc17 	bl	8006d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155e:	f7ff fb45 	bl	8000bec <main>
  bx  lr    
 8001562:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001564:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800156c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001570:	08008c1c 	.word	0x08008c1c
  ldr r2, =_sbss
 8001574:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001578:	20005090 	.word	0x20005090

0800157c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC_IRQHandler>
	...

08001580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <HAL_Init+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <HAL_Init+0x40>)
 800158a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_Init+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_Init+0x40>)
 8001596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <HAL_Init+0x40>)
 80015a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a8:	2003      	movs	r0, #3
 80015aa:	f000 f8fc 	bl	80017a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ae:	2000      	movs	r0, #0
 80015b0:	f7ff feca 	bl	8001348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b4:	f7ff fd74 	bl	80010a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023c00 	.word	0x40023c00

080015c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_IncTick+0x20>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_IncTick+0x24>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <HAL_IncTick+0x24>)
 80015d6:	6013      	str	r3, [r2, #0]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	2000003c 	.word	0x2000003c
 80015e8:	20000674 	.word	0x20000674

080015ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return uwTick;
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_GetTick+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000674 	.word	0x20000674

08001604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800160c:	f7ff ffee 	bl	80015ec <HAL_GetTick>
 8001610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800161c:	d005      	beq.n	800162a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_Delay+0x44>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4413      	add	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800162a:	bf00      	nop
 800162c:	f7ff ffde 	bl	80015ec <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	429a      	cmp	r2, r3
 800163a:	d8f7      	bhi.n	800162c <HAL_Delay+0x28>
  {
  }
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2000003c 	.word	0x2000003c

0800164c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001668:	4013      	ands	r3, r2
 800166a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800167e:	4a04      	ldr	r2, [pc, #16]	; (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	60d3      	str	r3, [r2, #12]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <__NVIC_GetPriorityGrouping+0x18>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	f003 0307 	and.w	r3, r3, #7
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	db0b      	blt.n	80016da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	f003 021f 	and.w	r2, r3, #31
 80016c8:	4907      	ldr	r1, [pc, #28]	; (80016e8 <__NVIC_EnableIRQ+0x38>)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	095b      	lsrs	r3, r3, #5
 80016d0:	2001      	movs	r0, #1
 80016d2:	fa00 f202 	lsl.w	r2, r0, r2
 80016d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000e100 	.word	0xe000e100

080016ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	6039      	str	r1, [r7, #0]
 80016f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	db0a      	blt.n	8001716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	b2da      	uxtb	r2, r3
 8001704:	490c      	ldr	r1, [pc, #48]	; (8001738 <__NVIC_SetPriority+0x4c>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	0112      	lsls	r2, r2, #4
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	440b      	add	r3, r1
 8001710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001714:	e00a      	b.n	800172c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4908      	ldr	r1, [pc, #32]	; (800173c <__NVIC_SetPriority+0x50>)
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	3b04      	subs	r3, #4
 8001724:	0112      	lsls	r2, r2, #4
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	440b      	add	r3, r1
 800172a:	761a      	strb	r2, [r3, #24]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000e100 	.word	0xe000e100
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001740:	b480      	push	{r7}
 8001742:	b089      	sub	sp, #36	; 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f1c3 0307 	rsb	r3, r3, #7
 800175a:	2b04      	cmp	r3, #4
 800175c:	bf28      	it	cs
 800175e:	2304      	movcs	r3, #4
 8001760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3304      	adds	r3, #4
 8001766:	2b06      	cmp	r3, #6
 8001768:	d902      	bls.n	8001770 <NVIC_EncodePriority+0x30>
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3b03      	subs	r3, #3
 800176e:	e000      	b.n	8001772 <NVIC_EncodePriority+0x32>
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	f04f 32ff 	mov.w	r2, #4294967295
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43da      	mvns	r2, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	401a      	ands	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001788:	f04f 31ff 	mov.w	r1, #4294967295
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	fa01 f303 	lsl.w	r3, r1, r3
 8001792:	43d9      	mvns	r1, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	4313      	orrs	r3, r2
         );
}
 800179a:	4618      	mov	r0, r3
 800179c:	3724      	adds	r7, #36	; 0x24
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ff4c 	bl	800164c <__NVIC_SetPriorityGrouping>
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
 80017c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ce:	f7ff ff61 	bl	8001694 <__NVIC_GetPriorityGrouping>
 80017d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	68b9      	ldr	r1, [r7, #8]
 80017d8:	6978      	ldr	r0, [r7, #20]
 80017da:	f7ff ffb1 	bl	8001740 <NVIC_EncodePriority>
 80017de:	4602      	mov	r2, r0
 80017e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e4:	4611      	mov	r1, r2
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff ff80 	bl	80016ec <__NVIC_SetPriority>
}
 80017ec:	bf00      	nop
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff54 	bl	80016b0 <__NVIC_EnableIRQ>
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800181c:	f7ff fee6 	bl	80015ec <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e099      	b.n	8001960 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2202      	movs	r2, #2
 8001830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 0201 	bic.w	r2, r2, #1
 800184a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800184c:	e00f      	b.n	800186e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800184e:	f7ff fecd 	bl	80015ec <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b05      	cmp	r3, #5
 800185a:	d908      	bls.n	800186e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2220      	movs	r2, #32
 8001860:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2203      	movs	r2, #3
 8001866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e078      	b.n	8001960 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1e8      	bne.n	800184e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	4b38      	ldr	r3, [pc, #224]	; (8001968 <HAL_DMA_Init+0x158>)
 8001888:	4013      	ands	r3, r2
 800188a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800189a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	4313      	orrs	r3, r2
 80018be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d107      	bne.n	80018d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	4313      	orrs	r3, r2
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f023 0307 	bic.w	r3, r3, #7
 80018ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	2b04      	cmp	r3, #4
 8001900:	d117      	bne.n	8001932 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	4313      	orrs	r3, r2
 800190a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00e      	beq.n	8001932 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f9e9 	bl	8001cec <DMA_CheckFifoParam>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d008      	beq.n	8001932 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2240      	movs	r2, #64	; 0x40
 8001924:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800192e:	2301      	movs	r3, #1
 8001930:	e016      	b.n	8001960 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f9a0 	bl	8001c80 <DMA_CalcBaseAndBitshift>
 8001940:	4603      	mov	r3, r0
 8001942:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001948:	223f      	movs	r2, #63	; 0x3f
 800194a:	409a      	lsls	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	f010803f 	.word	0xf010803f

0800196c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001978:	4b8e      	ldr	r3, [pc, #568]	; (8001bb4 <HAL_DMA_IRQHandler+0x248>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a8e      	ldr	r2, [pc, #568]	; (8001bb8 <HAL_DMA_IRQHandler+0x24c>)
 800197e:	fba2 2303 	umull	r2, r3, r2, r3
 8001982:	0a9b      	lsrs	r3, r3, #10
 8001984:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001996:	2208      	movs	r2, #8
 8001998:	409a      	lsls	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4013      	ands	r3, r2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d01a      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d013      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0204 	bic.w	r2, r2, #4
 80019be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c4:	2208      	movs	r2, #8
 80019c6:	409a      	lsls	r2, r3
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019dc:	2201      	movs	r2, #1
 80019de:	409a      	lsls	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d012      	beq.n	8001a0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00b      	beq.n	8001a0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fa:	2201      	movs	r2, #1
 80019fc:	409a      	lsls	r2, r3
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a06:	f043 0202 	orr.w	r2, r3, #2
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a12:	2204      	movs	r2, #4
 8001a14:	409a      	lsls	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d012      	beq.n	8001a44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00b      	beq.n	8001a44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a30:	2204      	movs	r2, #4
 8001a32:	409a      	lsls	r2, r3
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3c:	f043 0204 	orr.w	r2, r3, #4
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a48:	2210      	movs	r2, #16
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d043      	beq.n	8001adc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d03c      	beq.n	8001adc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a66:	2210      	movs	r2, #16
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d018      	beq.n	8001aae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d108      	bne.n	8001a9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d024      	beq.n	8001adc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	4798      	blx	r3
 8001a9a:	e01f      	b.n	8001adc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d01b      	beq.n	8001adc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	4798      	blx	r3
 8001aac:	e016      	b.n	8001adc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d107      	bne.n	8001acc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0208 	bic.w	r2, r2, #8
 8001aca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 808f 	beq.w	8001c0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 8087 	beq.w	8001c0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b02:	2220      	movs	r2, #32
 8001b04:	409a      	lsls	r2, r3
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b05      	cmp	r3, #5
 8001b14:	d136      	bne.n	8001b84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0216 	bic.w	r2, r2, #22
 8001b24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	695a      	ldr	r2, [r3, #20]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d103      	bne.n	8001b46 <HAL_DMA_IRQHandler+0x1da>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d007      	beq.n	8001b56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0208 	bic.w	r2, r2, #8
 8001b54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5a:	223f      	movs	r2, #63	; 0x3f
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d07e      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	4798      	blx	r3
        }
        return;
 8001b82:	e079      	b.n	8001c78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d01d      	beq.n	8001bce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10d      	bne.n	8001bbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d031      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	4798      	blx	r3
 8001bb0:	e02c      	b.n	8001c0c <HAL_DMA_IRQHandler+0x2a0>
 8001bb2:	bf00      	nop
 8001bb4:	20000034 	.word	0x20000034
 8001bb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d023      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	4798      	blx	r3
 8001bcc:	e01e      	b.n	8001c0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10f      	bne.n	8001bfc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0210 	bic.w	r2, r2, #16
 8001bea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d032      	beq.n	8001c7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d022      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2205      	movs	r2, #5
 8001c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0201 	bic.w	r2, r2, #1
 8001c36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d307      	bcc.n	8001c54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f2      	bne.n	8001c38 <HAL_DMA_IRQHandler+0x2cc>
 8001c52:	e000      	b.n	8001c56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d005      	beq.n	8001c7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	4798      	blx	r3
 8001c76:	e000      	b.n	8001c7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c78:	bf00      	nop
    }
  }
}
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	3b10      	subs	r3, #16
 8001c90:	4a14      	ldr	r2, [pc, #80]	; (8001ce4 <DMA_CalcBaseAndBitshift+0x64>)
 8001c92:	fba2 2303 	umull	r2, r3, r2, r3
 8001c96:	091b      	lsrs	r3, r3, #4
 8001c98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c9a:	4a13      	ldr	r2, [pc, #76]	; (8001ce8 <DMA_CalcBaseAndBitshift+0x68>)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	d909      	bls.n	8001cc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cb6:	f023 0303 	bic.w	r3, r3, #3
 8001cba:	1d1a      	adds	r2, r3, #4
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	659a      	str	r2, [r3, #88]	; 0x58
 8001cc0:	e007      	b.n	8001cd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cca:	f023 0303 	bic.w	r3, r3, #3
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	aaaaaaab 	.word	0xaaaaaaab
 8001ce8:	08008ba4 	.word	0x08008ba4

08001cec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d11f      	bne.n	8001d46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d856      	bhi.n	8001dba <DMA_CheckFifoParam+0xce>
 8001d0c:	a201      	add	r2, pc, #4	; (adr r2, 8001d14 <DMA_CheckFifoParam+0x28>)
 8001d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d12:	bf00      	nop
 8001d14:	08001d25 	.word	0x08001d25
 8001d18:	08001d37 	.word	0x08001d37
 8001d1c:	08001d25 	.word	0x08001d25
 8001d20:	08001dbb 	.word	0x08001dbb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d046      	beq.n	8001dbe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d34:	e043      	b.n	8001dbe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d3e:	d140      	bne.n	8001dc2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d44:	e03d      	b.n	8001dc2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d4e:	d121      	bne.n	8001d94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d837      	bhi.n	8001dc6 <DMA_CheckFifoParam+0xda>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <DMA_CheckFifoParam+0x70>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d73 	.word	0x08001d73
 8001d64:	08001d6d 	.word	0x08001d6d
 8001d68:	08001d85 	.word	0x08001d85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d70:	e030      	b.n	8001dd4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d025      	beq.n	8001dca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d82:	e022      	b.n	8001dca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d8c:	d11f      	bne.n	8001dce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d92:	e01c      	b.n	8001dce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d903      	bls.n	8001da2 <DMA_CheckFifoParam+0xb6>
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d003      	beq.n	8001da8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001da0:	e018      	b.n	8001dd4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	73fb      	strb	r3, [r7, #15]
      break;
 8001da6:	e015      	b.n	8001dd4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00e      	beq.n	8001dd2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
      break;
 8001db8:	e00b      	b.n	8001dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8001dba:	bf00      	nop
 8001dbc:	e00a      	b.n	8001dd4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dbe:	bf00      	nop
 8001dc0:	e008      	b.n	8001dd4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dc2:	bf00      	nop
 8001dc4:	e006      	b.n	8001dd4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dc6:	bf00      	nop
 8001dc8:	e004      	b.n	8001dd4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dca:	bf00      	nop
 8001dcc:	e002      	b.n	8001dd4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001dce:	bf00      	nop
 8001dd0:	e000      	b.n	8001dd4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dd2:	bf00      	nop
    }
  } 
  
  return status; 
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop

08001de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
 8001dfe:	e159      	b.n	80020b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e00:	2201      	movs	r2, #1
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	4013      	ands	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	f040 8148 	bne.w	80020ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d005      	beq.n	8001e36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d130      	bne.n	8001e98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	2203      	movs	r2, #3
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	091b      	lsrs	r3, r3, #4
 8001e82:	f003 0201 	and.w	r2, r3, #1
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d017      	beq.n	8001ed4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	2203      	movs	r2, #3
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d123      	bne.n	8001f28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	08da      	lsrs	r2, r3, #3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3208      	adds	r2, #8
 8001ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	220f      	movs	r2, #15
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	08da      	lsrs	r2, r3, #3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3208      	adds	r2, #8
 8001f22:	69b9      	ldr	r1, [r7, #24]
 8001f24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	2203      	movs	r2, #3
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0203 	and.w	r2, r3, #3
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 80a2 	beq.w	80020ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	4b57      	ldr	r3, [pc, #348]	; (80020cc <HAL_GPIO_Init+0x2e8>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	4a56      	ldr	r2, [pc, #344]	; (80020cc <HAL_GPIO_Init+0x2e8>)
 8001f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f78:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7a:	4b54      	ldr	r3, [pc, #336]	; (80020cc <HAL_GPIO_Init+0x2e8>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f86:	4a52      	ldr	r2, [pc, #328]	; (80020d0 <HAL_GPIO_Init+0x2ec>)
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	089b      	lsrs	r3, r3, #2
 8001f8c:	3302      	adds	r3, #2
 8001f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	220f      	movs	r2, #15
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a49      	ldr	r2, [pc, #292]	; (80020d4 <HAL_GPIO_Init+0x2f0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d019      	beq.n	8001fe6 <HAL_GPIO_Init+0x202>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a48      	ldr	r2, [pc, #288]	; (80020d8 <HAL_GPIO_Init+0x2f4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d013      	beq.n	8001fe2 <HAL_GPIO_Init+0x1fe>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a47      	ldr	r2, [pc, #284]	; (80020dc <HAL_GPIO_Init+0x2f8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00d      	beq.n	8001fde <HAL_GPIO_Init+0x1fa>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a46      	ldr	r2, [pc, #280]	; (80020e0 <HAL_GPIO_Init+0x2fc>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d007      	beq.n	8001fda <HAL_GPIO_Init+0x1f6>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a45      	ldr	r2, [pc, #276]	; (80020e4 <HAL_GPIO_Init+0x300>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d101      	bne.n	8001fd6 <HAL_GPIO_Init+0x1f2>
 8001fd2:	2304      	movs	r3, #4
 8001fd4:	e008      	b.n	8001fe8 <HAL_GPIO_Init+0x204>
 8001fd6:	2307      	movs	r3, #7
 8001fd8:	e006      	b.n	8001fe8 <HAL_GPIO_Init+0x204>
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e004      	b.n	8001fe8 <HAL_GPIO_Init+0x204>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e002      	b.n	8001fe8 <HAL_GPIO_Init+0x204>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <HAL_GPIO_Init+0x204>
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	69fa      	ldr	r2, [r7, #28]
 8001fea:	f002 0203 	and.w	r2, r2, #3
 8001fee:	0092      	lsls	r2, r2, #2
 8001ff0:	4093      	lsls	r3, r2
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ff8:	4935      	ldr	r1, [pc, #212]	; (80020d0 <HAL_GPIO_Init+0x2ec>)
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	3302      	adds	r3, #2
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002006:	4b38      	ldr	r3, [pc, #224]	; (80020e8 <HAL_GPIO_Init+0x304>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800202a:	4a2f      	ldr	r2, [pc, #188]	; (80020e8 <HAL_GPIO_Init+0x304>)
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002030:	4b2d      	ldr	r3, [pc, #180]	; (80020e8 <HAL_GPIO_Init+0x304>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002054:	4a24      	ldr	r2, [pc, #144]	; (80020e8 <HAL_GPIO_Init+0x304>)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800205a:	4b23      	ldr	r3, [pc, #140]	; (80020e8 <HAL_GPIO_Init+0x304>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800207e:	4a1a      	ldr	r2, [pc, #104]	; (80020e8 <HAL_GPIO_Init+0x304>)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002084:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <HAL_GPIO_Init+0x304>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020a8:	4a0f      	ldr	r2, [pc, #60]	; (80020e8 <HAL_GPIO_Init+0x304>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3301      	adds	r3, #1
 80020b2:	61fb      	str	r3, [r7, #28]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	2b0f      	cmp	r3, #15
 80020b8:	f67f aea2 	bls.w	8001e00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020bc:	bf00      	nop
 80020be:	bf00      	nop
 80020c0:	3724      	adds	r7, #36	; 0x24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40013800 	.word	0x40013800
 80020d4:	40020000 	.word	0x40020000
 80020d8:	40020400 	.word	0x40020400
 80020dc:	40020800 	.word	0x40020800
 80020e0:	40020c00 	.word	0x40020c00
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40013c00 	.word	0x40013c00

080020ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	807b      	strh	r3, [r7, #2]
 80020f8:	4613      	mov	r3, r2
 80020fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020fc:	787b      	ldrb	r3, [r7, #1]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002102:	887a      	ldrh	r2, [r7, #2]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002108:	e003      	b.n	8002112 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800210a:	887b      	ldrh	r3, [r7, #2]
 800210c:	041a      	lsls	r2, r3, #16
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	619a      	str	r2, [r3, #24]
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
	...

08002120 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800212c:	695a      	ldr	r2, [r3, #20]
 800212e:	88fb      	ldrh	r3, [r7, #6]
 8002130:	4013      	ands	r3, r2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d006      	beq.n	8002144 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002136:	4a05      	ldr	r2, [pc, #20]	; (800214c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800213c:	88fb      	ldrh	r3, [r7, #6]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe ff7e 	bl	8001040 <HAL_GPIO_EXTI_Callback>
  }
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40013c00 	.word	0x40013c00

08002150 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e12b      	b.n	80023ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d106      	bne.n	800217c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7fe ffbe 	bl	80010f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2224      	movs	r2, #36	; 0x24
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0201 	bic.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021b4:	f001 f858 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 80021b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	4a81      	ldr	r2, [pc, #516]	; (80023c4 <HAL_I2C_Init+0x274>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d807      	bhi.n	80021d4 <HAL_I2C_Init+0x84>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4a80      	ldr	r2, [pc, #512]	; (80023c8 <HAL_I2C_Init+0x278>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	bf94      	ite	ls
 80021cc:	2301      	movls	r3, #1
 80021ce:	2300      	movhi	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	e006      	b.n	80021e2 <HAL_I2C_Init+0x92>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4a7d      	ldr	r2, [pc, #500]	; (80023cc <HAL_I2C_Init+0x27c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	bf94      	ite	ls
 80021dc:	2301      	movls	r3, #1
 80021de:	2300      	movhi	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e0e7      	b.n	80023ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4a78      	ldr	r2, [pc, #480]	; (80023d0 <HAL_I2C_Init+0x280>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	0c9b      	lsrs	r3, r3, #18
 80021f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	430a      	orrs	r2, r1
 8002208:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	4a6a      	ldr	r2, [pc, #424]	; (80023c4 <HAL_I2C_Init+0x274>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d802      	bhi.n	8002224 <HAL_I2C_Init+0xd4>
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	3301      	adds	r3, #1
 8002222:	e009      	b.n	8002238 <HAL_I2C_Init+0xe8>
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800222a:	fb02 f303 	mul.w	r3, r2, r3
 800222e:	4a69      	ldr	r2, [pc, #420]	; (80023d4 <HAL_I2C_Init+0x284>)
 8002230:	fba2 2303 	umull	r2, r3, r2, r3
 8002234:	099b      	lsrs	r3, r3, #6
 8002236:	3301      	adds	r3, #1
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	430b      	orrs	r3, r1
 800223e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800224a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	495c      	ldr	r1, [pc, #368]	; (80023c4 <HAL_I2C_Init+0x274>)
 8002254:	428b      	cmp	r3, r1
 8002256:	d819      	bhi.n	800228c <HAL_I2C_Init+0x13c>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	1e59      	subs	r1, r3, #1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	fbb1 f3f3 	udiv	r3, r1, r3
 8002266:	1c59      	adds	r1, r3, #1
 8002268:	f640 73fc 	movw	r3, #4092	; 0xffc
 800226c:	400b      	ands	r3, r1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_I2C_Init+0x138>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1e59      	subs	r1, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002280:	3301      	adds	r3, #1
 8002282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002286:	e051      	b.n	800232c <HAL_I2C_Init+0x1dc>
 8002288:	2304      	movs	r3, #4
 800228a:	e04f      	b.n	800232c <HAL_I2C_Init+0x1dc>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d111      	bne.n	80022b8 <HAL_I2C_Init+0x168>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	1e58      	subs	r0, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6859      	ldr	r1, [r3, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	440b      	add	r3, r1
 80022a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022a6:	3301      	adds	r3, #1
 80022a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf0c      	ite	eq
 80022b0:	2301      	moveq	r3, #1
 80022b2:	2300      	movne	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	e012      	b.n	80022de <HAL_I2C_Init+0x18e>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	1e58      	subs	r0, r3, #1
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6859      	ldr	r1, [r3, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	0099      	lsls	r1, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ce:	3301      	adds	r3, #1
 80022d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bf0c      	ite	eq
 80022d8:	2301      	moveq	r3, #1
 80022da:	2300      	movne	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_I2C_Init+0x196>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e022      	b.n	800232c <HAL_I2C_Init+0x1dc>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10e      	bne.n	800230c <HAL_I2C_Init+0x1bc>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1e58      	subs	r0, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6859      	ldr	r1, [r3, #4]
 80022f6:	460b      	mov	r3, r1
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	440b      	add	r3, r1
 80022fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002300:	3301      	adds	r3, #1
 8002302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800230a:	e00f      	b.n	800232c <HAL_I2C_Init+0x1dc>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1e58      	subs	r0, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	0099      	lsls	r1, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002322:	3301      	adds	r3, #1
 8002324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002328:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	6809      	ldr	r1, [r1, #0]
 8002330:	4313      	orrs	r3, r2
 8002332:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69da      	ldr	r2, [r3, #28]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800235a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6911      	ldr	r1, [r2, #16]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68d2      	ldr	r2, [r2, #12]
 8002366:	4311      	orrs	r1, r2
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	430b      	orrs	r3, r1
 800236e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695a      	ldr	r2, [r3, #20]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	000186a0 	.word	0x000186a0
 80023c8:	001e847f 	.word	0x001e847f
 80023cc:	003d08ff 	.word	0x003d08ff
 80023d0:	431bde83 	.word	0x431bde83
 80023d4:	10624dd3 	.word	0x10624dd3

080023d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af02      	add	r7, sp, #8
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	4608      	mov	r0, r1
 80023e2:	4611      	mov	r1, r2
 80023e4:	461a      	mov	r2, r3
 80023e6:	4603      	mov	r3, r0
 80023e8:	817b      	strh	r3, [r7, #10]
 80023ea:	460b      	mov	r3, r1
 80023ec:	813b      	strh	r3, [r7, #8]
 80023ee:	4613      	mov	r3, r2
 80023f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023f2:	f7ff f8fb 	bl	80015ec <HAL_GetTick>
 80023f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b20      	cmp	r3, #32
 8002402:	f040 80d9 	bne.w	80025b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	2319      	movs	r3, #25
 800240c:	2201      	movs	r2, #1
 800240e:	496d      	ldr	r1, [pc, #436]	; (80025c4 <HAL_I2C_Mem_Write+0x1ec>)
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 f971 	bl	80026f8 <I2C_WaitOnFlagUntilTimeout>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800241c:	2302      	movs	r3, #2
 800241e:	e0cc      	b.n	80025ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_I2C_Mem_Write+0x56>
 800242a:	2302      	movs	r3, #2
 800242c:	e0c5      	b.n	80025ba <HAL_I2C_Mem_Write+0x1e2>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d007      	beq.n	8002454 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002462:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2221      	movs	r2, #33	; 0x21
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2240      	movs	r2, #64	; 0x40
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a3a      	ldr	r2, [r7, #32]
 800247e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002484:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4a4d      	ldr	r2, [pc, #308]	; (80025c8 <HAL_I2C_Mem_Write+0x1f0>)
 8002494:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002496:	88f8      	ldrh	r0, [r7, #6]
 8002498:	893a      	ldrh	r2, [r7, #8]
 800249a:	8979      	ldrh	r1, [r7, #10]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	4603      	mov	r3, r0
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f890 	bl	80025cc <I2C_RequestMemoryWrite>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d052      	beq.n	8002558 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e081      	b.n	80025ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 f9f2 	bl	80028a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00d      	beq.n	80024e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d107      	bne.n	80024de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e06b      	b.n	80025ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	781a      	ldrb	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002508:	b29b      	uxth	r3, r3
 800250a:	3b01      	subs	r3, #1
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b04      	cmp	r3, #4
 800251e:	d11b      	bne.n	8002558 <HAL_I2C_Mem_Write+0x180>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002524:	2b00      	cmp	r3, #0
 8002526:	d017      	beq.n	8002558 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	781a      	ldrb	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002542:	3b01      	subs	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1aa      	bne.n	80024b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 f9de 	bl	8002926 <I2C_WaitOnBTFFlagUntilTimeout>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00d      	beq.n	800258c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	2b04      	cmp	r3, #4
 8002576:	d107      	bne.n	8002588 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002586:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e016      	b.n	80025ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e000      	b.n	80025ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80025b8:	2302      	movs	r3, #2
  }
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	00100002 	.word	0x00100002
 80025c8:	ffff0000 	.word	0xffff0000

080025cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	4608      	mov	r0, r1
 80025d6:	4611      	mov	r1, r2
 80025d8:	461a      	mov	r2, r3
 80025da:	4603      	mov	r3, r0
 80025dc:	817b      	strh	r3, [r7, #10]
 80025de:	460b      	mov	r3, r1
 80025e0:	813b      	strh	r3, [r7, #8]
 80025e2:	4613      	mov	r3, r2
 80025e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 f878 	bl	80026f8 <I2C_WaitOnFlagUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00d      	beq.n	800262a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800261c:	d103      	bne.n	8002626 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002624:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e05f      	b.n	80026ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800262a:	897b      	ldrh	r3, [r7, #10]
 800262c:	b2db      	uxtb	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002638:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	6a3a      	ldr	r2, [r7, #32]
 800263e:	492d      	ldr	r1, [pc, #180]	; (80026f4 <I2C_RequestMemoryWrite+0x128>)
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f8b0 	bl	80027a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e04c      	b.n	80026ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002668:	6a39      	ldr	r1, [r7, #32]
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 f91a 	bl	80028a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00d      	beq.n	8002692 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	2b04      	cmp	r3, #4
 800267c:	d107      	bne.n	800268e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800268c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e02b      	b.n	80026ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d105      	bne.n	80026a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002698:	893b      	ldrh	r3, [r7, #8]
 800269a:	b2da      	uxtb	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	611a      	str	r2, [r3, #16]
 80026a2:	e021      	b.n	80026e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026a4:	893b      	ldrh	r3, [r7, #8]
 80026a6:	0a1b      	lsrs	r3, r3, #8
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b4:	6a39      	ldr	r1, [r7, #32]
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 f8f4 	bl	80028a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00d      	beq.n	80026de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d107      	bne.n	80026da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e005      	b.n	80026ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026de:	893b      	ldrh	r3, [r7, #8]
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	00010002 	.word	0x00010002

080026f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	603b      	str	r3, [r7, #0]
 8002704:	4613      	mov	r3, r2
 8002706:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002708:	e025      	b.n	8002756 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002710:	d021      	beq.n	8002756 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002712:	f7fe ff6b 	bl	80015ec <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d302      	bcc.n	8002728 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d116      	bne.n	8002756 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f043 0220 	orr.w	r2, r3, #32
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e023      	b.n	800279e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	0c1b      	lsrs	r3, r3, #16
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b01      	cmp	r3, #1
 800275e:	d10d      	bne.n	800277c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	43da      	mvns	r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	4013      	ands	r3, r2
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	bf0c      	ite	eq
 8002772:	2301      	moveq	r3, #1
 8002774:	2300      	movne	r3, #0
 8002776:	b2db      	uxtb	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	e00c      	b.n	8002796 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	43da      	mvns	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	4013      	ands	r3, r2
 8002788:	b29b      	uxth	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	bf0c      	ite	eq
 800278e:	2301      	moveq	r3, #1
 8002790:	2300      	movne	r3, #0
 8002792:	b2db      	uxtb	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	429a      	cmp	r2, r3
 800279a:	d0b6      	beq.n	800270a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027b4:	e051      	b.n	800285a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c4:	d123      	bne.n	800280e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2220      	movs	r2, #32
 80027ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f043 0204 	orr.w	r2, r3, #4
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e046      	b.n	800289c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002814:	d021      	beq.n	800285a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002816:	f7fe fee9 	bl	80015ec <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	429a      	cmp	r2, r3
 8002824:	d302      	bcc.n	800282c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d116      	bne.n	800285a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f043 0220 	orr.w	r2, r3, #32
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e020      	b.n	800289c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	0c1b      	lsrs	r3, r3, #16
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b01      	cmp	r3, #1
 8002862:	d10c      	bne.n	800287e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	43da      	mvns	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4013      	ands	r3, r2
 8002870:	b29b      	uxth	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	bf14      	ite	ne
 8002876:	2301      	movne	r3, #1
 8002878:	2300      	moveq	r3, #0
 800287a:	b2db      	uxtb	r3, r3
 800287c:	e00b      	b.n	8002896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	43da      	mvns	r2, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	4013      	ands	r3, r2
 800288a:	b29b      	uxth	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	bf14      	ite	ne
 8002890:	2301      	movne	r3, #1
 8002892:	2300      	moveq	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d18d      	bne.n	80027b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028b0:	e02d      	b.n	800290e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 f878 	bl	80029a8 <I2C_IsAcknowledgeFailed>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e02d      	b.n	800291e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c8:	d021      	beq.n	800290e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ca:	f7fe fe8f 	bl	80015ec <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d302      	bcc.n	80028e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d116      	bne.n	800290e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2220      	movs	r2, #32
 80028ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f043 0220 	orr.w	r2, r3, #32
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e007      	b.n	800291e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002918:	2b80      	cmp	r3, #128	; 0x80
 800291a:	d1ca      	bne.n	80028b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002932:	e02d      	b.n	8002990 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 f837 	bl	80029a8 <I2C_IsAcknowledgeFailed>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e02d      	b.n	80029a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294a:	d021      	beq.n	8002990 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294c:	f7fe fe4e 	bl	80015ec <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	429a      	cmp	r2, r3
 800295a:	d302      	bcc.n	8002962 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d116      	bne.n	8002990 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2220      	movs	r2, #32
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	f043 0220 	orr.w	r2, r3, #32
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e007      	b.n	80029a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	2b04      	cmp	r3, #4
 800299c:	d1ca      	bne.n	8002934 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029be:	d11b      	bne.n	80029f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	f043 0204 	orr.w	r2, r3, #4
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e000      	b.n	80029fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e267      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d075      	beq.n	8002b12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a26:	4b88      	ldr	r3, [pc, #544]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d00c      	beq.n	8002a4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a32:	4b85      	ldr	r3, [pc, #532]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d112      	bne.n	8002a64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a3e:	4b82      	ldr	r3, [pc, #520]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a4a:	d10b      	bne.n	8002a64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4c:	4b7e      	ldr	r3, [pc, #504]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d05b      	beq.n	8002b10 <HAL_RCC_OscConfig+0x108>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d157      	bne.n	8002b10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e242      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a6c:	d106      	bne.n	8002a7c <HAL_RCC_OscConfig+0x74>
 8002a6e:	4b76      	ldr	r3, [pc, #472]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a75      	ldr	r2, [pc, #468]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	e01d      	b.n	8002ab8 <HAL_RCC_OscConfig+0xb0>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x98>
 8002a86:	4b70      	ldr	r3, [pc, #448]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a6f      	ldr	r2, [pc, #444]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	4b6d      	ldr	r3, [pc, #436]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a6c      	ldr	r2, [pc, #432]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e00b      	b.n	8002ab8 <HAL_RCC_OscConfig+0xb0>
 8002aa0:	4b69      	ldr	r3, [pc, #420]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a68      	ldr	r2, [pc, #416]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	4b66      	ldr	r3, [pc, #408]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a65      	ldr	r2, [pc, #404]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d013      	beq.n	8002ae8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac0:	f7fe fd94 	bl	80015ec <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac8:	f7fe fd90 	bl	80015ec <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b64      	cmp	r3, #100	; 0x64
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e207      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ada:	4b5b      	ldr	r3, [pc, #364]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0xc0>
 8002ae6:	e014      	b.n	8002b12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7fe fd80 	bl	80015ec <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af0:	f7fe fd7c 	bl	80015ec <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b64      	cmp	r3, #100	; 0x64
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e1f3      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b02:	4b51      	ldr	r3, [pc, #324]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCC_OscConfig+0xe8>
 8002b0e:	e000      	b.n	8002b12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d063      	beq.n	8002be6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b1e:	4b4a      	ldr	r3, [pc, #296]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 030c 	and.w	r3, r3, #12
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00b      	beq.n	8002b42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b2a:	4b47      	ldr	r3, [pc, #284]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d11c      	bne.n	8002b70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b36:	4b44      	ldr	r3, [pc, #272]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d116      	bne.n	8002b70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b42:	4b41      	ldr	r3, [pc, #260]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d005      	beq.n	8002b5a <HAL_RCC_OscConfig+0x152>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d001      	beq.n	8002b5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e1c7      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5a:	4b3b      	ldr	r3, [pc, #236]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4937      	ldr	r1, [pc, #220]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6e:	e03a      	b.n	8002be6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d020      	beq.n	8002bba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b78:	4b34      	ldr	r3, [pc, #208]	; (8002c4c <HAL_RCC_OscConfig+0x244>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7e:	f7fe fd35 	bl	80015ec <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b86:	f7fe fd31 	bl	80015ec <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e1a8      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b98:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0f0      	beq.n	8002b86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba4:	4b28      	ldr	r3, [pc, #160]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	4925      	ldr	r1, [pc, #148]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	600b      	str	r3, [r1, #0]
 8002bb8:	e015      	b.n	8002be6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bba:	4b24      	ldr	r3, [pc, #144]	; (8002c4c <HAL_RCC_OscConfig+0x244>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7fe fd14 	bl	80015ec <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bc8:	f7fe fd10 	bl	80015ec <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e187      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bda:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d036      	beq.n	8002c60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d016      	beq.n	8002c28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bfa:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <HAL_RCC_OscConfig+0x248>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c00:	f7fe fcf4 	bl	80015ec <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c08:	f7fe fcf0 	bl	80015ec <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e167      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c1a:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0x200>
 8002c26:	e01b      	b.n	8002c60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <HAL_RCC_OscConfig+0x248>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2e:	f7fe fcdd 	bl	80015ec <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c34:	e00e      	b.n	8002c54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c36:	f7fe fcd9 	bl	80015ec <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d907      	bls.n	8002c54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e150      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	42470000 	.word	0x42470000
 8002c50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c54:	4b88      	ldr	r3, [pc, #544]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1ea      	bne.n	8002c36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 8097 	beq.w	8002d9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c72:	4b81      	ldr	r3, [pc, #516]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10f      	bne.n	8002c9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	4b7d      	ldr	r3, [pc, #500]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	4a7c      	ldr	r2, [pc, #496]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8e:	4b7a      	ldr	r3, [pc, #488]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9e:	4b77      	ldr	r3, [pc, #476]	; (8002e7c <HAL_RCC_OscConfig+0x474>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d118      	bne.n	8002cdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002caa:	4b74      	ldr	r3, [pc, #464]	; (8002e7c <HAL_RCC_OscConfig+0x474>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a73      	ldr	r2, [pc, #460]	; (8002e7c <HAL_RCC_OscConfig+0x474>)
 8002cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb6:	f7fe fc99 	bl	80015ec <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cbe:	f7fe fc95 	bl	80015ec <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e10c      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd0:	4b6a      	ldr	r3, [pc, #424]	; (8002e7c <HAL_RCC_OscConfig+0x474>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d106      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x2ea>
 8002ce4:	4b64      	ldr	r3, [pc, #400]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce8:	4a63      	ldr	r2, [pc, #396]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf0:	e01c      	b.n	8002d2c <HAL_RCC_OscConfig+0x324>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b05      	cmp	r3, #5
 8002cf8:	d10c      	bne.n	8002d14 <HAL_RCC_OscConfig+0x30c>
 8002cfa:	4b5f      	ldr	r3, [pc, #380]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfe:	4a5e      	ldr	r2, [pc, #376]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d00:	f043 0304 	orr.w	r3, r3, #4
 8002d04:	6713      	str	r3, [r2, #112]	; 0x70
 8002d06:	4b5c      	ldr	r3, [pc, #368]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	4a5b      	ldr	r2, [pc, #364]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	6713      	str	r3, [r2, #112]	; 0x70
 8002d12:	e00b      	b.n	8002d2c <HAL_RCC_OscConfig+0x324>
 8002d14:	4b58      	ldr	r3, [pc, #352]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d18:	4a57      	ldr	r2, [pc, #348]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d1a:	f023 0301 	bic.w	r3, r3, #1
 8002d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d20:	4b55      	ldr	r3, [pc, #340]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	4a54      	ldr	r2, [pc, #336]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d26:	f023 0304 	bic.w	r3, r3, #4
 8002d2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d015      	beq.n	8002d60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d34:	f7fe fc5a 	bl	80015ec <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3a:	e00a      	b.n	8002d52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d3c:	f7fe fc56 	bl	80015ec <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e0cb      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d52:	4b49      	ldr	r3, [pc, #292]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0ee      	beq.n	8002d3c <HAL_RCC_OscConfig+0x334>
 8002d5e:	e014      	b.n	8002d8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d60:	f7fe fc44 	bl	80015ec <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d66:	e00a      	b.n	8002d7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d68:	f7fe fc40 	bl	80015ec <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e0b5      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d7e:	4b3e      	ldr	r3, [pc, #248]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1ee      	bne.n	8002d68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d8a:	7dfb      	ldrb	r3, [r7, #23]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d105      	bne.n	8002d9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d90:	4b39      	ldr	r3, [pc, #228]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	4a38      	ldr	r2, [pc, #224]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80a1 	beq.w	8002ee8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002da6:	4b34      	ldr	r3, [pc, #208]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 030c 	and.w	r3, r3, #12
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d05c      	beq.n	8002e6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d141      	bne.n	8002e3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dba:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <HAL_RCC_OscConfig+0x478>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fc14 	bl	80015ec <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fe fc10 	bl	80015ec <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e087      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dda:	4b27      	ldr	r3, [pc, #156]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69da      	ldr	r2, [r3, #28]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	019b      	lsls	r3, r3, #6
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	085b      	lsrs	r3, r3, #1
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	041b      	lsls	r3, r3, #16
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	061b      	lsls	r3, r3, #24
 8002e0a:	491b      	ldr	r1, [pc, #108]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e10:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <HAL_RCC_OscConfig+0x478>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e16:	f7fe fbe9 	bl	80015ec <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1e:	f7fe fbe5 	bl	80015ec <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e05c      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e30:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x416>
 8002e3c:	e054      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <HAL_RCC_OscConfig+0x478>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e44:	f7fe fbd2 	bl	80015ec <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7fe fbce 	bl	80015ec <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e045      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5e:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_RCC_OscConfig+0x470>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x444>
 8002e6a:	e03d      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d107      	bne.n	8002e84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e038      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40007000 	.word	0x40007000
 8002e80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <HAL_RCC_OscConfig+0x4ec>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d028      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d121      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d11a      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002eba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d111      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eca:	085b      	lsrs	r3, r3, #1
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d107      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ede:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800

08002ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0cc      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f0c:	4b68      	ldr	r3, [pc, #416]	; (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d90c      	bls.n	8002f34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1a:	4b65      	ldr	r3, [pc, #404]	; (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f22:	4b63      	ldr	r3, [pc, #396]	; (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d001      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0b8      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d020      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f4c:	4b59      	ldr	r3, [pc, #356]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	4a58      	ldr	r2, [pc, #352]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f64:	4b53      	ldr	r3, [pc, #332]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	4a52      	ldr	r2, [pc, #328]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f70:	4b50      	ldr	r3, [pc, #320]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	494d      	ldr	r1, [pc, #308]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d044      	beq.n	8003018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d107      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f96:	4b47      	ldr	r3, [pc, #284]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d119      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e07f      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d003      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb6:	4b3f      	ldr	r3, [pc, #252]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d109      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e06f      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc6:	4b3b      	ldr	r3, [pc, #236]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e067      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd6:	4b37      	ldr	r3, [pc, #220]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f023 0203 	bic.w	r2, r3, #3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4934      	ldr	r1, [pc, #208]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe8:	f7fe fb00 	bl	80015ec <HAL_GetTick>
 8002fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fee:	e00a      	b.n	8003006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff0:	f7fe fafc 	bl	80015ec <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e04f      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003006:	4b2b      	ldr	r3, [pc, #172]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 020c 	and.w	r2, r3, #12
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	429a      	cmp	r2, r3
 8003016:	d1eb      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003018:	4b25      	ldr	r3, [pc, #148]	; (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d20c      	bcs.n	8003040 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003026:	4b22      	ldr	r3, [pc, #136]	; (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302e:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d001      	beq.n	8003040 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e032      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800304c:	4b19      	ldr	r3, [pc, #100]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4916      	ldr	r1, [pc, #88]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	4313      	orrs	r3, r2
 800305c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800306a:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	490e      	ldr	r1, [pc, #56]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800307e:	f000 f821 	bl	80030c4 <HAL_RCC_GetSysClockFreq>
 8003082:	4602      	mov	r2, r0
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	490a      	ldr	r1, [pc, #40]	; (80030b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003090:	5ccb      	ldrb	r3, [r1, r3]
 8003092:	fa22 f303 	lsr.w	r3, r2, r3
 8003096:	4a09      	ldr	r2, [pc, #36]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8003098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800309a:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <HAL_RCC_ClockConfig+0x1c8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe f952 	bl	8001348 <HAL_InitTick>

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40023c00 	.word	0x40023c00
 80030b4:	40023800 	.word	0x40023800
 80030b8:	08008b44 	.word	0x08008b44
 80030bc:	20000034 	.word	0x20000034
 80030c0:	20000038 	.word	0x20000038

080030c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c8:	b090      	sub	sp, #64	; 0x40
 80030ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	637b      	str	r3, [r7, #52]	; 0x34
 80030d0:	2300      	movs	r3, #0
 80030d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030d4:	2300      	movs	r3, #0
 80030d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030dc:	4b59      	ldr	r3, [pc, #356]	; (8003244 <HAL_RCC_GetSysClockFreq+0x180>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 030c 	and.w	r3, r3, #12
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d00d      	beq.n	8003104 <HAL_RCC_GetSysClockFreq+0x40>
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	f200 80a1 	bhi.w	8003230 <HAL_RCC_GetSysClockFreq+0x16c>
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <HAL_RCC_GetSysClockFreq+0x34>
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d003      	beq.n	80030fe <HAL_RCC_GetSysClockFreq+0x3a>
 80030f6:	e09b      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030f8:	4b53      	ldr	r3, [pc, #332]	; (8003248 <HAL_RCC_GetSysClockFreq+0x184>)
 80030fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80030fc:	e09b      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030fe:	4b53      	ldr	r3, [pc, #332]	; (800324c <HAL_RCC_GetSysClockFreq+0x188>)
 8003100:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003102:	e098      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003104:	4b4f      	ldr	r3, [pc, #316]	; (8003244 <HAL_RCC_GetSysClockFreq+0x180>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800310c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800310e:	4b4d      	ldr	r3, [pc, #308]	; (8003244 <HAL_RCC_GetSysClockFreq+0x180>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d028      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800311a:	4b4a      	ldr	r3, [pc, #296]	; (8003244 <HAL_RCC_GetSysClockFreq+0x180>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	099b      	lsrs	r3, r3, #6
 8003120:	2200      	movs	r2, #0
 8003122:	623b      	str	r3, [r7, #32]
 8003124:	627a      	str	r2, [r7, #36]	; 0x24
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800312c:	2100      	movs	r1, #0
 800312e:	4b47      	ldr	r3, [pc, #284]	; (800324c <HAL_RCC_GetSysClockFreq+0x188>)
 8003130:	fb03 f201 	mul.w	r2, r3, r1
 8003134:	2300      	movs	r3, #0
 8003136:	fb00 f303 	mul.w	r3, r0, r3
 800313a:	4413      	add	r3, r2
 800313c:	4a43      	ldr	r2, [pc, #268]	; (800324c <HAL_RCC_GetSysClockFreq+0x188>)
 800313e:	fba0 1202 	umull	r1, r2, r0, r2
 8003142:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003144:	460a      	mov	r2, r1
 8003146:	62ba      	str	r2, [r7, #40]	; 0x28
 8003148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800314a:	4413      	add	r3, r2
 800314c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800314e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003150:	2200      	movs	r2, #0
 8003152:	61bb      	str	r3, [r7, #24]
 8003154:	61fa      	str	r2, [r7, #28]
 8003156:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800315a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800315e:	f7fd f83f 	bl	80001e0 <__aeabi_uldivmod>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4613      	mov	r3, r2
 8003168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800316a:	e053      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800316c:	4b35      	ldr	r3, [pc, #212]	; (8003244 <HAL_RCC_GetSysClockFreq+0x180>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	099b      	lsrs	r3, r3, #6
 8003172:	2200      	movs	r2, #0
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	617a      	str	r2, [r7, #20]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800317e:	f04f 0b00 	mov.w	fp, #0
 8003182:	4652      	mov	r2, sl
 8003184:	465b      	mov	r3, fp
 8003186:	f04f 0000 	mov.w	r0, #0
 800318a:	f04f 0100 	mov.w	r1, #0
 800318e:	0159      	lsls	r1, r3, #5
 8003190:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003194:	0150      	lsls	r0, r2, #5
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	ebb2 080a 	subs.w	r8, r2, sl
 800319e:	eb63 090b 	sbc.w	r9, r3, fp
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80031ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80031b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80031b6:	ebb2 0408 	subs.w	r4, r2, r8
 80031ba:	eb63 0509 	sbc.w	r5, r3, r9
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	00eb      	lsls	r3, r5, #3
 80031c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031cc:	00e2      	lsls	r2, r4, #3
 80031ce:	4614      	mov	r4, r2
 80031d0:	461d      	mov	r5, r3
 80031d2:	eb14 030a 	adds.w	r3, r4, sl
 80031d6:	603b      	str	r3, [r7, #0]
 80031d8:	eb45 030b 	adc.w	r3, r5, fp
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031ea:	4629      	mov	r1, r5
 80031ec:	028b      	lsls	r3, r1, #10
 80031ee:	4621      	mov	r1, r4
 80031f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031f4:	4621      	mov	r1, r4
 80031f6:	028a      	lsls	r2, r1, #10
 80031f8:	4610      	mov	r0, r2
 80031fa:	4619      	mov	r1, r3
 80031fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031fe:	2200      	movs	r2, #0
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	60fa      	str	r2, [r7, #12]
 8003204:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003208:	f7fc ffea 	bl	80001e0 <__aeabi_uldivmod>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4613      	mov	r3, r2
 8003212:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003214:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <HAL_RCC_GetSysClockFreq+0x180>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	0c1b      	lsrs	r3, r3, #16
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	3301      	adds	r3, #1
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003224:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	fbb2 f3f3 	udiv	r3, r2, r3
 800322c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800322e:	e002      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <HAL_RCC_GetSysClockFreq+0x184>)
 8003232:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003234:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003238:	4618      	mov	r0, r3
 800323a:	3740      	adds	r7, #64	; 0x40
 800323c:	46bd      	mov	sp, r7
 800323e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800
 8003248:	00f42400 	.word	0x00f42400
 800324c:	017d7840 	.word	0x017d7840

08003250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003254:	4b03      	ldr	r3, [pc, #12]	; (8003264 <HAL_RCC_GetHCLKFreq+0x14>)
 8003256:	681b      	ldr	r3, [r3, #0]
}
 8003258:	4618      	mov	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	20000034 	.word	0x20000034

08003268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800326c:	f7ff fff0 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 8003270:	4602      	mov	r2, r0
 8003272:	4b05      	ldr	r3, [pc, #20]	; (8003288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	0a9b      	lsrs	r3, r3, #10
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	4903      	ldr	r1, [pc, #12]	; (800328c <HAL_RCC_GetPCLK1Freq+0x24>)
 800327e:	5ccb      	ldrb	r3, [r1, r3]
 8003280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003284:	4618      	mov	r0, r3
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40023800 	.word	0x40023800
 800328c:	08008b54 	.word	0x08008b54

08003290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003294:	f7ff ffdc 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 8003298:	4602      	mov	r2, r0
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	0b5b      	lsrs	r3, r3, #13
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	4903      	ldr	r1, [pc, #12]	; (80032b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032a6:	5ccb      	ldrb	r3, [r1, r3]
 80032a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40023800 	.word	0x40023800
 80032b4:	08008b54 	.word	0x08008b54

080032b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	220f      	movs	r2, #15
 80032c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032c8:	4b12      	ldr	r3, [pc, #72]	; (8003314 <HAL_RCC_GetClockConfig+0x5c>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 0203 	and.w	r2, r3, #3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032d4:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <HAL_RCC_GetClockConfig+0x5c>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032e0:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <HAL_RCC_GetClockConfig+0x5c>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80032ec:	4b09      	ldr	r3, [pc, #36]	; (8003314 <HAL_RCC_GetClockConfig+0x5c>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	08db      	lsrs	r3, r3, #3
 80032f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032fa:	4b07      	ldr	r3, [pc, #28]	; (8003318 <HAL_RCC_GetClockConfig+0x60>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0207 	and.w	r2, r3, #7
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	601a      	str	r2, [r3, #0]
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800
 8003318:	40023c00 	.word	0x40023c00

0800331c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e07b      	b.n	8003426 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	2b00      	cmp	r3, #0
 8003334:	d108      	bne.n	8003348 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800333e:	d009      	beq.n	8003354 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	61da      	str	r2, [r3, #28]
 8003346:	e005      	b.n	8003354 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d106      	bne.n	8003374 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7fd ff0a 	bl	8001188 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800338a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	431a      	orrs	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033c4:	431a      	orrs	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d8:	ea42 0103 	orr.w	r1, r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	0c1b      	lsrs	r3, r3, #16
 80033f2:	f003 0104 	and.w	r1, r3, #4
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	f003 0210 	and.w	r2, r3, #16
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69da      	ldr	r2, [r3, #28]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003414:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e041      	b.n	80034c4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d106      	bne.n	800345a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7fd fedf 	bl	8001218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2202      	movs	r2, #2
 800345e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3304      	adds	r3, #4
 800346a:	4619      	mov	r1, r3
 800346c:	4610      	mov	r0, r2
 800346e:	f000 fba3 	bl	8003bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d001      	beq.n	80034e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e044      	b.n	800356e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a1e      	ldr	r2, [pc, #120]	; (800357c <HAL_TIM_Base_Start_IT+0xb0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d018      	beq.n	8003538 <HAL_TIM_Base_Start_IT+0x6c>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350e:	d013      	beq.n	8003538 <HAL_TIM_Base_Start_IT+0x6c>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1a      	ldr	r2, [pc, #104]	; (8003580 <HAL_TIM_Base_Start_IT+0xb4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00e      	beq.n	8003538 <HAL_TIM_Base_Start_IT+0x6c>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a19      	ldr	r2, [pc, #100]	; (8003584 <HAL_TIM_Base_Start_IT+0xb8>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d009      	beq.n	8003538 <HAL_TIM_Base_Start_IT+0x6c>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a17      	ldr	r2, [pc, #92]	; (8003588 <HAL_TIM_Base_Start_IT+0xbc>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d004      	beq.n	8003538 <HAL_TIM_Base_Start_IT+0x6c>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a16      	ldr	r2, [pc, #88]	; (800358c <HAL_TIM_Base_Start_IT+0xc0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d111      	bne.n	800355c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2b06      	cmp	r3, #6
 8003548:	d010      	beq.n	800356c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 0201 	orr.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800355a:	e007      	b.n	800356c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40010000 	.word	0x40010000
 8003580:	40000400 	.word	0x40000400
 8003584:	40000800 	.word	0x40000800
 8003588:	40000c00 	.word	0x40000c00
 800358c:	40014000 	.word	0x40014000

08003590 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e041      	b.n	8003626 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f839 	bl	800362e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3304      	adds	r3, #4
 80035cc:	4619      	mov	r1, r3
 80035ce:	4610      	mov	r0, r2
 80035d0:	f000 faf2 	bl	8003bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b02      	cmp	r3, #2
 8003656:	d122      	bne.n	800369e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b02      	cmp	r3, #2
 8003664:	d11b      	bne.n	800369e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f06f 0202 	mvn.w	r2, #2
 800366e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 fa78 	bl	8003b7a <HAL_TIM_IC_CaptureCallback>
 800368a:	e005      	b.n	8003698 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 fa6a 	bl	8003b66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fa7b 	bl	8003b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d122      	bne.n	80036f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d11b      	bne.n	80036f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f06f 0204 	mvn.w	r2, #4
 80036c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fa4e 	bl	8003b7a <HAL_TIM_IC_CaptureCallback>
 80036de:	e005      	b.n	80036ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fa40 	bl	8003b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fa51 	bl	8003b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d122      	bne.n	8003746 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b08      	cmp	r3, #8
 800370c:	d11b      	bne.n	8003746 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f06f 0208 	mvn.w	r2, #8
 8003716:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2204      	movs	r2, #4
 800371c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 fa24 	bl	8003b7a <HAL_TIM_IC_CaptureCallback>
 8003732:	e005      	b.n	8003740 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fa16 	bl	8003b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fa27 	bl	8003b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	2b10      	cmp	r3, #16
 8003752:	d122      	bne.n	800379a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b10      	cmp	r3, #16
 8003760:	d11b      	bne.n	800379a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f06f 0210 	mvn.w	r2, #16
 800376a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2208      	movs	r2, #8
 8003770:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f9fa 	bl	8003b7a <HAL_TIM_IC_CaptureCallback>
 8003786:	e005      	b.n	8003794 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f9ec 	bl	8003b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f9fd 	bl	8003b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d10e      	bne.n	80037c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d107      	bne.n	80037c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f06f 0201 	mvn.w	r2, #1
 80037be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7fd fc55 	bl	8001070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d0:	2b80      	cmp	r3, #128	; 0x80
 80037d2:	d10e      	bne.n	80037f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037de:	2b80      	cmp	r3, #128	; 0x80
 80037e0:	d107      	bne.n	80037f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 fd01 	bl	80041f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fc:	2b40      	cmp	r3, #64	; 0x40
 80037fe:	d10e      	bne.n	800381e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380a:	2b40      	cmp	r3, #64	; 0x40
 800380c:	d107      	bne.n	800381e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f9c2 	bl	8003ba2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b20      	cmp	r3, #32
 800382a:	d10e      	bne.n	800384a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f003 0320 	and.w	r3, r3, #32
 8003836:	2b20      	cmp	r3, #32
 8003838:	d107      	bne.n	800384a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f06f 0220 	mvn.w	r2, #32
 8003842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 fccb 	bl	80041e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800386a:	2b01      	cmp	r3, #1
 800386c:	d101      	bne.n	8003872 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800386e:	2302      	movs	r3, #2
 8003870:	e0ae      	b.n	80039d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b0c      	cmp	r3, #12
 800387e:	f200 809f 	bhi.w	80039c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003882:	a201      	add	r2, pc, #4	; (adr r2, 8003888 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003888:	080038bd 	.word	0x080038bd
 800388c:	080039c1 	.word	0x080039c1
 8003890:	080039c1 	.word	0x080039c1
 8003894:	080039c1 	.word	0x080039c1
 8003898:	080038fd 	.word	0x080038fd
 800389c:	080039c1 	.word	0x080039c1
 80038a0:	080039c1 	.word	0x080039c1
 80038a4:	080039c1 	.word	0x080039c1
 80038a8:	0800393f 	.word	0x0800393f
 80038ac:	080039c1 	.word	0x080039c1
 80038b0:	080039c1 	.word	0x080039c1
 80038b4:	080039c1 	.word	0x080039c1
 80038b8:	0800397f 	.word	0x0800397f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 f9f8 	bl	8003cb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0208 	orr.w	r2, r2, #8
 80038d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0204 	bic.w	r2, r2, #4
 80038e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6999      	ldr	r1, [r3, #24]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	619a      	str	r2, [r3, #24]
      break;
 80038fa:	e064      	b.n	80039c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68b9      	ldr	r1, [r7, #8]
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fa3e 	bl	8003d84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699a      	ldr	r2, [r3, #24]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699a      	ldr	r2, [r3, #24]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6999      	ldr	r1, [r3, #24]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	021a      	lsls	r2, r3, #8
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	619a      	str	r2, [r3, #24]
      break;
 800393c:	e043      	b.n	80039c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	4618      	mov	r0, r3
 8003946:	f000 fa89 	bl	8003e5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69da      	ldr	r2, [r3, #28]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0208 	orr.w	r2, r2, #8
 8003958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69da      	ldr	r2, [r3, #28]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0204 	bic.w	r2, r2, #4
 8003968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69d9      	ldr	r1, [r3, #28]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	61da      	str	r2, [r3, #28]
      break;
 800397c:	e023      	b.n	80039c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68b9      	ldr	r1, [r7, #8]
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fad3 	bl	8003f30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69da      	ldr	r2, [r3, #28]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69d9      	ldr	r1, [r3, #28]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	021a      	lsls	r2, r3, #8
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	61da      	str	r2, [r3, #28]
      break;
 80039be:	e002      	b.n	80039c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	75fb      	strb	r3, [r7, #23]
      break;
 80039c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_TIM_ConfigClockSource+0x1c>
 80039f0:	2302      	movs	r3, #2
 80039f2:	e0b4      	b.n	8003b5e <HAL_TIM_ConfigClockSource+0x186>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a2c:	d03e      	beq.n	8003aac <HAL_TIM_ConfigClockSource+0xd4>
 8003a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a32:	f200 8087 	bhi.w	8003b44 <HAL_TIM_ConfigClockSource+0x16c>
 8003a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3a:	f000 8086 	beq.w	8003b4a <HAL_TIM_ConfigClockSource+0x172>
 8003a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a42:	d87f      	bhi.n	8003b44 <HAL_TIM_ConfigClockSource+0x16c>
 8003a44:	2b70      	cmp	r3, #112	; 0x70
 8003a46:	d01a      	beq.n	8003a7e <HAL_TIM_ConfigClockSource+0xa6>
 8003a48:	2b70      	cmp	r3, #112	; 0x70
 8003a4a:	d87b      	bhi.n	8003b44 <HAL_TIM_ConfigClockSource+0x16c>
 8003a4c:	2b60      	cmp	r3, #96	; 0x60
 8003a4e:	d050      	beq.n	8003af2 <HAL_TIM_ConfigClockSource+0x11a>
 8003a50:	2b60      	cmp	r3, #96	; 0x60
 8003a52:	d877      	bhi.n	8003b44 <HAL_TIM_ConfigClockSource+0x16c>
 8003a54:	2b50      	cmp	r3, #80	; 0x50
 8003a56:	d03c      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0xfa>
 8003a58:	2b50      	cmp	r3, #80	; 0x50
 8003a5a:	d873      	bhi.n	8003b44 <HAL_TIM_ConfigClockSource+0x16c>
 8003a5c:	2b40      	cmp	r3, #64	; 0x40
 8003a5e:	d058      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x13a>
 8003a60:	2b40      	cmp	r3, #64	; 0x40
 8003a62:	d86f      	bhi.n	8003b44 <HAL_TIM_ConfigClockSource+0x16c>
 8003a64:	2b30      	cmp	r3, #48	; 0x30
 8003a66:	d064      	beq.n	8003b32 <HAL_TIM_ConfigClockSource+0x15a>
 8003a68:	2b30      	cmp	r3, #48	; 0x30
 8003a6a:	d86b      	bhi.n	8003b44 <HAL_TIM_ConfigClockSource+0x16c>
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	d060      	beq.n	8003b32 <HAL_TIM_ConfigClockSource+0x15a>
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d867      	bhi.n	8003b44 <HAL_TIM_ConfigClockSource+0x16c>
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d05c      	beq.n	8003b32 <HAL_TIM_ConfigClockSource+0x15a>
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	d05a      	beq.n	8003b32 <HAL_TIM_ConfigClockSource+0x15a>
 8003a7c:	e062      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	6899      	ldr	r1, [r3, #8]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f000 fb19 	bl	80040c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003aa0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	609a      	str	r2, [r3, #8]
      break;
 8003aaa:	e04f      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6818      	ldr	r0, [r3, #0]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	6899      	ldr	r1, [r3, #8]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f000 fb02 	bl	80040c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ace:	609a      	str	r2, [r3, #8]
      break;
 8003ad0:	e03c      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	6859      	ldr	r1, [r3, #4]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f000 fa76 	bl	8003fd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2150      	movs	r1, #80	; 0x50
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 facf 	bl	800408e <TIM_ITRx_SetConfig>
      break;
 8003af0:	e02c      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	6859      	ldr	r1, [r3, #4]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	461a      	mov	r2, r3
 8003b00:	f000 fa95 	bl	800402e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2160      	movs	r1, #96	; 0x60
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fabf 	bl	800408e <TIM_ITRx_SetConfig>
      break;
 8003b10:	e01c      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6818      	ldr	r0, [r3, #0]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6859      	ldr	r1, [r3, #4]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f000 fa56 	bl	8003fd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2140      	movs	r1, #64	; 0x40
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 faaf 	bl	800408e <TIM_ITRx_SetConfig>
      break;
 8003b30:	e00c      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	f000 faa6 	bl	800408e <TIM_ITRx_SetConfig>
      break;
 8003b42:	e003      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	73fb      	strb	r3, [r7, #15]
      break;
 8003b48:	e000      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a34      	ldr	r2, [pc, #208]	; (8003c9c <TIM_Base_SetConfig+0xe4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00f      	beq.n	8003bf0 <TIM_Base_SetConfig+0x38>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd6:	d00b      	beq.n	8003bf0 <TIM_Base_SetConfig+0x38>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a31      	ldr	r2, [pc, #196]	; (8003ca0 <TIM_Base_SetConfig+0xe8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d007      	beq.n	8003bf0 <TIM_Base_SetConfig+0x38>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a30      	ldr	r2, [pc, #192]	; (8003ca4 <TIM_Base_SetConfig+0xec>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d003      	beq.n	8003bf0 <TIM_Base_SetConfig+0x38>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a2f      	ldr	r2, [pc, #188]	; (8003ca8 <TIM_Base_SetConfig+0xf0>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d108      	bne.n	8003c02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a25      	ldr	r2, [pc, #148]	; (8003c9c <TIM_Base_SetConfig+0xe4>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d01b      	beq.n	8003c42 <TIM_Base_SetConfig+0x8a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c10:	d017      	beq.n	8003c42 <TIM_Base_SetConfig+0x8a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a22      	ldr	r2, [pc, #136]	; (8003ca0 <TIM_Base_SetConfig+0xe8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d013      	beq.n	8003c42 <TIM_Base_SetConfig+0x8a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a21      	ldr	r2, [pc, #132]	; (8003ca4 <TIM_Base_SetConfig+0xec>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00f      	beq.n	8003c42 <TIM_Base_SetConfig+0x8a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a20      	ldr	r2, [pc, #128]	; (8003ca8 <TIM_Base_SetConfig+0xf0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00b      	beq.n	8003c42 <TIM_Base_SetConfig+0x8a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a1f      	ldr	r2, [pc, #124]	; (8003cac <TIM_Base_SetConfig+0xf4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d007      	beq.n	8003c42 <TIM_Base_SetConfig+0x8a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a1e      	ldr	r2, [pc, #120]	; (8003cb0 <TIM_Base_SetConfig+0xf8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d003      	beq.n	8003c42 <TIM_Base_SetConfig+0x8a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a1d      	ldr	r2, [pc, #116]	; (8003cb4 <TIM_Base_SetConfig+0xfc>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d108      	bne.n	8003c54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a08      	ldr	r2, [pc, #32]	; (8003c9c <TIM_Base_SetConfig+0xe4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d103      	bne.n	8003c88 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	615a      	str	r2, [r3, #20]
}
 8003c8e:	bf00      	nop
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40010000 	.word	0x40010000
 8003ca0:	40000400 	.word	0x40000400
 8003ca4:	40000800 	.word	0x40000800
 8003ca8:	40000c00 	.word	0x40000c00
 8003cac:	40014000 	.word	0x40014000
 8003cb0:	40014400 	.word	0x40014400
 8003cb4:	40014800 	.word	0x40014800

08003cb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	f023 0201 	bic.w	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0303 	bic.w	r3, r3, #3
 8003cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f023 0302 	bic.w	r3, r3, #2
 8003d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a1c      	ldr	r2, [pc, #112]	; (8003d80 <TIM_OC1_SetConfig+0xc8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d10c      	bne.n	8003d2e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f023 0308 	bic.w	r3, r3, #8
 8003d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f023 0304 	bic.w	r3, r3, #4
 8003d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a13      	ldr	r2, [pc, #76]	; (8003d80 <TIM_OC1_SetConfig+0xc8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d111      	bne.n	8003d5a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	621a      	str	r2, [r3, #32]
}
 8003d74:	bf00      	nop
 8003d76:	371c      	adds	r7, #28
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	40010000 	.word	0x40010000

08003d84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	f023 0210 	bic.w	r2, r3, #16
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	021b      	lsls	r3, r3, #8
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f023 0320 	bic.w	r3, r3, #32
 8003dce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a1e      	ldr	r2, [pc, #120]	; (8003e58 <TIM_OC2_SetConfig+0xd4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d10d      	bne.n	8003e00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a15      	ldr	r2, [pc, #84]	; (8003e58 <TIM_OC2_SetConfig+0xd4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d113      	bne.n	8003e30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	621a      	str	r2, [r3, #32]
}
 8003e4a:	bf00      	nop
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40010000 	.word	0x40010000

08003e5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0303 	bic.w	r3, r3, #3
 8003e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	021b      	lsls	r3, r3, #8
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a1d      	ldr	r2, [pc, #116]	; (8003f2c <TIM_OC3_SetConfig+0xd0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d10d      	bne.n	8003ed6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ec0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	021b      	lsls	r3, r3, #8
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ed4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a14      	ldr	r2, [pc, #80]	; (8003f2c <TIM_OC3_SetConfig+0xd0>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d113      	bne.n	8003f06 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ee4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	621a      	str	r2, [r3, #32]
}
 8003f20:	bf00      	nop
 8003f22:	371c      	adds	r7, #28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	40010000 	.word	0x40010000

08003f30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	021b      	lsls	r3, r3, #8
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	031b      	lsls	r3, r3, #12
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a10      	ldr	r2, [pc, #64]	; (8003fcc <TIM_OC4_SetConfig+0x9c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d109      	bne.n	8003fa4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	019b      	lsls	r3, r3, #6
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	621a      	str	r2, [r3, #32]
}
 8003fbe:	bf00      	nop
 8003fc0:	371c      	adds	r7, #28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40010000 	.word	0x40010000

08003fd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	f023 0201 	bic.w	r2, r3, #1
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ffa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f023 030a 	bic.w	r3, r3, #10
 800400c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	4313      	orrs	r3, r2
 8004014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	621a      	str	r2, [r3, #32]
}
 8004022:	bf00      	nop
 8004024:	371c      	adds	r7, #28
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800402e:	b480      	push	{r7}
 8004030:	b087      	sub	sp, #28
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	f023 0210 	bic.w	r2, r3, #16
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004058:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	031b      	lsls	r3, r3, #12
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	4313      	orrs	r3, r2
 8004062:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800406a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	621a      	str	r2, [r3, #32]
}
 8004082:	bf00      	nop
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800408e:	b480      	push	{r7}
 8004090:	b085      	sub	sp, #20
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f043 0307 	orr.w	r3, r3, #7
 80040b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	609a      	str	r2, [r3, #8]
}
 80040b8:	bf00      	nop
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
 80040d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	021a      	lsls	r2, r3, #8
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	609a      	str	r2, [r3, #8]
}
 80040f8:	bf00      	nop
 80040fa:	371c      	adds	r7, #28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004118:	2302      	movs	r3, #2
 800411a:	e050      	b.n	80041be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004142:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a1c      	ldr	r2, [pc, #112]	; (80041cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d018      	beq.n	8004192 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004168:	d013      	beq.n	8004192 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a18      	ldr	r2, [pc, #96]	; (80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d00e      	beq.n	8004192 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a16      	ldr	r2, [pc, #88]	; (80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d009      	beq.n	8004192 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a15      	ldr	r2, [pc, #84]	; (80041d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d004      	beq.n	8004192 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a13      	ldr	r2, [pc, #76]	; (80041dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d10c      	bne.n	80041ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004198:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40010000 	.word	0x40010000
 80041d0:	40000400 	.word	0x40000400
 80041d4:	40000800 	.word	0x40000800
 80041d8:	40000c00 	.word	0x40000c00
 80041dc:	40014000 	.word	0x40014000

080041e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <__NVIC_SetPriority>:
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	6039      	str	r1, [r7, #0]
 8004212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004218:	2b00      	cmp	r3, #0
 800421a:	db0a      	blt.n	8004232 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	b2da      	uxtb	r2, r3
 8004220:	490c      	ldr	r1, [pc, #48]	; (8004254 <__NVIC_SetPriority+0x4c>)
 8004222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004226:	0112      	lsls	r2, r2, #4
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	440b      	add	r3, r1
 800422c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004230:	e00a      	b.n	8004248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	b2da      	uxtb	r2, r3
 8004236:	4908      	ldr	r1, [pc, #32]	; (8004258 <__NVIC_SetPriority+0x50>)
 8004238:	79fb      	ldrb	r3, [r7, #7]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	3b04      	subs	r3, #4
 8004240:	0112      	lsls	r2, r2, #4
 8004242:	b2d2      	uxtb	r2, r2
 8004244:	440b      	add	r3, r1
 8004246:	761a      	strb	r2, [r3, #24]
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	e000e100 	.word	0xe000e100
 8004258:	e000ed00 	.word	0xe000ed00

0800425c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <SysTick_Handler+0x1c>)
 8004262:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004264:	f001 fd28 	bl	8005cb8 <xTaskGetSchedulerState>
 8004268:	4603      	mov	r3, r0
 800426a:	2b01      	cmp	r3, #1
 800426c:	d001      	beq.n	8004272 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800426e:	f002 fb13 	bl	8006898 <xPortSysTickHandler>
  }
}
 8004272:	bf00      	nop
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	e000e010 	.word	0xe000e010

0800427c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004280:	2100      	movs	r1, #0
 8004282:	f06f 0004 	mvn.w	r0, #4
 8004286:	f7ff ffbf 	bl	8004208 <__NVIC_SetPriority>
#endif
}
 800428a:	bf00      	nop
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004296:	f3ef 8305 	mrs	r3, IPSR
 800429a:	603b      	str	r3, [r7, #0]
  return(result);
 800429c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80042a2:	f06f 0305 	mvn.w	r3, #5
 80042a6:	607b      	str	r3, [r7, #4]
 80042a8:	e00c      	b.n	80042c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80042aa:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <osKernelInitialize+0x44>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d105      	bne.n	80042be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80042b2:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <osKernelInitialize+0x44>)
 80042b4:	2201      	movs	r2, #1
 80042b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	607b      	str	r3, [r7, #4]
 80042bc:	e002      	b.n	80042c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80042be:	f04f 33ff 	mov.w	r3, #4294967295
 80042c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80042c4:	687b      	ldr	r3, [r7, #4]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	20000678 	.word	0x20000678

080042d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042de:	f3ef 8305 	mrs	r3, IPSR
 80042e2:	603b      	str	r3, [r7, #0]
  return(result);
 80042e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80042ea:	f06f 0305 	mvn.w	r3, #5
 80042ee:	607b      	str	r3, [r7, #4]
 80042f0:	e010      	b.n	8004314 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80042f2:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <osKernelStart+0x48>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d109      	bne.n	800430e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80042fa:	f7ff ffbf 	bl	800427c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80042fe:	4b08      	ldr	r3, [pc, #32]	; (8004320 <osKernelStart+0x48>)
 8004300:	2202      	movs	r2, #2
 8004302:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004304:	f001 f87c 	bl	8005400 <vTaskStartScheduler>
      stat = osOK;
 8004308:	2300      	movs	r3, #0
 800430a:	607b      	str	r3, [r7, #4]
 800430c:	e002      	b.n	8004314 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800430e:	f04f 33ff 	mov.w	r3, #4294967295
 8004312:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004314:	687b      	ldr	r3, [r7, #4]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	20000678 	.word	0x20000678

08004324 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004324:	b580      	push	{r7, lr}
 8004326:	b08e      	sub	sp, #56	; 0x38
 8004328:	af04      	add	r7, sp, #16
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004330:	2300      	movs	r3, #0
 8004332:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004334:	f3ef 8305 	mrs	r3, IPSR
 8004338:	617b      	str	r3, [r7, #20]
  return(result);
 800433a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800433c:	2b00      	cmp	r3, #0
 800433e:	d17e      	bne.n	800443e <osThreadNew+0x11a>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d07b      	beq.n	800443e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004346:	2380      	movs	r3, #128	; 0x80
 8004348:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800434a:	2318      	movs	r3, #24
 800434c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800434e:	2300      	movs	r3, #0
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004352:	f04f 33ff 	mov.w	r3, #4294967295
 8004356:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d045      	beq.n	80043ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <osThreadNew+0x48>
        name = attr->name;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <osThreadNew+0x6e>
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	2b38      	cmp	r3, #56	; 0x38
 8004384:	d805      	bhi.n	8004392 <osThreadNew+0x6e>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <osThreadNew+0x72>
        return (NULL);
 8004392:	2300      	movs	r3, #0
 8004394:	e054      	b.n	8004440 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	089b      	lsrs	r3, r3, #2
 80043a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00e      	beq.n	80043cc <osThreadNew+0xa8>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	2bbb      	cmp	r3, #187	; 0xbb
 80043b4:	d90a      	bls.n	80043cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d006      	beq.n	80043cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <osThreadNew+0xa8>
        mem = 1;
 80043c6:	2301      	movs	r3, #1
 80043c8:	61bb      	str	r3, [r7, #24]
 80043ca:	e010      	b.n	80043ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10c      	bne.n	80043ee <osThreadNew+0xca>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d108      	bne.n	80043ee <osThreadNew+0xca>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d104      	bne.n	80043ee <osThreadNew+0xca>
          mem = 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	e001      	b.n	80043ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80043ea:	2300      	movs	r3, #0
 80043ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d110      	bne.n	8004416 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043fc:	9202      	str	r2, [sp, #8]
 80043fe:	9301      	str	r3, [sp, #4]
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	6a3a      	ldr	r2, [r7, #32]
 8004408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 fe0c 	bl	8005028 <xTaskCreateStatic>
 8004410:	4603      	mov	r3, r0
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	e013      	b.n	800443e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d110      	bne.n	800443e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	b29a      	uxth	r2, r3
 8004420:	f107 0310 	add.w	r3, r7, #16
 8004424:	9301      	str	r3, [sp, #4]
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 fe57 	bl	80050e2 <xTaskCreate>
 8004434:	4603      	mov	r3, r0
 8004436:	2b01      	cmp	r3, #1
 8004438:	d001      	beq.n	800443e <osThreadNew+0x11a>
            hTask = NULL;
 800443a:	2300      	movs	r3, #0
 800443c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800443e:	693b      	ldr	r3, [r7, #16]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3728      	adds	r7, #40	; 0x28
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004450:	f3ef 8305 	mrs	r3, IPSR
 8004454:	60bb      	str	r3, [r7, #8]
  return(result);
 8004456:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <osDelay+0x1c>
    stat = osErrorISR;
 800445c:	f06f 0305 	mvn.w	r3, #5
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	e007      	b.n	8004474 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <osDelay+0x2c>
      vTaskDelay(ticks);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 ff92 	bl	8005398 <vTaskDelay>
    }
  }

  return (stat);
 8004474:	68fb      	ldr	r3, [r7, #12]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4a07      	ldr	r2, [pc, #28]	; (80044ac <vApplicationGetIdleTaskMemory+0x2c>)
 8004490:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	4a06      	ldr	r2, [pc, #24]	; (80044b0 <vApplicationGetIdleTaskMemory+0x30>)
 8004496:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2280      	movs	r2, #128	; 0x80
 800449c:	601a      	str	r2, [r3, #0]
}
 800449e:	bf00      	nop
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	2000067c 	.word	0x2000067c
 80044b0:	20000738 	.word	0x20000738

080044b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4a07      	ldr	r2, [pc, #28]	; (80044e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80044c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	4a06      	ldr	r2, [pc, #24]	; (80044e4 <vApplicationGetTimerTaskMemory+0x30>)
 80044ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044d2:	601a      	str	r2, [r3, #0]
}
 80044d4:	bf00      	nop
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	20000938 	.word	0x20000938
 80044e4:	200009f4 	.word	0x200009f4

080044e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f103 0208 	add.w	r2, r3, #8
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004500:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f103 0208 	add.w	r2, r3, #8
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f103 0208 	add.w	r2, r3, #8
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004542:	b480      	push	{r7}
 8004544:	b085      	sub	sp, #20
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	601a      	str	r2, [r3, #0]
}
 800457e:	bf00      	nop
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800458a:	b480      	push	{r7}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a0:	d103      	bne.n	80045aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	e00c      	b.n	80045c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3308      	adds	r3, #8
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	e002      	b.n	80045b8 <vListInsert+0x2e>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d2f6      	bcs.n	80045b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	601a      	str	r2, [r3, #0]
}
 80045f0:	bf00      	nop
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6892      	ldr	r2, [r2, #8]
 8004612:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6852      	ldr	r2, [r2, #4]
 800461c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	429a      	cmp	r2, r3
 8004626:	d103      	bne.n	8004630 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	1e5a      	subs	r2, r3, #1
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004676:	bf00      	nop
 8004678:	e7fe      	b.n	8004678 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800467a:	f002 f87b 	bl	8006774 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004686:	68f9      	ldr	r1, [r7, #12]
 8004688:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800468a:	fb01 f303 	mul.w	r3, r1, r3
 800468e:	441a      	add	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	3b01      	subs	r3, #1
 80046ac:	68f9      	ldr	r1, [r7, #12]
 80046ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046b0:	fb01 f303 	mul.w	r3, r1, r3
 80046b4:	441a      	add	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	22ff      	movs	r2, #255	; 0xff
 80046be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	22ff      	movs	r2, #255	; 0xff
 80046c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d114      	bne.n	80046fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d01a      	beq.n	800470e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	3310      	adds	r3, #16
 80046dc:	4618      	mov	r0, r3
 80046de:	f001 f929 	bl	8005934 <xTaskRemoveFromEventList>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d012      	beq.n	800470e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80046e8:	4b0c      	ldr	r3, [pc, #48]	; (800471c <xQueueGenericReset+0xcc>)
 80046ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	e009      	b.n	800470e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	3310      	adds	r3, #16
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff fef2 	bl	80044e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	3324      	adds	r3, #36	; 0x24
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff feed 	bl	80044e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800470e:	f002 f861 	bl	80067d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004712:	2301      	movs	r3, #1
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	e000ed04 	.word	0xe000ed04

08004720 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08e      	sub	sp, #56	; 0x38
 8004724:	af02      	add	r7, sp, #8
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10a      	bne.n	800474a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004746:	bf00      	nop
 8004748:	e7fe      	b.n	8004748 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10a      	bne.n	8004766 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004762:	bf00      	nop
 8004764:	e7fe      	b.n	8004764 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <xQueueGenericCreateStatic+0x52>
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <xQueueGenericCreateStatic+0x56>
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <xQueueGenericCreateStatic+0x58>
 8004776:	2300      	movs	r3, #0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	623b      	str	r3, [r7, #32]
}
 800478e:	bf00      	nop
 8004790:	e7fe      	b.n	8004790 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d102      	bne.n	800479e <xQueueGenericCreateStatic+0x7e>
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <xQueueGenericCreateStatic+0x82>
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <xQueueGenericCreateStatic+0x84>
 80047a2:	2300      	movs	r3, #0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10a      	bne.n	80047be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	61fb      	str	r3, [r7, #28]
}
 80047ba:	bf00      	nop
 80047bc:	e7fe      	b.n	80047bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80047be:	2350      	movs	r3, #80	; 0x50
 80047c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b50      	cmp	r3, #80	; 0x50
 80047c6:	d00a      	beq.n	80047de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	61bb      	str	r3, [r7, #24]
}
 80047da:	bf00      	nop
 80047dc:	e7fe      	b.n	80047dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80047de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80047e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00d      	beq.n	8004806 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80047ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80047f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	4613      	mov	r3, r2
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	68b9      	ldr	r1, [r7, #8]
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 f805 	bl	8004810 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004808:	4618      	mov	r0, r3
 800480a:	3730      	adds	r7, #48	; 0x30
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d103      	bne.n	800482c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	e002      	b.n	8004832 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800483e:	2101      	movs	r1, #1
 8004840:	69b8      	ldr	r0, [r7, #24]
 8004842:	f7ff ff05 	bl	8004650 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	78fa      	ldrb	r2, [r7, #3]
 800484a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800484e:	bf00      	nop
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08e      	sub	sp, #56	; 0x38
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
 8004864:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004866:	2300      	movs	r3, #0
 8004868:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800486e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10a      	bne.n	800488a <xQueueGenericSend+0x32>
	__asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004886:	bf00      	nop
 8004888:	e7fe      	b.n	8004888 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d103      	bne.n	8004898 <xQueueGenericSend+0x40>
 8004890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <xQueueGenericSend+0x44>
 8004898:	2301      	movs	r3, #1
 800489a:	e000      	b.n	800489e <xQueueGenericSend+0x46>
 800489c:	2300      	movs	r3, #0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10a      	bne.n	80048b8 <xQueueGenericSend+0x60>
	__asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048b4:	bf00      	nop
 80048b6:	e7fe      	b.n	80048b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d103      	bne.n	80048c6 <xQueueGenericSend+0x6e>
 80048be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d101      	bne.n	80048ca <xQueueGenericSend+0x72>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <xQueueGenericSend+0x74>
 80048ca:	2300      	movs	r3, #0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10a      	bne.n	80048e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80048d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	623b      	str	r3, [r7, #32]
}
 80048e2:	bf00      	nop
 80048e4:	e7fe      	b.n	80048e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048e6:	f001 f9e7 	bl	8005cb8 <xTaskGetSchedulerState>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d102      	bne.n	80048f6 <xQueueGenericSend+0x9e>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <xQueueGenericSend+0xa2>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <xQueueGenericSend+0xa4>
 80048fa:	2300      	movs	r3, #0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10a      	bne.n	8004916 <xQueueGenericSend+0xbe>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	61fb      	str	r3, [r7, #28]
}
 8004912:	bf00      	nop
 8004914:	e7fe      	b.n	8004914 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004916:	f001 ff2d 	bl	8006774 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004922:	429a      	cmp	r2, r3
 8004924:	d302      	bcc.n	800492c <xQueueGenericSend+0xd4>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b02      	cmp	r3, #2
 800492a:	d129      	bne.n	8004980 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	68b9      	ldr	r1, [r7, #8]
 8004930:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004932:	f000 fa0b 	bl	8004d4c <prvCopyDataToQueue>
 8004936:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	2b00      	cmp	r3, #0
 800493e:	d010      	beq.n	8004962 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004942:	3324      	adds	r3, #36	; 0x24
 8004944:	4618      	mov	r0, r3
 8004946:	f000 fff5 	bl	8005934 <xTaskRemoveFromEventList>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d013      	beq.n	8004978 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004950:	4b3f      	ldr	r3, [pc, #252]	; (8004a50 <xQueueGenericSend+0x1f8>)
 8004952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	e00a      	b.n	8004978 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004964:	2b00      	cmp	r3, #0
 8004966:	d007      	beq.n	8004978 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004968:	4b39      	ldr	r3, [pc, #228]	; (8004a50 <xQueueGenericSend+0x1f8>)
 800496a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004978:	f001 ff2c 	bl	80067d4 <vPortExitCritical>
				return pdPASS;
 800497c:	2301      	movs	r3, #1
 800497e:	e063      	b.n	8004a48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d103      	bne.n	800498e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004986:	f001 ff25 	bl	80067d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800498a:	2300      	movs	r3, #0
 800498c:	e05c      	b.n	8004a48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800498e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004990:	2b00      	cmp	r3, #0
 8004992:	d106      	bne.n	80049a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004994:	f107 0314 	add.w	r3, r7, #20
 8004998:	4618      	mov	r0, r3
 800499a:	f001 f82f 	bl	80059fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800499e:	2301      	movs	r3, #1
 80049a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049a2:	f001 ff17 	bl	80067d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049a6:	f000 fd9b 	bl	80054e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049aa:	f001 fee3 	bl	8006774 <vPortEnterCritical>
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049b4:	b25b      	sxtb	r3, r3
 80049b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ba:	d103      	bne.n	80049c4 <xQueueGenericSend+0x16c>
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049ca:	b25b      	sxtb	r3, r3
 80049cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d0:	d103      	bne.n	80049da <xQueueGenericSend+0x182>
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049da:	f001 fefb 	bl	80067d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049de:	1d3a      	adds	r2, r7, #4
 80049e0:	f107 0314 	add.w	r3, r7, #20
 80049e4:	4611      	mov	r1, r2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f001 f81e 	bl	8005a28 <xTaskCheckForTimeOut>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d124      	bne.n	8004a3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80049f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049f4:	f000 faa2 	bl	8004f3c <prvIsQueueFull>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d018      	beq.n	8004a30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	3310      	adds	r3, #16
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	4611      	mov	r1, r2
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 ff44 	bl	8005894 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a0e:	f000 fa2d 	bl	8004e6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a12:	f000 fd73 	bl	80054fc <xTaskResumeAll>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f47f af7c 	bne.w	8004916 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004a1e:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <xQueueGenericSend+0x1f8>)
 8004a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	e772      	b.n	8004916 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a32:	f000 fa1b 	bl	8004e6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a36:	f000 fd61 	bl	80054fc <xTaskResumeAll>
 8004a3a:	e76c      	b.n	8004916 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a3e:	f000 fa15 	bl	8004e6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a42:	f000 fd5b 	bl	80054fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3738      	adds	r7, #56	; 0x38
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	e000ed04 	.word	0xe000ed04

08004a54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b090      	sub	sp, #64	; 0x40
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10a      	bne.n	8004a82 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a7e:	bf00      	nop
 8004a80:	e7fe      	b.n	8004a80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d103      	bne.n	8004a90 <xQueueGenericSendFromISR+0x3c>
 8004a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <xQueueGenericSendFromISR+0x40>
 8004a90:	2301      	movs	r3, #1
 8004a92:	e000      	b.n	8004a96 <xQueueGenericSendFromISR+0x42>
 8004a94:	2300      	movs	r3, #0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10a      	bne.n	8004ab0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004aac:	bf00      	nop
 8004aae:	e7fe      	b.n	8004aae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d103      	bne.n	8004abe <xQueueGenericSendFromISR+0x6a>
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <xQueueGenericSendFromISR+0x6e>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e000      	b.n	8004ac4 <xQueueGenericSendFromISR+0x70>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10a      	bne.n	8004ade <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	623b      	str	r3, [r7, #32]
}
 8004ada:	bf00      	nop
 8004adc:	e7fe      	b.n	8004adc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ade:	f001 ff2b 	bl	8006938 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ae2:	f3ef 8211 	mrs	r2, BASEPRI
 8004ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	61fa      	str	r2, [r7, #28]
 8004af8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004afa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004afc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d302      	bcc.n	8004b10 <xQueueGenericSendFromISR+0xbc>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d12f      	bne.n	8004b70 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	68b9      	ldr	r1, [r7, #8]
 8004b24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b26:	f000 f911 	bl	8004d4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b2a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b32:	d112      	bne.n	8004b5a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d016      	beq.n	8004b6a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3e:	3324      	adds	r3, #36	; 0x24
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fef7 	bl	8005934 <xTaskRemoveFromEventList>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00e      	beq.n	8004b6a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00b      	beq.n	8004b6a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	e007      	b.n	8004b6a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b5e:	3301      	adds	r3, #1
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	b25a      	sxtb	r2, r3
 8004b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004b6e:	e001      	b.n	8004b74 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b70:	2300      	movs	r3, #0
 8004b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b76:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b7e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3740      	adds	r7, #64	; 0x40
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b08c      	sub	sp, #48	; 0x30
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10a      	bne.n	8004bbc <xQueueReceive+0x30>
	__asm volatile
 8004ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	623b      	str	r3, [r7, #32]
}
 8004bb8:	bf00      	nop
 8004bba:	e7fe      	b.n	8004bba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d103      	bne.n	8004bca <xQueueReceive+0x3e>
 8004bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <xQueueReceive+0x42>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <xQueueReceive+0x44>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10a      	bne.n	8004bea <xQueueReceive+0x5e>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	61fb      	str	r3, [r7, #28]
}
 8004be6:	bf00      	nop
 8004be8:	e7fe      	b.n	8004be8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bea:	f001 f865 	bl	8005cb8 <xTaskGetSchedulerState>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d102      	bne.n	8004bfa <xQueueReceive+0x6e>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <xQueueReceive+0x72>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <xQueueReceive+0x74>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10a      	bne.n	8004c1a <xQueueReceive+0x8e>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	61bb      	str	r3, [r7, #24]
}
 8004c16:	bf00      	nop
 8004c18:	e7fe      	b.n	8004c18 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c1a:	f001 fdab 	bl	8006774 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d01f      	beq.n	8004c6a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c2a:	68b9      	ldr	r1, [r7, #8]
 8004c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c2e:	f000 f8f7 	bl	8004e20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	1e5a      	subs	r2, r3, #1
 8004c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c38:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00f      	beq.n	8004c62 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c44:	3310      	adds	r3, #16
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 fe74 	bl	8005934 <xTaskRemoveFromEventList>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d007      	beq.n	8004c62 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c52:	4b3d      	ldr	r3, [pc, #244]	; (8004d48 <xQueueReceive+0x1bc>)
 8004c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c62:	f001 fdb7 	bl	80067d4 <vPortExitCritical>
				return pdPASS;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e069      	b.n	8004d3e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d103      	bne.n	8004c78 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c70:	f001 fdb0 	bl	80067d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c74:	2300      	movs	r3, #0
 8004c76:	e062      	b.n	8004d3e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d106      	bne.n	8004c8c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c7e:	f107 0310 	add.w	r3, r7, #16
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 feba 	bl	80059fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c8c:	f001 fda2 	bl	80067d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c90:	f000 fc26 	bl	80054e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c94:	f001 fd6e 	bl	8006774 <vPortEnterCritical>
 8004c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c9e:	b25b      	sxtb	r3, r3
 8004ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca4:	d103      	bne.n	8004cae <xQueueReceive+0x122>
 8004ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cb4:	b25b      	sxtb	r3, r3
 8004cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cba:	d103      	bne.n	8004cc4 <xQueueReceive+0x138>
 8004cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cc4:	f001 fd86 	bl	80067d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cc8:	1d3a      	adds	r2, r7, #4
 8004cca:	f107 0310 	add.w	r3, r7, #16
 8004cce:	4611      	mov	r1, r2
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 fea9 	bl	8005a28 <xTaskCheckForTimeOut>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d123      	bne.n	8004d24 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cde:	f000 f917 	bl	8004f10 <prvIsQueueEmpty>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d017      	beq.n	8004d18 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	3324      	adds	r3, #36	; 0x24
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	4611      	mov	r1, r2
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fdcf 	bl	8005894 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cf8:	f000 f8b8 	bl	8004e6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004cfc:	f000 fbfe 	bl	80054fc <xTaskResumeAll>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d189      	bne.n	8004c1a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004d06:	4b10      	ldr	r3, [pc, #64]	; (8004d48 <xQueueReceive+0x1bc>)
 8004d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	e780      	b.n	8004c1a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d1a:	f000 f8a7 	bl	8004e6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d1e:	f000 fbed 	bl	80054fc <xTaskResumeAll>
 8004d22:	e77a      	b.n	8004c1a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d26:	f000 f8a1 	bl	8004e6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d2a:	f000 fbe7 	bl	80054fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d30:	f000 f8ee 	bl	8004f10 <prvIsQueueEmpty>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f43f af6f 	beq.w	8004c1a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3730      	adds	r7, #48	; 0x30
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	e000ed04 	.word	0xe000ed04

08004d4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10d      	bne.n	8004d86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d14d      	bne.n	8004e0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 ffbc 	bl	8005cf4 <xTaskPriorityDisinherit>
 8004d7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	609a      	str	r2, [r3, #8]
 8004d84:	e043      	b.n	8004e0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d119      	bne.n	8004dc0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6858      	ldr	r0, [r3, #4]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	461a      	mov	r2, r3
 8004d96:	68b9      	ldr	r1, [r7, #8]
 8004d98:	f002 f81e 	bl	8006dd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	441a      	add	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d32b      	bcc.n	8004e0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	605a      	str	r2, [r3, #4]
 8004dbe:	e026      	b.n	8004e0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	68d8      	ldr	r0, [r3, #12]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	461a      	mov	r2, r3
 8004dca:	68b9      	ldr	r1, [r7, #8]
 8004dcc:	f002 f804 	bl	8006dd8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	425b      	negs	r3, r3
 8004dda:	441a      	add	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d207      	bcs.n	8004dfc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	425b      	negs	r3, r3
 8004df6:	441a      	add	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d105      	bne.n	8004e0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e16:	697b      	ldr	r3, [r7, #20]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3718      	adds	r7, #24
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d018      	beq.n	8004e64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	441a      	add	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d303      	bcc.n	8004e54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68d9      	ldr	r1, [r3, #12]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	6838      	ldr	r0, [r7, #0]
 8004e60:	f001 ffba 	bl	8006dd8 <memcpy>
	}
}
 8004e64:	bf00      	nop
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e74:	f001 fc7e 	bl	8006774 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e80:	e011      	b.n	8004ea6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d012      	beq.n	8004eb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3324      	adds	r3, #36	; 0x24
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 fd50 	bl	8005934 <xTaskRemoveFromEventList>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e9a:	f000 fe27 	bl	8005aec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	dce9      	bgt.n	8004e82 <prvUnlockQueue+0x16>
 8004eae:	e000      	b.n	8004eb2 <prvUnlockQueue+0x46>
					break;
 8004eb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	22ff      	movs	r2, #255	; 0xff
 8004eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004eba:	f001 fc8b 	bl	80067d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ebe:	f001 fc59 	bl	8006774 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ec8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004eca:	e011      	b.n	8004ef0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d012      	beq.n	8004efa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3310      	adds	r3, #16
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 fd2b 	bl	8005934 <xTaskRemoveFromEventList>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ee4:	f000 fe02 	bl	8005aec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ee8:	7bbb      	ldrb	r3, [r7, #14]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ef0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	dce9      	bgt.n	8004ecc <prvUnlockQueue+0x60>
 8004ef8:	e000      	b.n	8004efc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004efa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	22ff      	movs	r2, #255	; 0xff
 8004f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f04:	f001 fc66 	bl	80067d4 <vPortExitCritical>
}
 8004f08:	bf00      	nop
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f18:	f001 fc2c 	bl	8006774 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f24:	2301      	movs	r3, #1
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	e001      	b.n	8004f2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f2e:	f001 fc51 	bl	80067d4 <vPortExitCritical>

	return xReturn;
 8004f32:	68fb      	ldr	r3, [r7, #12]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f44:	f001 fc16 	bl	8006774 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d102      	bne.n	8004f5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f54:	2301      	movs	r3, #1
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	e001      	b.n	8004f5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f5e:	f001 fc39 	bl	80067d4 <vPortExitCritical>

	return xReturn;
 8004f62:	68fb      	ldr	r3, [r7, #12]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	e014      	b.n	8004fa6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f7c:	4a0f      	ldr	r2, [pc, #60]	; (8004fbc <vQueueAddToRegistry+0x50>)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10b      	bne.n	8004fa0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f88:	490c      	ldr	r1, [pc, #48]	; (8004fbc <vQueueAddToRegistry+0x50>)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f92:	4a0a      	ldr	r2, [pc, #40]	; (8004fbc <vQueueAddToRegistry+0x50>)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	4413      	add	r3, r2
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f9e:	e006      	b.n	8004fae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b07      	cmp	r3, #7
 8004faa:	d9e7      	bls.n	8004f7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004fac:	bf00      	nop
 8004fae:	bf00      	nop
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	20000df4 	.word	0x20000df4

08004fc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004fd0:	f001 fbd0 	bl	8006774 <vPortEnterCritical>
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fda:	b25b      	sxtb	r3, r3
 8004fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe0:	d103      	bne.n	8004fea <vQueueWaitForMessageRestricted+0x2a>
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ff0:	b25b      	sxtb	r3, r3
 8004ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff6:	d103      	bne.n	8005000 <vQueueWaitForMessageRestricted+0x40>
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005000:	f001 fbe8 	bl	80067d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005008:	2b00      	cmp	r3, #0
 800500a:	d106      	bne.n	800501a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	3324      	adds	r3, #36	; 0x24
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fc61 	bl	80058dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800501a:	6978      	ldr	r0, [r7, #20]
 800501c:	f7ff ff26 	bl	8004e6c <prvUnlockQueue>
	}
 8005020:	bf00      	nop
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005028:	b580      	push	{r7, lr}
 800502a:	b08e      	sub	sp, #56	; 0x38
 800502c:	af04      	add	r7, sp, #16
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10a      	bne.n	8005052 <xTaskCreateStatic+0x2a>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	623b      	str	r3, [r7, #32]
}
 800504e:	bf00      	nop
 8005050:	e7fe      	b.n	8005050 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10a      	bne.n	800506e <xTaskCreateStatic+0x46>
	__asm volatile
 8005058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	61fb      	str	r3, [r7, #28]
}
 800506a:	bf00      	nop
 800506c:	e7fe      	b.n	800506c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800506e:	23bc      	movs	r3, #188	; 0xbc
 8005070:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	2bbc      	cmp	r3, #188	; 0xbc
 8005076:	d00a      	beq.n	800508e <xTaskCreateStatic+0x66>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	61bb      	str	r3, [r7, #24]
}
 800508a:	bf00      	nop
 800508c:	e7fe      	b.n	800508c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800508e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005092:	2b00      	cmp	r3, #0
 8005094:	d01e      	beq.n	80050d4 <xTaskCreateStatic+0xac>
 8005096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01b      	beq.n	80050d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800509c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	2202      	movs	r2, #2
 80050aa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050ae:	2300      	movs	r3, #0
 80050b0:	9303      	str	r3, [sp, #12]
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	9302      	str	r3, [sp, #8]
 80050b6:	f107 0314 	add.w	r3, r7, #20
 80050ba:	9301      	str	r3, [sp, #4]
 80050bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	68b9      	ldr	r1, [r7, #8]
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 f850 	bl	800516c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050ce:	f000 f8f3 	bl	80052b8 <prvAddNewTaskToReadyList>
 80050d2:	e001      	b.n	80050d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80050d4:	2300      	movs	r3, #0
 80050d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050d8:	697b      	ldr	r3, [r7, #20]
	}
 80050da:	4618      	mov	r0, r3
 80050dc:	3728      	adds	r7, #40	; 0x28
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b08c      	sub	sp, #48	; 0x30
 80050e6:	af04      	add	r7, sp, #16
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	603b      	str	r3, [r7, #0]
 80050ee:	4613      	mov	r3, r2
 80050f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4618      	mov	r0, r3
 80050f8:	f001 fc5e 	bl	80069b8 <pvPortMalloc>
 80050fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00e      	beq.n	8005122 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005104:	20bc      	movs	r0, #188	; 0xbc
 8005106:	f001 fc57 	bl	80069b8 <pvPortMalloc>
 800510a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	631a      	str	r2, [r3, #48]	; 0x30
 8005118:	e005      	b.n	8005126 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800511a:	6978      	ldr	r0, [r7, #20]
 800511c:	f001 fd18 	bl	8006b50 <vPortFree>
 8005120:	e001      	b.n	8005126 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005122:	2300      	movs	r3, #0
 8005124:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d017      	beq.n	800515c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005134:	88fa      	ldrh	r2, [r7, #6]
 8005136:	2300      	movs	r3, #0
 8005138:	9303      	str	r3, [sp, #12]
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	9302      	str	r3, [sp, #8]
 800513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005140:	9301      	str	r3, [sp, #4]
 8005142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	68b9      	ldr	r1, [r7, #8]
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 f80e 	bl	800516c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005150:	69f8      	ldr	r0, [r7, #28]
 8005152:	f000 f8b1 	bl	80052b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005156:	2301      	movs	r3, #1
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	e002      	b.n	8005162 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800515c:	f04f 33ff 	mov.w	r3, #4294967295
 8005160:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005162:	69bb      	ldr	r3, [r7, #24]
	}
 8005164:	4618      	mov	r0, r3
 8005166:	3720      	adds	r7, #32
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	461a      	mov	r2, r3
 8005184:	21a5      	movs	r1, #165	; 0xa5
 8005186:	f001 fe35 	bl	8006df4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800518a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005194:	3b01      	subs	r3, #1
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	f023 0307 	bic.w	r3, r3, #7
 80051a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	617b      	str	r3, [r7, #20]
}
 80051c0:	bf00      	nop
 80051c2:	e7fe      	b.n	80051c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d01f      	beq.n	800520a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051ca:	2300      	movs	r3, #0
 80051cc:	61fb      	str	r3, [r7, #28]
 80051ce:	e012      	b.n	80051f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	4413      	add	r3, r2
 80051d6:	7819      	ldrb	r1, [r3, #0]
 80051d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	4413      	add	r3, r2
 80051de:	3334      	adds	r3, #52	; 0x34
 80051e0:	460a      	mov	r2, r1
 80051e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	4413      	add	r3, r2
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d006      	beq.n	80051fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	3301      	adds	r3, #1
 80051f4:	61fb      	str	r3, [r7, #28]
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	2b0f      	cmp	r3, #15
 80051fa:	d9e9      	bls.n	80051d0 <prvInitialiseNewTask+0x64>
 80051fc:	e000      	b.n	8005200 <prvInitialiseNewTask+0x94>
			{
				break;
 80051fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005208:	e003      	b.n	8005212 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800520a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005214:	2b37      	cmp	r3, #55	; 0x37
 8005216:	d901      	bls.n	800521c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005218:	2337      	movs	r3, #55	; 0x37
 800521a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800521c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005220:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005226:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	2200      	movs	r2, #0
 800522c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	3304      	adds	r3, #4
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff f978 	bl	8004528 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523a:	3318      	adds	r3, #24
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff f973 	bl	8004528 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005246:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005250:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005256:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525a:	2200      	movs	r2, #0
 800525c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005262:	2200      	movs	r2, #0
 8005264:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526a:	3354      	adds	r3, #84	; 0x54
 800526c:	2260      	movs	r2, #96	; 0x60
 800526e:	2100      	movs	r1, #0
 8005270:	4618      	mov	r0, r3
 8005272:	f001 fdbf 	bl	8006df4 <memset>
 8005276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005278:	4a0c      	ldr	r2, [pc, #48]	; (80052ac <prvInitialiseNewTask+0x140>)
 800527a:	659a      	str	r2, [r3, #88]	; 0x58
 800527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527e:	4a0c      	ldr	r2, [pc, #48]	; (80052b0 <prvInitialiseNewTask+0x144>)
 8005280:	65da      	str	r2, [r3, #92]	; 0x5c
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	4a0b      	ldr	r2, [pc, #44]	; (80052b4 <prvInitialiseNewTask+0x148>)
 8005286:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	68f9      	ldr	r1, [r7, #12]
 800528c:	69b8      	ldr	r0, [r7, #24]
 800528e:	f001 f941 	bl	8006514 <pxPortInitialiseStack>
 8005292:	4602      	mov	r2, r0
 8005294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005296:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052a4:	bf00      	nop
 80052a6:	3720      	adds	r7, #32
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	08008bcc 	.word	0x08008bcc
 80052b0:	08008bec 	.word	0x08008bec
 80052b4:	08008bac 	.word	0x08008bac

080052b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052c0:	f001 fa58 	bl	8006774 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052c4:	4b2d      	ldr	r3, [pc, #180]	; (800537c <prvAddNewTaskToReadyList+0xc4>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3301      	adds	r3, #1
 80052ca:	4a2c      	ldr	r2, [pc, #176]	; (800537c <prvAddNewTaskToReadyList+0xc4>)
 80052cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052ce:	4b2c      	ldr	r3, [pc, #176]	; (8005380 <prvAddNewTaskToReadyList+0xc8>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d109      	bne.n	80052ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052d6:	4a2a      	ldr	r2, [pc, #168]	; (8005380 <prvAddNewTaskToReadyList+0xc8>)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052dc:	4b27      	ldr	r3, [pc, #156]	; (800537c <prvAddNewTaskToReadyList+0xc4>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d110      	bne.n	8005306 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052e4:	f000 fc26 	bl	8005b34 <prvInitialiseTaskLists>
 80052e8:	e00d      	b.n	8005306 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052ea:	4b26      	ldr	r3, [pc, #152]	; (8005384 <prvAddNewTaskToReadyList+0xcc>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d109      	bne.n	8005306 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052f2:	4b23      	ldr	r3, [pc, #140]	; (8005380 <prvAddNewTaskToReadyList+0xc8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d802      	bhi.n	8005306 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005300:	4a1f      	ldr	r2, [pc, #124]	; (8005380 <prvAddNewTaskToReadyList+0xc8>)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005306:	4b20      	ldr	r3, [pc, #128]	; (8005388 <prvAddNewTaskToReadyList+0xd0>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3301      	adds	r3, #1
 800530c:	4a1e      	ldr	r2, [pc, #120]	; (8005388 <prvAddNewTaskToReadyList+0xd0>)
 800530e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005310:	4b1d      	ldr	r3, [pc, #116]	; (8005388 <prvAddNewTaskToReadyList+0xd0>)
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531c:	4b1b      	ldr	r3, [pc, #108]	; (800538c <prvAddNewTaskToReadyList+0xd4>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	429a      	cmp	r2, r3
 8005322:	d903      	bls.n	800532c <prvAddNewTaskToReadyList+0x74>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	4a18      	ldr	r2, [pc, #96]	; (800538c <prvAddNewTaskToReadyList+0xd4>)
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005330:	4613      	mov	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4a15      	ldr	r2, [pc, #84]	; (8005390 <prvAddNewTaskToReadyList+0xd8>)
 800533a:	441a      	add	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3304      	adds	r3, #4
 8005340:	4619      	mov	r1, r3
 8005342:	4610      	mov	r0, r2
 8005344:	f7ff f8fd 	bl	8004542 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005348:	f001 fa44 	bl	80067d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800534c:	4b0d      	ldr	r3, [pc, #52]	; (8005384 <prvAddNewTaskToReadyList+0xcc>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00e      	beq.n	8005372 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005354:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <prvAddNewTaskToReadyList+0xc8>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	429a      	cmp	r2, r3
 8005360:	d207      	bcs.n	8005372 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005362:	4b0c      	ldr	r3, [pc, #48]	; (8005394 <prvAddNewTaskToReadyList+0xdc>)
 8005364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005372:	bf00      	nop
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	20001308 	.word	0x20001308
 8005380:	20000e34 	.word	0x20000e34
 8005384:	20001314 	.word	0x20001314
 8005388:	20001324 	.word	0x20001324
 800538c:	20001310 	.word	0x20001310
 8005390:	20000e38 	.word	0x20000e38
 8005394:	e000ed04 	.word	0xe000ed04

08005398 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053a0:	2300      	movs	r3, #0
 80053a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d017      	beq.n	80053da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053aa:	4b13      	ldr	r3, [pc, #76]	; (80053f8 <vTaskDelay+0x60>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <vTaskDelay+0x30>
	__asm volatile
 80053b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b6:	f383 8811 	msr	BASEPRI, r3
 80053ba:	f3bf 8f6f 	isb	sy
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	60bb      	str	r3, [r7, #8]
}
 80053c4:	bf00      	nop
 80053c6:	e7fe      	b.n	80053c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80053c8:	f000 f88a 	bl	80054e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053cc:	2100      	movs	r1, #0
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fcfe 	bl	8005dd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053d4:	f000 f892 	bl	80054fc <xTaskResumeAll>
 80053d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d107      	bne.n	80053f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80053e0:	4b06      	ldr	r3, [pc, #24]	; (80053fc <vTaskDelay+0x64>)
 80053e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053f0:	bf00      	nop
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	20001330 	.word	0x20001330
 80053fc:	e000ed04 	.word	0xe000ed04

08005400 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b08a      	sub	sp, #40	; 0x28
 8005404:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005406:	2300      	movs	r3, #0
 8005408:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800540a:	2300      	movs	r3, #0
 800540c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800540e:	463a      	mov	r2, r7
 8005410:	1d39      	adds	r1, r7, #4
 8005412:	f107 0308 	add.w	r3, r7, #8
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff f832 	bl	8004480 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800541c:	6839      	ldr	r1, [r7, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	9202      	str	r2, [sp, #8]
 8005424:	9301      	str	r3, [sp, #4]
 8005426:	2300      	movs	r3, #0
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	2300      	movs	r3, #0
 800542c:	460a      	mov	r2, r1
 800542e:	4924      	ldr	r1, [pc, #144]	; (80054c0 <vTaskStartScheduler+0xc0>)
 8005430:	4824      	ldr	r0, [pc, #144]	; (80054c4 <vTaskStartScheduler+0xc4>)
 8005432:	f7ff fdf9 	bl	8005028 <xTaskCreateStatic>
 8005436:	4603      	mov	r3, r0
 8005438:	4a23      	ldr	r2, [pc, #140]	; (80054c8 <vTaskStartScheduler+0xc8>)
 800543a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800543c:	4b22      	ldr	r3, [pc, #136]	; (80054c8 <vTaskStartScheduler+0xc8>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d002      	beq.n	800544a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005444:	2301      	movs	r3, #1
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	e001      	b.n	800544e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d102      	bne.n	800545a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005454:	f000 fd10 	bl	8005e78 <xTimerCreateTimerTask>
 8005458:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d11b      	bne.n	8005498 <vTaskStartScheduler+0x98>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	613b      	str	r3, [r7, #16]
}
 8005472:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005474:	4b15      	ldr	r3, [pc, #84]	; (80054cc <vTaskStartScheduler+0xcc>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3354      	adds	r3, #84	; 0x54
 800547a:	4a15      	ldr	r2, [pc, #84]	; (80054d0 <vTaskStartScheduler+0xd0>)
 800547c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800547e:	4b15      	ldr	r3, [pc, #84]	; (80054d4 <vTaskStartScheduler+0xd4>)
 8005480:	f04f 32ff 	mov.w	r2, #4294967295
 8005484:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005486:	4b14      	ldr	r3, [pc, #80]	; (80054d8 <vTaskStartScheduler+0xd8>)
 8005488:	2201      	movs	r2, #1
 800548a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800548c:	4b13      	ldr	r3, [pc, #76]	; (80054dc <vTaskStartScheduler+0xdc>)
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005492:	f001 f8cd 	bl	8006630 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005496:	e00e      	b.n	80054b6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549e:	d10a      	bne.n	80054b6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80054a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	60fb      	str	r3, [r7, #12]
}
 80054b2:	bf00      	nop
 80054b4:	e7fe      	b.n	80054b4 <vTaskStartScheduler+0xb4>
}
 80054b6:	bf00      	nop
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	08007050 	.word	0x08007050
 80054c4:	08005b05 	.word	0x08005b05
 80054c8:	2000132c 	.word	0x2000132c
 80054cc:	20000e34 	.word	0x20000e34
 80054d0:	20000044 	.word	0x20000044
 80054d4:	20001328 	.word	0x20001328
 80054d8:	20001314 	.word	0x20001314
 80054dc:	2000130c 	.word	0x2000130c

080054e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054e4:	4b04      	ldr	r3, [pc, #16]	; (80054f8 <vTaskSuspendAll+0x18>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3301      	adds	r3, #1
 80054ea:	4a03      	ldr	r2, [pc, #12]	; (80054f8 <vTaskSuspendAll+0x18>)
 80054ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054ee:	bf00      	nop
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	20001330 	.word	0x20001330

080054fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005502:	2300      	movs	r3, #0
 8005504:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005506:	2300      	movs	r3, #0
 8005508:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800550a:	4b42      	ldr	r3, [pc, #264]	; (8005614 <xTaskResumeAll+0x118>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10a      	bne.n	8005528 <xTaskResumeAll+0x2c>
	__asm volatile
 8005512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	603b      	str	r3, [r7, #0]
}
 8005524:	bf00      	nop
 8005526:	e7fe      	b.n	8005526 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005528:	f001 f924 	bl	8006774 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800552c:	4b39      	ldr	r3, [pc, #228]	; (8005614 <xTaskResumeAll+0x118>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3b01      	subs	r3, #1
 8005532:	4a38      	ldr	r2, [pc, #224]	; (8005614 <xTaskResumeAll+0x118>)
 8005534:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005536:	4b37      	ldr	r3, [pc, #220]	; (8005614 <xTaskResumeAll+0x118>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d162      	bne.n	8005604 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800553e:	4b36      	ldr	r3, [pc, #216]	; (8005618 <xTaskResumeAll+0x11c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d05e      	beq.n	8005604 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005546:	e02f      	b.n	80055a8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005548:	4b34      	ldr	r3, [pc, #208]	; (800561c <xTaskResumeAll+0x120>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3318      	adds	r3, #24
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff f851 	bl	80045fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	3304      	adds	r3, #4
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff f84c 	bl	80045fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005568:	4b2d      	ldr	r3, [pc, #180]	; (8005620 <xTaskResumeAll+0x124>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	429a      	cmp	r2, r3
 800556e:	d903      	bls.n	8005578 <xTaskResumeAll+0x7c>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	4a2a      	ldr	r2, [pc, #168]	; (8005620 <xTaskResumeAll+0x124>)
 8005576:	6013      	str	r3, [r2, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557c:	4613      	mov	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4a27      	ldr	r2, [pc, #156]	; (8005624 <xTaskResumeAll+0x128>)
 8005586:	441a      	add	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	3304      	adds	r3, #4
 800558c:	4619      	mov	r1, r3
 800558e:	4610      	mov	r0, r2
 8005590:	f7fe ffd7 	bl	8004542 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005598:	4b23      	ldr	r3, [pc, #140]	; (8005628 <xTaskResumeAll+0x12c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559e:	429a      	cmp	r2, r3
 80055a0:	d302      	bcc.n	80055a8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80055a2:	4b22      	ldr	r3, [pc, #136]	; (800562c <xTaskResumeAll+0x130>)
 80055a4:	2201      	movs	r2, #1
 80055a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055a8:	4b1c      	ldr	r3, [pc, #112]	; (800561c <xTaskResumeAll+0x120>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1cb      	bne.n	8005548 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055b6:	f000 fb5f 	bl	8005c78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055ba:	4b1d      	ldr	r3, [pc, #116]	; (8005630 <xTaskResumeAll+0x134>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d010      	beq.n	80055e8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055c6:	f000 f847 	bl	8005658 <xTaskIncrementTick>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80055d0:	4b16      	ldr	r3, [pc, #88]	; (800562c <xTaskResumeAll+0x130>)
 80055d2:	2201      	movs	r2, #1
 80055d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	3b01      	subs	r3, #1
 80055da:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1f1      	bne.n	80055c6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80055e2:	4b13      	ldr	r3, [pc, #76]	; (8005630 <xTaskResumeAll+0x134>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055e8:	4b10      	ldr	r3, [pc, #64]	; (800562c <xTaskResumeAll+0x130>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d009      	beq.n	8005604 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055f0:	2301      	movs	r3, #1
 80055f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055f4:	4b0f      	ldr	r3, [pc, #60]	; (8005634 <xTaskResumeAll+0x138>)
 80055f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005604:	f001 f8e6 	bl	80067d4 <vPortExitCritical>

	return xAlreadyYielded;
 8005608:	68bb      	ldr	r3, [r7, #8]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	20001330 	.word	0x20001330
 8005618:	20001308 	.word	0x20001308
 800561c:	200012c8 	.word	0x200012c8
 8005620:	20001310 	.word	0x20001310
 8005624:	20000e38 	.word	0x20000e38
 8005628:	20000e34 	.word	0x20000e34
 800562c:	2000131c 	.word	0x2000131c
 8005630:	20001318 	.word	0x20001318
 8005634:	e000ed04 	.word	0xe000ed04

08005638 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800563e:	4b05      	ldr	r3, [pc, #20]	; (8005654 <xTaskGetTickCount+0x1c>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005644:	687b      	ldr	r3, [r7, #4]
}
 8005646:	4618      	mov	r0, r3
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	2000130c 	.word	0x2000130c

08005658 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800565e:	2300      	movs	r3, #0
 8005660:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005662:	4b4f      	ldr	r3, [pc, #316]	; (80057a0 <xTaskIncrementTick+0x148>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	f040 808f 	bne.w	800578a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800566c:	4b4d      	ldr	r3, [pc, #308]	; (80057a4 <xTaskIncrementTick+0x14c>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	3301      	adds	r3, #1
 8005672:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005674:	4a4b      	ldr	r2, [pc, #300]	; (80057a4 <xTaskIncrementTick+0x14c>)
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d120      	bne.n	80056c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005680:	4b49      	ldr	r3, [pc, #292]	; (80057a8 <xTaskIncrementTick+0x150>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00a      	beq.n	80056a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	603b      	str	r3, [r7, #0]
}
 800569c:	bf00      	nop
 800569e:	e7fe      	b.n	800569e <xTaskIncrementTick+0x46>
 80056a0:	4b41      	ldr	r3, [pc, #260]	; (80057a8 <xTaskIncrementTick+0x150>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	4b41      	ldr	r3, [pc, #260]	; (80057ac <xTaskIncrementTick+0x154>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a3f      	ldr	r2, [pc, #252]	; (80057a8 <xTaskIncrementTick+0x150>)
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	4a3f      	ldr	r2, [pc, #252]	; (80057ac <xTaskIncrementTick+0x154>)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6013      	str	r3, [r2, #0]
 80056b4:	4b3e      	ldr	r3, [pc, #248]	; (80057b0 <xTaskIncrementTick+0x158>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3301      	adds	r3, #1
 80056ba:	4a3d      	ldr	r2, [pc, #244]	; (80057b0 <xTaskIncrementTick+0x158>)
 80056bc:	6013      	str	r3, [r2, #0]
 80056be:	f000 fadb 	bl	8005c78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056c2:	4b3c      	ldr	r3, [pc, #240]	; (80057b4 <xTaskIncrementTick+0x15c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d349      	bcc.n	8005760 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056cc:	4b36      	ldr	r3, [pc, #216]	; (80057a8 <xTaskIncrementTick+0x150>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d104      	bne.n	80056e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056d6:	4b37      	ldr	r3, [pc, #220]	; (80057b4 <xTaskIncrementTick+0x15c>)
 80056d8:	f04f 32ff 	mov.w	r2, #4294967295
 80056dc:	601a      	str	r2, [r3, #0]
					break;
 80056de:	e03f      	b.n	8005760 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056e0:	4b31      	ldr	r3, [pc, #196]	; (80057a8 <xTaskIncrementTick+0x150>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d203      	bcs.n	8005700 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056f8:	4a2e      	ldr	r2, [pc, #184]	; (80057b4 <xTaskIncrementTick+0x15c>)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056fe:	e02f      	b.n	8005760 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	3304      	adds	r3, #4
 8005704:	4618      	mov	r0, r3
 8005706:	f7fe ff79 	bl	80045fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570e:	2b00      	cmp	r3, #0
 8005710:	d004      	beq.n	800571c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	3318      	adds	r3, #24
 8005716:	4618      	mov	r0, r3
 8005718:	f7fe ff70 	bl	80045fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005720:	4b25      	ldr	r3, [pc, #148]	; (80057b8 <xTaskIncrementTick+0x160>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d903      	bls.n	8005730 <xTaskIncrementTick+0xd8>
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	4a22      	ldr	r2, [pc, #136]	; (80057b8 <xTaskIncrementTick+0x160>)
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4a1f      	ldr	r2, [pc, #124]	; (80057bc <xTaskIncrementTick+0x164>)
 800573e:	441a      	add	r2, r3
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	3304      	adds	r3, #4
 8005744:	4619      	mov	r1, r3
 8005746:	4610      	mov	r0, r2
 8005748:	f7fe fefb 	bl	8004542 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005750:	4b1b      	ldr	r3, [pc, #108]	; (80057c0 <xTaskIncrementTick+0x168>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005756:	429a      	cmp	r2, r3
 8005758:	d3b8      	bcc.n	80056cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800575a:	2301      	movs	r3, #1
 800575c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800575e:	e7b5      	b.n	80056cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005760:	4b17      	ldr	r3, [pc, #92]	; (80057c0 <xTaskIncrementTick+0x168>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005766:	4915      	ldr	r1, [pc, #84]	; (80057bc <xTaskIncrementTick+0x164>)
 8005768:	4613      	mov	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	440b      	add	r3, r1
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d901      	bls.n	800577c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005778:	2301      	movs	r3, #1
 800577a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800577c:	4b11      	ldr	r3, [pc, #68]	; (80057c4 <xTaskIncrementTick+0x16c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005784:	2301      	movs	r3, #1
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	e004      	b.n	8005794 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800578a:	4b0f      	ldr	r3, [pc, #60]	; (80057c8 <xTaskIncrementTick+0x170>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3301      	adds	r3, #1
 8005790:	4a0d      	ldr	r2, [pc, #52]	; (80057c8 <xTaskIncrementTick+0x170>)
 8005792:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005794:	697b      	ldr	r3, [r7, #20]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3718      	adds	r7, #24
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	20001330 	.word	0x20001330
 80057a4:	2000130c 	.word	0x2000130c
 80057a8:	200012c0 	.word	0x200012c0
 80057ac:	200012c4 	.word	0x200012c4
 80057b0:	20001320 	.word	0x20001320
 80057b4:	20001328 	.word	0x20001328
 80057b8:	20001310 	.word	0x20001310
 80057bc:	20000e38 	.word	0x20000e38
 80057c0:	20000e34 	.word	0x20000e34
 80057c4:	2000131c 	.word	0x2000131c
 80057c8:	20001318 	.word	0x20001318

080057cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057d2:	4b2a      	ldr	r3, [pc, #168]	; (800587c <vTaskSwitchContext+0xb0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057da:	4b29      	ldr	r3, [pc, #164]	; (8005880 <vTaskSwitchContext+0xb4>)
 80057dc:	2201      	movs	r2, #1
 80057de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057e0:	e046      	b.n	8005870 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80057e2:	4b27      	ldr	r3, [pc, #156]	; (8005880 <vTaskSwitchContext+0xb4>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057e8:	4b26      	ldr	r3, [pc, #152]	; (8005884 <vTaskSwitchContext+0xb8>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	e010      	b.n	8005812 <vTaskSwitchContext+0x46>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10a      	bne.n	800580c <vTaskSwitchContext+0x40>
	__asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	607b      	str	r3, [r7, #4]
}
 8005808:	bf00      	nop
 800580a:	e7fe      	b.n	800580a <vTaskSwitchContext+0x3e>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	3b01      	subs	r3, #1
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	491d      	ldr	r1, [pc, #116]	; (8005888 <vTaskSwitchContext+0xbc>)
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4613      	mov	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0e4      	beq.n	80057f0 <vTaskSwitchContext+0x24>
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4a15      	ldr	r2, [pc, #84]	; (8005888 <vTaskSwitchContext+0xbc>)
 8005832:	4413      	add	r3, r2
 8005834:	60bb      	str	r3, [r7, #8]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	605a      	str	r2, [r3, #4]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	3308      	adds	r3, #8
 8005848:	429a      	cmp	r2, r3
 800584a:	d104      	bne.n	8005856 <vTaskSwitchContext+0x8a>
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	605a      	str	r2, [r3, #4]
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	4a0b      	ldr	r2, [pc, #44]	; (800588c <vTaskSwitchContext+0xc0>)
 800585e:	6013      	str	r3, [r2, #0]
 8005860:	4a08      	ldr	r2, [pc, #32]	; (8005884 <vTaskSwitchContext+0xb8>)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005866:	4b09      	ldr	r3, [pc, #36]	; (800588c <vTaskSwitchContext+0xc0>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3354      	adds	r3, #84	; 0x54
 800586c:	4a08      	ldr	r2, [pc, #32]	; (8005890 <vTaskSwitchContext+0xc4>)
 800586e:	6013      	str	r3, [r2, #0]
}
 8005870:	bf00      	nop
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	20001330 	.word	0x20001330
 8005880:	2000131c 	.word	0x2000131c
 8005884:	20001310 	.word	0x20001310
 8005888:	20000e38 	.word	0x20000e38
 800588c:	20000e34 	.word	0x20000e34
 8005890:	20000044 	.word	0x20000044

08005894 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10a      	bne.n	80058ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80058a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	60fb      	str	r3, [r7, #12]
}
 80058b6:	bf00      	nop
 80058b8:	e7fe      	b.n	80058b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058ba:	4b07      	ldr	r3, [pc, #28]	; (80058d8 <vTaskPlaceOnEventList+0x44>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	3318      	adds	r3, #24
 80058c0:	4619      	mov	r1, r3
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7fe fe61 	bl	800458a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058c8:	2101      	movs	r1, #1
 80058ca:	6838      	ldr	r0, [r7, #0]
 80058cc:	f000 fa80 	bl	8005dd0 <prvAddCurrentTaskToDelayedList>
}
 80058d0:	bf00      	nop
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	20000e34 	.word	0x20000e34

080058dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10a      	bne.n	8005904 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	617b      	str	r3, [r7, #20]
}
 8005900:	bf00      	nop
 8005902:	e7fe      	b.n	8005902 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005904:	4b0a      	ldr	r3, [pc, #40]	; (8005930 <vTaskPlaceOnEventListRestricted+0x54>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3318      	adds	r3, #24
 800590a:	4619      	mov	r1, r3
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f7fe fe18 	bl	8004542 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005918:	f04f 33ff 	mov.w	r3, #4294967295
 800591c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800591e:	6879      	ldr	r1, [r7, #4]
 8005920:	68b8      	ldr	r0, [r7, #8]
 8005922:	f000 fa55 	bl	8005dd0 <prvAddCurrentTaskToDelayedList>
	}
 8005926:	bf00      	nop
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000e34 	.word	0x20000e34

08005934 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10a      	bne.n	8005960 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800594a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	60fb      	str	r3, [r7, #12]
}
 800595c:	bf00      	nop
 800595e:	e7fe      	b.n	800595e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	3318      	adds	r3, #24
 8005964:	4618      	mov	r0, r3
 8005966:	f7fe fe49 	bl	80045fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800596a:	4b1e      	ldr	r3, [pc, #120]	; (80059e4 <xTaskRemoveFromEventList+0xb0>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d11d      	bne.n	80059ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	3304      	adds	r3, #4
 8005976:	4618      	mov	r0, r3
 8005978:	f7fe fe40 	bl	80045fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005980:	4b19      	ldr	r3, [pc, #100]	; (80059e8 <xTaskRemoveFromEventList+0xb4>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d903      	bls.n	8005990 <xTaskRemoveFromEventList+0x5c>
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598c:	4a16      	ldr	r2, [pc, #88]	; (80059e8 <xTaskRemoveFromEventList+0xb4>)
 800598e:	6013      	str	r3, [r2, #0]
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005994:	4613      	mov	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4a13      	ldr	r2, [pc, #76]	; (80059ec <xTaskRemoveFromEventList+0xb8>)
 800599e:	441a      	add	r2, r3
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	3304      	adds	r3, #4
 80059a4:	4619      	mov	r1, r3
 80059a6:	4610      	mov	r0, r2
 80059a8:	f7fe fdcb 	bl	8004542 <vListInsertEnd>
 80059ac:	e005      	b.n	80059ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	3318      	adds	r3, #24
 80059b2:	4619      	mov	r1, r3
 80059b4:	480e      	ldr	r0, [pc, #56]	; (80059f0 <xTaskRemoveFromEventList+0xbc>)
 80059b6:	f7fe fdc4 	bl	8004542 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059be:	4b0d      	ldr	r3, [pc, #52]	; (80059f4 <xTaskRemoveFromEventList+0xc0>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d905      	bls.n	80059d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059c8:	2301      	movs	r3, #1
 80059ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059cc:	4b0a      	ldr	r3, [pc, #40]	; (80059f8 <xTaskRemoveFromEventList+0xc4>)
 80059ce:	2201      	movs	r2, #1
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	e001      	b.n	80059d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80059d4:	2300      	movs	r3, #0
 80059d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80059d8:	697b      	ldr	r3, [r7, #20]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	20001330 	.word	0x20001330
 80059e8:	20001310 	.word	0x20001310
 80059ec:	20000e38 	.word	0x20000e38
 80059f0:	200012c8 	.word	0x200012c8
 80059f4:	20000e34 	.word	0x20000e34
 80059f8:	2000131c 	.word	0x2000131c

080059fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a04:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <vTaskInternalSetTimeOutState+0x24>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a0c:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <vTaskInternalSetTimeOutState+0x28>)
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	605a      	str	r2, [r3, #4]
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	20001320 	.word	0x20001320
 8005a24:	2000130c 	.word	0x2000130c

08005a28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10a      	bne.n	8005a4e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3c:	f383 8811 	msr	BASEPRI, r3
 8005a40:	f3bf 8f6f 	isb	sy
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	613b      	str	r3, [r7, #16]
}
 8005a4a:	bf00      	nop
 8005a4c:	e7fe      	b.n	8005a4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10a      	bne.n	8005a6a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	60fb      	str	r3, [r7, #12]
}
 8005a66:	bf00      	nop
 8005a68:	e7fe      	b.n	8005a68 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005a6a:	f000 fe83 	bl	8006774 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a6e:	4b1d      	ldr	r3, [pc, #116]	; (8005ae4 <xTaskCheckForTimeOut+0xbc>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a86:	d102      	bne.n	8005a8e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	61fb      	str	r3, [r7, #28]
 8005a8c:	e023      	b.n	8005ad6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	4b15      	ldr	r3, [pc, #84]	; (8005ae8 <xTaskCheckForTimeOut+0xc0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d007      	beq.n	8005aaa <xTaskCheckForTimeOut+0x82>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d302      	bcc.n	8005aaa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	61fb      	str	r3, [r7, #28]
 8005aa8:	e015      	b.n	8005ad6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d20b      	bcs.n	8005acc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	1ad2      	subs	r2, r2, r3
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7ff ff9b 	bl	80059fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	61fb      	str	r3, [r7, #28]
 8005aca:	e004      	b.n	8005ad6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ad6:	f000 fe7d 	bl	80067d4 <vPortExitCritical>

	return xReturn;
 8005ada:	69fb      	ldr	r3, [r7, #28]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3720      	adds	r7, #32
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	2000130c 	.word	0x2000130c
 8005ae8:	20001320 	.word	0x20001320

08005aec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005aec:	b480      	push	{r7}
 8005aee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005af0:	4b03      	ldr	r3, [pc, #12]	; (8005b00 <vTaskMissedYield+0x14>)
 8005af2:	2201      	movs	r2, #1
 8005af4:	601a      	str	r2, [r3, #0]
}
 8005af6:	bf00      	nop
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	2000131c 	.word	0x2000131c

08005b04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b0c:	f000 f852 	bl	8005bb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b10:	4b06      	ldr	r3, [pc, #24]	; (8005b2c <prvIdleTask+0x28>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d9f9      	bls.n	8005b0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b18:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <prvIdleTask+0x2c>)
 8005b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b28:	e7f0      	b.n	8005b0c <prvIdleTask+0x8>
 8005b2a:	bf00      	nop
 8005b2c:	20000e38 	.word	0x20000e38
 8005b30:	e000ed04 	.word	0xe000ed04

08005b34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	607b      	str	r3, [r7, #4]
 8005b3e:	e00c      	b.n	8005b5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	4613      	mov	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4a12      	ldr	r2, [pc, #72]	; (8005b94 <prvInitialiseTaskLists+0x60>)
 8005b4c:	4413      	add	r3, r2
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fe fcca 	bl	80044e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	3301      	adds	r3, #1
 8005b58:	607b      	str	r3, [r7, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b37      	cmp	r3, #55	; 0x37
 8005b5e:	d9ef      	bls.n	8005b40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b60:	480d      	ldr	r0, [pc, #52]	; (8005b98 <prvInitialiseTaskLists+0x64>)
 8005b62:	f7fe fcc1 	bl	80044e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b66:	480d      	ldr	r0, [pc, #52]	; (8005b9c <prvInitialiseTaskLists+0x68>)
 8005b68:	f7fe fcbe 	bl	80044e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b6c:	480c      	ldr	r0, [pc, #48]	; (8005ba0 <prvInitialiseTaskLists+0x6c>)
 8005b6e:	f7fe fcbb 	bl	80044e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b72:	480c      	ldr	r0, [pc, #48]	; (8005ba4 <prvInitialiseTaskLists+0x70>)
 8005b74:	f7fe fcb8 	bl	80044e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b78:	480b      	ldr	r0, [pc, #44]	; (8005ba8 <prvInitialiseTaskLists+0x74>)
 8005b7a:	f7fe fcb5 	bl	80044e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b7e:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <prvInitialiseTaskLists+0x78>)
 8005b80:	4a05      	ldr	r2, [pc, #20]	; (8005b98 <prvInitialiseTaskLists+0x64>)
 8005b82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b84:	4b0a      	ldr	r3, [pc, #40]	; (8005bb0 <prvInitialiseTaskLists+0x7c>)
 8005b86:	4a05      	ldr	r2, [pc, #20]	; (8005b9c <prvInitialiseTaskLists+0x68>)
 8005b88:	601a      	str	r2, [r3, #0]
}
 8005b8a:	bf00      	nop
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	20000e38 	.word	0x20000e38
 8005b98:	20001298 	.word	0x20001298
 8005b9c:	200012ac 	.word	0x200012ac
 8005ba0:	200012c8 	.word	0x200012c8
 8005ba4:	200012dc 	.word	0x200012dc
 8005ba8:	200012f4 	.word	0x200012f4
 8005bac:	200012c0 	.word	0x200012c0
 8005bb0:	200012c4 	.word	0x200012c4

08005bb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bba:	e019      	b.n	8005bf0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005bbc:	f000 fdda 	bl	8006774 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bc0:	4b10      	ldr	r3, [pc, #64]	; (8005c04 <prvCheckTasksWaitingTermination+0x50>)
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3304      	adds	r3, #4
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fe fd15 	bl	80045fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bd2:	4b0d      	ldr	r3, [pc, #52]	; (8005c08 <prvCheckTasksWaitingTermination+0x54>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	4a0b      	ldr	r2, [pc, #44]	; (8005c08 <prvCheckTasksWaitingTermination+0x54>)
 8005bda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bdc:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <prvCheckTasksWaitingTermination+0x58>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	4a0a      	ldr	r2, [pc, #40]	; (8005c0c <prvCheckTasksWaitingTermination+0x58>)
 8005be4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005be6:	f000 fdf5 	bl	80067d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f810 	bl	8005c10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bf0:	4b06      	ldr	r3, [pc, #24]	; (8005c0c <prvCheckTasksWaitingTermination+0x58>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1e1      	bne.n	8005bbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005bf8:	bf00      	nop
 8005bfa:	bf00      	nop
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	200012dc 	.word	0x200012dc
 8005c08:	20001308 	.word	0x20001308
 8005c0c:	200012f0 	.word	0x200012f0

08005c10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	3354      	adds	r3, #84	; 0x54
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f001 f94b 	bl	8006eb8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d108      	bne.n	8005c3e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 ff8d 	bl	8006b50 <vPortFree>
				vPortFree( pxTCB );
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 ff8a 	bl	8006b50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c3c:	e018      	b.n	8005c70 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d103      	bne.n	8005c50 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 ff81 	bl	8006b50 <vPortFree>
	}
 8005c4e:	e00f      	b.n	8005c70 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d00a      	beq.n	8005c70 <prvDeleteTCB+0x60>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	60fb      	str	r3, [r7, #12]
}
 8005c6c:	bf00      	nop
 8005c6e:	e7fe      	b.n	8005c6e <prvDeleteTCB+0x5e>
	}
 8005c70:	bf00      	nop
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c7e:	4b0c      	ldr	r3, [pc, #48]	; (8005cb0 <prvResetNextTaskUnblockTime+0x38>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d104      	bne.n	8005c92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c88:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <prvResetNextTaskUnblockTime+0x3c>)
 8005c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c90:	e008      	b.n	8005ca4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c92:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <prvResetNextTaskUnblockTime+0x38>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	4a04      	ldr	r2, [pc, #16]	; (8005cb4 <prvResetNextTaskUnblockTime+0x3c>)
 8005ca2:	6013      	str	r3, [r2, #0]
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	200012c0 	.word	0x200012c0
 8005cb4:	20001328 	.word	0x20001328

08005cb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005cbe:	4b0b      	ldr	r3, [pc, #44]	; (8005cec <xTaskGetSchedulerState+0x34>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d102      	bne.n	8005ccc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	607b      	str	r3, [r7, #4]
 8005cca:	e008      	b.n	8005cde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ccc:	4b08      	ldr	r3, [pc, #32]	; (8005cf0 <xTaskGetSchedulerState+0x38>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d102      	bne.n	8005cda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	607b      	str	r3, [r7, #4]
 8005cd8:	e001      	b.n	8005cde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005cde:	687b      	ldr	r3, [r7, #4]
	}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	20001314 	.word	0x20001314
 8005cf0:	20001330 	.word	0x20001330

08005cf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d00:	2300      	movs	r3, #0
 8005d02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d056      	beq.n	8005db8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d0a:	4b2e      	ldr	r3, [pc, #184]	; (8005dc4 <xTaskPriorityDisinherit+0xd0>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d00a      	beq.n	8005d2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	60fb      	str	r3, [r7, #12]
}
 8005d26:	bf00      	nop
 8005d28:	e7fe      	b.n	8005d28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10a      	bne.n	8005d48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	60bb      	str	r3, [r7, #8]
}
 8005d44:	bf00      	nop
 8005d46:	e7fe      	b.n	8005d46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d4c:	1e5a      	subs	r2, r3, #1
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d02c      	beq.n	8005db8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d128      	bne.n	8005db8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	3304      	adds	r3, #4
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fe fc46 	bl	80045fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d88:	4b0f      	ldr	r3, [pc, #60]	; (8005dc8 <xTaskPriorityDisinherit+0xd4>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d903      	bls.n	8005d98 <xTaskPriorityDisinherit+0xa4>
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d94:	4a0c      	ldr	r2, [pc, #48]	; (8005dc8 <xTaskPriorityDisinherit+0xd4>)
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4a09      	ldr	r2, [pc, #36]	; (8005dcc <xTaskPriorityDisinherit+0xd8>)
 8005da6:	441a      	add	r2, r3
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	3304      	adds	r3, #4
 8005dac:	4619      	mov	r1, r3
 8005dae:	4610      	mov	r0, r2
 8005db0:	f7fe fbc7 	bl	8004542 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005db4:	2301      	movs	r3, #1
 8005db6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005db8:	697b      	ldr	r3, [r7, #20]
	}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3718      	adds	r7, #24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	20000e34 	.word	0x20000e34
 8005dc8:	20001310 	.word	0x20001310
 8005dcc:	20000e38 	.word	0x20000e38

08005dd0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005dda:	4b21      	ldr	r3, [pc, #132]	; (8005e60 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005de0:	4b20      	ldr	r3, [pc, #128]	; (8005e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3304      	adds	r3, #4
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fe fc08 	bl	80045fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df2:	d10a      	bne.n	8005e0a <prvAddCurrentTaskToDelayedList+0x3a>
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d007      	beq.n	8005e0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dfa:	4b1a      	ldr	r3, [pc, #104]	; (8005e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	4619      	mov	r1, r3
 8005e02:	4819      	ldr	r0, [pc, #100]	; (8005e68 <prvAddCurrentTaskToDelayedList+0x98>)
 8005e04:	f7fe fb9d 	bl	8004542 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e08:	e026      	b.n	8005e58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4413      	add	r3, r2
 8005e10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e12:	4b14      	ldr	r3, [pc, #80]	; (8005e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d209      	bcs.n	8005e36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e22:	4b12      	ldr	r3, [pc, #72]	; (8005e6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	4b0f      	ldr	r3, [pc, #60]	; (8005e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3304      	adds	r3, #4
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	4610      	mov	r0, r2
 8005e30:	f7fe fbab 	bl	800458a <vListInsert>
}
 8005e34:	e010      	b.n	8005e58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e36:	4b0e      	ldr	r3, [pc, #56]	; (8005e70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3304      	adds	r3, #4
 8005e40:	4619      	mov	r1, r3
 8005e42:	4610      	mov	r0, r2
 8005e44:	f7fe fba1 	bl	800458a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e48:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d202      	bcs.n	8005e58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e52:	4a08      	ldr	r2, [pc, #32]	; (8005e74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	6013      	str	r3, [r2, #0]
}
 8005e58:	bf00      	nop
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	2000130c 	.word	0x2000130c
 8005e64:	20000e34 	.word	0x20000e34
 8005e68:	200012f4 	.word	0x200012f4
 8005e6c:	200012c4 	.word	0x200012c4
 8005e70:	200012c0 	.word	0x200012c0
 8005e74:	20001328 	.word	0x20001328

08005e78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	; 0x28
 8005e7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e82:	f000 fb07 	bl	8006494 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e86:	4b1c      	ldr	r3, [pc, #112]	; (8005ef8 <xTimerCreateTimerTask+0x80>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d021      	beq.n	8005ed2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e92:	2300      	movs	r3, #0
 8005e94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e96:	1d3a      	adds	r2, r7, #4
 8005e98:	f107 0108 	add.w	r1, r7, #8
 8005e9c:	f107 030c 	add.w	r3, r7, #12
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fe fb07 	bl	80044b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ea6:	6879      	ldr	r1, [r7, #4]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	9202      	str	r2, [sp, #8]
 8005eae:	9301      	str	r3, [sp, #4]
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	460a      	mov	r2, r1
 8005eb8:	4910      	ldr	r1, [pc, #64]	; (8005efc <xTimerCreateTimerTask+0x84>)
 8005eba:	4811      	ldr	r0, [pc, #68]	; (8005f00 <xTimerCreateTimerTask+0x88>)
 8005ebc:	f7ff f8b4 	bl	8005028 <xTaskCreateStatic>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	4a10      	ldr	r2, [pc, #64]	; (8005f04 <xTimerCreateTimerTask+0x8c>)
 8005ec4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005ec6:	4b0f      	ldr	r3, [pc, #60]	; (8005f04 <xTimerCreateTimerTask+0x8c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10a      	bne.n	8005eee <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	613b      	str	r3, [r7, #16]
}
 8005eea:	bf00      	nop
 8005eec:	e7fe      	b.n	8005eec <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005eee:	697b      	ldr	r3, [r7, #20]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3718      	adds	r7, #24
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	20001364 	.word	0x20001364
 8005efc:	08007058 	.word	0x08007058
 8005f00:	0800603d 	.word	0x0800603d
 8005f04:	20001368 	.word	0x20001368

08005f08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08a      	sub	sp, #40	; 0x28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
 8005f14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f16:	2300      	movs	r3, #0
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10a      	bne.n	8005f36 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	623b      	str	r3, [r7, #32]
}
 8005f32:	bf00      	nop
 8005f34:	e7fe      	b.n	8005f34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f36:	4b1a      	ldr	r3, [pc, #104]	; (8005fa0 <xTimerGenericCommand+0x98>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d02a      	beq.n	8005f94 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b05      	cmp	r3, #5
 8005f4e:	dc18      	bgt.n	8005f82 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f50:	f7ff feb2 	bl	8005cb8 <xTaskGetSchedulerState>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d109      	bne.n	8005f6e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f5a:	4b11      	ldr	r3, [pc, #68]	; (8005fa0 <xTimerGenericCommand+0x98>)
 8005f5c:	6818      	ldr	r0, [r3, #0]
 8005f5e:	f107 0110 	add.w	r1, r7, #16
 8005f62:	2300      	movs	r3, #0
 8005f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f66:	f7fe fc77 	bl	8004858 <xQueueGenericSend>
 8005f6a:	6278      	str	r0, [r7, #36]	; 0x24
 8005f6c:	e012      	b.n	8005f94 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f6e:	4b0c      	ldr	r3, [pc, #48]	; (8005fa0 <xTimerGenericCommand+0x98>)
 8005f70:	6818      	ldr	r0, [r3, #0]
 8005f72:	f107 0110 	add.w	r1, r7, #16
 8005f76:	2300      	movs	r3, #0
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f7fe fc6d 	bl	8004858 <xQueueGenericSend>
 8005f7e:	6278      	str	r0, [r7, #36]	; 0x24
 8005f80:	e008      	b.n	8005f94 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f82:	4b07      	ldr	r3, [pc, #28]	; (8005fa0 <xTimerGenericCommand+0x98>)
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	f107 0110 	add.w	r1, r7, #16
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	f7fe fd61 	bl	8004a54 <xQueueGenericSendFromISR>
 8005f92:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3728      	adds	r7, #40	; 0x28
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20001364 	.word	0x20001364

08005fa4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af02      	add	r7, sp, #8
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fae:	4b22      	ldr	r3, [pc, #136]	; (8006038 <prvProcessExpiredTimer+0x94>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	3304      	adds	r3, #4
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7fe fb1d 	bl	80045fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d022      	beq.n	8006016 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	699a      	ldr	r2, [r3, #24]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	18d1      	adds	r1, r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	6978      	ldr	r0, [r7, #20]
 8005fde:	f000 f8d1 	bl	8006184 <prvInsertTimerInActiveList>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d01f      	beq.n	8006028 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fe8:	2300      	movs	r3, #0
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	2300      	movs	r3, #0
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	6978      	ldr	r0, [r7, #20]
 8005ff4:	f7ff ff88 	bl	8005f08 <xTimerGenericCommand>
 8005ff8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d113      	bne.n	8006028 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	60fb      	str	r3, [r7, #12]
}
 8006012:	bf00      	nop
 8006014:	e7fe      	b.n	8006014 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800601c:	f023 0301 	bic.w	r3, r3, #1
 8006020:	b2da      	uxtb	r2, r3
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	6978      	ldr	r0, [r7, #20]
 800602e:	4798      	blx	r3
}
 8006030:	bf00      	nop
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	2000135c 	.word	0x2000135c

0800603c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006044:	f107 0308 	add.w	r3, r7, #8
 8006048:	4618      	mov	r0, r3
 800604a:	f000 f857 	bl	80060fc <prvGetNextExpireTime>
 800604e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4619      	mov	r1, r3
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 f803 	bl	8006060 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800605a:	f000 f8d5 	bl	8006208 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800605e:	e7f1      	b.n	8006044 <prvTimerTask+0x8>

08006060 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800606a:	f7ff fa39 	bl	80054e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800606e:	f107 0308 	add.w	r3, r7, #8
 8006072:	4618      	mov	r0, r3
 8006074:	f000 f866 	bl	8006144 <prvSampleTimeNow>
 8006078:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d130      	bne.n	80060e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10a      	bne.n	800609c <prvProcessTimerOrBlockTask+0x3c>
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	429a      	cmp	r2, r3
 800608c:	d806      	bhi.n	800609c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800608e:	f7ff fa35 	bl	80054fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006092:	68f9      	ldr	r1, [r7, #12]
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7ff ff85 	bl	8005fa4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800609a:	e024      	b.n	80060e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d008      	beq.n	80060b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80060a2:	4b13      	ldr	r3, [pc, #76]	; (80060f0 <prvProcessTimerOrBlockTask+0x90>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <prvProcessTimerOrBlockTask+0x50>
 80060ac:	2301      	movs	r3, #1
 80060ae:	e000      	b.n	80060b2 <prvProcessTimerOrBlockTask+0x52>
 80060b0:	2300      	movs	r3, #0
 80060b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80060b4:	4b0f      	ldr	r3, [pc, #60]	; (80060f4 <prvProcessTimerOrBlockTask+0x94>)
 80060b6:	6818      	ldr	r0, [r3, #0]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	4619      	mov	r1, r3
 80060c2:	f7fe ff7d 	bl	8004fc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80060c6:	f7ff fa19 	bl	80054fc <xTaskResumeAll>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10a      	bne.n	80060e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80060d0:	4b09      	ldr	r3, [pc, #36]	; (80060f8 <prvProcessTimerOrBlockTask+0x98>)
 80060d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	f3bf 8f6f 	isb	sy
}
 80060e0:	e001      	b.n	80060e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80060e2:	f7ff fa0b 	bl	80054fc <xTaskResumeAll>
}
 80060e6:	bf00      	nop
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	20001360 	.word	0x20001360
 80060f4:	20001364 	.word	0x20001364
 80060f8:	e000ed04 	.word	0xe000ed04

080060fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006104:	4b0e      	ldr	r3, [pc, #56]	; (8006140 <prvGetNextExpireTime+0x44>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <prvGetNextExpireTime+0x16>
 800610e:	2201      	movs	r2, #1
 8006110:	e000      	b.n	8006114 <prvGetNextExpireTime+0x18>
 8006112:	2200      	movs	r2, #0
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d105      	bne.n	800612c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006120:	4b07      	ldr	r3, [pc, #28]	; (8006140 <prvGetNextExpireTime+0x44>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	e001      	b.n	8006130 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006130:	68fb      	ldr	r3, [r7, #12]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	2000135c 	.word	0x2000135c

08006144 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800614c:	f7ff fa74 	bl	8005638 <xTaskGetTickCount>
 8006150:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006152:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <prvSampleTimeNow+0x3c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	429a      	cmp	r2, r3
 800615a:	d205      	bcs.n	8006168 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800615c:	f000 f936 	bl	80063cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	e002      	b.n	800616e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800616e:	4a04      	ldr	r2, [pc, #16]	; (8006180 <prvSampleTimeNow+0x3c>)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006174:	68fb      	ldr	r3, [r7, #12]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	2000136c 	.word	0x2000136c

08006184 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
 8006190:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006192:	2300      	movs	r3, #0
 8006194:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d812      	bhi.n	80061d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	1ad2      	subs	r2, r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d302      	bcc.n	80061be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80061b8:	2301      	movs	r3, #1
 80061ba:	617b      	str	r3, [r7, #20]
 80061bc:	e01b      	b.n	80061f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80061be:	4b10      	ldr	r3, [pc, #64]	; (8006200 <prvInsertTimerInActiveList+0x7c>)
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	3304      	adds	r3, #4
 80061c6:	4619      	mov	r1, r3
 80061c8:	4610      	mov	r0, r2
 80061ca:	f7fe f9de 	bl	800458a <vListInsert>
 80061ce:	e012      	b.n	80061f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d206      	bcs.n	80061e6 <prvInsertTimerInActiveList+0x62>
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d302      	bcc.n	80061e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80061e0:	2301      	movs	r3, #1
 80061e2:	617b      	str	r3, [r7, #20]
 80061e4:	e007      	b.n	80061f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061e6:	4b07      	ldr	r3, [pc, #28]	; (8006204 <prvInsertTimerInActiveList+0x80>)
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	3304      	adds	r3, #4
 80061ee:	4619      	mov	r1, r3
 80061f0:	4610      	mov	r0, r2
 80061f2:	f7fe f9ca 	bl	800458a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80061f6:	697b      	ldr	r3, [r7, #20]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3718      	adds	r7, #24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	20001360 	.word	0x20001360
 8006204:	2000135c 	.word	0x2000135c

08006208 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b08e      	sub	sp, #56	; 0x38
 800620c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800620e:	e0ca      	b.n	80063a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	da18      	bge.n	8006248 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006216:	1d3b      	adds	r3, r7, #4
 8006218:	3304      	adds	r3, #4
 800621a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10a      	bne.n	8006238 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	61fb      	str	r3, [r7, #28]
}
 8006234:	bf00      	nop
 8006236:	e7fe      	b.n	8006236 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800623e:	6850      	ldr	r0, [r2, #4]
 8006240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006242:	6892      	ldr	r2, [r2, #8]
 8006244:	4611      	mov	r1, r2
 8006246:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	f2c0 80aa 	blt.w	80063a4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d004      	beq.n	8006266 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800625c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625e:	3304      	adds	r3, #4
 8006260:	4618      	mov	r0, r3
 8006262:	f7fe f9cb 	bl	80045fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006266:	463b      	mov	r3, r7
 8006268:	4618      	mov	r0, r3
 800626a:	f7ff ff6b 	bl	8006144 <prvSampleTimeNow>
 800626e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b09      	cmp	r3, #9
 8006274:	f200 8097 	bhi.w	80063a6 <prvProcessReceivedCommands+0x19e>
 8006278:	a201      	add	r2, pc, #4	; (adr r2, 8006280 <prvProcessReceivedCommands+0x78>)
 800627a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627e:	bf00      	nop
 8006280:	080062a9 	.word	0x080062a9
 8006284:	080062a9 	.word	0x080062a9
 8006288:	080062a9 	.word	0x080062a9
 800628c:	0800631d 	.word	0x0800631d
 8006290:	08006331 	.word	0x08006331
 8006294:	0800637b 	.word	0x0800637b
 8006298:	080062a9 	.word	0x080062a9
 800629c:	080062a9 	.word	0x080062a9
 80062a0:	0800631d 	.word	0x0800631d
 80062a4:	08006331 	.word	0x08006331
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062ae:	f043 0301 	orr.w	r3, r3, #1
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	18d1      	adds	r1, r2, r3
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062c8:	f7ff ff5c 	bl	8006184 <prvInsertTimerInActiveList>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d069      	beq.n	80063a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062e0:	f003 0304 	and.w	r3, r3, #4
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d05e      	beq.n	80063a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	441a      	add	r2, r3
 80062f0:	2300      	movs	r3, #0
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	2300      	movs	r3, #0
 80062f6:	2100      	movs	r1, #0
 80062f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062fa:	f7ff fe05 	bl	8005f08 <xTimerGenericCommand>
 80062fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d14f      	bne.n	80063a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	61bb      	str	r3, [r7, #24]
}
 8006318:	bf00      	nop
 800631a:	e7fe      	b.n	800631a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800631c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006322:	f023 0301 	bic.w	r3, r3, #1
 8006326:	b2da      	uxtb	r2, r3
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800632e:	e03a      	b.n	80063a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006332:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006336:	f043 0301 	orr.w	r3, r3, #1
 800633a:	b2da      	uxtb	r2, r3
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006346:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10a      	bne.n	8006366 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	617b      	str	r3, [r7, #20]
}
 8006362:	bf00      	nop
 8006364:	e7fe      	b.n	8006364 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006368:	699a      	ldr	r2, [r3, #24]
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636c:	18d1      	adds	r1, r2, r3
 800636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006374:	f7ff ff06 	bl	8006184 <prvInsertTimerInActiveList>
					break;
 8006378:	e015      	b.n	80063a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d103      	bne.n	8006390 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800638a:	f000 fbe1 	bl	8006b50 <vPortFree>
 800638e:	e00a      	b.n	80063a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006396:	f023 0301 	bic.w	r3, r3, #1
 800639a:	b2da      	uxtb	r2, r3
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80063a2:	e000      	b.n	80063a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80063a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063a6:	4b08      	ldr	r3, [pc, #32]	; (80063c8 <prvProcessReceivedCommands+0x1c0>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	1d39      	adds	r1, r7, #4
 80063ac:	2200      	movs	r2, #0
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fe fbec 	bl	8004b8c <xQueueReceive>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f47f af2a 	bne.w	8006210 <prvProcessReceivedCommands+0x8>
	}
}
 80063bc:	bf00      	nop
 80063be:	bf00      	nop
 80063c0:	3730      	adds	r7, #48	; 0x30
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	20001364 	.word	0x20001364

080063cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b088      	sub	sp, #32
 80063d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063d2:	e048      	b.n	8006466 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063d4:	4b2d      	ldr	r3, [pc, #180]	; (800648c <prvSwitchTimerLists+0xc0>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063de:	4b2b      	ldr	r3, [pc, #172]	; (800648c <prvSwitchTimerLists+0xc0>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3304      	adds	r3, #4
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7fe f905 	bl	80045fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006400:	f003 0304 	and.w	r3, r3, #4
 8006404:	2b00      	cmp	r3, #0
 8006406:	d02e      	beq.n	8006466 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	4413      	add	r3, r2
 8006410:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	429a      	cmp	r2, r3
 8006418:	d90e      	bls.n	8006438 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006426:	4b19      	ldr	r3, [pc, #100]	; (800648c <prvSwitchTimerLists+0xc0>)
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3304      	adds	r3, #4
 800642e:	4619      	mov	r1, r3
 8006430:	4610      	mov	r0, r2
 8006432:	f7fe f8aa 	bl	800458a <vListInsert>
 8006436:	e016      	b.n	8006466 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006438:	2300      	movs	r3, #0
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	2300      	movs	r3, #0
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	2100      	movs	r1, #0
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f7ff fd60 	bl	8005f08 <xTimerGenericCommand>
 8006448:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10a      	bne.n	8006466 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	603b      	str	r3, [r7, #0]
}
 8006462:	bf00      	nop
 8006464:	e7fe      	b.n	8006464 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006466:	4b09      	ldr	r3, [pc, #36]	; (800648c <prvSwitchTimerLists+0xc0>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1b1      	bne.n	80063d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006470:	4b06      	ldr	r3, [pc, #24]	; (800648c <prvSwitchTimerLists+0xc0>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006476:	4b06      	ldr	r3, [pc, #24]	; (8006490 <prvSwitchTimerLists+0xc4>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a04      	ldr	r2, [pc, #16]	; (800648c <prvSwitchTimerLists+0xc0>)
 800647c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800647e:	4a04      	ldr	r2, [pc, #16]	; (8006490 <prvSwitchTimerLists+0xc4>)
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	6013      	str	r3, [r2, #0]
}
 8006484:	bf00      	nop
 8006486:	3718      	adds	r7, #24
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	2000135c 	.word	0x2000135c
 8006490:	20001360 	.word	0x20001360

08006494 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800649a:	f000 f96b 	bl	8006774 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800649e:	4b15      	ldr	r3, [pc, #84]	; (80064f4 <prvCheckForValidListAndQueue+0x60>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d120      	bne.n	80064e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80064a6:	4814      	ldr	r0, [pc, #80]	; (80064f8 <prvCheckForValidListAndQueue+0x64>)
 80064a8:	f7fe f81e 	bl	80044e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80064ac:	4813      	ldr	r0, [pc, #76]	; (80064fc <prvCheckForValidListAndQueue+0x68>)
 80064ae:	f7fe f81b 	bl	80044e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80064b2:	4b13      	ldr	r3, [pc, #76]	; (8006500 <prvCheckForValidListAndQueue+0x6c>)
 80064b4:	4a10      	ldr	r2, [pc, #64]	; (80064f8 <prvCheckForValidListAndQueue+0x64>)
 80064b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80064b8:	4b12      	ldr	r3, [pc, #72]	; (8006504 <prvCheckForValidListAndQueue+0x70>)
 80064ba:	4a10      	ldr	r2, [pc, #64]	; (80064fc <prvCheckForValidListAndQueue+0x68>)
 80064bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80064be:	2300      	movs	r3, #0
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	4b11      	ldr	r3, [pc, #68]	; (8006508 <prvCheckForValidListAndQueue+0x74>)
 80064c4:	4a11      	ldr	r2, [pc, #68]	; (800650c <prvCheckForValidListAndQueue+0x78>)
 80064c6:	2110      	movs	r1, #16
 80064c8:	200a      	movs	r0, #10
 80064ca:	f7fe f929 	bl	8004720 <xQueueGenericCreateStatic>
 80064ce:	4603      	mov	r3, r0
 80064d0:	4a08      	ldr	r2, [pc, #32]	; (80064f4 <prvCheckForValidListAndQueue+0x60>)
 80064d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80064d4:	4b07      	ldr	r3, [pc, #28]	; (80064f4 <prvCheckForValidListAndQueue+0x60>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80064dc:	4b05      	ldr	r3, [pc, #20]	; (80064f4 <prvCheckForValidListAndQueue+0x60>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	490b      	ldr	r1, [pc, #44]	; (8006510 <prvCheckForValidListAndQueue+0x7c>)
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fe fd42 	bl	8004f6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064e8:	f000 f974 	bl	80067d4 <vPortExitCritical>
}
 80064ec:	bf00      	nop
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	20001364 	.word	0x20001364
 80064f8:	20001334 	.word	0x20001334
 80064fc:	20001348 	.word	0x20001348
 8006500:	2000135c 	.word	0x2000135c
 8006504:	20001360 	.word	0x20001360
 8006508:	20001410 	.word	0x20001410
 800650c:	20001370 	.word	0x20001370
 8006510:	08007060 	.word	0x08007060

08006514 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	3b04      	subs	r3, #4
 8006524:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800652c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3b04      	subs	r3, #4
 8006532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f023 0201 	bic.w	r2, r3, #1
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3b04      	subs	r3, #4
 8006542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006544:	4a0c      	ldr	r2, [pc, #48]	; (8006578 <pxPortInitialiseStack+0x64>)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	3b14      	subs	r3, #20
 800654e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	3b04      	subs	r3, #4
 800655a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f06f 0202 	mvn.w	r2, #2
 8006562:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3b20      	subs	r3, #32
 8006568:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800656a:	68fb      	ldr	r3, [r7, #12]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	0800657d 	.word	0x0800657d

0800657c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006582:	2300      	movs	r3, #0
 8006584:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006586:	4b12      	ldr	r3, [pc, #72]	; (80065d0 <prvTaskExitError+0x54>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658e:	d00a      	beq.n	80065a6 <prvTaskExitError+0x2a>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	60fb      	str	r3, [r7, #12]
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <prvTaskExitError+0x28>
	__asm volatile
 80065a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	60bb      	str	r3, [r7, #8]
}
 80065b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065ba:	bf00      	nop
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d0fc      	beq.n	80065bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065c2:	bf00      	nop
 80065c4:	bf00      	nop
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr
 80065d0:	20000040 	.word	0x20000040
	...

080065e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80065e0:	4b07      	ldr	r3, [pc, #28]	; (8006600 <pxCurrentTCBConst2>)
 80065e2:	6819      	ldr	r1, [r3, #0]
 80065e4:	6808      	ldr	r0, [r1, #0]
 80065e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ea:	f380 8809 	msr	PSP, r0
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f04f 0000 	mov.w	r0, #0
 80065f6:	f380 8811 	msr	BASEPRI, r0
 80065fa:	4770      	bx	lr
 80065fc:	f3af 8000 	nop.w

08006600 <pxCurrentTCBConst2>:
 8006600:	20000e34 	.word	0x20000e34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006604:	bf00      	nop
 8006606:	bf00      	nop

08006608 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006608:	4808      	ldr	r0, [pc, #32]	; (800662c <prvPortStartFirstTask+0x24>)
 800660a:	6800      	ldr	r0, [r0, #0]
 800660c:	6800      	ldr	r0, [r0, #0]
 800660e:	f380 8808 	msr	MSP, r0
 8006612:	f04f 0000 	mov.w	r0, #0
 8006616:	f380 8814 	msr	CONTROL, r0
 800661a:	b662      	cpsie	i
 800661c:	b661      	cpsie	f
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	df00      	svc	0
 8006628:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800662a:	bf00      	nop
 800662c:	e000ed08 	.word	0xe000ed08

08006630 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006636:	4b46      	ldr	r3, [pc, #280]	; (8006750 <xPortStartScheduler+0x120>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a46      	ldr	r2, [pc, #280]	; (8006754 <xPortStartScheduler+0x124>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d10a      	bne.n	8006656 <xPortStartScheduler+0x26>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	613b      	str	r3, [r7, #16]
}
 8006652:	bf00      	nop
 8006654:	e7fe      	b.n	8006654 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006656:	4b3e      	ldr	r3, [pc, #248]	; (8006750 <xPortStartScheduler+0x120>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a3f      	ldr	r2, [pc, #252]	; (8006758 <xPortStartScheduler+0x128>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d10a      	bne.n	8006676 <xPortStartScheduler+0x46>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	60fb      	str	r3, [r7, #12]
}
 8006672:	bf00      	nop
 8006674:	e7fe      	b.n	8006674 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006676:	4b39      	ldr	r3, [pc, #228]	; (800675c <xPortStartScheduler+0x12c>)
 8006678:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	b2db      	uxtb	r3, r3
 8006680:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	22ff      	movs	r2, #255	; 0xff
 8006686:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	b2db      	uxtb	r3, r3
 800668e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006690:	78fb      	ldrb	r3, [r7, #3]
 8006692:	b2db      	uxtb	r3, r3
 8006694:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006698:	b2da      	uxtb	r2, r3
 800669a:	4b31      	ldr	r3, [pc, #196]	; (8006760 <xPortStartScheduler+0x130>)
 800669c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800669e:	4b31      	ldr	r3, [pc, #196]	; (8006764 <xPortStartScheduler+0x134>)
 80066a0:	2207      	movs	r2, #7
 80066a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066a4:	e009      	b.n	80066ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80066a6:	4b2f      	ldr	r3, [pc, #188]	; (8006764 <xPortStartScheduler+0x134>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3b01      	subs	r3, #1
 80066ac:	4a2d      	ldr	r2, [pc, #180]	; (8006764 <xPortStartScheduler+0x134>)
 80066ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	005b      	lsls	r3, r3, #1
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066ba:	78fb      	ldrb	r3, [r7, #3]
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c2:	2b80      	cmp	r3, #128	; 0x80
 80066c4:	d0ef      	beq.n	80066a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066c6:	4b27      	ldr	r3, [pc, #156]	; (8006764 <xPortStartScheduler+0x134>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f1c3 0307 	rsb	r3, r3, #7
 80066ce:	2b04      	cmp	r3, #4
 80066d0:	d00a      	beq.n	80066e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80066d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	60bb      	str	r3, [r7, #8]
}
 80066e4:	bf00      	nop
 80066e6:	e7fe      	b.n	80066e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066e8:	4b1e      	ldr	r3, [pc, #120]	; (8006764 <xPortStartScheduler+0x134>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	021b      	lsls	r3, r3, #8
 80066ee:	4a1d      	ldr	r2, [pc, #116]	; (8006764 <xPortStartScheduler+0x134>)
 80066f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066f2:	4b1c      	ldr	r3, [pc, #112]	; (8006764 <xPortStartScheduler+0x134>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066fa:	4a1a      	ldr	r2, [pc, #104]	; (8006764 <xPortStartScheduler+0x134>)
 80066fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	b2da      	uxtb	r2, r3
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006706:	4b18      	ldr	r3, [pc, #96]	; (8006768 <xPortStartScheduler+0x138>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a17      	ldr	r2, [pc, #92]	; (8006768 <xPortStartScheduler+0x138>)
 800670c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006710:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006712:	4b15      	ldr	r3, [pc, #84]	; (8006768 <xPortStartScheduler+0x138>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a14      	ldr	r2, [pc, #80]	; (8006768 <xPortStartScheduler+0x138>)
 8006718:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800671c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800671e:	f000 f8dd 	bl	80068dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006722:	4b12      	ldr	r3, [pc, #72]	; (800676c <xPortStartScheduler+0x13c>)
 8006724:	2200      	movs	r2, #0
 8006726:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006728:	f000 f8fc 	bl	8006924 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800672c:	4b10      	ldr	r3, [pc, #64]	; (8006770 <xPortStartScheduler+0x140>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a0f      	ldr	r2, [pc, #60]	; (8006770 <xPortStartScheduler+0x140>)
 8006732:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006736:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006738:	f7ff ff66 	bl	8006608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800673c:	f7ff f846 	bl	80057cc <vTaskSwitchContext>
	prvTaskExitError();
 8006740:	f7ff ff1c 	bl	800657c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3718      	adds	r7, #24
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	e000ed00 	.word	0xe000ed00
 8006754:	410fc271 	.word	0x410fc271
 8006758:	410fc270 	.word	0x410fc270
 800675c:	e000e400 	.word	0xe000e400
 8006760:	20001460 	.word	0x20001460
 8006764:	20001464 	.word	0x20001464
 8006768:	e000ed20 	.word	0xe000ed20
 800676c:	20000040 	.word	0x20000040
 8006770:	e000ef34 	.word	0xe000ef34

08006774 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
	__asm volatile
 800677a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677e:	f383 8811 	msr	BASEPRI, r3
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	607b      	str	r3, [r7, #4]
}
 800678c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800678e:	4b0f      	ldr	r3, [pc, #60]	; (80067cc <vPortEnterCritical+0x58>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3301      	adds	r3, #1
 8006794:	4a0d      	ldr	r2, [pc, #52]	; (80067cc <vPortEnterCritical+0x58>)
 8006796:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006798:	4b0c      	ldr	r3, [pc, #48]	; (80067cc <vPortEnterCritical+0x58>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d10f      	bne.n	80067c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067a0:	4b0b      	ldr	r3, [pc, #44]	; (80067d0 <vPortEnterCritical+0x5c>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00a      	beq.n	80067c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80067aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ae:	f383 8811 	msr	BASEPRI, r3
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	603b      	str	r3, [r7, #0]
}
 80067bc:	bf00      	nop
 80067be:	e7fe      	b.n	80067be <vPortEnterCritical+0x4a>
	}
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr
 80067cc:	20000040 	.word	0x20000040
 80067d0:	e000ed04 	.word	0xe000ed04

080067d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067da:	4b12      	ldr	r3, [pc, #72]	; (8006824 <vPortExitCritical+0x50>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10a      	bne.n	80067f8 <vPortExitCritical+0x24>
	__asm volatile
 80067e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	607b      	str	r3, [r7, #4]
}
 80067f4:	bf00      	nop
 80067f6:	e7fe      	b.n	80067f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80067f8:	4b0a      	ldr	r3, [pc, #40]	; (8006824 <vPortExitCritical+0x50>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3b01      	subs	r3, #1
 80067fe:	4a09      	ldr	r2, [pc, #36]	; (8006824 <vPortExitCritical+0x50>)
 8006800:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006802:	4b08      	ldr	r3, [pc, #32]	; (8006824 <vPortExitCritical+0x50>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d105      	bne.n	8006816 <vPortExitCritical+0x42>
 800680a:	2300      	movs	r3, #0
 800680c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	f383 8811 	msr	BASEPRI, r3
}
 8006814:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006816:	bf00      	nop
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	20000040 	.word	0x20000040
	...

08006830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006830:	f3ef 8009 	mrs	r0, PSP
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	4b15      	ldr	r3, [pc, #84]	; (8006890 <pxCurrentTCBConst>)
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	f01e 0f10 	tst.w	lr, #16
 8006840:	bf08      	it	eq
 8006842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684a:	6010      	str	r0, [r2, #0]
 800684c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006850:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006854:	f380 8811 	msr	BASEPRI, r0
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	f3bf 8f6f 	isb	sy
 8006860:	f7fe ffb4 	bl	80057cc <vTaskSwitchContext>
 8006864:	f04f 0000 	mov.w	r0, #0
 8006868:	f380 8811 	msr	BASEPRI, r0
 800686c:	bc09      	pop	{r0, r3}
 800686e:	6819      	ldr	r1, [r3, #0]
 8006870:	6808      	ldr	r0, [r1, #0]
 8006872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006876:	f01e 0f10 	tst.w	lr, #16
 800687a:	bf08      	it	eq
 800687c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006880:	f380 8809 	msr	PSP, r0
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	f3af 8000 	nop.w

08006890 <pxCurrentTCBConst>:
 8006890:	20000e34 	.word	0x20000e34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006894:	bf00      	nop
 8006896:	bf00      	nop

08006898 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
	__asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	607b      	str	r3, [r7, #4]
}
 80068b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068b2:	f7fe fed1 	bl	8005658 <xTaskIncrementTick>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068bc:	4b06      	ldr	r3, [pc, #24]	; (80068d8 <xPortSysTickHandler+0x40>)
 80068be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068c2:	601a      	str	r2, [r3, #0]
 80068c4:	2300      	movs	r3, #0
 80068c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	f383 8811 	msr	BASEPRI, r3
}
 80068ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068d0:	bf00      	nop
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	e000ed04 	.word	0xe000ed04

080068dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068dc:	b480      	push	{r7}
 80068de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068e0:	4b0b      	ldr	r3, [pc, #44]	; (8006910 <vPortSetupTimerInterrupt+0x34>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068e6:	4b0b      	ldr	r3, [pc, #44]	; (8006914 <vPortSetupTimerInterrupt+0x38>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068ec:	4b0a      	ldr	r3, [pc, #40]	; (8006918 <vPortSetupTimerInterrupt+0x3c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a0a      	ldr	r2, [pc, #40]	; (800691c <vPortSetupTimerInterrupt+0x40>)
 80068f2:	fba2 2303 	umull	r2, r3, r2, r3
 80068f6:	099b      	lsrs	r3, r3, #6
 80068f8:	4a09      	ldr	r2, [pc, #36]	; (8006920 <vPortSetupTimerInterrupt+0x44>)
 80068fa:	3b01      	subs	r3, #1
 80068fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068fe:	4b04      	ldr	r3, [pc, #16]	; (8006910 <vPortSetupTimerInterrupt+0x34>)
 8006900:	2207      	movs	r2, #7
 8006902:	601a      	str	r2, [r3, #0]
}
 8006904:	bf00      	nop
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	e000e010 	.word	0xe000e010
 8006914:	e000e018 	.word	0xe000e018
 8006918:	20000034 	.word	0x20000034
 800691c:	10624dd3 	.word	0x10624dd3
 8006920:	e000e014 	.word	0xe000e014

08006924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006924:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006934 <vPortEnableVFP+0x10>
 8006928:	6801      	ldr	r1, [r0, #0]
 800692a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800692e:	6001      	str	r1, [r0, #0]
 8006930:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006932:	bf00      	nop
 8006934:	e000ed88 	.word	0xe000ed88

08006938 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800693e:	f3ef 8305 	mrs	r3, IPSR
 8006942:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2b0f      	cmp	r3, #15
 8006948:	d914      	bls.n	8006974 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800694a:	4a17      	ldr	r2, [pc, #92]	; (80069a8 <vPortValidateInterruptPriority+0x70>)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4413      	add	r3, r2
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006954:	4b15      	ldr	r3, [pc, #84]	; (80069ac <vPortValidateInterruptPriority+0x74>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	7afa      	ldrb	r2, [r7, #11]
 800695a:	429a      	cmp	r2, r3
 800695c:	d20a      	bcs.n	8006974 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	607b      	str	r3, [r7, #4]
}
 8006970:	bf00      	nop
 8006972:	e7fe      	b.n	8006972 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006974:	4b0e      	ldr	r3, [pc, #56]	; (80069b0 <vPortValidateInterruptPriority+0x78>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800697c:	4b0d      	ldr	r3, [pc, #52]	; (80069b4 <vPortValidateInterruptPriority+0x7c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	429a      	cmp	r2, r3
 8006982:	d90a      	bls.n	800699a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	603b      	str	r3, [r7, #0]
}
 8006996:	bf00      	nop
 8006998:	e7fe      	b.n	8006998 <vPortValidateInterruptPriority+0x60>
	}
 800699a:	bf00      	nop
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	e000e3f0 	.word	0xe000e3f0
 80069ac:	20001460 	.word	0x20001460
 80069b0:	e000ed0c 	.word	0xe000ed0c
 80069b4:	20001464 	.word	0x20001464

080069b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b08a      	sub	sp, #40	; 0x28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069c0:	2300      	movs	r3, #0
 80069c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069c4:	f7fe fd8c 	bl	80054e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069c8:	4b5b      	ldr	r3, [pc, #364]	; (8006b38 <pvPortMalloc+0x180>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069d0:	f000 f920 	bl	8006c14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069d4:	4b59      	ldr	r3, [pc, #356]	; (8006b3c <pvPortMalloc+0x184>)
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4013      	ands	r3, r2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f040 8093 	bne.w	8006b08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d01d      	beq.n	8006a24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80069e8:	2208      	movs	r2, #8
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4413      	add	r3, r2
 80069ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f003 0307 	and.w	r3, r3, #7
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d014      	beq.n	8006a24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f023 0307 	bic.w	r3, r3, #7
 8006a00:	3308      	adds	r3, #8
 8006a02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f003 0307 	and.w	r3, r3, #7
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00a      	beq.n	8006a24 <pvPortMalloc+0x6c>
	__asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	617b      	str	r3, [r7, #20]
}
 8006a20:	bf00      	nop
 8006a22:	e7fe      	b.n	8006a22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d06e      	beq.n	8006b08 <pvPortMalloc+0x150>
 8006a2a:	4b45      	ldr	r3, [pc, #276]	; (8006b40 <pvPortMalloc+0x188>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d869      	bhi.n	8006b08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a34:	4b43      	ldr	r3, [pc, #268]	; (8006b44 <pvPortMalloc+0x18c>)
 8006a36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a38:	4b42      	ldr	r3, [pc, #264]	; (8006b44 <pvPortMalloc+0x18c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a3e:	e004      	b.n	8006a4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d903      	bls.n	8006a5c <pvPortMalloc+0xa4>
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1f1      	bne.n	8006a40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a5c:	4b36      	ldr	r3, [pc, #216]	; (8006b38 <pvPortMalloc+0x180>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d050      	beq.n	8006b08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2208      	movs	r2, #8
 8006a6c:	4413      	add	r3, r2
 8006a6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	1ad2      	subs	r2, r2, r3
 8006a80:	2308      	movs	r3, #8
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d91f      	bls.n	8006ac8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	f003 0307 	and.w	r3, r3, #7
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <pvPortMalloc+0xf8>
	__asm volatile
 8006a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9e:	f383 8811 	msr	BASEPRI, r3
 8006aa2:	f3bf 8f6f 	isb	sy
 8006aa6:	f3bf 8f4f 	dsb	sy
 8006aaa:	613b      	str	r3, [r7, #16]
}
 8006aac:	bf00      	nop
 8006aae:	e7fe      	b.n	8006aae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	685a      	ldr	r2, [r3, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	1ad2      	subs	r2, r2, r3
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ac2:	69b8      	ldr	r0, [r7, #24]
 8006ac4:	f000 f908 	bl	8006cd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ac8:	4b1d      	ldr	r3, [pc, #116]	; (8006b40 <pvPortMalloc+0x188>)
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	4a1b      	ldr	r2, [pc, #108]	; (8006b40 <pvPortMalloc+0x188>)
 8006ad4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ad6:	4b1a      	ldr	r3, [pc, #104]	; (8006b40 <pvPortMalloc+0x188>)
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	4b1b      	ldr	r3, [pc, #108]	; (8006b48 <pvPortMalloc+0x190>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d203      	bcs.n	8006aea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ae2:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <pvPortMalloc+0x188>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a18      	ldr	r2, [pc, #96]	; (8006b48 <pvPortMalloc+0x190>)
 8006ae8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	685a      	ldr	r2, [r3, #4]
 8006aee:	4b13      	ldr	r3, [pc, #76]	; (8006b3c <pvPortMalloc+0x184>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	431a      	orrs	r2, r3
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	2200      	movs	r2, #0
 8006afc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006afe:	4b13      	ldr	r3, [pc, #76]	; (8006b4c <pvPortMalloc+0x194>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3301      	adds	r3, #1
 8006b04:	4a11      	ldr	r2, [pc, #68]	; (8006b4c <pvPortMalloc+0x194>)
 8006b06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b08:	f7fe fcf8 	bl	80054fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	f003 0307 	and.w	r3, r3, #7
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00a      	beq.n	8006b2c <pvPortMalloc+0x174>
	__asm volatile
 8006b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	60fb      	str	r3, [r7, #12]
}
 8006b28:	bf00      	nop
 8006b2a:	e7fe      	b.n	8006b2a <pvPortMalloc+0x172>
	return pvReturn;
 8006b2c:	69fb      	ldr	r3, [r7, #28]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3728      	adds	r7, #40	; 0x28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20005070 	.word	0x20005070
 8006b3c:	20005084 	.word	0x20005084
 8006b40:	20005074 	.word	0x20005074
 8006b44:	20005068 	.word	0x20005068
 8006b48:	20005078 	.word	0x20005078
 8006b4c:	2000507c 	.word	0x2000507c

08006b50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d04d      	beq.n	8006bfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b62:	2308      	movs	r3, #8
 8006b64:	425b      	negs	r3, r3
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	4413      	add	r3, r2
 8006b6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	4b24      	ldr	r3, [pc, #144]	; (8006c08 <vPortFree+0xb8>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10a      	bne.n	8006b94 <vPortFree+0x44>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	60fb      	str	r3, [r7, #12]
}
 8006b90:	bf00      	nop
 8006b92:	e7fe      	b.n	8006b92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00a      	beq.n	8006bb2 <vPortFree+0x62>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	60bb      	str	r3, [r7, #8]
}
 8006bae:	bf00      	nop
 8006bb0:	e7fe      	b.n	8006bb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	4b14      	ldr	r3, [pc, #80]	; (8006c08 <vPortFree+0xb8>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d01e      	beq.n	8006bfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d11a      	bne.n	8006bfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	4b0e      	ldr	r3, [pc, #56]	; (8006c08 <vPortFree+0xb8>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	43db      	mvns	r3, r3
 8006bd2:	401a      	ands	r2, r3
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006bd8:	f7fe fc82 	bl	80054e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	4b0a      	ldr	r3, [pc, #40]	; (8006c0c <vPortFree+0xbc>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4413      	add	r3, r2
 8006be6:	4a09      	ldr	r2, [pc, #36]	; (8006c0c <vPortFree+0xbc>)
 8006be8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bea:	6938      	ldr	r0, [r7, #16]
 8006bec:	f000 f874 	bl	8006cd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006bf0:	4b07      	ldr	r3, [pc, #28]	; (8006c10 <vPortFree+0xc0>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	4a06      	ldr	r2, [pc, #24]	; (8006c10 <vPortFree+0xc0>)
 8006bf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006bfa:	f7fe fc7f 	bl	80054fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bfe:	bf00      	nop
 8006c00:	3718      	adds	r7, #24
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20005084 	.word	0x20005084
 8006c0c:	20005074 	.word	0x20005074
 8006c10:	20005080 	.word	0x20005080

08006c14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006c1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c20:	4b27      	ldr	r3, [pc, #156]	; (8006cc0 <prvHeapInit+0xac>)
 8006c22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00c      	beq.n	8006c48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3307      	adds	r3, #7
 8006c32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 0307 	bic.w	r3, r3, #7
 8006c3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	4a1f      	ldr	r2, [pc, #124]	; (8006cc0 <prvHeapInit+0xac>)
 8006c44:	4413      	add	r3, r2
 8006c46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c4c:	4a1d      	ldr	r2, [pc, #116]	; (8006cc4 <prvHeapInit+0xb0>)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c52:	4b1c      	ldr	r3, [pc, #112]	; (8006cc4 <prvHeapInit+0xb0>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c60:	2208      	movs	r2, #8
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	1a9b      	subs	r3, r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 0307 	bic.w	r3, r3, #7
 8006c6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4a15      	ldr	r2, [pc, #84]	; (8006cc8 <prvHeapInit+0xb4>)
 8006c74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c76:	4b14      	ldr	r3, [pc, #80]	; (8006cc8 <prvHeapInit+0xb4>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c7e:	4b12      	ldr	r3, [pc, #72]	; (8006cc8 <prvHeapInit+0xb4>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2200      	movs	r2, #0
 8006c84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	1ad2      	subs	r2, r2, r3
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c94:	4b0c      	ldr	r3, [pc, #48]	; (8006cc8 <prvHeapInit+0xb4>)
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	4a0a      	ldr	r2, [pc, #40]	; (8006ccc <prvHeapInit+0xb8>)
 8006ca2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	4a09      	ldr	r2, [pc, #36]	; (8006cd0 <prvHeapInit+0xbc>)
 8006caa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006cac:	4b09      	ldr	r3, [pc, #36]	; (8006cd4 <prvHeapInit+0xc0>)
 8006cae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006cb2:	601a      	str	r2, [r3, #0]
}
 8006cb4:	bf00      	nop
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	20001468 	.word	0x20001468
 8006cc4:	20005068 	.word	0x20005068
 8006cc8:	20005070 	.word	0x20005070
 8006ccc:	20005078 	.word	0x20005078
 8006cd0:	20005074 	.word	0x20005074
 8006cd4:	20005084 	.word	0x20005084

08006cd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ce0:	4b28      	ldr	r3, [pc, #160]	; (8006d84 <prvInsertBlockIntoFreeList+0xac>)
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	e002      	b.n	8006cec <prvInsertBlockIntoFreeList+0x14>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	60fb      	str	r3, [r7, #12]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d8f7      	bhi.n	8006ce6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	4413      	add	r3, r2
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d108      	bne.n	8006d1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	441a      	add	r2, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	441a      	add	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d118      	bne.n	8006d60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	4b15      	ldr	r3, [pc, #84]	; (8006d88 <prvInsertBlockIntoFreeList+0xb0>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d00d      	beq.n	8006d56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	441a      	add	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	e008      	b.n	8006d68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d56:	4b0c      	ldr	r3, [pc, #48]	; (8006d88 <prvInsertBlockIntoFreeList+0xb0>)
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	e003      	b.n	8006d68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d002      	beq.n	8006d76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d76:	bf00      	nop
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	20005068 	.word	0x20005068
 8006d88:	20005070 	.word	0x20005070

08006d8c <__libc_init_array>:
 8006d8c:	b570      	push	{r4, r5, r6, lr}
 8006d8e:	4d0d      	ldr	r5, [pc, #52]	; (8006dc4 <__libc_init_array+0x38>)
 8006d90:	4c0d      	ldr	r4, [pc, #52]	; (8006dc8 <__libc_init_array+0x3c>)
 8006d92:	1b64      	subs	r4, r4, r5
 8006d94:	10a4      	asrs	r4, r4, #2
 8006d96:	2600      	movs	r6, #0
 8006d98:	42a6      	cmp	r6, r4
 8006d9a:	d109      	bne.n	8006db0 <__libc_init_array+0x24>
 8006d9c:	4d0b      	ldr	r5, [pc, #44]	; (8006dcc <__libc_init_array+0x40>)
 8006d9e:	4c0c      	ldr	r4, [pc, #48]	; (8006dd0 <__libc_init_array+0x44>)
 8006da0:	f000 f8f2 	bl	8006f88 <_init>
 8006da4:	1b64      	subs	r4, r4, r5
 8006da6:	10a4      	asrs	r4, r4, #2
 8006da8:	2600      	movs	r6, #0
 8006daa:	42a6      	cmp	r6, r4
 8006dac:	d105      	bne.n	8006dba <__libc_init_array+0x2e>
 8006dae:	bd70      	pop	{r4, r5, r6, pc}
 8006db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006db4:	4798      	blx	r3
 8006db6:	3601      	adds	r6, #1
 8006db8:	e7ee      	b.n	8006d98 <__libc_init_array+0xc>
 8006dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dbe:	4798      	blx	r3
 8006dc0:	3601      	adds	r6, #1
 8006dc2:	e7f2      	b.n	8006daa <__libc_init_array+0x1e>
 8006dc4:	08008c14 	.word	0x08008c14
 8006dc8:	08008c14 	.word	0x08008c14
 8006dcc:	08008c14 	.word	0x08008c14
 8006dd0:	08008c18 	.word	0x08008c18

08006dd4 <__retarget_lock_acquire_recursive>:
 8006dd4:	4770      	bx	lr

08006dd6 <__retarget_lock_release_recursive>:
 8006dd6:	4770      	bx	lr

08006dd8 <memcpy>:
 8006dd8:	440a      	add	r2, r1
 8006dda:	4291      	cmp	r1, r2
 8006ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006de0:	d100      	bne.n	8006de4 <memcpy+0xc>
 8006de2:	4770      	bx	lr
 8006de4:	b510      	push	{r4, lr}
 8006de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dee:	4291      	cmp	r1, r2
 8006df0:	d1f9      	bne.n	8006de6 <memcpy+0xe>
 8006df2:	bd10      	pop	{r4, pc}

08006df4 <memset>:
 8006df4:	4402      	add	r2, r0
 8006df6:	4603      	mov	r3, r0
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d100      	bne.n	8006dfe <memset+0xa>
 8006dfc:	4770      	bx	lr
 8006dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8006e02:	e7f9      	b.n	8006df8 <memset+0x4>

08006e04 <_free_r>:
 8006e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e06:	2900      	cmp	r1, #0
 8006e08:	d044      	beq.n	8006e94 <_free_r+0x90>
 8006e0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e0e:	9001      	str	r0, [sp, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f1a1 0404 	sub.w	r4, r1, #4
 8006e16:	bfb8      	it	lt
 8006e18:	18e4      	addlt	r4, r4, r3
 8006e1a:	f000 f8a9 	bl	8006f70 <__malloc_lock>
 8006e1e:	4a1e      	ldr	r2, [pc, #120]	; (8006e98 <_free_r+0x94>)
 8006e20:	9801      	ldr	r0, [sp, #4]
 8006e22:	6813      	ldr	r3, [r2, #0]
 8006e24:	b933      	cbnz	r3, 8006e34 <_free_r+0x30>
 8006e26:	6063      	str	r3, [r4, #4]
 8006e28:	6014      	str	r4, [r2, #0]
 8006e2a:	b003      	add	sp, #12
 8006e2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e30:	f000 b8a4 	b.w	8006f7c <__malloc_unlock>
 8006e34:	42a3      	cmp	r3, r4
 8006e36:	d908      	bls.n	8006e4a <_free_r+0x46>
 8006e38:	6825      	ldr	r5, [r4, #0]
 8006e3a:	1961      	adds	r1, r4, r5
 8006e3c:	428b      	cmp	r3, r1
 8006e3e:	bf01      	itttt	eq
 8006e40:	6819      	ldreq	r1, [r3, #0]
 8006e42:	685b      	ldreq	r3, [r3, #4]
 8006e44:	1949      	addeq	r1, r1, r5
 8006e46:	6021      	streq	r1, [r4, #0]
 8006e48:	e7ed      	b.n	8006e26 <_free_r+0x22>
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	b10b      	cbz	r3, 8006e54 <_free_r+0x50>
 8006e50:	42a3      	cmp	r3, r4
 8006e52:	d9fa      	bls.n	8006e4a <_free_r+0x46>
 8006e54:	6811      	ldr	r1, [r2, #0]
 8006e56:	1855      	adds	r5, r2, r1
 8006e58:	42a5      	cmp	r5, r4
 8006e5a:	d10b      	bne.n	8006e74 <_free_r+0x70>
 8006e5c:	6824      	ldr	r4, [r4, #0]
 8006e5e:	4421      	add	r1, r4
 8006e60:	1854      	adds	r4, r2, r1
 8006e62:	42a3      	cmp	r3, r4
 8006e64:	6011      	str	r1, [r2, #0]
 8006e66:	d1e0      	bne.n	8006e2a <_free_r+0x26>
 8006e68:	681c      	ldr	r4, [r3, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	6053      	str	r3, [r2, #4]
 8006e6e:	4421      	add	r1, r4
 8006e70:	6011      	str	r1, [r2, #0]
 8006e72:	e7da      	b.n	8006e2a <_free_r+0x26>
 8006e74:	d902      	bls.n	8006e7c <_free_r+0x78>
 8006e76:	230c      	movs	r3, #12
 8006e78:	6003      	str	r3, [r0, #0]
 8006e7a:	e7d6      	b.n	8006e2a <_free_r+0x26>
 8006e7c:	6825      	ldr	r5, [r4, #0]
 8006e7e:	1961      	adds	r1, r4, r5
 8006e80:	428b      	cmp	r3, r1
 8006e82:	bf04      	itt	eq
 8006e84:	6819      	ldreq	r1, [r3, #0]
 8006e86:	685b      	ldreq	r3, [r3, #4]
 8006e88:	6063      	str	r3, [r4, #4]
 8006e8a:	bf04      	itt	eq
 8006e8c:	1949      	addeq	r1, r1, r5
 8006e8e:	6021      	streq	r1, [r4, #0]
 8006e90:	6054      	str	r4, [r2, #4]
 8006e92:	e7ca      	b.n	8006e2a <_free_r+0x26>
 8006e94:	b003      	add	sp, #12
 8006e96:	bd30      	pop	{r4, r5, pc}
 8006e98:	2000508c 	.word	0x2000508c

08006e9c <cleanup_glue>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	460c      	mov	r4, r1
 8006ea0:	6809      	ldr	r1, [r1, #0]
 8006ea2:	4605      	mov	r5, r0
 8006ea4:	b109      	cbz	r1, 8006eaa <cleanup_glue+0xe>
 8006ea6:	f7ff fff9 	bl	8006e9c <cleanup_glue>
 8006eaa:	4621      	mov	r1, r4
 8006eac:	4628      	mov	r0, r5
 8006eae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006eb2:	f7ff bfa7 	b.w	8006e04 <_free_r>
	...

08006eb8 <_reclaim_reent>:
 8006eb8:	4b2c      	ldr	r3, [pc, #176]	; (8006f6c <_reclaim_reent+0xb4>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4283      	cmp	r3, r0
 8006ebe:	b570      	push	{r4, r5, r6, lr}
 8006ec0:	4604      	mov	r4, r0
 8006ec2:	d051      	beq.n	8006f68 <_reclaim_reent+0xb0>
 8006ec4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006ec6:	b143      	cbz	r3, 8006eda <_reclaim_reent+0x22>
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d14a      	bne.n	8006f64 <_reclaim_reent+0xac>
 8006ece:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ed0:	6819      	ldr	r1, [r3, #0]
 8006ed2:	b111      	cbz	r1, 8006eda <_reclaim_reent+0x22>
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f7ff ff95 	bl	8006e04 <_free_r>
 8006eda:	6961      	ldr	r1, [r4, #20]
 8006edc:	b111      	cbz	r1, 8006ee4 <_reclaim_reent+0x2c>
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f7ff ff90 	bl	8006e04 <_free_r>
 8006ee4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006ee6:	b111      	cbz	r1, 8006eee <_reclaim_reent+0x36>
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f7ff ff8b 	bl	8006e04 <_free_r>
 8006eee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006ef0:	b111      	cbz	r1, 8006ef8 <_reclaim_reent+0x40>
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f7ff ff86 	bl	8006e04 <_free_r>
 8006ef8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006efa:	b111      	cbz	r1, 8006f02 <_reclaim_reent+0x4a>
 8006efc:	4620      	mov	r0, r4
 8006efe:	f7ff ff81 	bl	8006e04 <_free_r>
 8006f02:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006f04:	b111      	cbz	r1, 8006f0c <_reclaim_reent+0x54>
 8006f06:	4620      	mov	r0, r4
 8006f08:	f7ff ff7c 	bl	8006e04 <_free_r>
 8006f0c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006f0e:	b111      	cbz	r1, 8006f16 <_reclaim_reent+0x5e>
 8006f10:	4620      	mov	r0, r4
 8006f12:	f7ff ff77 	bl	8006e04 <_free_r>
 8006f16:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006f18:	b111      	cbz	r1, 8006f20 <_reclaim_reent+0x68>
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f7ff ff72 	bl	8006e04 <_free_r>
 8006f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f22:	b111      	cbz	r1, 8006f2a <_reclaim_reent+0x72>
 8006f24:	4620      	mov	r0, r4
 8006f26:	f7ff ff6d 	bl	8006e04 <_free_r>
 8006f2a:	69a3      	ldr	r3, [r4, #24]
 8006f2c:	b1e3      	cbz	r3, 8006f68 <_reclaim_reent+0xb0>
 8006f2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006f30:	4620      	mov	r0, r4
 8006f32:	4798      	blx	r3
 8006f34:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006f36:	b1b9      	cbz	r1, 8006f68 <_reclaim_reent+0xb0>
 8006f38:	4620      	mov	r0, r4
 8006f3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006f3e:	f7ff bfad 	b.w	8006e9c <cleanup_glue>
 8006f42:	5949      	ldr	r1, [r1, r5]
 8006f44:	b941      	cbnz	r1, 8006f58 <_reclaim_reent+0xa0>
 8006f46:	3504      	adds	r5, #4
 8006f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f4a:	2d80      	cmp	r5, #128	; 0x80
 8006f4c:	68d9      	ldr	r1, [r3, #12]
 8006f4e:	d1f8      	bne.n	8006f42 <_reclaim_reent+0x8a>
 8006f50:	4620      	mov	r0, r4
 8006f52:	f7ff ff57 	bl	8006e04 <_free_r>
 8006f56:	e7ba      	b.n	8006ece <_reclaim_reent+0x16>
 8006f58:	680e      	ldr	r6, [r1, #0]
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f7ff ff52 	bl	8006e04 <_free_r>
 8006f60:	4631      	mov	r1, r6
 8006f62:	e7ef      	b.n	8006f44 <_reclaim_reent+0x8c>
 8006f64:	2500      	movs	r5, #0
 8006f66:	e7ef      	b.n	8006f48 <_reclaim_reent+0x90>
 8006f68:	bd70      	pop	{r4, r5, r6, pc}
 8006f6a:	bf00      	nop
 8006f6c:	20000044 	.word	0x20000044

08006f70 <__malloc_lock>:
 8006f70:	4801      	ldr	r0, [pc, #4]	; (8006f78 <__malloc_lock+0x8>)
 8006f72:	f7ff bf2f 	b.w	8006dd4 <__retarget_lock_acquire_recursive>
 8006f76:	bf00      	nop
 8006f78:	20005088 	.word	0x20005088

08006f7c <__malloc_unlock>:
 8006f7c:	4801      	ldr	r0, [pc, #4]	; (8006f84 <__malloc_unlock+0x8>)
 8006f7e:	f7ff bf2a 	b.w	8006dd6 <__retarget_lock_release_recursive>
 8006f82:	bf00      	nop
 8006f84:	20005088 	.word	0x20005088

08006f88 <_init>:
 8006f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8a:	bf00      	nop
 8006f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f8e:	bc08      	pop	{r3}
 8006f90:	469e      	mov	lr, r3
 8006f92:	4770      	bx	lr

08006f94 <_fini>:
 8006f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f96:	bf00      	nop
 8006f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f9a:	bc08      	pop	{r3}
 8006f9c:	469e      	mov	lr, r3
 8006f9e:	4770      	bx	lr
