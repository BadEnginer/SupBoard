
SUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f1c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010ec  0800f360  0800f360  0001f360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801044c  0801044c  00030198  2**0
                  CONTENTS
  4 .ARM          00000008  0801044c  0801044c  0002044c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010454  08010454  00030198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010454  08010454  00020454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010458  08010458  00020458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  0801045c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000064b4  20000198  080105f4  00030198  2**2
                  ALLOC
 10 ._user_heap_stack 00008004  2000664c  080105f4  0003664c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a6a0  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006124  00000000  00000000  0005a868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002248  00000000  00000000  00060990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fb0  00000000  00000000  00062bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fe76  00000000  00000000  00064b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c523  00000000  00000000  000849fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a134b  00000000  00000000  000b0f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015226c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009308  00000000  00000000  001522bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000198 	.word	0x20000198
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f348 	.word	0x0800f348

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000019c 	.word	0x2000019c
 80001dc:	0800f348 	.word	0x0800f348

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <ADS1115_init>:
	ADS1115_Config_t 	config;
};

//static void prepareConfigFrame(uint8_t *pOutFrame, ADS1115_Config_t config);

ADS1115_Handle_t* ADS1115_init(I2C_HandleTypeDef *hi2c, uint16_t Addr, ADS1115_Config_t config){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	4608      	mov	r0, r1
 80004ee:	4639      	mov	r1, r7
 80004f0:	e881 000c 	stmia.w	r1, {r2, r3}
 80004f4:	4603      	mov	r3, r0
 80004f6:	817b      	strh	r3, [r7, #10]
	ADS1115_Handle_t *pConfig = malloc(sizeof(ADS1115_Handle_t));
 80004f8:	2010      	movs	r0, #16
 80004fa:	f00e fd5f 	bl	800efbc <malloc>
 80004fe:	4603      	mov	r3, r0
 8000500:	617b      	str	r3, [r7, #20]
	pConfig->hi2c = hi2c;
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	68fa      	ldr	r2, [r7, #12]
 8000506:	601a      	str	r2, [r3, #0]
	pConfig->address = Addr;
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	897a      	ldrh	r2, [r7, #10]
 800050c:	809a      	strh	r2, [r3, #4]
	pConfig->config = config;
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	1d9a      	adds	r2, r3, #6
 8000512:	463b      	mov	r3, r7
 8000514:	cb03      	ldmia	r3!, {r0, r1}
 8000516:	6010      	str	r0, [r2, #0]
 8000518:	6051      	str	r1, [r2, #4]
	return pConfig;
 800051a:	697b      	ldr	r3, [r7, #20]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3718      	adds	r7, #24
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <ADS1115_updateConfig>:

void ADS1115_deinit(ADS1115_Handle_t* pConfig){
	free(pConfig);
}

void ADS1115_updateConfig(ADS1115_Handle_t *pConfig, ADS1115_Config_t config){
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af02      	add	r7, sp, #8
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	e883 0006 	stmia.w	r3, {r1, r2}
	pConfig->config = config;
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	1d9a      	adds	r2, r3, #6
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	cb03      	ldmia	r3!, {r0, r1}
 800053a:	6010      	str	r0, [r2, #0]
 800053c:	6051      	str	r1, [r2, #4]

	uint8_t bytes[3] = {0};
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <ADS1115_updateConfig+0x60>)
 8000540:	881b      	ldrh	r3, [r3, #0]
 8000542:	82bb      	strh	r3, [r7, #20]
 8000544:	2300      	movs	r3, #0
 8000546:	75bb      	strb	r3, [r7, #22]
	prepareConfigFrame(bytes, pConfig->config);
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	f107 0014 	add.w	r0, r7, #20
 800054e:	f8d3 1006 	ldr.w	r1, [r3, #6]
 8000552:	460a      	mov	r2, r1
 8000554:	f8d3 100a 	ldr.w	r1, [r3, #10]
 8000558:	460b      	mov	r3, r1
 800055a:	4611      	mov	r1, r2
 800055c:	461a      	mov	r2, r3
 800055e:	f000 f875 	bl	800064c <prepareConfigFrame>

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	6818      	ldr	r0, [r3, #0]
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	889b      	ldrh	r3, [r3, #4]
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	b299      	uxth	r1, r3
 800056e:	f107 0214 	add.w	r2, r7, #20
 8000572:	2364      	movs	r3, #100	; 0x64
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2303      	movs	r3, #3
 8000578:	f002 ff2a 	bl	80033d0 <HAL_I2C_Master_Transmit>
}
 800057c:	bf00      	nop
 800057e:	3718      	adds	r7, #24
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	0800f360 	.word	0x0800f360

08000588 <ADS1115_getData>:
	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);

	return ADS1115_getData(pConfig);
}

int16_t ADS1115_getData(ADS1115_Handle_t *pConfig){
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af02      	add	r7, sp, #8
 800058e:	6078      	str	r0, [r7, #4]
	uint8_t bytes[2] = {0};
 8000590:	2300      	movs	r3, #0
 8000592:	81bb      	strh	r3, [r7, #12]
	bytes[0] = 0x00;
 8000594:	2300      	movs	r3, #0
 8000596:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 1, 50);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	6818      	ldr	r0, [r3, #0]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	889b      	ldrh	r3, [r3, #4]
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	b299      	uxth	r1, r3
 80005a4:	f107 020c 	add.w	r2, r7, #12
 80005a8:	2332      	movs	r3, #50	; 0x32
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2301      	movs	r3, #1
 80005ae:	f002 ff0f 	bl	80033d0 <HAL_I2C_Master_Transmit>

	if(HAL_I2C_Master_Receive(pConfig->hi2c, (pConfig->address << 1), bytes, 2, 50) != HAL_OK)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6818      	ldr	r0, [r3, #0]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	889b      	ldrh	r3, [r3, #4]
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	b299      	uxth	r1, r3
 80005be:	f107 020c 	add.w	r2, r7, #12
 80005c2:	2332      	movs	r3, #50	; 0x32
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2302      	movs	r3, #2
 80005c8:	f003 f800 	bl	80035cc <HAL_I2C_Master_Receive>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <ADS1115_getData+0x4e>
		return 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	e008      	b.n	80005e8 <ADS1115_getData+0x60>

	int16_t readValue = ((bytes[0] << 8) | bytes[1]);
 80005d6:	7b3b      	ldrb	r3, [r7, #12]
 80005d8:	021b      	lsls	r3, r3, #8
 80005da:	b21a      	sxth	r2, r3
 80005dc:	7b7b      	ldrb	r3, [r7, #13]
 80005de:	b21b      	sxth	r3, r3
 80005e0:	4313      	orrs	r3, r2
 80005e2:	81fb      	strh	r3, [r7, #14]

	return readValue;
 80005e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <ADS1115_startContinousMode>:

void ADS1115_setConversionReadyPin(ADS1115_Handle_t* pConfig){
	ADS1115_setThresholds(pConfig, 0x0000, 0xFFFF);
}

void ADS1115_startContinousMode(ADS1115_Handle_t* pConfig){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af02      	add	r7, sp, #8
 80005f6:	6078      	str	r0, [r7, #4]
	uint8_t bytes[3] = {0};
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <ADS1115_startContinousMode+0x58>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	82bb      	strh	r3, [r7, #20]
 80005fe:	2300      	movs	r3, #0
 8000600:	75bb      	strb	r3, [r7, #22]

	ADS1115_Config_t configReg = pConfig->config;
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	3206      	adds	r2, #6
 800060a:	6810      	ldr	r0, [r2, #0]
 800060c:	6851      	ldr	r1, [r2, #4]
 800060e:	c303      	stmia	r3!, {r0, r1}
	configReg.operatingMode = MODE_CONTINOUS;
 8000610:	2300      	movs	r3, #0
 8000612:	73bb      	strb	r3, [r7, #14]
	prepareConfigFrame(bytes, configReg);
 8000614:	f107 0014 	add.w	r0, r7, #20
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000620:	f000 f814 	bl	800064c <prepareConfigFrame>

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	6818      	ldr	r0, [r3, #0]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	889b      	ldrh	r3, [r3, #4]
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	b299      	uxth	r1, r3
 8000630:	f107 0214 	add.w	r2, r7, #20
 8000634:	2364      	movs	r3, #100	; 0x64
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2303      	movs	r3, #3
 800063a:	f002 fec9 	bl	80033d0 <HAL_I2C_Master_Transmit>
}
 800063e:	bf00      	nop
 8000640:	3718      	adds	r7, #24
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	0800f360 	.word	0x0800f360

0800064c <prepareConfigFrame>:
	prepareConfigFrame(bytes, configReg);

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
}

void prepareConfigFrame(uint8_t *pOutFrame, ADS1115_Config_t config){
 800064c:	b480      	push	{r7}
 800064e:	b087      	sub	sp, #28
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t temp[3] = {0};
 800065a:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <prepareConfigFrame+0xac>)
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	82bb      	strh	r3, [r7, #20]
 8000660:	2300      	movs	r3, #0
 8000662:	75bb      	strb	r3, [r7, #22]
	pOutFrame[0] = 0x01;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
	pOutFrame[1] |= (config.channel << 4) | (config.pgaConfig << 1)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	3301      	adds	r3, #1
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b25a      	sxtb	r2, r3
 8000672:	793b      	ldrb	r3, [r7, #4]
 8000674:	011b      	lsls	r3, r3, #4
 8000676:	b259      	sxtb	r1, r3
 8000678:	797b      	ldrb	r3, [r7, #5]
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	b25b      	sxtb	r3, r3
 800067e:	430b      	orrs	r3, r1
 8000680:	b259      	sxtb	r1, r3
					| (config.operatingMode << 0);
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	b25b      	sxtb	r3, r3
 8000686:	430b      	orrs	r3, r1
 8000688:	b25b      	sxtb	r3, r3
	pOutFrame[1] |= (config.channel << 4) | (config.pgaConfig << 1)
 800068a:	4313      	orrs	r3, r2
 800068c:	b25a      	sxtb	r2, r3
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	3301      	adds	r3, #1
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	701a      	strb	r2, [r3, #0]
	pOutFrame[2] |= (config.dataRate << 5) | (config.compareMode << 4) | (config.polarityMode << 3)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	3302      	adds	r3, #2
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b25a      	sxtb	r2, r3
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	015b      	lsls	r3, r3, #5
 80006a2:	b259      	sxtb	r1, r3
 80006a4:	7a3b      	ldrb	r3, [r7, #8]
 80006a6:	011b      	lsls	r3, r3, #4
 80006a8:	b25b      	sxtb	r3, r3
 80006aa:	430b      	orrs	r3, r1
 80006ac:	b259      	sxtb	r1, r3
 80006ae:	7a7b      	ldrb	r3, [r7, #9]
 80006b0:	00db      	lsls	r3, r3, #3
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	430b      	orrs	r3, r1
 80006b6:	b259      	sxtb	r1, r3
					| (config.latchingMode << 2) | (config.queueComparator << 1);
 80006b8:	7abb      	ldrb	r3, [r7, #10]
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	b25b      	sxtb	r3, r3
 80006be:	430b      	orrs	r3, r1
 80006c0:	b259      	sxtb	r1, r3
 80006c2:	7afb      	ldrb	r3, [r7, #11]
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	b25b      	sxtb	r3, r3
 80006c8:	430b      	orrs	r3, r1
 80006ca:	b25b      	sxtb	r3, r3
	pOutFrame[2] |= (config.dataRate << 5) | (config.compareMode << 4) | (config.polarityMode << 3)
 80006cc:	4313      	orrs	r3, r2
 80006ce:	b25a      	sxtb	r2, r3
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	3302      	adds	r3, #2
 80006d4:	b2d2      	uxtb	r2, r2
 80006d6:	701a      	strb	r2, [r3, #0]
	temp[0] = pOutFrame[0];
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	753b      	strb	r3, [r7, #20]
	temp[1] = pOutFrame[1];
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	785b      	ldrb	r3, [r3, #1]
 80006e2:	757b      	strb	r3, [r7, #21]
	temp[2] = pOutFrame[2];
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	75bb      	strb	r3, [r7, #22]
}
 80006ea:	bf00      	nop
 80006ec:	371c      	adds	r7, #28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	0800f360 	.word	0x0800f360

080006fc <MCP4725_init>:

    Constructor
*/
/**************************************************************************/ 
MCP4725 MCP4725_init(I2C_HandleTypeDef* hi2c, MCP4725Ax_ADDRESS addr, float refV)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b089      	sub	sp, #36	; 0x24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	4613      	mov	r3, r2
 8000708:	ed87 0a00 	vstr	s0, [r7]
 800070c:	71fb      	strb	r3, [r7, #7]
	MCP4725 _MCP4725;

	_MCP4725._i2cAddress = (uint16_t)(addr<<1);
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	b2db      	uxtb	r3, r3
 8000714:	753b      	strb	r3, [r7, #20]
	_MCP4725.hi2c = hi2c;
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	613b      	str	r3, [r7, #16]

	MCP4725_setReferenceVoltage(&_MCP4725, refV); //set _refVoltage & _bitsPerVolt variables
 800071a:	f107 0310 	add.w	r3, r7, #16
 800071e:	ed97 0a00 	vldr	s0, [r7]
 8000722:	4618      	mov	r0, r3
 8000724:	f000 f80c 	bl	8000740 <MCP4725_setReferenceVoltage>

	return _MCP4725;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	461c      	mov	r4, r3
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000732:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000736:	68f8      	ldr	r0, [r7, #12]
 8000738:	3724      	adds	r7, #36	; 0x24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd90      	pop	{r4, r7, pc}
	...

08000740 <MCP4725_setReferenceVoltage>:

    Set reference voltage
*/
/**************************************************************************/
void MCP4725_setReferenceVoltage(MCP4725* _MCP4725, float value)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	ed87 0a00 	vstr	s0, [r7]
   if   (value == 0) _MCP4725->_refVoltage = MCP4725_REFERENCE_VOLTAGE; //sanity check, avoid division by zero
 800074c:	edd7 7a00 	vldr	s15, [r7]
 8000750:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000758:	d103      	bne.n	8000762 <MCP4725_setReferenceVoltage+0x22>
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4a0c      	ldr	r2, [pc, #48]	; (8000790 <MCP4725_setReferenceVoltage+0x50>)
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	e002      	b.n	8000768 <MCP4725_setReferenceVoltage+0x28>
   else              _MCP4725->_refVoltage = value;    
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	683a      	ldr	r2, [r7, #0]
 8000766:	609a      	str	r2, [r3, #8]

   _MCP4725->_bitsPerVolt = (float)MCP4725_STEPS / _MCP4725->_refVoltage;         //TODO: check accuracy with +0.5
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	ed93 7a02 	vldr	s14, [r3, #8]
 800076e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000794 <MCP4725_setReferenceVoltage+0x54>
 8000772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800077a:	ee17 3a90 	vmov	r3, s15
 800077e:	b29a      	uxth	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	819a      	strh	r2, [r3, #12]
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	40533333 	.word	0x40533333
 8000794:	45800000 	.word	0x45800000

08000798 <MCP4725_setValue>:
      - "MCP4725_POWER_DOWN_100KOHM"..power down on with 100 kOhm to ground
      - "MCP4725_POWER_DOWN_500KOHM"..power down on with 500kOhm to ground
*/
/**************************************************************************/ 
uint8_t MCP4725_setValue(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	4608      	mov	r0, r1
 80007a2:	4611      	mov	r1, r2
 80007a4:	461a      	mov	r2, r3
 80007a6:	4603      	mov	r3, r0
 80007a8:	807b      	strh	r3, [r7, #2]
 80007aa:	460b      	mov	r3, r1
 80007ac:	707b      	strb	r3, [r7, #1]
 80007ae:	4613      	mov	r3, r2
 80007b0:	703b      	strb	r3, [r7, #0]
  #ifndef MCP4725_DISABLE_SANITY_CHECK
  if (value > MCP4725_MAX_VALUE) value = MCP4725_MAX_VALUE; //make sure value never exceeds threshold
  #endif

  return MCP4725_writeComand(_MCP4725, value, mode, powerType);
 80007b2:	783b      	ldrb	r3, [r7, #0]
 80007b4:	787a      	ldrb	r2, [r7, #1]
 80007b6:	8879      	ldrh	r1, [r7, #2]
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f000 f822 	bl	8000802 <MCP4725_writeComand>
 80007be:	4603      	mov	r3, r0
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <MCP4725_getEepromBusyFlag>:
      is ignored
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint8_t MCP4725_getEepromBusyFlag(MCP4725* _MCP4725)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint16_t value = MCP4725_readRegister(_MCP4725, MCP4725_READ_SETTINGS); //BSY,POR,xx,xx,xx,PD1,PD0,xx
 80007d0:	2101      	movs	r1, #1
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f000 f895 	bl	8000902 <MCP4725_readRegister>
 80007d8:	4603      	mov	r3, r0
 80007da:	81fb      	strh	r3, [r7, #14]

  if (value != MCP4725_ERROR) return (value & 0x80)==0x80;		//1 - completed, 0 - incompleted
 80007dc:	89fb      	ldrh	r3, [r7, #14]
 80007de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d008      	beq.n	80007f8 <MCP4725_getEepromBusyFlag+0x30>
 80007e6:	89fb      	ldrh	r3, [r7, #14]
 80007e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	bf14      	ite	ne
 80007f0:	2301      	movne	r3, #1
 80007f2:	2300      	moveq	r3, #0
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	e000      	b.n	80007fa <MCP4725_getEepromBusyFlag+0x32>
                              return 0;										//collision on i2c bus
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <MCP4725_writeComand>:
    - "MCP4725_POWER_DOWN_500KOHM"
      1,  1
*/
/**************************************************************************/ 
uint8_t	MCP4725_writeComand(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b086      	sub	sp, #24
 8000806:	af02      	add	r7, sp, #8
 8000808:	6078      	str	r0, [r7, #4]
 800080a:	4608      	mov	r0, r1
 800080c:	4611      	mov	r1, r2
 800080e:	461a      	mov	r2, r3
 8000810:	4603      	mov	r3, r0
 8000812:	807b      	strh	r3, [r7, #2]
 8000814:	460b      	mov	r3, r1
 8000816:	707b      	strb	r3, [r7, #1]
 8000818:	4613      	mov	r3, r2
 800081a:	703b      	strb	r3, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef I2C_Stat;
  //Wire.beginTransmission(_i2cAddress);

  switch (mode)
 800081c:	787b      	ldrb	r3, [r7, #1]
 800081e:	2b60      	cmp	r3, #96	; 0x60
 8000820:	d028      	beq.n	8000874 <MCP4725_writeComand+0x72>
 8000822:	2b60      	cmp	r3, #96	; 0x60
 8000824:	dc4a      	bgt.n	80008bc <MCP4725_writeComand+0xba>
 8000826:	2b00      	cmp	r3, #0
 8000828:	d002      	beq.n	8000830 <MCP4725_writeComand+0x2e>
 800082a:	2b40      	cmp	r3, #64	; 0x40
 800082c:	d022      	beq.n	8000874 <MCP4725_writeComand+0x72>
 800082e:	e045      	b.n	80008bc <MCP4725_writeComand+0xba>
    case MCP4725_FAST_MODE:                                            //see MCP4725 datasheet on p.18
		
      //Wire.send(mode | (powerType << 4)  | highByte(value));
      //Wire.send(lowByte(value));
		
			buffer[0] = mode | (powerType << 4)  | highByte(value);
 8000830:	783b      	ldrb	r3, [r7, #0]
 8000832:	011b      	lsls	r3, r3, #4
 8000834:	b25a      	sxtb	r2, r3
 8000836:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800083a:	4313      	orrs	r3, r2
 800083c:	b25a      	sxtb	r2, r3
 800083e:	887b      	ldrh	r3, [r7, #2]
 8000840:	0a1b      	lsrs	r3, r3, #8
 8000842:	b29b      	uxth	r3, r3
 8000844:	b25b      	sxtb	r3, r3
 8000846:	4313      	orrs	r3, r2
 8000848:	b25b      	sxtb	r3, r3
 800084a:	b2db      	uxtb	r3, r3
 800084c:	733b      	strb	r3, [r7, #12]
			buffer[1] = lowByte(value);
 800084e:	887b      	ldrh	r3, [r7, #2]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	737b      	strb	r3, [r7, #13]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 2, 1000);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6818      	ldr	r0, [r3, #0]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	791b      	ldrb	r3, [r3, #4]
 800085c:	b299      	uxth	r1, r3
 800085e:	f107 020c 	add.w	r2, r7, #12
 8000862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2302      	movs	r3, #2
 800086a:	f002 fdb1 	bl	80033d0 <HAL_I2C_Master_Transmit>
 800086e:	4603      	mov	r3, r0
 8000870:	73fb      	strb	r3, [r7, #15]
		
      break;
 8000872:	e023      	b.n	80008bc <MCP4725_writeComand+0xba>

    case MCP4725_REGISTER_MODE: case MCP4725_EEPROM_MODE:              //see MCP4725 datasheet on p.19
      value = value << 4;                                              //D11,D10,D9,D8,D7,D6,D5,D4,  D3,D2,D1,D0,xx,xx,xx,xx
 8000874:	887b      	ldrh	r3, [r7, #2]
 8000876:	011b      	lsls	r3, r3, #4
 8000878:	807b      	strh	r3, [r7, #2]
      //Wire.send(mode  | (powerType << 1));
      //Wire.send(highByte(value));
      //Wire.send(lowByte(value));
      
			buffer[0] = mode  | (powerType << 1);
 800087a:	783b      	ldrb	r3, [r7, #0]
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	b25a      	sxtb	r2, r3
 8000880:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000884:	4313      	orrs	r3, r2
 8000886:	b25b      	sxtb	r3, r3
 8000888:	b2db      	uxtb	r3, r3
 800088a:	733b      	strb	r3, [r7, #12]
			buffer[1] = highByte(value);
 800088c:	887b      	ldrh	r3, [r7, #2]
 800088e:	0a1b      	lsrs	r3, r3, #8
 8000890:	b29b      	uxth	r3, r3
 8000892:	b2db      	uxtb	r3, r3
 8000894:	737b      	strb	r3, [r7, #13]
			buffer[2] = lowByte(value);
 8000896:	887b      	ldrh	r3, [r7, #2]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	73bb      	strb	r3, [r7, #14]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 3, 1000);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6818      	ldr	r0, [r3, #0]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	791b      	ldrb	r3, [r3, #4]
 80008a4:	b299      	uxth	r1, r3
 80008a6:	f107 020c 	add.w	r2, r7, #12
 80008aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	2303      	movs	r3, #3
 80008b2:	f002 fd8d 	bl	80033d0 <HAL_I2C_Master_Transmit>
 80008b6:	4603      	mov	r3, r0
 80008b8:	73fb      	strb	r3, [r7, #15]
		
			break;
 80008ba:	bf00      	nop
  }

  if (I2C_Stat != HAL_OK) return 0;                   //send data over i2c & check for collision on i2c bus
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MCP4725_writeComand+0xc4>
 80008c2:	2300      	movs	r3, #0
 80008c4:	e019      	b.n	80008fa <MCP4725_writeComand+0xf8>

  if (mode == MCP4725_EEPROM_MODE)
 80008c6:	787b      	ldrb	r3, [r7, #1]
 80008c8:	2b60      	cmp	r3, #96	; 0x60
 80008ca:	d115      	bne.n	80008f8 <MCP4725_writeComand+0xf6>
  {
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff7b 	bl	80007c8 <MCP4725_getEepromBusyFlag>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d101      	bne.n	80008dc <MCP4725_writeComand+0xda>
 80008d8:	2301      	movs	r3, #1
 80008da:	e00e      	b.n	80008fa <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //typical EEPROM write time 25 msec
 80008dc:	2019      	movs	r0, #25
 80008de:	f001 fe75 	bl	80025cc <HAL_Delay>
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff ff70 	bl	80007c8 <MCP4725_getEepromBusyFlag>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d101      	bne.n	80008f2 <MCP4725_writeComand+0xf0>
 80008ee:	2301      	movs	r3, #1
 80008f0:	e003      	b.n	80008fa <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //maximum EEPROM write time 25 + 25 = 50 msec
 80008f2:	2019      	movs	r0, #25
 80008f4:	f001 fe6a 	bl	80025cc <HAL_Delay>
  }

  return 1;                                                         //success!!!
 80008f8:	2301      	movs	r3, #1
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <MCP4725_readRegister>:
      ------ Settings data ------  ---------------- DAC register data ---------------  ------------------- EEPROM data --------------------
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint16_t MCP4725_readRegister(MCP4725* _MCP4725, MCP4725_READ_TYPE dataType)
{
 8000902:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000906:	b089      	sub	sp, #36	; 0x24
 8000908:	af02      	add	r7, sp, #8
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	70fb      	strb	r3, [r7, #3]
 8000910:	466b      	mov	r3, sp
 8000912:	461e      	mov	r6, r3
  uint16_t value = dataType;                             //convert enum to integer to avoid compiler warnings                                    
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	82bb      	strh	r3, [r7, #20]
	uint16_t ret_val = 0 ;
 8000918:	2300      	movs	r3, #0
 800091a:	82fb      	strh	r3, [r7, #22]
	uint8_t buffer[dataType];
 800091c:	78f9      	ldrb	r1, [r7, #3]
 800091e:	460b      	mov	r3, r1
 8000920:	3b01      	subs	r3, #1
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	b2cb      	uxtb	r3, r1
 8000926:	2200      	movs	r2, #0
 8000928:	4698      	mov	r8, r3
 800092a:	4691      	mov	r9, r2
 800092c:	f04f 0200 	mov.w	r2, #0
 8000930:	f04f 0300 	mov.w	r3, #0
 8000934:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000938:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800093c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000940:	b2cb      	uxtb	r3, r1
 8000942:	2200      	movs	r2, #0
 8000944:	461c      	mov	r4, r3
 8000946:	4615      	mov	r5, r2
 8000948:	f04f 0200 	mov.w	r2, #0
 800094c:	f04f 0300 	mov.w	r3, #0
 8000950:	00eb      	lsls	r3, r5, #3
 8000952:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000956:	00e2      	lsls	r2, r4, #3
 8000958:	460b      	mov	r3, r1
 800095a:	3307      	adds	r3, #7
 800095c:	08db      	lsrs	r3, r3, #3
 800095e:	00db      	lsls	r3, r3, #3
 8000960:	ebad 0d03 	sub.w	sp, sp, r3
 8000964:	ab02      	add	r3, sp, #8
 8000966:	3300      	adds	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef I2C_Stat;
	
	I2C_Stat = HAL_I2C_Master_Receive(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, dataType, 1000);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6818      	ldr	r0, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	791b      	ldrb	r3, [r3, #4]
 8000972:	b299      	uxth	r1, r3
 8000974:	78fb      	ldrb	r3, [r7, #3]
 8000976:	b29b      	uxth	r3, r3
 8000978:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800097c:	9200      	str	r2, [sp, #0]
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	f002 fe24 	bl	80035cc <HAL_I2C_Master_Receive>
 8000984:	4603      	mov	r3, r0
 8000986:	72fb      	strb	r3, [r7, #11]

  if (I2C_Stat != HAL_OK) return MCP4725_ERROR;
 8000988:	7afb      	ldrb	r3, [r7, #11]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d002      	beq.n	8000994 <MCP4725_readRegister+0x92>
 800098e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000992:	e01f      	b.n	80009d4 <MCP4725_readRegister+0xd2>


  /* read data from buffer */
  switch (dataType)
 8000994:	78fb      	ldrb	r3, [r7, #3]
 8000996:	2b05      	cmp	r3, #5
 8000998:	d00a      	beq.n	80009b0 <MCP4725_readRegister+0xae>
 800099a:	2b05      	cmp	r3, #5
 800099c:	dc19      	bgt.n	80009d2 <MCP4725_readRegister+0xd0>
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d002      	beq.n	80009a8 <MCP4725_readRegister+0xa6>
 80009a2:	2b03      	cmp	r3, #3
 80009a4:	d004      	beq.n	80009b0 <MCP4725_readRegister+0xae>
 80009a6:	e014      	b.n	80009d2 <MCP4725_readRegister+0xd0>
  {
    case MCP4725_READ_SETTINGS:
      ret_val = buffer[0];
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	82fb      	strh	r3, [r7, #22]

      break;
 80009ae:	e010      	b.n	80009d2 <MCP4725_readRegister+0xd0>

    case MCP4725_READ_DAC_REG: case MCP4725_READ_EEPROM:

      ret_val = buffer[value-2];
 80009b0:	8abb      	ldrh	r3, [r7, #20]
 80009b2:	3b02      	subs	r3, #2
 80009b4:	68fa      	ldr	r2, [r7, #12]
 80009b6:	5cd3      	ldrb	r3, [r2, r3]
 80009b8:	82fb      	strh	r3, [r7, #22]
      ret_val = (ret_val << 8) | buffer[value-1];
 80009ba:	8afb      	ldrh	r3, [r7, #22]
 80009bc:	021b      	lsls	r3, r3, #8
 80009be:	b21a      	sxth	r2, r3
 80009c0:	8abb      	ldrh	r3, [r7, #20]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	68f9      	ldr	r1, [r7, #12]
 80009c6:	5ccb      	ldrb	r3, [r1, r3]
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	4313      	orrs	r3, r2
 80009cc:	b21b      	sxth	r3, r3
 80009ce:	82fb      	strh	r3, [r7, #22]
      break;
 80009d0:	bf00      	nop
  }

  return ret_val;
 80009d2:	8afb      	ldrh	r3, [r7, #22]
 80009d4:	46b5      	mov	sp, r6
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	371c      	adds	r7, #28
 80009da:	46bd      	mov	sp, r7
 80009dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080009e0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af04      	add	r7, sp, #16
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
 80009fe:	9302      	str	r3, [sp, #8]
 8000a00:	2301      	movs	r3, #1
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	1dfb      	adds	r3, r7, #7
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	2301      	movs	r3, #1
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2178      	movs	r1, #120	; 0x78
 8000a0e:	4803      	ldr	r0, [pc, #12]	; (8000a1c <ssd1306_WriteCommand+0x2c>)
 8000a10:	f003 f802 	bl	8003a18 <HAL_I2C_Mem_Write>
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200005dc 	.word	0x200005dc

08000a20 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af04      	add	r7, sp, #16
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a32:	9202      	str	r2, [sp, #8]
 8000a34:	9301      	str	r3, [sp, #4]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	2240      	movs	r2, #64	; 0x40
 8000a3e:	2178      	movs	r1, #120	; 0x78
 8000a40:	4803      	ldr	r0, [pc, #12]	; (8000a50 <ssd1306_WriteData+0x30>)
 8000a42:	f002 ffe9 	bl	8003a18 <HAL_I2C_Mem_Write>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200005dc 	.word	0x200005dc

08000a54 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000a58:	f7ff ffc2 	bl	80009e0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000a5c:	2064      	movs	r0, #100	; 0x64
 8000a5e:	f001 fdb5 	bl	80025cc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000a62:	2000      	movs	r0, #0
 8000a64:	f000 fa8a 	bl	8000f7c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000a68:	2020      	movs	r0, #32
 8000a6a:	f7ff ffc1 	bl	80009f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f7ff ffbe 	bl	80009f0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000a74:	20b0      	movs	r0, #176	; 0xb0
 8000a76:	f7ff ffbb 	bl	80009f0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000a7a:	20c8      	movs	r0, #200	; 0xc8
 8000a7c:	f7ff ffb8 	bl	80009f0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000a80:	2000      	movs	r0, #0
 8000a82:	f7ff ffb5 	bl	80009f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000a86:	2010      	movs	r0, #16
 8000a88:	f7ff ffb2 	bl	80009f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000a8c:	2040      	movs	r0, #64	; 0x40
 8000a8e:	f7ff ffaf 	bl	80009f0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000a92:	20ff      	movs	r0, #255	; 0xff
 8000a94:	f000 fa5f 	bl	8000f56 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000a98:	20a1      	movs	r0, #161	; 0xa1
 8000a9a:	f7ff ffa9 	bl	80009f0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000a9e:	20a6      	movs	r0, #166	; 0xa6
 8000aa0:	f7ff ffa6 	bl	80009f0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000aa4:	20a8      	movs	r0, #168	; 0xa8
 8000aa6:	f7ff ffa3 	bl	80009f0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000aaa:	203f      	movs	r0, #63	; 0x3f
 8000aac:	f7ff ffa0 	bl	80009f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ab0:	20a4      	movs	r0, #164	; 0xa4
 8000ab2:	f7ff ff9d 	bl	80009f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000ab6:	20d3      	movs	r0, #211	; 0xd3
 8000ab8:	f7ff ff9a 	bl	80009f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff ff97 	bl	80009f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ac2:	20d5      	movs	r0, #213	; 0xd5
 8000ac4:	f7ff ff94 	bl	80009f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000ac8:	20f0      	movs	r0, #240	; 0xf0
 8000aca:	f7ff ff91 	bl	80009f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000ace:	20d9      	movs	r0, #217	; 0xd9
 8000ad0:	f7ff ff8e 	bl	80009f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000ad4:	2022      	movs	r0, #34	; 0x22
 8000ad6:	f7ff ff8b 	bl	80009f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000ada:	20da      	movs	r0, #218	; 0xda
 8000adc:	f7ff ff88 	bl	80009f0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000ae0:	2012      	movs	r0, #18
 8000ae2:	f7ff ff85 	bl	80009f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000ae6:	20db      	movs	r0, #219	; 0xdb
 8000ae8:	f7ff ff82 	bl	80009f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000aec:	2020      	movs	r0, #32
 8000aee:	f7ff ff7f 	bl	80009f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000af2:	208d      	movs	r0, #141	; 0x8d
 8000af4:	f7ff ff7c 	bl	80009f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000af8:	2014      	movs	r0, #20
 8000afa:	f7ff ff79 	bl	80009f0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000afe:	2001      	movs	r0, #1
 8000b00:	f000 fa3c 	bl	8000f7c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000b04:	2000      	movs	r0, #0
 8000b06:	f000 f80f 	bl	8000b28 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000b0a:	f000 f831 	bl	8000b70 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000b0e:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <ssd1306_Init+0xd0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <ssd1306_Init+0xd0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000b1a:	4b02      	ldr	r3, [pc, #8]	; (8000b24 <ssd1306_Init+0xd0>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	711a      	strb	r2, [r3, #4]
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200005c4 	.word	0x200005c4

08000b28 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	e00d      	b.n	8000b54 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <ssd1306_Fill+0x1a>
 8000b3e:	2100      	movs	r1, #0
 8000b40:	e000      	b.n	8000b44 <ssd1306_Fill+0x1c>
 8000b42:	21ff      	movs	r1, #255	; 0xff
 8000b44:	4a09      	ldr	r2, [pc, #36]	; (8000b6c <ssd1306_Fill+0x44>)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	4413      	add	r3, r2
 8000b4a:	460a      	mov	r2, r1
 8000b4c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	3301      	adds	r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8000b5a:	d3ed      	bcc.n	8000b38 <ssd1306_Fill+0x10>
    }
}
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	200001b4 	.word	0x200001b4

08000b70 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000b76:	2300      	movs	r3, #0
 8000b78:	71fb      	strb	r3, [r7, #7]
 8000b7a:	e01a      	b.n	8000bb2 <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	3b50      	subs	r3, #80	; 0x50
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff ff34 	bl	80009f0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f7ff ff31 	bl	80009f0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000b8e:	2010      	movs	r0, #16
 8000b90:	f7ff ff2e 	bl	80009f0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000b94:	79fa      	ldrb	r2, [r7, #7]
 8000b96:	4613      	mov	r3, r2
 8000b98:	019b      	lsls	r3, r3, #6
 8000b9a:	4413      	add	r3, r2
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <ssd1306_UpdateScreen+0x54>)
 8000ba2:	4413      	add	r3, r2
 8000ba4:	2182      	movs	r1, #130	; 0x82
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff ff3a 	bl	8000a20 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	71fb      	strb	r3, [r7, #7]
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b07      	cmp	r3, #7
 8000bb6:	d9e1      	bls.n	8000b7c <ssd1306_UpdateScreen+0xc>
    }
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200001b4 	.word	0x200001b4

08000bc8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000bc8:	b490      	push	{r4, r7}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	71bb      	strb	r3, [r7, #6]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2b81      	cmp	r3, #129	; 0x81
 8000bde:	d849      	bhi.n	8000c74 <ssd1306_DrawPixel+0xac>
 8000be0:	79bb      	ldrb	r3, [r7, #6]
 8000be2:	2b3f      	cmp	r3, #63	; 0x3f
 8000be4:	d846      	bhi.n	8000c74 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000be6:	797b      	ldrb	r3, [r7, #5]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d120      	bne.n	8000c2e <ssd1306_DrawPixel+0x66>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000bec:	79fa      	ldrb	r2, [r7, #7]
 8000bee:	79bb      	ldrb	r3, [r7, #6]
 8000bf0:	08db      	lsrs	r3, r3, #3
 8000bf2:	b2d8      	uxtb	r0, r3
 8000bf4:	4601      	mov	r1, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	019b      	lsls	r3, r3, #6
 8000bfa:	440b      	add	r3, r1
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a1f      	ldr	r2, [pc, #124]	; (8000c80 <ssd1306_DrawPixel+0xb8>)
 8000c02:	5cd3      	ldrb	r3, [r2, r3]
 8000c04:	b25a      	sxtb	r2, r3
 8000c06:	79bb      	ldrb	r3, [r7, #6]
 8000c08:	f003 0307 	and.w	r3, r3, #7
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	b25b      	sxtb	r3, r3
 8000c14:	4313      	orrs	r3, r2
 8000c16:	b25c      	sxtb	r4, r3
 8000c18:	79fa      	ldrb	r2, [r7, #7]
 8000c1a:	4601      	mov	r1, r0
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	019b      	lsls	r3, r3, #6
 8000c20:	440b      	add	r3, r1
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4413      	add	r3, r2
 8000c26:	b2e1      	uxtb	r1, r4
 8000c28:	4a15      	ldr	r2, [pc, #84]	; (8000c80 <ssd1306_DrawPixel+0xb8>)
 8000c2a:	54d1      	strb	r1, [r2, r3]
 8000c2c:	e023      	b.n	8000c76 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000c2e:	79fa      	ldrb	r2, [r7, #7]
 8000c30:	79bb      	ldrb	r3, [r7, #6]
 8000c32:	08db      	lsrs	r3, r3, #3
 8000c34:	b2d8      	uxtb	r0, r3
 8000c36:	4601      	mov	r1, r0
 8000c38:	460b      	mov	r3, r1
 8000c3a:	019b      	lsls	r3, r3, #6
 8000c3c:	440b      	add	r3, r1
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4413      	add	r3, r2
 8000c42:	4a0f      	ldr	r2, [pc, #60]	; (8000c80 <ssd1306_DrawPixel+0xb8>)
 8000c44:	5cd3      	ldrb	r3, [r2, r3]
 8000c46:	b25a      	sxtb	r2, r3
 8000c48:	79bb      	ldrb	r3, [r7, #6]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	2101      	movs	r1, #1
 8000c50:	fa01 f303 	lsl.w	r3, r1, r3
 8000c54:	b25b      	sxtb	r3, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	b25b      	sxtb	r3, r3
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	b25c      	sxtb	r4, r3
 8000c5e:	79fa      	ldrb	r2, [r7, #7]
 8000c60:	4601      	mov	r1, r0
 8000c62:	460b      	mov	r3, r1
 8000c64:	019b      	lsls	r3, r3, #6
 8000c66:	440b      	add	r3, r1
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	4413      	add	r3, r2
 8000c6c:	b2e1      	uxtb	r1, r4
 8000c6e:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <ssd1306_DrawPixel+0xb8>)
 8000c70:	54d1      	strb	r1, [r2, r3]
 8000c72:	e000      	b.n	8000c76 <ssd1306_DrawPixel+0xae>
        return;
 8000c74:	bf00      	nop
    }
}
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc90      	pop	{r4, r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	200001b4 	.word	0x200001b4

08000c84 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	1d38      	adds	r0, r7, #4
 8000c8e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000c92:	461a      	mov	r2, r3
 8000c94:	4623      	mov	r3, r4
 8000c96:	73fb      	strb	r3, [r7, #15]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b1f      	cmp	r3, #31
 8000ca0:	d902      	bls.n	8000ca8 <ssd1306_WriteChar+0x24>
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	2b7e      	cmp	r3, #126	; 0x7e
 8000ca6:	d901      	bls.n	8000cac <ssd1306_WriteChar+0x28>
        return 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e06d      	b.n	8000d88 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000cac:	4b38      	ldr	r3, [pc, #224]	; (8000d90 <ssd1306_WriteChar+0x10c>)
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	793b      	ldrb	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	2b82      	cmp	r3, #130	; 0x82
 8000cb8:	dc06      	bgt.n	8000cc8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000cba:	4b35      	ldr	r3, [pc, #212]	; (8000d90 <ssd1306_WriteChar+0x10c>)
 8000cbc:	885b      	ldrh	r3, [r3, #2]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	797b      	ldrb	r3, [r7, #5]
 8000cc2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000cc4:	2b40      	cmp	r3, #64	; 0x40
 8000cc6:	dd01      	ble.n	8000ccc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e05d      	b.n	8000d88 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
 8000cd0:	e04c      	b.n	8000d6c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	3b20      	subs	r3, #32
 8000cd8:	7979      	ldrb	r1, [r7, #5]
 8000cda:	fb01 f303 	mul.w	r3, r1, r3
 8000cde:	4619      	mov	r1, r3
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	440b      	add	r3, r1
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	4413      	add	r3, r2
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
 8000cf0:	e034      	b.n	8000d5c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000cf2:	697a      	ldr	r2, [r7, #20]
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d012      	beq.n	8000d28 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000d02:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <ssd1306_WriteChar+0x10c>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	4413      	add	r3, r2
 8000d0e:	b2d8      	uxtb	r0, r3
 8000d10:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <ssd1306_WriteChar+0x10c>)
 8000d12:	885b      	ldrh	r3, [r3, #2]
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	4413      	add	r3, r2
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	7bba      	ldrb	r2, [r7, #14]
 8000d20:	4619      	mov	r1, r3
 8000d22:	f7ff ff51 	bl	8000bc8 <ssd1306_DrawPixel>
 8000d26:	e016      	b.n	8000d56 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000d28:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <ssd1306_WriteChar+0x10c>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	4413      	add	r3, r2
 8000d34:	b2d8      	uxtb	r0, r3
 8000d36:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <ssd1306_WriteChar+0x10c>)
 8000d38:	885b      	ldrh	r3, [r3, #2]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	4413      	add	r3, r2
 8000d42:	b2d9      	uxtb	r1, r3
 8000d44:	7bbb      	ldrb	r3, [r7, #14]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	bf0c      	ite	eq
 8000d4a:	2301      	moveq	r3, #1
 8000d4c:	2300      	movne	r3, #0
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	461a      	mov	r2, r3
 8000d52:	f7ff ff39 	bl	8000bc8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	61bb      	str	r3, [r7, #24]
 8000d5c:	793b      	ldrb	r3, [r7, #4]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d3c5      	bcc.n	8000cf2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	61fb      	str	r3, [r7, #28]
 8000d6c:	797b      	ldrb	r3, [r7, #5]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d3ad      	bcc.n	8000cd2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <ssd1306_WriteChar+0x10c>)
 8000d78:	881a      	ldrh	r2, [r3, #0]
 8000d7a:	793b      	ldrb	r3, [r7, #4]
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	4413      	add	r3, r2
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <ssd1306_WriteChar+0x10c>)
 8000d84:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3724      	adds	r7, #36	; 0x24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd90      	pop	{r4, r7, pc}
 8000d90:	200005c4 	.word	0x200005c4

08000d94 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	1d38      	adds	r0, r7, #4
 8000d9e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000da2:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000da4:	e012      	b.n	8000dcc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	7818      	ldrb	r0, [r3, #0]
 8000daa:	78fb      	ldrb	r3, [r7, #3]
 8000dac:	1d3a      	adds	r2, r7, #4
 8000dae:	ca06      	ldmia	r2, {r1, r2}
 8000db0:	f7ff ff68 	bl	8000c84 <ssd1306_WriteChar>
 8000db4:	4603      	mov	r3, r0
 8000db6:	461a      	mov	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d002      	beq.n	8000dc6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	e008      	b.n	8000dd8 <ssd1306_WriteString+0x44>
        }
        str++;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1e8      	bne.n	8000da6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	781b      	ldrb	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	460a      	mov	r2, r1
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	4613      	mov	r3, r2
 8000dee:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <ssd1306_SetCursor+0x2c>)
 8000df6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000df8:	79bb      	ldrb	r3, [r7, #6]
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <ssd1306_SetCursor+0x2c>)
 8000dfe:	805a      	strh	r2, [r3, #2]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	200005c4 	.word	0x200005c4

08000e10 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4604      	mov	r4, r0
 8000e18:	4608      	mov	r0, r1
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4623      	mov	r3, r4
 8000e20:	71fb      	strb	r3, [r7, #7]
 8000e22:	4603      	mov	r3, r0
 8000e24:	71bb      	strb	r3, [r7, #6]
 8000e26:	460b      	mov	r3, r1
 8000e28:	717b      	strb	r3, [r7, #5]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8000e2e:	797a      	ldrb	r2, [r7, #5]
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	bfb8      	it	lt
 8000e38:	425b      	neglt	r3, r3
 8000e3a:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8000e3c:	793a      	ldrb	r2, [r7, #4]
 8000e3e:	79bb      	ldrb	r3, [r7, #6]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	bfb8      	it	lt
 8000e46:	425b      	neglt	r3, r3
 8000e48:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8000e4a:	79fa      	ldrb	r2, [r7, #7]
 8000e4c:	797b      	ldrb	r3, [r7, #5]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d201      	bcs.n	8000e56 <ssd1306_Line+0x46>
 8000e52:	2301      	movs	r3, #1
 8000e54:	e001      	b.n	8000e5a <ssd1306_Line+0x4a>
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5a:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8000e5c:	79ba      	ldrb	r2, [r7, #6]
 8000e5e:	793b      	ldrb	r3, [r7, #4]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d201      	bcs.n	8000e68 <ssd1306_Line+0x58>
 8000e64:	2301      	movs	r3, #1
 8000e66:	e001      	b.n	8000e6c <ssd1306_Line+0x5c>
 8000e68:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8000e76:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000e7a:	7939      	ldrb	r1, [r7, #4]
 8000e7c:	797b      	ldrb	r3, [r7, #5]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fea2 	bl	8000bc8 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8000e84:	e024      	b.n	8000ed0 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8000e86:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000e8a:	79b9      	ldrb	r1, [r7, #6]
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fe9a 	bl	8000bc8 <ssd1306_DrawPixel>
        error2 = error * 2;
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	425b      	negs	r3, r3
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	dd08      	ble.n	8000eb6 <ssd1306_Line+0xa6>
            error -= deltaY;
 8000ea4:	69fa      	ldr	r2, [r7, #28]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	da08      	bge.n	8000ed0 <ssd1306_Line+0xc0>
            error += deltaX;
 8000ebe:	69fa      	ldr	r2, [r7, #28]
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	79bb      	ldrb	r3, [r7, #6]
 8000ecc:	4413      	add	r3, r2
 8000ece:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8000ed0:	79fa      	ldrb	r2, [r7, #7]
 8000ed2:	797b      	ldrb	r3, [r7, #5]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d1d6      	bne.n	8000e86 <ssd1306_Line+0x76>
 8000ed8:	79ba      	ldrb	r2, [r7, #6]
 8000eda:	793b      	ldrb	r3, [r7, #4]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d1d2      	bne.n	8000e86 <ssd1306_Line+0x76>
        }
    }
    return;
 8000ee0:	bf00      	nop
}
 8000ee2:	3724      	adds	r7, #36	; 0x24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd90      	pop	{r4, r7, pc}

08000ee8 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	4604      	mov	r4, r0
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4623      	mov	r3, r4
 8000ef8:	71fb      	strb	r3, [r7, #7]
 8000efa:	4603      	mov	r3, r0
 8000efc:	71bb      	strb	r3, [r7, #6]
 8000efe:	460b      	mov	r3, r1
 8000f00:	717b      	strb	r3, [r7, #5]
 8000f02:	4613      	mov	r3, r2
 8000f04:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8000f06:	79bc      	ldrb	r4, [r7, #6]
 8000f08:	797a      	ldrb	r2, [r7, #5]
 8000f0a:	79b9      	ldrb	r1, [r7, #6]
 8000f0c:	79f8      	ldrb	r0, [r7, #7]
 8000f0e:	7e3b      	ldrb	r3, [r7, #24]
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	4623      	mov	r3, r4
 8000f14:	f7ff ff7c 	bl	8000e10 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8000f18:	793c      	ldrb	r4, [r7, #4]
 8000f1a:	797a      	ldrb	r2, [r7, #5]
 8000f1c:	79b9      	ldrb	r1, [r7, #6]
 8000f1e:	7978      	ldrb	r0, [r7, #5]
 8000f20:	7e3b      	ldrb	r3, [r7, #24]
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	4623      	mov	r3, r4
 8000f26:	f7ff ff73 	bl	8000e10 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8000f2a:	793c      	ldrb	r4, [r7, #4]
 8000f2c:	79fa      	ldrb	r2, [r7, #7]
 8000f2e:	7939      	ldrb	r1, [r7, #4]
 8000f30:	7978      	ldrb	r0, [r7, #5]
 8000f32:	7e3b      	ldrb	r3, [r7, #24]
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	4623      	mov	r3, r4
 8000f38:	f7ff ff6a 	bl	8000e10 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8000f3c:	79bc      	ldrb	r4, [r7, #6]
 8000f3e:	79fa      	ldrb	r2, [r7, #7]
 8000f40:	7939      	ldrb	r1, [r7, #4]
 8000f42:	79f8      	ldrb	r0, [r7, #7]
 8000f44:	7e3b      	ldrb	r3, [r7, #24]
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	4623      	mov	r3, r4
 8000f4a:	f7ff ff61 	bl	8000e10 <ssd1306_Line>

    return;
 8000f4e:	bf00      	nop
}
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd90      	pop	{r4, r7, pc}

08000f56 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b084      	sub	sp, #16
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000f60:	2381      	movs	r3, #129	; 0x81
 8000f62:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fd42 	bl	80009f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fd3e 	bl	80009f0 <ssd1306_WriteCommand>
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d005      	beq.n	8000f98 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000f8c:	23af      	movs	r3, #175	; 0xaf
 8000f8e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <ssd1306_SetDisplayOn+0x38>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	715a      	strb	r2, [r3, #5]
 8000f96:	e004      	b.n	8000fa2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000f98:	23ae      	movs	r3, #174	; 0xae
 8000f9a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <ssd1306_SetDisplayOn+0x38>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fd23 	bl	80009f0 <ssd1306_WriteCommand>
}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200005c4 	.word	0x200005c4

08000fb8 <AS5600_ReadReg>:
	HAL_I2C_Master_Transmit(&hi2c1,AS5600_ADDR,&Data,1,10);	
	HAL_I2C_Mem_Write(&hi2c1,(AS5600_ADDR << 1),Reg,1,&Data,1,100);
}

uint8_t AS5600_ReadReg(uint8_t Reg)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af04      	add	r7, sp, #16
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t DataRead=0;	
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c1,(AS5600_ADDR << 1),Reg,1,&DataRead,1,100);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	2364      	movs	r3, #100	; 0x64
 8000fcc:	9302      	str	r3, [sp, #8]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	f107 030f 	add.w	r3, r7, #15
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	216c      	movs	r1, #108	; 0x6c
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <AS5600_ReadReg+0x34>)
 8000fde:	f002 fe15 	bl	8003c0c <HAL_I2C_Mem_Read>
	
	
	return DataRead;
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200005dc 	.word	0x200005dc

08000ff0 <AS5600_GetRawAngle>:
	return (int)((float)(AS5600_ReadReg(ANGLE_L) + (AS5600_ReadReg(ANGLE_H) << 8))/4096*360);	
}


uint16_t AS5600_GetRawAngle()
{
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
	uint16_t AngleVal=AS5600_ReadReg(RAWANG_L) + (AS5600_ReadReg(RAWANG_H) << 8);
 8000ff6:	200d      	movs	r0, #13
 8000ff8:	f7ff ffde 	bl	8000fb8 <AS5600_ReadReg>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	b29c      	uxth	r4, r3
 8001000:	200c      	movs	r0, #12
 8001002:	f7ff ffd9 	bl	8000fb8 <AS5600_ReadReg>
 8001006:	4603      	mov	r3, r0
 8001008:	b29b      	uxth	r3, r3
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b29b      	uxth	r3, r3
 800100e:	4423      	add	r3, r4
 8001010:	80fb      	strh	r3, [r7, #6]
	return AngleVal;	
 8001012:	88fb      	ldrh	r3, [r7, #6]
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	bd90      	pop	{r4, r7, pc}

0800101c <AS5600_GetStatus>:

uint8_t AS5600_GetStatus()
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	return AS5600_ReadReg(STATUS) & 0x38;	
 8001020:	200b      	movs	r0, #11
 8001022:	f7ff ffc9 	bl	8000fb8 <AS5600_ReadReg>
 8001026:	4603      	mov	r3, r0
 8001028:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800102c:	b2db      	uxtb	r3, r3
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <drawMainMenu>:
    "C1:   C3:  ",
    "C2:   C4:  ",
	"    ADC    "
};

void drawMainMenu() {
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af02      	add	r7, sp, #8

    uint8_t exit = 1;
 800103a:	2301      	movs	r3, #1
 800103c:	71fb      	strb	r3, [r7, #7]
    int8_t  current_item_menu = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	71bb      	strb	r3, [r7, #6]
    ssd1306_Fill(Black);
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff fd70 	bl	8000b28 <ssd1306_Fill>
    ssd1306_DrawRectangle(1, 1, 127, 63, White);
 8001048:	2301      	movs	r3, #1
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	233f      	movs	r3, #63	; 0x3f
 800104e:	227f      	movs	r2, #127	; 0x7f
 8001050:	2101      	movs	r1, #1
 8001052:	2001      	movs	r0, #1
 8001054:	f7ff ff48 	bl	8000ee8 <ssd1306_DrawRectangle>
    udpateDisplay();
 8001058:	f000 f8b4 	bl	80011c4 <udpateDisplay>

    while(exit){ // Вывод главного меню
 800105c:	e0a5      	b.n	80011aa <drawMainMenu+0x176>
        ssd1306_Fill(Black);
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff fd62 	bl	8000b28 <ssd1306_Fill>
        ssd1306_DrawRectangle(1, 1, 127, 63, White);
 8001064:	2301      	movs	r3, #1
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	233f      	movs	r3, #63	; 0x3f
 800106a:	227f      	movs	r2, #127	; 0x7f
 800106c:	2101      	movs	r1, #1
 800106e:	2001      	movs	r0, #1
 8001070:	f7ff ff3a 	bl	8000ee8 <ssd1306_DrawRectangle>
        udpateDisplay();
 8001074:	f000 f8a6 	bl	80011c4 <udpateDisplay>
    	if(current_item_menu >= MENU_ITEMS_COUNT )
 8001078:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800107c:	2b06      	cmp	r3, #6
 800107e:	dd01      	ble.n	8001084 <drawMainMenu+0x50>
			current_item_menu = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	71bb      	strb	r3, [r7, #6]
    	if(current_item_menu <= 0 )
 8001084:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001088:	2b00      	cmp	r3, #0
 800108a:	dc01      	bgt.n	8001090 <drawMainMenu+0x5c>
    	    current_item_menu = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	71bb      	strb	r3, [r7, #6]
    	ssd1306_SetCursor(START_POS_X, START_POS_Y+6);
 8001090:	2106      	movs	r1, #6
 8001092:	2002      	movs	r0, #2
 8001094:	f7ff fea4 	bl	8000de0 <ssd1306_SetCursor>
    		ssd1306_WriteString(menuItems[MENU_ITEMS_COUNT], Font_11x18, White);
 8001098:	4b48      	ldr	r3, [pc, #288]	; (80011bc <drawMainMenu+0x188>)
 800109a:	69d8      	ldr	r0, [r3, #28]
 800109c:	4a48      	ldr	r2, [pc, #288]	; (80011c0 <drawMainMenu+0x18c>)
 800109e:	2301      	movs	r3, #1
 80010a0:	ca06      	ldmia	r2, {r1, r2}
 80010a2:	f7ff fe77 	bl	8000d94 <ssd1306_WriteString>
    	ssd1306_SetCursor(START_POS_X, START_POS_Y + SIZE_FONT_Y + 5+6);
 80010a6:	211d      	movs	r1, #29
 80010a8:	2002      	movs	r0, #2
 80010aa:	f7ff fe99 	bl	8000de0 <ssd1306_SetCursor>
    		ssd1306_WriteString(menuItems[current_item_menu], Font_11x18, White);
 80010ae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010b2:	4a42      	ldr	r2, [pc, #264]	; (80011bc <drawMainMenu+0x188>)
 80010b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010b8:	4a41      	ldr	r2, [pc, #260]	; (80011c0 <drawMainMenu+0x18c>)
 80010ba:	2301      	movs	r3, #1
 80010bc:	ca06      	ldmia	r2, {r1, r2}
 80010be:	f7ff fe69 	bl	8000d94 <ssd1306_WriteString>
    	udpateDisplay();
 80010c2:	f000 f87f 	bl	80011c4 <udpateDisplay>
        buttonEnReset();
 80010c6:	f000 f8bf 	bl	8001248 <buttonEnReset>
        buttonLongReset();
 80010ca:	f000 f909 	bl	80012e0 <buttonLongReset>
        encoderReset();
 80010ce:	f000 f937 	bl	8001340 <encoderReset>
        HAL_Delay(500);
 80010d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010d6:	f001 fa79 	bl	80025cc <HAL_Delay>
    	while(1){
    		if(buttonLong()){
 80010da:	f000 f8e9 	bl	80012b0 <buttonLong>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <drawMainMenu+0xb6>
    			// Вернуться на стартовый дисплей
    			exit = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	71fb      	strb	r3, [r7, #7]
    			break;
 80010e8:	e05f      	b.n	80011aa <drawMainMenu+0x176>
    		}
    		if(buttonEn()){// если нажали ввод переходим в подменю
 80010ea:	f000 f895 	bl	8001218 <buttonEn>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d03f      	beq.n	8001174 <drawMainMenu+0x140>
    			HAL_Delay(600);
 80010f4:	f44f 7016 	mov.w	r0, #600	; 0x258
 80010f8:	f001 fa68 	bl	80025cc <HAL_Delay>
        		if(buttonLong()){ // если нажата кнопка подтверждения ждем что это не выход
 80010fc:	f000 f8d8 	bl	80012b0 <buttonLong>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <drawMainMenu+0xd8>
        			// Вернуться на стартовый дисплей
        			exit = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	71fb      	strb	r3, [r7, #7]
        			break;
 800110a:	e04e      	b.n	80011aa <drawMainMenu+0x176>
        		}
    		    switch(current_item_menu){
 800110c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001110:	2b06      	cmp	r3, #6
 8001112:	d826      	bhi.n	8001162 <drawMainMenu+0x12e>
 8001114:	a201      	add	r2, pc, #4	; (adr r2, 800111c <drawMainMenu+0xe8>)
 8001116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111a:	bf00      	nop
 800111c:	08001139 	.word	0x08001139
 8001120:	0800113f 	.word	0x0800113f
 8001124:	08001145 	.word	0x08001145
 8001128:	0800114b 	.word	0x0800114b
 800112c:	08001151 	.word	0x08001151
 8001130:	08001157 	.word	0x08001157
 8001134:	0800115d 	.word	0x0800115d
    		    	case 0: drawButtonMenu();	break;
 8001138:	f000 f996 	bl	8001468 <drawButtonMenu>
 800113c:	e013      	b.n	8001166 <drawMainMenu+0x132>
    		    	case 1: drawLEDMenu(); 		break;
 800113e:	f000 fa77 	bl	8001630 <drawLEDMenu>
 8001142:	e010      	b.n	8001166 <drawMainMenu+0x132>
    		    	case 2: drawE_inkMenu();	break;
 8001144:	f000 fa7f 	bl	8001646 <drawE_inkMenu>
 8001148:	e00d      	b.n	8001166 <drawMainMenu+0x132>
    		    	case 3: drawADCMenu();		break;
 800114a:	f000 fa87 	bl	800165c <drawADCMenu>
 800114e:	e00a      	b.n	8001166 <drawMainMenu+0x132>
    		    	case 4: drawEncodMenu();	break;
 8001150:	f000 fa8f 	bl	8001672 <drawEncodMenu>
 8001154:	e007      	b.n	8001166 <drawMainMenu+0x132>
    		    	case 5: drawDACMenu();		break;
 8001156:	f000 fa97 	bl	8001688 <drawDACMenu>
 800115a:	e004      	b.n	8001166 <drawMainMenu+0x132>
    		    	case 6: drawSettinMenu();	break;
 800115c:	f000 fa9f 	bl	800169e <drawSettinMenu>
 8001160:	e001      	b.n	8001166 <drawMainMenu+0x132>
    		    	default: current_item_menu = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	71bb      	strb	r3, [r7, #6]
    		    }
                buttonEnReset();
 8001166:	f000 f86f 	bl	8001248 <buttonEnReset>
                buttonLongReset();
 800116a:	f000 f8b9 	bl	80012e0 <buttonLongReset>
                encoderReset();
 800116e:	f000 f8e7 	bl	8001340 <encoderReset>
                break;
 8001172:	e01a      	b.n	80011aa <drawMainMenu+0x176>
    		}
    		if(encoderData() > 0){
 8001174:	f000 f8c0 	bl	80012f8 <encoderData>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	dd08      	ble.n	8001190 <drawMainMenu+0x15c>
    			current_item_menu++;
 800117e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	3301      	adds	r3, #1
 8001186:	b2db      	uxtb	r3, r3
 8001188:	71bb      	strb	r3, [r7, #6]
    			encoderReset();
 800118a:	f000 f8d9 	bl	8001340 <encoderReset>
    			break;
 800118e:	e00c      	b.n	80011aa <drawMainMenu+0x176>
    		}
    		if(encoderData() < 0){
 8001190:	f000 f8b2 	bl	80012f8 <encoderData>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	da9f      	bge.n	80010da <drawMainMenu+0xa6>
    			current_item_menu--;
 800119a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	3b01      	subs	r3, #1
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	71bb      	strb	r3, [r7, #6]
    			encoderReset();
 80011a6:	f000 f8cb 	bl	8001340 <encoderReset>
    while(exit){ // Вывод главного меню
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f47f af56 	bne.w	800105e <drawMainMenu+0x2a>
    			break;
    		}
    	}
    }

}
 80011b2:	bf00      	nop
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000000 	.word	0x20000000

080011c4 <udpateDisplay>:

extern osMutexId_t BlockI2CHandle;

void udpateDisplay(){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	statusMutex = osMutexAcquire(BlockI2CHandle, 1000);
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <udpateDisplay+0x34>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011d0:	4618      	mov	r0, r3
 80011d2:	f00a f96e 	bl	800b4b2 <osMutexAcquire>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4a08      	ldr	r2, [pc, #32]	; (80011fc <udpateDisplay+0x38>)
 80011da:	6013      	str	r3, [r2, #0]
	if(statusMutex == osOK)
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <udpateDisplay+0x38>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <udpateDisplay+0x24>
		ssd1306_UpdateScreen();
 80011e4:	f7ff fcc4 	bl	8000b70 <ssd1306_UpdateScreen>
	osMutexRelease(BlockI2CHandle);// Освобождение мьютекса
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <udpateDisplay+0x34>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f00a f9ab 	bl	800b548 <osMutexRelease>
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000734 	.word	0x20000734
 80011fc:	200005cc 	.word	0x200005cc

08001200 <buttonUpSet>:


uint8_t buttonUp(){
	return buttonUpper;
}
void buttonUpSet(){
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
	buttonUpper = 1;
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <buttonUpSet+0x14>)
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	200005d0 	.word	0x200005d0

08001218 <buttonEn>:
void buttonUpReset(){
	buttonUpper = 0;
}

uint8_t buttonEn(){
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
	return buttonEnable;
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <buttonEn+0x14>)
 800121e:	781b      	ldrb	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	200005d1 	.word	0x200005d1

08001230 <buttonEnSet>:
void buttonEnSet(){
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
	buttonEnable = 1;
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <buttonEnSet+0x14>)
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	200005d1 	.word	0x200005d1

08001248 <buttonEnReset>:
void buttonEnReset(){
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
	buttonEnable = 0;
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <buttonEnReset+0x14>)
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	200005d1 	.word	0x200005d1

08001260 <buttonCounter>:

uint8_t buttonCounter(){
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
	return button_counter;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <buttonCounter+0x14>)
 8001266:	781b      	ldrb	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	200005d2 	.word	0x200005d2

08001278 <buttonCounterSet>:
void buttonCounterSet(){
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
	button_counter++;
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <buttonCounterSet+0x1c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	3301      	adds	r3, #1
 8001282:	b2da      	uxtb	r2, r3
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <buttonCounterSet+0x1c>)
 8001286:	701a      	strb	r2, [r3, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	200005d2 	.word	0x200005d2

08001298 <buttonCounterReset>:

void buttonCounterReset(){
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
	button_counter = 0;
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <buttonCounterReset+0x14>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	200005d2 	.word	0x200005d2

080012b0 <buttonLong>:

uint8_t buttonLong(){
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
	return button_long;
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <buttonLong+0x14>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	200005d3 	.word	0x200005d3

080012c8 <buttonLongSet>:
void buttonLongSet(){
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
	button_long = 1;
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <buttonLongSet+0x14>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	701a      	strb	r2, [r3, #0]
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	200005d3 	.word	0x200005d3

080012e0 <buttonLongReset>:
void buttonLongReset(){
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
	button_long = 0;
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <buttonLongReset+0x14>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	200005d3 	.word	0x200005d3

080012f8 <encoderData>:

int8_t encoderData(){
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
	return encoderAS56;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <encoderData+0x14>)
 80012fe:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	200005d4 	.word	0x200005d4

08001310 <encoderSetUp>:
void encoderSetUp(){
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
	encoderAS56 = 1;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <encoderSetUp+0x14>)
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	200005d4 	.word	0x200005d4

08001328 <encoderSetDown>:

void encoderSetDown(){
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
	encoderAS56 = -1;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <encoderSetDown+0x14>)
 800132e:	22ff      	movs	r2, #255	; 0xff
 8001330:	701a      	strb	r2, [r3, #0]
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	200005d4 	.word	0x200005d4

08001340 <encoderReset>:

void encoderReset(){
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
	encoderAS56 = 0;
 8001344:	4b03      	ldr	r3, [pc, #12]	; (8001354 <encoderReset+0x14>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	200005d4 	.word	0x200005d4

08001358 <startDisplay>:
extern uint16_t global_DAC;
int8_t speed = 0;

void startDisplay(){
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af02      	add	r7, sp, #8

	    ssd1306_Fill(Black);
 800135e:	2000      	movs	r0, #0
 8001360:	f7ff fbe2 	bl	8000b28 <ssd1306_Fill>
	    ssd1306_Line(0, 1, 128, 1, White);
 8001364:	2301      	movs	r3, #1
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2301      	movs	r3, #1
 800136a:	2280      	movs	r2, #128	; 0x80
 800136c:	2101      	movs	r1, #1
 800136e:	2000      	movs	r0, #0
 8001370:	f7ff fd4e 	bl	8000e10 <ssd1306_Line>
	    ssd1306_SetCursor(7, 7); //
 8001374:	2107      	movs	r1, #7
 8001376:	2007      	movs	r0, #7
 8001378:	f7ff fd32 	bl	8000de0 <ssd1306_SetCursor>
	    ssd1306_WriteString("SPEED:-2", Font_11x18, White);
 800137c:	4a34      	ldr	r2, [pc, #208]	; (8001450 <startDisplay+0xf8>)
 800137e:	2301      	movs	r3, #1
 8001380:	ca06      	ldmia	r2, {r1, r2}
 8001382:	4834      	ldr	r0, [pc, #208]	; (8001454 <startDisplay+0xfc>)
 8001384:	f7ff fd06 	bl	8000d94 <ssd1306_WriteString>
	 	ssd1306_SetCursor(7, 7+18); //
 8001388:	2119      	movs	r1, #25
 800138a:	2007      	movs	r0, #7
 800138c:	f7ff fd28 	bl	8000de0 <ssd1306_SetCursor>
	 	ssd1306_WriteString("CHARG:82%", Font_11x18, White);
 8001390:	4a2f      	ldr	r2, [pc, #188]	; (8001450 <startDisplay+0xf8>)
 8001392:	2301      	movs	r3, #1
 8001394:	ca06      	ldmia	r2, {r1, r2}
 8001396:	4830      	ldr	r0, [pc, #192]	; (8001458 <startDisplay+0x100>)
 8001398:	f7ff fcfc 	bl	8000d94 <ssd1306_WriteString>
	 	ssd1306_SetCursor(7, 7+18+18); //
 800139c:	212b      	movs	r1, #43	; 0x2b
 800139e:	2007      	movs	r0, #7
 80013a0:	f7ff fd1e 	bl	8000de0 <ssd1306_SetCursor>
	 	ssd1306_WriteString("TIMER:3h22m", Font_11x18, White);
 80013a4:	4a2a      	ldr	r2, [pc, #168]	; (8001450 <startDisplay+0xf8>)
 80013a6:	2301      	movs	r3, #1
 80013a8:	ca06      	ldmia	r2, {r1, r2}
 80013aa:	482c      	ldr	r0, [pc, #176]	; (800145c <startDisplay+0x104>)
 80013ac:	f7ff fcf2 	bl	8000d94 <ssd1306_WriteString>
	 	ssd1306_Line(0, 63, 128, 63, White);
 80013b0:	2301      	movs	r3, #1
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	233f      	movs	r3, #63	; 0x3f
 80013b6:	2280      	movs	r2, #128	; 0x80
 80013b8:	213f      	movs	r1, #63	; 0x3f
 80013ba:	2000      	movs	r0, #0
 80013bc:	f7ff fd28 	bl	8000e10 <ssd1306_Line>

	 	while(1){
	 		HAL_Delay(100);
 80013c0:	2064      	movs	r0, #100	; 0x64
 80013c2:	f001 f903 	bl	80025cc <HAL_Delay>
	 		if(encoderData() > 0){
 80013c6:	f7ff ff97 	bl	80012f8 <encoderData>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	dd12      	ble.n	80013f6 <startDisplay+0x9e>
	 			encoderReset();
 80013d0:	f7ff ffb6 	bl	8001340 <encoderReset>
	 		 	speed++;
 80013d4:	4b22      	ldr	r3, [pc, #136]	; (8001460 <startDisplay+0x108>)
 80013d6:	f993 3000 	ldrsb.w	r3, [r3]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	3301      	adds	r3, #1
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	b25a      	sxtb	r2, r3
 80013e2:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <startDisplay+0x108>)
 80013e4:	701a      	strb	r2, [r3, #0]
	 		 	if(speed > 9)
 80013e6:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <startDisplay+0x108>)
 80013e8:	f993 3000 	ldrsb.w	r3, [r3]
 80013ec:	2b09      	cmp	r3, #9
 80013ee:	dd02      	ble.n	80013f6 <startDisplay+0x9e>
	 		 		speed = 9;
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <startDisplay+0x108>)
 80013f2:	2209      	movs	r2, #9
 80013f4:	701a      	strb	r2, [r3, #0]
	 		}
	 		if(encoderData() < 0){
 80013f6:	f7ff ff7f 	bl	80012f8 <encoderData>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	da13      	bge.n	8001428 <startDisplay+0xd0>
	 			encoderReset();
 8001400:	f7ff ff9e 	bl	8001340 <encoderReset>
	 		 	speed--;
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <startDisplay+0x108>)
 8001406:	f993 3000 	ldrsb.w	r3, [r3]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	3b01      	subs	r3, #1
 800140e:	b2db      	uxtb	r3, r3
 8001410:	b25a      	sxtb	r2, r3
 8001412:	4b13      	ldr	r3, [pc, #76]	; (8001460 <startDisplay+0x108>)
 8001414:	701a      	strb	r2, [r3, #0]
	 		 	if(speed < -9)
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <startDisplay+0x108>)
 8001418:	f993 3000 	ldrsb.w	r3, [r3]
 800141c:	f113 0f09 	cmn.w	r3, #9
 8001420:	da02      	bge.n	8001428 <startDisplay+0xd0>
	 		 		speed = -9;
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <startDisplay+0x108>)
 8001424:	22f7      	movs	r2, #247	; 0xf7
 8001426:	701a      	strb	r2, [r3, #0]
	 		}
	 		global_DAC = 1500 + (100*speed);
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <startDisplay+0x108>)
 800142a:	f993 3000 	ldrsb.w	r3, [r3]
 800142e:	b29b      	uxth	r3, r3
 8001430:	461a      	mov	r2, r3
 8001432:	0092      	lsls	r2, r2, #2
 8001434:	4413      	add	r3, r2
 8001436:	461a      	mov	r2, r3
 8001438:	0091      	lsls	r1, r2, #2
 800143a:	461a      	mov	r2, r3
 800143c:	460b      	mov	r3, r1
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	b29b      	uxth	r3, r3
 8001444:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001448:	b29a      	uxth	r2, r3
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <startDisplay+0x10c>)
 800144c:	801a      	strh	r2, [r3, #0]
	 		HAL_Delay(100);
 800144e:	e7b7      	b.n	80013c0 <startDisplay+0x68>
 8001450:	20000000 	.word	0x20000000
 8001454:	0800f4ec 	.word	0x0800f4ec
 8001458:	0800f4f8 	.word	0x0800f4f8
 800145c:	0800f504 	.word	0x0800f504
 8001460:	200005d5 	.word	0x200005d5
 8001464:	200005da 	.word	0x200005da

08001468 <drawButtonMenu>:
	 	}
  }

// Тестовая функция для проверки кнопок  готова
void drawButtonMenu(){
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
	uint8_t butEn = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	75fb      	strb	r3, [r7, #23]
	uint8_t butLo = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	75bb      	strb	r3, [r7, #22]
	uint8_t encodP = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	757b      	strb	r3, [r7, #21]
	uint8_t encodM = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	753b      	strb	r3, [r7, #20]

	char sym_butEn[1];
	char sym_butLo[1];
	char sym_encP[1];
	char sym_encM[1];
	buttonEnReset();
 800147e:	f7ff fee3 	bl	8001248 <buttonEnReset>
	buttonLongReset();
 8001482:	f7ff ff2d 	bl	80012e0 <buttonLongReset>
	encoderReset();
 8001486:	f7ff ff5b 	bl	8001340 <encoderReset>

	ssd1306_Fill(Black);
 800148a:	2000      	movs	r0, #0
 800148c:	f7ff fb4c 	bl	8000b28 <ssd1306_Fill>
	ssd1306_SetCursor(START_POS_X, START_POS_Y);
 8001490:	2100      	movs	r1, #0
 8001492:	2002      	movs	r0, #2
 8001494:	f7ff fca4 	bl	8000de0 <ssd1306_SetCursor>
		ssd1306_WriteString(menuButton[2], Font_11x18, White);
 8001498:	4b62      	ldr	r3, [pc, #392]	; (8001624 <drawButtonMenu+0x1bc>)
 800149a:	6898      	ldr	r0, [r3, #8]
 800149c:	4a62      	ldr	r2, [pc, #392]	; (8001628 <drawButtonMenu+0x1c0>)
 800149e:	2301      	movs	r3, #1
 80014a0:	ca06      	ldmia	r2, {r1, r2}
 80014a2:	f7ff fc77 	bl	8000d94 <ssd1306_WriteString>
	ssd1306_SetCursor(START_POS_X, START_POS_Y + SIZE_FONT_Y);
 80014a6:	2112      	movs	r1, #18
 80014a8:	2002      	movs	r0, #2
 80014aa:	f7ff fc99 	bl	8000de0 <ssd1306_SetCursor>
		ssd1306_WriteString(menuButton[0], Font_11x18, White);
 80014ae:	4b5d      	ldr	r3, [pc, #372]	; (8001624 <drawButtonMenu+0x1bc>)
 80014b0:	6818      	ldr	r0, [r3, #0]
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <drawButtonMenu+0x1c0>)
 80014b4:	2301      	movs	r3, #1
 80014b6:	ca06      	ldmia	r2, {r1, r2}
 80014b8:	f7ff fc6c 	bl	8000d94 <ssd1306_WriteString>
	ssd1306_SetCursor(START_POS_X, START_POS_Y + SIZE_FONT_Y*2);
 80014bc:	2124      	movs	r1, #36	; 0x24
 80014be:	2002      	movs	r0, #2
 80014c0:	f7ff fc8e 	bl	8000de0 <ssd1306_SetCursor>
		ssd1306_WriteString(menuButton[1], Font_11x18, White);
 80014c4:	4b57      	ldr	r3, [pc, #348]	; (8001624 <drawButtonMenu+0x1bc>)
 80014c6:	6858      	ldr	r0, [r3, #4]
 80014c8:	4a57      	ldr	r2, [pc, #348]	; (8001628 <drawButtonMenu+0x1c0>)
 80014ca:	2301      	movs	r3, #1
 80014cc:	ca06      	ldmia	r2, {r1, r2}
 80014ce:	f7ff fc61 	bl	8000d94 <ssd1306_WriteString>

	while(1){
		if(buttonEn() == ON){
 80014d2:	f7ff fea1 	bl	8001218 <buttonEn>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d104      	bne.n	80014e6 <drawButtonMenu+0x7e>
			buttonEnReset();
 80014dc:	f7ff feb4 	bl	8001248 <buttonEnReset>
			butEn++;
 80014e0:	7dfb      	ldrb	r3, [r7, #23]
 80014e2:	3301      	adds	r3, #1
 80014e4:	75fb      	strb	r3, [r7, #23]
		}
		if(buttonLong() == ON){
 80014e6:	f7ff fee3 	bl	80012b0 <buttonLong>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d104      	bne.n	80014fa <drawButtonMenu+0x92>
			buttonLongReset();
 80014f0:	f7ff fef6 	bl	80012e0 <buttonLongReset>
			butLo++;
 80014f4:	7dbb      	ldrb	r3, [r7, #22]
 80014f6:	3301      	adds	r3, #1
 80014f8:	75bb      	strb	r3, [r7, #22]
		}
		if(encoderData() > 0){
 80014fa:	f7ff fefd 	bl	80012f8 <encoderData>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	dd04      	ble.n	800150e <drawButtonMenu+0xa6>
			encoderReset();
 8001504:	f7ff ff1c 	bl	8001340 <encoderReset>
			encodP++;
 8001508:	7d7b      	ldrb	r3, [r7, #21]
 800150a:	3301      	adds	r3, #1
 800150c:	757b      	strb	r3, [r7, #21]
		}
		if(encoderData() < 0){
 800150e:	f7ff fef3 	bl	80012f8 <encoderData>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	da04      	bge.n	8001522 <drawButtonMenu+0xba>
			encoderReset();
 8001518:	f7ff ff12 	bl	8001340 <encoderReset>
			encodM++;
 800151c:	7d3b      	ldrb	r3, [r7, #20]
 800151e:	3301      	adds	r3, #1
 8001520:	753b      	strb	r3, [r7, #20]
		}
		encodM %=10;
 8001522:	7d3a      	ldrb	r2, [r7, #20]
 8001524:	4b41      	ldr	r3, [pc, #260]	; (800162c <drawButtonMenu+0x1c4>)
 8001526:	fba3 1302 	umull	r1, r3, r3, r2
 800152a:	08d9      	lsrs	r1, r3, #3
 800152c:	460b      	mov	r3, r1
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	753b      	strb	r3, [r7, #20]
		encodP %=10;
 8001538:	7d7a      	ldrb	r2, [r7, #21]
 800153a:	4b3c      	ldr	r3, [pc, #240]	; (800162c <drawButtonMenu+0x1c4>)
 800153c:	fba3 1302 	umull	r1, r3, r3, r2
 8001540:	08d9      	lsrs	r1, r3, #3
 8001542:	460b      	mov	r3, r1
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	757b      	strb	r3, [r7, #21]

		butEn = butEn % 10;
 800154e:	7dfa      	ldrb	r2, [r7, #23]
 8001550:	4b36      	ldr	r3, [pc, #216]	; (800162c <drawButtonMenu+0x1c4>)
 8001552:	fba3 1302 	umull	r1, r3, r3, r2
 8001556:	08d9      	lsrs	r1, r3, #3
 8001558:	460b      	mov	r3, r1
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	75fb      	strb	r3, [r7, #23]
		butLo = butLo % 10;
 8001564:	7dba      	ldrb	r2, [r7, #22]
 8001566:	4b31      	ldr	r3, [pc, #196]	; (800162c <drawButtonMenu+0x1c4>)
 8001568:	fba3 1302 	umull	r1, r3, r3, r2
 800156c:	08d9      	lsrs	r1, r3, #3
 800156e:	460b      	mov	r3, r1
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	75bb      	strb	r3, [r7, #22]

		itoa(butEn, sym_butEn, 10);
 800157a:	7dfb      	ldrb	r3, [r7, #23]
 800157c:	f107 0110 	add.w	r1, r7, #16
 8001580:	220a      	movs	r2, #10
 8001582:	4618      	mov	r0, r3
 8001584:	f00d fd16 	bl	800efb4 <itoa>
		itoa(butLo, sym_butLo, 10);
 8001588:	7dbb      	ldrb	r3, [r7, #22]
 800158a:	f107 010c 	add.w	r1, r7, #12
 800158e:	220a      	movs	r2, #10
 8001590:	4618      	mov	r0, r3
 8001592:	f00d fd0f 	bl	800efb4 <itoa>
		itoa(encodM, sym_encM, 10);
 8001596:	7d3b      	ldrb	r3, [r7, #20]
 8001598:	1d39      	adds	r1, r7, #4
 800159a:	220a      	movs	r2, #10
 800159c:	4618      	mov	r0, r3
 800159e:	f00d fd09 	bl	800efb4 <itoa>
		itoa(encodP, sym_encP, 10);
 80015a2:	7d7b      	ldrb	r3, [r7, #21]
 80015a4:	f107 0108 	add.w	r1, r7, #8
 80015a8:	220a      	movs	r2, #10
 80015aa:	4618      	mov	r0, r3
 80015ac:	f00d fd02 	bl	800efb4 <itoa>

		ssd1306_SetCursor(SIZE_FONT_X * 4, START_POS_Y + SIZE_FONT_Y);
 80015b0:	2112      	movs	r1, #18
 80015b2:	202c      	movs	r0, #44	; 0x2c
 80015b4:	f7ff fc14 	bl	8000de0 <ssd1306_SetCursor>
			ssd1306_WriteString(sym_butLo, Font_11x18, White);
 80015b8:	4a1b      	ldr	r2, [pc, #108]	; (8001628 <drawButtonMenu+0x1c0>)
 80015ba:	f107 000c 	add.w	r0, r7, #12
 80015be:	2301      	movs	r3, #1
 80015c0:	ca06      	ldmia	r2, {r1, r2}
 80015c2:	f7ff fbe7 	bl	8000d94 <ssd1306_WriteString>
		ssd1306_SetCursor(SIZE_FONT_X * 10, START_POS_Y + SIZE_FONT_Y);
 80015c6:	2112      	movs	r1, #18
 80015c8:	206e      	movs	r0, #110	; 0x6e
 80015ca:	f7ff fc09 	bl	8000de0 <ssd1306_SetCursor>
			ssd1306_WriteString(sym_butEn, Font_11x18, White);
 80015ce:	4a16      	ldr	r2, [pc, #88]	; (8001628 <drawButtonMenu+0x1c0>)
 80015d0:	f107 0010 	add.w	r0, r7, #16
 80015d4:	2301      	movs	r3, #1
 80015d6:	ca06      	ldmia	r2, {r1, r2}
 80015d8:	f7ff fbdc 	bl	8000d94 <ssd1306_WriteString>
		ssd1306_SetCursor(SIZE_FONT_X * 4, START_POS_Y + SIZE_FONT_Y*2);
 80015dc:	2124      	movs	r1, #36	; 0x24
 80015de:	202c      	movs	r0, #44	; 0x2c
 80015e0:	f7ff fbfe 	bl	8000de0 <ssd1306_SetCursor>
			ssd1306_WriteString(sym_encM, Font_11x18, White);
 80015e4:	4a10      	ldr	r2, [pc, #64]	; (8001628 <drawButtonMenu+0x1c0>)
 80015e6:	1d38      	adds	r0, r7, #4
 80015e8:	2301      	movs	r3, #1
 80015ea:	ca06      	ldmia	r2, {r1, r2}
 80015ec:	f7ff fbd2 	bl	8000d94 <ssd1306_WriteString>
		ssd1306_SetCursor(SIZE_FONT_X * 10, START_POS_Y + SIZE_FONT_Y*2);
 80015f0:	2124      	movs	r1, #36	; 0x24
 80015f2:	206e      	movs	r0, #110	; 0x6e
 80015f4:	f7ff fbf4 	bl	8000de0 <ssd1306_SetCursor>
			ssd1306_WriteString(sym_encP, Font_11x18, White);
 80015f8:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <drawButtonMenu+0x1c0>)
 80015fa:	f107 0008 	add.w	r0, r7, #8
 80015fe:	2301      	movs	r3, #1
 8001600:	ca06      	ldmia	r2, {r1, r2}
 8001602:	f7ff fbc7 	bl	8000d94 <ssd1306_WriteString>

		udpateDisplay();
 8001606:	f7ff fddd 	bl	80011c4 <udpateDisplay>
		HAL_Delay(50);
 800160a:	2032      	movs	r0, #50	; 0x32
 800160c:	f000 ffde 	bl	80025cc <HAL_Delay>
		if(butLo > 2)
 8001610:	7dbb      	ldrb	r3, [r7, #22]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d800      	bhi.n	8001618 <drawButtonMenu+0x1b0>
		if(buttonEn() == ON){
 8001616:	e75c      	b.n	80014d2 <drawButtonMenu+0x6a>
			break;
 8001618:	bf00      	nop
	}
}
 800161a:	bf00      	nop
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000028 	.word	0x20000028
 8001628:	20000000 	.word	0x20000000
 800162c:	cccccccd 	.word	0xcccccccd

08001630 <drawLEDMenu>:

void drawLEDMenu(){
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
	uint8_t currentLed = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	71fb      	strb	r3, [r7, #7]
	uint8_t red,grn,blu;
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <drawE_inkMenu>:

void drawE_inkMenu(){
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
	uint8_t exit = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	71fb      	strb	r3, [r7, #7]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <drawADCMenu>:

void drawADCMenu(){
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
	uint8_t exit = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	71fb      	strb	r3, [r7, #7]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <drawEncodMenu>:
void drawEncodMenu(){
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
	uint8_t exit = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	71fb      	strb	r3, [r7, #7]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <drawDACMenu>:
void drawDACMenu(){
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0

	uint8_t exit = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	71fb      	strb	r3, [r7, #7]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <drawSettinMenu>:
void drawSettinMenu(){
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
	uint8_t exit = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	71fb      	strb	r3, [r7, #7]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b8:	f000 ff46 	bl	8002548 <HAL_Init>
  //MCP4725 myMCP4725;
  //MCP4725_setValue(&myMCP4725, 2048, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016bc:	f000 f854 	bl	8001768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c0:	f000 f9b2 	bl	8001a28 <MX_GPIO_Init>
  MX_DMA_Init();
 80016c4:	f000 f990 	bl	80019e8 <MX_DMA_Init>
  MX_I2C1_Init();
 80016c8:	f000 f8b6 	bl	8001838 <MX_I2C1_Init>
  MX_SPI1_Init();
 80016cc:	f000 f8e2 	bl	8001894 <MX_SPI1_Init>
  MX_TIM2_Init();
 80016d0:	f000 f916 	bl	8001900 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  test_i2c_dev(); // Определяем что все устройства на линии i2c подключены
 80016d4:	f000 fa2e 	bl	8001b34 <test_i2c_dev>
  ssd1306_Init();
 80016d8:	f7ff f9bc 	bl	8000a54 <ssd1306_Init>
  ssd1306_SetCursor(5, 10);
 80016dc:	210a      	movs	r1, #10
 80016de:	2005      	movs	r0, #5
 80016e0:	f7ff fb7e 	bl	8000de0 <ssd1306_SetCursor>
  ssd1306_WriteString("JetPro,Bro!", Font_11x18, White);
 80016e4:	4a18      	ldr	r2, [pc, #96]	; (8001748 <main+0x94>)
 80016e6:	2301      	movs	r3, #1
 80016e8:	ca06      	ldmia	r2, {r1, r2}
 80016ea:	4818      	ldr	r0, [pc, #96]	; (800174c <main+0x98>)
 80016ec:	f7ff fb52 	bl	8000d94 <ssd1306_WriteString>
  ssd1306_SetCursor(3, 40);
 80016f0:	2128      	movs	r1, #40	; 0x28
 80016f2:	2003      	movs	r0, #3
 80016f4:	f7ff fb74 	bl	8000de0 <ssd1306_SetCursor>
  ssd1306_WriteString(" Tap Start ", Font_11x18, White);
 80016f8:	4a13      	ldr	r2, [pc, #76]	; (8001748 <main+0x94>)
 80016fa:	2301      	movs	r3, #1
 80016fc:	ca06      	ldmia	r2, {r1, r2}
 80016fe:	4814      	ldr	r0, [pc, #80]	; (8001750 <main+0x9c>)
 8001700:	f7ff fb48 	bl	8000d94 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8001704:	f7ff fa34 	bl	8000b70 <ssd1306_UpdateScreen>
  BlockI2CHandle = osMutexNew(&BlockI2C_attributes);
 8001708:	4812      	ldr	r0, [pc, #72]	; (8001754 <main+0xa0>)
 800170a:	f009 fe4c 	bl	800b3a6 <osMutexNew>
 800170e:	4603      	mov	r3, r0
 8001710:	4a11      	ldr	r2, [pc, #68]	; (8001758 <main+0xa4>)
 8001712:	6013      	str	r3, [r2, #0]
  //osStatus_t status = osMutexAcquire(BlockI2CHandle, 1000);
  //osMutexRelease (BlockI2CHandle);

  HAL_Delay(1000);
 8001714:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001718:	f000 ff58 	bl	80025cc <HAL_Delay>
  //EPD_WhiteScreen_ALL_Clean();
  //EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800171c:	f009 fd4c 	bl	800b1b8 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of BlockI2C */
  BlockI2CHandle = osMutexNew(&BlockI2C_attributes);
 8001720:	480c      	ldr	r0, [pc, #48]	; (8001754 <main+0xa0>)
 8001722:	f009 fe40 	bl	800b3a6 <osMutexNew>
 8001726:	4603      	mov	r3, r0
 8001728:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <main+0xa4>)
 800172a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of EmptyTask */
  EmptyTaskHandle = osThreadNew(StartEmptyTask, NULL, &EmptyTask_attributes);
 800172c:	4a0b      	ldr	r2, [pc, #44]	; (800175c <main+0xa8>)
 800172e:	2100      	movs	r1, #0
 8001730:	480b      	ldr	r0, [pc, #44]	; (8001760 <main+0xac>)
 8001732:	f009 fd8b 	bl	800b24c <osThreadNew>
 8001736:	4603      	mov	r3, r0
 8001738:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <main+0xb0>)
 800173a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  initUserTasks();
 800173c:	f000 feba 	bl	80024b4 <initUserTasks>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001740:	f009 fd5e 	bl	800b200 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001744:	e7fe      	b.n	8001744 <main+0x90>
 8001746:	bf00      	nop
 8001748:	20000000 	.word	0x20000000
 800174c:	0800f528 	.word	0x0800f528
 8001750:	0800f534 	.word	0x0800f534
 8001754:	0801034c 	.word	0x0801034c
 8001758:	20000734 	.word	0x20000734
 800175c:	08010328 	.word	0x08010328
 8001760:	08001be9 	.word	0x08001be9
 8001764:	20000730 	.word	0x20000730

08001768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b094      	sub	sp, #80	; 0x50
 800176c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800176e:	f107 0320 	add.w	r3, r7, #32
 8001772:	2230      	movs	r2, #48	; 0x30
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f00d fc36 	bl	800efe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800178c:	2300      	movs	r3, #0
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	4b27      	ldr	r3, [pc, #156]	; (8001830 <SystemClock_Config+0xc8>)
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	4a26      	ldr	r2, [pc, #152]	; (8001830 <SystemClock_Config+0xc8>)
 8001796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179a:	6413      	str	r3, [r2, #64]	; 0x40
 800179c:	4b24      	ldr	r3, [pc, #144]	; (8001830 <SystemClock_Config+0xc8>)
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	4b21      	ldr	r3, [pc, #132]	; (8001834 <SystemClock_Config+0xcc>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a20      	ldr	r2, [pc, #128]	; (8001834 <SystemClock_Config+0xcc>)
 80017b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <SystemClock_Config+0xcc>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017c4:	2301      	movs	r3, #1
 80017c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ce:	2302      	movs	r3, #2
 80017d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80017d8:	2319      	movs	r3, #25
 80017da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80017dc:	2390      	movs	r3, #144	; 0x90
 80017de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017e0:	2302      	movs	r3, #2
 80017e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80017e4:	2303      	movs	r3, #3
 80017e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e8:	f107 0320 	add.w	r3, r7, #32
 80017ec:	4618      	mov	r0, r3
 80017ee:	f004 fc89 	bl	8006104 <HAL_RCC_OscConfig>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017f8:	f000 fa12 	bl	8001c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017fc:	230f      	movs	r3, #15
 80017fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001800:	2302      	movs	r3, #2
 8001802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001812:	f107 030c 	add.w	r3, r7, #12
 8001816:	2102      	movs	r1, #2
 8001818:	4618      	mov	r0, r3
 800181a:	f004 feeb 	bl	80065f4 <HAL_RCC_ClockConfig>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001824:	f000 f9fc 	bl	8001c20 <Error_Handler>
  }
}
 8001828:	bf00      	nop
 800182a:	3750      	adds	r7, #80	; 0x50
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40023800 	.word	0x40023800
 8001834:	40007000 	.word	0x40007000

08001838 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <MX_I2C1_Init+0x50>)
 800183e:	4a13      	ldr	r2, [pc, #76]	; (800188c <MX_I2C1_Init+0x54>)
 8001840:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <MX_I2C1_Init+0x50>)
 8001844:	4a12      	ldr	r2, [pc, #72]	; (8001890 <MX_I2C1_Init+0x58>)
 8001846:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001848:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <MX_I2C1_Init+0x50>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_I2C1_Init+0x50>)
 8001850:	2200      	movs	r2, #0
 8001852:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_I2C1_Init+0x50>)
 8001856:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800185a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <MX_I2C1_Init+0x50>)
 800185e:	2200      	movs	r2, #0
 8001860:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_I2C1_Init+0x50>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001868:	4b07      	ldr	r3, [pc, #28]	; (8001888 <MX_I2C1_Init+0x50>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <MX_I2C1_Init+0x50>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001874:	4804      	ldr	r0, [pc, #16]	; (8001888 <MX_I2C1_Init+0x50>)
 8001876:	f001 fc67 	bl	8003148 <HAL_I2C_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001880:	f000 f9ce 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200005dc 	.word	0x200005dc
 800188c:	40005400 	.word	0x40005400
 8001890:	00061a80 	.word	0x00061a80

08001894 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001898:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <MX_SPI1_Init+0x64>)
 800189a:	4a18      	ldr	r2, [pc, #96]	; (80018fc <MX_SPI1_Init+0x68>)
 800189c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800189e:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <MX_SPI1_Init+0x64>)
 80018a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018a6:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <MX_SPI1_Init+0x64>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <MX_SPI1_Init+0x64>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <MX_SPI1_Init+0x64>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <MX_SPI1_Init+0x64>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <MX_SPI1_Init+0x64>)
 80018c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <MX_SPI1_Init+0x64>)
 80018c8:	2230      	movs	r2, #48	; 0x30
 80018ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <MX_SPI1_Init+0x64>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <MX_SPI1_Init+0x64>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <MX_SPI1_Init+0x64>)
 80018da:	2200      	movs	r2, #0
 80018dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_SPI1_Init+0x64>)
 80018e0:	220a      	movs	r2, #10
 80018e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018e4:	4804      	ldr	r0, [pc, #16]	; (80018f8 <MX_SPI1_Init+0x64>)
 80018e6:	f005 f897 	bl	8006a18 <HAL_SPI_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018f0:	f000 f996 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000630 	.word	0x20000630
 80018fc:	40013000 	.word	0x40013000

08001900 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08e      	sub	sp, #56	; 0x38
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001906:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001914:	f107 0320 	add.w	r3, r7, #32
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
 800192c:	615a      	str	r2, [r3, #20]
 800192e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001930:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <MX_TIM2_Init+0xe4>)
 8001932:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001936:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001938:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <MX_TIM2_Init+0xe4>)
 800193a:	2200      	movs	r2, #0
 800193c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193e:	4b29      	ldr	r3, [pc, #164]	; (80019e4 <MX_TIM2_Init+0xe4>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 8001944:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <MX_TIM2_Init+0xe4>)
 8001946:	2259      	movs	r2, #89	; 0x59
 8001948:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194a:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <MX_TIM2_Init+0xe4>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001950:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <MX_TIM2_Init+0xe4>)
 8001952:	2200      	movs	r2, #0
 8001954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001956:	4823      	ldr	r0, [pc, #140]	; (80019e4 <MX_TIM2_Init+0xe4>)
 8001958:	f005 f8e7 	bl	8006b2a <HAL_TIM_Base_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001962:	f000 f95d 	bl	8001c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800196c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001970:	4619      	mov	r1, r3
 8001972:	481c      	ldr	r0, [pc, #112]	; (80019e4 <MX_TIM2_Init+0xe4>)
 8001974:	f005 fbae 	bl	80070d4 <HAL_TIM_ConfigClockSource>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800197e:	f000 f94f 	bl	8001c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001982:	4818      	ldr	r0, [pc, #96]	; (80019e4 <MX_TIM2_Init+0xe4>)
 8001984:	f005 f982 	bl	8006c8c <HAL_TIM_PWM_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800198e:	f000 f947 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001996:	2300      	movs	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800199a:	f107 0320 	add.w	r3, r7, #32
 800199e:	4619      	mov	r1, r3
 80019a0:	4810      	ldr	r0, [pc, #64]	; (80019e4 <MX_TIM2_Init+0xe4>)
 80019a2:	f005 ff2d 	bl	8007800 <HAL_TIMEx_MasterConfigSynchronization>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80019ac:	f000 f938 	bl	8001c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019b0:	2360      	movs	r3, #96	; 0x60
 80019b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	2204      	movs	r2, #4
 80019c4:	4619      	mov	r1, r3
 80019c6:	4807      	ldr	r0, [pc, #28]	; (80019e4 <MX_TIM2_Init+0xe4>)
 80019c8:	f005 fac2 	bl	8006f50 <HAL_TIM_PWM_ConfigChannel>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80019d2:	f000 f925 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019d6:	4803      	ldr	r0, [pc, #12]	; (80019e4 <MX_TIM2_Init+0xe4>)
 80019d8:	f000 fa44 	bl	8001e64 <HAL_TIM_MspPostInit>

}
 80019dc:	bf00      	nop
 80019de:	3738      	adds	r7, #56	; 0x38
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000688 	.word	0x20000688

080019e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <MX_DMA_Init+0x3c>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a0b      	ldr	r2, [pc, #44]	; (8001a24 <MX_DMA_Init+0x3c>)
 80019f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <MX_DMA_Init+0x3c>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2105      	movs	r1, #5
 8001a0e:	2011      	movs	r0, #17
 8001a10:	f000 feb8 	bl	8002784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001a14:	2011      	movs	r0, #17
 8001a16:	f000 fed1 	bl	80027bc <HAL_NVIC_EnableIRQ>

}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800

08001a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	4b31      	ldr	r3, [pc, #196]	; (8001b08 <MX_GPIO_Init+0xe0>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a30      	ldr	r2, [pc, #192]	; (8001b08 <MX_GPIO_Init+0xe0>)
 8001a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b2e      	ldr	r3, [pc, #184]	; (8001b08 <MX_GPIO_Init+0xe0>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <MX_GPIO_Init+0xe0>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a29      	ldr	r2, [pc, #164]	; (8001b08 <MX_GPIO_Init+0xe0>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <MX_GPIO_Init+0xe0>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	4b23      	ldr	r3, [pc, #140]	; (8001b08 <MX_GPIO_Init+0xe0>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a22      	ldr	r2, [pc, #136]	; (8001b08 <MX_GPIO_Init+0xe0>)
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <MX_GPIO_Init+0xe0>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin, GPIO_PIN_RESET);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2107      	movs	r1, #7
 8001a96:	481d      	ldr	r0, [pc, #116]	; (8001b0c <MX_GPIO_Init+0xe4>)
 8001a98:	f001 fb24 	bl	80030e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_CS_Pin EPD_Reset_Pin EPD_Data_Control_Pin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin;
 8001a9c:	2307      	movs	r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4816      	ldr	r0, [pc, #88]	; (8001b0c <MX_GPIO_Init+0xe4>)
 8001ab4:	f001 f97a 	bl	8002dac <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_Busy_Pin */
  GPIO_InitStruct.Pin = EPD_Busy_Pin;
 8001ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EPD_Busy_GPIO_Port, &GPIO_InitStruct);
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	4619      	mov	r1, r3
 8001acc:	480f      	ldr	r0, [pc, #60]	; (8001b0c <MX_GPIO_Init+0xe4>)
 8001ace:	f001 f96d 	bl	8002dac <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_button_on_Pin */
  GPIO_InitStruct.Pin = EXT_button_on_Pin;
 8001ad2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ad6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ad8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001adc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EXT_button_on_GPIO_Port, &GPIO_InitStruct);
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4808      	ldr	r0, [pc, #32]	; (8001b0c <MX_GPIO_Init+0xe4>)
 8001aea:	f001 f95f 	bl	8002dac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2105      	movs	r1, #5
 8001af2:	2028      	movs	r0, #40	; 0x28
 8001af4:	f000 fe46 	bl	8002784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001af8:	2028      	movs	r0, #40	; 0x28
 8001afa:	f000 fe5f 	bl	80027bc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001afe:	bf00      	nop
 8001b00:	3720      	adds	r7, #32
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020400 	.word	0x40020400

08001b10 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EXT_button_on_Pin){
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b20:	d104      	bne.n	8001b2c <HAL_GPIO_EXTI_Callback+0x1c>
		buttonEnSet(ON);
 8001b22:	2001      	movs	r0, #1
 8001b24:	f7ff fb84 	bl	8001230 <buttonEnSet>
		buttonUpSet();
 8001b28:	f7ff fb6a 	bl	8001200 <buttonUpSet>
	}
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <test_i2c_dev>:


uint8_t test_i2c_dev(){
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef stateI2c;
	  // Подсчёт устройств в сети I2C 60-display, 72-ацп, 54-encoder, 96 -dac/
	  for(uint8_t i = 1; i < 127 ; i++){
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	71fb      	strb	r3, [r7, #7]
 8001b3e:	e046      	b.n	8001bce <test_i2c_dev+0x9a>
		  stateI2c = HAL_I2C_IsDeviceReady(&hi2c1, (i << 1), 2, 10);
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	b299      	uxth	r1, r3
 8001b48:	230a      	movs	r3, #10
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	4824      	ldr	r0, [pc, #144]	; (8001be0 <test_i2c_dev+0xac>)
 8001b4e:	f002 fa83 	bl	8004058 <HAL_I2C_IsDeviceReady>
 8001b52:	4603      	mov	r3, r0
 8001b54:	71bb      	strb	r3, [r7, #6]
		  if(stateI2c == HAL_OK){
 8001b56:	79bb      	ldrb	r3, [r7, #6]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d134      	bne.n	8001bc6 <test_i2c_dev+0x92>
			  switch ( i ) {
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	2b60      	cmp	r3, #96	; 0x60
 8001b60:	d01c      	beq.n	8001b9c <test_i2c_dev+0x68>
 8001b62:	2b60      	cmp	r3, #96	; 0x60
 8001b64:	dc20      	bgt.n	8001ba8 <test_i2c_dev+0x74>
 8001b66:	2b48      	cmp	r3, #72	; 0x48
 8001b68:	d012      	beq.n	8001b90 <test_i2c_dev+0x5c>
 8001b6a:	2b48      	cmp	r3, #72	; 0x48
 8001b6c:	dc1c      	bgt.n	8001ba8 <test_i2c_dev+0x74>
 8001b6e:	2b36      	cmp	r3, #54	; 0x36
 8001b70:	d002      	beq.n	8001b78 <test_i2c_dev+0x44>
 8001b72:	2b3c      	cmp	r3, #60	; 0x3c
 8001b74:	d006      	beq.n	8001b84 <test_i2c_dev+0x50>
 8001b76:	e017      	b.n	8001ba8 <test_i2c_dev+0x74>
			  	  case ENC_ADRESS: devise_i2c_tree.encoder_dev = ON; break;
 8001b78:	4a1a      	ldr	r2, [pc, #104]	; (8001be4 <test_i2c_dev+0xb0>)
 8001b7a:	7813      	ldrb	r3, [r2, #0]
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	7013      	strb	r3, [r2, #0]
 8001b82:	e021      	b.n	8001bc8 <test_i2c_dev+0x94>
			  	  case DIS_ADRESS: devise_i2c_tree.display_dev = ON; break;
 8001b84:	4a17      	ldr	r2, [pc, #92]	; (8001be4 <test_i2c_dev+0xb0>)
 8001b86:	7813      	ldrb	r3, [r2, #0]
 8001b88:	f043 0302 	orr.w	r3, r3, #2
 8001b8c:	7013      	strb	r3, [r2, #0]
 8001b8e:	e01b      	b.n	8001bc8 <test_i2c_dev+0x94>
			  	  case ADC_ADRESS: devise_i2c_tree.ADC_dev 	   = ON; break;
 8001b90:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <test_i2c_dev+0xb0>)
 8001b92:	7813      	ldrb	r3, [r2, #0]
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	7013      	strb	r3, [r2, #0]
 8001b9a:	e015      	b.n	8001bc8 <test_i2c_dev+0x94>
			  	  case DAC_ADRESS: devise_i2c_tree.DAC_dev 	   = ON; break;
 8001b9c:	4a11      	ldr	r2, [pc, #68]	; (8001be4 <test_i2c_dev+0xb0>)
 8001b9e:	7813      	ldrb	r3, [r2, #0]
 8001ba0:	f043 0308 	orr.w	r3, r3, #8
 8001ba4:	7013      	strb	r3, [r2, #0]
 8001ba6:	e00f      	b.n	8001bc8 <test_i2c_dev+0x94>
			      default: devise_i2c_tree.unknown_dev++;
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <test_i2c_dev+0xb0>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f003 030f 	and.w	r3, r3, #15
 8001bb8:	b2d9      	uxtb	r1, r3
 8001bba:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <test_i2c_dev+0xb0>)
 8001bbc:	7813      	ldrb	r3, [r2, #0]
 8001bbe:	f361 1307 	bfi	r3, r1, #4, #4
 8001bc2:	7013      	strb	r3, [r2, #0]
 8001bc4:	e000      	b.n	8001bc8 <test_i2c_dev+0x94>
			      }
		  }
 8001bc6:	bf00      	nop
	  for(uint8_t i = 1; i < 127 ; i++){
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	71fb      	strb	r3, [r7, #7]
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	2b7e      	cmp	r3, #126	; 0x7e
 8001bd2:	d9b5      	bls.n	8001b40 <test_i2c_dev+0xc>
	  }
  }
 8001bd4:	bf00      	nop
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200005dc 	.word	0x200005dc
 8001be4:	200005d8 	.word	0x200005d8

08001be8 <StartEmptyTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEmptyTask */
void StartEmptyTask(void *argument)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001bf0:	f00c fc8c 	bl	800e50c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(1);
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	f009 fbbb 	bl	800b370 <osDelay>
 8001bfa:	e7fb      	b.n	8001bf4 <StartEmptyTask+0xc>

08001bfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a04      	ldr	r2, [pc, #16]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d101      	bne.n	8001c12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c0e:	f000 fcbd 	bl	800258c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40014000 	.word	0x40014000

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c24:	b672      	cpsid	i
}
 8001c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <Error_Handler+0x8>
	...

08001c2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_MspInit+0x54>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	4a11      	ldr	r2, [pc, #68]	; (8001c80 <HAL_MspInit+0x54>)
 8001c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c40:	6453      	str	r3, [r2, #68]	; 0x44
 8001c42:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <HAL_MspInit+0x54>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_MspInit+0x54>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <HAL_MspInit+0x54>)
 8001c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <HAL_MspInit+0x54>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	210f      	movs	r1, #15
 8001c6e:	f06f 0001 	mvn.w	r0, #1
 8001c72:	f000 fd87 	bl	8002784 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800

08001c84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	; 0x28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a19      	ldr	r2, [pc, #100]	; (8001d08 <HAL_I2C_MspInit+0x84>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d12b      	bne.n	8001cfe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <HAL_I2C_MspInit+0x88>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a17      	ldr	r2, [pc, #92]	; (8001d0c <HAL_I2C_MspInit+0x88>)
 8001cb0:	f043 0302 	orr.w	r3, r3, #2
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <HAL_I2C_MspInit+0x88>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cc2:	23c0      	movs	r3, #192	; 0xc0
 8001cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cc6:	2312      	movs	r3, #18
 8001cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	480c      	ldr	r0, [pc, #48]	; (8001d10 <HAL_I2C_MspInit+0x8c>)
 8001cde:	f001 f865 	bl	8002dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <HAL_I2C_MspInit+0x88>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	4a08      	ldr	r2, [pc, #32]	; (8001d0c <HAL_I2C_MspInit+0x88>)
 8001cec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_I2C_MspInit+0x88>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001cfe:	bf00      	nop
 8001d00:	3728      	adds	r7, #40	; 0x28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40005400 	.word	0x40005400
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020400 	.word	0x40020400

08001d14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08a      	sub	sp, #40	; 0x28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a19      	ldr	r2, [pc, #100]	; (8001d98 <HAL_SPI_MspInit+0x84>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d12b      	bne.n	8001d8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <HAL_SPI_MspInit+0x88>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	4a17      	ldr	r2, [pc, #92]	; (8001d9c <HAL_SPI_MspInit+0x88>)
 8001d40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d44:	6453      	str	r3, [r2, #68]	; 0x44
 8001d46:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <HAL_SPI_MspInit+0x88>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_SPI_MspInit+0x88>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a10      	ldr	r2, [pc, #64]	; (8001d9c <HAL_SPI_MspInit+0x88>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <HAL_SPI_MspInit+0x88>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001d6e:	23a0      	movs	r3, #160	; 0xa0
 8001d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
 8001d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d7e:	2305      	movs	r3, #5
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	4619      	mov	r1, r3
 8001d88:	4805      	ldr	r0, [pc, #20]	; (8001da0 <HAL_SPI_MspInit+0x8c>)
 8001d8a:	f001 f80f 	bl	8002dac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d8e:	bf00      	nop
 8001d90:	3728      	adds	r7, #40	; 0x28
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40013000 	.word	0x40013000
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020000 	.word	0x40020000

08001da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db4:	d14c      	bne.n	8001e50 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <HAL_TIM_Base_MspInit+0xb4>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a26      	ldr	r2, [pc, #152]	; (8001e58 <HAL_TIM_Base_MspInit+0xb4>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b24      	ldr	r3, [pc, #144]	; (8001e58 <HAL_TIM_Base_MspInit+0xb4>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 8001dd2:	4b22      	ldr	r3, [pc, #136]	; (8001e5c <HAL_TIM_Base_MspInit+0xb8>)
 8001dd4:	4a22      	ldr	r2, [pc, #136]	; (8001e60 <HAL_TIM_Base_MspInit+0xbc>)
 8001dd6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 8001dd8:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <HAL_TIM_Base_MspInit+0xb8>)
 8001dda:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001dde:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001de0:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <HAL_TIM_Base_MspInit+0xb8>)
 8001de2:	2240      	movs	r2, #64	; 0x40
 8001de4:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001de6:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <HAL_TIM_Base_MspInit+0xb8>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001dec:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <HAL_TIM_Base_MspInit+0xb8>)
 8001dee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001df2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <HAL_TIM_Base_MspInit+0xb8>)
 8001df6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dfa:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dfc:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <HAL_TIM_Base_MspInit+0xb8>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8001e02:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <HAL_TIM_Base_MspInit+0xb8>)
 8001e04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e08:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_TIM_Base_MspInit+0xb8>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_TIM_Base_MspInit+0xb8>)
 8001e12:	2204      	movs	r2, #4
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch2_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_TIM_Base_MspInit+0xb8>)
 8001e18:	2203      	movs	r2, #3
 8001e1a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch2_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <HAL_TIM_Base_MspInit+0xb8>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch2_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_TIM_Base_MspInit+0xb8>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001e28:	480c      	ldr	r0, [pc, #48]	; (8001e5c <HAL_TIM_Base_MspInit+0xb8>)
 8001e2a:	f000 fcd5 	bl	80027d8 <HAL_DMA_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <HAL_TIM_Base_MspInit+0x94>
    {
      Error_Handler();
 8001e34:	f7ff fef4 	bl	8001c20 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <HAL_TIM_Base_MspInit+0xb8>)
 8001e3c:	629a      	str	r2, [r3, #40]	; 0x28
 8001e3e:	4a07      	ldr	r2, [pc, #28]	; (8001e5c <HAL_TIM_Base_MspInit+0xb8>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <HAL_TIM_Base_MspInit+0xb8>)
 8001e48:	631a      	str	r2, [r3, #48]	; 0x30
 8001e4a:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <HAL_TIM_Base_MspInit+0xb8>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e50:	bf00      	nop
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	200006d0 	.word	0x200006d0
 8001e60:	400260a0 	.word	0x400260a0

08001e64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 030c 	add.w	r3, r7, #12
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e84:	d11d      	bne.n	8001ec2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_TIM_MspPostInit+0x68>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a0f      	ldr	r2, [pc, #60]	; (8001ecc <HAL_TIM_MspPostInit+0x68>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <HAL_TIM_MspPostInit+0x68>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb6:	f107 030c 	add.w	r3, r7, #12
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <HAL_TIM_MspPostInit+0x6c>)
 8001ebe:	f000 ff75 	bl	8002dac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ec2:	bf00      	nop
 8001ec4:	3720      	adds	r7, #32
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020000 	.word	0x40020000

08001ed4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08c      	sub	sp, #48	; 0x30
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	4b2e      	ldr	r3, [pc, #184]	; (8001fa4 <HAL_InitTick+0xd0>)
 8001eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eec:	4a2d      	ldr	r2, [pc, #180]	; (8001fa4 <HAL_InitTick+0xd0>)
 8001eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef2:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef4:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <HAL_InitTick+0xd0>)
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f00:	f107 020c 	add.w	r2, r7, #12
 8001f04:	f107 0310 	add.w	r3, r7, #16
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f004 fd52 	bl	80069b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f10:	f004 fd3c 	bl	800698c <HAL_RCC_GetPCLK2Freq>
 8001f14:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f18:	4a23      	ldr	r2, [pc, #140]	; (8001fa8 <HAL_InitTick+0xd4>)
 8001f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1e:	0c9b      	lsrs	r3, r3, #18
 8001f20:	3b01      	subs	r3, #1
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001f24:	4b21      	ldr	r3, [pc, #132]	; (8001fac <HAL_InitTick+0xd8>)
 8001f26:	4a22      	ldr	r2, [pc, #136]	; (8001fb0 <HAL_InitTick+0xdc>)
 8001f28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8001f2a:	4b20      	ldr	r3, [pc, #128]	; (8001fac <HAL_InitTick+0xd8>)
 8001f2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f30:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001f32:	4a1e      	ldr	r2, [pc, #120]	; (8001fac <HAL_InitTick+0xd8>)
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001f38:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <HAL_InitTick+0xd8>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <HAL_InitTick+0xd8>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f44:	4b19      	ldr	r3, [pc, #100]	; (8001fac <HAL_InitTick+0xd8>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8001f4a:	4818      	ldr	r0, [pc, #96]	; (8001fac <HAL_InitTick+0xd8>)
 8001f4c:	f004 fded 	bl	8006b2a <HAL_TIM_Base_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001f56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d11b      	bne.n	8001f96 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8001f5e:	4813      	ldr	r0, [pc, #76]	; (8001fac <HAL_InitTick+0xd8>)
 8001f60:	f004 fe32 	bl	8006bc8 <HAL_TIM_Base_Start_IT>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001f6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d111      	bne.n	8001f96 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001f72:	2018      	movs	r0, #24
 8001f74:	f000 fc22 	bl	80027bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b0f      	cmp	r3, #15
 8001f7c:	d808      	bhi.n	8001f90 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	2018      	movs	r0, #24
 8001f84:	f000 fbfe 	bl	8002784 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f88:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <HAL_InitTick+0xe0>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	e002      	b.n	8001f96 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001f96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3730      	adds	r7, #48	; 0x30
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	431bde83 	.word	0x431bde83
 8001fac:	20000738 	.word	0x20000738
 8001fb0:	40014000 	.word	0x40014000
 8001fb4:	20000038 	.word	0x20000038

08001fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <NMI_Handler+0x4>

08001fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc2:	e7fe      	b.n	8001fc2 <HardFault_Handler+0x4>

08001fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <MemManage_Handler+0x4>

08001fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fce:	e7fe      	b.n	8001fce <BusFault_Handler+0x4>

08001fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <UsageFault_Handler+0x4>

08001fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8001fe8:	4802      	ldr	r0, [pc, #8]	; (8001ff4 <DMA1_Stream6_IRQHandler+0x10>)
 8001fea:	f000 fca3 	bl	8002934 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200006d0 	.word	0x200006d0

08001ff8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001ffc:	4802      	ldr	r0, [pc, #8]	; (8002008 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001ffe:	f004 fe9e 	bl	8006d3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000738 	.word	0x20000738

0800200c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT_button_on_Pin);
 8002010:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002014:	f001 f880 	bl	8003118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}

0800201c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <OTG_FS_IRQHandler+0x10>)
 8002022:	f002 ff42 	bl	8004eaa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20005f10 	.word	0x20005f10

08002030 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002038:	4a14      	ldr	r2, [pc, #80]	; (800208c <_sbrk+0x5c>)
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <_sbrk+0x60>)
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <_sbrk+0x64>)
 800204e:	4a12      	ldr	r2, [pc, #72]	; (8002098 <_sbrk+0x68>)
 8002050:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <_sbrk+0x64>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	429a      	cmp	r2, r3
 800205e:	d207      	bcs.n	8002070 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002060:	f00c ff66 	bl	800ef30 <__errno>
 8002064:	4603      	mov	r3, r0
 8002066:	220c      	movs	r2, #12
 8002068:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
 800206e:	e009      	b.n	8002084 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <_sbrk+0x64>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002076:	4b07      	ldr	r3, [pc, #28]	; (8002094 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	4a05      	ldr	r2, [pc, #20]	; (8002094 <_sbrk+0x64>)
 8002080:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002082:	68fb      	ldr	r3, [r7, #12]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20020000 	.word	0x20020000
 8002090:	00005000 	.word	0x00005000
 8002094:	20000780 	.word	0x20000780
 8002098:	20006650 	.word	0x20006650

0800209c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <SystemInit+0x20>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a6:	4a05      	ldr	r2, [pc, #20]	; (80020bc <SystemInit+0x20>)
 80020a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <StartOledMenuTask>:

#include "tasks/OledMenu.h"

void StartOledMenuTask(void *argument){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]

	while(buttonEn() != ON){
 80020c8:	e002      	b.n	80020d0 <StartOledMenuTask+0x10>
		osDelay(50);
 80020ca:	2032      	movs	r0, #50	; 0x32
 80020cc:	f009 f950 	bl	800b370 <osDelay>
	while(buttonEn() != ON){
 80020d0:	f7ff f8a2 	bl	8001218 <buttonEn>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d1f7      	bne.n	80020ca <StartOledMenuTask+0xa>
	}
	buttonEnReset();
 80020da:	f7ff f8b5 	bl	8001248 <buttonEnReset>
	for(;;){
		osDelay(50);
 80020de:	2032      	movs	r0, #50	; 0x32
 80020e0:	f009 f946 	bl	800b370 <osDelay>
		if(buttonEn() == ON){
 80020e4:	f7ff f898 	bl	8001218 <buttonEn>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <StartOledMenuTask+0x32>
			drawMainMenu();
 80020ee:	f7fe ffa1 	bl	8001034 <drawMainMenu>
		}
		startDisplay();
 80020f2:	f7ff f931 	bl	8001358 <startDisplay>
		udpateDisplay();
 80020f6:	f7ff f865 	bl	80011c4 <udpateDisplay>
		osDelay(50);
 80020fa:	e7f0      	b.n	80020de <StartOledMenuTask+0x1e>

080020fc <StartSensOutTask>:
	temp /= 10;
	temp /= 8;
	return (uint8_t)temp;
}
// Задача для опросо кнопок ADC и энкодера и система команд от usb
void StartSensOutTask(void *argument){
 80020fc:	b5b0      	push	{r4, r5, r7, lr}
 80020fe:	b08a      	sub	sp, #40	; 0x28
 8002100:	af02      	add	r7, sp, #8
 8002102:	6078      	str	r0, [r7, #4]
	uint8_t currentChanel = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	77fb      	strb	r3, [r7, #31]
	initAllChanelADC(); // todo сделать новую задачу для ацп
 8002108:	f000 f96e 	bl	80023e8 <initAllChanelADC>
    pADS = ADS1115_init(&hi2c1, ADS1115_ADR, configChanel[currentChanel]);
 800210c:	7ffb      	ldrb	r3, [r7, #31]
 800210e:	4a71      	ldr	r2, [pc, #452]	; (80022d4 <StartSensOutTask+0x1d8>)
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	cb0c      	ldmia	r3, {r2, r3}
 8002116:	2148      	movs	r1, #72	; 0x48
 8002118:	486f      	ldr	r0, [pc, #444]	; (80022d8 <StartSensOutTask+0x1dc>)
 800211a:	f7fe f9e3 	bl	80004e4 <ADS1115_init>
 800211e:	4603      	mov	r3, r0
 8002120:	4a6e      	ldr	r2, [pc, #440]	; (80022dc <StartSensOutTask+0x1e0>)
 8002122:	6013      	str	r3, [r2, #0]
    ADS1115_updateConfig(pADS, configChanel[currentChanel]);
 8002124:	4b6d      	ldr	r3, [pc, #436]	; (80022dc <StartSensOutTask+0x1e0>)
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	7ffb      	ldrb	r3, [r7, #31]
 800212a:	4a6a      	ldr	r2, [pc, #424]	; (80022d4 <StartSensOutTask+0x1d8>)
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4413      	add	r3, r2
 8002130:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002134:	f7fe f9f6 	bl	8000524 <ADS1115_updateConfig>
    ADS1115_startContinousMode(pADS);
 8002138:	4b68      	ldr	r3, [pc, #416]	; (80022dc <StartSensOutTask+0x1e0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fa57 	bl	80005f0 <ADS1115_startContinousMode>
    uint8_t buffer[] = {0};
 8002142:	2300      	movs	r3, #0
 8002144:	773b      	strb	r3, [r7, #28]
    MCP4725 myMCP4725 = MCP4725_init(&hi2c1, MCP4725A0_ADDR_A00, 3.30);
 8002146:	f107 030c 	add.w	r3, r7, #12
 800214a:	ed9f 0a65 	vldr	s0, [pc, #404]	; 80022e0 <StartSensOutTask+0x1e4>
 800214e:	2260      	movs	r2, #96	; 0x60
 8002150:	4961      	ldr	r1, [pc, #388]	; (80022d8 <StartSensOutTask+0x1dc>)
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fad2 	bl	80006fc <MCP4725_init>
    global_DAC = 1500;// это вроде 1.2 вольт
 8002158:	4b62      	ldr	r3, [pc, #392]	; (80022e4 <StartSensOutTask+0x1e8>)
 800215a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800215e:	801a      	strh	r2, [r3, #0]
    setDAC(myMCP4725,  global_DAC);
 8002160:	4b60      	ldr	r3, [pc, #384]	; (80022e4 <StartSensOutTask+0x1e8>)
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	f107 030c 	add.w	r3, r7, #12
 800216a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800216c:	f000 f992 	bl	8002494 <setDAC>

	for(;;){
		if(command_CMD[0] != 0){ // Самоя простая система команда из палок и прочего
 8002170:	4b5d      	ldr	r3, [pc, #372]	; (80022e8 <StartSensOutTask+0x1ec>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d02c      	beq.n	80021d2 <StartSensOutTask+0xd6>
			switch(command_CMD[0] - 48){
 8002178:	4b5b      	ldr	r3, [pc, #364]	; (80022e8 <StartSensOutTask+0x1ec>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	3b30      	subs	r3, #48	; 0x30
 800217e:	3b01      	subs	r3, #1
 8002180:	2b03      	cmp	r3, #3
 8002182:	d817      	bhi.n	80021b4 <StartSensOutTask+0xb8>
 8002184:	a201      	add	r2, pc, #4	; (adr r2, 800218c <StartSensOutTask+0x90>)
 8002186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218a:	bf00      	nop
 800218c:	0800219d 	.word	0x0800219d
 8002190:	080021a3 	.word	0x080021a3
 8002194:	080021a9 	.word	0x080021a9
 8002198:	080021af 	.word	0x080021af
				case 1: buttonEnSet();    break;
 800219c:	f7ff f848 	bl	8001230 <buttonEnSet>
 80021a0:	e008      	b.n	80021b4 <StartSensOutTask+0xb8>
				case 2: buttonLongSet();  break;
 80021a2:	f7ff f891 	bl	80012c8 <buttonLongSet>
 80021a6:	e005      	b.n	80021b4 <StartSensOutTask+0xb8>
				case 3: encoderSetUp();   break;
 80021a8:	f7ff f8b2 	bl	8001310 <encoderSetUp>
 80021ac:	e002      	b.n	80021b4 <StartSensOutTask+0xb8>
				case 4: encoderSetDown(); break;
 80021ae:	f7ff f8bb 	bl	8001328 <encoderSetDown>
 80021b2:	bf00      	nop
			}
//			buffer[0] = command_CMD[0];
			buffer[0] = (uint8_t)global_DAC/8;
 80021b4:	4b4b      	ldr	r3, [pc, #300]	; (80022e4 <StartSensOutTask+0x1e8>)
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	08db      	lsrs	r3, r3, #3
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	773b      	strb	r3, [r7, #28]
			command_CMD[0] = 0;
 80021c0:	4b49      	ldr	r3, [pc, #292]	; (80022e8 <StartSensOutTask+0x1ec>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
			CDC_Transmit_FS(buffer, 2);
 80021c6:	f107 031c 	add.w	r3, r7, #28
 80021ca:	2102      	movs	r1, #2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f00c fa5d 	bl	800e68c <CDC_Transmit_FS>
		}
		// Попытка захвата мьютекса с таймаутом 1000 мс
		statusMutexI2C = osMutexAcquire(BlockI2CHandle, 1000);
 80021d2:	4b46      	ldr	r3, [pc, #280]	; (80022ec <StartSensOutTask+0x1f0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021da:	4618      	mov	r0, r3
 80021dc:	f009 f969 	bl	800b4b2 <osMutexAcquire>
 80021e0:	4603      	mov	r3, r0
 80021e2:	4a43      	ldr	r2, [pc, #268]	; (80022f0 <StartSensOutTask+0x1f4>)
 80021e4:	6013      	str	r3, [r2, #0]
		if(statusMutexI2C == osOK){
 80021e6:	4b42      	ldr	r3, [pc, #264]	; (80022f0 <StartSensOutTask+0x1f4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10b      	bne.n	8002206 <StartSensOutTask+0x10a>
			calcDeltaAngle((int16_t)getEncoderData()); // Расчитываем смещение энкодера
 80021ee:	f000 f8dd 	bl	80023ac <getEncoderData>
 80021f2:	4603      	mov	r3, r0
 80021f4:	b21b      	sxth	r3, r3
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f87e 	bl	80022f8 <calcDeltaAngle>
			osMutexRelease(BlockI2CHandle);// Освобождение мьютекса
 80021fc:	4b3b      	ldr	r3, [pc, #236]	; (80022ec <StartSensOutTask+0x1f0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f009 f9a1 	bl	800b548 <osMutexRelease>
		}
		for(uint8_t i = 0; i < 10;){ // Читаем с ацп порта 10 значений
 8002206:	2300      	movs	r3, #0
 8002208:	77bb      	strb	r3, [r7, #30]
 800220a:	e025      	b.n	8002258 <StartSensOutTask+0x15c>
			if(osMutexAcquire(BlockI2CHandle, 1000) == osOK){
 800220c:	4b37      	ldr	r3, [pc, #220]	; (80022ec <StartSensOutTask+0x1f0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002214:	4618      	mov	r0, r3
 8002216:	f009 f94c 	bl	800b4b2 <osMutexAcquire>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d11b      	bne.n	8002258 <StartSensOutTask+0x15c>
				data_ch[currentChanel][i] = ADS1115_getData(pADS);
 8002220:	4b2e      	ldr	r3, [pc, #184]	; (80022dc <StartSensOutTask+0x1e0>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	7ffc      	ldrb	r4, [r7, #31]
 8002226:	7fbd      	ldrb	r5, [r7, #30]
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe f9ad 	bl	8000588 <ADS1115_getData>
 800222e:	4603      	mov	r3, r0
 8002230:	4619      	mov	r1, r3
 8002232:	4a30      	ldr	r2, [pc, #192]	; (80022f4 <StartSensOutTask+0x1f8>)
 8002234:	4623      	mov	r3, r4
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4423      	add	r3, r4
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	442b      	add	r3, r5
 800223e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				osMutexRelease(BlockI2CHandle);// Освобождение мьютекса
 8002242:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <StartSensOutTask+0x1f0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f009 f97e 	bl	800b548 <osMutexRelease>
				osDelay(6);
 800224c:	2006      	movs	r0, #6
 800224e:	f009 f88f 	bl	800b370 <osDelay>
				i++;
 8002252:	7fbb      	ldrb	r3, [r7, #30]
 8002254:	3301      	adds	r3, #1
 8002256:	77bb      	strb	r3, [r7, #30]
		for(uint8_t i = 0; i < 10;){ // Читаем с ацп порта 10 значений
 8002258:	7fbb      	ldrb	r3, [r7, #30]
 800225a:	2b09      	cmp	r3, #9
 800225c:	d9d6      	bls.n	800220c <StartSensOutTask+0x110>
			}
		 }
				// меняем канал после завершения цикла
				currentChanel++;
 800225e:	7ffb      	ldrb	r3, [r7, #31]
 8002260:	3301      	adds	r3, #1
 8002262:	77fb      	strb	r3, [r7, #31]
				if(currentChanel > 3)
 8002264:	7ffb      	ldrb	r3, [r7, #31]
 8002266:	2b03      	cmp	r3, #3
 8002268:	d901      	bls.n	800226e <StartSensOutTask+0x172>
					currentChanel = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	77fb      	strb	r3, [r7, #31]
				while(osMutexAcquire(BlockI2CHandle, 1000) != osOK){};
 800226e:	bf00      	nop
 8002270:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <StartSensOutTask+0x1f0>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002278:	4618      	mov	r0, r3
 800227a:	f009 f91a 	bl	800b4b2 <osMutexAcquire>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f5      	bne.n	8002270 <StartSensOutTask+0x174>
					ADS1115_updateConfig(pADS, configChanel[currentChanel]);
 8002284:	4b15      	ldr	r3, [pc, #84]	; (80022dc <StartSensOutTask+0x1e0>)
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	7ffb      	ldrb	r3, [r7, #31]
 800228a:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <StartSensOutTask+0x1d8>)
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4413      	add	r3, r2
 8002290:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002294:	f7fe f946 	bl	8000524 <ADS1115_updateConfig>
					osMutexRelease(BlockI2CHandle);// Освобождение мьютекса
 8002298:	4b14      	ldr	r3, [pc, #80]	; (80022ec <StartSensOutTask+0x1f0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f009 f953 	bl	800b548 <osMutexRelease>
					osDelay(10);
 80022a2:	200a      	movs	r0, #10
 80022a4:	f009 f864 	bl	800b370 <osDelay>
					if(global_DAC > 3000)
 80022a8:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <StartSensOutTask+0x1e8>)
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d903      	bls.n	80022bc <StartSensOutTask+0x1c0>
						global_DAC = 3000;
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <StartSensOutTask+0x1e8>)
 80022b6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80022ba:	801a      	strh	r2, [r3, #0]
		setDAC(myMCP4725,  global_DAC);
 80022bc:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <StartSensOutTask+0x1e8>)
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	f107 030c 	add.w	r3, r7, #12
 80022c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022c8:	f000 f8e4 	bl	8002494 <setDAC>
		longButton();
 80022cc:	f000 f84c 	bl	8002368 <longButton>
		if(command_CMD[0] != 0){ // Самоя простая система команда из палок и прочего
 80022d0:	e74e      	b.n	8002170 <StartSensOutTask+0x74>
 80022d2:	bf00      	nop
 80022d4:	2000078c 	.word	0x2000078c
 80022d8:	200005dc 	.word	0x200005dc
 80022dc:	200007ac 	.word	0x200007ac
 80022e0:	40533333 	.word	0x40533333
 80022e4:	200005da 	.word	0x200005da
 80022e8:	200007b4 	.word	0x200007b4
 80022ec:	20000734 	.word	0x20000734
 80022f0:	200007b0 	.word	0x200007b0
 80022f4:	200007c0 	.word	0x200007c0

080022f8 <calcDeltaAngle>:
		//osDelay(50);
	}
}

void calcDeltaAngle(int16_t current_encoder_data){
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	80fb      	strh	r3, [r7, #6]
	delta_encoder = current_encoder_data - old_encoder_data;
 8002302:	88fa      	ldrh	r2, [r7, #6]
 8002304:	4b16      	ldr	r3, [pc, #88]	; (8002360 <calcDeltaAngle+0x68>)
 8002306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800230a:	b29b      	uxth	r3, r3
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	b29b      	uxth	r3, r3
 8002310:	b21a      	sxth	r2, r3
 8002312:	4b14      	ldr	r3, [pc, #80]	; (8002364 <calcDeltaAngle+0x6c>)
 8002314:	801a      	strh	r2, [r3, #0]
	old_encoder_data = current_encoder_data;
 8002316:	4a12      	ldr	r2, [pc, #72]	; (8002360 <calcDeltaAngle+0x68>)
 8002318:	88fb      	ldrh	r3, [r7, #6]
 800231a:	8013      	strh	r3, [r2, #0]
	if(delta_encoder > MAX_ANGLE || delta_encoder < (-1)*MAX_ANGLE){
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <calcDeltaAngle+0x6c>)
 800231e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002322:	2bb4      	cmp	r3, #180	; 0xb4
 8002324:	dc05      	bgt.n	8002332 <calcDeltaAngle+0x3a>
 8002326:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <calcDeltaAngle+0x6c>)
 8002328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800232c:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8002330:	da02      	bge.n	8002338 <calcDeltaAngle+0x40>
		delta_encoder = 0;
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <calcDeltaAngle+0x6c>)
 8002334:	2200      	movs	r2, #0
 8002336:	801a      	strh	r2, [r3, #0]
	}
	if(delta_encoder > MIN_ANGLE )
 8002338:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <calcDeltaAngle+0x6c>)
 800233a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800233e:	2b05      	cmp	r3, #5
 8002340:	dd01      	ble.n	8002346 <calcDeltaAngle+0x4e>
		encoderSetUp();
 8002342:	f7fe ffe5 	bl	8001310 <encoderSetUp>
	if(delta_encoder < (-1)*MIN_ANGLE)
 8002346:	4b07      	ldr	r3, [pc, #28]	; (8002364 <calcDeltaAngle+0x6c>)
 8002348:	f9b3 3000 	ldrsh.w	r3, [r3]
 800234c:	f113 0f05 	cmn.w	r3, #5
 8002350:	da01      	bge.n	8002356 <calcDeltaAngle+0x5e>
		encoderSetDown();
 8002352:	f7fe ffe9 	bl	8001328 <encoderSetDown>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000786 	.word	0x20000786
 8002364:	20000788 	.word	0x20000788

08002368 <longButton>:
void longButton(){
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
	GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800236e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002372:	480d      	ldr	r0, [pc, #52]	; (80023a8 <longButton+0x40>)
 8002374:	f000 fe9e 	bl	80030b4 <HAL_GPIO_ReadPin>
 8002378:	4603      	mov	r3, r0
 800237a:	71fb      	strb	r3, [r7, #7]
	if(pinState == GPIO_PIN_RESET){
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d102      	bne.n	8002388 <longButton+0x20>
		buttonCounterSet();
 8002382:	f7fe ff79 	bl	8001278 <buttonCounterSet>
 8002386:	e001      	b.n	800238c <longButton+0x24>
	}
	else{
		buttonCounterReset();
 8002388:	f7fe ff86 	bl	8001298 <buttonCounterReset>
	}

	if(buttonCounter() > 50){
 800238c:	f7fe ff68 	bl	8001260 <buttonCounter>
 8002390:	4603      	mov	r3, r0
 8002392:	2b32      	cmp	r3, #50	; 0x32
 8002394:	d903      	bls.n	800239e <longButton+0x36>
		buttonLongSet();
 8002396:	f7fe ff97 	bl	80012c8 <buttonLongSet>
		buttonCounterReset();
 800239a:	f7fe ff7d 	bl	8001298 <buttonCounterReset>
	}
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40020400 	.word	0x40020400

080023ac <getEncoderData>:

u_magnituda magnituda;
uint16_t getEncoderData(){
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
	magnituda.data = AS5600_GetStatus();
 80023b0:	f7fe fe34 	bl	800101c <AS5600_GetStatus>
 80023b4:	4603      	mov	r3, r0
 80023b6:	461a      	mov	r2, r3
 80023b8:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <getEncoderData+0x34>)
 80023ba:	701a      	strb	r2, [r3, #0]
	if(magnituda.state_magnit.MD == ON)
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <getEncoderData+0x34>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d005      	beq.n	80023d6 <getEncoderData+0x2a>
		raw_angle = AS5600_GetRawAngle();
 80023ca:	f7fe fe11 	bl	8000ff0 <AS5600_GetRawAngle>
 80023ce:	4603      	mov	r3, r0
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <getEncoderData+0x38>)
 80023d4:	801a      	strh	r2, [r3, #0]
	return 	raw_angle;
 80023d6:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <getEncoderData+0x38>)
 80023d8:	881b      	ldrh	r3, [r3, #0]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000810 	.word	0x20000810
 80023e4:	20000784 	.word	0x20000784

080023e8 <initAllChanelADC>:

void initAllChanelADC(){
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
	initADC(&configChanel[ADC_CHANEL_1]);
 80023ec:	480e      	ldr	r0, [pc, #56]	; (8002428 <initAllChanelADC+0x40>)
 80023ee:	f000 f823 	bl	8002438 <initADC>
	initADC(&configChanel[ADC_CHANEL_2]);
 80023f2:	480e      	ldr	r0, [pc, #56]	; (800242c <initAllChanelADC+0x44>)
 80023f4:	f000 f820 	bl	8002438 <initADC>
	initADC(&configChanel[ADC_CHANEL_3]);
 80023f8:	480d      	ldr	r0, [pc, #52]	; (8002430 <initAllChanelADC+0x48>)
 80023fa:	f000 f81d 	bl	8002438 <initADC>
	initADC(&configChanel[ADC_CHANEL_4]);
 80023fe:	480d      	ldr	r0, [pc, #52]	; (8002434 <initAllChanelADC+0x4c>)
 8002400:	f000 f81a 	bl	8002438 <initADC>

	initChanelADC(&configChanel[ADC_CHANEL_1], CHANNEL_AIN0_GND);
 8002404:	2104      	movs	r1, #4
 8002406:	4808      	ldr	r0, [pc, #32]	; (8002428 <initAllChanelADC+0x40>)
 8002408:	f000 f835 	bl	8002476 <initChanelADC>
	initChanelADC(&configChanel[ADC_CHANEL_2], CHANNEL_AIN1_GND);
 800240c:	2105      	movs	r1, #5
 800240e:	4807      	ldr	r0, [pc, #28]	; (800242c <initAllChanelADC+0x44>)
 8002410:	f000 f831 	bl	8002476 <initChanelADC>
	initChanelADC(&configChanel[ADC_CHANEL_3], CHANNEL_AIN2_GND);
 8002414:	2106      	movs	r1, #6
 8002416:	4806      	ldr	r0, [pc, #24]	; (8002430 <initAllChanelADC+0x48>)
 8002418:	f000 f82d 	bl	8002476 <initChanelADC>
	initChanelADC(&configChanel[ADC_CHANEL_4], CHANNEL_AIN3_GND);
 800241c:	2107      	movs	r1, #7
 800241e:	4805      	ldr	r0, [pc, #20]	; (8002434 <initAllChanelADC+0x4c>)
 8002420:	f000 f829 	bl	8002476 <initChanelADC>
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	2000078c 	.word	0x2000078c
 800242c:	20000794 	.word	0x20000794
 8002430:	2000079c 	.word	0x2000079c
 8002434:	200007a4 	.word	0x200007a4

08002438 <initADC>:

void initADC(ADS1115_Config_t* configReg){
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
	configReg->pgaConfig 		= PGA_4_096;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	705a      	strb	r2, [r3, #1]
	configReg->operatingMode 	= MODE_CONTINOUS;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	709a      	strb	r2, [r3, #2]
	configReg->dataRate 		= DRATE_250;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2205      	movs	r2, #5
 8002450:	70da      	strb	r2, [r3, #3]
	configReg->compareMode 		= COMP_HYSTERESIS;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	711a      	strb	r2, [r3, #4]
	configReg->polarityMode 	= POLARITY_ACTIVE_LOW;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	715a      	strb	r2, [r3, #5]
	configReg->latchingMode  	= LATCHING_NONE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	719a      	strb	r2, [r3, #6]
	configReg->queueComparator 	= QUEUE_ONE; 			// ПОднять флаг через сколько измерений
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	71da      	strb	r2, [r3, #7]
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <initChanelADC>:

void initChanelADC(ADS1115_Config_t* configReg, MultiplexerConfig_t chanel){
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	70fb      	strb	r3, [r7, #3]
	configReg->channel = chanel;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	701a      	strb	r2, [r3, #0]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <setDAC>:

void setDAC(MCP4725 myMCP4725, uint16_t Vout){
 8002494:	b590      	push	{r4, r7, lr}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	463c      	mov	r4, r7
 800249c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MCP4725_setValue(&myMCP4725, Vout, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 80024a0:	8c39      	ldrh	r1, [r7, #32]
 80024a2:	4638      	mov	r0, r7
 80024a4:	2300      	movs	r3, #0
 80024a6:	2200      	movs	r2, #0
 80024a8:	f7fe f976 	bl	8000798 <MCP4725_setValue>
}
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd90      	pop	{r4, r7, pc}

080024b4 <initUserTasks>:
  .name = "SensOutTask",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

void initUserTasks(){
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
	OledMenuTaskHandle   = osThreadNew(StartOledMenuTask,   NULL, &OledMenuTask_attributes);
 80024b8:	4a08      	ldr	r2, [pc, #32]	; (80024dc <initUserTasks+0x28>)
 80024ba:	2100      	movs	r1, #0
 80024bc:	4808      	ldr	r0, [pc, #32]	; (80024e0 <initUserTasks+0x2c>)
 80024be:	f008 fec5 	bl	800b24c <osThreadNew>
 80024c2:	4603      	mov	r3, r0
 80024c4:	4a07      	ldr	r2, [pc, #28]	; (80024e4 <initUserTasks+0x30>)
 80024c6:	6013      	str	r3, [r2, #0]
	//LedControlTaskHandle = osThreadNew(StartLedControlTask, NULL, &LedControlTask_attributes);
	SensOutTaskHandle    = osThreadNew(StartSensOutTask,    NULL, &SensOutTask_attributes);
 80024c8:	4a07      	ldr	r2, [pc, #28]	; (80024e8 <initUserTasks+0x34>)
 80024ca:	2100      	movs	r1, #0
 80024cc:	4807      	ldr	r0, [pc, #28]	; (80024ec <initUserTasks+0x38>)
 80024ce:	f008 febd 	bl	800b24c <osThreadNew>
 80024d2:	4603      	mov	r3, r0
 80024d4:	4a06      	ldr	r2, [pc, #24]	; (80024f0 <initUserTasks+0x3c>)
 80024d6:	6013      	str	r3, [r2, #0]
};
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	08010374 	.word	0x08010374
 80024e0:	080020c1 	.word	0x080020c1
 80024e4:	20000814 	.word	0x20000814
 80024e8:	08010398 	.word	0x08010398
 80024ec:	080020fd 	.word	0x080020fd
 80024f0:	20000818 	.word	0x20000818

080024f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800252c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024f8:	480d      	ldr	r0, [pc, #52]	; (8002530 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024fa:	490e      	ldr	r1, [pc, #56]	; (8002534 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024fc:	4a0e      	ldr	r2, [pc, #56]	; (8002538 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002500:	e002      	b.n	8002508 <LoopCopyDataInit>

08002502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002506:	3304      	adds	r3, #4

08002508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800250a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800250c:	d3f9      	bcc.n	8002502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800250e:	4a0b      	ldr	r2, [pc, #44]	; (800253c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002510:	4c0b      	ldr	r4, [pc, #44]	; (8002540 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002514:	e001      	b.n	800251a <LoopFillZerobss>

08002516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002518:	3204      	adds	r2, #4

0800251a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800251a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800251c:	d3fb      	bcc.n	8002516 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800251e:	f7ff fdbd 	bl	800209c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002522:	f00c fd0b 	bl	800ef3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002526:	f7ff f8c5 	bl	80016b4 <main>
  bx  lr    
 800252a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800252c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002534:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8002538:	0801045c 	.word	0x0801045c
  ldr r2, =_sbss
 800253c:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8002540:	2000664c 	.word	0x2000664c

08002544 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002544:	e7fe      	b.n	8002544 <ADC_IRQHandler>
	...

08002548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800254c:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <HAL_Init+0x40>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <HAL_Init+0x40>)
 8002552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002556:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_Init+0x40>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <HAL_Init+0x40>)
 800255e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002562:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <HAL_Init+0x40>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a07      	ldr	r2, [pc, #28]	; (8002588 <HAL_Init+0x40>)
 800256a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002570:	2003      	movs	r0, #3
 8002572:	f000 f8fc 	bl	800276e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002576:	2000      	movs	r0, #0
 8002578:	f7ff fcac 	bl	8001ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800257c:	f7ff fb56 	bl	8001c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40023c00 	.word	0x40023c00

0800258c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_IncTick+0x20>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_IncTick+0x24>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4413      	add	r3, r2
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <HAL_IncTick+0x24>)
 800259e:	6013      	str	r3, [r2, #0]
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	2000003c 	.word	0x2000003c
 80025b0:	2000081c 	.word	0x2000081c

080025b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return uwTick;
 80025b8:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <HAL_GetTick+0x14>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	2000081c 	.word	0x2000081c

080025cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d4:	f7ff ffee 	bl	80025b4 <HAL_GetTick>
 80025d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e4:	d005      	beq.n	80025f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_Delay+0x44>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4413      	add	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025f2:	bf00      	nop
 80025f4:	f7ff ffde 	bl	80025b4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	429a      	cmp	r2, r3
 8002602:	d8f7      	bhi.n	80025f4 <HAL_Delay+0x28>
  {
  }
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	2000003c 	.word	0x2000003c

08002614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002630:	4013      	ands	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800263c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002646:	4a04      	ldr	r2, [pc, #16]	; (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	60d3      	str	r3, [r2, #12]
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <__NVIC_GetPriorityGrouping+0x18>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	f003 0307 	and.w	r3, r3, #7
}
 800266a:	4618      	mov	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	2b00      	cmp	r3, #0
 8002688:	db0b      	blt.n	80026a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	f003 021f 	and.w	r2, r3, #31
 8002690:	4907      	ldr	r1, [pc, #28]	; (80026b0 <__NVIC_EnableIRQ+0x38>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	2001      	movs	r0, #1
 800269a:	fa00 f202 	lsl.w	r2, r0, r2
 800269e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000e100 	.word	0xe000e100

080026b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	6039      	str	r1, [r7, #0]
 80026be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	db0a      	blt.n	80026de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	490c      	ldr	r1, [pc, #48]	; (8002700 <__NVIC_SetPriority+0x4c>)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	0112      	lsls	r2, r2, #4
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	440b      	add	r3, r1
 80026d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026dc:	e00a      	b.n	80026f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4908      	ldr	r1, [pc, #32]	; (8002704 <__NVIC_SetPriority+0x50>)
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	3b04      	subs	r3, #4
 80026ec:	0112      	lsls	r2, r2, #4
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	440b      	add	r3, r1
 80026f2:	761a      	strb	r2, [r3, #24]
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000e100 	.word	0xe000e100
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002708:	b480      	push	{r7}
 800270a:	b089      	sub	sp, #36	; 0x24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f1c3 0307 	rsb	r3, r3, #7
 8002722:	2b04      	cmp	r3, #4
 8002724:	bf28      	it	cs
 8002726:	2304      	movcs	r3, #4
 8002728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3304      	adds	r3, #4
 800272e:	2b06      	cmp	r3, #6
 8002730:	d902      	bls.n	8002738 <NVIC_EncodePriority+0x30>
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3b03      	subs	r3, #3
 8002736:	e000      	b.n	800273a <NVIC_EncodePriority+0x32>
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	f04f 32ff 	mov.w	r2, #4294967295
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43da      	mvns	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	401a      	ands	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002750:	f04f 31ff 	mov.w	r1, #4294967295
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	fa01 f303 	lsl.w	r3, r1, r3
 800275a:	43d9      	mvns	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	4313      	orrs	r3, r2
         );
}
 8002762:	4618      	mov	r0, r3
 8002764:	3724      	adds	r7, #36	; 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff ff4c 	bl	8002614 <__NVIC_SetPriorityGrouping>
}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002796:	f7ff ff61 	bl	800265c <__NVIC_GetPriorityGrouping>
 800279a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	6978      	ldr	r0, [r7, #20]
 80027a2:	f7ff ffb1 	bl	8002708 <NVIC_EncodePriority>
 80027a6:	4602      	mov	r2, r0
 80027a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff ff80 	bl	80026b4 <__NVIC_SetPriority>
}
 80027b4:	bf00      	nop
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff ff54 	bl	8002678 <__NVIC_EnableIRQ>
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027e4:	f7ff fee6 	bl	80025b4 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e099      	b.n	8002928 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0201 	bic.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002814:	e00f      	b.n	8002836 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002816:	f7ff fecd 	bl	80025b4 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b05      	cmp	r3, #5
 8002822:	d908      	bls.n	8002836 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2203      	movs	r2, #3
 800282e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e078      	b.n	8002928 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1e8      	bne.n	8002816 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	4b38      	ldr	r3, [pc, #224]	; (8002930 <HAL_DMA_Init+0x158>)
 8002850:	4013      	ands	r3, r2
 8002852:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002862:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800286e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800287a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	4313      	orrs	r3, r2
 8002886:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	2b04      	cmp	r3, #4
 800288e:	d107      	bne.n	80028a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	4313      	orrs	r3, r2
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4313      	orrs	r3, r2
 800289e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f023 0307 	bic.w	r3, r3, #7
 80028b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	4313      	orrs	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d117      	bne.n	80028fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00e      	beq.n	80028fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f9e9 	bl	8002cb4 <DMA_CheckFifoParam>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d008      	beq.n	80028fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2240      	movs	r2, #64	; 0x40
 80028ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028f6:	2301      	movs	r3, #1
 80028f8:	e016      	b.n	8002928 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f9a0 	bl	8002c48 <DMA_CalcBaseAndBitshift>
 8002908:	4603      	mov	r3, r0
 800290a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002910:	223f      	movs	r2, #63	; 0x3f
 8002912:	409a      	lsls	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	f010803f 	.word	0xf010803f

08002934 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002940:	4b8e      	ldr	r3, [pc, #568]	; (8002b7c <HAL_DMA_IRQHandler+0x248>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a8e      	ldr	r2, [pc, #568]	; (8002b80 <HAL_DMA_IRQHandler+0x24c>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	0a9b      	lsrs	r3, r3, #10
 800294c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002952:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295e:	2208      	movs	r2, #8
 8002960:	409a      	lsls	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d01a      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d013      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0204 	bic.w	r2, r2, #4
 8002986:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298c:	2208      	movs	r2, #8
 800298e:	409a      	lsls	r2, r3
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002998:	f043 0201 	orr.w	r2, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a4:	2201      	movs	r2, #1
 80029a6:	409a      	lsls	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d012      	beq.n	80029d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00b      	beq.n	80029d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c2:	2201      	movs	r2, #1
 80029c4:	409a      	lsls	r2, r3
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ce:	f043 0202 	orr.w	r2, r3, #2
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029da:	2204      	movs	r2, #4
 80029dc:	409a      	lsls	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d012      	beq.n	8002a0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00b      	beq.n	8002a0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f8:	2204      	movs	r2, #4
 80029fa:	409a      	lsls	r2, r3
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a04:	f043 0204 	orr.w	r2, r3, #4
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a10:	2210      	movs	r2, #16
 8002a12:	409a      	lsls	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d043      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d03c      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2e:	2210      	movs	r2, #16
 8002a30:	409a      	lsls	r2, r3
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d018      	beq.n	8002a76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d108      	bne.n	8002a64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d024      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	4798      	blx	r3
 8002a62:	e01f      	b.n	8002aa4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01b      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	4798      	blx	r3
 8002a74:	e016      	b.n	8002aa4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d107      	bne.n	8002a94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0208 	bic.w	r2, r2, #8
 8002a92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 808f 	beq.w	8002bd4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 8087 	beq.w	8002bd4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aca:	2220      	movs	r2, #32
 8002acc:	409a      	lsls	r2, r3
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b05      	cmp	r3, #5
 8002adc:	d136      	bne.n	8002b4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0216 	bic.w	r2, r2, #22
 8002aec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002afc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d103      	bne.n	8002b0e <HAL_DMA_IRQHandler+0x1da>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d007      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0208 	bic.w	r2, r2, #8
 8002b1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b22:	223f      	movs	r2, #63	; 0x3f
 8002b24:	409a      	lsls	r2, r3
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d07e      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	4798      	blx	r3
        }
        return;
 8002b4a:	e079      	b.n	8002c40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d01d      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10d      	bne.n	8002b84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d031      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	4798      	blx	r3
 8002b78:	e02c      	b.n	8002bd4 <HAL_DMA_IRQHandler+0x2a0>
 8002b7a:	bf00      	nop
 8002b7c:	20000034 	.word	0x20000034
 8002b80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d023      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	4798      	blx	r3
 8002b94:	e01e      	b.n	8002bd4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10f      	bne.n	8002bc4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0210 	bic.w	r2, r2, #16
 8002bb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d032      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d022      	beq.n	8002c2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2205      	movs	r2, #5
 8002bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0201 	bic.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	3301      	adds	r3, #1
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d307      	bcc.n	8002c1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f2      	bne.n	8002c00 <HAL_DMA_IRQHandler+0x2cc>
 8002c1a:	e000      	b.n	8002c1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d005      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	4798      	blx	r3
 8002c3e:	e000      	b.n	8002c42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c40:	bf00      	nop
    }
  }
}
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	3b10      	subs	r3, #16
 8002c58:	4a14      	ldr	r2, [pc, #80]	; (8002cac <DMA_CalcBaseAndBitshift+0x64>)
 8002c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5e:	091b      	lsrs	r3, r3, #4
 8002c60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c62:	4a13      	ldr	r2, [pc, #76]	; (8002cb0 <DMA_CalcBaseAndBitshift+0x68>)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4413      	add	r3, r2
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d909      	bls.n	8002c8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c7e:	f023 0303 	bic.w	r3, r3, #3
 8002c82:	1d1a      	adds	r2, r3, #4
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	659a      	str	r2, [r3, #88]	; 0x58
 8002c88:	e007      	b.n	8002c9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c92:	f023 0303 	bic.w	r3, r3, #3
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	aaaaaaab 	.word	0xaaaaaaab
 8002cb0:	080103bc 	.word	0x080103bc

08002cb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d11f      	bne.n	8002d0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d856      	bhi.n	8002d82 <DMA_CheckFifoParam+0xce>
 8002cd4:	a201      	add	r2, pc, #4	; (adr r2, 8002cdc <DMA_CheckFifoParam+0x28>)
 8002cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cda:	bf00      	nop
 8002cdc:	08002ced 	.word	0x08002ced
 8002ce0:	08002cff 	.word	0x08002cff
 8002ce4:	08002ced 	.word	0x08002ced
 8002ce8:	08002d83 	.word	0x08002d83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d046      	beq.n	8002d86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cfc:	e043      	b.n	8002d86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d06:	d140      	bne.n	8002d8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d0c:	e03d      	b.n	8002d8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d16:	d121      	bne.n	8002d5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b03      	cmp	r3, #3
 8002d1c:	d837      	bhi.n	8002d8e <DMA_CheckFifoParam+0xda>
 8002d1e:	a201      	add	r2, pc, #4	; (adr r2, 8002d24 <DMA_CheckFifoParam+0x70>)
 8002d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d24:	08002d35 	.word	0x08002d35
 8002d28:	08002d3b 	.word	0x08002d3b
 8002d2c:	08002d35 	.word	0x08002d35
 8002d30:	08002d4d 	.word	0x08002d4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
      break;
 8002d38:	e030      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d025      	beq.n	8002d92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d4a:	e022      	b.n	8002d92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d54:	d11f      	bne.n	8002d96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d5a:	e01c      	b.n	8002d96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d903      	bls.n	8002d6a <DMA_CheckFifoParam+0xb6>
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d003      	beq.n	8002d70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d68:	e018      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d6e:	e015      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00e      	beq.n	8002d9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d80:	e00b      	b.n	8002d9a <DMA_CheckFifoParam+0xe6>
      break;
 8002d82:	bf00      	nop
 8002d84:	e00a      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
      break;
 8002d86:	bf00      	nop
 8002d88:	e008      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
      break;
 8002d8a:	bf00      	nop
 8002d8c:	e006      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
      break;
 8002d8e:	bf00      	nop
 8002d90:	e004      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
      break;
 8002d92:	bf00      	nop
 8002d94:	e002      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
      break;   
 8002d96:	bf00      	nop
 8002d98:	e000      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
      break;
 8002d9a:	bf00      	nop
    }
  } 
  
  return status; 
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop

08002dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b089      	sub	sp, #36	; 0x24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	e159      	b.n	800307c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dc8:	2201      	movs	r2, #1
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	f040 8148 	bne.w	8003076 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d005      	beq.n	8002dfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d130      	bne.n	8002e60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	2203      	movs	r2, #3
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4013      	ands	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e34:	2201      	movs	r2, #1
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	091b      	lsrs	r3, r3, #4
 8002e4a:	f003 0201 	and.w	r2, r3, #1
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d017      	beq.n	8002e9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	2203      	movs	r2, #3
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4013      	ands	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d123      	bne.n	8002ef0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	08da      	lsrs	r2, r3, #3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3208      	adds	r2, #8
 8002eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	220f      	movs	r2, #15
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	08da      	lsrs	r2, r3, #3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3208      	adds	r2, #8
 8002eea:	69b9      	ldr	r1, [r7, #24]
 8002eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	2203      	movs	r2, #3
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0203 	and.w	r2, r3, #3
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 80a2 	beq.w	8003076 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	4b57      	ldr	r3, [pc, #348]	; (8003094 <HAL_GPIO_Init+0x2e8>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	4a56      	ldr	r2, [pc, #344]	; (8003094 <HAL_GPIO_Init+0x2e8>)
 8002f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f40:	6453      	str	r3, [r2, #68]	; 0x44
 8002f42:	4b54      	ldr	r3, [pc, #336]	; (8003094 <HAL_GPIO_Init+0x2e8>)
 8002f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f4e:	4a52      	ldr	r2, [pc, #328]	; (8003098 <HAL_GPIO_Init+0x2ec>)
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	089b      	lsrs	r3, r3, #2
 8002f54:	3302      	adds	r3, #2
 8002f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	220f      	movs	r2, #15
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a49      	ldr	r2, [pc, #292]	; (800309c <HAL_GPIO_Init+0x2f0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d019      	beq.n	8002fae <HAL_GPIO_Init+0x202>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a48      	ldr	r2, [pc, #288]	; (80030a0 <HAL_GPIO_Init+0x2f4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d013      	beq.n	8002faa <HAL_GPIO_Init+0x1fe>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a47      	ldr	r2, [pc, #284]	; (80030a4 <HAL_GPIO_Init+0x2f8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d00d      	beq.n	8002fa6 <HAL_GPIO_Init+0x1fa>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a46      	ldr	r2, [pc, #280]	; (80030a8 <HAL_GPIO_Init+0x2fc>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d007      	beq.n	8002fa2 <HAL_GPIO_Init+0x1f6>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a45      	ldr	r2, [pc, #276]	; (80030ac <HAL_GPIO_Init+0x300>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d101      	bne.n	8002f9e <HAL_GPIO_Init+0x1f2>
 8002f9a:	2304      	movs	r3, #4
 8002f9c:	e008      	b.n	8002fb0 <HAL_GPIO_Init+0x204>
 8002f9e:	2307      	movs	r3, #7
 8002fa0:	e006      	b.n	8002fb0 <HAL_GPIO_Init+0x204>
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e004      	b.n	8002fb0 <HAL_GPIO_Init+0x204>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e002      	b.n	8002fb0 <HAL_GPIO_Init+0x204>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <HAL_GPIO_Init+0x204>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	f002 0203 	and.w	r2, r2, #3
 8002fb6:	0092      	lsls	r2, r2, #2
 8002fb8:	4093      	lsls	r3, r2
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fc0:	4935      	ldr	r1, [pc, #212]	; (8003098 <HAL_GPIO_Init+0x2ec>)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	089b      	lsrs	r3, r3, #2
 8002fc6:	3302      	adds	r3, #2
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fce:	4b38      	ldr	r3, [pc, #224]	; (80030b0 <HAL_GPIO_Init+0x304>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ff2:	4a2f      	ldr	r2, [pc, #188]	; (80030b0 <HAL_GPIO_Init+0x304>)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ff8:	4b2d      	ldr	r3, [pc, #180]	; (80030b0 <HAL_GPIO_Init+0x304>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800301c:	4a24      	ldr	r2, [pc, #144]	; (80030b0 <HAL_GPIO_Init+0x304>)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003022:	4b23      	ldr	r3, [pc, #140]	; (80030b0 <HAL_GPIO_Init+0x304>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003046:	4a1a      	ldr	r2, [pc, #104]	; (80030b0 <HAL_GPIO_Init+0x304>)
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800304c:	4b18      	ldr	r3, [pc, #96]	; (80030b0 <HAL_GPIO_Init+0x304>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003070:	4a0f      	ldr	r2, [pc, #60]	; (80030b0 <HAL_GPIO_Init+0x304>)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3301      	adds	r3, #1
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	2b0f      	cmp	r3, #15
 8003080:	f67f aea2 	bls.w	8002dc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop
 8003088:	3724      	adds	r7, #36	; 0x24
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800
 8003098:	40013800 	.word	0x40013800
 800309c:	40020000 	.word	0x40020000
 80030a0:	40020400 	.word	0x40020400
 80030a4:	40020800 	.word	0x40020800
 80030a8:	40020c00 	.word	0x40020c00
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40013c00 	.word	0x40013c00

080030b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	887b      	ldrh	r3, [r7, #2]
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030cc:	2301      	movs	r3, #1
 80030ce:	73fb      	strb	r3, [r7, #15]
 80030d0:	e001      	b.n	80030d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030d2:	2300      	movs	r3, #0
 80030d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	807b      	strh	r3, [r7, #2]
 80030f0:	4613      	mov	r3, r2
 80030f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030f4:	787b      	ldrb	r3, [r7, #1]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030fa:	887a      	ldrh	r2, [r7, #2]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003100:	e003      	b.n	800310a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003102:	887b      	ldrh	r3, [r7, #2]
 8003104:	041a      	lsls	r2, r3, #16
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	619a      	str	r2, [r3, #24]
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003122:	4b08      	ldr	r3, [pc, #32]	; (8003144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	88fb      	ldrh	r3, [r7, #6]
 8003128:	4013      	ands	r3, r2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d006      	beq.n	800313c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800312e:	4a05      	ldr	r2, [pc, #20]	; (8003144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	4618      	mov	r0, r3
 8003138:	f7fe fcea 	bl	8001b10 <HAL_GPIO_EXTI_Callback>
  }
}
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40013c00 	.word	0x40013c00

08003148 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e12b      	b.n	80033b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fe fd88 	bl	8001c84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2224      	movs	r2, #36	; 0x24
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0201 	bic.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800319a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031ac:	f003 fbda 	bl	8006964 <HAL_RCC_GetPCLK1Freq>
 80031b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	4a81      	ldr	r2, [pc, #516]	; (80033bc <HAL_I2C_Init+0x274>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d807      	bhi.n	80031cc <HAL_I2C_Init+0x84>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4a80      	ldr	r2, [pc, #512]	; (80033c0 <HAL_I2C_Init+0x278>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	bf94      	ite	ls
 80031c4:	2301      	movls	r3, #1
 80031c6:	2300      	movhi	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	e006      	b.n	80031da <HAL_I2C_Init+0x92>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4a7d      	ldr	r2, [pc, #500]	; (80033c4 <HAL_I2C_Init+0x27c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	bf94      	ite	ls
 80031d4:	2301      	movls	r3, #1
 80031d6:	2300      	movhi	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e0e7      	b.n	80033b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4a78      	ldr	r2, [pc, #480]	; (80033c8 <HAL_I2C_Init+0x280>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	0c9b      	lsrs	r3, r3, #18
 80031ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4a6a      	ldr	r2, [pc, #424]	; (80033bc <HAL_I2C_Init+0x274>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d802      	bhi.n	800321c <HAL_I2C_Init+0xd4>
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	3301      	adds	r3, #1
 800321a:	e009      	b.n	8003230 <HAL_I2C_Init+0xe8>
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003222:	fb02 f303 	mul.w	r3, r2, r3
 8003226:	4a69      	ldr	r2, [pc, #420]	; (80033cc <HAL_I2C_Init+0x284>)
 8003228:	fba2 2303 	umull	r2, r3, r2, r3
 800322c:	099b      	lsrs	r3, r3, #6
 800322e:	3301      	adds	r3, #1
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	430b      	orrs	r3, r1
 8003236:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003242:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	495c      	ldr	r1, [pc, #368]	; (80033bc <HAL_I2C_Init+0x274>)
 800324c:	428b      	cmp	r3, r1
 800324e:	d819      	bhi.n	8003284 <HAL_I2C_Init+0x13c>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1e59      	subs	r1, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	fbb1 f3f3 	udiv	r3, r1, r3
 800325e:	1c59      	adds	r1, r3, #1
 8003260:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003264:	400b      	ands	r3, r1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00a      	beq.n	8003280 <HAL_I2C_Init+0x138>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	1e59      	subs	r1, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	fbb1 f3f3 	udiv	r3, r1, r3
 8003278:	3301      	adds	r3, #1
 800327a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800327e:	e051      	b.n	8003324 <HAL_I2C_Init+0x1dc>
 8003280:	2304      	movs	r3, #4
 8003282:	e04f      	b.n	8003324 <HAL_I2C_Init+0x1dc>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d111      	bne.n	80032b0 <HAL_I2C_Init+0x168>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1e58      	subs	r0, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6859      	ldr	r1, [r3, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	440b      	add	r3, r1
 800329a:	fbb0 f3f3 	udiv	r3, r0, r3
 800329e:	3301      	adds	r3, #1
 80032a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	bf0c      	ite	eq
 80032a8:	2301      	moveq	r3, #1
 80032aa:	2300      	movne	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e012      	b.n	80032d6 <HAL_I2C_Init+0x18e>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	1e58      	subs	r0, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6859      	ldr	r1, [r3, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	0099      	lsls	r1, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032c6:	3301      	adds	r3, #1
 80032c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	bf0c      	ite	eq
 80032d0:	2301      	moveq	r3, #1
 80032d2:	2300      	movne	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_I2C_Init+0x196>
 80032da:	2301      	movs	r3, #1
 80032dc:	e022      	b.n	8003324 <HAL_I2C_Init+0x1dc>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10e      	bne.n	8003304 <HAL_I2C_Init+0x1bc>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1e58      	subs	r0, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6859      	ldr	r1, [r3, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	440b      	add	r3, r1
 80032f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80032f8:	3301      	adds	r3, #1
 80032fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003302:	e00f      	b.n	8003324 <HAL_I2C_Init+0x1dc>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	1e58      	subs	r0, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6859      	ldr	r1, [r3, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	0099      	lsls	r1, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	fbb0 f3f3 	udiv	r3, r0, r3
 800331a:	3301      	adds	r3, #1
 800331c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003320:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	6809      	ldr	r1, [r1, #0]
 8003328:	4313      	orrs	r3, r2
 800332a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69da      	ldr	r2, [r3, #28]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003352:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6911      	ldr	r1, [r2, #16]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68d2      	ldr	r2, [r2, #12]
 800335e:	4311      	orrs	r1, r2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	430b      	orrs	r3, r1
 8003366:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695a      	ldr	r2, [r3, #20]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	000186a0 	.word	0x000186a0
 80033c0:	001e847f 	.word	0x001e847f
 80033c4:	003d08ff 	.word	0x003d08ff
 80033c8:	431bde83 	.word	0x431bde83
 80033cc:	10624dd3 	.word	0x10624dd3

080033d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af02      	add	r7, sp, #8
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	461a      	mov	r2, r3
 80033dc:	460b      	mov	r3, r1
 80033de:	817b      	strh	r3, [r7, #10]
 80033e0:	4613      	mov	r3, r2
 80033e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033e4:	f7ff f8e6 	bl	80025b4 <HAL_GetTick>
 80033e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b20      	cmp	r3, #32
 80033f4:	f040 80e0 	bne.w	80035b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	2319      	movs	r3, #25
 80033fe:	2201      	movs	r2, #1
 8003400:	4970      	ldr	r1, [pc, #448]	; (80035c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f001 fa24 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800340e:	2302      	movs	r3, #2
 8003410:	e0d3      	b.n	80035ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_I2C_Master_Transmit+0x50>
 800341c:	2302      	movs	r3, #2
 800341e:	e0cc      	b.n	80035ba <HAL_I2C_Master_Transmit+0x1ea>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b01      	cmp	r3, #1
 8003434:	d007      	beq.n	8003446 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f042 0201 	orr.w	r2, r2, #1
 8003444:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003454:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2221      	movs	r2, #33	; 0x21
 800345a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2210      	movs	r2, #16
 8003462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	893a      	ldrh	r2, [r7, #8]
 8003476:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4a50      	ldr	r2, [pc, #320]	; (80035c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003486:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003488:	8979      	ldrh	r1, [r7, #10]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	6a3a      	ldr	r2, [r7, #32]
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 ff10 	bl	80042b4 <I2C_MasterRequestWrite>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e08d      	b.n	80035ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800349e:	2300      	movs	r3, #0
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80034b4:	e066      	b.n	8003584 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	6a39      	ldr	r1, [r7, #32]
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f001 fa9e 	bl	80049fc <I2C_WaitOnTXEFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00d      	beq.n	80034e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d107      	bne.n	80034de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e06b      	b.n	80035ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	781a      	ldrb	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b04      	cmp	r3, #4
 800351e:	d11b      	bne.n	8003558 <HAL_I2C_Master_Transmit+0x188>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003524:	2b00      	cmp	r3, #0
 8003526:	d017      	beq.n	8003558 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	781a      	ldrb	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003542:	b29b      	uxth	r3, r3
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	6a39      	ldr	r1, [r7, #32]
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f001 fa8e 	bl	8004a7e <I2C_WaitOnBTFFlagUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00d      	beq.n	8003584 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	2b04      	cmp	r3, #4
 800356e:	d107      	bne.n	8003580 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800357e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e01a      	b.n	80035ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003588:	2b00      	cmp	r3, #0
 800358a:	d194      	bne.n	80034b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800359a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035b4:	2300      	movs	r3, #0
 80035b6:	e000      	b.n	80035ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80035b8:	2302      	movs	r3, #2
  }
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3718      	adds	r7, #24
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	00100002 	.word	0x00100002
 80035c8:	ffff0000 	.word	0xffff0000

080035cc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b08c      	sub	sp, #48	; 0x30
 80035d0:	af02      	add	r7, sp, #8
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	607a      	str	r2, [r7, #4]
 80035d6:	461a      	mov	r2, r3
 80035d8:	460b      	mov	r3, r1
 80035da:	817b      	strh	r3, [r7, #10]
 80035dc:	4613      	mov	r3, r2
 80035de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035e0:	f7fe ffe8 	bl	80025b4 <HAL_GetTick>
 80035e4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	f040 820b 	bne.w	8003a0a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	2319      	movs	r3, #25
 80035fa:	2201      	movs	r2, #1
 80035fc:	497c      	ldr	r1, [pc, #496]	; (80037f0 <HAL_I2C_Master_Receive+0x224>)
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f001 f926 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800360a:	2302      	movs	r3, #2
 800360c:	e1fe      	b.n	8003a0c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_I2C_Master_Receive+0x50>
 8003618:	2302      	movs	r3, #2
 800361a:	e1f7      	b.n	8003a0c <HAL_I2C_Master_Receive+0x440>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b01      	cmp	r3, #1
 8003630:	d007      	beq.n	8003642 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0201 	orr.w	r2, r2, #1
 8003640:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003650:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2222      	movs	r2, #34	; 0x22
 8003656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2210      	movs	r2, #16
 800365e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	893a      	ldrh	r2, [r7, #8]
 8003672:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4a5c      	ldr	r2, [pc, #368]	; (80037f4 <HAL_I2C_Master_Receive+0x228>)
 8003682:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003684:	8979      	ldrh	r1, [r7, #10]
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 fe94 	bl	80043b8 <I2C_MasterRequestRead>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e1b8      	b.n	8003a0c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d113      	bne.n	80036ca <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a2:	2300      	movs	r3, #0
 80036a4:	623b      	str	r3, [r7, #32]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	623b      	str	r3, [r7, #32]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	623b      	str	r3, [r7, #32]
 80036b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	e18c      	b.n	80039e4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d11b      	bne.n	800370a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	61fb      	str	r3, [r7, #28]
 80036f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	e16c      	b.n	80039e4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370e:	2b02      	cmp	r3, #2
 8003710:	d11b      	bne.n	800374a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003720:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003730:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003732:	2300      	movs	r3, #0
 8003734:	61bb      	str	r3, [r7, #24]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	61bb      	str	r3, [r7, #24]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	e14c      	b.n	80039e4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003758:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003770:	e138      	b.n	80039e4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003776:	2b03      	cmp	r3, #3
 8003778:	f200 80f1 	bhi.w	800395e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003780:	2b01      	cmp	r3, #1
 8003782:	d123      	bne.n	80037cc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003786:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f001 f9b9 	bl	8004b00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e139      	b.n	8003a0c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691a      	ldr	r2, [r3, #16]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037ca:	e10b      	b.n	80039e4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d14e      	bne.n	8003872 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037da:	2200      	movs	r2, #0
 80037dc:	4906      	ldr	r1, [pc, #24]	; (80037f8 <HAL_I2C_Master_Receive+0x22c>)
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f001 f836 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d008      	beq.n	80037fc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e10e      	b.n	8003a0c <HAL_I2C_Master_Receive+0x440>
 80037ee:	bf00      	nop
 80037f0:	00100002 	.word	0x00100002
 80037f4:	ffff0000 	.word	0xffff0000
 80037f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003870:	e0b8      	b.n	80039e4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003878:	2200      	movs	r2, #0
 800387a:	4966      	ldr	r1, [pc, #408]	; (8003a14 <HAL_I2C_Master_Receive+0x448>)
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 ffe7 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0bf      	b.n	8003a0c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800389a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d4:	2200      	movs	r2, #0
 80038d6:	494f      	ldr	r1, [pc, #316]	; (8003a14 <HAL_I2C_Master_Receive+0x448>)
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 ffb9 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e091      	b.n	8003a0c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691a      	ldr	r2, [r3, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800395c:	e042      	b.n	80039e4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800395e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003960:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f001 f8cc 	bl	8004b00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e04c      	b.n	8003a0c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691a      	ldr	r2, [r3, #16]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d118      	bne.n	80039e4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f47f aec2 	bne.w	8003772 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	e000      	b.n	8003a0c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a0a:	2302      	movs	r3, #2
  }
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3728      	adds	r7, #40	; 0x28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	00010004 	.word	0x00010004

08003a18 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	4608      	mov	r0, r1
 8003a22:	4611      	mov	r1, r2
 8003a24:	461a      	mov	r2, r3
 8003a26:	4603      	mov	r3, r0
 8003a28:	817b      	strh	r3, [r7, #10]
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	813b      	strh	r3, [r7, #8]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a32:	f7fe fdbf 	bl	80025b4 <HAL_GetTick>
 8003a36:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	f040 80d9 	bne.w	8003bf8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	2319      	movs	r3, #25
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	496d      	ldr	r1, [pc, #436]	; (8003c04 <HAL_I2C_Mem_Write+0x1ec>)
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 fefd 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e0cc      	b.n	8003bfa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_I2C_Mem_Write+0x56>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e0c5      	b.n	8003bfa <HAL_I2C_Mem_Write+0x1e2>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d007      	beq.n	8003a94 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0201 	orr.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aa2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2221      	movs	r2, #33	; 0x21
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2240      	movs	r2, #64	; 0x40
 8003ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a3a      	ldr	r2, [r7, #32]
 8003abe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4a4d      	ldr	r2, [pc, #308]	; (8003c08 <HAL_I2C_Mem_Write+0x1f0>)
 8003ad4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ad6:	88f8      	ldrh	r0, [r7, #6]
 8003ad8:	893a      	ldrh	r2, [r7, #8]
 8003ada:	8979      	ldrh	r1, [r7, #10]
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	9301      	str	r3, [sp, #4]
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 fd34 	bl	8004554 <I2C_RequestMemoryWrite>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d052      	beq.n	8003b98 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e081      	b.n	8003bfa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 ff7e 	bl	80049fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00d      	beq.n	8003b22 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d107      	bne.n	8003b1e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e06b      	b.n	8003bfa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	781a      	ldrb	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d11b      	bne.n	8003b98 <HAL_I2C_Mem_Write+0x180>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d017      	beq.n	8003b98 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	781a      	ldrb	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1aa      	bne.n	8003af6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 ff6a 	bl	8004a7e <I2C_WaitOnBTFFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00d      	beq.n	8003bcc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d107      	bne.n	8003bc8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e016      	b.n	8003bfa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	e000      	b.n	8003bfa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bf8:	2302      	movs	r3, #2
  }
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	00100002 	.word	0x00100002
 8003c08:	ffff0000 	.word	0xffff0000

08003c0c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08c      	sub	sp, #48	; 0x30
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	4608      	mov	r0, r1
 8003c16:	4611      	mov	r1, r2
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	817b      	strh	r3, [r7, #10]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	813b      	strh	r3, [r7, #8]
 8003c22:	4613      	mov	r3, r2
 8003c24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c26:	f7fe fcc5 	bl	80025b4 <HAL_GetTick>
 8003c2a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	f040 8208 	bne.w	800404a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	2319      	movs	r3, #25
 8003c40:	2201      	movs	r2, #1
 8003c42:	497b      	ldr	r1, [pc, #492]	; (8003e30 <HAL_I2C_Mem_Read+0x224>)
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 fe03 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c50:	2302      	movs	r3, #2
 8003c52:	e1fb      	b.n	800404c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d101      	bne.n	8003c62 <HAL_I2C_Mem_Read+0x56>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	e1f4      	b.n	800404c <HAL_I2C_Mem_Read+0x440>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d007      	beq.n	8003c88 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2222      	movs	r2, #34	; 0x22
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2240      	movs	r2, #64	; 0x40
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4a5b      	ldr	r2, [pc, #364]	; (8003e34 <HAL_I2C_Mem_Read+0x228>)
 8003cc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cca:	88f8      	ldrh	r0, [r7, #6]
 8003ccc:	893a      	ldrh	r2, [r7, #8]
 8003cce:	8979      	ldrh	r1, [r7, #10]
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	9301      	str	r3, [sp, #4]
 8003cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	4603      	mov	r3, r0
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 fcd0 	bl	8004680 <I2C_RequestMemoryRead>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e1b0      	b.n	800404c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d113      	bne.n	8003d1a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	623b      	str	r3, [r7, #32]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	623b      	str	r3, [r7, #32]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	623b      	str	r3, [r7, #32]
 8003d06:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	e184      	b.n	8004024 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d11b      	bne.n	8003d5a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	61fb      	str	r3, [r7, #28]
 8003d46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e164      	b.n	8004024 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d11b      	bne.n	8003d9a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d70:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d82:	2300      	movs	r3, #0
 8003d84:	61bb      	str	r3, [r7, #24]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	61bb      	str	r3, [r7, #24]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	61bb      	str	r3, [r7, #24]
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	e144      	b.n	8004024 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003db0:	e138      	b.n	8004024 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	f200 80f1 	bhi.w	8003f9e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d123      	bne.n	8003e0c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 fe99 	bl	8004b00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e139      	b.n	800404c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e0a:	e10b      	b.n	8004024 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d14e      	bne.n	8003eb2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	4906      	ldr	r1, [pc, #24]	; (8003e38 <HAL_I2C_Mem_Read+0x22c>)
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 fd16 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d008      	beq.n	8003e3c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e10e      	b.n	800404c <HAL_I2C_Mem_Read+0x440>
 8003e2e:	bf00      	nop
 8003e30:	00100002 	.word	0x00100002
 8003e34:	ffff0000 	.word	0xffff0000
 8003e38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691a      	ldr	r2, [r3, #16]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003eb0:	e0b8      	b.n	8004024 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb8:	2200      	movs	r2, #0
 8003eba:	4966      	ldr	r1, [pc, #408]	; (8004054 <HAL_I2C_Mem_Read+0x448>)
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 fcc7 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0bf      	b.n	800404c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691a      	ldr	r2, [r3, #16]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f14:	2200      	movs	r2, #0
 8003f16:	494f      	ldr	r1, [pc, #316]	; (8004054 <HAL_I2C_Mem_Read+0x448>)
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 fc99 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e091      	b.n	800404c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691a      	ldr	r2, [r3, #16]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f9c:	e042      	b.n	8004024 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 fdac 	bl	8004b00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e04c      	b.n	800404c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d118      	bne.n	8004024 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400e:	3b01      	subs	r3, #1
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004028:	2b00      	cmp	r3, #0
 800402a:	f47f aec2 	bne.w	8003db2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	e000      	b.n	800404c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800404a:	2302      	movs	r3, #2
  }
}
 800404c:	4618      	mov	r0, r3
 800404e:	3728      	adds	r7, #40	; 0x28
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	00010004 	.word	0x00010004

08004058 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08a      	sub	sp, #40	; 0x28
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	607a      	str	r2, [r7, #4]
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	460b      	mov	r3, r1
 8004066:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004068:	f7fe faa4 	bl	80025b4 <HAL_GetTick>
 800406c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b20      	cmp	r3, #32
 800407c:	f040 8111 	bne.w	80042a2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	2319      	movs	r3, #25
 8004086:	2201      	movs	r2, #1
 8004088:	4988      	ldr	r1, [pc, #544]	; (80042ac <HAL_I2C_IsDeviceReady+0x254>)
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 fbe0 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004096:	2302      	movs	r3, #2
 8004098:	e104      	b.n	80042a4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_I2C_IsDeviceReady+0x50>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e0fd      	b.n	80042a4 <HAL_I2C_IsDeviceReady+0x24c>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d007      	beq.n	80040ce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 0201 	orr.w	r2, r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2224      	movs	r2, #36	; 0x24
 80040e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4a70      	ldr	r2, [pc, #448]	; (80042b0 <HAL_I2C_IsDeviceReady+0x258>)
 80040f0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004100:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2200      	movs	r2, #0
 800410a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 fb9e 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00d      	beq.n	8004136 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004128:	d103      	bne.n	8004132 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004130:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e0b6      	b.n	80042a4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004136:	897b      	ldrh	r3, [r7, #10]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	461a      	mov	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004144:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004146:	f7fe fa35 	bl	80025b4 <HAL_GetTick>
 800414a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b02      	cmp	r3, #2
 8004158:	bf0c      	ite	eq
 800415a:	2301      	moveq	r3, #1
 800415c:	2300      	movne	r3, #0
 800415e:	b2db      	uxtb	r3, r3
 8004160:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800416c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004170:	bf0c      	ite	eq
 8004172:	2301      	moveq	r3, #1
 8004174:	2300      	movne	r3, #0
 8004176:	b2db      	uxtb	r3, r3
 8004178:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800417a:	e025      	b.n	80041c8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800417c:	f7fe fa1a 	bl	80025b4 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	429a      	cmp	r2, r3
 800418a:	d302      	bcc.n	8004192 <HAL_I2C_IsDeviceReady+0x13a>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d103      	bne.n	800419a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	22a0      	movs	r2, #160	; 0xa0
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	bf0c      	ite	eq
 80041a8:	2301      	moveq	r3, #1
 80041aa:	2300      	movne	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041be:	bf0c      	ite	eq
 80041c0:	2301      	moveq	r3, #1
 80041c2:	2300      	movne	r3, #0
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2ba0      	cmp	r3, #160	; 0xa0
 80041d2:	d005      	beq.n	80041e0 <HAL_I2C_IsDeviceReady+0x188>
 80041d4:	7dfb      	ldrb	r3, [r7, #23]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d102      	bne.n	80041e0 <HAL_I2C_IsDeviceReady+0x188>
 80041da:	7dbb      	ldrb	r3, [r7, #22]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0cd      	beq.n	800417c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d129      	bne.n	800424a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004204:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004206:	2300      	movs	r3, #0
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	2319      	movs	r3, #25
 8004222:	2201      	movs	r2, #1
 8004224:	4921      	ldr	r1, [pc, #132]	; (80042ac <HAL_I2C_IsDeviceReady+0x254>)
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 fb12 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e036      	b.n	80042a4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	e02c      	b.n	80042a4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004258:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004262:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	2319      	movs	r3, #25
 800426a:	2201      	movs	r2, #1
 800426c:	490f      	ldr	r1, [pc, #60]	; (80042ac <HAL_I2C_IsDeviceReady+0x254>)
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 faee 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e012      	b.n	80042a4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	3301      	adds	r3, #1
 8004282:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	429a      	cmp	r2, r3
 800428a:	f4ff af32 	bcc.w	80040f2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2220      	movs	r2, #32
 8004292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80042a2:	2302      	movs	r3, #2
  }
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3720      	adds	r7, #32
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	00100002 	.word	0x00100002
 80042b0:	ffff0000 	.word	0xffff0000

080042b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	607a      	str	r2, [r7, #4]
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	460b      	mov	r3, r1
 80042c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d006      	beq.n	80042de <I2C_MasterRequestWrite+0x2a>
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d003      	beq.n	80042de <I2C_MasterRequestWrite+0x2a>
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042dc:	d108      	bne.n	80042f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	e00b      	b.n	8004308 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	2b12      	cmp	r3, #18
 80042f6:	d107      	bne.n	8004308 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004306:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 fa9b 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00d      	beq.n	800433c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800432e:	d103      	bne.n	8004338 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004336:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e035      	b.n	80043a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004344:	d108      	bne.n	8004358 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004346:	897b      	ldrh	r3, [r7, #10]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	461a      	mov	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004354:	611a      	str	r2, [r3, #16]
 8004356:	e01b      	b.n	8004390 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004358:	897b      	ldrh	r3, [r7, #10]
 800435a:	11db      	asrs	r3, r3, #7
 800435c:	b2db      	uxtb	r3, r3
 800435e:	f003 0306 	and.w	r3, r3, #6
 8004362:	b2db      	uxtb	r3, r3
 8004364:	f063 030f 	orn	r3, r3, #15
 8004368:	b2da      	uxtb	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	490e      	ldr	r1, [pc, #56]	; (80043b0 <I2C_MasterRequestWrite+0xfc>)
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 fac1 	bl	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e010      	b.n	80043a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004386:	897b      	ldrh	r3, [r7, #10]
 8004388:	b2da      	uxtb	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	4907      	ldr	r1, [pc, #28]	; (80043b4 <I2C_MasterRequestWrite+0x100>)
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 fab1 	bl	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e000      	b.n	80043a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	00010008 	.word	0x00010008
 80043b4:	00010002 	.word	0x00010002

080043b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af02      	add	r7, sp, #8
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	607a      	str	r2, [r7, #4]
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	460b      	mov	r3, r1
 80043c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d006      	beq.n	80043f2 <I2C_MasterRequestRead+0x3a>
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d003      	beq.n	80043f2 <I2C_MasterRequestRead+0x3a>
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043f0:	d108      	bne.n	8004404 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	e00b      	b.n	800441c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004408:	2b11      	cmp	r3, #17
 800440a:	d107      	bne.n	800441c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800441a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 fa11 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00d      	beq.n	8004450 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004442:	d103      	bne.n	800444c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800444a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e079      	b.n	8004544 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004458:	d108      	bne.n	800446c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800445a:	897b      	ldrh	r3, [r7, #10]
 800445c:	b2db      	uxtb	r3, r3
 800445e:	f043 0301 	orr.w	r3, r3, #1
 8004462:	b2da      	uxtb	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	611a      	str	r2, [r3, #16]
 800446a:	e05f      	b.n	800452c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800446c:	897b      	ldrh	r3, [r7, #10]
 800446e:	11db      	asrs	r3, r3, #7
 8004470:	b2db      	uxtb	r3, r3
 8004472:	f003 0306 	and.w	r3, r3, #6
 8004476:	b2db      	uxtb	r3, r3
 8004478:	f063 030f 	orn	r3, r3, #15
 800447c:	b2da      	uxtb	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	4930      	ldr	r1, [pc, #192]	; (800454c <I2C_MasterRequestRead+0x194>)
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 fa37 	bl	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e054      	b.n	8004544 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800449a:	897b      	ldrh	r3, [r7, #10]
 800449c:	b2da      	uxtb	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	4929      	ldr	r1, [pc, #164]	; (8004550 <I2C_MasterRequestRead+0x198>)
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 fa27 	bl	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e044      	b.n	8004544 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ba:	2300      	movs	r3, #0
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	613b      	str	r3, [r7, #16]
 80044ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f9af 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00d      	beq.n	8004514 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004506:	d103      	bne.n	8004510 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800450e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e017      	b.n	8004544 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004514:	897b      	ldrh	r3, [r7, #10]
 8004516:	11db      	asrs	r3, r3, #7
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f003 0306 	and.w	r3, r3, #6
 800451e:	b2db      	uxtb	r3, r3
 8004520:	f063 030e 	orn	r3, r3, #14
 8004524:	b2da      	uxtb	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	4907      	ldr	r1, [pc, #28]	; (8004550 <I2C_MasterRequestRead+0x198>)
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 f9e3 	bl	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	00010008 	.word	0x00010008
 8004550:	00010002 	.word	0x00010002

08004554 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	4608      	mov	r0, r1
 800455e:	4611      	mov	r1, r2
 8004560:	461a      	mov	r2, r3
 8004562:	4603      	mov	r3, r0
 8004564:	817b      	strh	r3, [r7, #10]
 8004566:	460b      	mov	r3, r1
 8004568:	813b      	strh	r3, [r7, #8]
 800456a:	4613      	mov	r3, r2
 800456c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800457c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	2200      	movs	r2, #0
 8004586:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 f960 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00d      	beq.n	80045b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a4:	d103      	bne.n	80045ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e05f      	b.n	8004672 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045b2:	897b      	ldrh	r3, [r7, #10]
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	461a      	mov	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	6a3a      	ldr	r2, [r7, #32]
 80045c6:	492d      	ldr	r1, [pc, #180]	; (800467c <I2C_RequestMemoryWrite+0x128>)
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 f998 	bl	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e04c      	b.n	8004672 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f0:	6a39      	ldr	r1, [r7, #32]
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 fa02 	bl	80049fc <I2C_WaitOnTXEFlagUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00d      	beq.n	800461a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	2b04      	cmp	r3, #4
 8004604:	d107      	bne.n	8004616 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004614:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e02b      	b.n	8004672 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d105      	bne.n	800462c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004620:	893b      	ldrh	r3, [r7, #8]
 8004622:	b2da      	uxtb	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	611a      	str	r2, [r3, #16]
 800462a:	e021      	b.n	8004670 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800462c:	893b      	ldrh	r3, [r7, #8]
 800462e:	0a1b      	lsrs	r3, r3, #8
 8004630:	b29b      	uxth	r3, r3
 8004632:	b2da      	uxtb	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800463a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463c:	6a39      	ldr	r1, [r7, #32]
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 f9dc 	bl	80049fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00d      	beq.n	8004666 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	2b04      	cmp	r3, #4
 8004650:	d107      	bne.n	8004662 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004660:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e005      	b.n	8004672 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004666:	893b      	ldrh	r3, [r7, #8]
 8004668:	b2da      	uxtb	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	00010002 	.word	0x00010002

08004680 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af02      	add	r7, sp, #8
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	4608      	mov	r0, r1
 800468a:	4611      	mov	r1, r2
 800468c:	461a      	mov	r2, r3
 800468e:	4603      	mov	r3, r0
 8004690:	817b      	strh	r3, [r7, #10]
 8004692:	460b      	mov	r3, r1
 8004694:	813b      	strh	r3, [r7, #8]
 8004696:	4613      	mov	r3, r2
 8004698:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 f8c2 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00d      	beq.n	80046ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e0:	d103      	bne.n	80046ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e0aa      	b.n	8004844 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046ee:	897b      	ldrh	r3, [r7, #10]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	461a      	mov	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	6a3a      	ldr	r2, [r7, #32]
 8004702:	4952      	ldr	r1, [pc, #328]	; (800484c <I2C_RequestMemoryRead+0x1cc>)
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 f8fa 	bl	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e097      	b.n	8004844 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004714:	2300      	movs	r3, #0
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800472a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472c:	6a39      	ldr	r1, [r7, #32]
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 f964 	bl	80049fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00d      	beq.n	8004756 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	2b04      	cmp	r3, #4
 8004740:	d107      	bne.n	8004752 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004750:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e076      	b.n	8004844 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004756:	88fb      	ldrh	r3, [r7, #6]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d105      	bne.n	8004768 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800475c:	893b      	ldrh	r3, [r7, #8]
 800475e:	b2da      	uxtb	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	611a      	str	r2, [r3, #16]
 8004766:	e021      	b.n	80047ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004768:	893b      	ldrh	r3, [r7, #8]
 800476a:	0a1b      	lsrs	r3, r3, #8
 800476c:	b29b      	uxth	r3, r3
 800476e:	b2da      	uxtb	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004778:	6a39      	ldr	r1, [r7, #32]
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f000 f93e 	bl	80049fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00d      	beq.n	80047a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	2b04      	cmp	r3, #4
 800478c:	d107      	bne.n	800479e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800479c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e050      	b.n	8004844 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047a2:	893b      	ldrh	r3, [r7, #8]
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ae:	6a39      	ldr	r1, [r7, #32]
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 f923 	bl	80049fc <I2C_WaitOnTXEFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00d      	beq.n	80047d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d107      	bne.n	80047d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e035      	b.n	8004844 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 f82b 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00d      	beq.n	800481c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800480e:	d103      	bne.n	8004818 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004816:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e013      	b.n	8004844 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800481c:	897b      	ldrh	r3, [r7, #10]
 800481e:	b2db      	uxtb	r3, r3
 8004820:	f043 0301 	orr.w	r3, r3, #1
 8004824:	b2da      	uxtb	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	6a3a      	ldr	r2, [r7, #32]
 8004830:	4906      	ldr	r1, [pc, #24]	; (800484c <I2C_RequestMemoryRead+0x1cc>)
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 f863 	bl	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	00010002 	.word	0x00010002

08004850 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	4613      	mov	r3, r2
 800485e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004860:	e025      	b.n	80048ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004868:	d021      	beq.n	80048ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800486a:	f7fd fea3 	bl	80025b4 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d302      	bcc.n	8004880 <I2C_WaitOnFlagUntilTimeout+0x30>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d116      	bne.n	80048ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2220      	movs	r2, #32
 800488a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	f043 0220 	orr.w	r2, r3, #32
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e023      	b.n	80048f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	0c1b      	lsrs	r3, r3, #16
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d10d      	bne.n	80048d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	43da      	mvns	r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4013      	ands	r3, r2
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	bf0c      	ite	eq
 80048ca:	2301      	moveq	r3, #1
 80048cc:	2300      	movne	r3, #0
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	461a      	mov	r2, r3
 80048d2:	e00c      	b.n	80048ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	43da      	mvns	r2, r3
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4013      	ands	r3, r2
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	bf0c      	ite	eq
 80048e6:	2301      	moveq	r3, #1
 80048e8:	2300      	movne	r3, #0
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d0b6      	beq.n	8004862 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b084      	sub	sp, #16
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	607a      	str	r2, [r7, #4]
 800490a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800490c:	e051      	b.n	80049b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491c:	d123      	bne.n	8004966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004936:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	f043 0204 	orr.w	r2, r3, #4
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e046      	b.n	80049f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496c:	d021      	beq.n	80049b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800496e:	f7fd fe21 	bl	80025b4 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	429a      	cmp	r2, r3
 800497c:	d302      	bcc.n	8004984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d116      	bne.n	80049b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	f043 0220 	orr.w	r2, r3, #32
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e020      	b.n	80049f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	0c1b      	lsrs	r3, r3, #16
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d10c      	bne.n	80049d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	43da      	mvns	r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	4013      	ands	r3, r2
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	bf14      	ite	ne
 80049ce:	2301      	movne	r3, #1
 80049d0:	2300      	moveq	r3, #0
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	e00b      	b.n	80049ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	43da      	mvns	r2, r3
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	4013      	ands	r3, r2
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	bf14      	ite	ne
 80049e8:	2301      	movne	r3, #1
 80049ea:	2300      	moveq	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d18d      	bne.n	800490e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a08:	e02d      	b.n	8004a66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 f8ce 	bl	8004bac <I2C_IsAcknowledgeFailed>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e02d      	b.n	8004a76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a20:	d021      	beq.n	8004a66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a22:	f7fd fdc7 	bl	80025b4 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d302      	bcc.n	8004a38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d116      	bne.n	8004a66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f043 0220 	orr.w	r2, r3, #32
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e007      	b.n	8004a76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a70:	2b80      	cmp	r3, #128	; 0x80
 8004a72:	d1ca      	bne.n	8004a0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b084      	sub	sp, #16
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	60f8      	str	r0, [r7, #12]
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a8a:	e02d      	b.n	8004ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 f88d 	bl	8004bac <I2C_IsAcknowledgeFailed>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e02d      	b.n	8004af8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa2:	d021      	beq.n	8004ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa4:	f7fd fd86 	bl	80025b4 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d302      	bcc.n	8004aba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d116      	bne.n	8004ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	f043 0220 	orr.w	r2, r3, #32
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e007      	b.n	8004af8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d1ca      	bne.n	8004a8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b0c:	e042      	b.n	8004b94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	f003 0310 	and.w	r3, r3, #16
 8004b18:	2b10      	cmp	r3, #16
 8004b1a:	d119      	bne.n	8004b50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0210 	mvn.w	r2, #16
 8004b24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e029      	b.n	8004ba4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b50:	f7fd fd30 	bl	80025b4 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d302      	bcc.n	8004b66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d116      	bne.n	8004b94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	f043 0220 	orr.w	r2, r3, #32
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e007      	b.n	8004ba4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9e:	2b40      	cmp	r3, #64	; 0x40
 8004ba0:	d1b5      	bne.n	8004b0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc2:	d11b      	bne.n	8004bfc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bcc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	f043 0204 	orr.w	r2, r3, #4
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c0c:	b08f      	sub	sp, #60	; 0x3c
 8004c0e:	af0a      	add	r7, sp, #40	; 0x28
 8004c10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e10f      	b.n	8004e3c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f009 fe70 	bl	800e91c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2203      	movs	r2, #3
 8004c40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d102      	bne.n	8004c56 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f002 ff67 	bl	8007b2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	603b      	str	r3, [r7, #0]
 8004c66:	687e      	ldr	r6, [r7, #4]
 8004c68:	466d      	mov	r5, sp
 8004c6a:	f106 0410 	add.w	r4, r6, #16
 8004c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c7e:	1d33      	adds	r3, r6, #4
 8004c80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c82:	6838      	ldr	r0, [r7, #0]
 8004c84:	f002 fe3e 	bl	8007904 <USB_CoreInit>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d005      	beq.n	8004c9a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2202      	movs	r2, #2
 8004c92:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e0d0      	b.n	8004e3c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f002 ff55 	bl	8007b50 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	73fb      	strb	r3, [r7, #15]
 8004caa:	e04a      	b.n	8004d42 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004cac:	7bfa      	ldrb	r2, [r7, #15]
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	333d      	adds	r3, #61	; 0x3d
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004cc0:	7bfa      	ldrb	r2, [r7, #15]
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	4413      	add	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	333c      	adds	r3, #60	; 0x3c
 8004cd0:	7bfa      	ldrb	r2, [r7, #15]
 8004cd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004cd4:	7bfa      	ldrb	r2, [r7, #15]
 8004cd6:	7bfb      	ldrb	r3, [r7, #15]
 8004cd8:	b298      	uxth	r0, r3
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	3344      	adds	r3, #68	; 0x44
 8004ce8:	4602      	mov	r2, r0
 8004cea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004cec:	7bfa      	ldrb	r2, [r7, #15]
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	3340      	adds	r3, #64	; 0x40
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d00:	7bfa      	ldrb	r2, [r7, #15]
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	4613      	mov	r3, r2
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	4413      	add	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	3348      	adds	r3, #72	; 0x48
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d14:	7bfa      	ldrb	r2, [r7, #15]
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	334c      	adds	r3, #76	; 0x4c
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d28:	7bfa      	ldrb	r2, [r7, #15]
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	3354      	adds	r3, #84	; 0x54
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	73fb      	strb	r3, [r7, #15]
 8004d42:	7bfa      	ldrb	r2, [r7, #15]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d3af      	bcc.n	8004cac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	73fb      	strb	r3, [r7, #15]
 8004d50:	e044      	b.n	8004ddc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d52:	7bfa      	ldrb	r2, [r7, #15]
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	440b      	add	r3, r1
 8004d60:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004d64:	2200      	movs	r2, #0
 8004d66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d68:	7bfa      	ldrb	r2, [r7, #15]
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	4413      	add	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004d7a:	7bfa      	ldrb	r2, [r7, #15]
 8004d7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d7e:	7bfa      	ldrb	r2, [r7, #15]
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	4613      	mov	r3, r2
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	440b      	add	r3, r1
 8004d8c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004d90:	2200      	movs	r2, #0
 8004d92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d94:	7bfa      	ldrb	r2, [r7, #15]
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004daa:	7bfa      	ldrb	r2, [r7, #15]
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	440b      	add	r3, r1
 8004db8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004dc0:	7bfa      	ldrb	r2, [r7, #15]
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	440b      	add	r3, r1
 8004dce:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	73fb      	strb	r3, [r7, #15]
 8004ddc:	7bfa      	ldrb	r2, [r7, #15]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d3b5      	bcc.n	8004d52 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	603b      	str	r3, [r7, #0]
 8004dec:	687e      	ldr	r6, [r7, #4]
 8004dee:	466d      	mov	r5, sp
 8004df0:	f106 0410 	add.w	r4, r6, #16
 8004df4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004df6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004df8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e00:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e04:	1d33      	adds	r3, r6, #4
 8004e06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e08:	6838      	ldr	r0, [r7, #0]
 8004e0a:	f002 feed 	bl	8007be8 <USB_DevInit>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d005      	beq.n	8004e20 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e00d      	b.n	8004e3c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f004 f83c 	bl	8008eb2 <USB_DevDisconnect>

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e44 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_PCD_Start+0x1c>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e020      	b.n	8004ea2 <HAL_PCD_Start+0x5e>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d109      	bne.n	8004e84 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d005      	beq.n	8004e84 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f002 fe3f 	bl	8007b0c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f003 ffec 	bl	8008e70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004eaa:	b590      	push	{r4, r7, lr}
 8004eac:	b08d      	sub	sp, #52	; 0x34
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f004 f8aa 	bl	800901a <USB_GetMode>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f040 848a 	bne.w	80057e2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f004 f80e 	bl	8008ef4 <USB_ReadInterrupts>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 8480 	beq.w	80057e0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	0a1b      	lsrs	r3, r3, #8
 8004eea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f003 fffb 	bl	8008ef4 <USB_ReadInterrupts>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d107      	bne.n	8004f18 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695a      	ldr	r2, [r3, #20]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f002 0202 	and.w	r2, r2, #2
 8004f16:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f003 ffe9 	bl	8008ef4 <USB_ReadInterrupts>
 8004f22:	4603      	mov	r3, r0
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	2b10      	cmp	r3, #16
 8004f2a:	d161      	bne.n	8004ff0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0210 	bic.w	r2, r2, #16
 8004f3a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	f003 020f 	and.w	r2, r3, #15
 8004f48:	4613      	mov	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	4413      	add	r3, r2
 8004f58:	3304      	adds	r3, #4
 8004f5a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	0c5b      	lsrs	r3, r3, #17
 8004f60:	f003 030f 	and.w	r3, r3, #15
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d124      	bne.n	8004fb2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004f6e:	4013      	ands	r3, r2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d035      	beq.n	8004fe0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	091b      	lsrs	r3, r3, #4
 8004f7c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004f7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	461a      	mov	r2, r3
 8004f86:	6a38      	ldr	r0, [r7, #32]
 8004f88:	f003 fe20 	bl	8008bcc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	091b      	lsrs	r3, r3, #4
 8004f94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f98:	441a      	add	r2, r3
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	6a1a      	ldr	r2, [r3, #32]
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	091b      	lsrs	r3, r3, #4
 8004fa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004faa:	441a      	add	r2, r3
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	621a      	str	r2, [r3, #32]
 8004fb0:	e016      	b.n	8004fe0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	0c5b      	lsrs	r3, r3, #17
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	2b06      	cmp	r3, #6
 8004fbc:	d110      	bne.n	8004fe0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004fc4:	2208      	movs	r2, #8
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	6a38      	ldr	r0, [r7, #32]
 8004fca:	f003 fdff 	bl	8008bcc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	6a1a      	ldr	r2, [r3, #32]
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	091b      	lsrs	r3, r3, #4
 8004fd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fda:	441a      	add	r2, r3
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699a      	ldr	r2, [r3, #24]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0210 	orr.w	r2, r2, #16
 8004fee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f003 ff7d 	bl	8008ef4 <USB_ReadInterrupts>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005000:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005004:	f040 80a7 	bne.w	8005156 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f003 ff82 	bl	8008f1a <USB_ReadDevAllOutEpInterrupt>
 8005016:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005018:	e099      	b.n	800514e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800501a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 808e 	beq.w	8005142 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	4611      	mov	r1, r2
 8005030:	4618      	mov	r0, r3
 8005032:	f003 ffa6 	bl	8008f82 <USB_ReadDevOutEPInterrupt>
 8005036:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00c      	beq.n	800505c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504e:	461a      	mov	r2, r3
 8005050:	2301      	movs	r3, #1
 8005052:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fec2 	bl	8005de0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00c      	beq.n	8005080 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005072:	461a      	mov	r2, r3
 8005074:	2308      	movs	r3, #8
 8005076:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005078:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 ff98 	bl	8005fb0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f003 0310 	and.w	r3, r3, #16
 8005086:	2b00      	cmp	r3, #0
 8005088:	d008      	beq.n	800509c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005096:	461a      	mov	r2, r3
 8005098:	2310      	movs	r3, #16
 800509a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d030      	beq.n	8005108 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ae:	2b80      	cmp	r3, #128	; 0x80
 80050b0:	d109      	bne.n	80050c6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	69fa      	ldr	r2, [r7, #28]
 80050bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050c4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80050c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c8:	4613      	mov	r3, r2
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	4413      	add	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	4413      	add	r3, r2
 80050d8:	3304      	adds	r3, #4
 80050da:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	78db      	ldrb	r3, [r3, #3]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d108      	bne.n	80050f6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2200      	movs	r2, #0
 80050e8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	4619      	mov	r1, r3
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f009 fd0f 	bl	800eb14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005102:	461a      	mov	r2, r3
 8005104:	2302      	movs	r3, #2
 8005106:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	2b00      	cmp	r3, #0
 8005110:	d008      	beq.n	8005124 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511e:	461a      	mov	r2, r3
 8005120:	2320      	movs	r3, #32
 8005122:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d009      	beq.n	8005142 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513a:	461a      	mov	r2, r3
 800513c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005140:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	3301      	adds	r3, #1
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514a:	085b      	lsrs	r3, r3, #1
 800514c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005150:	2b00      	cmp	r3, #0
 8005152:	f47f af62 	bne.w	800501a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f003 feca 	bl	8008ef4 <USB_ReadInterrupts>
 8005160:	4603      	mov	r3, r0
 8005162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005166:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800516a:	f040 80db 	bne.w	8005324 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f003 feeb 	bl	8008f4e <USB_ReadDevAllInEpInterrupt>
 8005178:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800517e:	e0cd      	b.n	800531c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 80c2 	beq.w	8005310 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005192:	b2d2      	uxtb	r2, r2
 8005194:	4611      	mov	r1, r2
 8005196:	4618      	mov	r0, r3
 8005198:	f003 ff11 	bl	8008fbe <USB_ReadDevInEPInterrupt>
 800519c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d057      	beq.n	8005258 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	2201      	movs	r2, #1
 80051b0:	fa02 f303 	lsl.w	r3, r2, r3
 80051b4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	43db      	mvns	r3, r3
 80051c2:	69f9      	ldr	r1, [r7, #28]
 80051c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051c8:	4013      	ands	r3, r2
 80051ca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d8:	461a      	mov	r2, r3
 80051da:	2301      	movs	r3, #1
 80051dc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d132      	bne.n	800524c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ea:	4613      	mov	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	4413      	add	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	440b      	add	r3, r1
 80051f4:	334c      	adds	r3, #76	; 0x4c
 80051f6:	6819      	ldr	r1, [r3, #0]
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fc:	4613      	mov	r3, r2
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	4413      	add	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4403      	add	r3, r0
 8005206:	3348      	adds	r3, #72	; 0x48
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4419      	add	r1, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005210:	4613      	mov	r3, r2
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	4413      	add	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4403      	add	r3, r0
 800521a:	334c      	adds	r3, #76	; 0x4c
 800521c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	2b00      	cmp	r3, #0
 8005222:	d113      	bne.n	800524c <HAL_PCD_IRQHandler+0x3a2>
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005228:	4613      	mov	r3, r2
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	3354      	adds	r3, #84	; 0x54
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d108      	bne.n	800524c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6818      	ldr	r0, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005244:	461a      	mov	r2, r3
 8005246:	2101      	movs	r1, #1
 8005248:	f003 ff18 	bl	800907c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	b2db      	uxtb	r3, r3
 8005250:	4619      	mov	r1, r3
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f009 fbe3 	bl	800ea1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	f003 0308 	and.w	r3, r3, #8
 800525e:	2b00      	cmp	r3, #0
 8005260:	d008      	beq.n	8005274 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526e:	461a      	mov	r2, r3
 8005270:	2308      	movs	r3, #8
 8005272:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f003 0310 	and.w	r3, r3, #16
 800527a:	2b00      	cmp	r3, #0
 800527c:	d008      	beq.n	8005290 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	4413      	add	r3, r2
 8005286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528a:	461a      	mov	r2, r3
 800528c:	2310      	movs	r3, #16
 800528e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005296:	2b00      	cmp	r3, #0
 8005298:	d008      	beq.n	80052ac <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a6:	461a      	mov	r2, r3
 80052a8:	2340      	movs	r3, #64	; 0x40
 80052aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d023      	beq.n	80052fe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80052b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052b8:	6a38      	ldr	r0, [r7, #32]
 80052ba:	f002 fdf9 	bl	8007eb0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80052be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c0:	4613      	mov	r3, r2
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	4413      	add	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	3338      	adds	r3, #56	; 0x38
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	4413      	add	r3, r2
 80052ce:	3304      	adds	r3, #4
 80052d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	78db      	ldrb	r3, [r3, #3]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d108      	bne.n	80052ec <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2200      	movs	r2, #0
 80052de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	4619      	mov	r1, r3
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f009 fc26 	bl	800eb38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f8:	461a      	mov	r2, r3
 80052fa:	2302      	movs	r3, #2
 80052fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005308:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fcdb 	bl	8005cc6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	3301      	adds	r3, #1
 8005314:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005318:	085b      	lsrs	r3, r3, #1
 800531a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531e:	2b00      	cmp	r3, #0
 8005320:	f47f af2e 	bne.w	8005180 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4618      	mov	r0, r3
 800532a:	f003 fde3 	bl	8008ef4 <USB_ReadInterrupts>
 800532e:	4603      	mov	r3, r0
 8005330:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005334:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005338:	d122      	bne.n	8005380 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	69fa      	ldr	r2, [r7, #28]
 8005344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005348:	f023 0301 	bic.w	r3, r3, #1
 800534c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005354:	2b01      	cmp	r3, #1
 8005356:	d108      	bne.n	800536a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005360:	2100      	movs	r1, #0
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fec2 	bl	80060ec <HAL_PCDEx_LPM_Callback>
 8005368:	e002      	b.n	8005370 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f009 fbc4 	bl	800eaf8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	695a      	ldr	r2, [r3, #20]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800537e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4618      	mov	r0, r3
 8005386:	f003 fdb5 	bl	8008ef4 <USB_ReadInterrupts>
 800538a:	4603      	mov	r3, r0
 800538c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005394:	d112      	bne.n	80053bc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d102      	bne.n	80053ac <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f009 fb80 	bl	800eaac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695a      	ldr	r2, [r3, #20]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80053ba:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4618      	mov	r0, r3
 80053c2:	f003 fd97 	bl	8008ef4 <USB_ReadInterrupts>
 80053c6:	4603      	mov	r3, r0
 80053c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053d0:	f040 80b7 	bne.w	8005542 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053e2:	f023 0301 	bic.w	r3, r3, #1
 80053e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2110      	movs	r1, #16
 80053ee:	4618      	mov	r0, r3
 80053f0:	f002 fd5e 	bl	8007eb0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053f4:	2300      	movs	r3, #0
 80053f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053f8:	e046      	b.n	8005488 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80053fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	4413      	add	r3, r2
 8005402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005406:	461a      	mov	r2, r3
 8005408:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800540c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800540e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800541e:	0151      	lsls	r1, r2, #5
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	440a      	add	r2, r1
 8005424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005428:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800542c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800542e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543a:	461a      	mov	r2, r3
 800543c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005440:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	4413      	add	r3, r2
 800544a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005452:	0151      	lsls	r1, r2, #5
 8005454:	69fa      	ldr	r2, [r7, #28]
 8005456:	440a      	add	r2, r1
 8005458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800545c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005460:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	4413      	add	r3, r2
 800546a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005472:	0151      	lsls	r1, r2, #5
 8005474:	69fa      	ldr	r2, [r7, #28]
 8005476:	440a      	add	r2, r1
 8005478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800547c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005480:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005484:	3301      	adds	r3, #1
 8005486:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800548e:	429a      	cmp	r2, r3
 8005490:	d3b3      	bcc.n	80053fa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	69fa      	ldr	r2, [r7, #28]
 800549c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054a0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80054a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d016      	beq.n	80054dc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054b8:	69fa      	ldr	r2, [r7, #28]
 80054ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054be:	f043 030b 	orr.w	r3, r3, #11
 80054c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054d4:	f043 030b 	orr.w	r3, r3, #11
 80054d8:	6453      	str	r3, [r2, #68]	; 0x44
 80054da:	e015      	b.n	8005508 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80054ee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80054f2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	69fa      	ldr	r2, [r7, #28]
 80054fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005502:	f043 030b 	orr.w	r3, r3, #11
 8005506:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	69fa      	ldr	r2, [r7, #28]
 8005512:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005516:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800551a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6818      	ldr	r0, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800552c:	461a      	mov	r2, r3
 800552e:	f003 fda5 	bl	800907c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	695a      	ldr	r2, [r3, #20]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005540:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4618      	mov	r0, r3
 8005548:	f003 fcd4 	bl	8008ef4 <USB_ReadInterrupts>
 800554c:	4603      	mov	r3, r0
 800554e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005556:	d124      	bne.n	80055a2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4618      	mov	r0, r3
 800555e:	f003 fd6a 	bl	8009036 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f002 fd1f 	bl	8007faa <USB_GetDevSpeed>
 800556c:	4603      	mov	r3, r0
 800556e:	461a      	mov	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681c      	ldr	r4, [r3, #0]
 8005578:	f001 f9e8 	bl	800694c <HAL_RCC_GetHCLKFreq>
 800557c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005582:	b2db      	uxtb	r3, r3
 8005584:	461a      	mov	r2, r3
 8005586:	4620      	mov	r0, r4
 8005588:	f002 fa1e 	bl	80079c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f009 fa6e 	bl	800ea6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	695a      	ldr	r2, [r3, #20]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80055a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f003 fca4 	bl	8008ef4 <USB_ReadInterrupts>
 80055ac:	4603      	mov	r3, r0
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d10a      	bne.n	80055cc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f009 fa4b 	bl	800ea52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	695a      	ldr	r2, [r3, #20]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f002 0208 	and.w	r2, r2, #8
 80055ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f003 fc8f 	bl	8008ef4 <USB_ReadInterrupts>
 80055d6:	4603      	mov	r3, r0
 80055d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055dc:	2b80      	cmp	r3, #128	; 0x80
 80055de:	d122      	bne.n	8005626 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055ec:	2301      	movs	r3, #1
 80055ee:	627b      	str	r3, [r7, #36]	; 0x24
 80055f0:	e014      	b.n	800561c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f6:	4613      	mov	r3, r2
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	4413      	add	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	440b      	add	r3, r1
 8005600:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d105      	bne.n	8005616 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	b2db      	uxtb	r3, r3
 800560e:	4619      	mov	r1, r3
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fb27 	bl	8005c64 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	3301      	adds	r3, #1
 800561a:	627b      	str	r3, [r7, #36]	; 0x24
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005622:	429a      	cmp	r2, r3
 8005624:	d3e5      	bcc.n	80055f2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f003 fc62 	bl	8008ef4 <USB_ReadInterrupts>
 8005630:	4603      	mov	r3, r0
 8005632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800563a:	d13b      	bne.n	80056b4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800563c:	2301      	movs	r3, #1
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
 8005640:	e02b      	b.n	800569a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005656:	4613      	mov	r3, r2
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	4413      	add	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	440b      	add	r3, r1
 8005660:	3340      	adds	r3, #64	; 0x40
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d115      	bne.n	8005694 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005668:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800566a:	2b00      	cmp	r3, #0
 800566c:	da12      	bge.n	8005694 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800566e:	6879      	ldr	r1, [r7, #4]
 8005670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005672:	4613      	mov	r3, r2
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	440b      	add	r3, r1
 800567c:	333f      	adds	r3, #63	; 0x3f
 800567e:	2201      	movs	r2, #1
 8005680:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	b2db      	uxtb	r3, r3
 8005686:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800568a:	b2db      	uxtb	r3, r3
 800568c:	4619      	mov	r1, r3
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fae8 	bl	8005c64 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	3301      	adds	r3, #1
 8005698:	627b      	str	r3, [r7, #36]	; 0x24
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d3ce      	bcc.n	8005642 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695a      	ldr	r2, [r3, #20]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80056b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f003 fc1b 	bl	8008ef4 <USB_ReadInterrupts>
 80056be:	4603      	mov	r3, r0
 80056c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056c8:	d155      	bne.n	8005776 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056ca:	2301      	movs	r3, #1
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
 80056ce:	e045      	b.n	800575c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80056e0:	6879      	ldr	r1, [r7, #4]
 80056e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e4:	4613      	mov	r3, r2
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	4413      	add	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	440b      	add	r3, r1
 80056ee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d12e      	bne.n	8005756 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80056f8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	da2b      	bge.n	8005756 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800570a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800570e:	429a      	cmp	r2, r3
 8005710:	d121      	bne.n	8005756 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005712:	6879      	ldr	r1, [r7, #4]
 8005714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005716:	4613      	mov	r3, r2
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	4413      	add	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	440b      	add	r3, r1
 8005720:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005724:	2201      	movs	r2, #1
 8005726:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	69fa      	ldr	r2, [r7, #28]
 800574a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800574e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005752:	6053      	str	r3, [r2, #4]
            break;
 8005754:	e007      	b.n	8005766 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	3301      	adds	r3, #1
 800575a:	627b      	str	r3, [r7, #36]	; 0x24
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005762:	429a      	cmp	r2, r3
 8005764:	d3b4      	bcc.n	80056d0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	695a      	ldr	r2, [r3, #20]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005774:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4618      	mov	r0, r3
 800577c:	f003 fbba 	bl	8008ef4 <USB_ReadInterrupts>
 8005780:	4603      	mov	r3, r0
 8005782:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578a:	d10a      	bne.n	80057a2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f009 f9e5 	bl	800eb5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	695a      	ldr	r2, [r3, #20]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80057a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f003 fba4 	bl	8008ef4 <USB_ReadInterrupts>
 80057ac:	4603      	mov	r3, r0
 80057ae:	f003 0304 	and.w	r3, r3, #4
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	d115      	bne.n	80057e2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f009 f9d5 	bl	800eb78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6859      	ldr	r1, [r3, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	430a      	orrs	r2, r1
 80057dc:	605a      	str	r2, [r3, #4]
 80057de:	e000      	b.n	80057e2 <HAL_PCD_IRQHandler+0x938>
      return;
 80057e0:	bf00      	nop
    }
  }
}
 80057e2:	3734      	adds	r7, #52	; 0x34
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd90      	pop	{r4, r7, pc}

080057e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	460b      	mov	r3, r1
 80057f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <HAL_PCD_SetAddress+0x1a>
 80057fe:	2302      	movs	r3, #2
 8005800:	e013      	b.n	800582a <HAL_PCD_SetAddress+0x42>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	78fa      	ldrb	r2, [r7, #3]
 800580e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	78fa      	ldrb	r2, [r7, #3]
 8005818:	4611      	mov	r1, r2
 800581a:	4618      	mov	r0, r3
 800581c:	f003 fb02 	bl	8008e24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b084      	sub	sp, #16
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	4608      	mov	r0, r1
 800583c:	4611      	mov	r1, r2
 800583e:	461a      	mov	r2, r3
 8005840:	4603      	mov	r3, r0
 8005842:	70fb      	strb	r3, [r7, #3]
 8005844:	460b      	mov	r3, r1
 8005846:	803b      	strh	r3, [r7, #0]
 8005848:	4613      	mov	r3, r2
 800584a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800584c:	2300      	movs	r3, #0
 800584e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005850:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005854:	2b00      	cmp	r3, #0
 8005856:	da0f      	bge.n	8005878 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	f003 020f 	and.w	r2, r3, #15
 800585e:	4613      	mov	r3, r2
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	4413      	add	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	3338      	adds	r3, #56	; 0x38
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	4413      	add	r3, r2
 800586c:	3304      	adds	r3, #4
 800586e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	705a      	strb	r2, [r3, #1]
 8005876:	e00f      	b.n	8005898 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005878:	78fb      	ldrb	r3, [r7, #3]
 800587a:	f003 020f 	and.w	r2, r3, #15
 800587e:	4613      	mov	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	4413      	add	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	4413      	add	r3, r2
 800588e:	3304      	adds	r3, #4
 8005890:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005898:	78fb      	ldrb	r3, [r7, #3]
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80058a4:	883a      	ldrh	r2, [r7, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	78ba      	ldrb	r2, [r7, #2]
 80058ae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	785b      	ldrb	r3, [r3, #1]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d004      	beq.n	80058c2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80058c2:	78bb      	ldrb	r3, [r7, #2]
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d102      	bne.n	80058ce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d101      	bne.n	80058dc <HAL_PCD_EP_Open+0xaa>
 80058d8:	2302      	movs	r3, #2
 80058da:	e00e      	b.n	80058fa <HAL_PCD_EP_Open+0xc8>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68f9      	ldr	r1, [r7, #12]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f002 fb82 	bl	8007ff4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80058f8:	7afb      	ldrb	r3, [r7, #11]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b084      	sub	sp, #16
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	460b      	mov	r3, r1
 800590c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800590e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005912:	2b00      	cmp	r3, #0
 8005914:	da0f      	bge.n	8005936 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005916:	78fb      	ldrb	r3, [r7, #3]
 8005918:	f003 020f 	and.w	r2, r3, #15
 800591c:	4613      	mov	r3, r2
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	4413      	add	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	3338      	adds	r3, #56	; 0x38
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	4413      	add	r3, r2
 800592a:	3304      	adds	r3, #4
 800592c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2201      	movs	r2, #1
 8005932:	705a      	strb	r2, [r3, #1]
 8005934:	e00f      	b.n	8005956 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005936:	78fb      	ldrb	r3, [r7, #3]
 8005938:	f003 020f 	and.w	r2, r3, #15
 800593c:	4613      	mov	r3, r2
 800593e:	00db      	lsls	r3, r3, #3
 8005940:	4413      	add	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	4413      	add	r3, r2
 800594c:	3304      	adds	r3, #4
 800594e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005956:	78fb      	ldrb	r3, [r7, #3]
 8005958:	f003 030f 	and.w	r3, r3, #15
 800595c:	b2da      	uxtb	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_PCD_EP_Close+0x6e>
 800596c:	2302      	movs	r3, #2
 800596e:	e00e      	b.n	800598e <HAL_PCD_EP_Close+0x8c>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68f9      	ldr	r1, [r7, #12]
 800597e:	4618      	mov	r0, r3
 8005980:	f002 fbc0 	bl	8008104 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b086      	sub	sp, #24
 800599a:	af00      	add	r7, sp, #0
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	603b      	str	r3, [r7, #0]
 80059a2:	460b      	mov	r3, r1
 80059a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059a6:	7afb      	ldrb	r3, [r7, #11]
 80059a8:	f003 020f 	and.w	r2, r3, #15
 80059ac:	4613      	mov	r3, r2
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	3304      	adds	r3, #4
 80059be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	2200      	movs	r2, #0
 80059d0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2200      	movs	r2, #0
 80059d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059d8:	7afb      	ldrb	r3, [r7, #11]
 80059da:	f003 030f 	and.w	r3, r3, #15
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d102      	bne.n	80059f2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059f2:	7afb      	ldrb	r3, [r7, #11]
 80059f4:	f003 030f 	and.w	r3, r3, #15
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d109      	bne.n	8005a10 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6818      	ldr	r0, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	461a      	mov	r2, r3
 8005a08:	6979      	ldr	r1, [r7, #20]
 8005a0a:	f002 fe9f 	bl	800874c <USB_EP0StartXfer>
 8005a0e:	e008      	b.n	8005a22 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6818      	ldr	r0, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	6979      	ldr	r1, [r7, #20]
 8005a1e:	f002 fc4d 	bl	80082bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	460b      	mov	r3, r1
 8005a36:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	f003 020f 	and.w	r2, r3, #15
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	4613      	mov	r3, r2
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	4413      	add	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005a4e:	681b      	ldr	r3, [r3, #0]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	607a      	str	r2, [r7, #4]
 8005a66:	603b      	str	r3, [r7, #0]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a6c:	7afb      	ldrb	r3, [r7, #11]
 8005a6e:	f003 020f 	and.w	r2, r3, #15
 8005a72:	4613      	mov	r3, r2
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	4413      	add	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	3338      	adds	r3, #56	; 0x38
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4413      	add	r3, r2
 8005a80:	3304      	adds	r3, #4
 8005a82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	2200      	movs	r2, #0
 8005a94:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a9c:	7afb      	ldrb	r3, [r7, #11]
 8005a9e:	f003 030f 	and.w	r3, r3, #15
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d102      	bne.n	8005ab6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ab6:	7afb      	ldrb	r3, [r7, #11]
 8005ab8:	f003 030f 	and.w	r3, r3, #15
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d109      	bne.n	8005ad4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6818      	ldr	r0, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	461a      	mov	r2, r3
 8005acc:	6979      	ldr	r1, [r7, #20]
 8005ace:	f002 fe3d 	bl	800874c <USB_EP0StartXfer>
 8005ad2:	e008      	b.n	8005ae6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	461a      	mov	r2, r3
 8005ae0:	6979      	ldr	r1, [r7, #20]
 8005ae2:	f002 fbeb 	bl	80082bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	460b      	mov	r3, r1
 8005afa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005afc:	78fb      	ldrb	r3, [r7, #3]
 8005afe:	f003 020f 	and.w	r2, r3, #15
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d901      	bls.n	8005b0e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e050      	b.n	8005bb0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	da0f      	bge.n	8005b36 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b16:	78fb      	ldrb	r3, [r7, #3]
 8005b18:	f003 020f 	and.w	r2, r3, #15
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	4413      	add	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	3338      	adds	r3, #56	; 0x38
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	4413      	add	r3, r2
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2201      	movs	r2, #1
 8005b32:	705a      	strb	r2, [r3, #1]
 8005b34:	e00d      	b.n	8005b52 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005b36:	78fa      	ldrb	r2, [r7, #3]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	4413      	add	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	4413      	add	r3, r2
 8005b48:	3304      	adds	r3, #4
 8005b4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2201      	movs	r2, #1
 8005b56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b58:	78fb      	ldrb	r3, [r7, #3]
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d101      	bne.n	8005b72 <HAL_PCD_EP_SetStall+0x82>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	e01e      	b.n	8005bb0 <HAL_PCD_EP_SetStall+0xc0>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68f9      	ldr	r1, [r7, #12]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f003 f87b 	bl	8008c7c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b86:	78fb      	ldrb	r3, [r7, #3]
 8005b88:	f003 030f 	and.w	r3, r3, #15
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10a      	bne.n	8005ba6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6818      	ldr	r0, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	b2d9      	uxtb	r1, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	f003 fa6b 	bl	800907c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005bc4:	78fb      	ldrb	r3, [r7, #3]
 8005bc6:	f003 020f 	and.w	r2, r3, #15
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d901      	bls.n	8005bd6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e042      	b.n	8005c5c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005bd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	da0f      	bge.n	8005bfe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bde:	78fb      	ldrb	r3, [r7, #3]
 8005be0:	f003 020f 	and.w	r2, r3, #15
 8005be4:	4613      	mov	r3, r2
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	4413      	add	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	3338      	adds	r3, #56	; 0x38
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	705a      	strb	r2, [r3, #1]
 8005bfc:	e00f      	b.n	8005c1e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bfe:	78fb      	ldrb	r3, [r7, #3]
 8005c00:	f003 020f 	and.w	r2, r3, #15
 8005c04:	4613      	mov	r3, r2
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	4413      	add	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	4413      	add	r3, r2
 8005c14:	3304      	adds	r3, #4
 8005c16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c24:	78fb      	ldrb	r3, [r7, #3]
 8005c26:	f003 030f 	and.w	r3, r3, #15
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d101      	bne.n	8005c3e <HAL_PCD_EP_ClrStall+0x86>
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	e00e      	b.n	8005c5c <HAL_PCD_EP_ClrStall+0xa4>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68f9      	ldr	r1, [r7, #12]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f003 f883 	bl	8008d58 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005c70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	da0c      	bge.n	8005c92 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c78:	78fb      	ldrb	r3, [r7, #3]
 8005c7a:	f003 020f 	and.w	r2, r3, #15
 8005c7e:	4613      	mov	r3, r2
 8005c80:	00db      	lsls	r3, r3, #3
 8005c82:	4413      	add	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	3338      	adds	r3, #56	; 0x38
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	e00c      	b.n	8005cac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c92:	78fb      	ldrb	r3, [r7, #3]
 8005c94:	f003 020f 	and.w	r2, r3, #15
 8005c98:	4613      	mov	r3, r2
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	4413      	add	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	3304      	adds	r3, #4
 8005caa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68f9      	ldr	r1, [r7, #12]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f002 fea2 	bl	80089fc <USB_EPStopXfer>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005cbc:	7afb      	ldrb	r3, [r7, #11]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b08a      	sub	sp, #40	; 0x28
 8005cca:	af02      	add	r7, sp, #8
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	3338      	adds	r3, #56	; 0x38
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	4413      	add	r3, r2
 8005cea:	3304      	adds	r3, #4
 8005cec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a1a      	ldr	r2, [r3, #32]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d901      	bls.n	8005cfe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e06c      	b.n	8005dd8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	699a      	ldr	r2, [r3, #24]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	69fa      	ldr	r2, [r7, #28]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d902      	bls.n	8005d1a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	3303      	adds	r3, #3
 8005d1e:	089b      	lsrs	r3, r3, #2
 8005d20:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d22:	e02b      	b.n	8005d7c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	699a      	ldr	r2, [r3, #24]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	69fa      	ldr	r2, [r7, #28]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d902      	bls.n	8005d40 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	3303      	adds	r3, #3
 8005d44:	089b      	lsrs	r3, r3, #2
 8005d46:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6919      	ldr	r1, [r3, #16]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	6978      	ldr	r0, [r7, #20]
 8005d60:	f002 fef6 	bl	8008b50 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	691a      	ldr	r2, [r3, #16]
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	441a      	add	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6a1a      	ldr	r2, [r3, #32]
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	441a      	add	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d809      	bhi.n	8005da6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6a1a      	ldr	r2, [r3, #32]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d203      	bcs.n	8005da6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1be      	bne.n	8005d24 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	699a      	ldr	r2, [r3, #24]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d811      	bhi.n	8005dd6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	f003 030f 	and.w	r3, r3, #15
 8005db8:	2201      	movs	r2, #1
 8005dba:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	43db      	mvns	r3, r3
 8005dcc:	6939      	ldr	r1, [r7, #16]
 8005dce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3720      	adds	r7, #32
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b088      	sub	sp, #32
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	333c      	adds	r3, #60	; 0x3c
 8005df8:	3304      	adds	r3, #4
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d17b      	bne.n	8005f0e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d015      	beq.n	8005e4c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	4a61      	ldr	r2, [pc, #388]	; (8005fa8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	f240 80b9 	bls.w	8005f9c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 80b3 	beq.w	8005f9c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	461a      	mov	r2, r3
 8005e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e48:	6093      	str	r3, [r2, #8]
 8005e4a:	e0a7      	b.n	8005f9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f003 0320 	and.w	r3, r3, #32
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d009      	beq.n	8005e6a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e62:	461a      	mov	r2, r3
 8005e64:	2320      	movs	r3, #32
 8005e66:	6093      	str	r3, [r2, #8]
 8005e68:	e098      	b.n	8005f9c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f040 8093 	bne.w	8005f9c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	4a4b      	ldr	r2, [pc, #300]	; (8005fa8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d90f      	bls.n	8005e9e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00a      	beq.n	8005e9e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e94:	461a      	mov	r2, r3
 8005e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e9a:	6093      	str	r3, [r2, #8]
 8005e9c:	e07e      	b.n	8005f9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	4413      	add	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	4413      	add	r3, r2
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	69da      	ldr	r2, [r3, #28]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	0159      	lsls	r1, r3, #5
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	440b      	add	r3, r1
 8005ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eca:	1ad2      	subs	r2, r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d114      	bne.n	8005f00 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d109      	bne.n	8005ef2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6818      	ldr	r0, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005ee8:	461a      	mov	r2, r3
 8005eea:	2101      	movs	r1, #1
 8005eec:	f003 f8c6 	bl	800907c <USB_EP0_OutStart>
 8005ef0:	e006      	b.n	8005f00 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	691a      	ldr	r2, [r3, #16]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	441a      	add	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	4619      	mov	r1, r3
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f008 fd6e 	bl	800e9e8 <HAL_PCD_DataOutStageCallback>
 8005f0c:	e046      	b.n	8005f9c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	4a26      	ldr	r2, [pc, #152]	; (8005fac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d124      	bne.n	8005f60 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00a      	beq.n	8005f36 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f32:	6093      	str	r3, [r2, #8]
 8005f34:	e032      	b.n	8005f9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	f003 0320 	and.w	r3, r3, #32
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d008      	beq.n	8005f52 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	2320      	movs	r3, #32
 8005f50:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	4619      	mov	r1, r3
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f008 fd45 	bl	800e9e8 <HAL_PCD_DataOutStageCallback>
 8005f5e:	e01d      	b.n	8005f9c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d114      	bne.n	8005f90 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005f66:	6879      	ldr	r1, [r7, #4]
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	4413      	add	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	440b      	add	r3, r1
 8005f74:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d108      	bne.n	8005f90 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6818      	ldr	r0, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005f88:	461a      	mov	r2, r3
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	f003 f876 	bl	800907c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	4619      	mov	r1, r3
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f008 fd26 	bl	800e9e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3720      	adds	r7, #32
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	4f54300a 	.word	0x4f54300a
 8005fac:	4f54310a 	.word	0x4f54310a

08005fb0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	333c      	adds	r3, #60	; 0x3c
 8005fc8:	3304      	adds	r3, #4
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4a15      	ldr	r2, [pc, #84]	; (8006038 <PCD_EP_OutSetupPacket_int+0x88>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d90e      	bls.n	8006004 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d009      	beq.n	8006004 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006002:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f008 fcdd 	bl	800e9c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	4a0a      	ldr	r2, [pc, #40]	; (8006038 <PCD_EP_OutSetupPacket_int+0x88>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d90c      	bls.n	800602c <PCD_EP_OutSetupPacket_int+0x7c>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d108      	bne.n	800602c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6818      	ldr	r0, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006024:	461a      	mov	r2, r3
 8006026:	2101      	movs	r1, #1
 8006028:	f003 f828 	bl	800907c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	4f54300a 	.word	0x4f54300a

0800603c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	460b      	mov	r3, r1
 8006046:	70fb      	strb	r3, [r7, #3]
 8006048:	4613      	mov	r3, r2
 800604a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d107      	bne.n	800606a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800605a:	883b      	ldrh	r3, [r7, #0]
 800605c:	0419      	lsls	r1, r3, #16
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	430a      	orrs	r2, r1
 8006066:	629a      	str	r2, [r3, #40]	; 0x28
 8006068:	e028      	b.n	80060bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006070:	0c1b      	lsrs	r3, r3, #16
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	4413      	add	r3, r2
 8006076:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006078:	2300      	movs	r3, #0
 800607a:	73fb      	strb	r3, [r7, #15]
 800607c:	e00d      	b.n	800609a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	7bfb      	ldrb	r3, [r7, #15]
 8006084:	3340      	adds	r3, #64	; 0x40
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	0c1b      	lsrs	r3, r3, #16
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	4413      	add	r3, r2
 8006092:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	3301      	adds	r3, #1
 8006098:	73fb      	strb	r3, [r7, #15]
 800609a:	7bfa      	ldrb	r2, [r7, #15]
 800609c:	78fb      	ldrb	r3, [r7, #3]
 800609e:	3b01      	subs	r3, #1
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d3ec      	bcc.n	800607e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80060a4:	883b      	ldrh	r3, [r7, #0]
 80060a6:	0418      	lsls	r0, r3, #16
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6819      	ldr	r1, [r3, #0]
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	3b01      	subs	r3, #1
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	4302      	orrs	r2, r0
 80060b4:	3340      	adds	r3, #64	; 0x40
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	440b      	add	r3, r1
 80060ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
 80060d2:	460b      	mov	r3, r1
 80060d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	887a      	ldrh	r2, [r7, #2]
 80060dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	460b      	mov	r3, r1
 80060f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e267      	b.n	80065e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b00      	cmp	r3, #0
 8006120:	d075      	beq.n	800620e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006122:	4b88      	ldr	r3, [pc, #544]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f003 030c 	and.w	r3, r3, #12
 800612a:	2b04      	cmp	r3, #4
 800612c:	d00c      	beq.n	8006148 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800612e:	4b85      	ldr	r3, [pc, #532]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006136:	2b08      	cmp	r3, #8
 8006138:	d112      	bne.n	8006160 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800613a:	4b82      	ldr	r3, [pc, #520]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006142:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006146:	d10b      	bne.n	8006160 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006148:	4b7e      	ldr	r3, [pc, #504]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d05b      	beq.n	800620c <HAL_RCC_OscConfig+0x108>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d157      	bne.n	800620c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e242      	b.n	80065e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006168:	d106      	bne.n	8006178 <HAL_RCC_OscConfig+0x74>
 800616a:	4b76      	ldr	r3, [pc, #472]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a75      	ldr	r2, [pc, #468]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 8006170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	e01d      	b.n	80061b4 <HAL_RCC_OscConfig+0xb0>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006180:	d10c      	bne.n	800619c <HAL_RCC_OscConfig+0x98>
 8006182:	4b70      	ldr	r3, [pc, #448]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a6f      	ldr	r2, [pc, #444]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 8006188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	4b6d      	ldr	r3, [pc, #436]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a6c      	ldr	r2, [pc, #432]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 8006194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006198:	6013      	str	r3, [r2, #0]
 800619a:	e00b      	b.n	80061b4 <HAL_RCC_OscConfig+0xb0>
 800619c:	4b69      	ldr	r3, [pc, #420]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a68      	ldr	r2, [pc, #416]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 80061a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	4b66      	ldr	r3, [pc, #408]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a65      	ldr	r2, [pc, #404]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 80061ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d013      	beq.n	80061e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061bc:	f7fc f9fa 	bl	80025b4 <HAL_GetTick>
 80061c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061c2:	e008      	b.n	80061d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061c4:	f7fc f9f6 	bl	80025b4 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b64      	cmp	r3, #100	; 0x64
 80061d0:	d901      	bls.n	80061d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e207      	b.n	80065e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061d6:	4b5b      	ldr	r3, [pc, #364]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0f0      	beq.n	80061c4 <HAL_RCC_OscConfig+0xc0>
 80061e2:	e014      	b.n	800620e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e4:	f7fc f9e6 	bl	80025b4 <HAL_GetTick>
 80061e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061ea:	e008      	b.n	80061fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061ec:	f7fc f9e2 	bl	80025b4 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	2b64      	cmp	r3, #100	; 0x64
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e1f3      	b.n	80065e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061fe:	4b51      	ldr	r3, [pc, #324]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1f0      	bne.n	80061ec <HAL_RCC_OscConfig+0xe8>
 800620a:	e000      	b.n	800620e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800620c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d063      	beq.n	80062e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800621a:	4b4a      	ldr	r3, [pc, #296]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	f003 030c 	and.w	r3, r3, #12
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00b      	beq.n	800623e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006226:	4b47      	ldr	r3, [pc, #284]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800622e:	2b08      	cmp	r3, #8
 8006230:	d11c      	bne.n	800626c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006232:	4b44      	ldr	r3, [pc, #272]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d116      	bne.n	800626c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800623e:	4b41      	ldr	r3, [pc, #260]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d005      	beq.n	8006256 <HAL_RCC_OscConfig+0x152>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d001      	beq.n	8006256 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e1c7      	b.n	80065e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006256:	4b3b      	ldr	r3, [pc, #236]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	4937      	ldr	r1, [pc, #220]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 8006266:	4313      	orrs	r3, r2
 8006268:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800626a:	e03a      	b.n	80062e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d020      	beq.n	80062b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006274:	4b34      	ldr	r3, [pc, #208]	; (8006348 <HAL_RCC_OscConfig+0x244>)
 8006276:	2201      	movs	r2, #1
 8006278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800627a:	f7fc f99b 	bl	80025b4 <HAL_GetTick>
 800627e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006280:	e008      	b.n	8006294 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006282:	f7fc f997 	bl	80025b4 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	2b02      	cmp	r3, #2
 800628e:	d901      	bls.n	8006294 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e1a8      	b.n	80065e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006294:	4b2b      	ldr	r3, [pc, #172]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b00      	cmp	r3, #0
 800629e:	d0f0      	beq.n	8006282 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062a0:	4b28      	ldr	r3, [pc, #160]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	00db      	lsls	r3, r3, #3
 80062ae:	4925      	ldr	r1, [pc, #148]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	600b      	str	r3, [r1, #0]
 80062b4:	e015      	b.n	80062e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062b6:	4b24      	ldr	r3, [pc, #144]	; (8006348 <HAL_RCC_OscConfig+0x244>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062bc:	f7fc f97a 	bl	80025b4 <HAL_GetTick>
 80062c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062c2:	e008      	b.n	80062d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062c4:	f7fc f976 	bl	80025b4 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e187      	b.n	80065e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062d6:	4b1b      	ldr	r3, [pc, #108]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1f0      	bne.n	80062c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0308 	and.w	r3, r3, #8
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d036      	beq.n	800635c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d016      	beq.n	8006324 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062f6:	4b15      	ldr	r3, [pc, #84]	; (800634c <HAL_RCC_OscConfig+0x248>)
 80062f8:	2201      	movs	r2, #1
 80062fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062fc:	f7fc f95a 	bl	80025b4 <HAL_GetTick>
 8006300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006302:	e008      	b.n	8006316 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006304:	f7fc f956 	bl	80025b4 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b02      	cmp	r3, #2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e167      	b.n	80065e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006316:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <HAL_RCC_OscConfig+0x240>)
 8006318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0f0      	beq.n	8006304 <HAL_RCC_OscConfig+0x200>
 8006322:	e01b      	b.n	800635c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006324:	4b09      	ldr	r3, [pc, #36]	; (800634c <HAL_RCC_OscConfig+0x248>)
 8006326:	2200      	movs	r2, #0
 8006328:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800632a:	f7fc f943 	bl	80025b4 <HAL_GetTick>
 800632e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006330:	e00e      	b.n	8006350 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006332:	f7fc f93f 	bl	80025b4 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d907      	bls.n	8006350 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e150      	b.n	80065e6 <HAL_RCC_OscConfig+0x4e2>
 8006344:	40023800 	.word	0x40023800
 8006348:	42470000 	.word	0x42470000
 800634c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006350:	4b88      	ldr	r3, [pc, #544]	; (8006574 <HAL_RCC_OscConfig+0x470>)
 8006352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006354:	f003 0302 	and.w	r3, r3, #2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1ea      	bne.n	8006332 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 8097 	beq.w	8006498 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800636a:	2300      	movs	r3, #0
 800636c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800636e:	4b81      	ldr	r3, [pc, #516]	; (8006574 <HAL_RCC_OscConfig+0x470>)
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10f      	bne.n	800639a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800637a:	2300      	movs	r3, #0
 800637c:	60bb      	str	r3, [r7, #8]
 800637e:	4b7d      	ldr	r3, [pc, #500]	; (8006574 <HAL_RCC_OscConfig+0x470>)
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	4a7c      	ldr	r2, [pc, #496]	; (8006574 <HAL_RCC_OscConfig+0x470>)
 8006384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006388:	6413      	str	r3, [r2, #64]	; 0x40
 800638a:	4b7a      	ldr	r3, [pc, #488]	; (8006574 <HAL_RCC_OscConfig+0x470>)
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006392:	60bb      	str	r3, [r7, #8]
 8006394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006396:	2301      	movs	r3, #1
 8006398:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800639a:	4b77      	ldr	r3, [pc, #476]	; (8006578 <HAL_RCC_OscConfig+0x474>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d118      	bne.n	80063d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063a6:	4b74      	ldr	r3, [pc, #464]	; (8006578 <HAL_RCC_OscConfig+0x474>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a73      	ldr	r2, [pc, #460]	; (8006578 <HAL_RCC_OscConfig+0x474>)
 80063ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063b2:	f7fc f8ff 	bl	80025b4 <HAL_GetTick>
 80063b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063b8:	e008      	b.n	80063cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ba:	f7fc f8fb 	bl	80025b4 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d901      	bls.n	80063cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e10c      	b.n	80065e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063cc:	4b6a      	ldr	r3, [pc, #424]	; (8006578 <HAL_RCC_OscConfig+0x474>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d0f0      	beq.n	80063ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d106      	bne.n	80063ee <HAL_RCC_OscConfig+0x2ea>
 80063e0:	4b64      	ldr	r3, [pc, #400]	; (8006574 <HAL_RCC_OscConfig+0x470>)
 80063e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e4:	4a63      	ldr	r2, [pc, #396]	; (8006574 <HAL_RCC_OscConfig+0x470>)
 80063e6:	f043 0301 	orr.w	r3, r3, #1
 80063ea:	6713      	str	r3, [r2, #112]	; 0x70
 80063ec:	e01c      	b.n	8006428 <HAL_RCC_OscConfig+0x324>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	2b05      	cmp	r3, #5
 80063f4:	d10c      	bne.n	8006410 <HAL_RCC_OscConfig+0x30c>
 80063f6:	4b5f      	ldr	r3, [pc, #380]	; (8006574 <HAL_RCC_OscConfig+0x470>)
 80063f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fa:	4a5e      	ldr	r2, [pc, #376]	; (8006574 <HAL_RCC_OscConfig+0x470>)
 80063fc:	f043 0304 	orr.w	r3, r3, #4
 8006400:	6713      	str	r3, [r2, #112]	; 0x70
 8006402:	4b5c      	ldr	r3, [pc, #368]	; (8006574 <HAL_RCC_OscConfig+0x470>)
 8006404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006406:	4a5b      	ldr	r2, [pc, #364]	; (8006574 <HAL_RCC_OscConfig+0x470>)
 8006408:	f043 0301 	orr.w	r3, r3, #1
 800640c:	6713      	str	r3, [r2, #112]	; 0x70
 800640e:	e00b      	b.n	8006428 <HAL_RCC_OscConfig+0x324>
 8006410:	4b58      	ldr	r3, [pc, #352]	; (8006574 <HAL_RCC_OscConfig+0x470>)
 8006412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006414:	4a57      	ldr	r2, [pc, #348]	; (8006574 <HAL_RCC_OscConfig+0x470>)
 8006416:	f023 0301 	bic.w	r3, r3, #1
 800641a:	6713      	str	r3, [r2, #112]	; 0x70
 800641c:	4b55      	ldr	r3, [pc, #340]	; (8006574 <HAL_RCC_OscConfig+0x470>)
 800641e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006420:	4a54      	ldr	r2, [pc, #336]	; (8006574 <HAL_RCC_OscConfig+0x470>)
 8006422:	f023 0304 	bic.w	r3, r3, #4
 8006426:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d015      	beq.n	800645c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006430:	f7fc f8c0 	bl	80025b4 <HAL_GetTick>
 8006434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006436:	e00a      	b.n	800644e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006438:	f7fc f8bc 	bl	80025b4 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	f241 3288 	movw	r2, #5000	; 0x1388
 8006446:	4293      	cmp	r3, r2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e0cb      	b.n	80065e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800644e:	4b49      	ldr	r3, [pc, #292]	; (8006574 <HAL_RCC_OscConfig+0x470>)
 8006450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d0ee      	beq.n	8006438 <HAL_RCC_OscConfig+0x334>
 800645a:	e014      	b.n	8006486 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800645c:	f7fc f8aa 	bl	80025b4 <HAL_GetTick>
 8006460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006462:	e00a      	b.n	800647a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006464:	f7fc f8a6 	bl	80025b4 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006472:	4293      	cmp	r3, r2
 8006474:	d901      	bls.n	800647a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e0b5      	b.n	80065e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800647a:	4b3e      	ldr	r3, [pc, #248]	; (8006574 <HAL_RCC_OscConfig+0x470>)
 800647c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1ee      	bne.n	8006464 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006486:	7dfb      	ldrb	r3, [r7, #23]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d105      	bne.n	8006498 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800648c:	4b39      	ldr	r3, [pc, #228]	; (8006574 <HAL_RCC_OscConfig+0x470>)
 800648e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006490:	4a38      	ldr	r2, [pc, #224]	; (8006574 <HAL_RCC_OscConfig+0x470>)
 8006492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006496:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 80a1 	beq.w	80065e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064a2:	4b34      	ldr	r3, [pc, #208]	; (8006574 <HAL_RCC_OscConfig+0x470>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 030c 	and.w	r3, r3, #12
 80064aa:	2b08      	cmp	r3, #8
 80064ac:	d05c      	beq.n	8006568 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d141      	bne.n	800653a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064b6:	4b31      	ldr	r3, [pc, #196]	; (800657c <HAL_RCC_OscConfig+0x478>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064bc:	f7fc f87a 	bl	80025b4 <HAL_GetTick>
 80064c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064c2:	e008      	b.n	80064d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064c4:	f7fc f876 	bl	80025b4 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e087      	b.n	80065e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064d6:	4b27      	ldr	r3, [pc, #156]	; (8006574 <HAL_RCC_OscConfig+0x470>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1f0      	bne.n	80064c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	69da      	ldr	r2, [r3, #28]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	431a      	orrs	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f0:	019b      	lsls	r3, r3, #6
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f8:	085b      	lsrs	r3, r3, #1
 80064fa:	3b01      	subs	r3, #1
 80064fc:	041b      	lsls	r3, r3, #16
 80064fe:	431a      	orrs	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006504:	061b      	lsls	r3, r3, #24
 8006506:	491b      	ldr	r1, [pc, #108]	; (8006574 <HAL_RCC_OscConfig+0x470>)
 8006508:	4313      	orrs	r3, r2
 800650a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800650c:	4b1b      	ldr	r3, [pc, #108]	; (800657c <HAL_RCC_OscConfig+0x478>)
 800650e:	2201      	movs	r2, #1
 8006510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006512:	f7fc f84f 	bl	80025b4 <HAL_GetTick>
 8006516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006518:	e008      	b.n	800652c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800651a:	f7fc f84b 	bl	80025b4 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	2b02      	cmp	r3, #2
 8006526:	d901      	bls.n	800652c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e05c      	b.n	80065e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800652c:	4b11      	ldr	r3, [pc, #68]	; (8006574 <HAL_RCC_OscConfig+0x470>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0f0      	beq.n	800651a <HAL_RCC_OscConfig+0x416>
 8006538:	e054      	b.n	80065e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800653a:	4b10      	ldr	r3, [pc, #64]	; (800657c <HAL_RCC_OscConfig+0x478>)
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006540:	f7fc f838 	bl	80025b4 <HAL_GetTick>
 8006544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006546:	e008      	b.n	800655a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006548:	f7fc f834 	bl	80025b4 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	2b02      	cmp	r3, #2
 8006554:	d901      	bls.n	800655a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e045      	b.n	80065e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800655a:	4b06      	ldr	r3, [pc, #24]	; (8006574 <HAL_RCC_OscConfig+0x470>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1f0      	bne.n	8006548 <HAL_RCC_OscConfig+0x444>
 8006566:	e03d      	b.n	80065e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d107      	bne.n	8006580 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e038      	b.n	80065e6 <HAL_RCC_OscConfig+0x4e2>
 8006574:	40023800 	.word	0x40023800
 8006578:	40007000 	.word	0x40007000
 800657c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006580:	4b1b      	ldr	r3, [pc, #108]	; (80065f0 <HAL_RCC_OscConfig+0x4ec>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d028      	beq.n	80065e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006598:	429a      	cmp	r2, r3
 800659a:	d121      	bne.n	80065e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d11a      	bne.n	80065e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80065b0:	4013      	ands	r3, r2
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80065b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d111      	bne.n	80065e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c6:	085b      	lsrs	r3, r3, #1
 80065c8:	3b01      	subs	r3, #1
 80065ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d107      	bne.n	80065e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065dc:	429a      	cmp	r2, r3
 80065de:	d001      	beq.n	80065e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e000      	b.n	80065e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	40023800 	.word	0x40023800

080065f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e0cc      	b.n	80067a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006608:	4b68      	ldr	r3, [pc, #416]	; (80067ac <HAL_RCC_ClockConfig+0x1b8>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	429a      	cmp	r2, r3
 8006614:	d90c      	bls.n	8006630 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006616:	4b65      	ldr	r3, [pc, #404]	; (80067ac <HAL_RCC_ClockConfig+0x1b8>)
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800661e:	4b63      	ldr	r3, [pc, #396]	; (80067ac <HAL_RCC_ClockConfig+0x1b8>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0307 	and.w	r3, r3, #7
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	429a      	cmp	r2, r3
 800662a:	d001      	beq.n	8006630 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e0b8      	b.n	80067a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d020      	beq.n	800667e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b00      	cmp	r3, #0
 8006646:	d005      	beq.n	8006654 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006648:	4b59      	ldr	r3, [pc, #356]	; (80067b0 <HAL_RCC_ClockConfig+0x1bc>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	4a58      	ldr	r2, [pc, #352]	; (80067b0 <HAL_RCC_ClockConfig+0x1bc>)
 800664e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006652:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0308 	and.w	r3, r3, #8
 800665c:	2b00      	cmp	r3, #0
 800665e:	d005      	beq.n	800666c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006660:	4b53      	ldr	r3, [pc, #332]	; (80067b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	4a52      	ldr	r2, [pc, #328]	; (80067b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006666:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800666a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800666c:	4b50      	ldr	r3, [pc, #320]	; (80067b0 <HAL_RCC_ClockConfig+0x1bc>)
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	494d      	ldr	r1, [pc, #308]	; (80067b0 <HAL_RCC_ClockConfig+0x1bc>)
 800667a:	4313      	orrs	r3, r2
 800667c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d044      	beq.n	8006714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d107      	bne.n	80066a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006692:	4b47      	ldr	r3, [pc, #284]	; (80067b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d119      	bne.n	80066d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e07f      	b.n	80067a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d003      	beq.n	80066b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066ae:	2b03      	cmp	r3, #3
 80066b0:	d107      	bne.n	80066c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066b2:	4b3f      	ldr	r3, [pc, #252]	; (80067b0 <HAL_RCC_ClockConfig+0x1bc>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d109      	bne.n	80066d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e06f      	b.n	80067a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066c2:	4b3b      	ldr	r3, [pc, #236]	; (80067b0 <HAL_RCC_ClockConfig+0x1bc>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e067      	b.n	80067a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066d2:	4b37      	ldr	r3, [pc, #220]	; (80067b0 <HAL_RCC_ClockConfig+0x1bc>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f023 0203 	bic.w	r2, r3, #3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	4934      	ldr	r1, [pc, #208]	; (80067b0 <HAL_RCC_ClockConfig+0x1bc>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066e4:	f7fb ff66 	bl	80025b4 <HAL_GetTick>
 80066e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ea:	e00a      	b.n	8006702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066ec:	f7fb ff62 	bl	80025b4 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d901      	bls.n	8006702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e04f      	b.n	80067a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006702:	4b2b      	ldr	r3, [pc, #172]	; (80067b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f003 020c 	and.w	r2, r3, #12
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	429a      	cmp	r2, r3
 8006712:	d1eb      	bne.n	80066ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006714:	4b25      	ldr	r3, [pc, #148]	; (80067ac <HAL_RCC_ClockConfig+0x1b8>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0307 	and.w	r3, r3, #7
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	429a      	cmp	r2, r3
 8006720:	d20c      	bcs.n	800673c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006722:	4b22      	ldr	r3, [pc, #136]	; (80067ac <HAL_RCC_ClockConfig+0x1b8>)
 8006724:	683a      	ldr	r2, [r7, #0]
 8006726:	b2d2      	uxtb	r2, r2
 8006728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800672a:	4b20      	ldr	r3, [pc, #128]	; (80067ac <HAL_RCC_ClockConfig+0x1b8>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0307 	and.w	r3, r3, #7
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	429a      	cmp	r2, r3
 8006736:	d001      	beq.n	800673c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e032      	b.n	80067a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0304 	and.w	r3, r3, #4
 8006744:	2b00      	cmp	r3, #0
 8006746:	d008      	beq.n	800675a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006748:	4b19      	ldr	r3, [pc, #100]	; (80067b0 <HAL_RCC_ClockConfig+0x1bc>)
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	4916      	ldr	r1, [pc, #88]	; (80067b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006756:	4313      	orrs	r3, r2
 8006758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0308 	and.w	r3, r3, #8
 8006762:	2b00      	cmp	r3, #0
 8006764:	d009      	beq.n	800677a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006766:	4b12      	ldr	r3, [pc, #72]	; (80067b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	490e      	ldr	r1, [pc, #56]	; (80067b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006776:	4313      	orrs	r3, r2
 8006778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800677a:	f000 f821 	bl	80067c0 <HAL_RCC_GetSysClockFreq>
 800677e:	4602      	mov	r2, r0
 8006780:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	091b      	lsrs	r3, r3, #4
 8006786:	f003 030f 	and.w	r3, r3, #15
 800678a:	490a      	ldr	r1, [pc, #40]	; (80067b4 <HAL_RCC_ClockConfig+0x1c0>)
 800678c:	5ccb      	ldrb	r3, [r1, r3]
 800678e:	fa22 f303 	lsr.w	r3, r2, r3
 8006792:	4a09      	ldr	r2, [pc, #36]	; (80067b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006796:	4b09      	ldr	r3, [pc, #36]	; (80067bc <HAL_RCC_ClockConfig+0x1c8>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4618      	mov	r0, r3
 800679c:	f7fb fb9a 	bl	8001ed4 <HAL_InitTick>

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	40023c00 	.word	0x40023c00
 80067b0:	40023800 	.word	0x40023800
 80067b4:	0801035c 	.word	0x0801035c
 80067b8:	20000034 	.word	0x20000034
 80067bc:	20000038 	.word	0x20000038

080067c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067c4:	b090      	sub	sp, #64	; 0x40
 80067c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80067c8:	2300      	movs	r3, #0
 80067ca:	637b      	str	r3, [r7, #52]	; 0x34
 80067cc:	2300      	movs	r3, #0
 80067ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067d0:	2300      	movs	r3, #0
 80067d2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067d8:	4b59      	ldr	r3, [pc, #356]	; (8006940 <HAL_RCC_GetSysClockFreq+0x180>)
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	f003 030c 	and.w	r3, r3, #12
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d00d      	beq.n	8006800 <HAL_RCC_GetSysClockFreq+0x40>
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	f200 80a1 	bhi.w	800692c <HAL_RCC_GetSysClockFreq+0x16c>
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d002      	beq.n	80067f4 <HAL_RCC_GetSysClockFreq+0x34>
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d003      	beq.n	80067fa <HAL_RCC_GetSysClockFreq+0x3a>
 80067f2:	e09b      	b.n	800692c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067f4:	4b53      	ldr	r3, [pc, #332]	; (8006944 <HAL_RCC_GetSysClockFreq+0x184>)
 80067f6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80067f8:	e09b      	b.n	8006932 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067fa:	4b53      	ldr	r3, [pc, #332]	; (8006948 <HAL_RCC_GetSysClockFreq+0x188>)
 80067fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80067fe:	e098      	b.n	8006932 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006800:	4b4f      	ldr	r3, [pc, #316]	; (8006940 <HAL_RCC_GetSysClockFreq+0x180>)
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006808:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800680a:	4b4d      	ldr	r3, [pc, #308]	; (8006940 <HAL_RCC_GetSysClockFreq+0x180>)
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d028      	beq.n	8006868 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006816:	4b4a      	ldr	r3, [pc, #296]	; (8006940 <HAL_RCC_GetSysClockFreq+0x180>)
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	099b      	lsrs	r3, r3, #6
 800681c:	2200      	movs	r2, #0
 800681e:	623b      	str	r3, [r7, #32]
 8006820:	627a      	str	r2, [r7, #36]	; 0x24
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006828:	2100      	movs	r1, #0
 800682a:	4b47      	ldr	r3, [pc, #284]	; (8006948 <HAL_RCC_GetSysClockFreq+0x188>)
 800682c:	fb03 f201 	mul.w	r2, r3, r1
 8006830:	2300      	movs	r3, #0
 8006832:	fb00 f303 	mul.w	r3, r0, r3
 8006836:	4413      	add	r3, r2
 8006838:	4a43      	ldr	r2, [pc, #268]	; (8006948 <HAL_RCC_GetSysClockFreq+0x188>)
 800683a:	fba0 1202 	umull	r1, r2, r0, r2
 800683e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006840:	460a      	mov	r2, r1
 8006842:	62ba      	str	r2, [r7, #40]	; 0x28
 8006844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006846:	4413      	add	r3, r2
 8006848:	62fb      	str	r3, [r7, #44]	; 0x2c
 800684a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800684c:	2200      	movs	r2, #0
 800684e:	61bb      	str	r3, [r7, #24]
 8006850:	61fa      	str	r2, [r7, #28]
 8006852:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006856:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800685a:	f7f9 fcc1 	bl	80001e0 <__aeabi_uldivmod>
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	4613      	mov	r3, r2
 8006864:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006866:	e053      	b.n	8006910 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006868:	4b35      	ldr	r3, [pc, #212]	; (8006940 <HAL_RCC_GetSysClockFreq+0x180>)
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	099b      	lsrs	r3, r3, #6
 800686e:	2200      	movs	r2, #0
 8006870:	613b      	str	r3, [r7, #16]
 8006872:	617a      	str	r2, [r7, #20]
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800687a:	f04f 0b00 	mov.w	fp, #0
 800687e:	4652      	mov	r2, sl
 8006880:	465b      	mov	r3, fp
 8006882:	f04f 0000 	mov.w	r0, #0
 8006886:	f04f 0100 	mov.w	r1, #0
 800688a:	0159      	lsls	r1, r3, #5
 800688c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006890:	0150      	lsls	r0, r2, #5
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	ebb2 080a 	subs.w	r8, r2, sl
 800689a:	eb63 090b 	sbc.w	r9, r3, fp
 800689e:	f04f 0200 	mov.w	r2, #0
 80068a2:	f04f 0300 	mov.w	r3, #0
 80068a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80068aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80068ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80068b2:	ebb2 0408 	subs.w	r4, r2, r8
 80068b6:	eb63 0509 	sbc.w	r5, r3, r9
 80068ba:	f04f 0200 	mov.w	r2, #0
 80068be:	f04f 0300 	mov.w	r3, #0
 80068c2:	00eb      	lsls	r3, r5, #3
 80068c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068c8:	00e2      	lsls	r2, r4, #3
 80068ca:	4614      	mov	r4, r2
 80068cc:	461d      	mov	r5, r3
 80068ce:	eb14 030a 	adds.w	r3, r4, sl
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	eb45 030b 	adc.w	r3, r5, fp
 80068d8:	607b      	str	r3, [r7, #4]
 80068da:	f04f 0200 	mov.w	r2, #0
 80068de:	f04f 0300 	mov.w	r3, #0
 80068e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80068e6:	4629      	mov	r1, r5
 80068e8:	028b      	lsls	r3, r1, #10
 80068ea:	4621      	mov	r1, r4
 80068ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068f0:	4621      	mov	r1, r4
 80068f2:	028a      	lsls	r2, r1, #10
 80068f4:	4610      	mov	r0, r2
 80068f6:	4619      	mov	r1, r3
 80068f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fa:	2200      	movs	r2, #0
 80068fc:	60bb      	str	r3, [r7, #8]
 80068fe:	60fa      	str	r2, [r7, #12]
 8006900:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006904:	f7f9 fc6c 	bl	80001e0 <__aeabi_uldivmod>
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	4613      	mov	r3, r2
 800690e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006910:	4b0b      	ldr	r3, [pc, #44]	; (8006940 <HAL_RCC_GetSysClockFreq+0x180>)
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	0c1b      	lsrs	r3, r3, #16
 8006916:	f003 0303 	and.w	r3, r3, #3
 800691a:	3301      	adds	r3, #1
 800691c:	005b      	lsls	r3, r3, #1
 800691e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006920:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006924:	fbb2 f3f3 	udiv	r3, r2, r3
 8006928:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800692a:	e002      	b.n	8006932 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800692c:	4b05      	ldr	r3, [pc, #20]	; (8006944 <HAL_RCC_GetSysClockFreq+0x184>)
 800692e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006934:	4618      	mov	r0, r3
 8006936:	3740      	adds	r7, #64	; 0x40
 8006938:	46bd      	mov	sp, r7
 800693a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800693e:	bf00      	nop
 8006940:	40023800 	.word	0x40023800
 8006944:	00f42400 	.word	0x00f42400
 8006948:	017d7840 	.word	0x017d7840

0800694c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800694c:	b480      	push	{r7}
 800694e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006950:	4b03      	ldr	r3, [pc, #12]	; (8006960 <HAL_RCC_GetHCLKFreq+0x14>)
 8006952:	681b      	ldr	r3, [r3, #0]
}
 8006954:	4618      	mov	r0, r3
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	20000034 	.word	0x20000034

08006964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006968:	f7ff fff0 	bl	800694c <HAL_RCC_GetHCLKFreq>
 800696c:	4602      	mov	r2, r0
 800696e:	4b05      	ldr	r3, [pc, #20]	; (8006984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	0a9b      	lsrs	r3, r3, #10
 8006974:	f003 0307 	and.w	r3, r3, #7
 8006978:	4903      	ldr	r1, [pc, #12]	; (8006988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800697a:	5ccb      	ldrb	r3, [r1, r3]
 800697c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006980:	4618      	mov	r0, r3
 8006982:	bd80      	pop	{r7, pc}
 8006984:	40023800 	.word	0x40023800
 8006988:	0801036c 	.word	0x0801036c

0800698c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006990:	f7ff ffdc 	bl	800694c <HAL_RCC_GetHCLKFreq>
 8006994:	4602      	mov	r2, r0
 8006996:	4b05      	ldr	r3, [pc, #20]	; (80069ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	0b5b      	lsrs	r3, r3, #13
 800699c:	f003 0307 	and.w	r3, r3, #7
 80069a0:	4903      	ldr	r1, [pc, #12]	; (80069b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069a2:	5ccb      	ldrb	r3, [r1, r3]
 80069a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	40023800 	.word	0x40023800
 80069b0:	0801036c 	.word	0x0801036c

080069b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	220f      	movs	r2, #15
 80069c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80069c4:	4b12      	ldr	r3, [pc, #72]	; (8006a10 <HAL_RCC_GetClockConfig+0x5c>)
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f003 0203 	and.w	r2, r3, #3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80069d0:	4b0f      	ldr	r3, [pc, #60]	; (8006a10 <HAL_RCC_GetClockConfig+0x5c>)
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80069dc:	4b0c      	ldr	r3, [pc, #48]	; (8006a10 <HAL_RCC_GetClockConfig+0x5c>)
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80069e8:	4b09      	ldr	r3, [pc, #36]	; (8006a10 <HAL_RCC_GetClockConfig+0x5c>)
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	08db      	lsrs	r3, r3, #3
 80069ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80069f6:	4b07      	ldr	r3, [pc, #28]	; (8006a14 <HAL_RCC_GetClockConfig+0x60>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0207 	and.w	r2, r3, #7
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	601a      	str	r2, [r3, #0]
}
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	40023800 	.word	0x40023800
 8006a14:	40023c00 	.word	0x40023c00

08006a18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e07b      	b.n	8006b22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d108      	bne.n	8006a44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a3a:	d009      	beq.n	8006a50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	61da      	str	r2, [r3, #28]
 8006a42:	e005      	b.n	8006a50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d106      	bne.n	8006a70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7fb f952 	bl	8001d14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2202      	movs	r2, #2
 8006a74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	f003 0302 	and.w	r3, r3, #2
 8006aac:	431a      	orrs	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006aca:	431a      	orrs	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad4:	ea42 0103 	orr.w	r1, r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006adc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	0c1b      	lsrs	r3, r3, #16
 8006aee:	f003 0104 	and.w	r1, r3, #4
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af6:	f003 0210 	and.w	r2, r3, #16
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	69da      	ldr	r2, [r3, #28]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b082      	sub	sp, #8
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e041      	b.n	8006bc0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d106      	bne.n	8006b56 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7fb f927 	bl	8001da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2202      	movs	r2, #2
 8006b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	3304      	adds	r3, #4
 8006b66:	4619      	mov	r1, r3
 8006b68:	4610      	mov	r0, r2
 8006b6a:	f000 fba3 	bl	80072b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d001      	beq.n	8006be0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e044      	b.n	8006c6a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2202      	movs	r2, #2
 8006be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68da      	ldr	r2, [r3, #12]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f042 0201 	orr.w	r2, r2, #1
 8006bf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a1e      	ldr	r2, [pc, #120]	; (8006c78 <HAL_TIM_Base_Start_IT+0xb0>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d018      	beq.n	8006c34 <HAL_TIM_Base_Start_IT+0x6c>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c0a:	d013      	beq.n	8006c34 <HAL_TIM_Base_Start_IT+0x6c>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a1a      	ldr	r2, [pc, #104]	; (8006c7c <HAL_TIM_Base_Start_IT+0xb4>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d00e      	beq.n	8006c34 <HAL_TIM_Base_Start_IT+0x6c>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a19      	ldr	r2, [pc, #100]	; (8006c80 <HAL_TIM_Base_Start_IT+0xb8>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d009      	beq.n	8006c34 <HAL_TIM_Base_Start_IT+0x6c>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a17      	ldr	r2, [pc, #92]	; (8006c84 <HAL_TIM_Base_Start_IT+0xbc>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d004      	beq.n	8006c34 <HAL_TIM_Base_Start_IT+0x6c>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a16      	ldr	r2, [pc, #88]	; (8006c88 <HAL_TIM_Base_Start_IT+0xc0>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d111      	bne.n	8006c58 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f003 0307 	and.w	r3, r3, #7
 8006c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2b06      	cmp	r3, #6
 8006c44:	d010      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f042 0201 	orr.w	r2, r2, #1
 8006c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c56:	e007      	b.n	8006c68 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f042 0201 	orr.w	r2, r2, #1
 8006c66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	40010000 	.word	0x40010000
 8006c7c:	40000400 	.word	0x40000400
 8006c80:	40000800 	.word	0x40000800
 8006c84:	40000c00 	.word	0x40000c00
 8006c88:	40014000 	.word	0x40014000

08006c8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e041      	b.n	8006d22 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d106      	bne.n	8006cb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f839 	bl	8006d2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4610      	mov	r0, r2
 8006ccc:	f000 faf2 	bl	80072b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d32:	bf00      	nop
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b082      	sub	sp, #8
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	f003 0302 	and.w	r3, r3, #2
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d122      	bne.n	8006d9a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d11b      	bne.n	8006d9a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f06f 0202 	mvn.w	r2, #2
 8006d6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	f003 0303 	and.w	r3, r3, #3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fa78 	bl	8007276 <HAL_TIM_IC_CaptureCallback>
 8006d86:	e005      	b.n	8006d94 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fa6a 	bl	8007262 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fa7b 	bl	800728a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b04      	cmp	r3, #4
 8006da6:	d122      	bne.n	8006dee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f003 0304 	and.w	r3, r3, #4
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	d11b      	bne.n	8006dee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f06f 0204 	mvn.w	r2, #4
 8006dbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d003      	beq.n	8006ddc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fa4e 	bl	8007276 <HAL_TIM_IC_CaptureCallback>
 8006dda:	e005      	b.n	8006de8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fa40 	bl	8007262 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fa51 	bl	800728a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	f003 0308 	and.w	r3, r3, #8
 8006df8:	2b08      	cmp	r3, #8
 8006dfa:	d122      	bne.n	8006e42 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	f003 0308 	and.w	r3, r3, #8
 8006e06:	2b08      	cmp	r3, #8
 8006e08:	d11b      	bne.n	8006e42 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f06f 0208 	mvn.w	r2, #8
 8006e12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2204      	movs	r2, #4
 8006e18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	f003 0303 	and.w	r3, r3, #3
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fa24 	bl	8007276 <HAL_TIM_IC_CaptureCallback>
 8006e2e:	e005      	b.n	8006e3c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fa16 	bl	8007262 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fa27 	bl	800728a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	f003 0310 	and.w	r3, r3, #16
 8006e4c:	2b10      	cmp	r3, #16
 8006e4e:	d122      	bne.n	8006e96 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f003 0310 	and.w	r3, r3, #16
 8006e5a:	2b10      	cmp	r3, #16
 8006e5c:	d11b      	bne.n	8006e96 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f06f 0210 	mvn.w	r2, #16
 8006e66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2208      	movs	r2, #8
 8006e6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d003      	beq.n	8006e84 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f9fa 	bl	8007276 <HAL_TIM_IC_CaptureCallback>
 8006e82:	e005      	b.n	8006e90 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f9ec 	bl	8007262 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f9fd 	bl	800728a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d10e      	bne.n	8006ec2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	f003 0301 	and.w	r3, r3, #1
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d107      	bne.n	8006ec2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f06f 0201 	mvn.w	r2, #1
 8006eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f7fa fe9d 	bl	8001bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ecc:	2b80      	cmp	r3, #128	; 0x80
 8006ece:	d10e      	bne.n	8006eee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eda:	2b80      	cmp	r3, #128	; 0x80
 8006edc:	d107      	bne.n	8006eee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fd01 	bl	80078f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef8:	2b40      	cmp	r3, #64	; 0x40
 8006efa:	d10e      	bne.n	8006f1a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f06:	2b40      	cmp	r3, #64	; 0x40
 8006f08:	d107      	bne.n	8006f1a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f9c2 	bl	800729e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	f003 0320 	and.w	r3, r3, #32
 8006f24:	2b20      	cmp	r3, #32
 8006f26:	d10e      	bne.n	8006f46 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	f003 0320 	and.w	r3, r3, #32
 8006f32:	2b20      	cmp	r3, #32
 8006f34:	d107      	bne.n	8006f46 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f06f 0220 	mvn.w	r2, #32
 8006f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fccb 	bl	80078dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f46:	bf00      	nop
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
	...

08006f50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d101      	bne.n	8006f6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	e0ae      	b.n	80070cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b0c      	cmp	r3, #12
 8006f7a:	f200 809f 	bhi.w	80070bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006f7e:	a201      	add	r2, pc, #4	; (adr r2, 8006f84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f84:	08006fb9 	.word	0x08006fb9
 8006f88:	080070bd 	.word	0x080070bd
 8006f8c:	080070bd 	.word	0x080070bd
 8006f90:	080070bd 	.word	0x080070bd
 8006f94:	08006ff9 	.word	0x08006ff9
 8006f98:	080070bd 	.word	0x080070bd
 8006f9c:	080070bd 	.word	0x080070bd
 8006fa0:	080070bd 	.word	0x080070bd
 8006fa4:	0800703b 	.word	0x0800703b
 8006fa8:	080070bd 	.word	0x080070bd
 8006fac:	080070bd 	.word	0x080070bd
 8006fb0:	080070bd 	.word	0x080070bd
 8006fb4:	0800707b 	.word	0x0800707b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68b9      	ldr	r1, [r7, #8]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 f9f8 	bl	80073b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	699a      	ldr	r2, [r3, #24]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f042 0208 	orr.w	r2, r2, #8
 8006fd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	699a      	ldr	r2, [r3, #24]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 0204 	bic.w	r2, r2, #4
 8006fe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6999      	ldr	r1, [r3, #24]
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	691a      	ldr	r2, [r3, #16]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	619a      	str	r2, [r3, #24]
      break;
 8006ff6:	e064      	b.n	80070c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68b9      	ldr	r1, [r7, #8]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 fa3e 	bl	8007480 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	699a      	ldr	r2, [r3, #24]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	699a      	ldr	r2, [r3, #24]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	6999      	ldr	r1, [r3, #24]
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	021a      	lsls	r2, r3, #8
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	619a      	str	r2, [r3, #24]
      break;
 8007038:	e043      	b.n	80070c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68b9      	ldr	r1, [r7, #8]
 8007040:	4618      	mov	r0, r3
 8007042:	f000 fa89 	bl	8007558 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	69da      	ldr	r2, [r3, #28]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f042 0208 	orr.w	r2, r2, #8
 8007054:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	69da      	ldr	r2, [r3, #28]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0204 	bic.w	r2, r2, #4
 8007064:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	69d9      	ldr	r1, [r3, #28]
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	691a      	ldr	r2, [r3, #16]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	430a      	orrs	r2, r1
 8007076:	61da      	str	r2, [r3, #28]
      break;
 8007078:	e023      	b.n	80070c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68b9      	ldr	r1, [r7, #8]
 8007080:	4618      	mov	r0, r3
 8007082:	f000 fad3 	bl	800762c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	69da      	ldr	r2, [r3, #28]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	69da      	ldr	r2, [r3, #28]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	69d9      	ldr	r1, [r3, #28]
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	021a      	lsls	r2, r3, #8
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	430a      	orrs	r2, r1
 80070b8:	61da      	str	r2, [r3, #28]
      break;
 80070ba:	e002      	b.n	80070c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	75fb      	strb	r3, [r7, #23]
      break;
 80070c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d101      	bne.n	80070f0 <HAL_TIM_ConfigClockSource+0x1c>
 80070ec:	2302      	movs	r3, #2
 80070ee:	e0b4      	b.n	800725a <HAL_TIM_ConfigClockSource+0x186>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2202      	movs	r2, #2
 80070fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800710e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007116:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007128:	d03e      	beq.n	80071a8 <HAL_TIM_ConfigClockSource+0xd4>
 800712a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800712e:	f200 8087 	bhi.w	8007240 <HAL_TIM_ConfigClockSource+0x16c>
 8007132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007136:	f000 8086 	beq.w	8007246 <HAL_TIM_ConfigClockSource+0x172>
 800713a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800713e:	d87f      	bhi.n	8007240 <HAL_TIM_ConfigClockSource+0x16c>
 8007140:	2b70      	cmp	r3, #112	; 0x70
 8007142:	d01a      	beq.n	800717a <HAL_TIM_ConfigClockSource+0xa6>
 8007144:	2b70      	cmp	r3, #112	; 0x70
 8007146:	d87b      	bhi.n	8007240 <HAL_TIM_ConfigClockSource+0x16c>
 8007148:	2b60      	cmp	r3, #96	; 0x60
 800714a:	d050      	beq.n	80071ee <HAL_TIM_ConfigClockSource+0x11a>
 800714c:	2b60      	cmp	r3, #96	; 0x60
 800714e:	d877      	bhi.n	8007240 <HAL_TIM_ConfigClockSource+0x16c>
 8007150:	2b50      	cmp	r3, #80	; 0x50
 8007152:	d03c      	beq.n	80071ce <HAL_TIM_ConfigClockSource+0xfa>
 8007154:	2b50      	cmp	r3, #80	; 0x50
 8007156:	d873      	bhi.n	8007240 <HAL_TIM_ConfigClockSource+0x16c>
 8007158:	2b40      	cmp	r3, #64	; 0x40
 800715a:	d058      	beq.n	800720e <HAL_TIM_ConfigClockSource+0x13a>
 800715c:	2b40      	cmp	r3, #64	; 0x40
 800715e:	d86f      	bhi.n	8007240 <HAL_TIM_ConfigClockSource+0x16c>
 8007160:	2b30      	cmp	r3, #48	; 0x30
 8007162:	d064      	beq.n	800722e <HAL_TIM_ConfigClockSource+0x15a>
 8007164:	2b30      	cmp	r3, #48	; 0x30
 8007166:	d86b      	bhi.n	8007240 <HAL_TIM_ConfigClockSource+0x16c>
 8007168:	2b20      	cmp	r3, #32
 800716a:	d060      	beq.n	800722e <HAL_TIM_ConfigClockSource+0x15a>
 800716c:	2b20      	cmp	r3, #32
 800716e:	d867      	bhi.n	8007240 <HAL_TIM_ConfigClockSource+0x16c>
 8007170:	2b00      	cmp	r3, #0
 8007172:	d05c      	beq.n	800722e <HAL_TIM_ConfigClockSource+0x15a>
 8007174:	2b10      	cmp	r3, #16
 8007176:	d05a      	beq.n	800722e <HAL_TIM_ConfigClockSource+0x15a>
 8007178:	e062      	b.n	8007240 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6818      	ldr	r0, [r3, #0]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	6899      	ldr	r1, [r3, #8]
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f000 fb19 	bl	80077c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800719c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	609a      	str	r2, [r3, #8]
      break;
 80071a6:	e04f      	b.n	8007248 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6818      	ldr	r0, [r3, #0]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	6899      	ldr	r1, [r3, #8]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f000 fb02 	bl	80077c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	689a      	ldr	r2, [r3, #8]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071ca:	609a      	str	r2, [r3, #8]
      break;
 80071cc:	e03c      	b.n	8007248 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6818      	ldr	r0, [r3, #0]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	6859      	ldr	r1, [r3, #4]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	461a      	mov	r2, r3
 80071dc:	f000 fa76 	bl	80076cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2150      	movs	r1, #80	; 0x50
 80071e6:	4618      	mov	r0, r3
 80071e8:	f000 facf 	bl	800778a <TIM_ITRx_SetConfig>
      break;
 80071ec:	e02c      	b.n	8007248 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6818      	ldr	r0, [r3, #0]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	6859      	ldr	r1, [r3, #4]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	461a      	mov	r2, r3
 80071fc:	f000 fa95 	bl	800772a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2160      	movs	r1, #96	; 0x60
 8007206:	4618      	mov	r0, r3
 8007208:	f000 fabf 	bl	800778a <TIM_ITRx_SetConfig>
      break;
 800720c:	e01c      	b.n	8007248 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6818      	ldr	r0, [r3, #0]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	6859      	ldr	r1, [r3, #4]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	461a      	mov	r2, r3
 800721c:	f000 fa56 	bl	80076cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2140      	movs	r1, #64	; 0x40
 8007226:	4618      	mov	r0, r3
 8007228:	f000 faaf 	bl	800778a <TIM_ITRx_SetConfig>
      break;
 800722c:	e00c      	b.n	8007248 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4619      	mov	r1, r3
 8007238:	4610      	mov	r0, r2
 800723a:	f000 faa6 	bl	800778a <TIM_ITRx_SetConfig>
      break;
 800723e:	e003      	b.n	8007248 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	73fb      	strb	r3, [r7, #15]
      break;
 8007244:	e000      	b.n	8007248 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007246:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007258:	7bfb      	ldrb	r3, [r7, #15]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007262:	b480      	push	{r7}
 8007264:	b083      	sub	sp, #12
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800726a:	bf00      	nop
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007276:	b480      	push	{r7}
 8007278:	b083      	sub	sp, #12
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800727e:	bf00      	nop
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800728a:	b480      	push	{r7}
 800728c:	b083      	sub	sp, #12
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007292:	bf00      	nop
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800729e:	b480      	push	{r7}
 80072a0:	b083      	sub	sp, #12
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072a6:	bf00      	nop
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
	...

080072b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a34      	ldr	r2, [pc, #208]	; (8007398 <TIM_Base_SetConfig+0xe4>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d00f      	beq.n	80072ec <TIM_Base_SetConfig+0x38>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072d2:	d00b      	beq.n	80072ec <TIM_Base_SetConfig+0x38>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a31      	ldr	r2, [pc, #196]	; (800739c <TIM_Base_SetConfig+0xe8>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d007      	beq.n	80072ec <TIM_Base_SetConfig+0x38>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a30      	ldr	r2, [pc, #192]	; (80073a0 <TIM_Base_SetConfig+0xec>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d003      	beq.n	80072ec <TIM_Base_SetConfig+0x38>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a2f      	ldr	r2, [pc, #188]	; (80073a4 <TIM_Base_SetConfig+0xf0>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d108      	bne.n	80072fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a25      	ldr	r2, [pc, #148]	; (8007398 <TIM_Base_SetConfig+0xe4>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d01b      	beq.n	800733e <TIM_Base_SetConfig+0x8a>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800730c:	d017      	beq.n	800733e <TIM_Base_SetConfig+0x8a>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a22      	ldr	r2, [pc, #136]	; (800739c <TIM_Base_SetConfig+0xe8>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d013      	beq.n	800733e <TIM_Base_SetConfig+0x8a>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a21      	ldr	r2, [pc, #132]	; (80073a0 <TIM_Base_SetConfig+0xec>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d00f      	beq.n	800733e <TIM_Base_SetConfig+0x8a>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a20      	ldr	r2, [pc, #128]	; (80073a4 <TIM_Base_SetConfig+0xf0>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d00b      	beq.n	800733e <TIM_Base_SetConfig+0x8a>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a1f      	ldr	r2, [pc, #124]	; (80073a8 <TIM_Base_SetConfig+0xf4>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d007      	beq.n	800733e <TIM_Base_SetConfig+0x8a>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a1e      	ldr	r2, [pc, #120]	; (80073ac <TIM_Base_SetConfig+0xf8>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d003      	beq.n	800733e <TIM_Base_SetConfig+0x8a>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a1d      	ldr	r2, [pc, #116]	; (80073b0 <TIM_Base_SetConfig+0xfc>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d108      	bne.n	8007350 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	4313      	orrs	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	4313      	orrs	r3, r2
 800735c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	689a      	ldr	r2, [r3, #8]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a08      	ldr	r2, [pc, #32]	; (8007398 <TIM_Base_SetConfig+0xe4>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d103      	bne.n	8007384 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	691a      	ldr	r2, [r3, #16]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	615a      	str	r2, [r3, #20]
}
 800738a:	bf00      	nop
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	40010000 	.word	0x40010000
 800739c:	40000400 	.word	0x40000400
 80073a0:	40000800 	.word	0x40000800
 80073a4:	40000c00 	.word	0x40000c00
 80073a8:	40014000 	.word	0x40014000
 80073ac:	40014400 	.word	0x40014400
 80073b0:	40014800 	.word	0x40014800

080073b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	f023 0201 	bic.w	r2, r3, #1
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f023 0303 	bic.w	r3, r3, #3
 80073ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	f023 0302 	bic.w	r3, r3, #2
 80073fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	4313      	orrs	r3, r2
 8007406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a1c      	ldr	r2, [pc, #112]	; (800747c <TIM_OC1_SetConfig+0xc8>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d10c      	bne.n	800742a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f023 0308 	bic.w	r3, r3, #8
 8007416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	4313      	orrs	r3, r2
 8007420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f023 0304 	bic.w	r3, r3, #4
 8007428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a13      	ldr	r2, [pc, #76]	; (800747c <TIM_OC1_SetConfig+0xc8>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d111      	bne.n	8007456 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	4313      	orrs	r3, r2
 800744a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	4313      	orrs	r3, r2
 8007454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	621a      	str	r2, [r3, #32]
}
 8007470:	bf00      	nop
 8007472:	371c      	adds	r7, #28
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	40010000 	.word	0x40010000

08007480 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007480:	b480      	push	{r7}
 8007482:	b087      	sub	sp, #28
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	f023 0210 	bic.w	r2, r3, #16
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	021b      	lsls	r3, r3, #8
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f023 0320 	bic.w	r3, r3, #32
 80074ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	011b      	lsls	r3, r3, #4
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a1e      	ldr	r2, [pc, #120]	; (8007554 <TIM_OC2_SetConfig+0xd4>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d10d      	bne.n	80074fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	011b      	lsls	r3, r3, #4
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a15      	ldr	r2, [pc, #84]	; (8007554 <TIM_OC2_SetConfig+0xd4>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d113      	bne.n	800752c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800750a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007512:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	4313      	orrs	r3, r2
 800751e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	4313      	orrs	r3, r2
 800752a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	621a      	str	r2, [r3, #32]
}
 8007546:	bf00      	nop
 8007548:	371c      	adds	r7, #28
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	40010000 	.word	0x40010000

08007558 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a1b      	ldr	r3, [r3, #32]
 8007572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f023 0303 	bic.w	r3, r3, #3
 800758e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	021b      	lsls	r3, r3, #8
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a1d      	ldr	r2, [pc, #116]	; (8007628 <TIM_OC3_SetConfig+0xd0>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d10d      	bne.n	80075d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	021b      	lsls	r3, r3, #8
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a14      	ldr	r2, [pc, #80]	; (8007628 <TIM_OC3_SetConfig+0xd0>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d113      	bne.n	8007602 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	011b      	lsls	r3, r3, #4
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	011b      	lsls	r3, r3, #4
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	4313      	orrs	r3, r2
 8007600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	621a      	str	r2, [r3, #32]
}
 800761c:	bf00      	nop
 800761e:	371c      	adds	r7, #28
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	40010000 	.word	0x40010000

0800762c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800762c:	b480      	push	{r7}
 800762e:	b087      	sub	sp, #28
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800765a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007662:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	021b      	lsls	r3, r3, #8
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	4313      	orrs	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007676:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	031b      	lsls	r3, r3, #12
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	4313      	orrs	r3, r2
 8007682:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a10      	ldr	r2, [pc, #64]	; (80076c8 <TIM_OC4_SetConfig+0x9c>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d109      	bne.n	80076a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007692:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	019b      	lsls	r3, r3, #6
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	4313      	orrs	r3, r2
 800769e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	621a      	str	r2, [r3, #32]
}
 80076ba:	bf00      	nop
 80076bc:	371c      	adds	r7, #28
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	40010000 	.word	0x40010000

080076cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6a1b      	ldr	r3, [r3, #32]
 80076dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	f023 0201 	bic.w	r2, r3, #1
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	011b      	lsls	r3, r3, #4
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	4313      	orrs	r3, r2
 8007700:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f023 030a 	bic.w	r3, r3, #10
 8007708:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	4313      	orrs	r3, r2
 8007710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	621a      	str	r2, [r3, #32]
}
 800771e:	bf00      	nop
 8007720:	371c      	adds	r7, #28
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800772a:	b480      	push	{r7}
 800772c:	b087      	sub	sp, #28
 800772e:	af00      	add	r7, sp, #0
 8007730:	60f8      	str	r0, [r7, #12]
 8007732:	60b9      	str	r1, [r7, #8]
 8007734:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	f023 0210 	bic.w	r2, r3, #16
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6a1b      	ldr	r3, [r3, #32]
 800774c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007754:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	031b      	lsls	r3, r3, #12
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	4313      	orrs	r3, r2
 800775e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007766:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	011b      	lsls	r3, r3, #4
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	4313      	orrs	r3, r2
 8007770:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	621a      	str	r2, [r3, #32]
}
 800777e:	bf00      	nop
 8007780:	371c      	adds	r7, #28
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800778a:	b480      	push	{r7}
 800778c:	b085      	sub	sp, #20
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	f043 0307 	orr.w	r3, r3, #7
 80077ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	609a      	str	r2, [r3, #8]
}
 80077b4:	bf00      	nop
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
 80077cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	021a      	lsls	r2, r3, #8
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	431a      	orrs	r2, r3
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	697a      	ldr	r2, [r7, #20]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	609a      	str	r2, [r3, #8]
}
 80077f4:	bf00      	nop
 80077f6:	371c      	adds	r7, #28
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007810:	2b01      	cmp	r3, #1
 8007812:	d101      	bne.n	8007818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007814:	2302      	movs	r3, #2
 8007816:	e050      	b.n	80078ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2202      	movs	r2, #2
 8007824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800783e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	4313      	orrs	r3, r2
 8007848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a1c      	ldr	r2, [pc, #112]	; (80078c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d018      	beq.n	800788e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007864:	d013      	beq.n	800788e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a18      	ldr	r2, [pc, #96]	; (80078cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d00e      	beq.n	800788e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a16      	ldr	r2, [pc, #88]	; (80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d009      	beq.n	800788e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a15      	ldr	r2, [pc, #84]	; (80078d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d004      	beq.n	800788e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a13      	ldr	r2, [pc, #76]	; (80078d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d10c      	bne.n	80078a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007894:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	4313      	orrs	r3, r2
 800789e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	40010000 	.word	0x40010000
 80078cc:	40000400 	.word	0x40000400
 80078d0:	40000800 	.word	0x40000800
 80078d4:	40000c00 	.word	0x40000c00
 80078d8:	40014000 	.word	0x40014000

080078dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007904:	b084      	sub	sp, #16
 8007906:	b580      	push	{r7, lr}
 8007908:	b084      	sub	sp, #16
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
 800790e:	f107 001c 	add.w	r0, r7, #28
 8007912:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007918:	2b01      	cmp	r3, #1
 800791a:	d122      	bne.n	8007962 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007920:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007946:	2b01      	cmp	r3, #1
 8007948:	d105      	bne.n	8007956 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f001 fbee 	bl	8009138 <USB_CoreReset>
 800795c:	4603      	mov	r3, r0
 800795e:	73fb      	strb	r3, [r7, #15]
 8007960:	e01a      	b.n	8007998 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f001 fbe2 	bl	8009138 <USB_CoreReset>
 8007974:	4603      	mov	r3, r0
 8007976:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800797a:	2b00      	cmp	r3, #0
 800797c:	d106      	bne.n	800798c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007982:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	639a      	str	r2, [r3, #56]	; 0x38
 800798a:	e005      	b.n	8007998 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007990:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799a:	2b01      	cmp	r3, #1
 800799c:	d10b      	bne.n	80079b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	f043 0206 	orr.w	r2, r3, #6
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f043 0220 	orr.w	r2, r3, #32
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079c2:	b004      	add	sp, #16
 80079c4:	4770      	bx	lr
	...

080079c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	4613      	mov	r3, r2
 80079d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80079d6:	79fb      	ldrb	r3, [r7, #7]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d165      	bne.n	8007aa8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	4a41      	ldr	r2, [pc, #260]	; (8007ae4 <USB_SetTurnaroundTime+0x11c>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d906      	bls.n	80079f2 <USB_SetTurnaroundTime+0x2a>
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	4a40      	ldr	r2, [pc, #256]	; (8007ae8 <USB_SetTurnaroundTime+0x120>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d202      	bcs.n	80079f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80079ec:	230f      	movs	r3, #15
 80079ee:	617b      	str	r3, [r7, #20]
 80079f0:	e062      	b.n	8007ab8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	4a3c      	ldr	r2, [pc, #240]	; (8007ae8 <USB_SetTurnaroundTime+0x120>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d306      	bcc.n	8007a08 <USB_SetTurnaroundTime+0x40>
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	4a3b      	ldr	r2, [pc, #236]	; (8007aec <USB_SetTurnaroundTime+0x124>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d202      	bcs.n	8007a08 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007a02:	230e      	movs	r3, #14
 8007a04:	617b      	str	r3, [r7, #20]
 8007a06:	e057      	b.n	8007ab8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	4a38      	ldr	r2, [pc, #224]	; (8007aec <USB_SetTurnaroundTime+0x124>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d306      	bcc.n	8007a1e <USB_SetTurnaroundTime+0x56>
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	4a37      	ldr	r2, [pc, #220]	; (8007af0 <USB_SetTurnaroundTime+0x128>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d202      	bcs.n	8007a1e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007a18:	230d      	movs	r3, #13
 8007a1a:	617b      	str	r3, [r7, #20]
 8007a1c:	e04c      	b.n	8007ab8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	4a33      	ldr	r2, [pc, #204]	; (8007af0 <USB_SetTurnaroundTime+0x128>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d306      	bcc.n	8007a34 <USB_SetTurnaroundTime+0x6c>
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	4a32      	ldr	r2, [pc, #200]	; (8007af4 <USB_SetTurnaroundTime+0x12c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d802      	bhi.n	8007a34 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007a2e:	230c      	movs	r3, #12
 8007a30:	617b      	str	r3, [r7, #20]
 8007a32:	e041      	b.n	8007ab8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	4a2f      	ldr	r2, [pc, #188]	; (8007af4 <USB_SetTurnaroundTime+0x12c>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d906      	bls.n	8007a4a <USB_SetTurnaroundTime+0x82>
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	4a2e      	ldr	r2, [pc, #184]	; (8007af8 <USB_SetTurnaroundTime+0x130>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d802      	bhi.n	8007a4a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007a44:	230b      	movs	r3, #11
 8007a46:	617b      	str	r3, [r7, #20]
 8007a48:	e036      	b.n	8007ab8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	4a2a      	ldr	r2, [pc, #168]	; (8007af8 <USB_SetTurnaroundTime+0x130>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d906      	bls.n	8007a60 <USB_SetTurnaroundTime+0x98>
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	4a29      	ldr	r2, [pc, #164]	; (8007afc <USB_SetTurnaroundTime+0x134>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d802      	bhi.n	8007a60 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007a5a:	230a      	movs	r3, #10
 8007a5c:	617b      	str	r3, [r7, #20]
 8007a5e:	e02b      	b.n	8007ab8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	4a26      	ldr	r2, [pc, #152]	; (8007afc <USB_SetTurnaroundTime+0x134>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d906      	bls.n	8007a76 <USB_SetTurnaroundTime+0xae>
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	4a25      	ldr	r2, [pc, #148]	; (8007b00 <USB_SetTurnaroundTime+0x138>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d202      	bcs.n	8007a76 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007a70:	2309      	movs	r3, #9
 8007a72:	617b      	str	r3, [r7, #20]
 8007a74:	e020      	b.n	8007ab8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	4a21      	ldr	r2, [pc, #132]	; (8007b00 <USB_SetTurnaroundTime+0x138>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d306      	bcc.n	8007a8c <USB_SetTurnaroundTime+0xc4>
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	4a20      	ldr	r2, [pc, #128]	; (8007b04 <USB_SetTurnaroundTime+0x13c>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d802      	bhi.n	8007a8c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007a86:	2308      	movs	r3, #8
 8007a88:	617b      	str	r3, [r7, #20]
 8007a8a:	e015      	b.n	8007ab8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	4a1d      	ldr	r2, [pc, #116]	; (8007b04 <USB_SetTurnaroundTime+0x13c>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d906      	bls.n	8007aa2 <USB_SetTurnaroundTime+0xda>
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	4a1c      	ldr	r2, [pc, #112]	; (8007b08 <USB_SetTurnaroundTime+0x140>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d202      	bcs.n	8007aa2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007a9c:	2307      	movs	r3, #7
 8007a9e:	617b      	str	r3, [r7, #20]
 8007aa0:	e00a      	b.n	8007ab8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007aa2:	2306      	movs	r3, #6
 8007aa4:	617b      	str	r3, [r7, #20]
 8007aa6:	e007      	b.n	8007ab8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007aa8:	79fb      	ldrb	r3, [r7, #7]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d102      	bne.n	8007ab4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007aae:	2309      	movs	r3, #9
 8007ab0:	617b      	str	r3, [r7, #20]
 8007ab2:	e001      	b.n	8007ab8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007ab4:	2309      	movs	r3, #9
 8007ab6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	68da      	ldr	r2, [r3, #12]
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	029b      	lsls	r3, r3, #10
 8007acc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	371c      	adds	r7, #28
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	00d8acbf 	.word	0x00d8acbf
 8007ae8:	00e4e1c0 	.word	0x00e4e1c0
 8007aec:	00f42400 	.word	0x00f42400
 8007af0:	01067380 	.word	0x01067380
 8007af4:	011a499f 	.word	0x011a499f
 8007af8:	01312cff 	.word	0x01312cff
 8007afc:	014ca43f 	.word	0x014ca43f
 8007b00:	016e3600 	.word	0x016e3600
 8007b04:	01a6ab1f 	.word	0x01a6ab1f
 8007b08:	01e84800 	.word	0x01e84800

08007b0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f043 0201 	orr.w	r2, r3, #1
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b083      	sub	sp, #12
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f023 0201 	bic.w	r2, r3, #1
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b6c:	78fb      	ldrb	r3, [r7, #3]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d115      	bne.n	8007b9e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b7e:	2001      	movs	r0, #1
 8007b80:	f7fa fd24 	bl	80025cc <HAL_Delay>
      ms++;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	3301      	adds	r3, #1
 8007b88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f001 fa45 	bl	800901a <USB_GetMode>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d01e      	beq.n	8007bd4 <USB_SetCurrentMode+0x84>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2b31      	cmp	r3, #49	; 0x31
 8007b9a:	d9f0      	bls.n	8007b7e <USB_SetCurrentMode+0x2e>
 8007b9c:	e01a      	b.n	8007bd4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b9e:	78fb      	ldrb	r3, [r7, #3]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d115      	bne.n	8007bd0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007bb0:	2001      	movs	r0, #1
 8007bb2:	f7fa fd0b 	bl	80025cc <HAL_Delay>
      ms++;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f001 fa2c 	bl	800901a <USB_GetMode>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d005      	beq.n	8007bd4 <USB_SetCurrentMode+0x84>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2b31      	cmp	r3, #49	; 0x31
 8007bcc:	d9f0      	bls.n	8007bb0 <USB_SetCurrentMode+0x60>
 8007bce:	e001      	b.n	8007bd4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e005      	b.n	8007be0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2b32      	cmp	r3, #50	; 0x32
 8007bd8:	d101      	bne.n	8007bde <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e000      	b.n	8007be0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007be8:	b084      	sub	sp, #16
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b086      	sub	sp, #24
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007bf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007c02:	2300      	movs	r3, #0
 8007c04:	613b      	str	r3, [r7, #16]
 8007c06:	e009      	b.n	8007c1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	3340      	adds	r3, #64	; 0x40
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	2200      	movs	r2, #0
 8007c14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	613b      	str	r3, [r7, #16]
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	2b0e      	cmp	r3, #14
 8007c20:	d9f2      	bls.n	8007c08 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d11c      	bne.n	8007c62 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c36:	f043 0302 	orr.w	r3, r3, #2
 8007c3a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c58:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	639a      	str	r2, [r3, #56]	; 0x38
 8007c60:	e00b      	b.n	8007c7a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c66:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c72:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c80:	461a      	mov	r2, r3
 8007c82:	2300      	movs	r3, #0
 8007c84:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c94:	461a      	mov	r2, r3
 8007c96:	680b      	ldr	r3, [r1, #0]
 8007c98:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d10c      	bne.n	8007cba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d104      	bne.n	8007cb0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f965 	bl	8007f78 <USB_SetDevSpeed>
 8007cae:	e008      	b.n	8007cc2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f960 	bl	8007f78 <USB_SetDevSpeed>
 8007cb8:	e003      	b.n	8007cc2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007cba:	2103      	movs	r1, #3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f95b 	bl	8007f78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007cc2:	2110      	movs	r1, #16
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f8f3 	bl	8007eb0 <USB_FlushTxFifo>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d001      	beq.n	8007cd4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f91f 	bl	8007f18 <USB_FlushRxFifo>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d001      	beq.n	8007ce4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cea:	461a      	mov	r2, r3
 8007cec:	2300      	movs	r3, #0
 8007cee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d02:	461a      	mov	r2, r3
 8007d04:	2300      	movs	r3, #0
 8007d06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d08:	2300      	movs	r3, #0
 8007d0a:	613b      	str	r3, [r7, #16]
 8007d0c:	e043      	b.n	8007d96 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	015a      	lsls	r2, r3, #5
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	4413      	add	r3, r2
 8007d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d24:	d118      	bne.n	8007d58 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10a      	bne.n	8007d42 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	015a      	lsls	r2, r3, #5
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d38:	461a      	mov	r2, r3
 8007d3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d3e:	6013      	str	r3, [r2, #0]
 8007d40:	e013      	b.n	8007d6a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	015a      	lsls	r2, r3, #5
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d4e:	461a      	mov	r2, r3
 8007d50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d54:	6013      	str	r3, [r2, #0]
 8007d56:	e008      	b.n	8007d6a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	015a      	lsls	r2, r3, #5
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	4413      	add	r3, r2
 8007d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d64:	461a      	mov	r2, r3
 8007d66:	2300      	movs	r3, #0
 8007d68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d76:	461a      	mov	r2, r3
 8007d78:	2300      	movs	r3, #0
 8007d7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	015a      	lsls	r2, r3, #5
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	4413      	add	r3, r2
 8007d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d88:	461a      	mov	r2, r3
 8007d8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	3301      	adds	r3, #1
 8007d94:	613b      	str	r3, [r7, #16]
 8007d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d3b7      	bcc.n	8007d0e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d9e:	2300      	movs	r3, #0
 8007da0:	613b      	str	r3, [r7, #16]
 8007da2:	e043      	b.n	8007e2c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	015a      	lsls	r2, r3, #5
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007db6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dba:	d118      	bne.n	8007dee <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10a      	bne.n	8007dd8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	015a      	lsls	r2, r3, #5
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	4413      	add	r3, r2
 8007dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dce:	461a      	mov	r2, r3
 8007dd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007dd4:	6013      	str	r3, [r2, #0]
 8007dd6:	e013      	b.n	8007e00 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	015a      	lsls	r2, r3, #5
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4413      	add	r3, r2
 8007de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de4:	461a      	mov	r2, r3
 8007de6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007dea:	6013      	str	r3, [r2, #0]
 8007dec:	e008      	b.n	8007e00 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	015a      	lsls	r2, r3, #5
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	015a      	lsls	r2, r3, #5
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	4413      	add	r3, r2
 8007e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	2300      	movs	r3, #0
 8007e10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e1e:	461a      	mov	r2, r3
 8007e20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	613b      	str	r3, [r7, #16]
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d3b7      	bcc.n	8007da4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e46:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007e54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d105      	bne.n	8007e68 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	699b      	ldr	r3, [r3, #24]
 8007e60:	f043 0210 	orr.w	r2, r3, #16
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	699a      	ldr	r2, [r3, #24]
 8007e6c:	4b0f      	ldr	r3, [pc, #60]	; (8007eac <USB_DevInit+0x2c4>)
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d005      	beq.n	8007e86 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	f043 0208 	orr.w	r2, r3, #8
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d107      	bne.n	8007e9c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e94:	f043 0304 	orr.w	r3, r3, #4
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3718      	adds	r7, #24
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ea8:	b004      	add	sp, #16
 8007eaa:	4770      	bx	lr
 8007eac:	803c3800 	.word	0x803c3800

08007eb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4a13      	ldr	r2, [pc, #76]	; (8007f14 <USB_FlushTxFifo+0x64>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d901      	bls.n	8007ed0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e01b      	b.n	8007f08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	daf2      	bge.n	8007ebe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	019b      	lsls	r3, r3, #6
 8007ee0:	f043 0220 	orr.w	r2, r3, #32
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	3301      	adds	r3, #1
 8007eec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	4a08      	ldr	r2, [pc, #32]	; (8007f14 <USB_FlushTxFifo+0x64>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d901      	bls.n	8007efa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e006      	b.n	8007f08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	f003 0320 	and.w	r3, r3, #32
 8007f02:	2b20      	cmp	r3, #32
 8007f04:	d0f0      	beq.n	8007ee8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3714      	adds	r7, #20
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
 8007f14:	00030d40 	.word	0x00030d40

08007f18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f20:	2300      	movs	r3, #0
 8007f22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	3301      	adds	r3, #1
 8007f28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	4a11      	ldr	r2, [pc, #68]	; (8007f74 <USB_FlushRxFifo+0x5c>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d901      	bls.n	8007f36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e018      	b.n	8007f68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	daf2      	bge.n	8007f24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2210      	movs	r2, #16
 8007f46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	4a08      	ldr	r2, [pc, #32]	; (8007f74 <USB_FlushRxFifo+0x5c>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d901      	bls.n	8007f5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e006      	b.n	8007f68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	f003 0310 	and.w	r3, r3, #16
 8007f62:	2b10      	cmp	r3, #16
 8007f64:	d0f0      	beq.n	8007f48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr
 8007f74:	00030d40 	.word	0x00030d40

08007f78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	78fb      	ldrb	r3, [r7, #3]
 8007f92:	68f9      	ldr	r1, [r7, #12]
 8007f94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3714      	adds	r7, #20
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b087      	sub	sp, #28
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f003 0306 	and.w	r3, r3, #6
 8007fc2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d102      	bne.n	8007fd0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	75fb      	strb	r3, [r7, #23]
 8007fce:	e00a      	b.n	8007fe6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d002      	beq.n	8007fdc <USB_GetDevSpeed+0x32>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2b06      	cmp	r3, #6
 8007fda:	d102      	bne.n	8007fe2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007fdc:	2302      	movs	r3, #2
 8007fde:	75fb      	strb	r3, [r7, #23]
 8007fe0:	e001      	b.n	8007fe6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007fe2:	230f      	movs	r3, #15
 8007fe4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	371c      	adds	r7, #28
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	785b      	ldrb	r3, [r3, #1]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d13a      	bne.n	8008086 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008016:	69da      	ldr	r2, [r3, #28]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	f003 030f 	and.w	r3, r3, #15
 8008020:	2101      	movs	r1, #1
 8008022:	fa01 f303 	lsl.w	r3, r1, r3
 8008026:	b29b      	uxth	r3, r3
 8008028:	68f9      	ldr	r1, [r7, #12]
 800802a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800802e:	4313      	orrs	r3, r2
 8008030:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	015a      	lsls	r2, r3, #5
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	4413      	add	r3, r2
 800803a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008044:	2b00      	cmp	r3, #0
 8008046:	d155      	bne.n	80080f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	015a      	lsls	r2, r3, #5
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	4413      	add	r3, r2
 8008050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	791b      	ldrb	r3, [r3, #4]
 8008062:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008064:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	059b      	lsls	r3, r3, #22
 800806a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800806c:	4313      	orrs	r3, r2
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	0151      	lsls	r1, r2, #5
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	440a      	add	r2, r1
 8008076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800807a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800807e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008082:	6013      	str	r3, [r2, #0]
 8008084:	e036      	b.n	80080f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800808c:	69da      	ldr	r2, [r3, #28]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	f003 030f 	and.w	r3, r3, #15
 8008096:	2101      	movs	r1, #1
 8008098:	fa01 f303 	lsl.w	r3, r1, r3
 800809c:	041b      	lsls	r3, r3, #16
 800809e:	68f9      	ldr	r1, [r7, #12]
 80080a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080a4:	4313      	orrs	r3, r2
 80080a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	015a      	lsls	r2, r3, #5
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	4413      	add	r3, r2
 80080b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d11a      	bne.n	80080f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	015a      	lsls	r2, r3, #5
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	4413      	add	r3, r2
 80080c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	791b      	ldrb	r3, [r3, #4]
 80080d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80080da:	430b      	orrs	r3, r1
 80080dc:	4313      	orrs	r3, r2
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	0151      	lsls	r1, r2, #5
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	440a      	add	r2, r1
 80080e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
	...

08008104 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	785b      	ldrb	r3, [r3, #1]
 800811c:	2b01      	cmp	r3, #1
 800811e:	d161      	bne.n	80081e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	015a      	lsls	r2, r3, #5
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	4413      	add	r3, r2
 8008128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008132:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008136:	d11f      	bne.n	8008178 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	015a      	lsls	r2, r3, #5
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	4413      	add	r3, r2
 8008140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	0151      	lsls	r1, r2, #5
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	440a      	add	r2, r1
 800814e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008152:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008156:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	015a      	lsls	r2, r3, #5
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	4413      	add	r3, r2
 8008160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	0151      	lsls	r1, r2, #5
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	440a      	add	r2, r1
 800816e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008172:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008176:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800817e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	f003 030f 	and.w	r3, r3, #15
 8008188:	2101      	movs	r1, #1
 800818a:	fa01 f303 	lsl.w	r3, r1, r3
 800818e:	b29b      	uxth	r3, r3
 8008190:	43db      	mvns	r3, r3
 8008192:	68f9      	ldr	r1, [r7, #12]
 8008194:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008198:	4013      	ands	r3, r2
 800819a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081a2:	69da      	ldr	r2, [r3, #28]
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	f003 030f 	and.w	r3, r3, #15
 80081ac:	2101      	movs	r1, #1
 80081ae:	fa01 f303 	lsl.w	r3, r1, r3
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	43db      	mvns	r3, r3
 80081b6:	68f9      	ldr	r1, [r7, #12]
 80081b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081bc:	4013      	ands	r3, r2
 80081be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	015a      	lsls	r2, r3, #5
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	4413      	add	r3, r2
 80081c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	0159      	lsls	r1, r3, #5
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	440b      	add	r3, r1
 80081d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081da:	4619      	mov	r1, r3
 80081dc:	4b35      	ldr	r3, [pc, #212]	; (80082b4 <USB_DeactivateEndpoint+0x1b0>)
 80081de:	4013      	ands	r3, r2
 80081e0:	600b      	str	r3, [r1, #0]
 80081e2:	e060      	b.n	80082a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	015a      	lsls	r2, r3, #5
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	4413      	add	r3, r2
 80081ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081fa:	d11f      	bne.n	800823c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	4413      	add	r3, r2
 8008204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	0151      	lsls	r1, r2, #5
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	440a      	add	r2, r1
 8008212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008216:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800821a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	4413      	add	r3, r2
 8008224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	0151      	lsls	r1, r2, #5
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	440a      	add	r2, r1
 8008232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008236:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800823a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	f003 030f 	and.w	r3, r3, #15
 800824c:	2101      	movs	r1, #1
 800824e:	fa01 f303 	lsl.w	r3, r1, r3
 8008252:	041b      	lsls	r3, r3, #16
 8008254:	43db      	mvns	r3, r3
 8008256:	68f9      	ldr	r1, [r7, #12]
 8008258:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800825c:	4013      	ands	r3, r2
 800825e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008266:	69da      	ldr	r2, [r3, #28]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	f003 030f 	and.w	r3, r3, #15
 8008270:	2101      	movs	r1, #1
 8008272:	fa01 f303 	lsl.w	r3, r1, r3
 8008276:	041b      	lsls	r3, r3, #16
 8008278:	43db      	mvns	r3, r3
 800827a:	68f9      	ldr	r1, [r7, #12]
 800827c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008280:	4013      	ands	r3, r2
 8008282:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	015a      	lsls	r2, r3, #5
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	4413      	add	r3, r2
 800828c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	0159      	lsls	r1, r3, #5
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	440b      	add	r3, r1
 800829a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800829e:	4619      	mov	r1, r3
 80082a0:	4b05      	ldr	r3, [pc, #20]	; (80082b8 <USB_DeactivateEndpoint+0x1b4>)
 80082a2:	4013      	ands	r3, r2
 80082a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3714      	adds	r7, #20
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr
 80082b4:	ec337800 	.word	0xec337800
 80082b8:	eff37800 	.word	0xeff37800

080082bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b08a      	sub	sp, #40	; 0x28
 80082c0:	af02      	add	r7, sp, #8
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	4613      	mov	r3, r2
 80082c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	785b      	ldrb	r3, [r3, #1]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	f040 815c 	bne.w	8008596 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d132      	bne.n	800834c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	015a      	lsls	r2, r3, #5
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	4413      	add	r3, r2
 80082ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	69ba      	ldr	r2, [r7, #24]
 80082f6:	0151      	lsls	r1, r2, #5
 80082f8:	69fa      	ldr	r2, [r7, #28]
 80082fa:	440a      	add	r2, r1
 80082fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008300:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008304:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008308:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	015a      	lsls	r2, r3, #5
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	4413      	add	r3, r2
 8008312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	69ba      	ldr	r2, [r7, #24]
 800831a:	0151      	lsls	r1, r2, #5
 800831c:	69fa      	ldr	r2, [r7, #28]
 800831e:	440a      	add	r2, r1
 8008320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008324:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008328:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	015a      	lsls	r2, r3, #5
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	4413      	add	r3, r2
 8008332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	69ba      	ldr	r2, [r7, #24]
 800833a:	0151      	lsls	r1, r2, #5
 800833c:	69fa      	ldr	r2, [r7, #28]
 800833e:	440a      	add	r2, r1
 8008340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008344:	0cdb      	lsrs	r3, r3, #19
 8008346:	04db      	lsls	r3, r3, #19
 8008348:	6113      	str	r3, [r2, #16]
 800834a:	e074      	b.n	8008436 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	4413      	add	r3, r2
 8008354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	69ba      	ldr	r2, [r7, #24]
 800835c:	0151      	lsls	r1, r2, #5
 800835e:	69fa      	ldr	r2, [r7, #28]
 8008360:	440a      	add	r2, r1
 8008362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008366:	0cdb      	lsrs	r3, r3, #19
 8008368:	04db      	lsls	r3, r3, #19
 800836a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	4413      	add	r3, r2
 8008374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	69ba      	ldr	r2, [r7, #24]
 800837c:	0151      	lsls	r1, r2, #5
 800837e:	69fa      	ldr	r2, [r7, #28]
 8008380:	440a      	add	r2, r1
 8008382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008386:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800838a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800838e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	015a      	lsls	r2, r3, #5
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	4413      	add	r3, r2
 8008398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800839c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	6999      	ldr	r1, [r3, #24]
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	440b      	add	r3, r1
 80083a8:	1e59      	subs	r1, r3, #1
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80083b2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80083b4:	4b9d      	ldr	r3, [pc, #628]	; (800862c <USB_EPStartXfer+0x370>)
 80083b6:	400b      	ands	r3, r1
 80083b8:	69b9      	ldr	r1, [r7, #24]
 80083ba:	0148      	lsls	r0, r1, #5
 80083bc:	69f9      	ldr	r1, [r7, #28]
 80083be:	4401      	add	r1, r0
 80083c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80083c4:	4313      	orrs	r3, r2
 80083c6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d4:	691a      	ldr	r2, [r3, #16]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083de:	69b9      	ldr	r1, [r7, #24]
 80083e0:	0148      	lsls	r0, r1, #5
 80083e2:	69f9      	ldr	r1, [r7, #28]
 80083e4:	4401      	add	r1, r0
 80083e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80083ea:	4313      	orrs	r3, r2
 80083ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	791b      	ldrb	r3, [r3, #4]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d11f      	bne.n	8008436 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	015a      	lsls	r2, r3, #5
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	4413      	add	r3, r2
 80083fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	69ba      	ldr	r2, [r7, #24]
 8008406:	0151      	lsls	r1, r2, #5
 8008408:	69fa      	ldr	r2, [r7, #28]
 800840a:	440a      	add	r2, r1
 800840c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008410:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008414:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	015a      	lsls	r2, r3, #5
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	4413      	add	r3, r2
 800841e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	69ba      	ldr	r2, [r7, #24]
 8008426:	0151      	lsls	r1, r2, #5
 8008428:	69fa      	ldr	r2, [r7, #28]
 800842a:	440a      	add	r2, r1
 800842c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008430:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008434:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008436:	79fb      	ldrb	r3, [r7, #7]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d14b      	bne.n	80084d4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	695b      	ldr	r3, [r3, #20]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d009      	beq.n	8008458 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	015a      	lsls	r2, r3, #5
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	4413      	add	r3, r2
 800844c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008450:	461a      	mov	r2, r3
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	791b      	ldrb	r3, [r3, #4]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d128      	bne.n	80084b2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800846c:	2b00      	cmp	r3, #0
 800846e:	d110      	bne.n	8008492 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	4413      	add	r3, r2
 8008478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	69ba      	ldr	r2, [r7, #24]
 8008480:	0151      	lsls	r1, r2, #5
 8008482:	69fa      	ldr	r2, [r7, #28]
 8008484:	440a      	add	r2, r1
 8008486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800848a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800848e:	6013      	str	r3, [r2, #0]
 8008490:	e00f      	b.n	80084b2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	015a      	lsls	r2, r3, #5
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	4413      	add	r3, r2
 800849a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	69ba      	ldr	r2, [r7, #24]
 80084a2:	0151      	lsls	r1, r2, #5
 80084a4:	69fa      	ldr	r2, [r7, #28]
 80084a6:	440a      	add	r2, r1
 80084a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	015a      	lsls	r2, r3, #5
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	4413      	add	r3, r2
 80084ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	69ba      	ldr	r2, [r7, #24]
 80084c2:	0151      	lsls	r1, r2, #5
 80084c4:	69fa      	ldr	r2, [r7, #28]
 80084c6:	440a      	add	r2, r1
 80084c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80084d0:	6013      	str	r3, [r2, #0]
 80084d2:	e133      	b.n	800873c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	015a      	lsls	r2, r3, #5
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	4413      	add	r3, r2
 80084dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	69ba      	ldr	r2, [r7, #24]
 80084e4:	0151      	lsls	r1, r2, #5
 80084e6:	69fa      	ldr	r2, [r7, #28]
 80084e8:	440a      	add	r2, r1
 80084ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80084f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	791b      	ldrb	r3, [r3, #4]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d015      	beq.n	8008528 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	2b00      	cmp	r3, #0
 8008502:	f000 811b 	beq.w	800873c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800850c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	f003 030f 	and.w	r3, r3, #15
 8008516:	2101      	movs	r1, #1
 8008518:	fa01 f303 	lsl.w	r3, r1, r3
 800851c:	69f9      	ldr	r1, [r7, #28]
 800851e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008522:	4313      	orrs	r3, r2
 8008524:	634b      	str	r3, [r1, #52]	; 0x34
 8008526:	e109      	b.n	800873c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008534:	2b00      	cmp	r3, #0
 8008536:	d110      	bne.n	800855a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	015a      	lsls	r2, r3, #5
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	4413      	add	r3, r2
 8008540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	69ba      	ldr	r2, [r7, #24]
 8008548:	0151      	lsls	r1, r2, #5
 800854a:	69fa      	ldr	r2, [r7, #28]
 800854c:	440a      	add	r2, r1
 800854e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008552:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008556:	6013      	str	r3, [r2, #0]
 8008558:	e00f      	b.n	800857a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	015a      	lsls	r2, r3, #5
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	4413      	add	r3, r2
 8008562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	69ba      	ldr	r2, [r7, #24]
 800856a:	0151      	lsls	r1, r2, #5
 800856c:	69fa      	ldr	r2, [r7, #28]
 800856e:	440a      	add	r2, r1
 8008570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008578:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	6919      	ldr	r1, [r3, #16]
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	781a      	ldrb	r2, [r3, #0]
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	b298      	uxth	r0, r3
 8008588:	79fb      	ldrb	r3, [r7, #7]
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	4603      	mov	r3, r0
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f000 fade 	bl	8008b50 <USB_WritePacket>
 8008594:	e0d2      	b.n	800873c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	015a      	lsls	r2, r3, #5
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	4413      	add	r3, r2
 800859e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	69ba      	ldr	r2, [r7, #24]
 80085a6:	0151      	lsls	r1, r2, #5
 80085a8:	69fa      	ldr	r2, [r7, #28]
 80085aa:	440a      	add	r2, r1
 80085ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085b0:	0cdb      	lsrs	r3, r3, #19
 80085b2:	04db      	lsls	r3, r3, #19
 80085b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	015a      	lsls	r2, r3, #5
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	4413      	add	r3, r2
 80085be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	69ba      	ldr	r2, [r7, #24]
 80085c6:	0151      	lsls	r1, r2, #5
 80085c8:	69fa      	ldr	r2, [r7, #28]
 80085ca:	440a      	add	r2, r1
 80085cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80085d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80085d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d126      	bne.n	8008630 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	015a      	lsls	r2, r3, #5
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	4413      	add	r3, r2
 80085ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ee:	691a      	ldr	r2, [r3, #16]
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085f8:	69b9      	ldr	r1, [r7, #24]
 80085fa:	0148      	lsls	r0, r1, #5
 80085fc:	69f9      	ldr	r1, [r7, #28]
 80085fe:	4401      	add	r1, r0
 8008600:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008604:	4313      	orrs	r3, r2
 8008606:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	015a      	lsls	r2, r3, #5
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	4413      	add	r3, r2
 8008610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	69ba      	ldr	r2, [r7, #24]
 8008618:	0151      	lsls	r1, r2, #5
 800861a:	69fa      	ldr	r2, [r7, #28]
 800861c:	440a      	add	r2, r1
 800861e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008622:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008626:	6113      	str	r3, [r2, #16]
 8008628:	e03a      	b.n	80086a0 <USB_EPStartXfer+0x3e4>
 800862a:	bf00      	nop
 800862c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	699a      	ldr	r2, [r3, #24]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	4413      	add	r3, r2
 800863a:	1e5a      	subs	r2, r3, #1
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	fbb2 f3f3 	udiv	r3, r2, r3
 8008644:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	8afa      	ldrh	r2, [r7, #22]
 800864c:	fb03 f202 	mul.w	r2, r3, r2
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	4413      	add	r3, r2
 800865c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008660:	691a      	ldr	r2, [r3, #16]
 8008662:	8afb      	ldrh	r3, [r7, #22]
 8008664:	04d9      	lsls	r1, r3, #19
 8008666:	4b38      	ldr	r3, [pc, #224]	; (8008748 <USB_EPStartXfer+0x48c>)
 8008668:	400b      	ands	r3, r1
 800866a:	69b9      	ldr	r1, [r7, #24]
 800866c:	0148      	lsls	r0, r1, #5
 800866e:	69f9      	ldr	r1, [r7, #28]
 8008670:	4401      	add	r1, r0
 8008672:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008676:	4313      	orrs	r3, r2
 8008678:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	015a      	lsls	r2, r3, #5
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	4413      	add	r3, r2
 8008682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008686:	691a      	ldr	r2, [r3, #16]
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	69db      	ldr	r3, [r3, #28]
 800868c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008690:	69b9      	ldr	r1, [r7, #24]
 8008692:	0148      	lsls	r0, r1, #5
 8008694:	69f9      	ldr	r1, [r7, #28]
 8008696:	4401      	add	r1, r0
 8008698:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800869c:	4313      	orrs	r3, r2
 800869e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80086a0:	79fb      	ldrb	r3, [r7, #7]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d10d      	bne.n	80086c2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d009      	beq.n	80086c2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	6919      	ldr	r1, [r3, #16]
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	015a      	lsls	r2, r3, #5
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	4413      	add	r3, r2
 80086ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086be:	460a      	mov	r2, r1
 80086c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	791b      	ldrb	r3, [r3, #4]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d128      	bne.n	800871c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d110      	bne.n	80086fc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	015a      	lsls	r2, r3, #5
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	4413      	add	r3, r2
 80086e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	69ba      	ldr	r2, [r7, #24]
 80086ea:	0151      	lsls	r1, r2, #5
 80086ec:	69fa      	ldr	r2, [r7, #28]
 80086ee:	440a      	add	r2, r1
 80086f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086f8:	6013      	str	r3, [r2, #0]
 80086fa:	e00f      	b.n	800871c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	015a      	lsls	r2, r3, #5
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	4413      	add	r3, r2
 8008704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	0151      	lsls	r1, r2, #5
 800870e:	69fa      	ldr	r2, [r7, #28]
 8008710:	440a      	add	r2, r1
 8008712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800871a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	015a      	lsls	r2, r3, #5
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	4413      	add	r3, r2
 8008724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	69ba      	ldr	r2, [r7, #24]
 800872c:	0151      	lsls	r1, r2, #5
 800872e:	69fa      	ldr	r2, [r7, #28]
 8008730:	440a      	add	r2, r1
 8008732:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008736:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800873a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3720      	adds	r7, #32
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	1ff80000 	.word	0x1ff80000

0800874c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800874c:	b480      	push	{r7}
 800874e:	b087      	sub	sp, #28
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	4613      	mov	r3, r2
 8008758:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	785b      	ldrb	r3, [r3, #1]
 8008768:	2b01      	cmp	r3, #1
 800876a:	f040 80ce 	bne.w	800890a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d132      	bne.n	80087dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	015a      	lsls	r2, r3, #5
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	4413      	add	r3, r2
 800877e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	693a      	ldr	r2, [r7, #16]
 8008786:	0151      	lsls	r1, r2, #5
 8008788:	697a      	ldr	r2, [r7, #20]
 800878a:	440a      	add	r2, r1
 800878c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008790:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008794:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008798:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	015a      	lsls	r2, r3, #5
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	4413      	add	r3, r2
 80087a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	0151      	lsls	r1, r2, #5
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	440a      	add	r2, r1
 80087b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	015a      	lsls	r2, r3, #5
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	0151      	lsls	r1, r2, #5
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	440a      	add	r2, r1
 80087d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087d4:	0cdb      	lsrs	r3, r3, #19
 80087d6:	04db      	lsls	r3, r3, #19
 80087d8:	6113      	str	r3, [r2, #16]
 80087da:	e04e      	b.n	800887a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	015a      	lsls	r2, r3, #5
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	4413      	add	r3, r2
 80087e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	0151      	lsls	r1, r2, #5
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	440a      	add	r2, r1
 80087f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087f6:	0cdb      	lsrs	r3, r3, #19
 80087f8:	04db      	lsls	r3, r3, #19
 80087fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	015a      	lsls	r2, r3, #5
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	4413      	add	r3, r2
 8008804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	0151      	lsls	r1, r2, #5
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	440a      	add	r2, r1
 8008812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008816:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800881a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800881e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	699a      	ldr	r2, [r3, #24]
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	429a      	cmp	r2, r3
 800882a:	d903      	bls.n	8008834 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	68da      	ldr	r2, [r3, #12]
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	4413      	add	r3, r2
 800883c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	693a      	ldr	r2, [r7, #16]
 8008844:	0151      	lsls	r1, r2, #5
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	440a      	add	r2, r1
 800884a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800884e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008852:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	015a      	lsls	r2, r3, #5
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	4413      	add	r3, r2
 800885c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008860:	691a      	ldr	r2, [r3, #16]
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800886a:	6939      	ldr	r1, [r7, #16]
 800886c:	0148      	lsls	r0, r1, #5
 800886e:	6979      	ldr	r1, [r7, #20]
 8008870:	4401      	add	r1, r0
 8008872:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008876:	4313      	orrs	r3, r2
 8008878:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800887a:	79fb      	ldrb	r3, [r7, #7]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d11e      	bne.n	80088be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	695b      	ldr	r3, [r3, #20]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d009      	beq.n	800889c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	4413      	add	r3, r2
 8008890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008894:	461a      	mov	r2, r3
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	695b      	ldr	r3, [r3, #20]
 800889a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	015a      	lsls	r2, r3, #5
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	4413      	add	r3, r2
 80088a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	693a      	ldr	r2, [r7, #16]
 80088ac:	0151      	lsls	r1, r2, #5
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	440a      	add	r2, r1
 80088b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80088ba:	6013      	str	r3, [r2, #0]
 80088bc:	e097      	b.n	80089ee <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	015a      	lsls	r2, r3, #5
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	4413      	add	r3, r2
 80088c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	0151      	lsls	r1, r2, #5
 80088d0:	697a      	ldr	r2, [r7, #20]
 80088d2:	440a      	add	r2, r1
 80088d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80088dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f000 8083 	beq.w	80089ee <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	f003 030f 	and.w	r3, r3, #15
 80088f8:	2101      	movs	r1, #1
 80088fa:	fa01 f303 	lsl.w	r3, r1, r3
 80088fe:	6979      	ldr	r1, [r7, #20]
 8008900:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008904:	4313      	orrs	r3, r2
 8008906:	634b      	str	r3, [r1, #52]	; 0x34
 8008908:	e071      	b.n	80089ee <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	015a      	lsls	r2, r3, #5
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	4413      	add	r3, r2
 8008912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	0151      	lsls	r1, r2, #5
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	440a      	add	r2, r1
 8008920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008924:	0cdb      	lsrs	r3, r3, #19
 8008926:	04db      	lsls	r3, r3, #19
 8008928:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	015a      	lsls	r2, r3, #5
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	4413      	add	r3, r2
 8008932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	693a      	ldr	r2, [r7, #16]
 800893a:	0151      	lsls	r1, r2, #5
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	440a      	add	r2, r1
 8008940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008944:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008948:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800894c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d003      	beq.n	800895e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	68da      	ldr	r2, [r3, #12]
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	68da      	ldr	r2, [r3, #12]
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	015a      	lsls	r2, r3, #5
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	4413      	add	r3, r2
 800896e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	693a      	ldr	r2, [r7, #16]
 8008976:	0151      	lsls	r1, r2, #5
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	440a      	add	r2, r1
 800897c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008980:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008984:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	015a      	lsls	r2, r3, #5
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	4413      	add	r3, r2
 800898e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008992:	691a      	ldr	r2, [r3, #16]
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	69db      	ldr	r3, [r3, #28]
 8008998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800899c:	6939      	ldr	r1, [r7, #16]
 800899e:	0148      	lsls	r0, r1, #5
 80089a0:	6979      	ldr	r1, [r7, #20]
 80089a2:	4401      	add	r1, r0
 80089a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80089a8:	4313      	orrs	r3, r2
 80089aa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80089ac:	79fb      	ldrb	r3, [r7, #7]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d10d      	bne.n	80089ce <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d009      	beq.n	80089ce <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	6919      	ldr	r1, [r3, #16]
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	015a      	lsls	r2, r3, #5
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	4413      	add	r3, r2
 80089c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ca:	460a      	mov	r2, r1
 80089cc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	015a      	lsls	r2, r3, #5
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	4413      	add	r3, r2
 80089d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	693a      	ldr	r2, [r7, #16]
 80089de:	0151      	lsls	r1, r2, #5
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	440a      	add	r2, r1
 80089e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	371c      	adds	r7, #28
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b087      	sub	sp, #28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a06:	2300      	movs	r3, #0
 8008a08:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	785b      	ldrb	r3, [r3, #1]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d14a      	bne.n	8008ab0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a32:	f040 8086 	bne.w	8008b42 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	015a      	lsls	r2, r3, #5
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	4413      	add	r3, r2
 8008a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	683a      	ldr	r2, [r7, #0]
 8008a48:	7812      	ldrb	r2, [r2, #0]
 8008a4a:	0151      	lsls	r1, r2, #5
 8008a4c:	693a      	ldr	r2, [r7, #16]
 8008a4e:	440a      	add	r2, r1
 8008a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a58:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	015a      	lsls	r2, r3, #5
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	4413      	add	r3, r2
 8008a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	7812      	ldrb	r2, [r2, #0]
 8008a6e:	0151      	lsls	r1, r2, #5
 8008a70:	693a      	ldr	r2, [r7, #16]
 8008a72:	440a      	add	r2, r1
 8008a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	3301      	adds	r3, #1
 8008a82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f242 7210 	movw	r2, #10000	; 0x2710
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d902      	bls.n	8008a94 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	75fb      	strb	r3, [r7, #23]
          break;
 8008a92:	e056      	b.n	8008b42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	015a      	lsls	r2, r3, #5
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008aac:	d0e7      	beq.n	8008a7e <USB_EPStopXfer+0x82>
 8008aae:	e048      	b.n	8008b42 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	015a      	lsls	r2, r3, #5
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	4413      	add	r3, r2
 8008aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ac8:	d13b      	bne.n	8008b42 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	015a      	lsls	r2, r3, #5
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	7812      	ldrb	r2, [r2, #0]
 8008ade:	0151      	lsls	r1, r2, #5
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	440a      	add	r2, r1
 8008ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ae8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008aec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	015a      	lsls	r2, r3, #5
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	4413      	add	r3, r2
 8008af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	7812      	ldrb	r2, [r2, #0]
 8008b02:	0151      	lsls	r1, r2, #5
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	440a      	add	r2, r1
 8008b08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	3301      	adds	r3, #1
 8008b16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d902      	bls.n	8008b28 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	75fb      	strb	r3, [r7, #23]
          break;
 8008b26:	e00c      	b.n	8008b42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	015a      	lsls	r2, r3, #5
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	4413      	add	r3, r2
 8008b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b40:	d0e7      	beq.n	8008b12 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	371c      	adds	r7, #28
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b089      	sub	sp, #36	; 0x24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	4611      	mov	r1, r2
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	460b      	mov	r3, r1
 8008b60:	71fb      	strb	r3, [r7, #7]
 8008b62:	4613      	mov	r3, r2
 8008b64:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008b6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d123      	bne.n	8008bbe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008b76:	88bb      	ldrh	r3, [r7, #4]
 8008b78:	3303      	adds	r3, #3
 8008b7a:	089b      	lsrs	r3, r3, #2
 8008b7c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008b7e:	2300      	movs	r3, #0
 8008b80:	61bb      	str	r3, [r7, #24]
 8008b82:	e018      	b.n	8008bb6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008b84:	79fb      	ldrb	r3, [r7, #7]
 8008b86:	031a      	lsls	r2, r3, #12
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b90:	461a      	mov	r2, r3
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	3301      	adds	r3, #1
 8008bae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	61bb      	str	r3, [r7, #24]
 8008bb6:	69ba      	ldr	r2, [r7, #24]
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d3e2      	bcc.n	8008b84 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3724      	adds	r7, #36	; 0x24
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b08b      	sub	sp, #44	; 0x2c
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008be2:	88fb      	ldrh	r3, [r7, #6]
 8008be4:	089b      	lsrs	r3, r3, #2
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008bea:	88fb      	ldrh	r3, [r7, #6]
 8008bec:	f003 0303 	and.w	r3, r3, #3
 8008bf0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	623b      	str	r3, [r7, #32]
 8008bf6:	e014      	b.n	8008c22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	601a      	str	r2, [r3, #0]
    pDest++;
 8008c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c06:	3301      	adds	r3, #1
 8008c08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c12:	3301      	adds	r3, #1
 8008c14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c18:	3301      	adds	r3, #1
 8008c1a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008c1c:	6a3b      	ldr	r3, [r7, #32]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	623b      	str	r3, [r7, #32]
 8008c22:	6a3a      	ldr	r2, [r7, #32]
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d3e6      	bcc.n	8008bf8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008c2a:	8bfb      	ldrh	r3, [r7, #30]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d01e      	beq.n	8008c6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008c30:	2300      	movs	r3, #0
 8008c32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f107 0310 	add.w	r3, r7, #16
 8008c40:	6812      	ldr	r2, [r2, #0]
 8008c42:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	6a3b      	ldr	r3, [r7, #32]
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	00db      	lsls	r3, r3, #3
 8008c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c50:	b2da      	uxtb	r2, r3
 8008c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c54:	701a      	strb	r2, [r3, #0]
      i++;
 8008c56:	6a3b      	ldr	r3, [r7, #32]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5e:	3301      	adds	r3, #1
 8008c60:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008c62:	8bfb      	ldrh	r3, [r7, #30]
 8008c64:	3b01      	subs	r3, #1
 8008c66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008c68:	8bfb      	ldrh	r3, [r7, #30]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1ea      	bne.n	8008c44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	372c      	adds	r7, #44	; 0x2c
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	785b      	ldrb	r3, [r3, #1]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d12c      	bne.n	8008cf2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	015a      	lsls	r2, r3, #5
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	db12      	blt.n	8008cd0 <USB_EPSetStall+0x54>
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00f      	beq.n	8008cd0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	015a      	lsls	r2, r3, #5
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	0151      	lsls	r1, r2, #5
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	440a      	add	r2, r1
 8008cc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008cce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	015a      	lsls	r2, r3, #5
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	0151      	lsls	r1, r2, #5
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	440a      	add	r2, r1
 8008ce6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008cee:	6013      	str	r3, [r2, #0]
 8008cf0:	e02b      	b.n	8008d4a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	015a      	lsls	r2, r3, #5
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	db12      	blt.n	8008d2a <USB_EPSetStall+0xae>
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00f      	beq.n	8008d2a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	015a      	lsls	r2, r3, #5
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	4413      	add	r3, r2
 8008d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	68ba      	ldr	r2, [r7, #8]
 8008d1a:	0151      	lsls	r1, r2, #5
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	440a      	add	r2, r1
 8008d20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008d28:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	015a      	lsls	r2, r3, #5
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	4413      	add	r3, r2
 8008d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	0151      	lsls	r1, r2, #5
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	440a      	add	r2, r1
 8008d40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3714      	adds	r7, #20
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	785b      	ldrb	r3, [r3, #1]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d128      	bne.n	8008dc6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	015a      	lsls	r2, r3, #5
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	0151      	lsls	r1, r2, #5
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	440a      	add	r2, r1
 8008d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	791b      	ldrb	r3, [r3, #4]
 8008d98:	2b03      	cmp	r3, #3
 8008d9a:	d003      	beq.n	8008da4 <USB_EPClearStall+0x4c>
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	791b      	ldrb	r3, [r3, #4]
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d138      	bne.n	8008e16 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	015a      	lsls	r2, r3, #5
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	4413      	add	r3, r2
 8008dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	0151      	lsls	r1, r2, #5
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	440a      	add	r2, r1
 8008dba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dc2:	6013      	str	r3, [r2, #0]
 8008dc4:	e027      	b.n	8008e16 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	015a      	lsls	r2, r3, #5
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	4413      	add	r3, r2
 8008dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	0151      	lsls	r1, r2, #5
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	440a      	add	r2, r1
 8008ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008de0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008de4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	791b      	ldrb	r3, [r3, #4]
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d003      	beq.n	8008df6 <USB_EPClearStall+0x9e>
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	791b      	ldrb	r3, [r3, #4]
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d10f      	bne.n	8008e16 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	015a      	lsls	r2, r3, #5
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	0151      	lsls	r1, r2, #5
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	440a      	add	r2, r1
 8008e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e14:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e42:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008e46:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	78fb      	ldrb	r3, [r7, #3]
 8008e52:	011b      	lsls	r3, r3, #4
 8008e54:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008e58:	68f9      	ldr	r1, [r7, #12]
 8008e5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3714      	adds	r7, #20
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e8a:	f023 0303 	bic.w	r3, r3, #3
 8008e8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e9e:	f023 0302 	bic.w	r3, r3, #2
 8008ea2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3714      	adds	r7, #20
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr

08008eb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	b085      	sub	sp, #20
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ecc:	f023 0303 	bic.w	r3, r3, #3
 8008ed0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ee0:	f043 0302 	orr.w	r3, r3, #2
 8008ee4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	4013      	ands	r3, r2
 8008f0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3714      	adds	r7, #20
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b085      	sub	sp, #20
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f36:	69db      	ldr	r3, [r3, #28]
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	0c1b      	lsrs	r3, r3, #16
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3714      	adds	r7, #20
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr

08008f4e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f4e:	b480      	push	{r7}
 8008f50:	b085      	sub	sp, #20
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f6a:	69db      	ldr	r3, [r3, #28]
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	4013      	ands	r3, r2
 8008f70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	b29b      	uxth	r3, r3
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008f82:	b480      	push	{r7}
 8008f84:	b085      	sub	sp, #20
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008f92:	78fb      	ldrb	r3, [r7, #3]
 8008f94:	015a      	lsls	r2, r3, #5
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	4413      	add	r3, r2
 8008f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa8:	695b      	ldr	r3, [r3, #20]
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	4013      	ands	r3, r2
 8008fae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008fb0:	68bb      	ldr	r3, [r7, #8]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3714      	adds	r7, #20
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b087      	sub	sp, #28
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008fe2:	78fb      	ldrb	r3, [r7, #3]
 8008fe4:	f003 030f 	and.w	r3, r3, #15
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	fa22 f303 	lsr.w	r3, r2, r3
 8008fee:	01db      	lsls	r3, r3, #7
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	693a      	ldr	r2, [r7, #16]
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008ff8:	78fb      	ldrb	r3, [r7, #3]
 8008ffa:	015a      	lsls	r2, r3, #5
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	4413      	add	r3, r2
 8009000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	693a      	ldr	r2, [r7, #16]
 8009008:	4013      	ands	r3, r2
 800900a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800900c:	68bb      	ldr	r3, [r7, #8]
}
 800900e:	4618      	mov	r0, r3
 8009010:	371c      	adds	r7, #28
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr

0800901a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800901a:	b480      	push	{r7}
 800901c:	b083      	sub	sp, #12
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	695b      	ldr	r3, [r3, #20]
 8009026:	f003 0301 	and.w	r3, r3, #1
}
 800902a:	4618      	mov	r0, r3
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009036:	b480      	push	{r7}
 8009038:	b085      	sub	sp, #20
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009050:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009054:	f023 0307 	bic.w	r3, r3, #7
 8009058:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800906c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3714      	adds	r7, #20
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800907c:	b480      	push	{r7}
 800907e:	b087      	sub	sp, #28
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	460b      	mov	r3, r1
 8009086:	607a      	str	r2, [r7, #4]
 8009088:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	333c      	adds	r3, #60	; 0x3c
 8009092:	3304      	adds	r3, #4
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	4a26      	ldr	r2, [pc, #152]	; (8009134 <USB_EP0_OutStart+0xb8>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d90a      	bls.n	80090b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090b0:	d101      	bne.n	80090b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80090b2:	2300      	movs	r3, #0
 80090b4:	e037      	b.n	8009126 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090bc:	461a      	mov	r2, r3
 80090be:	2300      	movs	r3, #0
 80090c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	697a      	ldr	r2, [r7, #20]
 80090cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	697a      	ldr	r2, [r7, #20]
 80090e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090e4:	f043 0318 	orr.w	r3, r3, #24
 80090e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	697a      	ldr	r2, [r7, #20]
 80090f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80090fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80090fe:	7afb      	ldrb	r3, [r7, #11]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d10f      	bne.n	8009124 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800910a:	461a      	mov	r2, r3
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	697a      	ldr	r2, [r7, #20]
 800911a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800911e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009122:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	371c      	adds	r7, #28
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	4f54300a 	.word	0x4f54300a

08009138 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009140:	2300      	movs	r3, #0
 8009142:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	3301      	adds	r3, #1
 8009148:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	4a13      	ldr	r2, [pc, #76]	; (800919c <USB_CoreReset+0x64>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d901      	bls.n	8009156 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009152:	2303      	movs	r3, #3
 8009154:	e01b      	b.n	800918e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	2b00      	cmp	r3, #0
 800915c:	daf2      	bge.n	8009144 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800915e:	2300      	movs	r3, #0
 8009160:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	f043 0201 	orr.w	r2, r3, #1
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	3301      	adds	r3, #1
 8009172:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	4a09      	ldr	r2, [pc, #36]	; (800919c <USB_CoreReset+0x64>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d901      	bls.n	8009180 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800917c:	2303      	movs	r3, #3
 800917e:	e006      	b.n	800918e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	f003 0301 	and.w	r3, r3, #1
 8009188:	2b01      	cmp	r3, #1
 800918a:	d0f0      	beq.n	800916e <USB_CoreReset+0x36>

  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3714      	adds	r7, #20
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	00030d40 	.word	0x00030d40

080091a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	460b      	mov	r3, r1
 80091aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80091ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80091b0:	f005 fe7a 	bl	800eea8 <USBD_static_malloc>
 80091b4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d109      	bne.n	80091d0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	32b0      	adds	r2, #176	; 0xb0
 80091c6:	2100      	movs	r1, #0
 80091c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80091cc:	2302      	movs	r3, #2
 80091ce:	e0d4      	b.n	800937a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80091d0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80091d4:	2100      	movs	r1, #0
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f005 ff06 	bl	800efe8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	32b0      	adds	r2, #176	; 0xb0
 80091e6:	68f9      	ldr	r1, [r7, #12]
 80091e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	32b0      	adds	r2, #176	; 0xb0
 80091f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	7c1b      	ldrb	r3, [r3, #16]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d138      	bne.n	800927a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009208:	4b5e      	ldr	r3, [pc, #376]	; (8009384 <USBD_CDC_Init+0x1e4>)
 800920a:	7819      	ldrb	r1, [r3, #0]
 800920c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009210:	2202      	movs	r2, #2
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f005 fd25 	bl	800ec62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009218:	4b5a      	ldr	r3, [pc, #360]	; (8009384 <USBD_CDC_Init+0x1e4>)
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	f003 020f 	and.w	r2, r3, #15
 8009220:	6879      	ldr	r1, [r7, #4]
 8009222:	4613      	mov	r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4413      	add	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	440b      	add	r3, r1
 800922c:	3324      	adds	r3, #36	; 0x24
 800922e:	2201      	movs	r2, #1
 8009230:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009232:	4b55      	ldr	r3, [pc, #340]	; (8009388 <USBD_CDC_Init+0x1e8>)
 8009234:	7819      	ldrb	r1, [r3, #0]
 8009236:	f44f 7300 	mov.w	r3, #512	; 0x200
 800923a:	2202      	movs	r2, #2
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f005 fd10 	bl	800ec62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009242:	4b51      	ldr	r3, [pc, #324]	; (8009388 <USBD_CDC_Init+0x1e8>)
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	f003 020f 	and.w	r2, r3, #15
 800924a:	6879      	ldr	r1, [r7, #4]
 800924c:	4613      	mov	r3, r2
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	4413      	add	r3, r2
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	440b      	add	r3, r1
 8009256:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800925a:	2201      	movs	r2, #1
 800925c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800925e:	4b4b      	ldr	r3, [pc, #300]	; (800938c <USBD_CDC_Init+0x1ec>)
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	f003 020f 	and.w	r2, r3, #15
 8009266:	6879      	ldr	r1, [r7, #4]
 8009268:	4613      	mov	r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4413      	add	r3, r2
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	440b      	add	r3, r1
 8009272:	3326      	adds	r3, #38	; 0x26
 8009274:	2210      	movs	r2, #16
 8009276:	801a      	strh	r2, [r3, #0]
 8009278:	e035      	b.n	80092e6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800927a:	4b42      	ldr	r3, [pc, #264]	; (8009384 <USBD_CDC_Init+0x1e4>)
 800927c:	7819      	ldrb	r1, [r3, #0]
 800927e:	2340      	movs	r3, #64	; 0x40
 8009280:	2202      	movs	r2, #2
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f005 fced 	bl	800ec62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009288:	4b3e      	ldr	r3, [pc, #248]	; (8009384 <USBD_CDC_Init+0x1e4>)
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	f003 020f 	and.w	r2, r3, #15
 8009290:	6879      	ldr	r1, [r7, #4]
 8009292:	4613      	mov	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4413      	add	r3, r2
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	440b      	add	r3, r1
 800929c:	3324      	adds	r3, #36	; 0x24
 800929e:	2201      	movs	r2, #1
 80092a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80092a2:	4b39      	ldr	r3, [pc, #228]	; (8009388 <USBD_CDC_Init+0x1e8>)
 80092a4:	7819      	ldrb	r1, [r3, #0]
 80092a6:	2340      	movs	r3, #64	; 0x40
 80092a8:	2202      	movs	r2, #2
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f005 fcd9 	bl	800ec62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80092b0:	4b35      	ldr	r3, [pc, #212]	; (8009388 <USBD_CDC_Init+0x1e8>)
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	f003 020f 	and.w	r2, r3, #15
 80092b8:	6879      	ldr	r1, [r7, #4]
 80092ba:	4613      	mov	r3, r2
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	4413      	add	r3, r2
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	440b      	add	r3, r1
 80092c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80092c8:	2201      	movs	r2, #1
 80092ca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80092cc:	4b2f      	ldr	r3, [pc, #188]	; (800938c <USBD_CDC_Init+0x1ec>)
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	f003 020f 	and.w	r2, r3, #15
 80092d4:	6879      	ldr	r1, [r7, #4]
 80092d6:	4613      	mov	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4413      	add	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	440b      	add	r3, r1
 80092e0:	3326      	adds	r3, #38	; 0x26
 80092e2:	2210      	movs	r2, #16
 80092e4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80092e6:	4b29      	ldr	r3, [pc, #164]	; (800938c <USBD_CDC_Init+0x1ec>)
 80092e8:	7819      	ldrb	r1, [r3, #0]
 80092ea:	2308      	movs	r3, #8
 80092ec:	2203      	movs	r2, #3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f005 fcb7 	bl	800ec62 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80092f4:	4b25      	ldr	r3, [pc, #148]	; (800938c <USBD_CDC_Init+0x1ec>)
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	f003 020f 	and.w	r2, r3, #15
 80092fc:	6879      	ldr	r1, [r7, #4]
 80092fe:	4613      	mov	r3, r2
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	4413      	add	r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	440b      	add	r3, r1
 8009308:	3324      	adds	r3, #36	; 0x24
 800930a:	2201      	movs	r2, #1
 800930c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	33b0      	adds	r3, #176	; 0xb0
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4413      	add	r3, r2
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2200      	movs	r2, #0
 800932e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2200      	movs	r2, #0
 8009336:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009340:	2b00      	cmp	r3, #0
 8009342:	d101      	bne.n	8009348 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009344:	2302      	movs	r3, #2
 8009346:	e018      	b.n	800937a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	7c1b      	ldrb	r3, [r3, #16]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d10a      	bne.n	8009366 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009350:	4b0d      	ldr	r3, [pc, #52]	; (8009388 <USBD_CDC_Init+0x1e8>)
 8009352:	7819      	ldrb	r1, [r3, #0]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800935a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f005 fd6e 	bl	800ee40 <USBD_LL_PrepareReceive>
 8009364:	e008      	b.n	8009378 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009366:	4b08      	ldr	r3, [pc, #32]	; (8009388 <USBD_CDC_Init+0x1e8>)
 8009368:	7819      	ldrb	r1, [r3, #0]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009370:	2340      	movs	r3, #64	; 0x40
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f005 fd64 	bl	800ee40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	200000c7 	.word	0x200000c7
 8009388:	200000c8 	.word	0x200000c8
 800938c:	200000c9 	.word	0x200000c9

08009390 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	460b      	mov	r3, r1
 800939a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800939c:	4b3a      	ldr	r3, [pc, #232]	; (8009488 <USBD_CDC_DeInit+0xf8>)
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	4619      	mov	r1, r3
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f005 fc83 	bl	800ecae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80093a8:	4b37      	ldr	r3, [pc, #220]	; (8009488 <USBD_CDC_DeInit+0xf8>)
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	f003 020f 	and.w	r2, r3, #15
 80093b0:	6879      	ldr	r1, [r7, #4]
 80093b2:	4613      	mov	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	4413      	add	r3, r2
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	440b      	add	r3, r1
 80093bc:	3324      	adds	r3, #36	; 0x24
 80093be:	2200      	movs	r2, #0
 80093c0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80093c2:	4b32      	ldr	r3, [pc, #200]	; (800948c <USBD_CDC_DeInit+0xfc>)
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	4619      	mov	r1, r3
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f005 fc70 	bl	800ecae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80093ce:	4b2f      	ldr	r3, [pc, #188]	; (800948c <USBD_CDC_DeInit+0xfc>)
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	f003 020f 	and.w	r2, r3, #15
 80093d6:	6879      	ldr	r1, [r7, #4]
 80093d8:	4613      	mov	r3, r2
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	4413      	add	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	440b      	add	r3, r1
 80093e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80093e6:	2200      	movs	r2, #0
 80093e8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80093ea:	4b29      	ldr	r3, [pc, #164]	; (8009490 <USBD_CDC_DeInit+0x100>)
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	4619      	mov	r1, r3
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f005 fc5c 	bl	800ecae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80093f6:	4b26      	ldr	r3, [pc, #152]	; (8009490 <USBD_CDC_DeInit+0x100>)
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	f003 020f 	and.w	r2, r3, #15
 80093fe:	6879      	ldr	r1, [r7, #4]
 8009400:	4613      	mov	r3, r2
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	440b      	add	r3, r1
 800940a:	3324      	adds	r3, #36	; 0x24
 800940c:	2200      	movs	r2, #0
 800940e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009410:	4b1f      	ldr	r3, [pc, #124]	; (8009490 <USBD_CDC_DeInit+0x100>)
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	f003 020f 	and.w	r2, r3, #15
 8009418:	6879      	ldr	r1, [r7, #4]
 800941a:	4613      	mov	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	440b      	add	r3, r1
 8009424:	3326      	adds	r3, #38	; 0x26
 8009426:	2200      	movs	r2, #0
 8009428:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	32b0      	adds	r2, #176	; 0xb0
 8009434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d01f      	beq.n	800947c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	33b0      	adds	r3, #176	; 0xb0
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4413      	add	r3, r2
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	32b0      	adds	r2, #176	; 0xb0
 800945a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800945e:	4618      	mov	r0, r3
 8009460:	f005 fd30 	bl	800eec4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	32b0      	adds	r2, #176	; 0xb0
 800946e:	2100      	movs	r1, #0
 8009470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	200000c7 	.word	0x200000c7
 800948c:	200000c8 	.word	0x200000c8
 8009490:	200000c9 	.word	0x200000c9

08009494 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	32b0      	adds	r2, #176	; 0xb0
 80094a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80094ae:	2300      	movs	r3, #0
 80094b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80094b2:	2300      	movs	r3, #0
 80094b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80094b6:	2300      	movs	r3, #0
 80094b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d101      	bne.n	80094c4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80094c0:	2303      	movs	r3, #3
 80094c2:	e0bf      	b.n	8009644 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d050      	beq.n	8009572 <USBD_CDC_Setup+0xde>
 80094d0:	2b20      	cmp	r3, #32
 80094d2:	f040 80af 	bne.w	8009634 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	88db      	ldrh	r3, [r3, #6]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d03a      	beq.n	8009554 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	b25b      	sxtb	r3, r3
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	da1b      	bge.n	8009520 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	33b0      	adds	r3, #176	; 0xb0
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	683a      	ldr	r2, [r7, #0]
 80094fc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80094fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009500:	683a      	ldr	r2, [r7, #0]
 8009502:	88d2      	ldrh	r2, [r2, #6]
 8009504:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	88db      	ldrh	r3, [r3, #6]
 800950a:	2b07      	cmp	r3, #7
 800950c:	bf28      	it	cs
 800950e:	2307      	movcs	r3, #7
 8009510:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	89fa      	ldrh	r2, [r7, #14]
 8009516:	4619      	mov	r1, r3
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f001 fd89 	bl	800b030 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800951e:	e090      	b.n	8009642 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	785a      	ldrb	r2, [r3, #1]
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	88db      	ldrh	r3, [r3, #6]
 800952e:	2b3f      	cmp	r3, #63	; 0x3f
 8009530:	d803      	bhi.n	800953a <USBD_CDC_Setup+0xa6>
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	88db      	ldrh	r3, [r3, #6]
 8009536:	b2da      	uxtb	r2, r3
 8009538:	e000      	b.n	800953c <USBD_CDC_Setup+0xa8>
 800953a:	2240      	movs	r2, #64	; 0x40
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009542:	6939      	ldr	r1, [r7, #16]
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800954a:	461a      	mov	r2, r3
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f001 fd9b 	bl	800b088 <USBD_CtlPrepareRx>
      break;
 8009552:	e076      	b.n	8009642 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	33b0      	adds	r3, #176	; 0xb0
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4413      	add	r3, r2
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	683a      	ldr	r2, [r7, #0]
 8009568:	7850      	ldrb	r0, [r2, #1]
 800956a:	2200      	movs	r2, #0
 800956c:	6839      	ldr	r1, [r7, #0]
 800956e:	4798      	blx	r3
      break;
 8009570:	e067      	b.n	8009642 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	785b      	ldrb	r3, [r3, #1]
 8009576:	2b0b      	cmp	r3, #11
 8009578:	d851      	bhi.n	800961e <USBD_CDC_Setup+0x18a>
 800957a:	a201      	add	r2, pc, #4	; (adr r2, 8009580 <USBD_CDC_Setup+0xec>)
 800957c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009580:	080095b1 	.word	0x080095b1
 8009584:	0800962d 	.word	0x0800962d
 8009588:	0800961f 	.word	0x0800961f
 800958c:	0800961f 	.word	0x0800961f
 8009590:	0800961f 	.word	0x0800961f
 8009594:	0800961f 	.word	0x0800961f
 8009598:	0800961f 	.word	0x0800961f
 800959c:	0800961f 	.word	0x0800961f
 80095a0:	0800961f 	.word	0x0800961f
 80095a4:	0800961f 	.word	0x0800961f
 80095a8:	080095db 	.word	0x080095db
 80095ac:	08009605 	.word	0x08009605
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	2b03      	cmp	r3, #3
 80095ba:	d107      	bne.n	80095cc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80095bc:	f107 030a 	add.w	r3, r7, #10
 80095c0:	2202      	movs	r2, #2
 80095c2:	4619      	mov	r1, r3
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f001 fd33 	bl	800b030 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80095ca:	e032      	b.n	8009632 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f001 fcbd 	bl	800af4e <USBD_CtlError>
            ret = USBD_FAIL;
 80095d4:	2303      	movs	r3, #3
 80095d6:	75fb      	strb	r3, [r7, #23]
          break;
 80095d8:	e02b      	b.n	8009632 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b03      	cmp	r3, #3
 80095e4:	d107      	bne.n	80095f6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80095e6:	f107 030d 	add.w	r3, r7, #13
 80095ea:	2201      	movs	r2, #1
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f001 fd1e 	bl	800b030 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80095f4:	e01d      	b.n	8009632 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80095f6:	6839      	ldr	r1, [r7, #0]
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f001 fca8 	bl	800af4e <USBD_CtlError>
            ret = USBD_FAIL;
 80095fe:	2303      	movs	r3, #3
 8009600:	75fb      	strb	r3, [r7, #23]
          break;
 8009602:	e016      	b.n	8009632 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800960a:	b2db      	uxtb	r3, r3
 800960c:	2b03      	cmp	r3, #3
 800960e:	d00f      	beq.n	8009630 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009610:	6839      	ldr	r1, [r7, #0]
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f001 fc9b 	bl	800af4e <USBD_CtlError>
            ret = USBD_FAIL;
 8009618:	2303      	movs	r3, #3
 800961a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800961c:	e008      	b.n	8009630 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800961e:	6839      	ldr	r1, [r7, #0]
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f001 fc94 	bl	800af4e <USBD_CtlError>
          ret = USBD_FAIL;
 8009626:	2303      	movs	r3, #3
 8009628:	75fb      	strb	r3, [r7, #23]
          break;
 800962a:	e002      	b.n	8009632 <USBD_CDC_Setup+0x19e>
          break;
 800962c:	bf00      	nop
 800962e:	e008      	b.n	8009642 <USBD_CDC_Setup+0x1ae>
          break;
 8009630:	bf00      	nop
      }
      break;
 8009632:	e006      	b.n	8009642 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f001 fc89 	bl	800af4e <USBD_CtlError>
      ret = USBD_FAIL;
 800963c:	2303      	movs	r3, #3
 800963e:	75fb      	strb	r3, [r7, #23]
      break;
 8009640:	bf00      	nop
  }

  return (uint8_t)ret;
 8009642:	7dfb      	ldrb	r3, [r7, #23]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3718      	adds	r7, #24
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	460b      	mov	r3, r1
 8009656:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800965e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	32b0      	adds	r2, #176	; 0xb0
 800966a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d101      	bne.n	8009676 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009672:	2303      	movs	r3, #3
 8009674:	e065      	b.n	8009742 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	32b0      	adds	r2, #176	; 0xb0
 8009680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009684:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009686:	78fb      	ldrb	r3, [r7, #3]
 8009688:	f003 020f 	and.w	r2, r3, #15
 800968c:	6879      	ldr	r1, [r7, #4]
 800968e:	4613      	mov	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	4413      	add	r3, r2
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	440b      	add	r3, r1
 8009698:	3318      	adds	r3, #24
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d02f      	beq.n	8009700 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80096a0:	78fb      	ldrb	r3, [r7, #3]
 80096a2:	f003 020f 	and.w	r2, r3, #15
 80096a6:	6879      	ldr	r1, [r7, #4]
 80096a8:	4613      	mov	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4413      	add	r3, r2
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	440b      	add	r3, r1
 80096b2:	3318      	adds	r3, #24
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	78fb      	ldrb	r3, [r7, #3]
 80096b8:	f003 010f 	and.w	r1, r3, #15
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	460b      	mov	r3, r1
 80096c0:	00db      	lsls	r3, r3, #3
 80096c2:	440b      	add	r3, r1
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	4403      	add	r3, r0
 80096c8:	3348      	adds	r3, #72	; 0x48
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	fbb2 f1f3 	udiv	r1, r2, r3
 80096d0:	fb01 f303 	mul.w	r3, r1, r3
 80096d4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d112      	bne.n	8009700 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80096da:	78fb      	ldrb	r3, [r7, #3]
 80096dc:	f003 020f 	and.w	r2, r3, #15
 80096e0:	6879      	ldr	r1, [r7, #4]
 80096e2:	4613      	mov	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	440b      	add	r3, r1
 80096ec:	3318      	adds	r3, #24
 80096ee:	2200      	movs	r2, #0
 80096f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80096f2:	78f9      	ldrb	r1, [r7, #3]
 80096f4:	2300      	movs	r3, #0
 80096f6:	2200      	movs	r2, #0
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f005 fb80 	bl	800edfe <USBD_LL_Transmit>
 80096fe:	e01f      	b.n	8009740 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	2200      	movs	r2, #0
 8009704:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	33b0      	adds	r3, #176	; 0xb0
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4413      	add	r3, r2
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d010      	beq.n	8009740 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	33b0      	adds	r3, #176	; 0xb0
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4413      	add	r3, r2
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800973c:	78fa      	ldrb	r2, [r7, #3]
 800973e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b084      	sub	sp, #16
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
 8009752:	460b      	mov	r3, r1
 8009754:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	32b0      	adds	r2, #176	; 0xb0
 8009760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009764:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	32b0      	adds	r2, #176	; 0xb0
 8009770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d101      	bne.n	800977c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009778:	2303      	movs	r3, #3
 800977a:	e01a      	b.n	80097b2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800977c:	78fb      	ldrb	r3, [r7, #3]
 800977e:	4619      	mov	r1, r3
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f005 fb7e 	bl	800ee82 <USBD_LL_GetRxDataSize>
 8009786:	4602      	mov	r2, r0
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	33b0      	adds	r3, #176	; 0xb0
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	4413      	add	r3, r2
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80097ac:	4611      	mov	r1, r2
 80097ae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b084      	sub	sp, #16
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	32b0      	adds	r2, #176	; 0xb0
 80097cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d101      	bne.n	80097dc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80097d8:	2303      	movs	r3, #3
 80097da:	e025      	b.n	8009828 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	33b0      	adds	r3, #176	; 0xb0
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d01a      	beq.n	8009826 <USBD_CDC_EP0_RxReady+0x6c>
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80097f6:	2bff      	cmp	r3, #255	; 0xff
 80097f8:	d015      	beq.n	8009826 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	33b0      	adds	r3, #176	; 0xb0
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009812:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800981a:	b292      	uxth	r2, r2
 800981c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	22ff      	movs	r2, #255	; 0xff
 8009822:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b086      	sub	sp, #24
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009838:	2182      	movs	r1, #130	; 0x82
 800983a:	4818      	ldr	r0, [pc, #96]	; (800989c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800983c:	f000 fd4f 	bl	800a2de <USBD_GetEpDesc>
 8009840:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009842:	2101      	movs	r1, #1
 8009844:	4815      	ldr	r0, [pc, #84]	; (800989c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009846:	f000 fd4a 	bl	800a2de <USBD_GetEpDesc>
 800984a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800984c:	2181      	movs	r1, #129	; 0x81
 800984e:	4813      	ldr	r0, [pc, #76]	; (800989c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009850:	f000 fd45 	bl	800a2de <USBD_GetEpDesc>
 8009854:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d002      	beq.n	8009862 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	2210      	movs	r2, #16
 8009860:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d006      	beq.n	8009876 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	2200      	movs	r2, #0
 800986c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009870:	711a      	strb	r2, [r3, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d006      	beq.n	800988a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2200      	movs	r2, #0
 8009880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009884:	711a      	strb	r2, [r3, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2243      	movs	r2, #67	; 0x43
 800988e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009890:	4b02      	ldr	r3, [pc, #8]	; (800989c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009892:	4618      	mov	r0, r3
 8009894:	3718      	adds	r7, #24
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	20000084 	.word	0x20000084

080098a0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80098a8:	2182      	movs	r1, #130	; 0x82
 80098aa:	4818      	ldr	r0, [pc, #96]	; (800990c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80098ac:	f000 fd17 	bl	800a2de <USBD_GetEpDesc>
 80098b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80098b2:	2101      	movs	r1, #1
 80098b4:	4815      	ldr	r0, [pc, #84]	; (800990c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80098b6:	f000 fd12 	bl	800a2de <USBD_GetEpDesc>
 80098ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80098bc:	2181      	movs	r1, #129	; 0x81
 80098be:	4813      	ldr	r0, [pc, #76]	; (800990c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80098c0:	f000 fd0d 	bl	800a2de <USBD_GetEpDesc>
 80098c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d002      	beq.n	80098d2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	2210      	movs	r2, #16
 80098d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d006      	beq.n	80098e6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	2200      	movs	r2, #0
 80098dc:	711a      	strb	r2, [r3, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	f042 0202 	orr.w	r2, r2, #2
 80098e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d006      	beq.n	80098fa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2200      	movs	r2, #0
 80098f0:	711a      	strb	r2, [r3, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f042 0202 	orr.w	r2, r2, #2
 80098f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2243      	movs	r2, #67	; 0x43
 80098fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009900:	4b02      	ldr	r3, [pc, #8]	; (800990c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009902:	4618      	mov	r0, r3
 8009904:	3718      	adds	r7, #24
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	20000084 	.word	0x20000084

08009910 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b086      	sub	sp, #24
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009918:	2182      	movs	r1, #130	; 0x82
 800991a:	4818      	ldr	r0, [pc, #96]	; (800997c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800991c:	f000 fcdf 	bl	800a2de <USBD_GetEpDesc>
 8009920:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009922:	2101      	movs	r1, #1
 8009924:	4815      	ldr	r0, [pc, #84]	; (800997c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009926:	f000 fcda 	bl	800a2de <USBD_GetEpDesc>
 800992a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800992c:	2181      	movs	r1, #129	; 0x81
 800992e:	4813      	ldr	r0, [pc, #76]	; (800997c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009930:	f000 fcd5 	bl	800a2de <USBD_GetEpDesc>
 8009934:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d002      	beq.n	8009942 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	2210      	movs	r2, #16
 8009940:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d006      	beq.n	8009956 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	2200      	movs	r2, #0
 800994c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009950:	711a      	strb	r2, [r3, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d006      	beq.n	800996a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009964:	711a      	strb	r2, [r3, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2243      	movs	r2, #67	; 0x43
 800996e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009970:	4b02      	ldr	r3, [pc, #8]	; (800997c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009972:	4618      	mov	r0, r3
 8009974:	3718      	adds	r7, #24
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	20000084 	.word	0x20000084

08009980 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	220a      	movs	r2, #10
 800998c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800998e:	4b03      	ldr	r3, [pc, #12]	; (800999c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009990:	4618      	mov	r0, r3
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr
 800999c:	20000040 	.word	0x20000040

080099a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d101      	bne.n	80099b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80099b0:	2303      	movs	r3, #3
 80099b2:	e009      	b.n	80099c8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	33b0      	adds	r3, #176	; 0xb0
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	4413      	add	r3, r2
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b087      	sub	sp, #28
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	32b0      	adds	r2, #176	; 0xb0
 80099ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ee:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d101      	bne.n	80099fa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80099f6:	2303      	movs	r3, #3
 80099f8:	e008      	b.n	8009a0c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	68ba      	ldr	r2, [r7, #8]
 80099fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	371c      	adds	r7, #28
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	32b0      	adds	r2, #176	; 0xb0
 8009a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d101      	bne.n	8009a3c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009a38:	2303      	movs	r3, #3
 8009a3a:	e004      	b.n	8009a46 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3714      	adds	r7, #20
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
	...

08009a54 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	32b0      	adds	r2, #176	; 0xb0
 8009a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a6a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	32b0      	adds	r2, #176	; 0xb0
 8009a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d101      	bne.n	8009a86 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009a82:	2303      	movs	r3, #3
 8009a84:	e025      	b.n	8009ad2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d11f      	bne.n	8009ad0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009a98:	4b10      	ldr	r3, [pc, #64]	; (8009adc <USBD_CDC_TransmitPacket+0x88>)
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	f003 020f 	and.w	r2, r3, #15
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4403      	add	r3, r0
 8009ab2:	3318      	adds	r3, #24
 8009ab4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009ab6:	4b09      	ldr	r3, [pc, #36]	; (8009adc <USBD_CDC_TransmitPacket+0x88>)
 8009ab8:	7819      	ldrb	r1, [r3, #0]
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f005 f999 	bl	800edfe <USBD_LL_Transmit>

    ret = USBD_OK;
 8009acc:	2300      	movs	r3, #0
 8009ace:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	200000c7 	.word	0x200000c7

08009ae0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	32b0      	adds	r2, #176	; 0xb0
 8009af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	32b0      	adds	r2, #176	; 0xb0
 8009b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d101      	bne.n	8009b0e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	e018      	b.n	8009b40 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	7c1b      	ldrb	r3, [r3, #16]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d10a      	bne.n	8009b2c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b16:	4b0c      	ldr	r3, [pc, #48]	; (8009b48 <USBD_CDC_ReceivePacket+0x68>)
 8009b18:	7819      	ldrb	r1, [r3, #0]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f005 f98b 	bl	800ee40 <USBD_LL_PrepareReceive>
 8009b2a:	e008      	b.n	8009b3e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b2c:	4b06      	ldr	r3, [pc, #24]	; (8009b48 <USBD_CDC_ReceivePacket+0x68>)
 8009b2e:	7819      	ldrb	r1, [r3, #0]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b36:	2340      	movs	r3, #64	; 0x40
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f005 f981 	bl	800ee40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	200000c8 	.word	0x200000c8

08009b4c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b086      	sub	sp, #24
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	4613      	mov	r3, r2
 8009b58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d101      	bne.n	8009b64 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009b60:	2303      	movs	r3, #3
 8009b62:	e01f      	b.n	8009ba4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d003      	beq.n	8009b8a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	79fa      	ldrb	r2, [r7, #7]
 8009b96:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f004 fffb 	bl	800eb94 <USBD_LL_Init>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3718      	adds	r7, #24
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d101      	bne.n	8009bc4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	e025      	b.n	8009c10 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	683a      	ldr	r2, [r7, #0]
 8009bc8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	32ae      	adds	r2, #174	; 0xae
 8009bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00f      	beq.n	8009c00 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	32ae      	adds	r2, #174	; 0xae
 8009bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf0:	f107 020e 	add.w	r2, r7, #14
 8009bf4:	4610      	mov	r0, r2
 8009bf6:	4798      	blx	r3
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009c06:	1c5a      	adds	r2, r3, #1
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009c0e:	2300      	movs	r3, #0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f005 f803 	bl	800ec2c <USBD_LL_Start>
 8009c26:	4603      	mov	r3, r0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3708      	adds	r7, #8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c38:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	370c      	adds	r7, #12
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr

08009c46 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b084      	sub	sp, #16
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
 8009c4e:	460b      	mov	r3, r1
 8009c50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c52:	2300      	movs	r3, #0
 8009c54:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d009      	beq.n	8009c74 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	78fa      	ldrb	r2, [r7, #3]
 8009c6a:	4611      	mov	r1, r2
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	4798      	blx	r3
 8009c70:	4603      	mov	r3, r0
 8009c72:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b084      	sub	sp, #16
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
 8009c86:	460b      	mov	r3, r1
 8009c88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	78fa      	ldrb	r2, [r7, #3]
 8009c98:	4611      	mov	r1, r2
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	4798      	blx	r3
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d001      	beq.n	8009ca8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b084      	sub	sp, #16
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
 8009cba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009cc2:	6839      	ldr	r1, [r7, #0]
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f001 f908 	bl	800aeda <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009cd8:	461a      	mov	r2, r3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009ce6:	f003 031f 	and.w	r3, r3, #31
 8009cea:	2b02      	cmp	r3, #2
 8009cec:	d01a      	beq.n	8009d24 <USBD_LL_SetupStage+0x72>
 8009cee:	2b02      	cmp	r3, #2
 8009cf0:	d822      	bhi.n	8009d38 <USBD_LL_SetupStage+0x86>
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d002      	beq.n	8009cfc <USBD_LL_SetupStage+0x4a>
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d00a      	beq.n	8009d10 <USBD_LL_SetupStage+0x5e>
 8009cfa:	e01d      	b.n	8009d38 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d02:	4619      	mov	r1, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fb5f 	bl	800a3c8 <USBD_StdDevReq>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8009d0e:	e020      	b.n	8009d52 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d16:	4619      	mov	r1, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fbc7 	bl	800a4ac <USBD_StdItfReq>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	73fb      	strb	r3, [r7, #15]
      break;
 8009d22:	e016      	b.n	8009d52 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 fc29 	bl	800a584 <USBD_StdEPReq>
 8009d32:	4603      	mov	r3, r0
 8009d34:	73fb      	strb	r3, [r7, #15]
      break;
 8009d36:	e00c      	b.n	8009d52 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009d3e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	4619      	mov	r1, r3
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f004 ffd0 	bl	800ecec <USBD_LL_StallEP>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8009d50:	bf00      	nop
  }

  return ret;
 8009d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	460b      	mov	r3, r1
 8009d66:	607a      	str	r2, [r7, #4]
 8009d68:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009d6e:	7afb      	ldrb	r3, [r7, #11]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d16e      	bne.n	8009e52 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009d7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d82:	2b03      	cmp	r3, #3
 8009d84:	f040 8098 	bne.w	8009eb8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	689a      	ldr	r2, [r3, #8]
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d913      	bls.n	8009dbc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	689a      	ldr	r2, [r3, #8]
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	1ad2      	subs	r2, r2, r3
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	68da      	ldr	r2, [r3, #12]
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	4293      	cmp	r3, r2
 8009dac:	bf28      	it	cs
 8009dae:	4613      	movcs	r3, r2
 8009db0:	461a      	mov	r2, r3
 8009db2:	6879      	ldr	r1, [r7, #4]
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f001 f984 	bl	800b0c2 <USBD_CtlContinueRx>
 8009dba:	e07d      	b.n	8009eb8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009dc2:	f003 031f 	and.w	r3, r3, #31
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	d014      	beq.n	8009df4 <USBD_LL_DataOutStage+0x98>
 8009dca:	2b02      	cmp	r3, #2
 8009dcc:	d81d      	bhi.n	8009e0a <USBD_LL_DataOutStage+0xae>
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d002      	beq.n	8009dd8 <USBD_LL_DataOutStage+0x7c>
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d003      	beq.n	8009dde <USBD_LL_DataOutStage+0x82>
 8009dd6:	e018      	b.n	8009e0a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	75bb      	strb	r3, [r7, #22]
            break;
 8009ddc:	e018      	b.n	8009e10 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	4619      	mov	r1, r3
 8009de8:	68f8      	ldr	r0, [r7, #12]
 8009dea:	f000 fa5e 	bl	800a2aa <USBD_CoreFindIF>
 8009dee:	4603      	mov	r3, r0
 8009df0:	75bb      	strb	r3, [r7, #22]
            break;
 8009df2:	e00d      	b.n	8009e10 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	f000 fa60 	bl	800a2c4 <USBD_CoreFindEP>
 8009e04:	4603      	mov	r3, r0
 8009e06:	75bb      	strb	r3, [r7, #22]
            break;
 8009e08:	e002      	b.n	8009e10 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	75bb      	strb	r3, [r7, #22]
            break;
 8009e0e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009e10:	7dbb      	ldrb	r3, [r7, #22]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d119      	bne.n	8009e4a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	2b03      	cmp	r3, #3
 8009e20:	d113      	bne.n	8009e4a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009e22:	7dba      	ldrb	r2, [r7, #22]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	32ae      	adds	r2, #174	; 0xae
 8009e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00b      	beq.n	8009e4a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009e32:	7dba      	ldrb	r2, [r7, #22]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009e3a:	7dba      	ldrb	r2, [r7, #22]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	32ae      	adds	r2, #174	; 0xae
 8009e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f001 f94a 	bl	800b0e4 <USBD_CtlSendStatus>
 8009e50:	e032      	b.n	8009eb8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009e52:	7afb      	ldrb	r3, [r7, #11]
 8009e54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f000 fa31 	bl	800a2c4 <USBD_CoreFindEP>
 8009e62:	4603      	mov	r3, r0
 8009e64:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e66:	7dbb      	ldrb	r3, [r7, #22]
 8009e68:	2bff      	cmp	r3, #255	; 0xff
 8009e6a:	d025      	beq.n	8009eb8 <USBD_LL_DataOutStage+0x15c>
 8009e6c:	7dbb      	ldrb	r3, [r7, #22]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d122      	bne.n	8009eb8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b03      	cmp	r3, #3
 8009e7c:	d117      	bne.n	8009eae <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009e7e:	7dba      	ldrb	r2, [r7, #22]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	32ae      	adds	r2, #174	; 0xae
 8009e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e88:	699b      	ldr	r3, [r3, #24]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00f      	beq.n	8009eae <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009e8e:	7dba      	ldrb	r2, [r7, #22]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009e96:	7dba      	ldrb	r2, [r7, #22]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	32ae      	adds	r2, #174	; 0xae
 8009e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	7afa      	ldrb	r2, [r7, #11]
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	68f8      	ldr	r0, [r7, #12]
 8009ea8:	4798      	blx	r3
 8009eaa:	4603      	mov	r3, r0
 8009eac:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009eae:	7dfb      	ldrb	r3, [r7, #23]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009eb4:	7dfb      	ldrb	r3, [r7, #23]
 8009eb6:	e000      	b.n	8009eba <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3718      	adds	r7, #24
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b086      	sub	sp, #24
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	60f8      	str	r0, [r7, #12]
 8009eca:	460b      	mov	r3, r1
 8009ecc:	607a      	str	r2, [r7, #4]
 8009ece:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009ed0:	7afb      	ldrb	r3, [r7, #11]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d16f      	bne.n	8009fb6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	3314      	adds	r3, #20
 8009eda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d15a      	bne.n	8009f9c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	689a      	ldr	r2, [r3, #8]
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d914      	bls.n	8009f1c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	689a      	ldr	r2, [r3, #8]
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	1ad2      	subs	r2, r2, r3
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	461a      	mov	r2, r3
 8009f06:	6879      	ldr	r1, [r7, #4]
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	f001 f8ac 	bl	800b066 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f0e:	2300      	movs	r3, #0
 8009f10:	2200      	movs	r2, #0
 8009f12:	2100      	movs	r1, #0
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f004 ff93 	bl	800ee40 <USBD_LL_PrepareReceive>
 8009f1a:	e03f      	b.n	8009f9c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	68da      	ldr	r2, [r3, #12]
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d11c      	bne.n	8009f62 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	685a      	ldr	r2, [r3, #4]
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d316      	bcc.n	8009f62 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	685a      	ldr	r2, [r3, #4]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d20f      	bcs.n	8009f62 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009f42:	2200      	movs	r2, #0
 8009f44:	2100      	movs	r1, #0
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f001 f88d 	bl	800b066 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f54:	2300      	movs	r3, #0
 8009f56:	2200      	movs	r2, #0
 8009f58:	2100      	movs	r1, #0
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f004 ff70 	bl	800ee40 <USBD_LL_PrepareReceive>
 8009f60:	e01c      	b.n	8009f9c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	2b03      	cmp	r3, #3
 8009f6c:	d10f      	bne.n	8009f8e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d009      	beq.n	8009f8e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f8e:	2180      	movs	r1, #128	; 0x80
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f004 feab 	bl	800ecec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009f96:	68f8      	ldr	r0, [r7, #12]
 8009f98:	f001 f8b7 	bl	800b10a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d03a      	beq.n	800a01c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009fa6:	68f8      	ldr	r0, [r7, #12]
 8009fa8:	f7ff fe42 	bl	8009c30 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009fb4:	e032      	b.n	800a01c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009fb6:	7afb      	ldrb	r3, [r7, #11]
 8009fb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f000 f97f 	bl	800a2c4 <USBD_CoreFindEP>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009fca:	7dfb      	ldrb	r3, [r7, #23]
 8009fcc:	2bff      	cmp	r3, #255	; 0xff
 8009fce:	d025      	beq.n	800a01c <USBD_LL_DataInStage+0x15a>
 8009fd0:	7dfb      	ldrb	r3, [r7, #23]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d122      	bne.n	800a01c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	2b03      	cmp	r3, #3
 8009fe0:	d11c      	bne.n	800a01c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009fe2:	7dfa      	ldrb	r2, [r7, #23]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	32ae      	adds	r2, #174	; 0xae
 8009fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fec:	695b      	ldr	r3, [r3, #20]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d014      	beq.n	800a01c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009ff2:	7dfa      	ldrb	r2, [r7, #23]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009ffa:	7dfa      	ldrb	r2, [r7, #23]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	32ae      	adds	r2, #174	; 0xae
 800a000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a004:	695b      	ldr	r3, [r3, #20]
 800a006:	7afa      	ldrb	r2, [r7, #11]
 800a008:	4611      	mov	r1, r2
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	4798      	blx	r3
 800a00e:	4603      	mov	r3, r0
 800a010:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a012:	7dbb      	ldrb	r3, [r7, #22]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d001      	beq.n	800a01c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a018:	7dbb      	ldrb	r3, [r7, #22]
 800a01a:	e000      	b.n	800a01e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3718      	adds	r7, #24
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b084      	sub	sp, #16
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2201      	movs	r2, #1
 800a036:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d014      	beq.n	800a08c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00e      	beq.n	800a08c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	6852      	ldr	r2, [r2, #4]
 800a07a:	b2d2      	uxtb	r2, r2
 800a07c:	4611      	mov	r1, r2
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	4798      	blx	r3
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d001      	beq.n	800a08c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a088:	2303      	movs	r3, #3
 800a08a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a08c:	2340      	movs	r3, #64	; 0x40
 800a08e:	2200      	movs	r2, #0
 800a090:	2100      	movs	r1, #0
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f004 fde5 	bl	800ec62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2240      	movs	r2, #64	; 0x40
 800a0a4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a0a8:	2340      	movs	r3, #64	; 0x40
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	2180      	movs	r1, #128	; 0x80
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f004 fdd7 	bl	800ec62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2240      	movs	r2, #64	; 0x40
 800a0be:	621a      	str	r2, [r3, #32]

  return ret;
 800a0c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a0ca:	b480      	push	{r7}
 800a0cc:	b083      	sub	sp, #12
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	78fa      	ldrb	r2, [r7, #3]
 800a0da:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	370c      	adds	r7, #12
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b083      	sub	sp, #12
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0f8:	b2da      	uxtb	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2204      	movs	r2, #4
 800a104:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	370c      	adds	r7, #12
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a116:	b480      	push	{r7}
 800a118:	b083      	sub	sp, #12
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a124:	b2db      	uxtb	r3, r3
 800a126:	2b04      	cmp	r3, #4
 800a128:	d106      	bne.n	800a138 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a130:	b2da      	uxtb	r2, r3
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	370c      	adds	r7, #12
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr

0800a146 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b082      	sub	sp, #8
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a154:	b2db      	uxtb	r3, r3
 800a156:	2b03      	cmp	r3, #3
 800a158:	d110      	bne.n	800a17c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a160:	2b00      	cmp	r3, #0
 800a162:	d00b      	beq.n	800a17c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a16a:	69db      	ldr	r3, [r3, #28]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d005      	beq.n	800a17c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a176:	69db      	ldr	r3, [r3, #28]
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3708      	adds	r7, #8
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b082      	sub	sp, #8
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
 800a18e:	460b      	mov	r3, r1
 800a190:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	32ae      	adds	r2, #174	; 0xae
 800a19c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e01c      	b.n	800a1e2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	2b03      	cmp	r3, #3
 800a1b2:	d115      	bne.n	800a1e0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	32ae      	adds	r2, #174	; 0xae
 800a1be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1c2:	6a1b      	ldr	r3, [r3, #32]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00b      	beq.n	800a1e0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	32ae      	adds	r2, #174	; 0xae
 800a1d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1d6:	6a1b      	ldr	r3, [r3, #32]
 800a1d8:	78fa      	ldrb	r2, [r7, #3]
 800a1da:	4611      	mov	r1, r2
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3708      	adds	r7, #8
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b082      	sub	sp, #8
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	32ae      	adds	r2, #174	; 0xae
 800a200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d101      	bne.n	800a20c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a208:	2303      	movs	r3, #3
 800a20a:	e01c      	b.n	800a246 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a212:	b2db      	uxtb	r3, r3
 800a214:	2b03      	cmp	r3, #3
 800a216:	d115      	bne.n	800a244 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	32ae      	adds	r2, #174	; 0xae
 800a222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00b      	beq.n	800a244 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	32ae      	adds	r2, #174	; 0xae
 800a236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23c:	78fa      	ldrb	r2, [r7, #3]
 800a23e:	4611      	mov	r1, r2
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3708      	adds	r7, #8
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a24e:	b480      	push	{r7}
 800a250:	b083      	sub	sp, #12
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a256:	2300      	movs	r3, #0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	370c      	adds	r7, #12
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a26c:	2300      	movs	r3, #0
 800a26e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00e      	beq.n	800a2a0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	6852      	ldr	r2, [r2, #4]
 800a28e:	b2d2      	uxtb	r2, r2
 800a290:	4611      	mov	r1, r2
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	4798      	blx	r3
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d001      	beq.n	800a2a0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a29c:	2303      	movs	r3, #3
 800a29e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a2aa:	b480      	push	{r7}
 800a2ac:	b083      	sub	sp, #12
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a2b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a2d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	370c      	adds	r7, #12
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr

0800a2de <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b086      	sub	sp, #24
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	885b      	ldrh	r3, [r3, #2]
 800a2fa:	b29a      	uxth	r2, r3
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	b29b      	uxth	r3, r3
 800a302:	429a      	cmp	r2, r3
 800a304:	d920      	bls.n	800a348 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a30e:	e013      	b.n	800a338 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a310:	f107 030a 	add.w	r3, r7, #10
 800a314:	4619      	mov	r1, r3
 800a316:	6978      	ldr	r0, [r7, #20]
 800a318:	f000 f81b 	bl	800a352 <USBD_GetNextDesc>
 800a31c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	785b      	ldrb	r3, [r3, #1]
 800a322:	2b05      	cmp	r3, #5
 800a324:	d108      	bne.n	800a338 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	789b      	ldrb	r3, [r3, #2]
 800a32e:	78fa      	ldrb	r2, [r7, #3]
 800a330:	429a      	cmp	r2, r3
 800a332:	d008      	beq.n	800a346 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a334:	2300      	movs	r3, #0
 800a336:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	885b      	ldrh	r3, [r3, #2]
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	897b      	ldrh	r3, [r7, #10]
 800a340:	429a      	cmp	r2, r3
 800a342:	d8e5      	bhi.n	800a310 <USBD_GetEpDesc+0x32>
 800a344:	e000      	b.n	800a348 <USBD_GetEpDesc+0x6a>
          break;
 800a346:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a348:	693b      	ldr	r3, [r7, #16]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3718      	adds	r7, #24
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a352:	b480      	push	{r7}
 800a354:	b085      	sub	sp, #20
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	881a      	ldrh	r2, [r3, #0]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	b29b      	uxth	r3, r3
 800a36a:	4413      	add	r3, r2
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	461a      	mov	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4413      	add	r3, r2
 800a37c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a37e:	68fb      	ldr	r3, [r7, #12]
}
 800a380:	4618      	mov	r0, r3
 800a382:	3714      	adds	r7, #20
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b087      	sub	sp, #28
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a3aa:	8a3b      	ldrh	r3, [r7, #16]
 800a3ac:	021b      	lsls	r3, r3, #8
 800a3ae:	b21a      	sxth	r2, r3
 800a3b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	b21b      	sxth	r3, r3
 800a3b8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a3ba:	89fb      	ldrh	r3, [r7, #14]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	371c      	adds	r7, #28
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3de:	2b40      	cmp	r3, #64	; 0x40
 800a3e0:	d005      	beq.n	800a3ee <USBD_StdDevReq+0x26>
 800a3e2:	2b40      	cmp	r3, #64	; 0x40
 800a3e4:	d857      	bhi.n	800a496 <USBD_StdDevReq+0xce>
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00f      	beq.n	800a40a <USBD_StdDevReq+0x42>
 800a3ea:	2b20      	cmp	r3, #32
 800a3ec:	d153      	bne.n	800a496 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	32ae      	adds	r2, #174	; 0xae
 800a3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	6839      	ldr	r1, [r7, #0]
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	4798      	blx	r3
 800a404:	4603      	mov	r3, r0
 800a406:	73fb      	strb	r3, [r7, #15]
      break;
 800a408:	e04a      	b.n	800a4a0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	785b      	ldrb	r3, [r3, #1]
 800a40e:	2b09      	cmp	r3, #9
 800a410:	d83b      	bhi.n	800a48a <USBD_StdDevReq+0xc2>
 800a412:	a201      	add	r2, pc, #4	; (adr r2, 800a418 <USBD_StdDevReq+0x50>)
 800a414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a418:	0800a46d 	.word	0x0800a46d
 800a41c:	0800a481 	.word	0x0800a481
 800a420:	0800a48b 	.word	0x0800a48b
 800a424:	0800a477 	.word	0x0800a477
 800a428:	0800a48b 	.word	0x0800a48b
 800a42c:	0800a44b 	.word	0x0800a44b
 800a430:	0800a441 	.word	0x0800a441
 800a434:	0800a48b 	.word	0x0800a48b
 800a438:	0800a463 	.word	0x0800a463
 800a43c:	0800a455 	.word	0x0800a455
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a440:	6839      	ldr	r1, [r7, #0]
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 fa3c 	bl	800a8c0 <USBD_GetDescriptor>
          break;
 800a448:	e024      	b.n	800a494 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a44a:	6839      	ldr	r1, [r7, #0]
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 fba1 	bl	800ab94 <USBD_SetAddress>
          break;
 800a452:	e01f      	b.n	800a494 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a454:	6839      	ldr	r1, [r7, #0]
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 fbe0 	bl	800ac1c <USBD_SetConfig>
 800a45c:	4603      	mov	r3, r0
 800a45e:	73fb      	strb	r3, [r7, #15]
          break;
 800a460:	e018      	b.n	800a494 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a462:	6839      	ldr	r1, [r7, #0]
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 fc83 	bl	800ad70 <USBD_GetConfig>
          break;
 800a46a:	e013      	b.n	800a494 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a46c:	6839      	ldr	r1, [r7, #0]
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 fcb4 	bl	800addc <USBD_GetStatus>
          break;
 800a474:	e00e      	b.n	800a494 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a476:	6839      	ldr	r1, [r7, #0]
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 fce3 	bl	800ae44 <USBD_SetFeature>
          break;
 800a47e:	e009      	b.n	800a494 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a480:	6839      	ldr	r1, [r7, #0]
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 fd07 	bl	800ae96 <USBD_ClrFeature>
          break;
 800a488:	e004      	b.n	800a494 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a48a:	6839      	ldr	r1, [r7, #0]
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f000 fd5e 	bl	800af4e <USBD_CtlError>
          break;
 800a492:	bf00      	nop
      }
      break;
 800a494:	e004      	b.n	800a4a0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a496:	6839      	ldr	r1, [r7, #0]
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 fd58 	bl	800af4e <USBD_CtlError>
      break;
 800a49e:	bf00      	nop
  }

  return ret;
 800a4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop

0800a4ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a4c2:	2b40      	cmp	r3, #64	; 0x40
 800a4c4:	d005      	beq.n	800a4d2 <USBD_StdItfReq+0x26>
 800a4c6:	2b40      	cmp	r3, #64	; 0x40
 800a4c8:	d852      	bhi.n	800a570 <USBD_StdItfReq+0xc4>
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d001      	beq.n	800a4d2 <USBD_StdItfReq+0x26>
 800a4ce:	2b20      	cmp	r3, #32
 800a4d0:	d14e      	bne.n	800a570 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	3b01      	subs	r3, #1
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	d840      	bhi.n	800a562 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	889b      	ldrh	r3, [r3, #4]
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d836      	bhi.n	800a558 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	889b      	ldrh	r3, [r3, #4]
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f7ff fed9 	bl	800a2aa <USBD_CoreFindIF>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4fc:	7bbb      	ldrb	r3, [r7, #14]
 800a4fe:	2bff      	cmp	r3, #255	; 0xff
 800a500:	d01d      	beq.n	800a53e <USBD_StdItfReq+0x92>
 800a502:	7bbb      	ldrb	r3, [r7, #14]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d11a      	bne.n	800a53e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a508:	7bba      	ldrb	r2, [r7, #14]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	32ae      	adds	r2, #174	; 0xae
 800a50e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d00f      	beq.n	800a538 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a518:	7bba      	ldrb	r2, [r7, #14]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a520:	7bba      	ldrb	r2, [r7, #14]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	32ae      	adds	r2, #174	; 0xae
 800a526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	6839      	ldr	r1, [r7, #0]
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	4798      	blx	r3
 800a532:	4603      	mov	r3, r0
 800a534:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a536:	e004      	b.n	800a542 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a538:	2303      	movs	r3, #3
 800a53a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a53c:	e001      	b.n	800a542 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a53e:	2303      	movs	r3, #3
 800a540:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	88db      	ldrh	r3, [r3, #6]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d110      	bne.n	800a56c <USBD_StdItfReq+0xc0>
 800a54a:	7bfb      	ldrb	r3, [r7, #15]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d10d      	bne.n	800a56c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 fdc7 	bl	800b0e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a556:	e009      	b.n	800a56c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a558:	6839      	ldr	r1, [r7, #0]
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 fcf7 	bl	800af4e <USBD_CtlError>
          break;
 800a560:	e004      	b.n	800a56c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a562:	6839      	ldr	r1, [r7, #0]
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 fcf2 	bl	800af4e <USBD_CtlError>
          break;
 800a56a:	e000      	b.n	800a56e <USBD_StdItfReq+0xc2>
          break;
 800a56c:	bf00      	nop
      }
      break;
 800a56e:	e004      	b.n	800a57a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a570:	6839      	ldr	r1, [r7, #0]
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 fceb 	bl	800af4e <USBD_CtlError>
      break;
 800a578:	bf00      	nop
  }

  return ret;
 800a57a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a58e:	2300      	movs	r3, #0
 800a590:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	889b      	ldrh	r3, [r3, #4]
 800a596:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5a0:	2b40      	cmp	r3, #64	; 0x40
 800a5a2:	d007      	beq.n	800a5b4 <USBD_StdEPReq+0x30>
 800a5a4:	2b40      	cmp	r3, #64	; 0x40
 800a5a6:	f200 817f 	bhi.w	800a8a8 <USBD_StdEPReq+0x324>
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d02a      	beq.n	800a604 <USBD_StdEPReq+0x80>
 800a5ae:	2b20      	cmp	r3, #32
 800a5b0:	f040 817a 	bne.w	800a8a8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a5b4:	7bbb      	ldrb	r3, [r7, #14]
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f7ff fe83 	bl	800a2c4 <USBD_CoreFindEP>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a5c2:	7b7b      	ldrb	r3, [r7, #13]
 800a5c4:	2bff      	cmp	r3, #255	; 0xff
 800a5c6:	f000 8174 	beq.w	800a8b2 <USBD_StdEPReq+0x32e>
 800a5ca:	7b7b      	ldrb	r3, [r7, #13]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f040 8170 	bne.w	800a8b2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a5d2:	7b7a      	ldrb	r2, [r7, #13]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a5da:	7b7a      	ldrb	r2, [r7, #13]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	32ae      	adds	r2, #174	; 0xae
 800a5e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f000 8163 	beq.w	800a8b2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a5ec:	7b7a      	ldrb	r2, [r7, #13]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	32ae      	adds	r2, #174	; 0xae
 800a5f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	6839      	ldr	r1, [r7, #0]
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	4798      	blx	r3
 800a5fe:	4603      	mov	r3, r0
 800a600:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a602:	e156      	b.n	800a8b2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	785b      	ldrb	r3, [r3, #1]
 800a608:	2b03      	cmp	r3, #3
 800a60a:	d008      	beq.n	800a61e <USBD_StdEPReq+0x9a>
 800a60c:	2b03      	cmp	r3, #3
 800a60e:	f300 8145 	bgt.w	800a89c <USBD_StdEPReq+0x318>
 800a612:	2b00      	cmp	r3, #0
 800a614:	f000 809b 	beq.w	800a74e <USBD_StdEPReq+0x1ca>
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d03c      	beq.n	800a696 <USBD_StdEPReq+0x112>
 800a61c:	e13e      	b.n	800a89c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a624:	b2db      	uxtb	r3, r3
 800a626:	2b02      	cmp	r3, #2
 800a628:	d002      	beq.n	800a630 <USBD_StdEPReq+0xac>
 800a62a:	2b03      	cmp	r3, #3
 800a62c:	d016      	beq.n	800a65c <USBD_StdEPReq+0xd8>
 800a62e:	e02c      	b.n	800a68a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a630:	7bbb      	ldrb	r3, [r7, #14]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00d      	beq.n	800a652 <USBD_StdEPReq+0xce>
 800a636:	7bbb      	ldrb	r3, [r7, #14]
 800a638:	2b80      	cmp	r3, #128	; 0x80
 800a63a:	d00a      	beq.n	800a652 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a63c:	7bbb      	ldrb	r3, [r7, #14]
 800a63e:	4619      	mov	r1, r3
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f004 fb53 	bl	800ecec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a646:	2180      	movs	r1, #128	; 0x80
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f004 fb4f 	bl	800ecec <USBD_LL_StallEP>
 800a64e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a650:	e020      	b.n	800a694 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a652:	6839      	ldr	r1, [r7, #0]
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 fc7a 	bl	800af4e <USBD_CtlError>
              break;
 800a65a:	e01b      	b.n	800a694 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	885b      	ldrh	r3, [r3, #2]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d10e      	bne.n	800a682 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a664:	7bbb      	ldrb	r3, [r7, #14]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00b      	beq.n	800a682 <USBD_StdEPReq+0xfe>
 800a66a:	7bbb      	ldrb	r3, [r7, #14]
 800a66c:	2b80      	cmp	r3, #128	; 0x80
 800a66e:	d008      	beq.n	800a682 <USBD_StdEPReq+0xfe>
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	88db      	ldrh	r3, [r3, #6]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d104      	bne.n	800a682 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a678:	7bbb      	ldrb	r3, [r7, #14]
 800a67a:	4619      	mov	r1, r3
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f004 fb35 	bl	800ecec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 fd2e 	bl	800b0e4 <USBD_CtlSendStatus>

              break;
 800a688:	e004      	b.n	800a694 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a68a:	6839      	ldr	r1, [r7, #0]
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 fc5e 	bl	800af4e <USBD_CtlError>
              break;
 800a692:	bf00      	nop
          }
          break;
 800a694:	e107      	b.n	800a8a6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d002      	beq.n	800a6a8 <USBD_StdEPReq+0x124>
 800a6a2:	2b03      	cmp	r3, #3
 800a6a4:	d016      	beq.n	800a6d4 <USBD_StdEPReq+0x150>
 800a6a6:	e04b      	b.n	800a740 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6a8:	7bbb      	ldrb	r3, [r7, #14]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00d      	beq.n	800a6ca <USBD_StdEPReq+0x146>
 800a6ae:	7bbb      	ldrb	r3, [r7, #14]
 800a6b0:	2b80      	cmp	r3, #128	; 0x80
 800a6b2:	d00a      	beq.n	800a6ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a6b4:	7bbb      	ldrb	r3, [r7, #14]
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f004 fb17 	bl	800ecec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6be:	2180      	movs	r1, #128	; 0x80
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f004 fb13 	bl	800ecec <USBD_LL_StallEP>
 800a6c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a6c8:	e040      	b.n	800a74c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a6ca:	6839      	ldr	r1, [r7, #0]
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 fc3e 	bl	800af4e <USBD_CtlError>
              break;
 800a6d2:	e03b      	b.n	800a74c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	885b      	ldrh	r3, [r3, #2]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d136      	bne.n	800a74a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a6dc:	7bbb      	ldrb	r3, [r7, #14]
 800a6de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d004      	beq.n	800a6f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a6e6:	7bbb      	ldrb	r3, [r7, #14]
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f004 fb1d 	bl	800ed2a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 fcf7 	bl	800b0e4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a6f6:	7bbb      	ldrb	r3, [r7, #14]
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f7ff fde2 	bl	800a2c4 <USBD_CoreFindEP>
 800a700:	4603      	mov	r3, r0
 800a702:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a704:	7b7b      	ldrb	r3, [r7, #13]
 800a706:	2bff      	cmp	r3, #255	; 0xff
 800a708:	d01f      	beq.n	800a74a <USBD_StdEPReq+0x1c6>
 800a70a:	7b7b      	ldrb	r3, [r7, #13]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d11c      	bne.n	800a74a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a710:	7b7a      	ldrb	r2, [r7, #13]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a718:	7b7a      	ldrb	r2, [r7, #13]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	32ae      	adds	r2, #174	; 0xae
 800a71e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d010      	beq.n	800a74a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a728:	7b7a      	ldrb	r2, [r7, #13]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	32ae      	adds	r2, #174	; 0xae
 800a72e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a732:	689b      	ldr	r3, [r3, #8]
 800a734:	6839      	ldr	r1, [r7, #0]
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	4798      	blx	r3
 800a73a:	4603      	mov	r3, r0
 800a73c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a73e:	e004      	b.n	800a74a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a740:	6839      	ldr	r1, [r7, #0]
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 fc03 	bl	800af4e <USBD_CtlError>
              break;
 800a748:	e000      	b.n	800a74c <USBD_StdEPReq+0x1c8>
              break;
 800a74a:	bf00      	nop
          }
          break;
 800a74c:	e0ab      	b.n	800a8a6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a754:	b2db      	uxtb	r3, r3
 800a756:	2b02      	cmp	r3, #2
 800a758:	d002      	beq.n	800a760 <USBD_StdEPReq+0x1dc>
 800a75a:	2b03      	cmp	r3, #3
 800a75c:	d032      	beq.n	800a7c4 <USBD_StdEPReq+0x240>
 800a75e:	e097      	b.n	800a890 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a760:	7bbb      	ldrb	r3, [r7, #14]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d007      	beq.n	800a776 <USBD_StdEPReq+0x1f2>
 800a766:	7bbb      	ldrb	r3, [r7, #14]
 800a768:	2b80      	cmp	r3, #128	; 0x80
 800a76a:	d004      	beq.n	800a776 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a76c:	6839      	ldr	r1, [r7, #0]
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fbed 	bl	800af4e <USBD_CtlError>
                break;
 800a774:	e091      	b.n	800a89a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a776:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	da0b      	bge.n	800a796 <USBD_StdEPReq+0x212>
 800a77e:	7bbb      	ldrb	r3, [r7, #14]
 800a780:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a784:	4613      	mov	r3, r2
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	4413      	add	r3, r2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	3310      	adds	r3, #16
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	4413      	add	r3, r2
 800a792:	3304      	adds	r3, #4
 800a794:	e00b      	b.n	800a7ae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a796:	7bbb      	ldrb	r3, [r7, #14]
 800a798:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a79c:	4613      	mov	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4413      	add	r3, r2
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	3304      	adds	r3, #4
 800a7ae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	2202      	movs	r2, #2
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 fc37 	bl	800b030 <USBD_CtlSendData>
              break;
 800a7c2:	e06a      	b.n	800a89a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a7c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	da11      	bge.n	800a7f0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a7cc:	7bbb      	ldrb	r3, [r7, #14]
 800a7ce:	f003 020f 	and.w	r2, r3, #15
 800a7d2:	6879      	ldr	r1, [r7, #4]
 800a7d4:	4613      	mov	r3, r2
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	4413      	add	r3, r2
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	440b      	add	r3, r1
 800a7de:	3324      	adds	r3, #36	; 0x24
 800a7e0:	881b      	ldrh	r3, [r3, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d117      	bne.n	800a816 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a7e6:	6839      	ldr	r1, [r7, #0]
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 fbb0 	bl	800af4e <USBD_CtlError>
                  break;
 800a7ee:	e054      	b.n	800a89a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a7f0:	7bbb      	ldrb	r3, [r7, #14]
 800a7f2:	f003 020f 	and.w	r2, r3, #15
 800a7f6:	6879      	ldr	r1, [r7, #4]
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	4413      	add	r3, r2
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	440b      	add	r3, r1
 800a802:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a806:	881b      	ldrh	r3, [r3, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d104      	bne.n	800a816 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a80c:	6839      	ldr	r1, [r7, #0]
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 fb9d 	bl	800af4e <USBD_CtlError>
                  break;
 800a814:	e041      	b.n	800a89a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a816:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	da0b      	bge.n	800a836 <USBD_StdEPReq+0x2b2>
 800a81e:	7bbb      	ldrb	r3, [r7, #14]
 800a820:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a824:	4613      	mov	r3, r2
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	4413      	add	r3, r2
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	3310      	adds	r3, #16
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	4413      	add	r3, r2
 800a832:	3304      	adds	r3, #4
 800a834:	e00b      	b.n	800a84e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a836:	7bbb      	ldrb	r3, [r7, #14]
 800a838:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a83c:	4613      	mov	r3, r2
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	4413      	add	r3, r2
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	4413      	add	r3, r2
 800a84c:	3304      	adds	r3, #4
 800a84e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a850:	7bbb      	ldrb	r3, [r7, #14]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d002      	beq.n	800a85c <USBD_StdEPReq+0x2d8>
 800a856:	7bbb      	ldrb	r3, [r7, #14]
 800a858:	2b80      	cmp	r3, #128	; 0x80
 800a85a:	d103      	bne.n	800a864 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	2200      	movs	r2, #0
 800a860:	601a      	str	r2, [r3, #0]
 800a862:	e00e      	b.n	800a882 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a864:	7bbb      	ldrb	r3, [r7, #14]
 800a866:	4619      	mov	r1, r3
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f004 fa7d 	bl	800ed68 <USBD_LL_IsStallEP>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d003      	beq.n	800a87c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	2201      	movs	r2, #1
 800a878:	601a      	str	r2, [r3, #0]
 800a87a:	e002      	b.n	800a882 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	2200      	movs	r2, #0
 800a880:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	2202      	movs	r2, #2
 800a886:	4619      	mov	r1, r3
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 fbd1 	bl	800b030 <USBD_CtlSendData>
              break;
 800a88e:	e004      	b.n	800a89a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a890:	6839      	ldr	r1, [r7, #0]
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 fb5b 	bl	800af4e <USBD_CtlError>
              break;
 800a898:	bf00      	nop
          }
          break;
 800a89a:	e004      	b.n	800a8a6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a89c:	6839      	ldr	r1, [r7, #0]
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 fb55 	bl	800af4e <USBD_CtlError>
          break;
 800a8a4:	bf00      	nop
      }
      break;
 800a8a6:	e005      	b.n	800a8b4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a8a8:	6839      	ldr	r1, [r7, #0]
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 fb4f 	bl	800af4e <USBD_CtlError>
      break;
 800a8b0:	e000      	b.n	800a8b4 <USBD_StdEPReq+0x330>
      break;
 800a8b2:	bf00      	nop
  }

  return ret;
 800a8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
	...

0800a8c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	885b      	ldrh	r3, [r3, #2]
 800a8da:	0a1b      	lsrs	r3, r3, #8
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	2b06      	cmp	r3, #6
 800a8e2:	f200 8128 	bhi.w	800ab36 <USBD_GetDescriptor+0x276>
 800a8e6:	a201      	add	r2, pc, #4	; (adr r2, 800a8ec <USBD_GetDescriptor+0x2c>)
 800a8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ec:	0800a909 	.word	0x0800a909
 800a8f0:	0800a921 	.word	0x0800a921
 800a8f4:	0800a961 	.word	0x0800a961
 800a8f8:	0800ab37 	.word	0x0800ab37
 800a8fc:	0800ab37 	.word	0x0800ab37
 800a900:	0800aad7 	.word	0x0800aad7
 800a904:	0800ab03 	.word	0x0800ab03
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	7c12      	ldrb	r2, [r2, #16]
 800a914:	f107 0108 	add.w	r1, r7, #8
 800a918:	4610      	mov	r0, r2
 800a91a:	4798      	blx	r3
 800a91c:	60f8      	str	r0, [r7, #12]
      break;
 800a91e:	e112      	b.n	800ab46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	7c1b      	ldrb	r3, [r3, #16]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10d      	bne.n	800a944 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a92e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a930:	f107 0208 	add.w	r2, r7, #8
 800a934:	4610      	mov	r0, r2
 800a936:	4798      	blx	r3
 800a938:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	3301      	adds	r3, #1
 800a93e:	2202      	movs	r2, #2
 800a940:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a942:	e100      	b.n	800ab46 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a94c:	f107 0208 	add.w	r2, r7, #8
 800a950:	4610      	mov	r0, r2
 800a952:	4798      	blx	r3
 800a954:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	3301      	adds	r3, #1
 800a95a:	2202      	movs	r2, #2
 800a95c:	701a      	strb	r2, [r3, #0]
      break;
 800a95e:	e0f2      	b.n	800ab46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	885b      	ldrh	r3, [r3, #2]
 800a964:	b2db      	uxtb	r3, r3
 800a966:	2b05      	cmp	r3, #5
 800a968:	f200 80ac 	bhi.w	800aac4 <USBD_GetDescriptor+0x204>
 800a96c:	a201      	add	r2, pc, #4	; (adr r2, 800a974 <USBD_GetDescriptor+0xb4>)
 800a96e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a972:	bf00      	nop
 800a974:	0800a98d 	.word	0x0800a98d
 800a978:	0800a9c1 	.word	0x0800a9c1
 800a97c:	0800a9f5 	.word	0x0800a9f5
 800a980:	0800aa29 	.word	0x0800aa29
 800a984:	0800aa5d 	.word	0x0800aa5d
 800a988:	0800aa91 	.word	0x0800aa91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00b      	beq.n	800a9b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	7c12      	ldrb	r2, [r2, #16]
 800a9a4:	f107 0108 	add.w	r1, r7, #8
 800a9a8:	4610      	mov	r0, r2
 800a9aa:	4798      	blx	r3
 800a9ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9ae:	e091      	b.n	800aad4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9b0:	6839      	ldr	r1, [r7, #0]
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 facb 	bl	800af4e <USBD_CtlError>
            err++;
 800a9b8:	7afb      	ldrb	r3, [r7, #11]
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	72fb      	strb	r3, [r7, #11]
          break;
 800a9be:	e089      	b.n	800aad4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00b      	beq.n	800a9e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	7c12      	ldrb	r2, [r2, #16]
 800a9d8:	f107 0108 	add.w	r1, r7, #8
 800a9dc:	4610      	mov	r0, r2
 800a9de:	4798      	blx	r3
 800a9e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9e2:	e077      	b.n	800aad4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9e4:	6839      	ldr	r1, [r7, #0]
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 fab1 	bl	800af4e <USBD_CtlError>
            err++;
 800a9ec:	7afb      	ldrb	r3, [r7, #11]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	72fb      	strb	r3, [r7, #11]
          break;
 800a9f2:	e06f      	b.n	800aad4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d00b      	beq.n	800aa18 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	7c12      	ldrb	r2, [r2, #16]
 800aa0c:	f107 0108 	add.w	r1, r7, #8
 800aa10:	4610      	mov	r0, r2
 800aa12:	4798      	blx	r3
 800aa14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa16:	e05d      	b.n	800aad4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa18:	6839      	ldr	r1, [r7, #0]
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 fa97 	bl	800af4e <USBD_CtlError>
            err++;
 800aa20:	7afb      	ldrb	r3, [r7, #11]
 800aa22:	3301      	adds	r3, #1
 800aa24:	72fb      	strb	r3, [r7, #11]
          break;
 800aa26:	e055      	b.n	800aad4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa2e:	691b      	ldr	r3, [r3, #16]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d00b      	beq.n	800aa4c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa3a:	691b      	ldr	r3, [r3, #16]
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	7c12      	ldrb	r2, [r2, #16]
 800aa40:	f107 0108 	add.w	r1, r7, #8
 800aa44:	4610      	mov	r0, r2
 800aa46:	4798      	blx	r3
 800aa48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa4a:	e043      	b.n	800aad4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa4c:	6839      	ldr	r1, [r7, #0]
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 fa7d 	bl	800af4e <USBD_CtlError>
            err++;
 800aa54:	7afb      	ldrb	r3, [r7, #11]
 800aa56:	3301      	adds	r3, #1
 800aa58:	72fb      	strb	r3, [r7, #11]
          break;
 800aa5a:	e03b      	b.n	800aad4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa62:	695b      	ldr	r3, [r3, #20]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d00b      	beq.n	800aa80 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa6e:	695b      	ldr	r3, [r3, #20]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	7c12      	ldrb	r2, [r2, #16]
 800aa74:	f107 0108 	add.w	r1, r7, #8
 800aa78:	4610      	mov	r0, r2
 800aa7a:	4798      	blx	r3
 800aa7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa7e:	e029      	b.n	800aad4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 fa63 	bl	800af4e <USBD_CtlError>
            err++;
 800aa88:	7afb      	ldrb	r3, [r7, #11]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa8e:	e021      	b.n	800aad4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa96:	699b      	ldr	r3, [r3, #24]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d00b      	beq.n	800aab4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaa2:	699b      	ldr	r3, [r3, #24]
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	7c12      	ldrb	r2, [r2, #16]
 800aaa8:	f107 0108 	add.w	r1, r7, #8
 800aaac:	4610      	mov	r0, r2
 800aaae:	4798      	blx	r3
 800aab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aab2:	e00f      	b.n	800aad4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aab4:	6839      	ldr	r1, [r7, #0]
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 fa49 	bl	800af4e <USBD_CtlError>
            err++;
 800aabc:	7afb      	ldrb	r3, [r7, #11]
 800aabe:	3301      	adds	r3, #1
 800aac0:	72fb      	strb	r3, [r7, #11]
          break;
 800aac2:	e007      	b.n	800aad4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aac4:	6839      	ldr	r1, [r7, #0]
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 fa41 	bl	800af4e <USBD_CtlError>
          err++;
 800aacc:	7afb      	ldrb	r3, [r7, #11]
 800aace:	3301      	adds	r3, #1
 800aad0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800aad2:	bf00      	nop
      }
      break;
 800aad4:	e037      	b.n	800ab46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	7c1b      	ldrb	r3, [r3, #16]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d109      	bne.n	800aaf2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aae6:	f107 0208 	add.w	r2, r7, #8
 800aaea:	4610      	mov	r0, r2
 800aaec:	4798      	blx	r3
 800aaee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aaf0:	e029      	b.n	800ab46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aaf2:	6839      	ldr	r1, [r7, #0]
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 fa2a 	bl	800af4e <USBD_CtlError>
        err++;
 800aafa:	7afb      	ldrb	r3, [r7, #11]
 800aafc:	3301      	adds	r3, #1
 800aafe:	72fb      	strb	r3, [r7, #11]
      break;
 800ab00:	e021      	b.n	800ab46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	7c1b      	ldrb	r3, [r3, #16]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d10d      	bne.n	800ab26 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab12:	f107 0208 	add.w	r2, r7, #8
 800ab16:	4610      	mov	r0, r2
 800ab18:	4798      	blx	r3
 800ab1a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	2207      	movs	r2, #7
 800ab22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab24:	e00f      	b.n	800ab46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ab26:	6839      	ldr	r1, [r7, #0]
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 fa10 	bl	800af4e <USBD_CtlError>
        err++;
 800ab2e:	7afb      	ldrb	r3, [r7, #11]
 800ab30:	3301      	adds	r3, #1
 800ab32:	72fb      	strb	r3, [r7, #11]
      break;
 800ab34:	e007      	b.n	800ab46 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 fa08 	bl	800af4e <USBD_CtlError>
      err++;
 800ab3e:	7afb      	ldrb	r3, [r7, #11]
 800ab40:	3301      	adds	r3, #1
 800ab42:	72fb      	strb	r3, [r7, #11]
      break;
 800ab44:	bf00      	nop
  }

  if (err != 0U)
 800ab46:	7afb      	ldrb	r3, [r7, #11]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d11e      	bne.n	800ab8a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	88db      	ldrh	r3, [r3, #6]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d016      	beq.n	800ab82 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ab54:	893b      	ldrh	r3, [r7, #8]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00e      	beq.n	800ab78 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	88da      	ldrh	r2, [r3, #6]
 800ab5e:	893b      	ldrh	r3, [r7, #8]
 800ab60:	4293      	cmp	r3, r2
 800ab62:	bf28      	it	cs
 800ab64:	4613      	movcs	r3, r2
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab6a:	893b      	ldrh	r3, [r7, #8]
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	68f9      	ldr	r1, [r7, #12]
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 fa5d 	bl	800b030 <USBD_CtlSendData>
 800ab76:	e009      	b.n	800ab8c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ab78:	6839      	ldr	r1, [r7, #0]
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 f9e7 	bl	800af4e <USBD_CtlError>
 800ab80:	e004      	b.n	800ab8c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 faae 	bl	800b0e4 <USBD_CtlSendStatus>
 800ab88:	e000      	b.n	800ab8c <USBD_GetDescriptor+0x2cc>
    return;
 800ab8a:	bf00      	nop
  }
}
 800ab8c:	3710      	adds	r7, #16
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop

0800ab94 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	889b      	ldrh	r3, [r3, #4]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d131      	bne.n	800ac0a <USBD_SetAddress+0x76>
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	88db      	ldrh	r3, [r3, #6]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d12d      	bne.n	800ac0a <USBD_SetAddress+0x76>
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	885b      	ldrh	r3, [r3, #2]
 800abb2:	2b7f      	cmp	r3, #127	; 0x7f
 800abb4:	d829      	bhi.n	800ac0a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	885b      	ldrh	r3, [r3, #2]
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abc0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	2b03      	cmp	r3, #3
 800abcc:	d104      	bne.n	800abd8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800abce:	6839      	ldr	r1, [r7, #0]
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 f9bc 	bl	800af4e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abd6:	e01d      	b.n	800ac14 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	7bfa      	ldrb	r2, [r7, #15]
 800abdc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800abe0:	7bfb      	ldrb	r3, [r7, #15]
 800abe2:	4619      	mov	r1, r3
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f004 f8eb 	bl	800edc0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 fa7a 	bl	800b0e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800abf0:	7bfb      	ldrb	r3, [r7, #15]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d004      	beq.n	800ac00 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2202      	movs	r2, #2
 800abfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abfe:	e009      	b.n	800ac14 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2201      	movs	r2, #1
 800ac04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac08:	e004      	b.n	800ac14 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ac0a:	6839      	ldr	r1, [r7, #0]
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f000 f99e 	bl	800af4e <USBD_CtlError>
  }
}
 800ac12:	bf00      	nop
 800ac14:	bf00      	nop
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac26:	2300      	movs	r3, #0
 800ac28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	885b      	ldrh	r3, [r3, #2]
 800ac2e:	b2da      	uxtb	r2, r3
 800ac30:	4b4e      	ldr	r3, [pc, #312]	; (800ad6c <USBD_SetConfig+0x150>)
 800ac32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ac34:	4b4d      	ldr	r3, [pc, #308]	; (800ad6c <USBD_SetConfig+0x150>)
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d905      	bls.n	800ac48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ac3c:	6839      	ldr	r1, [r7, #0]
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 f985 	bl	800af4e <USBD_CtlError>
    return USBD_FAIL;
 800ac44:	2303      	movs	r3, #3
 800ac46:	e08c      	b.n	800ad62 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	2b02      	cmp	r3, #2
 800ac52:	d002      	beq.n	800ac5a <USBD_SetConfig+0x3e>
 800ac54:	2b03      	cmp	r3, #3
 800ac56:	d029      	beq.n	800acac <USBD_SetConfig+0x90>
 800ac58:	e075      	b.n	800ad46 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ac5a:	4b44      	ldr	r3, [pc, #272]	; (800ad6c <USBD_SetConfig+0x150>)
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d020      	beq.n	800aca4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ac62:	4b42      	ldr	r3, [pc, #264]	; (800ad6c <USBD_SetConfig+0x150>)
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	461a      	mov	r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac6c:	4b3f      	ldr	r3, [pc, #252]	; (800ad6c <USBD_SetConfig+0x150>)
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	4619      	mov	r1, r3
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7fe ffe7 	bl	8009c46 <USBD_SetClassConfig>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ac7c:	7bfb      	ldrb	r3, [r7, #15]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d008      	beq.n	800ac94 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ac82:	6839      	ldr	r1, [r7, #0]
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 f962 	bl	800af4e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2202      	movs	r2, #2
 800ac8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ac92:	e065      	b.n	800ad60 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 fa25 	bl	800b0e4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2203      	movs	r2, #3
 800ac9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aca2:	e05d      	b.n	800ad60 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 fa1d 	bl	800b0e4 <USBD_CtlSendStatus>
      break;
 800acaa:	e059      	b.n	800ad60 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800acac:	4b2f      	ldr	r3, [pc, #188]	; (800ad6c <USBD_SetConfig+0x150>)
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d112      	bne.n	800acda <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2202      	movs	r2, #2
 800acb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800acbc:	4b2b      	ldr	r3, [pc, #172]	; (800ad6c <USBD_SetConfig+0x150>)
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	461a      	mov	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800acc6:	4b29      	ldr	r3, [pc, #164]	; (800ad6c <USBD_SetConfig+0x150>)
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	4619      	mov	r1, r3
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f7fe ffd6 	bl	8009c7e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 fa06 	bl	800b0e4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800acd8:	e042      	b.n	800ad60 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800acda:	4b24      	ldr	r3, [pc, #144]	; (800ad6c <USBD_SetConfig+0x150>)
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	461a      	mov	r2, r3
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d02a      	beq.n	800ad3e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	b2db      	uxtb	r3, r3
 800acee:	4619      	mov	r1, r3
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f7fe ffc4 	bl	8009c7e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800acf6:	4b1d      	ldr	r3, [pc, #116]	; (800ad6c <USBD_SetConfig+0x150>)
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	461a      	mov	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad00:	4b1a      	ldr	r3, [pc, #104]	; (800ad6c <USBD_SetConfig+0x150>)
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	4619      	mov	r1, r3
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f7fe ff9d 	bl	8009c46 <USBD_SetClassConfig>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00f      	beq.n	800ad36 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ad16:	6839      	ldr	r1, [r7, #0]
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 f918 	bl	800af4e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	4619      	mov	r1, r3
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f7fe ffa9 	bl	8009c7e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2202      	movs	r2, #2
 800ad30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ad34:	e014      	b.n	800ad60 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 f9d4 	bl	800b0e4 <USBD_CtlSendStatus>
      break;
 800ad3c:	e010      	b.n	800ad60 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 f9d0 	bl	800b0e4 <USBD_CtlSendStatus>
      break;
 800ad44:	e00c      	b.n	800ad60 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ad46:	6839      	ldr	r1, [r7, #0]
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 f900 	bl	800af4e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad4e:	4b07      	ldr	r3, [pc, #28]	; (800ad6c <USBD_SetConfig+0x150>)
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	4619      	mov	r1, r3
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f7fe ff92 	bl	8009c7e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ad5a:	2303      	movs	r3, #3
 800ad5c:	73fb      	strb	r3, [r7, #15]
      break;
 800ad5e:	bf00      	nop
  }

  return ret;
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	20000820 	.word	0x20000820

0800ad70 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	88db      	ldrh	r3, [r3, #6]
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d004      	beq.n	800ad8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ad82:	6839      	ldr	r1, [r7, #0]
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 f8e2 	bl	800af4e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ad8a:	e023      	b.n	800add4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	2b02      	cmp	r3, #2
 800ad96:	dc02      	bgt.n	800ad9e <USBD_GetConfig+0x2e>
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	dc03      	bgt.n	800ada4 <USBD_GetConfig+0x34>
 800ad9c:	e015      	b.n	800adca <USBD_GetConfig+0x5a>
 800ad9e:	2b03      	cmp	r3, #3
 800ada0:	d00b      	beq.n	800adba <USBD_GetConfig+0x4a>
 800ada2:	e012      	b.n	800adca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	3308      	adds	r3, #8
 800adae:	2201      	movs	r2, #1
 800adb0:	4619      	mov	r1, r3
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 f93c 	bl	800b030 <USBD_CtlSendData>
        break;
 800adb8:	e00c      	b.n	800add4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	3304      	adds	r3, #4
 800adbe:	2201      	movs	r2, #1
 800adc0:	4619      	mov	r1, r3
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 f934 	bl	800b030 <USBD_CtlSendData>
        break;
 800adc8:	e004      	b.n	800add4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800adca:	6839      	ldr	r1, [r7, #0]
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 f8be 	bl	800af4e <USBD_CtlError>
        break;
 800add2:	bf00      	nop
}
 800add4:	bf00      	nop
 800add6:	3708      	adds	r7, #8
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adec:	b2db      	uxtb	r3, r3
 800adee:	3b01      	subs	r3, #1
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	d81e      	bhi.n	800ae32 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	88db      	ldrh	r3, [r3, #6]
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	d004      	beq.n	800ae06 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800adfc:	6839      	ldr	r1, [r7, #0]
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 f8a5 	bl	800af4e <USBD_CtlError>
        break;
 800ae04:	e01a      	b.n	800ae3c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2201      	movs	r2, #1
 800ae0a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d005      	beq.n	800ae22 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	68db      	ldr	r3, [r3, #12]
 800ae1a:	f043 0202 	orr.w	r2, r3, #2
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	330c      	adds	r3, #12
 800ae26:	2202      	movs	r2, #2
 800ae28:	4619      	mov	r1, r3
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 f900 	bl	800b030 <USBD_CtlSendData>
      break;
 800ae30:	e004      	b.n	800ae3c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ae32:	6839      	ldr	r1, [r7, #0]
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 f88a 	bl	800af4e <USBD_CtlError>
      break;
 800ae3a:	bf00      	nop
  }
}
 800ae3c:	bf00      	nop
 800ae3e:	3708      	adds	r7, #8
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	885b      	ldrh	r3, [r3, #2]
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d107      	bne.n	800ae66 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2201      	movs	r2, #1
 800ae5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 f940 	bl	800b0e4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ae64:	e013      	b.n	800ae8e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	885b      	ldrh	r3, [r3, #2]
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d10b      	bne.n	800ae86 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	889b      	ldrh	r3, [r3, #4]
 800ae72:	0a1b      	lsrs	r3, r3, #8
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	b2da      	uxtb	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 f930 	bl	800b0e4 <USBD_CtlSendStatus>
}
 800ae84:	e003      	b.n	800ae8e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ae86:	6839      	ldr	r1, [r7, #0]
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 f860 	bl	800af4e <USBD_CtlError>
}
 800ae8e:	bf00      	nop
 800ae90:	3708      	adds	r7, #8
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b082      	sub	sp, #8
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
 800ae9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	3b01      	subs	r3, #1
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	d80b      	bhi.n	800aec6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	885b      	ldrh	r3, [r3, #2]
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d10c      	bne.n	800aed0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 f910 	bl	800b0e4 <USBD_CtlSendStatus>
      }
      break;
 800aec4:	e004      	b.n	800aed0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800aec6:	6839      	ldr	r1, [r7, #0]
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 f840 	bl	800af4e <USBD_CtlError>
      break;
 800aece:	e000      	b.n	800aed2 <USBD_ClrFeature+0x3c>
      break;
 800aed0:	bf00      	nop
  }
}
 800aed2:	bf00      	nop
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b084      	sub	sp, #16
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
 800aee2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	781a      	ldrb	r2, [r3, #0]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	3301      	adds	r3, #1
 800aef4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	781a      	ldrb	r2, [r3, #0]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	3301      	adds	r3, #1
 800af02:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	f7ff fa41 	bl	800a38c <SWAPBYTE>
 800af0a:	4603      	mov	r3, r0
 800af0c:	461a      	mov	r2, r3
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	3301      	adds	r3, #1
 800af16:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	3301      	adds	r3, #1
 800af1c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800af1e:	68f8      	ldr	r0, [r7, #12]
 800af20:	f7ff fa34 	bl	800a38c <SWAPBYTE>
 800af24:	4603      	mov	r3, r0
 800af26:	461a      	mov	r2, r3
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	3301      	adds	r3, #1
 800af30:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	3301      	adds	r3, #1
 800af36:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800af38:	68f8      	ldr	r0, [r7, #12]
 800af3a:	f7ff fa27 	bl	800a38c <SWAPBYTE>
 800af3e:	4603      	mov	r3, r0
 800af40:	461a      	mov	r2, r3
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	80da      	strh	r2, [r3, #6]
}
 800af46:	bf00      	nop
 800af48:	3710      	adds	r7, #16
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}

0800af4e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b082      	sub	sp, #8
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
 800af56:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800af58:	2180      	movs	r1, #128	; 0x80
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f003 fec6 	bl	800ecec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800af60:	2100      	movs	r1, #0
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f003 fec2 	bl	800ecec <USBD_LL_StallEP>
}
 800af68:	bf00      	nop
 800af6a:	3708      	adds	r7, #8
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b086      	sub	sp, #24
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800af7c:	2300      	movs	r3, #0
 800af7e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d036      	beq.n	800aff4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800af8a:	6938      	ldr	r0, [r7, #16]
 800af8c:	f000 f836 	bl	800affc <USBD_GetLen>
 800af90:	4603      	mov	r3, r0
 800af92:	3301      	adds	r3, #1
 800af94:	b29b      	uxth	r3, r3
 800af96:	005b      	lsls	r3, r3, #1
 800af98:	b29a      	uxth	r2, r3
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800af9e:	7dfb      	ldrb	r3, [r7, #23]
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	4413      	add	r3, r2
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	7812      	ldrb	r2, [r2, #0]
 800afa8:	701a      	strb	r2, [r3, #0]
  idx++;
 800afaa:	7dfb      	ldrb	r3, [r7, #23]
 800afac:	3301      	adds	r3, #1
 800afae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800afb0:	7dfb      	ldrb	r3, [r7, #23]
 800afb2:	68ba      	ldr	r2, [r7, #8]
 800afb4:	4413      	add	r3, r2
 800afb6:	2203      	movs	r2, #3
 800afb8:	701a      	strb	r2, [r3, #0]
  idx++;
 800afba:	7dfb      	ldrb	r3, [r7, #23]
 800afbc:	3301      	adds	r3, #1
 800afbe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800afc0:	e013      	b.n	800afea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800afc2:	7dfb      	ldrb	r3, [r7, #23]
 800afc4:	68ba      	ldr	r2, [r7, #8]
 800afc6:	4413      	add	r3, r2
 800afc8:	693a      	ldr	r2, [r7, #16]
 800afca:	7812      	ldrb	r2, [r2, #0]
 800afcc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	3301      	adds	r3, #1
 800afd2:	613b      	str	r3, [r7, #16]
    idx++;
 800afd4:	7dfb      	ldrb	r3, [r7, #23]
 800afd6:	3301      	adds	r3, #1
 800afd8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800afda:	7dfb      	ldrb	r3, [r7, #23]
 800afdc:	68ba      	ldr	r2, [r7, #8]
 800afde:	4413      	add	r3, r2
 800afe0:	2200      	movs	r2, #0
 800afe2:	701a      	strb	r2, [r3, #0]
    idx++;
 800afe4:	7dfb      	ldrb	r3, [r7, #23]
 800afe6:	3301      	adds	r3, #1
 800afe8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1e7      	bne.n	800afc2 <USBD_GetString+0x52>
 800aff2:	e000      	b.n	800aff6 <USBD_GetString+0x86>
    return;
 800aff4:	bf00      	nop
  }
}
 800aff6:	3718      	adds	r7, #24
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800affc:	b480      	push	{r7}
 800affe:	b085      	sub	sp, #20
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b004:	2300      	movs	r3, #0
 800b006:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b00c:	e005      	b.n	800b01a <USBD_GetLen+0x1e>
  {
    len++;
 800b00e:	7bfb      	ldrb	r3, [r7, #15]
 800b010:	3301      	adds	r3, #1
 800b012:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	3301      	adds	r3, #1
 800b018:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d1f5      	bne.n	800b00e <USBD_GetLen+0x12>
  }

  return len;
 800b022:	7bfb      	ldrb	r3, [r7, #15]
}
 800b024:	4618      	mov	r0, r3
 800b026:	3714      	adds	r7, #20
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af00      	add	r7, sp, #0
 800b036:	60f8      	str	r0, [r7, #12]
 800b038:	60b9      	str	r1, [r7, #8]
 800b03a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2202      	movs	r2, #2
 800b040:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	68ba      	ldr	r2, [r7, #8]
 800b054:	2100      	movs	r1, #0
 800b056:	68f8      	ldr	r0, [r7, #12]
 800b058:	f003 fed1 	bl	800edfe <USBD_LL_Transmit>

  return USBD_OK;
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3710      	adds	r7, #16
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b084      	sub	sp, #16
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	60f8      	str	r0, [r7, #12]
 800b06e:	60b9      	str	r1, [r7, #8]
 800b070:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	68ba      	ldr	r2, [r7, #8]
 800b076:	2100      	movs	r1, #0
 800b078:	68f8      	ldr	r0, [r7, #12]
 800b07a:	f003 fec0 	bl	800edfe <USBD_LL_Transmit>

  return USBD_OK;
 800b07e:	2300      	movs	r3, #0
}
 800b080:	4618      	mov	r0, r3
 800b082:	3710      	adds	r7, #16
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2203      	movs	r2, #3
 800b098:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	68ba      	ldr	r2, [r7, #8]
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	68f8      	ldr	r0, [r7, #12]
 800b0b4:	f003 fec4 	bl	800ee40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0b8:	2300      	movs	r3, #0
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b0c2:	b580      	push	{r7, lr}
 800b0c4:	b084      	sub	sp, #16
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	60f8      	str	r0, [r7, #12]
 800b0ca:	60b9      	str	r1, [r7, #8]
 800b0cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	68ba      	ldr	r2, [r7, #8]
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f003 feb3 	bl	800ee40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0da:	2300      	movs	r3, #0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3710      	adds	r7, #16
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2204      	movs	r2, #4
 800b0f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f003 fe7f 	bl	800edfe <USBD_LL_Transmit>

  return USBD_OK;
 800b100:	2300      	movs	r3, #0
}
 800b102:	4618      	mov	r0, r3
 800b104:	3708      	adds	r7, #8
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b082      	sub	sp, #8
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2205      	movs	r2, #5
 800b116:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b11a:	2300      	movs	r3, #0
 800b11c:	2200      	movs	r2, #0
 800b11e:	2100      	movs	r1, #0
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f003 fe8d 	bl	800ee40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3708      	adds	r7, #8
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <__NVIC_SetPriority>:
{
 800b130:	b480      	push	{r7}
 800b132:	b083      	sub	sp, #12
 800b134:	af00      	add	r7, sp, #0
 800b136:	4603      	mov	r3, r0
 800b138:	6039      	str	r1, [r7, #0]
 800b13a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b13c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b140:	2b00      	cmp	r3, #0
 800b142:	db0a      	blt.n	800b15a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	b2da      	uxtb	r2, r3
 800b148:	490c      	ldr	r1, [pc, #48]	; (800b17c <__NVIC_SetPriority+0x4c>)
 800b14a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b14e:	0112      	lsls	r2, r2, #4
 800b150:	b2d2      	uxtb	r2, r2
 800b152:	440b      	add	r3, r1
 800b154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b158:	e00a      	b.n	800b170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	b2da      	uxtb	r2, r3
 800b15e:	4908      	ldr	r1, [pc, #32]	; (800b180 <__NVIC_SetPriority+0x50>)
 800b160:	79fb      	ldrb	r3, [r7, #7]
 800b162:	f003 030f 	and.w	r3, r3, #15
 800b166:	3b04      	subs	r3, #4
 800b168:	0112      	lsls	r2, r2, #4
 800b16a:	b2d2      	uxtb	r2, r2
 800b16c:	440b      	add	r3, r1
 800b16e:	761a      	strb	r2, [r3, #24]
}
 800b170:	bf00      	nop
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr
 800b17c:	e000e100 	.word	0xe000e100
 800b180:	e000ed00 	.word	0xe000ed00

0800b184 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b184:	b580      	push	{r7, lr}
 800b186:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b188:	4b05      	ldr	r3, [pc, #20]	; (800b1a0 <SysTick_Handler+0x1c>)
 800b18a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b18c:	f002 f85a 	bl	800d244 <xTaskGetSchedulerState>
 800b190:	4603      	mov	r3, r0
 800b192:	2b01      	cmp	r3, #1
 800b194:	d001      	beq.n	800b19a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b196:	f002 ff3f 	bl	800e018 <xPortSysTickHandler>
  }
}
 800b19a:	bf00      	nop
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	e000e010 	.word	0xe000e010

0800b1a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	f06f 0004 	mvn.w	r0, #4
 800b1ae:	f7ff ffbf 	bl	800b130 <__NVIC_SetPriority>
#endif
}
 800b1b2:	bf00      	nop
 800b1b4:	bd80      	pop	{r7, pc}
	...

0800b1b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1be:	f3ef 8305 	mrs	r3, IPSR
 800b1c2:	603b      	str	r3, [r7, #0]
  return(result);
 800b1c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d003      	beq.n	800b1d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b1ca:	f06f 0305 	mvn.w	r3, #5
 800b1ce:	607b      	str	r3, [r7, #4]
 800b1d0:	e00c      	b.n	800b1ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b1d2:	4b0a      	ldr	r3, [pc, #40]	; (800b1fc <osKernelInitialize+0x44>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d105      	bne.n	800b1e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b1da:	4b08      	ldr	r3, [pc, #32]	; (800b1fc <osKernelInitialize+0x44>)
 800b1dc:	2201      	movs	r2, #1
 800b1de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	607b      	str	r3, [r7, #4]
 800b1e4:	e002      	b.n	800b1ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b1e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b1ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b1ec:	687b      	ldr	r3, [r7, #4]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr
 800b1fa:	bf00      	nop
 800b1fc:	20000824 	.word	0x20000824

0800b200 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b200:	b580      	push	{r7, lr}
 800b202:	b082      	sub	sp, #8
 800b204:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b206:	f3ef 8305 	mrs	r3, IPSR
 800b20a:	603b      	str	r3, [r7, #0]
  return(result);
 800b20c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d003      	beq.n	800b21a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b212:	f06f 0305 	mvn.w	r3, #5
 800b216:	607b      	str	r3, [r7, #4]
 800b218:	e010      	b.n	800b23c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b21a:	4b0b      	ldr	r3, [pc, #44]	; (800b248 <osKernelStart+0x48>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d109      	bne.n	800b236 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b222:	f7ff ffbf 	bl	800b1a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b226:	4b08      	ldr	r3, [pc, #32]	; (800b248 <osKernelStart+0x48>)
 800b228:	2202      	movs	r2, #2
 800b22a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b22c:	f001 fb9e 	bl	800c96c <vTaskStartScheduler>
      stat = osOK;
 800b230:	2300      	movs	r3, #0
 800b232:	607b      	str	r3, [r7, #4]
 800b234:	e002      	b.n	800b23c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b236:	f04f 33ff 	mov.w	r3, #4294967295
 800b23a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b23c:	687b      	ldr	r3, [r7, #4]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3708      	adds	r7, #8
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
 800b246:	bf00      	nop
 800b248:	20000824 	.word	0x20000824

0800b24c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b08e      	sub	sp, #56	; 0x38
 800b250:	af04      	add	r7, sp, #16
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b258:	2300      	movs	r3, #0
 800b25a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b25c:	f3ef 8305 	mrs	r3, IPSR
 800b260:	617b      	str	r3, [r7, #20]
  return(result);
 800b262:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b264:	2b00      	cmp	r3, #0
 800b266:	d17e      	bne.n	800b366 <osThreadNew+0x11a>
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d07b      	beq.n	800b366 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b26e:	2380      	movs	r3, #128	; 0x80
 800b270:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b272:	2318      	movs	r3, #24
 800b274:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b276:	2300      	movs	r3, #0
 800b278:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b27a:	f04f 33ff 	mov.w	r3, #4294967295
 800b27e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d045      	beq.n	800b312 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d002      	beq.n	800b294 <osThreadNew+0x48>
        name = attr->name;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	699b      	ldr	r3, [r3, #24]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d002      	beq.n	800b2a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	699b      	ldr	r3, [r3, #24]
 800b2a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b2a2:	69fb      	ldr	r3, [r7, #28]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d008      	beq.n	800b2ba <osThreadNew+0x6e>
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	2b38      	cmp	r3, #56	; 0x38
 800b2ac:	d805      	bhi.n	800b2ba <osThreadNew+0x6e>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	f003 0301 	and.w	r3, r3, #1
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d001      	beq.n	800b2be <osThreadNew+0x72>
        return (NULL);
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	e054      	b.n	800b368 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	695b      	ldr	r3, [r3, #20]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d003      	beq.n	800b2ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	695b      	ldr	r3, [r3, #20]
 800b2ca:	089b      	lsrs	r3, r3, #2
 800b2cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	689b      	ldr	r3, [r3, #8]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00e      	beq.n	800b2f4 <osThreadNew+0xa8>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	2bbb      	cmp	r3, #187	; 0xbb
 800b2dc:	d90a      	bls.n	800b2f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d006      	beq.n	800b2f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	695b      	ldr	r3, [r3, #20]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d002      	beq.n	800b2f4 <osThreadNew+0xa8>
        mem = 1;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	61bb      	str	r3, [r7, #24]
 800b2f2:	e010      	b.n	800b316 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d10c      	bne.n	800b316 <osThreadNew+0xca>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d108      	bne.n	800b316 <osThreadNew+0xca>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	691b      	ldr	r3, [r3, #16]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d104      	bne.n	800b316 <osThreadNew+0xca>
          mem = 0;
 800b30c:	2300      	movs	r3, #0
 800b30e:	61bb      	str	r3, [r7, #24]
 800b310:	e001      	b.n	800b316 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b312:	2300      	movs	r3, #0
 800b314:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d110      	bne.n	800b33e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b324:	9202      	str	r2, [sp, #8]
 800b326:	9301      	str	r3, [sp, #4]
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	9300      	str	r3, [sp, #0]
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	6a3a      	ldr	r2, [r7, #32]
 800b330:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b332:	68f8      	ldr	r0, [r7, #12]
 800b334:	f001 f92e 	bl	800c594 <xTaskCreateStatic>
 800b338:	4603      	mov	r3, r0
 800b33a:	613b      	str	r3, [r7, #16]
 800b33c:	e013      	b.n	800b366 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b33e:	69bb      	ldr	r3, [r7, #24]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d110      	bne.n	800b366 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b344:	6a3b      	ldr	r3, [r7, #32]
 800b346:	b29a      	uxth	r2, r3
 800b348:	f107 0310 	add.w	r3, r7, #16
 800b34c:	9301      	str	r3, [sp, #4]
 800b34e:	69fb      	ldr	r3, [r7, #28]
 800b350:	9300      	str	r3, [sp, #0]
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	f001 f979 	bl	800c64e <xTaskCreate>
 800b35c:	4603      	mov	r3, r0
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d001      	beq.n	800b366 <osThreadNew+0x11a>
            hTask = NULL;
 800b362:	2300      	movs	r3, #0
 800b364:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b366:	693b      	ldr	r3, [r7, #16]
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3728      	adds	r7, #40	; 0x28
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b378:	f3ef 8305 	mrs	r3, IPSR
 800b37c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b37e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b380:	2b00      	cmp	r3, #0
 800b382:	d003      	beq.n	800b38c <osDelay+0x1c>
    stat = osErrorISR;
 800b384:	f06f 0305 	mvn.w	r3, #5
 800b388:	60fb      	str	r3, [r7, #12]
 800b38a:	e007      	b.n	800b39c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b38c:	2300      	movs	r3, #0
 800b38e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d002      	beq.n	800b39c <osDelay+0x2c>
      vTaskDelay(ticks);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f001 fab4 	bl	800c904 <vTaskDelay>
    }
  }

  return (stat);
 800b39c:	68fb      	ldr	r3, [r7, #12]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3710      	adds	r7, #16
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}

0800b3a6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b3a6:	b580      	push	{r7, lr}
 800b3a8:	b088      	sub	sp, #32
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3b2:	f3ef 8305 	mrs	r3, IPSR
 800b3b6:	60bb      	str	r3, [r7, #8]
  return(result);
 800b3b8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d174      	bne.n	800b4a8 <osMutexNew+0x102>
    if (attr != NULL) {
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d003      	beq.n	800b3cc <osMutexNew+0x26>
      type = attr->attr_bits;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	61bb      	str	r3, [r7, #24]
 800b3ca:	e001      	b.n	800b3d0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b3d0:	69bb      	ldr	r3, [r7, #24]
 800b3d2:	f003 0301 	and.w	r3, r3, #1
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d002      	beq.n	800b3e0 <osMutexNew+0x3a>
      rmtx = 1U;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	617b      	str	r3, [r7, #20]
 800b3de:	e001      	b.n	800b3e4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	f003 0308 	and.w	r3, r3, #8
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d15c      	bne.n	800b4a8 <osMutexNew+0x102>
      mem = -1;
 800b3ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b3f2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d015      	beq.n	800b426 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d006      	beq.n	800b410 <osMutexNew+0x6a>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	68db      	ldr	r3, [r3, #12]
 800b406:	2b4f      	cmp	r3, #79	; 0x4f
 800b408:	d902      	bls.n	800b410 <osMutexNew+0x6a>
          mem = 1;
 800b40a:	2301      	movs	r3, #1
 800b40c:	613b      	str	r3, [r7, #16]
 800b40e:	e00c      	b.n	800b42a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	689b      	ldr	r3, [r3, #8]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d108      	bne.n	800b42a <osMutexNew+0x84>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d104      	bne.n	800b42a <osMutexNew+0x84>
            mem = 0;
 800b420:	2300      	movs	r3, #0
 800b422:	613b      	str	r3, [r7, #16]
 800b424:	e001      	b.n	800b42a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800b426:	2300      	movs	r3, #0
 800b428:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d112      	bne.n	800b456 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d007      	beq.n	800b446 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	4619      	mov	r1, r3
 800b43c:	2004      	movs	r0, #4
 800b43e:	f000 fb18 	bl	800ba72 <xQueueCreateMutexStatic>
 800b442:	61f8      	str	r0, [r7, #28]
 800b444:	e016      	b.n	800b474 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	689b      	ldr	r3, [r3, #8]
 800b44a:	4619      	mov	r1, r3
 800b44c:	2001      	movs	r0, #1
 800b44e:	f000 fb10 	bl	800ba72 <xQueueCreateMutexStatic>
 800b452:	61f8      	str	r0, [r7, #28]
 800b454:	e00e      	b.n	800b474 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d10b      	bne.n	800b474 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d004      	beq.n	800b46c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b462:	2004      	movs	r0, #4
 800b464:	f000 faed 	bl	800ba42 <xQueueCreateMutex>
 800b468:	61f8      	str	r0, [r7, #28]
 800b46a:	e003      	b.n	800b474 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b46c:	2001      	movs	r0, #1
 800b46e:	f000 fae8 	bl	800ba42 <xQueueCreateMutex>
 800b472:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00c      	beq.n	800b494 <osMutexNew+0xee>
        if (attr != NULL) {
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d003      	beq.n	800b488 <osMutexNew+0xe2>
          name = attr->name;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	60fb      	str	r3, [r7, #12]
 800b486:	e001      	b.n	800b48c <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b488:	2300      	movs	r3, #0
 800b48a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b48c:	68f9      	ldr	r1, [r7, #12]
 800b48e:	69f8      	ldr	r0, [r7, #28]
 800b490:	f001 f822 	bl	800c4d8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d006      	beq.n	800b4a8 <osMutexNew+0x102>
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d003      	beq.n	800b4a8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	f043 0301 	orr.w	r3, r3, #1
 800b4a6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b4a8:	69fb      	ldr	r3, [r7, #28]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3720      	adds	r7, #32
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b086      	sub	sp, #24
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f023 0301 	bic.w	r3, r3, #1
 800b4c2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f003 0301 	and.w	r3, r3, #1
 800b4ca:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4d0:	f3ef 8305 	mrs	r3, IPSR
 800b4d4:	60bb      	str	r3, [r7, #8]
  return(result);
 800b4d6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d003      	beq.n	800b4e4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b4dc:	f06f 0305 	mvn.w	r3, #5
 800b4e0:	617b      	str	r3, [r7, #20]
 800b4e2:	e02c      	b.n	800b53e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d103      	bne.n	800b4f2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b4ea:	f06f 0303 	mvn.w	r3, #3
 800b4ee:	617b      	str	r3, [r7, #20]
 800b4f0:	e025      	b.n	800b53e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d011      	beq.n	800b51c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b4f8:	6839      	ldr	r1, [r7, #0]
 800b4fa:	6938      	ldr	r0, [r7, #16]
 800b4fc:	f000 fb08 	bl	800bb10 <xQueueTakeMutexRecursive>
 800b500:	4603      	mov	r3, r0
 800b502:	2b01      	cmp	r3, #1
 800b504:	d01b      	beq.n	800b53e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d003      	beq.n	800b514 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b50c:	f06f 0301 	mvn.w	r3, #1
 800b510:	617b      	str	r3, [r7, #20]
 800b512:	e014      	b.n	800b53e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b514:	f06f 0302 	mvn.w	r3, #2
 800b518:	617b      	str	r3, [r7, #20]
 800b51a:	e010      	b.n	800b53e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b51c:	6839      	ldr	r1, [r7, #0]
 800b51e:	6938      	ldr	r0, [r7, #16]
 800b520:	f000 fda6 	bl	800c070 <xQueueSemaphoreTake>
 800b524:	4603      	mov	r3, r0
 800b526:	2b01      	cmp	r3, #1
 800b528:	d009      	beq.n	800b53e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d003      	beq.n	800b538 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800b530:	f06f 0301 	mvn.w	r3, #1
 800b534:	617b      	str	r3, [r7, #20]
 800b536:	e002      	b.n	800b53e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b538:	f06f 0302 	mvn.w	r3, #2
 800b53c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800b53e:	697b      	ldr	r3, [r7, #20]
}
 800b540:	4618      	mov	r0, r3
 800b542:	3718      	adds	r7, #24
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b548:	b580      	push	{r7, lr}
 800b54a:	b086      	sub	sp, #24
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f023 0301 	bic.w	r3, r3, #1
 800b556:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f003 0301 	and.w	r3, r3, #1
 800b55e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b560:	2300      	movs	r3, #0
 800b562:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b564:	f3ef 8305 	mrs	r3, IPSR
 800b568:	60bb      	str	r3, [r7, #8]
  return(result);
 800b56a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d003      	beq.n	800b578 <osMutexRelease+0x30>
    stat = osErrorISR;
 800b570:	f06f 0305 	mvn.w	r3, #5
 800b574:	617b      	str	r3, [r7, #20]
 800b576:	e01f      	b.n	800b5b8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d103      	bne.n	800b586 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800b57e:	f06f 0303 	mvn.w	r3, #3
 800b582:	617b      	str	r3, [r7, #20]
 800b584:	e018      	b.n	800b5b8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d009      	beq.n	800b5a0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b58c:	6938      	ldr	r0, [r7, #16]
 800b58e:	f000 fa8b 	bl	800baa8 <xQueueGiveMutexRecursive>
 800b592:	4603      	mov	r3, r0
 800b594:	2b01      	cmp	r3, #1
 800b596:	d00f      	beq.n	800b5b8 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b598:	f06f 0302 	mvn.w	r3, #2
 800b59c:	617b      	str	r3, [r7, #20]
 800b59e:	e00b      	b.n	800b5b8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	2100      	movs	r1, #0
 800b5a6:	6938      	ldr	r0, [r7, #16]
 800b5a8:	f000 fae8 	bl	800bb7c <xQueueGenericSend>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d002      	beq.n	800b5b8 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b5b2:	f06f 0302 	mvn.w	r3, #2
 800b5b6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b5b8:	697b      	ldr	r3, [r7, #20]
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3718      	adds	r7, #24
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
	...

0800b5c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b5c4:	b480      	push	{r7}
 800b5c6:	b085      	sub	sp, #20
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	4a07      	ldr	r2, [pc, #28]	; (800b5f0 <vApplicationGetIdleTaskMemory+0x2c>)
 800b5d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	4a06      	ldr	r2, [pc, #24]	; (800b5f4 <vApplicationGetIdleTaskMemory+0x30>)
 800b5da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2280      	movs	r2, #128	; 0x80
 800b5e0:	601a      	str	r2, [r3, #0]
}
 800b5e2:	bf00      	nop
 800b5e4:	3714      	adds	r7, #20
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ec:	4770      	bx	lr
 800b5ee:	bf00      	nop
 800b5f0:	20000828 	.word	0x20000828
 800b5f4:	200008e4 	.word	0x200008e4

0800b5f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b5f8:	b480      	push	{r7}
 800b5fa:	b085      	sub	sp, #20
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	4a07      	ldr	r2, [pc, #28]	; (800b624 <vApplicationGetTimerTaskMemory+0x2c>)
 800b608:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	4a06      	ldr	r2, [pc, #24]	; (800b628 <vApplicationGetTimerTaskMemory+0x30>)
 800b60e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b616:	601a      	str	r2, [r3, #0]
}
 800b618:	bf00      	nop
 800b61a:	3714      	adds	r7, #20
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr
 800b624:	20000ae4 	.word	0x20000ae4
 800b628:	20000ba0 	.word	0x20000ba0

0800b62c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f103 0208 	add.w	r2, r3, #8
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f04f 32ff 	mov.w	r2, #4294967295
 800b644:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f103 0208 	add.w	r2, r3, #8
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f103 0208 	add.w	r2, r3, #8
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b660:	bf00      	nop
 800b662:	370c      	adds	r7, #12
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b67a:	bf00      	nop
 800b67c:	370c      	adds	r7, #12
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr

0800b686 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b686:	b480      	push	{r7}
 800b688:	b085      	sub	sp, #20
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
 800b68e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	68fa      	ldr	r2, [r7, #12]
 800b69a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	689a      	ldr	r2, [r3, #8]
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	683a      	ldr	r2, [r7, #0]
 800b6aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	683a      	ldr	r2, [r7, #0]
 800b6b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	1c5a      	adds	r2, r3, #1
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	601a      	str	r2, [r3, #0]
}
 800b6c2:	bf00      	nop
 800b6c4:	3714      	adds	r7, #20
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr

0800b6ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b6ce:	b480      	push	{r7}
 800b6d0:	b085      	sub	sp, #20
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
 800b6d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6e4:	d103      	bne.n	800b6ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	691b      	ldr	r3, [r3, #16]
 800b6ea:	60fb      	str	r3, [r7, #12]
 800b6ec:	e00c      	b.n	800b708 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	3308      	adds	r3, #8
 800b6f2:	60fb      	str	r3, [r7, #12]
 800b6f4:	e002      	b.n	800b6fc <vListInsert+0x2e>
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	60fb      	str	r3, [r7, #12]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	68ba      	ldr	r2, [r7, #8]
 800b704:	429a      	cmp	r2, r3
 800b706:	d2f6      	bcs.n	800b6f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	685a      	ldr	r2, [r3, #4]
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	683a      	ldr	r2, [r7, #0]
 800b716:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	68fa      	ldr	r2, [r7, #12]
 800b71c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	683a      	ldr	r2, [r7, #0]
 800b722:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	1c5a      	adds	r2, r3, #1
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	601a      	str	r2, [r3, #0]
}
 800b734:	bf00      	nop
 800b736:	3714      	adds	r7, #20
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr

0800b740 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b740:	b480      	push	{r7}
 800b742:	b085      	sub	sp, #20
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	691b      	ldr	r3, [r3, #16]
 800b74c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	6892      	ldr	r2, [r2, #8]
 800b756:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	687a      	ldr	r2, [r7, #4]
 800b75e:	6852      	ldr	r2, [r2, #4]
 800b760:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d103      	bne.n	800b774 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	689a      	ldr	r2, [r3, #8]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	1e5a      	subs	r2, r3, #1
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3714      	adds	r7, #20
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d10a      	bne.n	800b7be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ac:	f383 8811 	msr	BASEPRI, r3
 800b7b0:	f3bf 8f6f 	isb	sy
 800b7b4:	f3bf 8f4f 	dsb	sy
 800b7b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b7ba:	bf00      	nop
 800b7bc:	e7fe      	b.n	800b7bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b7be:	f002 fb99 	bl	800def4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681a      	ldr	r2, [r3, #0]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7ca:	68f9      	ldr	r1, [r7, #12]
 800b7cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b7ce:	fb01 f303 	mul.w	r3, r1, r3
 800b7d2:	441a      	add	r2, r3
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	68f9      	ldr	r1, [r7, #12]
 800b7f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b7f4:	fb01 f303 	mul.w	r3, r1, r3
 800b7f8:	441a      	add	r2, r3
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	22ff      	movs	r2, #255	; 0xff
 800b802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	22ff      	movs	r2, #255	; 0xff
 800b80a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d114      	bne.n	800b83e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	691b      	ldr	r3, [r3, #16]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d01a      	beq.n	800b852 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	3310      	adds	r3, #16
 800b820:	4618      	mov	r0, r3
 800b822:	f001 fb3d 	bl	800cea0 <xTaskRemoveFromEventList>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d012      	beq.n	800b852 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b82c:	4b0c      	ldr	r3, [pc, #48]	; (800b860 <xQueueGenericReset+0xcc>)
 800b82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b832:	601a      	str	r2, [r3, #0]
 800b834:	f3bf 8f4f 	dsb	sy
 800b838:	f3bf 8f6f 	isb	sy
 800b83c:	e009      	b.n	800b852 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	3310      	adds	r3, #16
 800b842:	4618      	mov	r0, r3
 800b844:	f7ff fef2 	bl	800b62c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	3324      	adds	r3, #36	; 0x24
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7ff feed 	bl	800b62c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b852:	f002 fb7f 	bl	800df54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b856:	2301      	movs	r3, #1
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	e000ed04 	.word	0xe000ed04

0800b864 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b864:	b580      	push	{r7, lr}
 800b866:	b08e      	sub	sp, #56	; 0x38
 800b868:	af02      	add	r7, sp, #8
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	607a      	str	r2, [r7, #4]
 800b870:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d10a      	bne.n	800b88e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87c:	f383 8811 	msr	BASEPRI, r3
 800b880:	f3bf 8f6f 	isb	sy
 800b884:	f3bf 8f4f 	dsb	sy
 800b888:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b88a:	bf00      	nop
 800b88c:	e7fe      	b.n	800b88c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d10a      	bne.n	800b8aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b898:	f383 8811 	msr	BASEPRI, r3
 800b89c:	f3bf 8f6f 	isb	sy
 800b8a0:	f3bf 8f4f 	dsb	sy
 800b8a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b8a6:	bf00      	nop
 800b8a8:	e7fe      	b.n	800b8a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d002      	beq.n	800b8b6 <xQueueGenericCreateStatic+0x52>
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d001      	beq.n	800b8ba <xQueueGenericCreateStatic+0x56>
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	e000      	b.n	800b8bc <xQueueGenericCreateStatic+0x58>
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d10a      	bne.n	800b8d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c4:	f383 8811 	msr	BASEPRI, r3
 800b8c8:	f3bf 8f6f 	isb	sy
 800b8cc:	f3bf 8f4f 	dsb	sy
 800b8d0:	623b      	str	r3, [r7, #32]
}
 800b8d2:	bf00      	nop
 800b8d4:	e7fe      	b.n	800b8d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d102      	bne.n	800b8e2 <xQueueGenericCreateStatic+0x7e>
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d101      	bne.n	800b8e6 <xQueueGenericCreateStatic+0x82>
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e000      	b.n	800b8e8 <xQueueGenericCreateStatic+0x84>
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d10a      	bne.n	800b902 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f0:	f383 8811 	msr	BASEPRI, r3
 800b8f4:	f3bf 8f6f 	isb	sy
 800b8f8:	f3bf 8f4f 	dsb	sy
 800b8fc:	61fb      	str	r3, [r7, #28]
}
 800b8fe:	bf00      	nop
 800b900:	e7fe      	b.n	800b900 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b902:	2350      	movs	r3, #80	; 0x50
 800b904:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	2b50      	cmp	r3, #80	; 0x50
 800b90a:	d00a      	beq.n	800b922 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b910:	f383 8811 	msr	BASEPRI, r3
 800b914:	f3bf 8f6f 	isb	sy
 800b918:	f3bf 8f4f 	dsb	sy
 800b91c:	61bb      	str	r3, [r7, #24]
}
 800b91e:	bf00      	nop
 800b920:	e7fe      	b.n	800b920 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b922:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d00d      	beq.n	800b94a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b930:	2201      	movs	r2, #1
 800b932:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b936:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93c:	9300      	str	r3, [sp, #0]
 800b93e:	4613      	mov	r3, r2
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	68b9      	ldr	r1, [r7, #8]
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f000 f83f 	bl	800b9c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3730      	adds	r7, #48	; 0x30
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b954:	b580      	push	{r7, lr}
 800b956:	b08a      	sub	sp, #40	; 0x28
 800b958:	af02      	add	r7, sp, #8
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	4613      	mov	r3, r2
 800b960:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d10a      	bne.n	800b97e <xQueueGenericCreate+0x2a>
	__asm volatile
 800b968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96c:	f383 8811 	msr	BASEPRI, r3
 800b970:	f3bf 8f6f 	isb	sy
 800b974:	f3bf 8f4f 	dsb	sy
 800b978:	613b      	str	r3, [r7, #16]
}
 800b97a:	bf00      	nop
 800b97c:	e7fe      	b.n	800b97c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	68ba      	ldr	r2, [r7, #8]
 800b982:	fb02 f303 	mul.w	r3, r2, r3
 800b986:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	3350      	adds	r3, #80	; 0x50
 800b98c:	4618      	mov	r0, r3
 800b98e:	f002 fbd3 	bl	800e138 <pvPortMalloc>
 800b992:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d011      	beq.n	800b9be <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b99a:	69bb      	ldr	r3, [r7, #24]
 800b99c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	3350      	adds	r3, #80	; 0x50
 800b9a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b9ac:	79fa      	ldrb	r2, [r7, #7]
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	9300      	str	r3, [sp, #0]
 800b9b2:	4613      	mov	r3, r2
 800b9b4:	697a      	ldr	r2, [r7, #20]
 800b9b6:	68b9      	ldr	r1, [r7, #8]
 800b9b8:	68f8      	ldr	r0, [r7, #12]
 800b9ba:	f000 f805 	bl	800b9c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b9be:	69bb      	ldr	r3, [r7, #24]
	}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3720      	adds	r7, #32
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	60b9      	str	r1, [r7, #8]
 800b9d2:	607a      	str	r2, [r7, #4]
 800b9d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d103      	bne.n	800b9e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	69ba      	ldr	r2, [r7, #24]
 800b9e0:	601a      	str	r2, [r3, #0]
 800b9e2:	e002      	b.n	800b9ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b9e4:	69bb      	ldr	r3, [r7, #24]
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	68fa      	ldr	r2, [r7, #12]
 800b9ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	68ba      	ldr	r2, [r7, #8]
 800b9f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b9f6:	2101      	movs	r1, #1
 800b9f8:	69b8      	ldr	r0, [r7, #24]
 800b9fa:	f7ff fecb 	bl	800b794 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	78fa      	ldrb	r2, [r7, #3]
 800ba02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ba06:	bf00      	nop
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b082      	sub	sp, #8
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d00e      	beq.n	800ba3a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ba2e:	2300      	movs	r3, #0
 800ba30:	2200      	movs	r2, #0
 800ba32:	2100      	movs	r1, #0
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f000 f8a1 	bl	800bb7c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ba3a:	bf00      	nop
 800ba3c:	3708      	adds	r7, #8
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ba42:	b580      	push	{r7, lr}
 800ba44:	b086      	sub	sp, #24
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	4603      	mov	r3, r0
 800ba4a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	617b      	str	r3, [r7, #20]
 800ba50:	2300      	movs	r3, #0
 800ba52:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ba54:	79fb      	ldrb	r3, [r7, #7]
 800ba56:	461a      	mov	r2, r3
 800ba58:	6939      	ldr	r1, [r7, #16]
 800ba5a:	6978      	ldr	r0, [r7, #20]
 800ba5c:	f7ff ff7a 	bl	800b954 <xQueueGenericCreate>
 800ba60:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ba62:	68f8      	ldr	r0, [r7, #12]
 800ba64:	f7ff ffd3 	bl	800ba0e <prvInitialiseMutex>

		return xNewQueue;
 800ba68:	68fb      	ldr	r3, [r7, #12]
	}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3718      	adds	r7, #24
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b088      	sub	sp, #32
 800ba76:	af02      	add	r7, sp, #8
 800ba78:	4603      	mov	r3, r0
 800ba7a:	6039      	str	r1, [r7, #0]
 800ba7c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	617b      	str	r3, [r7, #20]
 800ba82:	2300      	movs	r3, #0
 800ba84:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ba86:	79fb      	ldrb	r3, [r7, #7]
 800ba88:	9300      	str	r3, [sp, #0]
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	6939      	ldr	r1, [r7, #16]
 800ba90:	6978      	ldr	r0, [r7, #20]
 800ba92:	f7ff fee7 	bl	800b864 <xQueueGenericCreateStatic>
 800ba96:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f7ff ffb8 	bl	800ba0e <prvInitialiseMutex>

		return xNewQueue;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
	}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3718      	adds	r7, #24
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800baa8:	b590      	push	{r4, r7, lr}
 800baaa:	b087      	sub	sp, #28
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d10a      	bne.n	800bad0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800baba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800babe:	f383 8811 	msr	BASEPRI, r3
 800bac2:	f3bf 8f6f 	isb	sy
 800bac6:	f3bf 8f4f 	dsb	sy
 800baca:	60fb      	str	r3, [r7, #12]
}
 800bacc:	bf00      	nop
 800bace:	e7fe      	b.n	800bace <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	689c      	ldr	r4, [r3, #8]
 800bad4:	f001 fba6 	bl	800d224 <xTaskGetCurrentTaskHandle>
 800bad8:	4603      	mov	r3, r0
 800bada:	429c      	cmp	r4, r3
 800badc:	d111      	bne.n	800bb02 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	68db      	ldr	r3, [r3, #12]
 800bae2:	1e5a      	subs	r2, r3, #1
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d105      	bne.n	800bafc <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800baf0:	2300      	movs	r3, #0
 800baf2:	2200      	movs	r2, #0
 800baf4:	2100      	movs	r1, #0
 800baf6:	6938      	ldr	r0, [r7, #16]
 800baf8:	f000 f840 	bl	800bb7c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800bafc:	2301      	movs	r3, #1
 800bafe:	617b      	str	r3, [r7, #20]
 800bb00:	e001      	b.n	800bb06 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800bb02:	2300      	movs	r3, #0
 800bb04:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800bb06:	697b      	ldr	r3, [r7, #20]
	}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	371c      	adds	r7, #28
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd90      	pop	{r4, r7, pc}

0800bb10 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800bb10:	b590      	push	{r4, r7, lr}
 800bb12:	b087      	sub	sp, #28
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d10a      	bne.n	800bb3a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800bb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb28:	f383 8811 	msr	BASEPRI, r3
 800bb2c:	f3bf 8f6f 	isb	sy
 800bb30:	f3bf 8f4f 	dsb	sy
 800bb34:	60fb      	str	r3, [r7, #12]
}
 800bb36:	bf00      	nop
 800bb38:	e7fe      	b.n	800bb38 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	689c      	ldr	r4, [r3, #8]
 800bb3e:	f001 fb71 	bl	800d224 <xTaskGetCurrentTaskHandle>
 800bb42:	4603      	mov	r3, r0
 800bb44:	429c      	cmp	r4, r3
 800bb46:	d107      	bne.n	800bb58 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	1c5a      	adds	r2, r3, #1
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800bb52:	2301      	movs	r3, #1
 800bb54:	617b      	str	r3, [r7, #20]
 800bb56:	e00c      	b.n	800bb72 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800bb58:	6839      	ldr	r1, [r7, #0]
 800bb5a:	6938      	ldr	r0, [r7, #16]
 800bb5c:	f000 fa88 	bl	800c070 <xQueueSemaphoreTake>
 800bb60:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d004      	beq.n	800bb72 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	1c5a      	adds	r2, r3, #1
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800bb72:	697b      	ldr	r3, [r7, #20]
	}
 800bb74:	4618      	mov	r0, r3
 800bb76:	371c      	adds	r7, #28
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd90      	pop	{r4, r7, pc}

0800bb7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b08e      	sub	sp, #56	; 0x38
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	607a      	str	r2, [r7, #4]
 800bb88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d10a      	bne.n	800bbae <xQueueGenericSend+0x32>
	__asm volatile
 800bb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9c:	f383 8811 	msr	BASEPRI, r3
 800bba0:	f3bf 8f6f 	isb	sy
 800bba4:	f3bf 8f4f 	dsb	sy
 800bba8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bbaa:	bf00      	nop
 800bbac:	e7fe      	b.n	800bbac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d103      	bne.n	800bbbc <xQueueGenericSend+0x40>
 800bbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d101      	bne.n	800bbc0 <xQueueGenericSend+0x44>
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	e000      	b.n	800bbc2 <xQueueGenericSend+0x46>
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d10a      	bne.n	800bbdc <xQueueGenericSend+0x60>
	__asm volatile
 800bbc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbca:	f383 8811 	msr	BASEPRI, r3
 800bbce:	f3bf 8f6f 	isb	sy
 800bbd2:	f3bf 8f4f 	dsb	sy
 800bbd6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bbd8:	bf00      	nop
 800bbda:	e7fe      	b.n	800bbda <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	2b02      	cmp	r3, #2
 800bbe0:	d103      	bne.n	800bbea <xQueueGenericSend+0x6e>
 800bbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d101      	bne.n	800bbee <xQueueGenericSend+0x72>
 800bbea:	2301      	movs	r3, #1
 800bbec:	e000      	b.n	800bbf0 <xQueueGenericSend+0x74>
 800bbee:	2300      	movs	r3, #0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d10a      	bne.n	800bc0a <xQueueGenericSend+0x8e>
	__asm volatile
 800bbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf8:	f383 8811 	msr	BASEPRI, r3
 800bbfc:	f3bf 8f6f 	isb	sy
 800bc00:	f3bf 8f4f 	dsb	sy
 800bc04:	623b      	str	r3, [r7, #32]
}
 800bc06:	bf00      	nop
 800bc08:	e7fe      	b.n	800bc08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc0a:	f001 fb1b 	bl	800d244 <xTaskGetSchedulerState>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d102      	bne.n	800bc1a <xQueueGenericSend+0x9e>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d101      	bne.n	800bc1e <xQueueGenericSend+0xa2>
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	e000      	b.n	800bc20 <xQueueGenericSend+0xa4>
 800bc1e:	2300      	movs	r3, #0
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d10a      	bne.n	800bc3a <xQueueGenericSend+0xbe>
	__asm volatile
 800bc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc28:	f383 8811 	msr	BASEPRI, r3
 800bc2c:	f3bf 8f6f 	isb	sy
 800bc30:	f3bf 8f4f 	dsb	sy
 800bc34:	61fb      	str	r3, [r7, #28]
}
 800bc36:	bf00      	nop
 800bc38:	e7fe      	b.n	800bc38 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc3a:	f002 f95b 	bl	800def4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d302      	bcc.n	800bc50 <xQueueGenericSend+0xd4>
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	2b02      	cmp	r3, #2
 800bc4e:	d129      	bne.n	800bca4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc50:	683a      	ldr	r2, [r7, #0]
 800bc52:	68b9      	ldr	r1, [r7, #8]
 800bc54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc56:	f000 fb2f 	bl	800c2b8 <prvCopyDataToQueue>
 800bc5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d010      	beq.n	800bc86 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc66:	3324      	adds	r3, #36	; 0x24
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f001 f919 	bl	800cea0 <xTaskRemoveFromEventList>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d013      	beq.n	800bc9c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bc74:	4b3f      	ldr	r3, [pc, #252]	; (800bd74 <xQueueGenericSend+0x1f8>)
 800bc76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc7a:	601a      	str	r2, [r3, #0]
 800bc7c:	f3bf 8f4f 	dsb	sy
 800bc80:	f3bf 8f6f 	isb	sy
 800bc84:	e00a      	b.n	800bc9c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d007      	beq.n	800bc9c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bc8c:	4b39      	ldr	r3, [pc, #228]	; (800bd74 <xQueueGenericSend+0x1f8>)
 800bc8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc92:	601a      	str	r2, [r3, #0]
 800bc94:	f3bf 8f4f 	dsb	sy
 800bc98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bc9c:	f002 f95a 	bl	800df54 <vPortExitCritical>
				return pdPASS;
 800bca0:	2301      	movs	r3, #1
 800bca2:	e063      	b.n	800bd6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d103      	bne.n	800bcb2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bcaa:	f002 f953 	bl	800df54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	e05c      	b.n	800bd6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bcb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d106      	bne.n	800bcc6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bcb8:	f107 0314 	add.w	r3, r7, #20
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f001 f953 	bl	800cf68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bcc6:	f002 f945 	bl	800df54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bcca:	f000 febf 	bl	800ca4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bcce:	f002 f911 	bl	800def4 <vPortEnterCritical>
 800bcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcd8:	b25b      	sxtb	r3, r3
 800bcda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcde:	d103      	bne.n	800bce8 <xQueueGenericSend+0x16c>
 800bce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce2:	2200      	movs	r2, #0
 800bce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcee:	b25b      	sxtb	r3, r3
 800bcf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcf4:	d103      	bne.n	800bcfe <xQueueGenericSend+0x182>
 800bcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcfe:	f002 f929 	bl	800df54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd02:	1d3a      	adds	r2, r7, #4
 800bd04:	f107 0314 	add.w	r3, r7, #20
 800bd08:	4611      	mov	r1, r2
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f001 f942 	bl	800cf94 <xTaskCheckForTimeOut>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d124      	bne.n	800bd60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bd16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd18:	f000 fbc6 	bl	800c4a8 <prvIsQueueFull>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d018      	beq.n	800bd54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd24:	3310      	adds	r3, #16
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	4611      	mov	r1, r2
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f001 f868 	bl	800ce00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bd30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd32:	f000 fb51 	bl	800c3d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bd36:	f000 fe97 	bl	800ca68 <xTaskResumeAll>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	f47f af7c 	bne.w	800bc3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bd42:	4b0c      	ldr	r3, [pc, #48]	; (800bd74 <xQueueGenericSend+0x1f8>)
 800bd44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd48:	601a      	str	r2, [r3, #0]
 800bd4a:	f3bf 8f4f 	dsb	sy
 800bd4e:	f3bf 8f6f 	isb	sy
 800bd52:	e772      	b.n	800bc3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bd54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd56:	f000 fb3f 	bl	800c3d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd5a:	f000 fe85 	bl	800ca68 <xTaskResumeAll>
 800bd5e:	e76c      	b.n	800bc3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bd60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd62:	f000 fb39 	bl	800c3d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd66:	f000 fe7f 	bl	800ca68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bd6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3738      	adds	r7, #56	; 0x38
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}
 800bd74:	e000ed04 	.word	0xe000ed04

0800bd78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b090      	sub	sp, #64	; 0x40
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	607a      	str	r2, [r7, #4]
 800bd84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d10a      	bne.n	800bda6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd94:	f383 8811 	msr	BASEPRI, r3
 800bd98:	f3bf 8f6f 	isb	sy
 800bd9c:	f3bf 8f4f 	dsb	sy
 800bda0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bda2:	bf00      	nop
 800bda4:	e7fe      	b.n	800bda4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d103      	bne.n	800bdb4 <xQueueGenericSendFromISR+0x3c>
 800bdac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d101      	bne.n	800bdb8 <xQueueGenericSendFromISR+0x40>
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	e000      	b.n	800bdba <xQueueGenericSendFromISR+0x42>
 800bdb8:	2300      	movs	r3, #0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d10a      	bne.n	800bdd4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bdbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc2:	f383 8811 	msr	BASEPRI, r3
 800bdc6:	f3bf 8f6f 	isb	sy
 800bdca:	f3bf 8f4f 	dsb	sy
 800bdce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bdd0:	bf00      	nop
 800bdd2:	e7fe      	b.n	800bdd2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	2b02      	cmp	r3, #2
 800bdd8:	d103      	bne.n	800bde2 <xQueueGenericSendFromISR+0x6a>
 800bdda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d101      	bne.n	800bde6 <xQueueGenericSendFromISR+0x6e>
 800bde2:	2301      	movs	r3, #1
 800bde4:	e000      	b.n	800bde8 <xQueueGenericSendFromISR+0x70>
 800bde6:	2300      	movs	r3, #0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d10a      	bne.n	800be02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf0:	f383 8811 	msr	BASEPRI, r3
 800bdf4:	f3bf 8f6f 	isb	sy
 800bdf8:	f3bf 8f4f 	dsb	sy
 800bdfc:	623b      	str	r3, [r7, #32]
}
 800bdfe:	bf00      	nop
 800be00:	e7fe      	b.n	800be00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be02:	f002 f959 	bl	800e0b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800be06:	f3ef 8211 	mrs	r2, BASEPRI
 800be0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0e:	f383 8811 	msr	BASEPRI, r3
 800be12:	f3bf 8f6f 	isb	sy
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	61fa      	str	r2, [r7, #28]
 800be1c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800be1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d302      	bcc.n	800be34 <xQueueGenericSendFromISR+0xbc>
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	2b02      	cmp	r3, #2
 800be32:	d12f      	bne.n	800be94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800be34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be44:	683a      	ldr	r2, [r7, #0]
 800be46:	68b9      	ldr	r1, [r7, #8]
 800be48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be4a:	f000 fa35 	bl	800c2b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800be4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800be52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be56:	d112      	bne.n	800be7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d016      	beq.n	800be8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be62:	3324      	adds	r3, #36	; 0x24
 800be64:	4618      	mov	r0, r3
 800be66:	f001 f81b 	bl	800cea0 <xTaskRemoveFromEventList>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d00e      	beq.n	800be8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d00b      	beq.n	800be8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2201      	movs	r2, #1
 800be7a:	601a      	str	r2, [r3, #0]
 800be7c:	e007      	b.n	800be8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800be7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800be82:	3301      	adds	r3, #1
 800be84:	b2db      	uxtb	r3, r3
 800be86:	b25a      	sxtb	r2, r3
 800be88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800be8e:	2301      	movs	r3, #1
 800be90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800be92:	e001      	b.n	800be98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800be94:	2300      	movs	r3, #0
 800be96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be9a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bea2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3740      	adds	r7, #64	; 0x40
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
	...

0800beb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b08c      	sub	sp, #48	; 0x30
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bebc:	2300      	movs	r3, #0
 800bebe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d10a      	bne.n	800bee0 <xQueueReceive+0x30>
	__asm volatile
 800beca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bece:	f383 8811 	msr	BASEPRI, r3
 800bed2:	f3bf 8f6f 	isb	sy
 800bed6:	f3bf 8f4f 	dsb	sy
 800beda:	623b      	str	r3, [r7, #32]
}
 800bedc:	bf00      	nop
 800bede:	e7fe      	b.n	800bede <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d103      	bne.n	800beee <xQueueReceive+0x3e>
 800bee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beea:	2b00      	cmp	r3, #0
 800beec:	d101      	bne.n	800bef2 <xQueueReceive+0x42>
 800beee:	2301      	movs	r3, #1
 800bef0:	e000      	b.n	800bef4 <xQueueReceive+0x44>
 800bef2:	2300      	movs	r3, #0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10a      	bne.n	800bf0e <xQueueReceive+0x5e>
	__asm volatile
 800bef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befc:	f383 8811 	msr	BASEPRI, r3
 800bf00:	f3bf 8f6f 	isb	sy
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	61fb      	str	r3, [r7, #28]
}
 800bf0a:	bf00      	nop
 800bf0c:	e7fe      	b.n	800bf0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf0e:	f001 f999 	bl	800d244 <xTaskGetSchedulerState>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d102      	bne.n	800bf1e <xQueueReceive+0x6e>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d101      	bne.n	800bf22 <xQueueReceive+0x72>
 800bf1e:	2301      	movs	r3, #1
 800bf20:	e000      	b.n	800bf24 <xQueueReceive+0x74>
 800bf22:	2300      	movs	r3, #0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d10a      	bne.n	800bf3e <xQueueReceive+0x8e>
	__asm volatile
 800bf28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2c:	f383 8811 	msr	BASEPRI, r3
 800bf30:	f3bf 8f6f 	isb	sy
 800bf34:	f3bf 8f4f 	dsb	sy
 800bf38:	61bb      	str	r3, [r7, #24]
}
 800bf3a:	bf00      	nop
 800bf3c:	e7fe      	b.n	800bf3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf3e:	f001 ffd9 	bl	800def4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d01f      	beq.n	800bf8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bf4e:	68b9      	ldr	r1, [r7, #8]
 800bf50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf52:	f000 fa1b 	bl	800c38c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf58:	1e5a      	subs	r2, r3, #1
 800bf5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf60:	691b      	ldr	r3, [r3, #16]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d00f      	beq.n	800bf86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf68:	3310      	adds	r3, #16
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f000 ff98 	bl	800cea0 <xTaskRemoveFromEventList>
 800bf70:	4603      	mov	r3, r0
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d007      	beq.n	800bf86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bf76:	4b3d      	ldr	r3, [pc, #244]	; (800c06c <xQueueReceive+0x1bc>)
 800bf78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf7c:	601a      	str	r2, [r3, #0]
 800bf7e:	f3bf 8f4f 	dsb	sy
 800bf82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bf86:	f001 ffe5 	bl	800df54 <vPortExitCritical>
				return pdPASS;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	e069      	b.n	800c062 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d103      	bne.n	800bf9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf94:	f001 ffde 	bl	800df54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	e062      	b.n	800c062 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d106      	bne.n	800bfb0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bfa2:	f107 0310 	add.w	r3, r7, #16
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f000 ffde 	bl	800cf68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bfac:	2301      	movs	r3, #1
 800bfae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bfb0:	f001 ffd0 	bl	800df54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bfb4:	f000 fd4a 	bl	800ca4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bfb8:	f001 ff9c 	bl	800def4 <vPortEnterCritical>
 800bfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfc2:	b25b      	sxtb	r3, r3
 800bfc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc8:	d103      	bne.n	800bfd2 <xQueueReceive+0x122>
 800bfca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfd8:	b25b      	sxtb	r3, r3
 800bfda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfde:	d103      	bne.n	800bfe8 <xQueueReceive+0x138>
 800bfe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfe8:	f001 ffb4 	bl	800df54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bfec:	1d3a      	adds	r2, r7, #4
 800bfee:	f107 0310 	add.w	r3, r7, #16
 800bff2:	4611      	mov	r1, r2
 800bff4:	4618      	mov	r0, r3
 800bff6:	f000 ffcd 	bl	800cf94 <xTaskCheckForTimeOut>
 800bffa:	4603      	mov	r3, r0
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d123      	bne.n	800c048 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c002:	f000 fa3b 	bl	800c47c <prvIsQueueEmpty>
 800c006:	4603      	mov	r3, r0
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d017      	beq.n	800c03c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00e:	3324      	adds	r3, #36	; 0x24
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	4611      	mov	r1, r2
 800c014:	4618      	mov	r0, r3
 800c016:	f000 fef3 	bl	800ce00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c01a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c01c:	f000 f9dc 	bl	800c3d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c020:	f000 fd22 	bl	800ca68 <xTaskResumeAll>
 800c024:	4603      	mov	r3, r0
 800c026:	2b00      	cmp	r3, #0
 800c028:	d189      	bne.n	800bf3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c02a:	4b10      	ldr	r3, [pc, #64]	; (800c06c <xQueueReceive+0x1bc>)
 800c02c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c030:	601a      	str	r2, [r3, #0]
 800c032:	f3bf 8f4f 	dsb	sy
 800c036:	f3bf 8f6f 	isb	sy
 800c03a:	e780      	b.n	800bf3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c03c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c03e:	f000 f9cb 	bl	800c3d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c042:	f000 fd11 	bl	800ca68 <xTaskResumeAll>
 800c046:	e77a      	b.n	800bf3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c04a:	f000 f9c5 	bl	800c3d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c04e:	f000 fd0b 	bl	800ca68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c054:	f000 fa12 	bl	800c47c <prvIsQueueEmpty>
 800c058:	4603      	mov	r3, r0
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	f43f af6f 	beq.w	800bf3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c060:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c062:	4618      	mov	r0, r3
 800c064:	3730      	adds	r7, #48	; 0x30
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	e000ed04 	.word	0xe000ed04

0800c070 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b08e      	sub	sp, #56	; 0x38
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c07a:	2300      	movs	r3, #0
 800c07c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c082:	2300      	movs	r3, #0
 800c084:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d10a      	bne.n	800c0a2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c090:	f383 8811 	msr	BASEPRI, r3
 800c094:	f3bf 8f6f 	isb	sy
 800c098:	f3bf 8f4f 	dsb	sy
 800c09c:	623b      	str	r3, [r7, #32]
}
 800c09e:	bf00      	nop
 800c0a0:	e7fe      	b.n	800c0a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d00a      	beq.n	800c0c0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ae:	f383 8811 	msr	BASEPRI, r3
 800c0b2:	f3bf 8f6f 	isb	sy
 800c0b6:	f3bf 8f4f 	dsb	sy
 800c0ba:	61fb      	str	r3, [r7, #28]
}
 800c0bc:	bf00      	nop
 800c0be:	e7fe      	b.n	800c0be <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0c0:	f001 f8c0 	bl	800d244 <xTaskGetSchedulerState>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d102      	bne.n	800c0d0 <xQueueSemaphoreTake+0x60>
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d101      	bne.n	800c0d4 <xQueueSemaphoreTake+0x64>
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	e000      	b.n	800c0d6 <xQueueSemaphoreTake+0x66>
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d10a      	bne.n	800c0f0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0de:	f383 8811 	msr	BASEPRI, r3
 800c0e2:	f3bf 8f6f 	isb	sy
 800c0e6:	f3bf 8f4f 	dsb	sy
 800c0ea:	61bb      	str	r3, [r7, #24]
}
 800c0ec:	bf00      	nop
 800c0ee:	e7fe      	b.n	800c0ee <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c0f0:	f001 ff00 	bl	800def4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0f8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d024      	beq.n	800c14a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c102:	1e5a      	subs	r2, r3, #1
 800c104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c106:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d104      	bne.n	800c11a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c110:	f001 fa0e 	bl	800d530 <pvTaskIncrementMutexHeldCount>
 800c114:	4602      	mov	r2, r0
 800c116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c118:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11c:	691b      	ldr	r3, [r3, #16]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d00f      	beq.n	800c142 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c124:	3310      	adds	r3, #16
 800c126:	4618      	mov	r0, r3
 800c128:	f000 feba 	bl	800cea0 <xTaskRemoveFromEventList>
 800c12c:	4603      	mov	r3, r0
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d007      	beq.n	800c142 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c132:	4b54      	ldr	r3, [pc, #336]	; (800c284 <xQueueSemaphoreTake+0x214>)
 800c134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c138:	601a      	str	r2, [r3, #0]
 800c13a:	f3bf 8f4f 	dsb	sy
 800c13e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c142:	f001 ff07 	bl	800df54 <vPortExitCritical>
				return pdPASS;
 800c146:	2301      	movs	r3, #1
 800c148:	e097      	b.n	800c27a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d111      	bne.n	800c174 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c152:	2b00      	cmp	r3, #0
 800c154:	d00a      	beq.n	800c16c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c15a:	f383 8811 	msr	BASEPRI, r3
 800c15e:	f3bf 8f6f 	isb	sy
 800c162:	f3bf 8f4f 	dsb	sy
 800c166:	617b      	str	r3, [r7, #20]
}
 800c168:	bf00      	nop
 800c16a:	e7fe      	b.n	800c16a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c16c:	f001 fef2 	bl	800df54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c170:	2300      	movs	r3, #0
 800c172:	e082      	b.n	800c27a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c176:	2b00      	cmp	r3, #0
 800c178:	d106      	bne.n	800c188 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c17a:	f107 030c 	add.w	r3, r7, #12
 800c17e:	4618      	mov	r0, r3
 800c180:	f000 fef2 	bl	800cf68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c184:	2301      	movs	r3, #1
 800c186:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c188:	f001 fee4 	bl	800df54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c18c:	f000 fc5e 	bl	800ca4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c190:	f001 feb0 	bl	800def4 <vPortEnterCritical>
 800c194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c196:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c19a:	b25b      	sxtb	r3, r3
 800c19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1a0:	d103      	bne.n	800c1aa <xQueueSemaphoreTake+0x13a>
 800c1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1b0:	b25b      	sxtb	r3, r3
 800c1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1b6:	d103      	bne.n	800c1c0 <xQueueSemaphoreTake+0x150>
 800c1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1c0:	f001 fec8 	bl	800df54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c1c4:	463a      	mov	r2, r7
 800c1c6:	f107 030c 	add.w	r3, r7, #12
 800c1ca:	4611      	mov	r1, r2
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f000 fee1 	bl	800cf94 <xTaskCheckForTimeOut>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d132      	bne.n	800c23e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c1d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1da:	f000 f94f 	bl	800c47c <prvIsQueueEmpty>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d026      	beq.n	800c232 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d109      	bne.n	800c200 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c1ec:	f001 fe82 	bl	800def4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f001 f843 	bl	800d280 <xTaskPriorityInherit>
 800c1fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c1fc:	f001 feaa 	bl	800df54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c202:	3324      	adds	r3, #36	; 0x24
 800c204:	683a      	ldr	r2, [r7, #0]
 800c206:	4611      	mov	r1, r2
 800c208:	4618      	mov	r0, r3
 800c20a:	f000 fdf9 	bl	800ce00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c20e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c210:	f000 f8e2 	bl	800c3d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c214:	f000 fc28 	bl	800ca68 <xTaskResumeAll>
 800c218:	4603      	mov	r3, r0
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	f47f af68 	bne.w	800c0f0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c220:	4b18      	ldr	r3, [pc, #96]	; (800c284 <xQueueSemaphoreTake+0x214>)
 800c222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c226:	601a      	str	r2, [r3, #0]
 800c228:	f3bf 8f4f 	dsb	sy
 800c22c:	f3bf 8f6f 	isb	sy
 800c230:	e75e      	b.n	800c0f0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c234:	f000 f8d0 	bl	800c3d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c238:	f000 fc16 	bl	800ca68 <xTaskResumeAll>
 800c23c:	e758      	b.n	800c0f0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c23e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c240:	f000 f8ca 	bl	800c3d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c244:	f000 fc10 	bl	800ca68 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c248:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c24a:	f000 f917 	bl	800c47c <prvIsQueueEmpty>
 800c24e:	4603      	mov	r3, r0
 800c250:	2b00      	cmp	r3, #0
 800c252:	f43f af4d 	beq.w	800c0f0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d00d      	beq.n	800c278 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c25c:	f001 fe4a 	bl	800def4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c260:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c262:	f000 f811 	bl	800c288 <prvGetDisinheritPriorityAfterTimeout>
 800c266:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26a:	689b      	ldr	r3, [r3, #8]
 800c26c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c26e:	4618      	mov	r0, r3
 800c270:	f001 f8dc 	bl	800d42c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c274:	f001 fe6e 	bl	800df54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c278:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3738      	adds	r7, #56	; 0x38
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
 800c282:	bf00      	nop
 800c284:	e000ed04 	.word	0xe000ed04

0800c288 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c294:	2b00      	cmp	r3, #0
 800c296:	d006      	beq.n	800c2a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c2a2:	60fb      	str	r3, [r7, #12]
 800c2a4:	e001      	b.n	800c2aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
	}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3714      	adds	r7, #20
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b086      	sub	sp, #24
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d10d      	bne.n	800c2f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d14d      	bne.n	800c37a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	689b      	ldr	r3, [r3, #8]
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f001 f834 	bl	800d350 <xTaskPriorityDisinherit>
 800c2e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	609a      	str	r2, [r3, #8]
 800c2f0:	e043      	b.n	800c37a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d119      	bne.n	800c32c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6858      	ldr	r0, [r3, #4]
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c300:	461a      	mov	r2, r3
 800c302:	68b9      	ldr	r1, [r7, #8]
 800c304:	f002 fe62 	bl	800efcc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	685a      	ldr	r2, [r3, #4]
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c310:	441a      	add	r2, r3
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	685a      	ldr	r2, [r3, #4]
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	689b      	ldr	r3, [r3, #8]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d32b      	bcc.n	800c37a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	605a      	str	r2, [r3, #4]
 800c32a:	e026      	b.n	800c37a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	68d8      	ldr	r0, [r3, #12]
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c334:	461a      	mov	r2, r3
 800c336:	68b9      	ldr	r1, [r7, #8]
 800c338:	f002 fe48 	bl	800efcc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	68da      	ldr	r2, [r3, #12]
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c344:	425b      	negs	r3, r3
 800c346:	441a      	add	r2, r3
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	68da      	ldr	r2, [r3, #12]
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	429a      	cmp	r2, r3
 800c356:	d207      	bcs.n	800c368 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	689a      	ldr	r2, [r3, #8]
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c360:	425b      	negs	r3, r3
 800c362:	441a      	add	r2, r3
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	d105      	bne.n	800c37a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d002      	beq.n	800c37a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	3b01      	subs	r3, #1
 800c378:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	1c5a      	adds	r2, r3, #1
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c382:	697b      	ldr	r3, [r7, #20]
}
 800c384:	4618      	mov	r0, r3
 800c386:	3718      	adds	r7, #24
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b082      	sub	sp, #8
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d018      	beq.n	800c3d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	68da      	ldr	r2, [r3, #12]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3a6:	441a      	add	r2, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	68da      	ldr	r2, [r3, #12]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d303      	bcc.n	800c3c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	68d9      	ldr	r1, [r3, #12]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	6838      	ldr	r0, [r7, #0]
 800c3cc:	f002 fdfe 	bl	800efcc <memcpy>
	}
}
 800c3d0:	bf00      	nop
 800c3d2:	3708      	adds	r7, #8
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c3e0:	f001 fd88 	bl	800def4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c3ec:	e011      	b.n	800c412 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d012      	beq.n	800c41c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	3324      	adds	r3, #36	; 0x24
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f000 fd50 	bl	800cea0 <xTaskRemoveFromEventList>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d001      	beq.n	800c40a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c406:	f000 fe27 	bl	800d058 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c40a:	7bfb      	ldrb	r3, [r7, #15]
 800c40c:	3b01      	subs	r3, #1
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c416:	2b00      	cmp	r3, #0
 800c418:	dce9      	bgt.n	800c3ee <prvUnlockQueue+0x16>
 800c41a:	e000      	b.n	800c41e <prvUnlockQueue+0x46>
					break;
 800c41c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	22ff      	movs	r2, #255	; 0xff
 800c422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c426:	f001 fd95 	bl	800df54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c42a:	f001 fd63 	bl	800def4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c434:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c436:	e011      	b.n	800c45c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	691b      	ldr	r3, [r3, #16]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d012      	beq.n	800c466 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	3310      	adds	r3, #16
 800c444:	4618      	mov	r0, r3
 800c446:	f000 fd2b 	bl	800cea0 <xTaskRemoveFromEventList>
 800c44a:	4603      	mov	r3, r0
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d001      	beq.n	800c454 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c450:	f000 fe02 	bl	800d058 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c454:	7bbb      	ldrb	r3, [r7, #14]
 800c456:	3b01      	subs	r3, #1
 800c458:	b2db      	uxtb	r3, r3
 800c45a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c45c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c460:	2b00      	cmp	r3, #0
 800c462:	dce9      	bgt.n	800c438 <prvUnlockQueue+0x60>
 800c464:	e000      	b.n	800c468 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c466:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	22ff      	movs	r2, #255	; 0xff
 800c46c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c470:	f001 fd70 	bl	800df54 <vPortExitCritical>
}
 800c474:	bf00      	nop
 800c476:	3710      	adds	r7, #16
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c484:	f001 fd36 	bl	800def4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d102      	bne.n	800c496 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c490:	2301      	movs	r3, #1
 800c492:	60fb      	str	r3, [r7, #12]
 800c494:	e001      	b.n	800c49a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c496:	2300      	movs	r3, #0
 800c498:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c49a:	f001 fd5b 	bl	800df54 <vPortExitCritical>

	return xReturn;
 800c49e:	68fb      	ldr	r3, [r7, #12]
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3710      	adds	r7, #16
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c4b0:	f001 fd20 	bl	800def4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d102      	bne.n	800c4c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	60fb      	str	r3, [r7, #12]
 800c4c4:	e001      	b.n	800c4ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c4ca:	f001 fd43 	bl	800df54 <vPortExitCritical>

	return xReturn;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3710      	adds	r7, #16
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	60fb      	str	r3, [r7, #12]
 800c4e6:	e014      	b.n	800c512 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c4e8:	4a0f      	ldr	r2, [pc, #60]	; (800c528 <vQueueAddToRegistry+0x50>)
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d10b      	bne.n	800c50c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c4f4:	490c      	ldr	r1, [pc, #48]	; (800c528 <vQueueAddToRegistry+0x50>)
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	683a      	ldr	r2, [r7, #0]
 800c4fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c4fe:	4a0a      	ldr	r2, [pc, #40]	; (800c528 <vQueueAddToRegistry+0x50>)
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	00db      	lsls	r3, r3, #3
 800c504:	4413      	add	r3, r2
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c50a:	e006      	b.n	800c51a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	3301      	adds	r3, #1
 800c510:	60fb      	str	r3, [r7, #12]
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2b07      	cmp	r3, #7
 800c516:	d9e7      	bls.n	800c4e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c518:	bf00      	nop
 800c51a:	bf00      	nop
 800c51c:	3714      	adds	r7, #20
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr
 800c526:	bf00      	nop
 800c528:	20000fa0 	.word	0x20000fa0

0800c52c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b086      	sub	sp, #24
 800c530:	af00      	add	r7, sp, #0
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	60b9      	str	r1, [r7, #8]
 800c536:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c53c:	f001 fcda 	bl	800def4 <vPortEnterCritical>
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c546:	b25b      	sxtb	r3, r3
 800c548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c54c:	d103      	bne.n	800c556 <vQueueWaitForMessageRestricted+0x2a>
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	2200      	movs	r2, #0
 800c552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c55c:	b25b      	sxtb	r3, r3
 800c55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c562:	d103      	bne.n	800c56c <vQueueWaitForMessageRestricted+0x40>
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	2200      	movs	r2, #0
 800c568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c56c:	f001 fcf2 	bl	800df54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c574:	2b00      	cmp	r3, #0
 800c576:	d106      	bne.n	800c586 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	3324      	adds	r3, #36	; 0x24
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	68b9      	ldr	r1, [r7, #8]
 800c580:	4618      	mov	r0, r3
 800c582:	f000 fc61 	bl	800ce48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c586:	6978      	ldr	r0, [r7, #20]
 800c588:	f7ff ff26 	bl	800c3d8 <prvUnlockQueue>
	}
 800c58c:	bf00      	nop
 800c58e:	3718      	adds	r7, #24
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c594:	b580      	push	{r7, lr}
 800c596:	b08e      	sub	sp, #56	; 0x38
 800c598:	af04      	add	r7, sp, #16
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	60b9      	str	r1, [r7, #8]
 800c59e:	607a      	str	r2, [r7, #4]
 800c5a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d10a      	bne.n	800c5be <xTaskCreateStatic+0x2a>
	__asm volatile
 800c5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ac:	f383 8811 	msr	BASEPRI, r3
 800c5b0:	f3bf 8f6f 	isb	sy
 800c5b4:	f3bf 8f4f 	dsb	sy
 800c5b8:	623b      	str	r3, [r7, #32]
}
 800c5ba:	bf00      	nop
 800c5bc:	e7fe      	b.n	800c5bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d10a      	bne.n	800c5da <xTaskCreateStatic+0x46>
	__asm volatile
 800c5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c8:	f383 8811 	msr	BASEPRI, r3
 800c5cc:	f3bf 8f6f 	isb	sy
 800c5d0:	f3bf 8f4f 	dsb	sy
 800c5d4:	61fb      	str	r3, [r7, #28]
}
 800c5d6:	bf00      	nop
 800c5d8:	e7fe      	b.n	800c5d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c5da:	23bc      	movs	r3, #188	; 0xbc
 800c5dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	2bbc      	cmp	r3, #188	; 0xbc
 800c5e2:	d00a      	beq.n	800c5fa <xTaskCreateStatic+0x66>
	__asm volatile
 800c5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e8:	f383 8811 	msr	BASEPRI, r3
 800c5ec:	f3bf 8f6f 	isb	sy
 800c5f0:	f3bf 8f4f 	dsb	sy
 800c5f4:	61bb      	str	r3, [r7, #24]
}
 800c5f6:	bf00      	nop
 800c5f8:	e7fe      	b.n	800c5f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c5fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d01e      	beq.n	800c640 <xTaskCreateStatic+0xac>
 800c602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c604:	2b00      	cmp	r3, #0
 800c606:	d01b      	beq.n	800c640 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c60e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c610:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c614:	2202      	movs	r2, #2
 800c616:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c61a:	2300      	movs	r3, #0
 800c61c:	9303      	str	r3, [sp, #12]
 800c61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c620:	9302      	str	r3, [sp, #8]
 800c622:	f107 0314 	add.w	r3, r7, #20
 800c626:	9301      	str	r3, [sp, #4]
 800c628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62a:	9300      	str	r3, [sp, #0]
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	68b9      	ldr	r1, [r7, #8]
 800c632:	68f8      	ldr	r0, [r7, #12]
 800c634:	f000 f850 	bl	800c6d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c638:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c63a:	f000 f8f3 	bl	800c824 <prvAddNewTaskToReadyList>
 800c63e:	e001      	b.n	800c644 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c640:	2300      	movs	r3, #0
 800c642:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c644:	697b      	ldr	r3, [r7, #20]
	}
 800c646:	4618      	mov	r0, r3
 800c648:	3728      	adds	r7, #40	; 0x28
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c64e:	b580      	push	{r7, lr}
 800c650:	b08c      	sub	sp, #48	; 0x30
 800c652:	af04      	add	r7, sp, #16
 800c654:	60f8      	str	r0, [r7, #12]
 800c656:	60b9      	str	r1, [r7, #8]
 800c658:	603b      	str	r3, [r7, #0]
 800c65a:	4613      	mov	r3, r2
 800c65c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c65e:	88fb      	ldrh	r3, [r7, #6]
 800c660:	009b      	lsls	r3, r3, #2
 800c662:	4618      	mov	r0, r3
 800c664:	f001 fd68 	bl	800e138 <pvPortMalloc>
 800c668:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d00e      	beq.n	800c68e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c670:	20bc      	movs	r0, #188	; 0xbc
 800c672:	f001 fd61 	bl	800e138 <pvPortMalloc>
 800c676:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d003      	beq.n	800c686 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c67e:	69fb      	ldr	r3, [r7, #28]
 800c680:	697a      	ldr	r2, [r7, #20]
 800c682:	631a      	str	r2, [r3, #48]	; 0x30
 800c684:	e005      	b.n	800c692 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c686:	6978      	ldr	r0, [r7, #20]
 800c688:	f001 fe22 	bl	800e2d0 <vPortFree>
 800c68c:	e001      	b.n	800c692 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c68e:	2300      	movs	r3, #0
 800c690:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c692:	69fb      	ldr	r3, [r7, #28]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d017      	beq.n	800c6c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c698:	69fb      	ldr	r3, [r7, #28]
 800c69a:	2200      	movs	r2, #0
 800c69c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c6a0:	88fa      	ldrh	r2, [r7, #6]
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	9303      	str	r3, [sp, #12]
 800c6a6:	69fb      	ldr	r3, [r7, #28]
 800c6a8:	9302      	str	r3, [sp, #8]
 800c6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ac:	9301      	str	r3, [sp, #4]
 800c6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	68b9      	ldr	r1, [r7, #8]
 800c6b6:	68f8      	ldr	r0, [r7, #12]
 800c6b8:	f000 f80e 	bl	800c6d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c6bc:	69f8      	ldr	r0, [r7, #28]
 800c6be:	f000 f8b1 	bl	800c824 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	61bb      	str	r3, [r7, #24]
 800c6c6:	e002      	b.n	800c6ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c6c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c6ce:	69bb      	ldr	r3, [r7, #24]
	}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3720      	adds	r7, #32
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b088      	sub	sp, #32
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	607a      	str	r2, [r7, #4]
 800c6e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	009b      	lsls	r3, r3, #2
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	21a5      	movs	r1, #165	; 0xa5
 800c6f2:	f002 fc79 	bl	800efe8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c700:	3b01      	subs	r3, #1
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	4413      	add	r3, r2
 800c706:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c708:	69bb      	ldr	r3, [r7, #24]
 800c70a:	f023 0307 	bic.w	r3, r3, #7
 800c70e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c710:	69bb      	ldr	r3, [r7, #24]
 800c712:	f003 0307 	and.w	r3, r3, #7
 800c716:	2b00      	cmp	r3, #0
 800c718:	d00a      	beq.n	800c730 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c71e:	f383 8811 	msr	BASEPRI, r3
 800c722:	f3bf 8f6f 	isb	sy
 800c726:	f3bf 8f4f 	dsb	sy
 800c72a:	617b      	str	r3, [r7, #20]
}
 800c72c:	bf00      	nop
 800c72e:	e7fe      	b.n	800c72e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d01f      	beq.n	800c776 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c736:	2300      	movs	r3, #0
 800c738:	61fb      	str	r3, [r7, #28]
 800c73a:	e012      	b.n	800c762 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c73c:	68ba      	ldr	r2, [r7, #8]
 800c73e:	69fb      	ldr	r3, [r7, #28]
 800c740:	4413      	add	r3, r2
 800c742:	7819      	ldrb	r1, [r3, #0]
 800c744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c746:	69fb      	ldr	r3, [r7, #28]
 800c748:	4413      	add	r3, r2
 800c74a:	3334      	adds	r3, #52	; 0x34
 800c74c:	460a      	mov	r2, r1
 800c74e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c750:	68ba      	ldr	r2, [r7, #8]
 800c752:	69fb      	ldr	r3, [r7, #28]
 800c754:	4413      	add	r3, r2
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d006      	beq.n	800c76a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	3301      	adds	r3, #1
 800c760:	61fb      	str	r3, [r7, #28]
 800c762:	69fb      	ldr	r3, [r7, #28]
 800c764:	2b0f      	cmp	r3, #15
 800c766:	d9e9      	bls.n	800c73c <prvInitialiseNewTask+0x64>
 800c768:	e000      	b.n	800c76c <prvInitialiseNewTask+0x94>
			{
				break;
 800c76a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76e:	2200      	movs	r2, #0
 800c770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c774:	e003      	b.n	800c77e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c778:	2200      	movs	r2, #0
 800c77a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c780:	2b37      	cmp	r3, #55	; 0x37
 800c782:	d901      	bls.n	800c788 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c784:	2337      	movs	r3, #55	; 0x37
 800c786:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c78c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c792:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c796:	2200      	movs	r2, #0
 800c798:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79c:	3304      	adds	r3, #4
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7fe ff64 	bl	800b66c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a6:	3318      	adds	r3, #24
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7fe ff5f 	bl	800b66c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d6:	3354      	adds	r3, #84	; 0x54
 800c7d8:	2260      	movs	r2, #96	; 0x60
 800c7da:	2100      	movs	r1, #0
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f002 fc03 	bl	800efe8 <memset>
 800c7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e4:	4a0c      	ldr	r2, [pc, #48]	; (800c818 <prvInitialiseNewTask+0x140>)
 800c7e6:	659a      	str	r2, [r3, #88]	; 0x58
 800c7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ea:	4a0c      	ldr	r2, [pc, #48]	; (800c81c <prvInitialiseNewTask+0x144>)
 800c7ec:	65da      	str	r2, [r3, #92]	; 0x5c
 800c7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f0:	4a0b      	ldr	r2, [pc, #44]	; (800c820 <prvInitialiseNewTask+0x148>)
 800c7f2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c7f4:	683a      	ldr	r2, [r7, #0]
 800c7f6:	68f9      	ldr	r1, [r7, #12]
 800c7f8:	69b8      	ldr	r0, [r7, #24]
 800c7fa:	f001 fa4f 	bl	800dc9c <pxPortInitialiseStack>
 800c7fe:	4602      	mov	r2, r0
 800c800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c802:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c806:	2b00      	cmp	r3, #0
 800c808:	d002      	beq.n	800c810 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c80e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c810:	bf00      	nop
 800c812:	3720      	adds	r7, #32
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}
 800c818:	080103e4 	.word	0x080103e4
 800c81c:	08010404 	.word	0x08010404
 800c820:	080103c4 	.word	0x080103c4

0800c824 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c82c:	f001 fb62 	bl	800def4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c830:	4b2d      	ldr	r3, [pc, #180]	; (800c8e8 <prvAddNewTaskToReadyList+0xc4>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	3301      	adds	r3, #1
 800c836:	4a2c      	ldr	r2, [pc, #176]	; (800c8e8 <prvAddNewTaskToReadyList+0xc4>)
 800c838:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c83a:	4b2c      	ldr	r3, [pc, #176]	; (800c8ec <prvAddNewTaskToReadyList+0xc8>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d109      	bne.n	800c856 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c842:	4a2a      	ldr	r2, [pc, #168]	; (800c8ec <prvAddNewTaskToReadyList+0xc8>)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c848:	4b27      	ldr	r3, [pc, #156]	; (800c8e8 <prvAddNewTaskToReadyList+0xc4>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d110      	bne.n	800c872 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c850:	f000 fc26 	bl	800d0a0 <prvInitialiseTaskLists>
 800c854:	e00d      	b.n	800c872 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c856:	4b26      	ldr	r3, [pc, #152]	; (800c8f0 <prvAddNewTaskToReadyList+0xcc>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d109      	bne.n	800c872 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c85e:	4b23      	ldr	r3, [pc, #140]	; (800c8ec <prvAddNewTaskToReadyList+0xc8>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c868:	429a      	cmp	r2, r3
 800c86a:	d802      	bhi.n	800c872 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c86c:	4a1f      	ldr	r2, [pc, #124]	; (800c8ec <prvAddNewTaskToReadyList+0xc8>)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c872:	4b20      	ldr	r3, [pc, #128]	; (800c8f4 <prvAddNewTaskToReadyList+0xd0>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	3301      	adds	r3, #1
 800c878:	4a1e      	ldr	r2, [pc, #120]	; (800c8f4 <prvAddNewTaskToReadyList+0xd0>)
 800c87a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c87c:	4b1d      	ldr	r3, [pc, #116]	; (800c8f4 <prvAddNewTaskToReadyList+0xd0>)
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c888:	4b1b      	ldr	r3, [pc, #108]	; (800c8f8 <prvAddNewTaskToReadyList+0xd4>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d903      	bls.n	800c898 <prvAddNewTaskToReadyList+0x74>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c894:	4a18      	ldr	r2, [pc, #96]	; (800c8f8 <prvAddNewTaskToReadyList+0xd4>)
 800c896:	6013      	str	r3, [r2, #0]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c89c:	4613      	mov	r3, r2
 800c89e:	009b      	lsls	r3, r3, #2
 800c8a0:	4413      	add	r3, r2
 800c8a2:	009b      	lsls	r3, r3, #2
 800c8a4:	4a15      	ldr	r2, [pc, #84]	; (800c8fc <prvAddNewTaskToReadyList+0xd8>)
 800c8a6:	441a      	add	r2, r3
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	3304      	adds	r3, #4
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	4610      	mov	r0, r2
 800c8b0:	f7fe fee9 	bl	800b686 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c8b4:	f001 fb4e 	bl	800df54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c8b8:	4b0d      	ldr	r3, [pc, #52]	; (800c8f0 <prvAddNewTaskToReadyList+0xcc>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d00e      	beq.n	800c8de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c8c0:	4b0a      	ldr	r3, [pc, #40]	; (800c8ec <prvAddNewTaskToReadyList+0xc8>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d207      	bcs.n	800c8de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c8ce:	4b0c      	ldr	r3, [pc, #48]	; (800c900 <prvAddNewTaskToReadyList+0xdc>)
 800c8d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8d4:	601a      	str	r2, [r3, #0]
 800c8d6:	f3bf 8f4f 	dsb	sy
 800c8da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8de:	bf00      	nop
 800c8e0:	3708      	adds	r7, #8
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	200014b4 	.word	0x200014b4
 800c8ec:	20000fe0 	.word	0x20000fe0
 800c8f0:	200014c0 	.word	0x200014c0
 800c8f4:	200014d0 	.word	0x200014d0
 800c8f8:	200014bc 	.word	0x200014bc
 800c8fc:	20000fe4 	.word	0x20000fe4
 800c900:	e000ed04 	.word	0xe000ed04

0800c904 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c90c:	2300      	movs	r3, #0
 800c90e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d017      	beq.n	800c946 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c916:	4b13      	ldr	r3, [pc, #76]	; (800c964 <vTaskDelay+0x60>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d00a      	beq.n	800c934 <vTaskDelay+0x30>
	__asm volatile
 800c91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c922:	f383 8811 	msr	BASEPRI, r3
 800c926:	f3bf 8f6f 	isb	sy
 800c92a:	f3bf 8f4f 	dsb	sy
 800c92e:	60bb      	str	r3, [r7, #8]
}
 800c930:	bf00      	nop
 800c932:	e7fe      	b.n	800c932 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c934:	f000 f88a 	bl	800ca4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c938:	2100      	movs	r1, #0
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 fe0c 	bl	800d558 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c940:	f000 f892 	bl	800ca68 <xTaskResumeAll>
 800c944:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d107      	bne.n	800c95c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c94c:	4b06      	ldr	r3, [pc, #24]	; (800c968 <vTaskDelay+0x64>)
 800c94e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c952:	601a      	str	r2, [r3, #0]
 800c954:	f3bf 8f4f 	dsb	sy
 800c958:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c95c:	bf00      	nop
 800c95e:	3710      	adds	r7, #16
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	200014dc 	.word	0x200014dc
 800c968:	e000ed04 	.word	0xe000ed04

0800c96c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b08a      	sub	sp, #40	; 0x28
 800c970:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c972:	2300      	movs	r3, #0
 800c974:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c976:	2300      	movs	r3, #0
 800c978:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c97a:	463a      	mov	r2, r7
 800c97c:	1d39      	adds	r1, r7, #4
 800c97e:	f107 0308 	add.w	r3, r7, #8
 800c982:	4618      	mov	r0, r3
 800c984:	f7fe fe1e 	bl	800b5c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c988:	6839      	ldr	r1, [r7, #0]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	68ba      	ldr	r2, [r7, #8]
 800c98e:	9202      	str	r2, [sp, #8]
 800c990:	9301      	str	r3, [sp, #4]
 800c992:	2300      	movs	r3, #0
 800c994:	9300      	str	r3, [sp, #0]
 800c996:	2300      	movs	r3, #0
 800c998:	460a      	mov	r2, r1
 800c99a:	4924      	ldr	r1, [pc, #144]	; (800ca2c <vTaskStartScheduler+0xc0>)
 800c99c:	4824      	ldr	r0, [pc, #144]	; (800ca30 <vTaskStartScheduler+0xc4>)
 800c99e:	f7ff fdf9 	bl	800c594 <xTaskCreateStatic>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	4a23      	ldr	r2, [pc, #140]	; (800ca34 <vTaskStartScheduler+0xc8>)
 800c9a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c9a8:	4b22      	ldr	r3, [pc, #136]	; (800ca34 <vTaskStartScheduler+0xc8>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d002      	beq.n	800c9b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	617b      	str	r3, [r7, #20]
 800c9b4:	e001      	b.n	800c9ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d102      	bne.n	800c9c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c9c0:	f000 fe1e 	bl	800d600 <xTimerCreateTimerTask>
 800c9c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d11b      	bne.n	800ca04 <vTaskStartScheduler+0x98>
	__asm volatile
 800c9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d0:	f383 8811 	msr	BASEPRI, r3
 800c9d4:	f3bf 8f6f 	isb	sy
 800c9d8:	f3bf 8f4f 	dsb	sy
 800c9dc:	613b      	str	r3, [r7, #16]
}
 800c9de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c9e0:	4b15      	ldr	r3, [pc, #84]	; (800ca38 <vTaskStartScheduler+0xcc>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	3354      	adds	r3, #84	; 0x54
 800c9e6:	4a15      	ldr	r2, [pc, #84]	; (800ca3c <vTaskStartScheduler+0xd0>)
 800c9e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c9ea:	4b15      	ldr	r3, [pc, #84]	; (800ca40 <vTaskStartScheduler+0xd4>)
 800c9ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c9f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c9f2:	4b14      	ldr	r3, [pc, #80]	; (800ca44 <vTaskStartScheduler+0xd8>)
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c9f8:	4b13      	ldr	r3, [pc, #76]	; (800ca48 <vTaskStartScheduler+0xdc>)
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c9fe:	f001 f9d7 	bl	800ddb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ca02:	e00e      	b.n	800ca22 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca0a:	d10a      	bne.n	800ca22 <vTaskStartScheduler+0xb6>
	__asm volatile
 800ca0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca10:	f383 8811 	msr	BASEPRI, r3
 800ca14:	f3bf 8f6f 	isb	sy
 800ca18:	f3bf 8f4f 	dsb	sy
 800ca1c:	60fb      	str	r3, [r7, #12]
}
 800ca1e:	bf00      	nop
 800ca20:	e7fe      	b.n	800ca20 <vTaskStartScheduler+0xb4>
}
 800ca22:	bf00      	nop
 800ca24:	3718      	adds	r7, #24
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	0800f56c 	.word	0x0800f56c
 800ca30:	0800d071 	.word	0x0800d071
 800ca34:	200014d8 	.word	0x200014d8
 800ca38:	20000fe0 	.word	0x20000fe0
 800ca3c:	20000134 	.word	0x20000134
 800ca40:	200014d4 	.word	0x200014d4
 800ca44:	200014c0 	.word	0x200014c0
 800ca48:	200014b8 	.word	0x200014b8

0800ca4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ca50:	4b04      	ldr	r3, [pc, #16]	; (800ca64 <vTaskSuspendAll+0x18>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	3301      	adds	r3, #1
 800ca56:	4a03      	ldr	r2, [pc, #12]	; (800ca64 <vTaskSuspendAll+0x18>)
 800ca58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ca5a:	bf00      	nop
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr
 800ca64:	200014dc 	.word	0x200014dc

0800ca68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ca72:	2300      	movs	r3, #0
 800ca74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ca76:	4b42      	ldr	r3, [pc, #264]	; (800cb80 <xTaskResumeAll+0x118>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d10a      	bne.n	800ca94 <xTaskResumeAll+0x2c>
	__asm volatile
 800ca7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca82:	f383 8811 	msr	BASEPRI, r3
 800ca86:	f3bf 8f6f 	isb	sy
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	603b      	str	r3, [r7, #0]
}
 800ca90:	bf00      	nop
 800ca92:	e7fe      	b.n	800ca92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ca94:	f001 fa2e 	bl	800def4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ca98:	4b39      	ldr	r3, [pc, #228]	; (800cb80 <xTaskResumeAll+0x118>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	3b01      	subs	r3, #1
 800ca9e:	4a38      	ldr	r2, [pc, #224]	; (800cb80 <xTaskResumeAll+0x118>)
 800caa0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800caa2:	4b37      	ldr	r3, [pc, #220]	; (800cb80 <xTaskResumeAll+0x118>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d162      	bne.n	800cb70 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800caaa:	4b36      	ldr	r3, [pc, #216]	; (800cb84 <xTaskResumeAll+0x11c>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d05e      	beq.n	800cb70 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cab2:	e02f      	b.n	800cb14 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cab4:	4b34      	ldr	r3, [pc, #208]	; (800cb88 <xTaskResumeAll+0x120>)
 800cab6:	68db      	ldr	r3, [r3, #12]
 800cab8:	68db      	ldr	r3, [r3, #12]
 800caba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	3318      	adds	r3, #24
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7fe fe3d 	bl	800b740 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	3304      	adds	r3, #4
 800caca:	4618      	mov	r0, r3
 800cacc:	f7fe fe38 	bl	800b740 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cad4:	4b2d      	ldr	r3, [pc, #180]	; (800cb8c <xTaskResumeAll+0x124>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	429a      	cmp	r2, r3
 800cada:	d903      	bls.n	800cae4 <xTaskResumeAll+0x7c>
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae0:	4a2a      	ldr	r2, [pc, #168]	; (800cb8c <xTaskResumeAll+0x124>)
 800cae2:	6013      	str	r3, [r2, #0]
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cae8:	4613      	mov	r3, r2
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	4413      	add	r3, r2
 800caee:	009b      	lsls	r3, r3, #2
 800caf0:	4a27      	ldr	r2, [pc, #156]	; (800cb90 <xTaskResumeAll+0x128>)
 800caf2:	441a      	add	r2, r3
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	3304      	adds	r3, #4
 800caf8:	4619      	mov	r1, r3
 800cafa:	4610      	mov	r0, r2
 800cafc:	f7fe fdc3 	bl	800b686 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb04:	4b23      	ldr	r3, [pc, #140]	; (800cb94 <xTaskResumeAll+0x12c>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d302      	bcc.n	800cb14 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cb0e:	4b22      	ldr	r3, [pc, #136]	; (800cb98 <xTaskResumeAll+0x130>)
 800cb10:	2201      	movs	r2, #1
 800cb12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb14:	4b1c      	ldr	r3, [pc, #112]	; (800cb88 <xTaskResumeAll+0x120>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d1cb      	bne.n	800cab4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d001      	beq.n	800cb26 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cb22:	f000 fb5f 	bl	800d1e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cb26:	4b1d      	ldr	r3, [pc, #116]	; (800cb9c <xTaskResumeAll+0x134>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d010      	beq.n	800cb54 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cb32:	f000 f847 	bl	800cbc4 <xTaskIncrementTick>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d002      	beq.n	800cb42 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cb3c:	4b16      	ldr	r3, [pc, #88]	; (800cb98 <xTaskResumeAll+0x130>)
 800cb3e:	2201      	movs	r2, #1
 800cb40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	3b01      	subs	r3, #1
 800cb46:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d1f1      	bne.n	800cb32 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cb4e:	4b13      	ldr	r3, [pc, #76]	; (800cb9c <xTaskResumeAll+0x134>)
 800cb50:	2200      	movs	r2, #0
 800cb52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cb54:	4b10      	ldr	r3, [pc, #64]	; (800cb98 <xTaskResumeAll+0x130>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d009      	beq.n	800cb70 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cb60:	4b0f      	ldr	r3, [pc, #60]	; (800cba0 <xTaskResumeAll+0x138>)
 800cb62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb66:	601a      	str	r2, [r3, #0]
 800cb68:	f3bf 8f4f 	dsb	sy
 800cb6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb70:	f001 f9f0 	bl	800df54 <vPortExitCritical>

	return xAlreadyYielded;
 800cb74:	68bb      	ldr	r3, [r7, #8]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3710      	adds	r7, #16
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	200014dc 	.word	0x200014dc
 800cb84:	200014b4 	.word	0x200014b4
 800cb88:	20001474 	.word	0x20001474
 800cb8c:	200014bc 	.word	0x200014bc
 800cb90:	20000fe4 	.word	0x20000fe4
 800cb94:	20000fe0 	.word	0x20000fe0
 800cb98:	200014c8 	.word	0x200014c8
 800cb9c:	200014c4 	.word	0x200014c4
 800cba0:	e000ed04 	.word	0xe000ed04

0800cba4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cba4:	b480      	push	{r7}
 800cba6:	b083      	sub	sp, #12
 800cba8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cbaa:	4b05      	ldr	r3, [pc, #20]	; (800cbc0 <xTaskGetTickCount+0x1c>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cbb0:	687b      	ldr	r3, [r7, #4]
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	370c      	adds	r7, #12
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbc:	4770      	bx	lr
 800cbbe:	bf00      	nop
 800cbc0:	200014b8 	.word	0x200014b8

0800cbc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b086      	sub	sp, #24
 800cbc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbce:	4b4f      	ldr	r3, [pc, #316]	; (800cd0c <xTaskIncrementTick+0x148>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	f040 808f 	bne.w	800ccf6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cbd8:	4b4d      	ldr	r3, [pc, #308]	; (800cd10 <xTaskIncrementTick+0x14c>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	3301      	adds	r3, #1
 800cbde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cbe0:	4a4b      	ldr	r2, [pc, #300]	; (800cd10 <xTaskIncrementTick+0x14c>)
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d120      	bne.n	800cc2e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cbec:	4b49      	ldr	r3, [pc, #292]	; (800cd14 <xTaskIncrementTick+0x150>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d00a      	beq.n	800cc0c <xTaskIncrementTick+0x48>
	__asm volatile
 800cbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfa:	f383 8811 	msr	BASEPRI, r3
 800cbfe:	f3bf 8f6f 	isb	sy
 800cc02:	f3bf 8f4f 	dsb	sy
 800cc06:	603b      	str	r3, [r7, #0]
}
 800cc08:	bf00      	nop
 800cc0a:	e7fe      	b.n	800cc0a <xTaskIncrementTick+0x46>
 800cc0c:	4b41      	ldr	r3, [pc, #260]	; (800cd14 <xTaskIncrementTick+0x150>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	60fb      	str	r3, [r7, #12]
 800cc12:	4b41      	ldr	r3, [pc, #260]	; (800cd18 <xTaskIncrementTick+0x154>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a3f      	ldr	r2, [pc, #252]	; (800cd14 <xTaskIncrementTick+0x150>)
 800cc18:	6013      	str	r3, [r2, #0]
 800cc1a:	4a3f      	ldr	r2, [pc, #252]	; (800cd18 <xTaskIncrementTick+0x154>)
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	6013      	str	r3, [r2, #0]
 800cc20:	4b3e      	ldr	r3, [pc, #248]	; (800cd1c <xTaskIncrementTick+0x158>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	3301      	adds	r3, #1
 800cc26:	4a3d      	ldr	r2, [pc, #244]	; (800cd1c <xTaskIncrementTick+0x158>)
 800cc28:	6013      	str	r3, [r2, #0]
 800cc2a:	f000 fadb 	bl	800d1e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cc2e:	4b3c      	ldr	r3, [pc, #240]	; (800cd20 <xTaskIncrementTick+0x15c>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	693a      	ldr	r2, [r7, #16]
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d349      	bcc.n	800cccc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc38:	4b36      	ldr	r3, [pc, #216]	; (800cd14 <xTaskIncrementTick+0x150>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d104      	bne.n	800cc4c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc42:	4b37      	ldr	r3, [pc, #220]	; (800cd20 <xTaskIncrementTick+0x15c>)
 800cc44:	f04f 32ff 	mov.w	r2, #4294967295
 800cc48:	601a      	str	r2, [r3, #0]
					break;
 800cc4a:	e03f      	b.n	800cccc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc4c:	4b31      	ldr	r3, [pc, #196]	; (800cd14 <xTaskIncrementTick+0x150>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	68db      	ldr	r3, [r3, #12]
 800cc52:	68db      	ldr	r3, [r3, #12]
 800cc54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cc5c:	693a      	ldr	r2, [r7, #16]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d203      	bcs.n	800cc6c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cc64:	4a2e      	ldr	r2, [pc, #184]	; (800cd20 <xTaskIncrementTick+0x15c>)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cc6a:	e02f      	b.n	800cccc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	3304      	adds	r3, #4
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7fe fd65 	bl	800b740 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d004      	beq.n	800cc88 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	3318      	adds	r3, #24
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7fe fd5c 	bl	800b740 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc8c:	4b25      	ldr	r3, [pc, #148]	; (800cd24 <xTaskIncrementTick+0x160>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d903      	bls.n	800cc9c <xTaskIncrementTick+0xd8>
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc98:	4a22      	ldr	r2, [pc, #136]	; (800cd24 <xTaskIncrementTick+0x160>)
 800cc9a:	6013      	str	r3, [r2, #0]
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cca0:	4613      	mov	r3, r2
 800cca2:	009b      	lsls	r3, r3, #2
 800cca4:	4413      	add	r3, r2
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	4a1f      	ldr	r2, [pc, #124]	; (800cd28 <xTaskIncrementTick+0x164>)
 800ccaa:	441a      	add	r2, r3
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	3304      	adds	r3, #4
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	4610      	mov	r0, r2
 800ccb4:	f7fe fce7 	bl	800b686 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccbc:	4b1b      	ldr	r3, [pc, #108]	; (800cd2c <xTaskIncrementTick+0x168>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d3b8      	bcc.n	800cc38 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ccca:	e7b5      	b.n	800cc38 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cccc:	4b17      	ldr	r3, [pc, #92]	; (800cd2c <xTaskIncrementTick+0x168>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccd2:	4915      	ldr	r1, [pc, #84]	; (800cd28 <xTaskIncrementTick+0x164>)
 800ccd4:	4613      	mov	r3, r2
 800ccd6:	009b      	lsls	r3, r3, #2
 800ccd8:	4413      	add	r3, r2
 800ccda:	009b      	lsls	r3, r3, #2
 800ccdc:	440b      	add	r3, r1
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	d901      	bls.n	800cce8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cce4:	2301      	movs	r3, #1
 800cce6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cce8:	4b11      	ldr	r3, [pc, #68]	; (800cd30 <xTaskIncrementTick+0x16c>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d007      	beq.n	800cd00 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	617b      	str	r3, [r7, #20]
 800ccf4:	e004      	b.n	800cd00 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ccf6:	4b0f      	ldr	r3, [pc, #60]	; (800cd34 <xTaskIncrementTick+0x170>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	4a0d      	ldr	r2, [pc, #52]	; (800cd34 <xTaskIncrementTick+0x170>)
 800ccfe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cd00:	697b      	ldr	r3, [r7, #20]
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3718      	adds	r7, #24
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	200014dc 	.word	0x200014dc
 800cd10:	200014b8 	.word	0x200014b8
 800cd14:	2000146c 	.word	0x2000146c
 800cd18:	20001470 	.word	0x20001470
 800cd1c:	200014cc 	.word	0x200014cc
 800cd20:	200014d4 	.word	0x200014d4
 800cd24:	200014bc 	.word	0x200014bc
 800cd28:	20000fe4 	.word	0x20000fe4
 800cd2c:	20000fe0 	.word	0x20000fe0
 800cd30:	200014c8 	.word	0x200014c8
 800cd34:	200014c4 	.word	0x200014c4

0800cd38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b085      	sub	sp, #20
 800cd3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cd3e:	4b2a      	ldr	r3, [pc, #168]	; (800cde8 <vTaskSwitchContext+0xb0>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d003      	beq.n	800cd4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cd46:	4b29      	ldr	r3, [pc, #164]	; (800cdec <vTaskSwitchContext+0xb4>)
 800cd48:	2201      	movs	r2, #1
 800cd4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cd4c:	e046      	b.n	800cddc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800cd4e:	4b27      	ldr	r3, [pc, #156]	; (800cdec <vTaskSwitchContext+0xb4>)
 800cd50:	2200      	movs	r2, #0
 800cd52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd54:	4b26      	ldr	r3, [pc, #152]	; (800cdf0 <vTaskSwitchContext+0xb8>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	60fb      	str	r3, [r7, #12]
 800cd5a:	e010      	b.n	800cd7e <vTaskSwitchContext+0x46>
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d10a      	bne.n	800cd78 <vTaskSwitchContext+0x40>
	__asm volatile
 800cd62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd66:	f383 8811 	msr	BASEPRI, r3
 800cd6a:	f3bf 8f6f 	isb	sy
 800cd6e:	f3bf 8f4f 	dsb	sy
 800cd72:	607b      	str	r3, [r7, #4]
}
 800cd74:	bf00      	nop
 800cd76:	e7fe      	b.n	800cd76 <vTaskSwitchContext+0x3e>
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	3b01      	subs	r3, #1
 800cd7c:	60fb      	str	r3, [r7, #12]
 800cd7e:	491d      	ldr	r1, [pc, #116]	; (800cdf4 <vTaskSwitchContext+0xbc>)
 800cd80:	68fa      	ldr	r2, [r7, #12]
 800cd82:	4613      	mov	r3, r2
 800cd84:	009b      	lsls	r3, r3, #2
 800cd86:	4413      	add	r3, r2
 800cd88:	009b      	lsls	r3, r3, #2
 800cd8a:	440b      	add	r3, r1
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d0e4      	beq.n	800cd5c <vTaskSwitchContext+0x24>
 800cd92:	68fa      	ldr	r2, [r7, #12]
 800cd94:	4613      	mov	r3, r2
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	4413      	add	r3, r2
 800cd9a:	009b      	lsls	r3, r3, #2
 800cd9c:	4a15      	ldr	r2, [pc, #84]	; (800cdf4 <vTaskSwitchContext+0xbc>)
 800cd9e:	4413      	add	r3, r2
 800cda0:	60bb      	str	r3, [r7, #8]
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	685a      	ldr	r2, [r3, #4]
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	605a      	str	r2, [r3, #4]
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	685a      	ldr	r2, [r3, #4]
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	3308      	adds	r3, #8
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d104      	bne.n	800cdc2 <vTaskSwitchContext+0x8a>
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	685a      	ldr	r2, [r3, #4]
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	605a      	str	r2, [r3, #4]
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	68db      	ldr	r3, [r3, #12]
 800cdc8:	4a0b      	ldr	r2, [pc, #44]	; (800cdf8 <vTaskSwitchContext+0xc0>)
 800cdca:	6013      	str	r3, [r2, #0]
 800cdcc:	4a08      	ldr	r2, [pc, #32]	; (800cdf0 <vTaskSwitchContext+0xb8>)
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cdd2:	4b09      	ldr	r3, [pc, #36]	; (800cdf8 <vTaskSwitchContext+0xc0>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	3354      	adds	r3, #84	; 0x54
 800cdd8:	4a08      	ldr	r2, [pc, #32]	; (800cdfc <vTaskSwitchContext+0xc4>)
 800cdda:	6013      	str	r3, [r2, #0]
}
 800cddc:	bf00      	nop
 800cdde:	3714      	adds	r7, #20
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr
 800cde8:	200014dc 	.word	0x200014dc
 800cdec:	200014c8 	.word	0x200014c8
 800cdf0:	200014bc 	.word	0x200014bc
 800cdf4:	20000fe4 	.word	0x20000fe4
 800cdf8:	20000fe0 	.word	0x20000fe0
 800cdfc:	20000134 	.word	0x20000134

0800ce00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d10a      	bne.n	800ce26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ce10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce14:	f383 8811 	msr	BASEPRI, r3
 800ce18:	f3bf 8f6f 	isb	sy
 800ce1c:	f3bf 8f4f 	dsb	sy
 800ce20:	60fb      	str	r3, [r7, #12]
}
 800ce22:	bf00      	nop
 800ce24:	e7fe      	b.n	800ce24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce26:	4b07      	ldr	r3, [pc, #28]	; (800ce44 <vTaskPlaceOnEventList+0x44>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	3318      	adds	r3, #24
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f7fe fc4d 	bl	800b6ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ce34:	2101      	movs	r1, #1
 800ce36:	6838      	ldr	r0, [r7, #0]
 800ce38:	f000 fb8e 	bl	800d558 <prvAddCurrentTaskToDelayedList>
}
 800ce3c:	bf00      	nop
 800ce3e:	3710      	adds	r7, #16
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	20000fe0 	.word	0x20000fe0

0800ce48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b086      	sub	sp, #24
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d10a      	bne.n	800ce70 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ce5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce5e:	f383 8811 	msr	BASEPRI, r3
 800ce62:	f3bf 8f6f 	isb	sy
 800ce66:	f3bf 8f4f 	dsb	sy
 800ce6a:	617b      	str	r3, [r7, #20]
}
 800ce6c:	bf00      	nop
 800ce6e:	e7fe      	b.n	800ce6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce70:	4b0a      	ldr	r3, [pc, #40]	; (800ce9c <vTaskPlaceOnEventListRestricted+0x54>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	3318      	adds	r3, #24
 800ce76:	4619      	mov	r1, r3
 800ce78:	68f8      	ldr	r0, [r7, #12]
 800ce7a:	f7fe fc04 	bl	800b686 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d002      	beq.n	800ce8a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ce84:	f04f 33ff 	mov.w	r3, #4294967295
 800ce88:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ce8a:	6879      	ldr	r1, [r7, #4]
 800ce8c:	68b8      	ldr	r0, [r7, #8]
 800ce8e:	f000 fb63 	bl	800d558 <prvAddCurrentTaskToDelayedList>
	}
 800ce92:	bf00      	nop
 800ce94:	3718      	adds	r7, #24
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	20000fe0 	.word	0x20000fe0

0800cea0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b086      	sub	sp, #24
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	68db      	ldr	r3, [r3, #12]
 800ceac:	68db      	ldr	r3, [r3, #12]
 800ceae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d10a      	bne.n	800cecc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ceb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceba:	f383 8811 	msr	BASEPRI, r3
 800cebe:	f3bf 8f6f 	isb	sy
 800cec2:	f3bf 8f4f 	dsb	sy
 800cec6:	60fb      	str	r3, [r7, #12]
}
 800cec8:	bf00      	nop
 800ceca:	e7fe      	b.n	800ceca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	3318      	adds	r3, #24
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7fe fc35 	bl	800b740 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ced6:	4b1e      	ldr	r3, [pc, #120]	; (800cf50 <xTaskRemoveFromEventList+0xb0>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d11d      	bne.n	800cf1a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	3304      	adds	r3, #4
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7fe fc2c 	bl	800b740 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceec:	4b19      	ldr	r3, [pc, #100]	; (800cf54 <xTaskRemoveFromEventList+0xb4>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d903      	bls.n	800cefc <xTaskRemoveFromEventList+0x5c>
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef8:	4a16      	ldr	r2, [pc, #88]	; (800cf54 <xTaskRemoveFromEventList+0xb4>)
 800cefa:	6013      	str	r3, [r2, #0]
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf00:	4613      	mov	r3, r2
 800cf02:	009b      	lsls	r3, r3, #2
 800cf04:	4413      	add	r3, r2
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	4a13      	ldr	r2, [pc, #76]	; (800cf58 <xTaskRemoveFromEventList+0xb8>)
 800cf0a:	441a      	add	r2, r3
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	3304      	adds	r3, #4
 800cf10:	4619      	mov	r1, r3
 800cf12:	4610      	mov	r0, r2
 800cf14:	f7fe fbb7 	bl	800b686 <vListInsertEnd>
 800cf18:	e005      	b.n	800cf26 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	3318      	adds	r3, #24
 800cf1e:	4619      	mov	r1, r3
 800cf20:	480e      	ldr	r0, [pc, #56]	; (800cf5c <xTaskRemoveFromEventList+0xbc>)
 800cf22:	f7fe fbb0 	bl	800b686 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf2a:	4b0d      	ldr	r3, [pc, #52]	; (800cf60 <xTaskRemoveFromEventList+0xc0>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d905      	bls.n	800cf40 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cf34:	2301      	movs	r3, #1
 800cf36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cf38:	4b0a      	ldr	r3, [pc, #40]	; (800cf64 <xTaskRemoveFromEventList+0xc4>)
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	601a      	str	r2, [r3, #0]
 800cf3e:	e001      	b.n	800cf44 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cf40:	2300      	movs	r3, #0
 800cf42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cf44:	697b      	ldr	r3, [r7, #20]
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3718      	adds	r7, #24
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	200014dc 	.word	0x200014dc
 800cf54:	200014bc 	.word	0x200014bc
 800cf58:	20000fe4 	.word	0x20000fe4
 800cf5c:	20001474 	.word	0x20001474
 800cf60:	20000fe0 	.word	0x20000fe0
 800cf64:	200014c8 	.word	0x200014c8

0800cf68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b083      	sub	sp, #12
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cf70:	4b06      	ldr	r3, [pc, #24]	; (800cf8c <vTaskInternalSetTimeOutState+0x24>)
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cf78:	4b05      	ldr	r3, [pc, #20]	; (800cf90 <vTaskInternalSetTimeOutState+0x28>)
 800cf7a:	681a      	ldr	r2, [r3, #0]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	605a      	str	r2, [r3, #4]
}
 800cf80:	bf00      	nop
 800cf82:	370c      	adds	r7, #12
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr
 800cf8c:	200014cc 	.word	0x200014cc
 800cf90:	200014b8 	.word	0x200014b8

0800cf94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b088      	sub	sp, #32
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d10a      	bne.n	800cfba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa8:	f383 8811 	msr	BASEPRI, r3
 800cfac:	f3bf 8f6f 	isb	sy
 800cfb0:	f3bf 8f4f 	dsb	sy
 800cfb4:	613b      	str	r3, [r7, #16]
}
 800cfb6:	bf00      	nop
 800cfb8:	e7fe      	b.n	800cfb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d10a      	bne.n	800cfd6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc4:	f383 8811 	msr	BASEPRI, r3
 800cfc8:	f3bf 8f6f 	isb	sy
 800cfcc:	f3bf 8f4f 	dsb	sy
 800cfd0:	60fb      	str	r3, [r7, #12]
}
 800cfd2:	bf00      	nop
 800cfd4:	e7fe      	b.n	800cfd4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cfd6:	f000 ff8d 	bl	800def4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cfda:	4b1d      	ldr	r3, [pc, #116]	; (800d050 <xTaskCheckForTimeOut+0xbc>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	69ba      	ldr	r2, [r7, #24]
 800cfe6:	1ad3      	subs	r3, r2, r3
 800cfe8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cff2:	d102      	bne.n	800cffa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cff4:	2300      	movs	r3, #0
 800cff6:	61fb      	str	r3, [r7, #28]
 800cff8:	e023      	b.n	800d042 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681a      	ldr	r2, [r3, #0]
 800cffe:	4b15      	ldr	r3, [pc, #84]	; (800d054 <xTaskCheckForTimeOut+0xc0>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	429a      	cmp	r2, r3
 800d004:	d007      	beq.n	800d016 <xTaskCheckForTimeOut+0x82>
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	69ba      	ldr	r2, [r7, #24]
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d302      	bcc.n	800d016 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d010:	2301      	movs	r3, #1
 800d012:	61fb      	str	r3, [r7, #28]
 800d014:	e015      	b.n	800d042 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	697a      	ldr	r2, [r7, #20]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d20b      	bcs.n	800d038 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	681a      	ldr	r2, [r3, #0]
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	1ad2      	subs	r2, r2, r3
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f7ff ff9b 	bl	800cf68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d032:	2300      	movs	r3, #0
 800d034:	61fb      	str	r3, [r7, #28]
 800d036:	e004      	b.n	800d042 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	2200      	movs	r2, #0
 800d03c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d03e:	2301      	movs	r3, #1
 800d040:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d042:	f000 ff87 	bl	800df54 <vPortExitCritical>

	return xReturn;
 800d046:	69fb      	ldr	r3, [r7, #28]
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3720      	adds	r7, #32
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}
 800d050:	200014b8 	.word	0x200014b8
 800d054:	200014cc 	.word	0x200014cc

0800d058 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d058:	b480      	push	{r7}
 800d05a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d05c:	4b03      	ldr	r3, [pc, #12]	; (800d06c <vTaskMissedYield+0x14>)
 800d05e:	2201      	movs	r2, #1
 800d060:	601a      	str	r2, [r3, #0]
}
 800d062:	bf00      	nop
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr
 800d06c:	200014c8 	.word	0x200014c8

0800d070 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d078:	f000 f852 	bl	800d120 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d07c:	4b06      	ldr	r3, [pc, #24]	; (800d098 <prvIdleTask+0x28>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	2b01      	cmp	r3, #1
 800d082:	d9f9      	bls.n	800d078 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d084:	4b05      	ldr	r3, [pc, #20]	; (800d09c <prvIdleTask+0x2c>)
 800d086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d08a:	601a      	str	r2, [r3, #0]
 800d08c:	f3bf 8f4f 	dsb	sy
 800d090:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d094:	e7f0      	b.n	800d078 <prvIdleTask+0x8>
 800d096:	bf00      	nop
 800d098:	20000fe4 	.word	0x20000fe4
 800d09c:	e000ed04 	.word	0xe000ed04

0800d0a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	607b      	str	r3, [r7, #4]
 800d0aa:	e00c      	b.n	800d0c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	4613      	mov	r3, r2
 800d0b0:	009b      	lsls	r3, r3, #2
 800d0b2:	4413      	add	r3, r2
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	4a12      	ldr	r2, [pc, #72]	; (800d100 <prvInitialiseTaskLists+0x60>)
 800d0b8:	4413      	add	r3, r2
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7fe fab6 	bl	800b62c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	607b      	str	r3, [r7, #4]
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2b37      	cmp	r3, #55	; 0x37
 800d0ca:	d9ef      	bls.n	800d0ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d0cc:	480d      	ldr	r0, [pc, #52]	; (800d104 <prvInitialiseTaskLists+0x64>)
 800d0ce:	f7fe faad 	bl	800b62c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d0d2:	480d      	ldr	r0, [pc, #52]	; (800d108 <prvInitialiseTaskLists+0x68>)
 800d0d4:	f7fe faaa 	bl	800b62c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d0d8:	480c      	ldr	r0, [pc, #48]	; (800d10c <prvInitialiseTaskLists+0x6c>)
 800d0da:	f7fe faa7 	bl	800b62c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d0de:	480c      	ldr	r0, [pc, #48]	; (800d110 <prvInitialiseTaskLists+0x70>)
 800d0e0:	f7fe faa4 	bl	800b62c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d0e4:	480b      	ldr	r0, [pc, #44]	; (800d114 <prvInitialiseTaskLists+0x74>)
 800d0e6:	f7fe faa1 	bl	800b62c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d0ea:	4b0b      	ldr	r3, [pc, #44]	; (800d118 <prvInitialiseTaskLists+0x78>)
 800d0ec:	4a05      	ldr	r2, [pc, #20]	; (800d104 <prvInitialiseTaskLists+0x64>)
 800d0ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d0f0:	4b0a      	ldr	r3, [pc, #40]	; (800d11c <prvInitialiseTaskLists+0x7c>)
 800d0f2:	4a05      	ldr	r2, [pc, #20]	; (800d108 <prvInitialiseTaskLists+0x68>)
 800d0f4:	601a      	str	r2, [r3, #0]
}
 800d0f6:	bf00      	nop
 800d0f8:	3708      	adds	r7, #8
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	20000fe4 	.word	0x20000fe4
 800d104:	20001444 	.word	0x20001444
 800d108:	20001458 	.word	0x20001458
 800d10c:	20001474 	.word	0x20001474
 800d110:	20001488 	.word	0x20001488
 800d114:	200014a0 	.word	0x200014a0
 800d118:	2000146c 	.word	0x2000146c
 800d11c:	20001470 	.word	0x20001470

0800d120 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d126:	e019      	b.n	800d15c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d128:	f000 fee4 	bl	800def4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d12c:	4b10      	ldr	r3, [pc, #64]	; (800d170 <prvCheckTasksWaitingTermination+0x50>)
 800d12e:	68db      	ldr	r3, [r3, #12]
 800d130:	68db      	ldr	r3, [r3, #12]
 800d132:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	3304      	adds	r3, #4
 800d138:	4618      	mov	r0, r3
 800d13a:	f7fe fb01 	bl	800b740 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d13e:	4b0d      	ldr	r3, [pc, #52]	; (800d174 <prvCheckTasksWaitingTermination+0x54>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	3b01      	subs	r3, #1
 800d144:	4a0b      	ldr	r2, [pc, #44]	; (800d174 <prvCheckTasksWaitingTermination+0x54>)
 800d146:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d148:	4b0b      	ldr	r3, [pc, #44]	; (800d178 <prvCheckTasksWaitingTermination+0x58>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	3b01      	subs	r3, #1
 800d14e:	4a0a      	ldr	r2, [pc, #40]	; (800d178 <prvCheckTasksWaitingTermination+0x58>)
 800d150:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d152:	f000 feff 	bl	800df54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f000 f810 	bl	800d17c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d15c:	4b06      	ldr	r3, [pc, #24]	; (800d178 <prvCheckTasksWaitingTermination+0x58>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d1e1      	bne.n	800d128 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d164:	bf00      	nop
 800d166:	bf00      	nop
 800d168:	3708      	adds	r7, #8
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	20001488 	.word	0x20001488
 800d174:	200014b4 	.word	0x200014b4
 800d178:	2000149c 	.word	0x2000149c

0800d17c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	3354      	adds	r3, #84	; 0x54
 800d188:	4618      	mov	r0, r3
 800d18a:	f002 f823 	bl	800f1d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d194:	2b00      	cmp	r3, #0
 800d196:	d108      	bne.n	800d1aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d19c:	4618      	mov	r0, r3
 800d19e:	f001 f897 	bl	800e2d0 <vPortFree>
				vPortFree( pxTCB );
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f001 f894 	bl	800e2d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d1a8:	e018      	b.n	800d1dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d1b0:	2b01      	cmp	r3, #1
 800d1b2:	d103      	bne.n	800d1bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f001 f88b 	bl	800e2d0 <vPortFree>
	}
 800d1ba:	e00f      	b.n	800d1dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d1c2:	2b02      	cmp	r3, #2
 800d1c4:	d00a      	beq.n	800d1dc <prvDeleteTCB+0x60>
	__asm volatile
 800d1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ca:	f383 8811 	msr	BASEPRI, r3
 800d1ce:	f3bf 8f6f 	isb	sy
 800d1d2:	f3bf 8f4f 	dsb	sy
 800d1d6:	60fb      	str	r3, [r7, #12]
}
 800d1d8:	bf00      	nop
 800d1da:	e7fe      	b.n	800d1da <prvDeleteTCB+0x5e>
	}
 800d1dc:	bf00      	nop
 800d1de:	3710      	adds	r7, #16
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}

0800d1e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1ea:	4b0c      	ldr	r3, [pc, #48]	; (800d21c <prvResetNextTaskUnblockTime+0x38>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d104      	bne.n	800d1fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d1f4:	4b0a      	ldr	r3, [pc, #40]	; (800d220 <prvResetNextTaskUnblockTime+0x3c>)
 800d1f6:	f04f 32ff 	mov.w	r2, #4294967295
 800d1fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d1fc:	e008      	b.n	800d210 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1fe:	4b07      	ldr	r3, [pc, #28]	; (800d21c <prvResetNextTaskUnblockTime+0x38>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	68db      	ldr	r3, [r3, #12]
 800d204:	68db      	ldr	r3, [r3, #12]
 800d206:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	4a04      	ldr	r2, [pc, #16]	; (800d220 <prvResetNextTaskUnblockTime+0x3c>)
 800d20e:	6013      	str	r3, [r2, #0]
}
 800d210:	bf00      	nop
 800d212:	370c      	adds	r7, #12
 800d214:	46bd      	mov	sp, r7
 800d216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21a:	4770      	bx	lr
 800d21c:	2000146c 	.word	0x2000146c
 800d220:	200014d4 	.word	0x200014d4

0800d224 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d224:	b480      	push	{r7}
 800d226:	b083      	sub	sp, #12
 800d228:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d22a:	4b05      	ldr	r3, [pc, #20]	; (800d240 <xTaskGetCurrentTaskHandle+0x1c>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d230:	687b      	ldr	r3, [r7, #4]
	}
 800d232:	4618      	mov	r0, r3
 800d234:	370c      	adds	r7, #12
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop
 800d240:	20000fe0 	.word	0x20000fe0

0800d244 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d244:	b480      	push	{r7}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d24a:	4b0b      	ldr	r3, [pc, #44]	; (800d278 <xTaskGetSchedulerState+0x34>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d102      	bne.n	800d258 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d252:	2301      	movs	r3, #1
 800d254:	607b      	str	r3, [r7, #4]
 800d256:	e008      	b.n	800d26a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d258:	4b08      	ldr	r3, [pc, #32]	; (800d27c <xTaskGetSchedulerState+0x38>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d102      	bne.n	800d266 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d260:	2302      	movs	r3, #2
 800d262:	607b      	str	r3, [r7, #4]
 800d264:	e001      	b.n	800d26a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d266:	2300      	movs	r3, #0
 800d268:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d26a:	687b      	ldr	r3, [r7, #4]
	}
 800d26c:	4618      	mov	r0, r3
 800d26e:	370c      	adds	r7, #12
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr
 800d278:	200014c0 	.word	0x200014c0
 800d27c:	200014dc 	.word	0x200014dc

0800d280 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d28c:	2300      	movs	r3, #0
 800d28e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d051      	beq.n	800d33a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d29a:	4b2a      	ldr	r3, [pc, #168]	; (800d344 <xTaskPriorityInherit+0xc4>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d241      	bcs.n	800d328 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	699b      	ldr	r3, [r3, #24]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	db06      	blt.n	800d2ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2ac:	4b25      	ldr	r3, [pc, #148]	; (800d344 <xTaskPriorityInherit+0xc4>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	6959      	ldr	r1, [r3, #20]
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	4413      	add	r3, r2
 800d2c8:	009b      	lsls	r3, r3, #2
 800d2ca:	4a1f      	ldr	r2, [pc, #124]	; (800d348 <xTaskPriorityInherit+0xc8>)
 800d2cc:	4413      	add	r3, r2
 800d2ce:	4299      	cmp	r1, r3
 800d2d0:	d122      	bne.n	800d318 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	3304      	adds	r3, #4
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f7fe fa32 	bl	800b740 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d2dc:	4b19      	ldr	r3, [pc, #100]	; (800d344 <xTaskPriorityInherit+0xc4>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ea:	4b18      	ldr	r3, [pc, #96]	; (800d34c <xTaskPriorityInherit+0xcc>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d903      	bls.n	800d2fa <xTaskPriorityInherit+0x7a>
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f6:	4a15      	ldr	r2, [pc, #84]	; (800d34c <xTaskPriorityInherit+0xcc>)
 800d2f8:	6013      	str	r3, [r2, #0]
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2fe:	4613      	mov	r3, r2
 800d300:	009b      	lsls	r3, r3, #2
 800d302:	4413      	add	r3, r2
 800d304:	009b      	lsls	r3, r3, #2
 800d306:	4a10      	ldr	r2, [pc, #64]	; (800d348 <xTaskPriorityInherit+0xc8>)
 800d308:	441a      	add	r2, r3
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	3304      	adds	r3, #4
 800d30e:	4619      	mov	r1, r3
 800d310:	4610      	mov	r0, r2
 800d312:	f7fe f9b8 	bl	800b686 <vListInsertEnd>
 800d316:	e004      	b.n	800d322 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d318:	4b0a      	ldr	r3, [pc, #40]	; (800d344 <xTaskPriorityInherit+0xc4>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d322:	2301      	movs	r3, #1
 800d324:	60fb      	str	r3, [r7, #12]
 800d326:	e008      	b.n	800d33a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d32c:	4b05      	ldr	r3, [pc, #20]	; (800d344 <xTaskPriorityInherit+0xc4>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d332:	429a      	cmp	r2, r3
 800d334:	d201      	bcs.n	800d33a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d336:	2301      	movs	r3, #1
 800d338:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d33a:	68fb      	ldr	r3, [r7, #12]
	}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3710      	adds	r7, #16
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	20000fe0 	.word	0x20000fe0
 800d348:	20000fe4 	.word	0x20000fe4
 800d34c:	200014bc 	.word	0x200014bc

0800d350 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d350:	b580      	push	{r7, lr}
 800d352:	b086      	sub	sp, #24
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d35c:	2300      	movs	r3, #0
 800d35e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d056      	beq.n	800d414 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d366:	4b2e      	ldr	r3, [pc, #184]	; (800d420 <xTaskPriorityDisinherit+0xd0>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	693a      	ldr	r2, [r7, #16]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d00a      	beq.n	800d386 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d374:	f383 8811 	msr	BASEPRI, r3
 800d378:	f3bf 8f6f 	isb	sy
 800d37c:	f3bf 8f4f 	dsb	sy
 800d380:	60fb      	str	r3, [r7, #12]
}
 800d382:	bf00      	nop
 800d384:	e7fe      	b.n	800d384 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d10a      	bne.n	800d3a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d392:	f383 8811 	msr	BASEPRI, r3
 800d396:	f3bf 8f6f 	isb	sy
 800d39a:	f3bf 8f4f 	dsb	sy
 800d39e:	60bb      	str	r3, [r7, #8]
}
 800d3a0:	bf00      	nop
 800d3a2:	e7fe      	b.n	800d3a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3a8:	1e5a      	subs	r2, r3, #1
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d02c      	beq.n	800d414 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d128      	bne.n	800d414 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	3304      	adds	r3, #4
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7fe f9ba 	bl	800b740 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3e4:	4b0f      	ldr	r3, [pc, #60]	; (800d424 <xTaskPriorityDisinherit+0xd4>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d903      	bls.n	800d3f4 <xTaskPriorityDisinherit+0xa4>
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f0:	4a0c      	ldr	r2, [pc, #48]	; (800d424 <xTaskPriorityDisinherit+0xd4>)
 800d3f2:	6013      	str	r3, [r2, #0]
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3f8:	4613      	mov	r3, r2
 800d3fa:	009b      	lsls	r3, r3, #2
 800d3fc:	4413      	add	r3, r2
 800d3fe:	009b      	lsls	r3, r3, #2
 800d400:	4a09      	ldr	r2, [pc, #36]	; (800d428 <xTaskPriorityDisinherit+0xd8>)
 800d402:	441a      	add	r2, r3
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	3304      	adds	r3, #4
 800d408:	4619      	mov	r1, r3
 800d40a:	4610      	mov	r0, r2
 800d40c:	f7fe f93b 	bl	800b686 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d410:	2301      	movs	r3, #1
 800d412:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d414:	697b      	ldr	r3, [r7, #20]
	}
 800d416:	4618      	mov	r0, r3
 800d418:	3718      	adds	r7, #24
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	20000fe0 	.word	0x20000fe0
 800d424:	200014bc 	.word	0x200014bc
 800d428:	20000fe4 	.word	0x20000fe4

0800d42c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b088      	sub	sp, #32
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d43a:	2301      	movs	r3, #1
 800d43c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d06a      	beq.n	800d51a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d444:	69bb      	ldr	r3, [r7, #24]
 800d446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d10a      	bne.n	800d462 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d450:	f383 8811 	msr	BASEPRI, r3
 800d454:	f3bf 8f6f 	isb	sy
 800d458:	f3bf 8f4f 	dsb	sy
 800d45c:	60fb      	str	r3, [r7, #12]
}
 800d45e:	bf00      	nop
 800d460:	e7fe      	b.n	800d460 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d462:	69bb      	ldr	r3, [r7, #24]
 800d464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d466:	683a      	ldr	r2, [r7, #0]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d902      	bls.n	800d472 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	61fb      	str	r3, [r7, #28]
 800d470:	e002      	b.n	800d478 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d472:	69bb      	ldr	r3, [r7, #24]
 800d474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d476:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d478:	69bb      	ldr	r3, [r7, #24]
 800d47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d47c:	69fa      	ldr	r2, [r7, #28]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d04b      	beq.n	800d51a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d482:	69bb      	ldr	r3, [r7, #24]
 800d484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d486:	697a      	ldr	r2, [r7, #20]
 800d488:	429a      	cmp	r2, r3
 800d48a:	d146      	bne.n	800d51a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d48c:	4b25      	ldr	r3, [pc, #148]	; (800d524 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	69ba      	ldr	r2, [r7, #24]
 800d492:	429a      	cmp	r2, r3
 800d494:	d10a      	bne.n	800d4ac <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49a:	f383 8811 	msr	BASEPRI, r3
 800d49e:	f3bf 8f6f 	isb	sy
 800d4a2:	f3bf 8f4f 	dsb	sy
 800d4a6:	60bb      	str	r3, [r7, #8]
}
 800d4a8:	bf00      	nop
 800d4aa:	e7fe      	b.n	800d4aa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d4ac:	69bb      	ldr	r3, [r7, #24]
 800d4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	69fa      	ldr	r2, [r7, #28]
 800d4b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d4b8:	69bb      	ldr	r3, [r7, #24]
 800d4ba:	699b      	ldr	r3, [r3, #24]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	db04      	blt.n	800d4ca <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4c0:	69fb      	ldr	r3, [r7, #28]
 800d4c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d4ca:	69bb      	ldr	r3, [r7, #24]
 800d4cc:	6959      	ldr	r1, [r3, #20]
 800d4ce:	693a      	ldr	r2, [r7, #16]
 800d4d0:	4613      	mov	r3, r2
 800d4d2:	009b      	lsls	r3, r3, #2
 800d4d4:	4413      	add	r3, r2
 800d4d6:	009b      	lsls	r3, r3, #2
 800d4d8:	4a13      	ldr	r2, [pc, #76]	; (800d528 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d4da:	4413      	add	r3, r2
 800d4dc:	4299      	cmp	r1, r3
 800d4de:	d11c      	bne.n	800d51a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4e0:	69bb      	ldr	r3, [r7, #24]
 800d4e2:	3304      	adds	r3, #4
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7fe f92b 	bl	800b740 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d4ea:	69bb      	ldr	r3, [r7, #24]
 800d4ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4ee:	4b0f      	ldr	r3, [pc, #60]	; (800d52c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d903      	bls.n	800d4fe <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d4f6:	69bb      	ldr	r3, [r7, #24]
 800d4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4fa:	4a0c      	ldr	r2, [pc, #48]	; (800d52c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d4fc:	6013      	str	r3, [r2, #0]
 800d4fe:	69bb      	ldr	r3, [r7, #24]
 800d500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d502:	4613      	mov	r3, r2
 800d504:	009b      	lsls	r3, r3, #2
 800d506:	4413      	add	r3, r2
 800d508:	009b      	lsls	r3, r3, #2
 800d50a:	4a07      	ldr	r2, [pc, #28]	; (800d528 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d50c:	441a      	add	r2, r3
 800d50e:	69bb      	ldr	r3, [r7, #24]
 800d510:	3304      	adds	r3, #4
 800d512:	4619      	mov	r1, r3
 800d514:	4610      	mov	r0, r2
 800d516:	f7fe f8b6 	bl	800b686 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d51a:	bf00      	nop
 800d51c:	3720      	adds	r7, #32
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
 800d522:	bf00      	nop
 800d524:	20000fe0 	.word	0x20000fe0
 800d528:	20000fe4 	.word	0x20000fe4
 800d52c:	200014bc 	.word	0x200014bc

0800d530 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d530:	b480      	push	{r7}
 800d532:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d534:	4b07      	ldr	r3, [pc, #28]	; (800d554 <pvTaskIncrementMutexHeldCount+0x24>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d004      	beq.n	800d546 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d53c:	4b05      	ldr	r3, [pc, #20]	; (800d554 <pvTaskIncrementMutexHeldCount+0x24>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d542:	3201      	adds	r2, #1
 800d544:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d546:	4b03      	ldr	r3, [pc, #12]	; (800d554 <pvTaskIncrementMutexHeldCount+0x24>)
 800d548:	681b      	ldr	r3, [r3, #0]
	}
 800d54a:	4618      	mov	r0, r3
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr
 800d554:	20000fe0 	.word	0x20000fe0

0800d558 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d562:	4b21      	ldr	r3, [pc, #132]	; (800d5e8 <prvAddCurrentTaskToDelayedList+0x90>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d568:	4b20      	ldr	r3, [pc, #128]	; (800d5ec <prvAddCurrentTaskToDelayedList+0x94>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	3304      	adds	r3, #4
 800d56e:	4618      	mov	r0, r3
 800d570:	f7fe f8e6 	bl	800b740 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d57a:	d10a      	bne.n	800d592 <prvAddCurrentTaskToDelayedList+0x3a>
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d007      	beq.n	800d592 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d582:	4b1a      	ldr	r3, [pc, #104]	; (800d5ec <prvAddCurrentTaskToDelayedList+0x94>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	3304      	adds	r3, #4
 800d588:	4619      	mov	r1, r3
 800d58a:	4819      	ldr	r0, [pc, #100]	; (800d5f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800d58c:	f7fe f87b 	bl	800b686 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d590:	e026      	b.n	800d5e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d592:	68fa      	ldr	r2, [r7, #12]
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	4413      	add	r3, r2
 800d598:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d59a:	4b14      	ldr	r3, [pc, #80]	; (800d5ec <prvAddCurrentTaskToDelayedList+0x94>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	68ba      	ldr	r2, [r7, #8]
 800d5a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d5a2:	68ba      	ldr	r2, [r7, #8]
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d209      	bcs.n	800d5be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5aa:	4b12      	ldr	r3, [pc, #72]	; (800d5f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d5ac:	681a      	ldr	r2, [r3, #0]
 800d5ae:	4b0f      	ldr	r3, [pc, #60]	; (800d5ec <prvAddCurrentTaskToDelayedList+0x94>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	3304      	adds	r3, #4
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	4610      	mov	r0, r2
 800d5b8:	f7fe f889 	bl	800b6ce <vListInsert>
}
 800d5bc:	e010      	b.n	800d5e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5be:	4b0e      	ldr	r3, [pc, #56]	; (800d5f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	4b0a      	ldr	r3, [pc, #40]	; (800d5ec <prvAddCurrentTaskToDelayedList+0x94>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	3304      	adds	r3, #4
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	4610      	mov	r0, r2
 800d5cc:	f7fe f87f 	bl	800b6ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d5d0:	4b0a      	ldr	r3, [pc, #40]	; (800d5fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	68ba      	ldr	r2, [r7, #8]
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d202      	bcs.n	800d5e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d5da:	4a08      	ldr	r2, [pc, #32]	; (800d5fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	6013      	str	r3, [r2, #0]
}
 800d5e0:	bf00      	nop
 800d5e2:	3710      	adds	r7, #16
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	200014b8 	.word	0x200014b8
 800d5ec:	20000fe0 	.word	0x20000fe0
 800d5f0:	200014a0 	.word	0x200014a0
 800d5f4:	20001470 	.word	0x20001470
 800d5f8:	2000146c 	.word	0x2000146c
 800d5fc:	200014d4 	.word	0x200014d4

0800d600 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b08a      	sub	sp, #40	; 0x28
 800d604:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d606:	2300      	movs	r3, #0
 800d608:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d60a:	f000 fb07 	bl	800dc1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d60e:	4b1c      	ldr	r3, [pc, #112]	; (800d680 <xTimerCreateTimerTask+0x80>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d021      	beq.n	800d65a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d616:	2300      	movs	r3, #0
 800d618:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d61a:	2300      	movs	r3, #0
 800d61c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d61e:	1d3a      	adds	r2, r7, #4
 800d620:	f107 0108 	add.w	r1, r7, #8
 800d624:	f107 030c 	add.w	r3, r7, #12
 800d628:	4618      	mov	r0, r3
 800d62a:	f7fd ffe5 	bl	800b5f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d62e:	6879      	ldr	r1, [r7, #4]
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	68fa      	ldr	r2, [r7, #12]
 800d634:	9202      	str	r2, [sp, #8]
 800d636:	9301      	str	r3, [sp, #4]
 800d638:	2302      	movs	r3, #2
 800d63a:	9300      	str	r3, [sp, #0]
 800d63c:	2300      	movs	r3, #0
 800d63e:	460a      	mov	r2, r1
 800d640:	4910      	ldr	r1, [pc, #64]	; (800d684 <xTimerCreateTimerTask+0x84>)
 800d642:	4811      	ldr	r0, [pc, #68]	; (800d688 <xTimerCreateTimerTask+0x88>)
 800d644:	f7fe ffa6 	bl	800c594 <xTaskCreateStatic>
 800d648:	4603      	mov	r3, r0
 800d64a:	4a10      	ldr	r2, [pc, #64]	; (800d68c <xTimerCreateTimerTask+0x8c>)
 800d64c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d64e:	4b0f      	ldr	r3, [pc, #60]	; (800d68c <xTimerCreateTimerTask+0x8c>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d001      	beq.n	800d65a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d656:	2301      	movs	r3, #1
 800d658:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d10a      	bne.n	800d676 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d664:	f383 8811 	msr	BASEPRI, r3
 800d668:	f3bf 8f6f 	isb	sy
 800d66c:	f3bf 8f4f 	dsb	sy
 800d670:	613b      	str	r3, [r7, #16]
}
 800d672:	bf00      	nop
 800d674:	e7fe      	b.n	800d674 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d676:	697b      	ldr	r3, [r7, #20]
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3718      	adds	r7, #24
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	20001510 	.word	0x20001510
 800d684:	0800f574 	.word	0x0800f574
 800d688:	0800d7c5 	.word	0x0800d7c5
 800d68c:	20001514 	.word	0x20001514

0800d690 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b08a      	sub	sp, #40	; 0x28
 800d694:	af00      	add	r7, sp, #0
 800d696:	60f8      	str	r0, [r7, #12]
 800d698:	60b9      	str	r1, [r7, #8]
 800d69a:	607a      	str	r2, [r7, #4]
 800d69c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d10a      	bne.n	800d6be <xTimerGenericCommand+0x2e>
	__asm volatile
 800d6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ac:	f383 8811 	msr	BASEPRI, r3
 800d6b0:	f3bf 8f6f 	isb	sy
 800d6b4:	f3bf 8f4f 	dsb	sy
 800d6b8:	623b      	str	r3, [r7, #32]
}
 800d6ba:	bf00      	nop
 800d6bc:	e7fe      	b.n	800d6bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d6be:	4b1a      	ldr	r3, [pc, #104]	; (800d728 <xTimerGenericCommand+0x98>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d02a      	beq.n	800d71c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	2b05      	cmp	r3, #5
 800d6d6:	dc18      	bgt.n	800d70a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d6d8:	f7ff fdb4 	bl	800d244 <xTaskGetSchedulerState>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b02      	cmp	r3, #2
 800d6e0:	d109      	bne.n	800d6f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d6e2:	4b11      	ldr	r3, [pc, #68]	; (800d728 <xTimerGenericCommand+0x98>)
 800d6e4:	6818      	ldr	r0, [r3, #0]
 800d6e6:	f107 0110 	add.w	r1, r7, #16
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6ee:	f7fe fa45 	bl	800bb7c <xQueueGenericSend>
 800d6f2:	6278      	str	r0, [r7, #36]	; 0x24
 800d6f4:	e012      	b.n	800d71c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d6f6:	4b0c      	ldr	r3, [pc, #48]	; (800d728 <xTimerGenericCommand+0x98>)
 800d6f8:	6818      	ldr	r0, [r3, #0]
 800d6fa:	f107 0110 	add.w	r1, r7, #16
 800d6fe:	2300      	movs	r3, #0
 800d700:	2200      	movs	r2, #0
 800d702:	f7fe fa3b 	bl	800bb7c <xQueueGenericSend>
 800d706:	6278      	str	r0, [r7, #36]	; 0x24
 800d708:	e008      	b.n	800d71c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d70a:	4b07      	ldr	r3, [pc, #28]	; (800d728 <xTimerGenericCommand+0x98>)
 800d70c:	6818      	ldr	r0, [r3, #0]
 800d70e:	f107 0110 	add.w	r1, r7, #16
 800d712:	2300      	movs	r3, #0
 800d714:	683a      	ldr	r2, [r7, #0]
 800d716:	f7fe fb2f 	bl	800bd78 <xQueueGenericSendFromISR>
 800d71a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3728      	adds	r7, #40	; 0x28
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	20001510 	.word	0x20001510

0800d72c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b088      	sub	sp, #32
 800d730:	af02      	add	r7, sp, #8
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d736:	4b22      	ldr	r3, [pc, #136]	; (800d7c0 <prvProcessExpiredTimer+0x94>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	68db      	ldr	r3, [r3, #12]
 800d73c:	68db      	ldr	r3, [r3, #12]
 800d73e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	3304      	adds	r3, #4
 800d744:	4618      	mov	r0, r3
 800d746:	f7fd fffb 	bl	800b740 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d750:	f003 0304 	and.w	r3, r3, #4
 800d754:	2b00      	cmp	r3, #0
 800d756:	d022      	beq.n	800d79e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	699a      	ldr	r2, [r3, #24]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	18d1      	adds	r1, r2, r3
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	683a      	ldr	r2, [r7, #0]
 800d764:	6978      	ldr	r0, [r7, #20]
 800d766:	f000 f8d1 	bl	800d90c <prvInsertTimerInActiveList>
 800d76a:	4603      	mov	r3, r0
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d01f      	beq.n	800d7b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d770:	2300      	movs	r3, #0
 800d772:	9300      	str	r3, [sp, #0]
 800d774:	2300      	movs	r3, #0
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	2100      	movs	r1, #0
 800d77a:	6978      	ldr	r0, [r7, #20]
 800d77c:	f7ff ff88 	bl	800d690 <xTimerGenericCommand>
 800d780:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d113      	bne.n	800d7b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d78c:	f383 8811 	msr	BASEPRI, r3
 800d790:	f3bf 8f6f 	isb	sy
 800d794:	f3bf 8f4f 	dsb	sy
 800d798:	60fb      	str	r3, [r7, #12]
}
 800d79a:	bf00      	nop
 800d79c:	e7fe      	b.n	800d79c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7a4:	f023 0301 	bic.w	r3, r3, #1
 800d7a8:	b2da      	uxtb	r2, r3
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	6a1b      	ldr	r3, [r3, #32]
 800d7b4:	6978      	ldr	r0, [r7, #20]
 800d7b6:	4798      	blx	r3
}
 800d7b8:	bf00      	nop
 800d7ba:	3718      	adds	r7, #24
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}
 800d7c0:	20001508 	.word	0x20001508

0800d7c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d7cc:	f107 0308 	add.w	r3, r7, #8
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f000 f857 	bl	800d884 <prvGetNextExpireTime>
 800d7d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	4619      	mov	r1, r3
 800d7dc:	68f8      	ldr	r0, [r7, #12]
 800d7de:	f000 f803 	bl	800d7e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d7e2:	f000 f8d5 	bl	800d990 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d7e6:	e7f1      	b.n	800d7cc <prvTimerTask+0x8>

0800d7e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d7f2:	f7ff f92b 	bl	800ca4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d7f6:	f107 0308 	add.w	r3, r7, #8
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f000 f866 	bl	800d8cc <prvSampleTimeNow>
 800d800:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d130      	bne.n	800d86a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d10a      	bne.n	800d824 <prvProcessTimerOrBlockTask+0x3c>
 800d80e:	687a      	ldr	r2, [r7, #4]
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	429a      	cmp	r2, r3
 800d814:	d806      	bhi.n	800d824 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d816:	f7ff f927 	bl	800ca68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d81a:	68f9      	ldr	r1, [r7, #12]
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f7ff ff85 	bl	800d72c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d822:	e024      	b.n	800d86e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d008      	beq.n	800d83c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d82a:	4b13      	ldr	r3, [pc, #76]	; (800d878 <prvProcessTimerOrBlockTask+0x90>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d101      	bne.n	800d838 <prvProcessTimerOrBlockTask+0x50>
 800d834:	2301      	movs	r3, #1
 800d836:	e000      	b.n	800d83a <prvProcessTimerOrBlockTask+0x52>
 800d838:	2300      	movs	r3, #0
 800d83a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d83c:	4b0f      	ldr	r3, [pc, #60]	; (800d87c <prvProcessTimerOrBlockTask+0x94>)
 800d83e:	6818      	ldr	r0, [r3, #0]
 800d840:	687a      	ldr	r2, [r7, #4]
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	1ad3      	subs	r3, r2, r3
 800d846:	683a      	ldr	r2, [r7, #0]
 800d848:	4619      	mov	r1, r3
 800d84a:	f7fe fe6f 	bl	800c52c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d84e:	f7ff f90b 	bl	800ca68 <xTaskResumeAll>
 800d852:	4603      	mov	r3, r0
 800d854:	2b00      	cmp	r3, #0
 800d856:	d10a      	bne.n	800d86e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d858:	4b09      	ldr	r3, [pc, #36]	; (800d880 <prvProcessTimerOrBlockTask+0x98>)
 800d85a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d85e:	601a      	str	r2, [r3, #0]
 800d860:	f3bf 8f4f 	dsb	sy
 800d864:	f3bf 8f6f 	isb	sy
}
 800d868:	e001      	b.n	800d86e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d86a:	f7ff f8fd 	bl	800ca68 <xTaskResumeAll>
}
 800d86e:	bf00      	nop
 800d870:	3710      	adds	r7, #16
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
 800d876:	bf00      	nop
 800d878:	2000150c 	.word	0x2000150c
 800d87c:	20001510 	.word	0x20001510
 800d880:	e000ed04 	.word	0xe000ed04

0800d884 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d88c:	4b0e      	ldr	r3, [pc, #56]	; (800d8c8 <prvGetNextExpireTime+0x44>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d101      	bne.n	800d89a <prvGetNextExpireTime+0x16>
 800d896:	2201      	movs	r2, #1
 800d898:	e000      	b.n	800d89c <prvGetNextExpireTime+0x18>
 800d89a:	2200      	movs	r2, #0
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d105      	bne.n	800d8b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d8a8:	4b07      	ldr	r3, [pc, #28]	; (800d8c8 <prvGetNextExpireTime+0x44>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	68db      	ldr	r3, [r3, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	60fb      	str	r3, [r7, #12]
 800d8b2:	e001      	b.n	800d8b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3714      	adds	r7, #20
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c4:	4770      	bx	lr
 800d8c6:	bf00      	nop
 800d8c8:	20001508 	.word	0x20001508

0800d8cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d8d4:	f7ff f966 	bl	800cba4 <xTaskGetTickCount>
 800d8d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d8da:	4b0b      	ldr	r3, [pc, #44]	; (800d908 <prvSampleTimeNow+0x3c>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	68fa      	ldr	r2, [r7, #12]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d205      	bcs.n	800d8f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d8e4:	f000 f936 	bl	800db54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	601a      	str	r2, [r3, #0]
 800d8ee:	e002      	b.n	800d8f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d8f6:	4a04      	ldr	r2, [pc, #16]	; (800d908 <prvSampleTimeNow+0x3c>)
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3710      	adds	r7, #16
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}
 800d906:	bf00      	nop
 800d908:	20001518 	.word	0x20001518

0800d90c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b086      	sub	sp, #24
 800d910:	af00      	add	r7, sp, #0
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	60b9      	str	r1, [r7, #8]
 800d916:	607a      	str	r2, [r7, #4]
 800d918:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d91a:	2300      	movs	r3, #0
 800d91c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	68ba      	ldr	r2, [r7, #8]
 800d922:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	68fa      	ldr	r2, [r7, #12]
 800d928:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d92a:	68ba      	ldr	r2, [r7, #8]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	429a      	cmp	r2, r3
 800d930:	d812      	bhi.n	800d958 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	1ad2      	subs	r2, r2, r3
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	699b      	ldr	r3, [r3, #24]
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d302      	bcc.n	800d946 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d940:	2301      	movs	r3, #1
 800d942:	617b      	str	r3, [r7, #20]
 800d944:	e01b      	b.n	800d97e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d946:	4b10      	ldr	r3, [pc, #64]	; (800d988 <prvInsertTimerInActiveList+0x7c>)
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	3304      	adds	r3, #4
 800d94e:	4619      	mov	r1, r3
 800d950:	4610      	mov	r0, r2
 800d952:	f7fd febc 	bl	800b6ce <vListInsert>
 800d956:	e012      	b.n	800d97e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d958:	687a      	ldr	r2, [r7, #4]
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d206      	bcs.n	800d96e <prvInsertTimerInActiveList+0x62>
 800d960:	68ba      	ldr	r2, [r7, #8]
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	429a      	cmp	r2, r3
 800d966:	d302      	bcc.n	800d96e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d968:	2301      	movs	r3, #1
 800d96a:	617b      	str	r3, [r7, #20]
 800d96c:	e007      	b.n	800d97e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d96e:	4b07      	ldr	r3, [pc, #28]	; (800d98c <prvInsertTimerInActiveList+0x80>)
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	3304      	adds	r3, #4
 800d976:	4619      	mov	r1, r3
 800d978:	4610      	mov	r0, r2
 800d97a:	f7fd fea8 	bl	800b6ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d97e:	697b      	ldr	r3, [r7, #20]
}
 800d980:	4618      	mov	r0, r3
 800d982:	3718      	adds	r7, #24
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}
 800d988:	2000150c 	.word	0x2000150c
 800d98c:	20001508 	.word	0x20001508

0800d990 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b08e      	sub	sp, #56	; 0x38
 800d994:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d996:	e0ca      	b.n	800db2e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	da18      	bge.n	800d9d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d99e:	1d3b      	adds	r3, r7, #4
 800d9a0:	3304      	adds	r3, #4
 800d9a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d10a      	bne.n	800d9c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ae:	f383 8811 	msr	BASEPRI, r3
 800d9b2:	f3bf 8f6f 	isb	sy
 800d9b6:	f3bf 8f4f 	dsb	sy
 800d9ba:	61fb      	str	r3, [r7, #28]
}
 800d9bc:	bf00      	nop
 800d9be:	e7fe      	b.n	800d9be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9c6:	6850      	ldr	r0, [r2, #4]
 800d9c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9ca:	6892      	ldr	r2, [r2, #8]
 800d9cc:	4611      	mov	r1, r2
 800d9ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	f2c0 80aa 	blt.w	800db2c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9de:	695b      	ldr	r3, [r3, #20]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d004      	beq.n	800d9ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e6:	3304      	adds	r3, #4
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f7fd fea9 	bl	800b740 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d9ee:	463b      	mov	r3, r7
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f7ff ff6b 	bl	800d8cc <prvSampleTimeNow>
 800d9f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2b09      	cmp	r3, #9
 800d9fc:	f200 8097 	bhi.w	800db2e <prvProcessReceivedCommands+0x19e>
 800da00:	a201      	add	r2, pc, #4	; (adr r2, 800da08 <prvProcessReceivedCommands+0x78>)
 800da02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da06:	bf00      	nop
 800da08:	0800da31 	.word	0x0800da31
 800da0c:	0800da31 	.word	0x0800da31
 800da10:	0800da31 	.word	0x0800da31
 800da14:	0800daa5 	.word	0x0800daa5
 800da18:	0800dab9 	.word	0x0800dab9
 800da1c:	0800db03 	.word	0x0800db03
 800da20:	0800da31 	.word	0x0800da31
 800da24:	0800da31 	.word	0x0800da31
 800da28:	0800daa5 	.word	0x0800daa5
 800da2c:	0800dab9 	.word	0x0800dab9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800da30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da36:	f043 0301 	orr.w	r3, r3, #1
 800da3a:	b2da      	uxtb	r2, r3
 800da3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800da42:	68ba      	ldr	r2, [r7, #8]
 800da44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da46:	699b      	ldr	r3, [r3, #24]
 800da48:	18d1      	adds	r1, r2, r3
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da50:	f7ff ff5c 	bl	800d90c <prvInsertTimerInActiveList>
 800da54:	4603      	mov	r3, r0
 800da56:	2b00      	cmp	r3, #0
 800da58:	d069      	beq.n	800db2e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da5c:	6a1b      	ldr	r3, [r3, #32]
 800da5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da68:	f003 0304 	and.w	r3, r3, #4
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d05e      	beq.n	800db2e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800da70:	68ba      	ldr	r2, [r7, #8]
 800da72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da74:	699b      	ldr	r3, [r3, #24]
 800da76:	441a      	add	r2, r3
 800da78:	2300      	movs	r3, #0
 800da7a:	9300      	str	r3, [sp, #0]
 800da7c:	2300      	movs	r3, #0
 800da7e:	2100      	movs	r1, #0
 800da80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da82:	f7ff fe05 	bl	800d690 <xTimerGenericCommand>
 800da86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800da88:	6a3b      	ldr	r3, [r7, #32]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d14f      	bne.n	800db2e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800da8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da92:	f383 8811 	msr	BASEPRI, r3
 800da96:	f3bf 8f6f 	isb	sy
 800da9a:	f3bf 8f4f 	dsb	sy
 800da9e:	61bb      	str	r3, [r7, #24]
}
 800daa0:	bf00      	nop
 800daa2:	e7fe      	b.n	800daa2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800daa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800daaa:	f023 0301 	bic.w	r3, r3, #1
 800daae:	b2da      	uxtb	r2, r3
 800dab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dab6:	e03a      	b.n	800db2e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dabe:	f043 0301 	orr.w	r3, r3, #1
 800dac2:	b2da      	uxtb	r2, r3
 800dac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800daca:	68ba      	ldr	r2, [r7, #8]
 800dacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dace:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad2:	699b      	ldr	r3, [r3, #24]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d10a      	bne.n	800daee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800dad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dadc:	f383 8811 	msr	BASEPRI, r3
 800dae0:	f3bf 8f6f 	isb	sy
 800dae4:	f3bf 8f4f 	dsb	sy
 800dae8:	617b      	str	r3, [r7, #20]
}
 800daea:	bf00      	nop
 800daec:	e7fe      	b.n	800daec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800daee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf0:	699a      	ldr	r2, [r3, #24]
 800daf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf4:	18d1      	adds	r1, r2, r3
 800daf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dafa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dafc:	f7ff ff06 	bl	800d90c <prvInsertTimerInActiveList>
					break;
 800db00:	e015      	b.n	800db2e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800db02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db08:	f003 0302 	and.w	r3, r3, #2
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d103      	bne.n	800db18 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800db10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db12:	f000 fbdd 	bl	800e2d0 <vPortFree>
 800db16:	e00a      	b.n	800db2e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db1e:	f023 0301 	bic.w	r3, r3, #1
 800db22:	b2da      	uxtb	r2, r3
 800db24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800db2a:	e000      	b.n	800db2e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800db2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db2e:	4b08      	ldr	r3, [pc, #32]	; (800db50 <prvProcessReceivedCommands+0x1c0>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	1d39      	adds	r1, r7, #4
 800db34:	2200      	movs	r2, #0
 800db36:	4618      	mov	r0, r3
 800db38:	f7fe f9ba 	bl	800beb0 <xQueueReceive>
 800db3c:	4603      	mov	r3, r0
 800db3e:	2b00      	cmp	r3, #0
 800db40:	f47f af2a 	bne.w	800d998 <prvProcessReceivedCommands+0x8>
	}
}
 800db44:	bf00      	nop
 800db46:	bf00      	nop
 800db48:	3730      	adds	r7, #48	; 0x30
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
 800db4e:	bf00      	nop
 800db50:	20001510 	.word	0x20001510

0800db54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b088      	sub	sp, #32
 800db58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800db5a:	e048      	b.n	800dbee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db5c:	4b2d      	ldr	r3, [pc, #180]	; (800dc14 <prvSwitchTimerLists+0xc0>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	68db      	ldr	r3, [r3, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db66:	4b2b      	ldr	r3, [pc, #172]	; (800dc14 <prvSwitchTimerLists+0xc0>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	68db      	ldr	r3, [r3, #12]
 800db6c:	68db      	ldr	r3, [r3, #12]
 800db6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	3304      	adds	r3, #4
 800db74:	4618      	mov	r0, r3
 800db76:	f7fd fde3 	bl	800b740 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	6a1b      	ldr	r3, [r3, #32]
 800db7e:	68f8      	ldr	r0, [r7, #12]
 800db80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db88:	f003 0304 	and.w	r3, r3, #4
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d02e      	beq.n	800dbee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	699b      	ldr	r3, [r3, #24]
 800db94:	693a      	ldr	r2, [r7, #16]
 800db96:	4413      	add	r3, r2
 800db98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800db9a:	68ba      	ldr	r2, [r7, #8]
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	429a      	cmp	r2, r3
 800dba0:	d90e      	bls.n	800dbc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	68ba      	ldr	r2, [r7, #8]
 800dba6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	68fa      	ldr	r2, [r7, #12]
 800dbac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dbae:	4b19      	ldr	r3, [pc, #100]	; (800dc14 <prvSwitchTimerLists+0xc0>)
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	3304      	adds	r3, #4
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	4610      	mov	r0, r2
 800dbba:	f7fd fd88 	bl	800b6ce <vListInsert>
 800dbbe:	e016      	b.n	800dbee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	9300      	str	r3, [sp, #0]
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	693a      	ldr	r2, [r7, #16]
 800dbc8:	2100      	movs	r1, #0
 800dbca:	68f8      	ldr	r0, [r7, #12]
 800dbcc:	f7ff fd60 	bl	800d690 <xTimerGenericCommand>
 800dbd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d10a      	bne.n	800dbee <prvSwitchTimerLists+0x9a>
	__asm volatile
 800dbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbdc:	f383 8811 	msr	BASEPRI, r3
 800dbe0:	f3bf 8f6f 	isb	sy
 800dbe4:	f3bf 8f4f 	dsb	sy
 800dbe8:	603b      	str	r3, [r7, #0]
}
 800dbea:	bf00      	nop
 800dbec:	e7fe      	b.n	800dbec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dbee:	4b09      	ldr	r3, [pc, #36]	; (800dc14 <prvSwitchTimerLists+0xc0>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d1b1      	bne.n	800db5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dbf8:	4b06      	ldr	r3, [pc, #24]	; (800dc14 <prvSwitchTimerLists+0xc0>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dbfe:	4b06      	ldr	r3, [pc, #24]	; (800dc18 <prvSwitchTimerLists+0xc4>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	4a04      	ldr	r2, [pc, #16]	; (800dc14 <prvSwitchTimerLists+0xc0>)
 800dc04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dc06:	4a04      	ldr	r2, [pc, #16]	; (800dc18 <prvSwitchTimerLists+0xc4>)
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	6013      	str	r3, [r2, #0]
}
 800dc0c:	bf00      	nop
 800dc0e:	3718      	adds	r7, #24
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}
 800dc14:	20001508 	.word	0x20001508
 800dc18:	2000150c 	.word	0x2000150c

0800dc1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b082      	sub	sp, #8
 800dc20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dc22:	f000 f967 	bl	800def4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dc26:	4b15      	ldr	r3, [pc, #84]	; (800dc7c <prvCheckForValidListAndQueue+0x60>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d120      	bne.n	800dc70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dc2e:	4814      	ldr	r0, [pc, #80]	; (800dc80 <prvCheckForValidListAndQueue+0x64>)
 800dc30:	f7fd fcfc 	bl	800b62c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dc34:	4813      	ldr	r0, [pc, #76]	; (800dc84 <prvCheckForValidListAndQueue+0x68>)
 800dc36:	f7fd fcf9 	bl	800b62c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dc3a:	4b13      	ldr	r3, [pc, #76]	; (800dc88 <prvCheckForValidListAndQueue+0x6c>)
 800dc3c:	4a10      	ldr	r2, [pc, #64]	; (800dc80 <prvCheckForValidListAndQueue+0x64>)
 800dc3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dc40:	4b12      	ldr	r3, [pc, #72]	; (800dc8c <prvCheckForValidListAndQueue+0x70>)
 800dc42:	4a10      	ldr	r2, [pc, #64]	; (800dc84 <prvCheckForValidListAndQueue+0x68>)
 800dc44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dc46:	2300      	movs	r3, #0
 800dc48:	9300      	str	r3, [sp, #0]
 800dc4a:	4b11      	ldr	r3, [pc, #68]	; (800dc90 <prvCheckForValidListAndQueue+0x74>)
 800dc4c:	4a11      	ldr	r2, [pc, #68]	; (800dc94 <prvCheckForValidListAndQueue+0x78>)
 800dc4e:	2110      	movs	r1, #16
 800dc50:	200a      	movs	r0, #10
 800dc52:	f7fd fe07 	bl	800b864 <xQueueGenericCreateStatic>
 800dc56:	4603      	mov	r3, r0
 800dc58:	4a08      	ldr	r2, [pc, #32]	; (800dc7c <prvCheckForValidListAndQueue+0x60>)
 800dc5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dc5c:	4b07      	ldr	r3, [pc, #28]	; (800dc7c <prvCheckForValidListAndQueue+0x60>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d005      	beq.n	800dc70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dc64:	4b05      	ldr	r3, [pc, #20]	; (800dc7c <prvCheckForValidListAndQueue+0x60>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	490b      	ldr	r1, [pc, #44]	; (800dc98 <prvCheckForValidListAndQueue+0x7c>)
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7fe fc34 	bl	800c4d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc70:	f000 f970 	bl	800df54 <vPortExitCritical>
}
 800dc74:	bf00      	nop
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
 800dc7a:	bf00      	nop
 800dc7c:	20001510 	.word	0x20001510
 800dc80:	200014e0 	.word	0x200014e0
 800dc84:	200014f4 	.word	0x200014f4
 800dc88:	20001508 	.word	0x20001508
 800dc8c:	2000150c 	.word	0x2000150c
 800dc90:	200015bc 	.word	0x200015bc
 800dc94:	2000151c 	.word	0x2000151c
 800dc98:	0800f57c 	.word	0x0800f57c

0800dc9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b085      	sub	sp, #20
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	60f8      	str	r0, [r7, #12]
 800dca4:	60b9      	str	r1, [r7, #8]
 800dca6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	3b04      	subs	r3, #4
 800dcac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dcb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	3b04      	subs	r3, #4
 800dcba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	f023 0201 	bic.w	r2, r3, #1
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	3b04      	subs	r3, #4
 800dcca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dccc:	4a0c      	ldr	r2, [pc, #48]	; (800dd00 <pxPortInitialiseStack+0x64>)
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	3b14      	subs	r3, #20
 800dcd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dcd8:	687a      	ldr	r2, [r7, #4]
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	3b04      	subs	r3, #4
 800dce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	f06f 0202 	mvn.w	r2, #2
 800dcea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	3b20      	subs	r3, #32
 800dcf0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3714      	adds	r7, #20
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr
 800dd00:	0800dd05 	.word	0x0800dd05

0800dd04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dd04:	b480      	push	{r7}
 800dd06:	b085      	sub	sp, #20
 800dd08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dd0e:	4b12      	ldr	r3, [pc, #72]	; (800dd58 <prvTaskExitError+0x54>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd16:	d00a      	beq.n	800dd2e <prvTaskExitError+0x2a>
	__asm volatile
 800dd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd1c:	f383 8811 	msr	BASEPRI, r3
 800dd20:	f3bf 8f6f 	isb	sy
 800dd24:	f3bf 8f4f 	dsb	sy
 800dd28:	60fb      	str	r3, [r7, #12]
}
 800dd2a:	bf00      	nop
 800dd2c:	e7fe      	b.n	800dd2c <prvTaskExitError+0x28>
	__asm volatile
 800dd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd32:	f383 8811 	msr	BASEPRI, r3
 800dd36:	f3bf 8f6f 	isb	sy
 800dd3a:	f3bf 8f4f 	dsb	sy
 800dd3e:	60bb      	str	r3, [r7, #8]
}
 800dd40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dd42:	bf00      	nop
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d0fc      	beq.n	800dd44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dd4a:	bf00      	nop
 800dd4c:	bf00      	nop
 800dd4e:	3714      	adds	r7, #20
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr
 800dd58:	200000cc 	.word	0x200000cc
 800dd5c:	00000000 	.word	0x00000000

0800dd60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dd60:	4b07      	ldr	r3, [pc, #28]	; (800dd80 <pxCurrentTCBConst2>)
 800dd62:	6819      	ldr	r1, [r3, #0]
 800dd64:	6808      	ldr	r0, [r1, #0]
 800dd66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd6a:	f380 8809 	msr	PSP, r0
 800dd6e:	f3bf 8f6f 	isb	sy
 800dd72:	f04f 0000 	mov.w	r0, #0
 800dd76:	f380 8811 	msr	BASEPRI, r0
 800dd7a:	4770      	bx	lr
 800dd7c:	f3af 8000 	nop.w

0800dd80 <pxCurrentTCBConst2>:
 800dd80:	20000fe0 	.word	0x20000fe0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dd84:	bf00      	nop
 800dd86:	bf00      	nop

0800dd88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dd88:	4808      	ldr	r0, [pc, #32]	; (800ddac <prvPortStartFirstTask+0x24>)
 800dd8a:	6800      	ldr	r0, [r0, #0]
 800dd8c:	6800      	ldr	r0, [r0, #0]
 800dd8e:	f380 8808 	msr	MSP, r0
 800dd92:	f04f 0000 	mov.w	r0, #0
 800dd96:	f380 8814 	msr	CONTROL, r0
 800dd9a:	b662      	cpsie	i
 800dd9c:	b661      	cpsie	f
 800dd9e:	f3bf 8f4f 	dsb	sy
 800dda2:	f3bf 8f6f 	isb	sy
 800dda6:	df00      	svc	0
 800dda8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ddaa:	bf00      	nop
 800ddac:	e000ed08 	.word	0xe000ed08

0800ddb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b086      	sub	sp, #24
 800ddb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ddb6:	4b46      	ldr	r3, [pc, #280]	; (800ded0 <xPortStartScheduler+0x120>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4a46      	ldr	r2, [pc, #280]	; (800ded4 <xPortStartScheduler+0x124>)
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d10a      	bne.n	800ddd6 <xPortStartScheduler+0x26>
	__asm volatile
 800ddc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc4:	f383 8811 	msr	BASEPRI, r3
 800ddc8:	f3bf 8f6f 	isb	sy
 800ddcc:	f3bf 8f4f 	dsb	sy
 800ddd0:	613b      	str	r3, [r7, #16]
}
 800ddd2:	bf00      	nop
 800ddd4:	e7fe      	b.n	800ddd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ddd6:	4b3e      	ldr	r3, [pc, #248]	; (800ded0 <xPortStartScheduler+0x120>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	4a3f      	ldr	r2, [pc, #252]	; (800ded8 <xPortStartScheduler+0x128>)
 800dddc:	4293      	cmp	r3, r2
 800ddde:	d10a      	bne.n	800ddf6 <xPortStartScheduler+0x46>
	__asm volatile
 800dde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dde4:	f383 8811 	msr	BASEPRI, r3
 800dde8:	f3bf 8f6f 	isb	sy
 800ddec:	f3bf 8f4f 	dsb	sy
 800ddf0:	60fb      	str	r3, [r7, #12]
}
 800ddf2:	bf00      	nop
 800ddf4:	e7fe      	b.n	800ddf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ddf6:	4b39      	ldr	r3, [pc, #228]	; (800dedc <xPortStartScheduler+0x12c>)
 800ddf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	b2db      	uxtb	r3, r3
 800de00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	22ff      	movs	r2, #255	; 0xff
 800de06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	781b      	ldrb	r3, [r3, #0]
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800de10:	78fb      	ldrb	r3, [r7, #3]
 800de12:	b2db      	uxtb	r3, r3
 800de14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800de18:	b2da      	uxtb	r2, r3
 800de1a:	4b31      	ldr	r3, [pc, #196]	; (800dee0 <xPortStartScheduler+0x130>)
 800de1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800de1e:	4b31      	ldr	r3, [pc, #196]	; (800dee4 <xPortStartScheduler+0x134>)
 800de20:	2207      	movs	r2, #7
 800de22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de24:	e009      	b.n	800de3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800de26:	4b2f      	ldr	r3, [pc, #188]	; (800dee4 <xPortStartScheduler+0x134>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	3b01      	subs	r3, #1
 800de2c:	4a2d      	ldr	r2, [pc, #180]	; (800dee4 <xPortStartScheduler+0x134>)
 800de2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800de30:	78fb      	ldrb	r3, [r7, #3]
 800de32:	b2db      	uxtb	r3, r3
 800de34:	005b      	lsls	r3, r3, #1
 800de36:	b2db      	uxtb	r3, r3
 800de38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de3a:	78fb      	ldrb	r3, [r7, #3]
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de42:	2b80      	cmp	r3, #128	; 0x80
 800de44:	d0ef      	beq.n	800de26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800de46:	4b27      	ldr	r3, [pc, #156]	; (800dee4 <xPortStartScheduler+0x134>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f1c3 0307 	rsb	r3, r3, #7
 800de4e:	2b04      	cmp	r3, #4
 800de50:	d00a      	beq.n	800de68 <xPortStartScheduler+0xb8>
	__asm volatile
 800de52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de56:	f383 8811 	msr	BASEPRI, r3
 800de5a:	f3bf 8f6f 	isb	sy
 800de5e:	f3bf 8f4f 	dsb	sy
 800de62:	60bb      	str	r3, [r7, #8]
}
 800de64:	bf00      	nop
 800de66:	e7fe      	b.n	800de66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800de68:	4b1e      	ldr	r3, [pc, #120]	; (800dee4 <xPortStartScheduler+0x134>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	021b      	lsls	r3, r3, #8
 800de6e:	4a1d      	ldr	r2, [pc, #116]	; (800dee4 <xPortStartScheduler+0x134>)
 800de70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800de72:	4b1c      	ldr	r3, [pc, #112]	; (800dee4 <xPortStartScheduler+0x134>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800de7a:	4a1a      	ldr	r2, [pc, #104]	; (800dee4 <xPortStartScheduler+0x134>)
 800de7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	b2da      	uxtb	r2, r3
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800de86:	4b18      	ldr	r3, [pc, #96]	; (800dee8 <xPortStartScheduler+0x138>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	4a17      	ldr	r2, [pc, #92]	; (800dee8 <xPortStartScheduler+0x138>)
 800de8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800de90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800de92:	4b15      	ldr	r3, [pc, #84]	; (800dee8 <xPortStartScheduler+0x138>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	4a14      	ldr	r2, [pc, #80]	; (800dee8 <xPortStartScheduler+0x138>)
 800de98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800de9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800de9e:	f000 f8dd 	bl	800e05c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dea2:	4b12      	ldr	r3, [pc, #72]	; (800deec <xPortStartScheduler+0x13c>)
 800dea4:	2200      	movs	r2, #0
 800dea6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dea8:	f000 f8fc 	bl	800e0a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800deac:	4b10      	ldr	r3, [pc, #64]	; (800def0 <xPortStartScheduler+0x140>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	4a0f      	ldr	r2, [pc, #60]	; (800def0 <xPortStartScheduler+0x140>)
 800deb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800deb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800deb8:	f7ff ff66 	bl	800dd88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800debc:	f7fe ff3c 	bl	800cd38 <vTaskSwitchContext>
	prvTaskExitError();
 800dec0:	f7ff ff20 	bl	800dd04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dec4:	2300      	movs	r3, #0
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3718      	adds	r7, #24
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	e000ed00 	.word	0xe000ed00
 800ded4:	410fc271 	.word	0x410fc271
 800ded8:	410fc270 	.word	0x410fc270
 800dedc:	e000e400 	.word	0xe000e400
 800dee0:	2000160c 	.word	0x2000160c
 800dee4:	20001610 	.word	0x20001610
 800dee8:	e000ed20 	.word	0xe000ed20
 800deec:	200000cc 	.word	0x200000cc
 800def0:	e000ef34 	.word	0xe000ef34

0800def4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800def4:	b480      	push	{r7}
 800def6:	b083      	sub	sp, #12
 800def8:	af00      	add	r7, sp, #0
	__asm volatile
 800defa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800defe:	f383 8811 	msr	BASEPRI, r3
 800df02:	f3bf 8f6f 	isb	sy
 800df06:	f3bf 8f4f 	dsb	sy
 800df0a:	607b      	str	r3, [r7, #4]
}
 800df0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800df0e:	4b0f      	ldr	r3, [pc, #60]	; (800df4c <vPortEnterCritical+0x58>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	3301      	adds	r3, #1
 800df14:	4a0d      	ldr	r2, [pc, #52]	; (800df4c <vPortEnterCritical+0x58>)
 800df16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800df18:	4b0c      	ldr	r3, [pc, #48]	; (800df4c <vPortEnterCritical+0x58>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d10f      	bne.n	800df40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800df20:	4b0b      	ldr	r3, [pc, #44]	; (800df50 <vPortEnterCritical+0x5c>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	b2db      	uxtb	r3, r3
 800df26:	2b00      	cmp	r3, #0
 800df28:	d00a      	beq.n	800df40 <vPortEnterCritical+0x4c>
	__asm volatile
 800df2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df2e:	f383 8811 	msr	BASEPRI, r3
 800df32:	f3bf 8f6f 	isb	sy
 800df36:	f3bf 8f4f 	dsb	sy
 800df3a:	603b      	str	r3, [r7, #0]
}
 800df3c:	bf00      	nop
 800df3e:	e7fe      	b.n	800df3e <vPortEnterCritical+0x4a>
	}
}
 800df40:	bf00      	nop
 800df42:	370c      	adds	r7, #12
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr
 800df4c:	200000cc 	.word	0x200000cc
 800df50:	e000ed04 	.word	0xe000ed04

0800df54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800df54:	b480      	push	{r7}
 800df56:	b083      	sub	sp, #12
 800df58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800df5a:	4b12      	ldr	r3, [pc, #72]	; (800dfa4 <vPortExitCritical+0x50>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d10a      	bne.n	800df78 <vPortExitCritical+0x24>
	__asm volatile
 800df62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df66:	f383 8811 	msr	BASEPRI, r3
 800df6a:	f3bf 8f6f 	isb	sy
 800df6e:	f3bf 8f4f 	dsb	sy
 800df72:	607b      	str	r3, [r7, #4]
}
 800df74:	bf00      	nop
 800df76:	e7fe      	b.n	800df76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800df78:	4b0a      	ldr	r3, [pc, #40]	; (800dfa4 <vPortExitCritical+0x50>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	3b01      	subs	r3, #1
 800df7e:	4a09      	ldr	r2, [pc, #36]	; (800dfa4 <vPortExitCritical+0x50>)
 800df80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800df82:	4b08      	ldr	r3, [pc, #32]	; (800dfa4 <vPortExitCritical+0x50>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d105      	bne.n	800df96 <vPortExitCritical+0x42>
 800df8a:	2300      	movs	r3, #0
 800df8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	f383 8811 	msr	BASEPRI, r3
}
 800df94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800df96:	bf00      	nop
 800df98:	370c      	adds	r7, #12
 800df9a:	46bd      	mov	sp, r7
 800df9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa0:	4770      	bx	lr
 800dfa2:	bf00      	nop
 800dfa4:	200000cc 	.word	0x200000cc
	...

0800dfb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dfb0:	f3ef 8009 	mrs	r0, PSP
 800dfb4:	f3bf 8f6f 	isb	sy
 800dfb8:	4b15      	ldr	r3, [pc, #84]	; (800e010 <pxCurrentTCBConst>)
 800dfba:	681a      	ldr	r2, [r3, #0]
 800dfbc:	f01e 0f10 	tst.w	lr, #16
 800dfc0:	bf08      	it	eq
 800dfc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dfc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfca:	6010      	str	r0, [r2, #0]
 800dfcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dfd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dfd4:	f380 8811 	msr	BASEPRI, r0
 800dfd8:	f3bf 8f4f 	dsb	sy
 800dfdc:	f3bf 8f6f 	isb	sy
 800dfe0:	f7fe feaa 	bl	800cd38 <vTaskSwitchContext>
 800dfe4:	f04f 0000 	mov.w	r0, #0
 800dfe8:	f380 8811 	msr	BASEPRI, r0
 800dfec:	bc09      	pop	{r0, r3}
 800dfee:	6819      	ldr	r1, [r3, #0]
 800dff0:	6808      	ldr	r0, [r1, #0]
 800dff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dff6:	f01e 0f10 	tst.w	lr, #16
 800dffa:	bf08      	it	eq
 800dffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e000:	f380 8809 	msr	PSP, r0
 800e004:	f3bf 8f6f 	isb	sy
 800e008:	4770      	bx	lr
 800e00a:	bf00      	nop
 800e00c:	f3af 8000 	nop.w

0800e010 <pxCurrentTCBConst>:
 800e010:	20000fe0 	.word	0x20000fe0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e014:	bf00      	nop
 800e016:	bf00      	nop

0800e018 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b082      	sub	sp, #8
 800e01c:	af00      	add	r7, sp, #0
	__asm volatile
 800e01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e022:	f383 8811 	msr	BASEPRI, r3
 800e026:	f3bf 8f6f 	isb	sy
 800e02a:	f3bf 8f4f 	dsb	sy
 800e02e:	607b      	str	r3, [r7, #4]
}
 800e030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e032:	f7fe fdc7 	bl	800cbc4 <xTaskIncrementTick>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d003      	beq.n	800e044 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e03c:	4b06      	ldr	r3, [pc, #24]	; (800e058 <xPortSysTickHandler+0x40>)
 800e03e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e042:	601a      	str	r2, [r3, #0]
 800e044:	2300      	movs	r3, #0
 800e046:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	f383 8811 	msr	BASEPRI, r3
}
 800e04e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e050:	bf00      	nop
 800e052:	3708      	adds	r7, #8
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}
 800e058:	e000ed04 	.word	0xe000ed04

0800e05c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e05c:	b480      	push	{r7}
 800e05e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e060:	4b0b      	ldr	r3, [pc, #44]	; (800e090 <vPortSetupTimerInterrupt+0x34>)
 800e062:	2200      	movs	r2, #0
 800e064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e066:	4b0b      	ldr	r3, [pc, #44]	; (800e094 <vPortSetupTimerInterrupt+0x38>)
 800e068:	2200      	movs	r2, #0
 800e06a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e06c:	4b0a      	ldr	r3, [pc, #40]	; (800e098 <vPortSetupTimerInterrupt+0x3c>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	4a0a      	ldr	r2, [pc, #40]	; (800e09c <vPortSetupTimerInterrupt+0x40>)
 800e072:	fba2 2303 	umull	r2, r3, r2, r3
 800e076:	099b      	lsrs	r3, r3, #6
 800e078:	4a09      	ldr	r2, [pc, #36]	; (800e0a0 <vPortSetupTimerInterrupt+0x44>)
 800e07a:	3b01      	subs	r3, #1
 800e07c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e07e:	4b04      	ldr	r3, [pc, #16]	; (800e090 <vPortSetupTimerInterrupt+0x34>)
 800e080:	2207      	movs	r2, #7
 800e082:	601a      	str	r2, [r3, #0]
}
 800e084:	bf00      	nop
 800e086:	46bd      	mov	sp, r7
 800e088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08c:	4770      	bx	lr
 800e08e:	bf00      	nop
 800e090:	e000e010 	.word	0xe000e010
 800e094:	e000e018 	.word	0xe000e018
 800e098:	20000034 	.word	0x20000034
 800e09c:	10624dd3 	.word	0x10624dd3
 800e0a0:	e000e014 	.word	0xe000e014

0800e0a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e0a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e0b4 <vPortEnableVFP+0x10>
 800e0a8:	6801      	ldr	r1, [r0, #0]
 800e0aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e0ae:	6001      	str	r1, [r0, #0]
 800e0b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e0b2:	bf00      	nop
 800e0b4:	e000ed88 	.word	0xe000ed88

0800e0b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b085      	sub	sp, #20
 800e0bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e0be:	f3ef 8305 	mrs	r3, IPSR
 800e0c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2b0f      	cmp	r3, #15
 800e0c8:	d914      	bls.n	800e0f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e0ca:	4a17      	ldr	r2, [pc, #92]	; (800e128 <vPortValidateInterruptPriority+0x70>)
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	4413      	add	r3, r2
 800e0d0:	781b      	ldrb	r3, [r3, #0]
 800e0d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e0d4:	4b15      	ldr	r3, [pc, #84]	; (800e12c <vPortValidateInterruptPriority+0x74>)
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	7afa      	ldrb	r2, [r7, #11]
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d20a      	bcs.n	800e0f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e2:	f383 8811 	msr	BASEPRI, r3
 800e0e6:	f3bf 8f6f 	isb	sy
 800e0ea:	f3bf 8f4f 	dsb	sy
 800e0ee:	607b      	str	r3, [r7, #4]
}
 800e0f0:	bf00      	nop
 800e0f2:	e7fe      	b.n	800e0f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e0f4:	4b0e      	ldr	r3, [pc, #56]	; (800e130 <vPortValidateInterruptPriority+0x78>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e0fc:	4b0d      	ldr	r3, [pc, #52]	; (800e134 <vPortValidateInterruptPriority+0x7c>)
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	429a      	cmp	r2, r3
 800e102:	d90a      	bls.n	800e11a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e108:	f383 8811 	msr	BASEPRI, r3
 800e10c:	f3bf 8f6f 	isb	sy
 800e110:	f3bf 8f4f 	dsb	sy
 800e114:	603b      	str	r3, [r7, #0]
}
 800e116:	bf00      	nop
 800e118:	e7fe      	b.n	800e118 <vPortValidateInterruptPriority+0x60>
	}
 800e11a:	bf00      	nop
 800e11c:	3714      	adds	r7, #20
 800e11e:	46bd      	mov	sp, r7
 800e120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e124:	4770      	bx	lr
 800e126:	bf00      	nop
 800e128:	e000e3f0 	.word	0xe000e3f0
 800e12c:	2000160c 	.word	0x2000160c
 800e130:	e000ed0c 	.word	0xe000ed0c
 800e134:	20001610 	.word	0x20001610

0800e138 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b08a      	sub	sp, #40	; 0x28
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e140:	2300      	movs	r3, #0
 800e142:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e144:	f7fe fc82 	bl	800ca4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e148:	4b5b      	ldr	r3, [pc, #364]	; (800e2b8 <pvPortMalloc+0x180>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d101      	bne.n	800e154 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e150:	f000 f920 	bl	800e394 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e154:	4b59      	ldr	r3, [pc, #356]	; (800e2bc <pvPortMalloc+0x184>)
 800e156:	681a      	ldr	r2, [r3, #0]
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	4013      	ands	r3, r2
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	f040 8093 	bne.w	800e288 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d01d      	beq.n	800e1a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e168:	2208      	movs	r2, #8
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	4413      	add	r3, r2
 800e16e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f003 0307 	and.w	r3, r3, #7
 800e176:	2b00      	cmp	r3, #0
 800e178:	d014      	beq.n	800e1a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f023 0307 	bic.w	r3, r3, #7
 800e180:	3308      	adds	r3, #8
 800e182:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f003 0307 	and.w	r3, r3, #7
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d00a      	beq.n	800e1a4 <pvPortMalloc+0x6c>
	__asm volatile
 800e18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e192:	f383 8811 	msr	BASEPRI, r3
 800e196:	f3bf 8f6f 	isb	sy
 800e19a:	f3bf 8f4f 	dsb	sy
 800e19e:	617b      	str	r3, [r7, #20]
}
 800e1a0:	bf00      	nop
 800e1a2:	e7fe      	b.n	800e1a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d06e      	beq.n	800e288 <pvPortMalloc+0x150>
 800e1aa:	4b45      	ldr	r3, [pc, #276]	; (800e2c0 <pvPortMalloc+0x188>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d869      	bhi.n	800e288 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e1b4:	4b43      	ldr	r3, [pc, #268]	; (800e2c4 <pvPortMalloc+0x18c>)
 800e1b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e1b8:	4b42      	ldr	r3, [pc, #264]	; (800e2c4 <pvPortMalloc+0x18c>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e1be:	e004      	b.n	800e1ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	687a      	ldr	r2, [r7, #4]
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d903      	bls.n	800e1dc <pvPortMalloc+0xa4>
 800e1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d1f1      	bne.n	800e1c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e1dc:	4b36      	ldr	r3, [pc, #216]	; (800e2b8 <pvPortMalloc+0x180>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1e2:	429a      	cmp	r2, r3
 800e1e4:	d050      	beq.n	800e288 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e1e6:	6a3b      	ldr	r3, [r7, #32]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	2208      	movs	r2, #8
 800e1ec:	4413      	add	r3, r2
 800e1ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f2:	681a      	ldr	r2, [r3, #0]
 800e1f4:	6a3b      	ldr	r3, [r7, #32]
 800e1f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fa:	685a      	ldr	r2, [r3, #4]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	1ad2      	subs	r2, r2, r3
 800e200:	2308      	movs	r3, #8
 800e202:	005b      	lsls	r3, r3, #1
 800e204:	429a      	cmp	r2, r3
 800e206:	d91f      	bls.n	800e248 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	4413      	add	r3, r2
 800e20e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e210:	69bb      	ldr	r3, [r7, #24]
 800e212:	f003 0307 	and.w	r3, r3, #7
 800e216:	2b00      	cmp	r3, #0
 800e218:	d00a      	beq.n	800e230 <pvPortMalloc+0xf8>
	__asm volatile
 800e21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e21e:	f383 8811 	msr	BASEPRI, r3
 800e222:	f3bf 8f6f 	isb	sy
 800e226:	f3bf 8f4f 	dsb	sy
 800e22a:	613b      	str	r3, [r7, #16]
}
 800e22c:	bf00      	nop
 800e22e:	e7fe      	b.n	800e22e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e232:	685a      	ldr	r2, [r3, #4]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	1ad2      	subs	r2, r2, r3
 800e238:	69bb      	ldr	r3, [r7, #24]
 800e23a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e23e:	687a      	ldr	r2, [r7, #4]
 800e240:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e242:	69b8      	ldr	r0, [r7, #24]
 800e244:	f000 f908 	bl	800e458 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e248:	4b1d      	ldr	r3, [pc, #116]	; (800e2c0 <pvPortMalloc+0x188>)
 800e24a:	681a      	ldr	r2, [r3, #0]
 800e24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24e:	685b      	ldr	r3, [r3, #4]
 800e250:	1ad3      	subs	r3, r2, r3
 800e252:	4a1b      	ldr	r2, [pc, #108]	; (800e2c0 <pvPortMalloc+0x188>)
 800e254:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e256:	4b1a      	ldr	r3, [pc, #104]	; (800e2c0 <pvPortMalloc+0x188>)
 800e258:	681a      	ldr	r2, [r3, #0]
 800e25a:	4b1b      	ldr	r3, [pc, #108]	; (800e2c8 <pvPortMalloc+0x190>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	429a      	cmp	r2, r3
 800e260:	d203      	bcs.n	800e26a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e262:	4b17      	ldr	r3, [pc, #92]	; (800e2c0 <pvPortMalloc+0x188>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	4a18      	ldr	r2, [pc, #96]	; (800e2c8 <pvPortMalloc+0x190>)
 800e268:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26c:	685a      	ldr	r2, [r3, #4]
 800e26e:	4b13      	ldr	r3, [pc, #76]	; (800e2bc <pvPortMalloc+0x184>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	431a      	orrs	r2, r3
 800e274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e276:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27a:	2200      	movs	r2, #0
 800e27c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e27e:	4b13      	ldr	r3, [pc, #76]	; (800e2cc <pvPortMalloc+0x194>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	3301      	adds	r3, #1
 800e284:	4a11      	ldr	r2, [pc, #68]	; (800e2cc <pvPortMalloc+0x194>)
 800e286:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e288:	f7fe fbee 	bl	800ca68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e28c:	69fb      	ldr	r3, [r7, #28]
 800e28e:	f003 0307 	and.w	r3, r3, #7
 800e292:	2b00      	cmp	r3, #0
 800e294:	d00a      	beq.n	800e2ac <pvPortMalloc+0x174>
	__asm volatile
 800e296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29a:	f383 8811 	msr	BASEPRI, r3
 800e29e:	f3bf 8f6f 	isb	sy
 800e2a2:	f3bf 8f4f 	dsb	sy
 800e2a6:	60fb      	str	r3, [r7, #12]
}
 800e2a8:	bf00      	nop
 800e2aa:	e7fe      	b.n	800e2aa <pvPortMalloc+0x172>
	return pvReturn;
 800e2ac:	69fb      	ldr	r3, [r7, #28]
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3728      	adds	r7, #40	; 0x28
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}
 800e2b6:	bf00      	nop
 800e2b8:	2000521c 	.word	0x2000521c
 800e2bc:	20005230 	.word	0x20005230
 800e2c0:	20005220 	.word	0x20005220
 800e2c4:	20005214 	.word	0x20005214
 800e2c8:	20005224 	.word	0x20005224
 800e2cc:	20005228 	.word	0x20005228

0800e2d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b086      	sub	sp, #24
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d04d      	beq.n	800e37e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e2e2:	2308      	movs	r3, #8
 800e2e4:	425b      	negs	r3, r3
 800e2e6:	697a      	ldr	r2, [r7, #20]
 800e2e8:	4413      	add	r3, r2
 800e2ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	685a      	ldr	r2, [r3, #4]
 800e2f4:	4b24      	ldr	r3, [pc, #144]	; (800e388 <vPortFree+0xb8>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	4013      	ands	r3, r2
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d10a      	bne.n	800e314 <vPortFree+0x44>
	__asm volatile
 800e2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e302:	f383 8811 	msr	BASEPRI, r3
 800e306:	f3bf 8f6f 	isb	sy
 800e30a:	f3bf 8f4f 	dsb	sy
 800e30e:	60fb      	str	r3, [r7, #12]
}
 800e310:	bf00      	nop
 800e312:	e7fe      	b.n	800e312 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d00a      	beq.n	800e332 <vPortFree+0x62>
	__asm volatile
 800e31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e320:	f383 8811 	msr	BASEPRI, r3
 800e324:	f3bf 8f6f 	isb	sy
 800e328:	f3bf 8f4f 	dsb	sy
 800e32c:	60bb      	str	r3, [r7, #8]
}
 800e32e:	bf00      	nop
 800e330:	e7fe      	b.n	800e330 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e332:	693b      	ldr	r3, [r7, #16]
 800e334:	685a      	ldr	r2, [r3, #4]
 800e336:	4b14      	ldr	r3, [pc, #80]	; (800e388 <vPortFree+0xb8>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4013      	ands	r3, r2
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d01e      	beq.n	800e37e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d11a      	bne.n	800e37e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	685a      	ldr	r2, [r3, #4]
 800e34c:	4b0e      	ldr	r3, [pc, #56]	; (800e388 <vPortFree+0xb8>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	43db      	mvns	r3, r3
 800e352:	401a      	ands	r2, r3
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e358:	f7fe fb78 	bl	800ca4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	685a      	ldr	r2, [r3, #4]
 800e360:	4b0a      	ldr	r3, [pc, #40]	; (800e38c <vPortFree+0xbc>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	4413      	add	r3, r2
 800e366:	4a09      	ldr	r2, [pc, #36]	; (800e38c <vPortFree+0xbc>)
 800e368:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e36a:	6938      	ldr	r0, [r7, #16]
 800e36c:	f000 f874 	bl	800e458 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e370:	4b07      	ldr	r3, [pc, #28]	; (800e390 <vPortFree+0xc0>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	3301      	adds	r3, #1
 800e376:	4a06      	ldr	r2, [pc, #24]	; (800e390 <vPortFree+0xc0>)
 800e378:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e37a:	f7fe fb75 	bl	800ca68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e37e:	bf00      	nop
 800e380:	3718      	adds	r7, #24
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
 800e386:	bf00      	nop
 800e388:	20005230 	.word	0x20005230
 800e38c:	20005220 	.word	0x20005220
 800e390:	2000522c 	.word	0x2000522c

0800e394 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e394:	b480      	push	{r7}
 800e396:	b085      	sub	sp, #20
 800e398:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e39a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e39e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e3a0:	4b27      	ldr	r3, [pc, #156]	; (800e440 <prvHeapInit+0xac>)
 800e3a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	f003 0307 	and.w	r3, r3, #7
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d00c      	beq.n	800e3c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	3307      	adds	r3, #7
 800e3b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	f023 0307 	bic.w	r3, r3, #7
 800e3ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e3bc:	68ba      	ldr	r2, [r7, #8]
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	1ad3      	subs	r3, r2, r3
 800e3c2:	4a1f      	ldr	r2, [pc, #124]	; (800e440 <prvHeapInit+0xac>)
 800e3c4:	4413      	add	r3, r2
 800e3c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e3cc:	4a1d      	ldr	r2, [pc, #116]	; (800e444 <prvHeapInit+0xb0>)
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e3d2:	4b1c      	ldr	r3, [pc, #112]	; (800e444 <prvHeapInit+0xb0>)
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	68ba      	ldr	r2, [r7, #8]
 800e3dc:	4413      	add	r3, r2
 800e3de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e3e0:	2208      	movs	r2, #8
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	1a9b      	subs	r3, r3, r2
 800e3e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f023 0307 	bic.w	r3, r3, #7
 800e3ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	4a15      	ldr	r2, [pc, #84]	; (800e448 <prvHeapInit+0xb4>)
 800e3f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e3f6:	4b14      	ldr	r3, [pc, #80]	; (800e448 <prvHeapInit+0xb4>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e3fe:	4b12      	ldr	r3, [pc, #72]	; (800e448 <prvHeapInit+0xb4>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	2200      	movs	r2, #0
 800e404:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	68fa      	ldr	r2, [r7, #12]
 800e40e:	1ad2      	subs	r2, r2, r3
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e414:	4b0c      	ldr	r3, [pc, #48]	; (800e448 <prvHeapInit+0xb4>)
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	685b      	ldr	r3, [r3, #4]
 800e420:	4a0a      	ldr	r2, [pc, #40]	; (800e44c <prvHeapInit+0xb8>)
 800e422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	685b      	ldr	r3, [r3, #4]
 800e428:	4a09      	ldr	r2, [pc, #36]	; (800e450 <prvHeapInit+0xbc>)
 800e42a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e42c:	4b09      	ldr	r3, [pc, #36]	; (800e454 <prvHeapInit+0xc0>)
 800e42e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e432:	601a      	str	r2, [r3, #0]
}
 800e434:	bf00      	nop
 800e436:	3714      	adds	r7, #20
 800e438:	46bd      	mov	sp, r7
 800e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43e:	4770      	bx	lr
 800e440:	20001614 	.word	0x20001614
 800e444:	20005214 	.word	0x20005214
 800e448:	2000521c 	.word	0x2000521c
 800e44c:	20005224 	.word	0x20005224
 800e450:	20005220 	.word	0x20005220
 800e454:	20005230 	.word	0x20005230

0800e458 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e458:	b480      	push	{r7}
 800e45a:	b085      	sub	sp, #20
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e460:	4b28      	ldr	r3, [pc, #160]	; (800e504 <prvInsertBlockIntoFreeList+0xac>)
 800e462:	60fb      	str	r3, [r7, #12]
 800e464:	e002      	b.n	800e46c <prvInsertBlockIntoFreeList+0x14>
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	60fb      	str	r3, [r7, #12]
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	687a      	ldr	r2, [r7, #4]
 800e472:	429a      	cmp	r2, r3
 800e474:	d8f7      	bhi.n	800e466 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	68ba      	ldr	r2, [r7, #8]
 800e480:	4413      	add	r3, r2
 800e482:	687a      	ldr	r2, [r7, #4]
 800e484:	429a      	cmp	r2, r3
 800e486:	d108      	bne.n	800e49a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	685a      	ldr	r2, [r3, #4]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	685b      	ldr	r3, [r3, #4]
 800e490:	441a      	add	r2, r3
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	685b      	ldr	r3, [r3, #4]
 800e4a2:	68ba      	ldr	r2, [r7, #8]
 800e4a4:	441a      	add	r2, r3
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d118      	bne.n	800e4e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681a      	ldr	r2, [r3, #0]
 800e4b2:	4b15      	ldr	r3, [pc, #84]	; (800e508 <prvInsertBlockIntoFreeList+0xb0>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d00d      	beq.n	800e4d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	685a      	ldr	r2, [r3, #4]
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	685b      	ldr	r3, [r3, #4]
 800e4c4:	441a      	add	r2, r3
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	681a      	ldr	r2, [r3, #0]
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	601a      	str	r2, [r3, #0]
 800e4d4:	e008      	b.n	800e4e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e4d6:	4b0c      	ldr	r3, [pc, #48]	; (800e508 <prvInsertBlockIntoFreeList+0xb0>)
 800e4d8:	681a      	ldr	r2, [r3, #0]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	601a      	str	r2, [r3, #0]
 800e4de:	e003      	b.n	800e4e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	681a      	ldr	r2, [r3, #0]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e4e8:	68fa      	ldr	r2, [r7, #12]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d002      	beq.n	800e4f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	687a      	ldr	r2, [r7, #4]
 800e4f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e4f6:	bf00      	nop
 800e4f8:	3714      	adds	r7, #20
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e500:	4770      	bx	lr
 800e502:	bf00      	nop
 800e504:	20005214 	.word	0x20005214
 800e508:	2000521c 	.word	0x2000521c

0800e50c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e510:	2200      	movs	r2, #0
 800e512:	4912      	ldr	r1, [pc, #72]	; (800e55c <MX_USB_DEVICE_Init+0x50>)
 800e514:	4812      	ldr	r0, [pc, #72]	; (800e560 <MX_USB_DEVICE_Init+0x54>)
 800e516:	f7fb fb19 	bl	8009b4c <USBD_Init>
 800e51a:	4603      	mov	r3, r0
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d001      	beq.n	800e524 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e520:	f7f3 fb7e 	bl	8001c20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e524:	490f      	ldr	r1, [pc, #60]	; (800e564 <MX_USB_DEVICE_Init+0x58>)
 800e526:	480e      	ldr	r0, [pc, #56]	; (800e560 <MX_USB_DEVICE_Init+0x54>)
 800e528:	f7fb fb40 	bl	8009bac <USBD_RegisterClass>
 800e52c:	4603      	mov	r3, r0
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d001      	beq.n	800e536 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e532:	f7f3 fb75 	bl	8001c20 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e536:	490c      	ldr	r1, [pc, #48]	; (800e568 <MX_USB_DEVICE_Init+0x5c>)
 800e538:	4809      	ldr	r0, [pc, #36]	; (800e560 <MX_USB_DEVICE_Init+0x54>)
 800e53a:	f7fb fa31 	bl	80099a0 <USBD_CDC_RegisterInterface>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d001      	beq.n	800e548 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e544:	f7f3 fb6c 	bl	8001c20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e548:	4805      	ldr	r0, [pc, #20]	; (800e560 <MX_USB_DEVICE_Init+0x54>)
 800e54a:	f7fb fb65 	bl	8009c18 <USBD_Start>
 800e54e:	4603      	mov	r3, r0
 800e550:	2b00      	cmp	r3, #0
 800e552:	d001      	beq.n	800e558 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e554:	f7f3 fb64 	bl	8001c20 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e558:	bf00      	nop
 800e55a:	bd80      	pop	{r7, pc}
 800e55c:	200000e4 	.word	0x200000e4
 800e560:	20005234 	.word	0x20005234
 800e564:	2000004c 	.word	0x2000004c
 800e568:	200000d0 	.word	0x200000d0

0800e56c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e570:	2200      	movs	r2, #0
 800e572:	4905      	ldr	r1, [pc, #20]	; (800e588 <CDC_Init_FS+0x1c>)
 800e574:	4805      	ldr	r0, [pc, #20]	; (800e58c <CDC_Init_FS+0x20>)
 800e576:	f7fb fa2d 	bl	80099d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e57a:	4905      	ldr	r1, [pc, #20]	; (800e590 <CDC_Init_FS+0x24>)
 800e57c:	4803      	ldr	r0, [pc, #12]	; (800e58c <CDC_Init_FS+0x20>)
 800e57e:	f7fb fa4b 	bl	8009a18 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e582:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e584:	4618      	mov	r0, r3
 800e586:	bd80      	pop	{r7, pc}
 800e588:	20005910 	.word	0x20005910
 800e58c:	20005234 	.word	0x20005234
 800e590:	20005510 	.word	0x20005510

0800e594 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e594:	b480      	push	{r7}
 800e596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e598:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr

0800e5a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b083      	sub	sp, #12
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	6039      	str	r1, [r7, #0]
 800e5ae:	71fb      	strb	r3, [r7, #7]
 800e5b0:	4613      	mov	r3, r2
 800e5b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e5b4:	79fb      	ldrb	r3, [r7, #7]
 800e5b6:	2b23      	cmp	r3, #35	; 0x23
 800e5b8:	d84a      	bhi.n	800e650 <CDC_Control_FS+0xac>
 800e5ba:	a201      	add	r2, pc, #4	; (adr r2, 800e5c0 <CDC_Control_FS+0x1c>)
 800e5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c0:	0800e651 	.word	0x0800e651
 800e5c4:	0800e651 	.word	0x0800e651
 800e5c8:	0800e651 	.word	0x0800e651
 800e5cc:	0800e651 	.word	0x0800e651
 800e5d0:	0800e651 	.word	0x0800e651
 800e5d4:	0800e651 	.word	0x0800e651
 800e5d8:	0800e651 	.word	0x0800e651
 800e5dc:	0800e651 	.word	0x0800e651
 800e5e0:	0800e651 	.word	0x0800e651
 800e5e4:	0800e651 	.word	0x0800e651
 800e5e8:	0800e651 	.word	0x0800e651
 800e5ec:	0800e651 	.word	0x0800e651
 800e5f0:	0800e651 	.word	0x0800e651
 800e5f4:	0800e651 	.word	0x0800e651
 800e5f8:	0800e651 	.word	0x0800e651
 800e5fc:	0800e651 	.word	0x0800e651
 800e600:	0800e651 	.word	0x0800e651
 800e604:	0800e651 	.word	0x0800e651
 800e608:	0800e651 	.word	0x0800e651
 800e60c:	0800e651 	.word	0x0800e651
 800e610:	0800e651 	.word	0x0800e651
 800e614:	0800e651 	.word	0x0800e651
 800e618:	0800e651 	.word	0x0800e651
 800e61c:	0800e651 	.word	0x0800e651
 800e620:	0800e651 	.word	0x0800e651
 800e624:	0800e651 	.word	0x0800e651
 800e628:	0800e651 	.word	0x0800e651
 800e62c:	0800e651 	.word	0x0800e651
 800e630:	0800e651 	.word	0x0800e651
 800e634:	0800e651 	.word	0x0800e651
 800e638:	0800e651 	.word	0x0800e651
 800e63c:	0800e651 	.word	0x0800e651
 800e640:	0800e651 	.word	0x0800e651
 800e644:	0800e651 	.word	0x0800e651
 800e648:	0800e651 	.word	0x0800e651
 800e64c:	0800e651 	.word	0x0800e651
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e650:	bf00      	nop
  }

  return (USBD_OK);
 800e652:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e654:	4618      	mov	r0, r3
 800e656:	370c      	adds	r7, #12
 800e658:	46bd      	mov	sp, r7
 800e65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65e:	4770      	bx	lr

0800e660 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
 800e668:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 command_CMD[0] = Buf[0];
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	781a      	ldrb	r2, [r3, #0]
 800e66e:	4b05      	ldr	r3, [pc, #20]	; (800e684 <CDC_Receive_FS+0x24>)
 800e670:	701a      	strb	r2, [r3, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e672:	4805      	ldr	r0, [pc, #20]	; (800e688 <CDC_Receive_FS+0x28>)
 800e674:	f7fb fa34 	bl	8009ae0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e678:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	3708      	adds	r7, #8
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	200007b4 	.word	0x200007b4
 800e688:	20005234 	.word	0x20005234

0800e68c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b084      	sub	sp, #16
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
 800e694:	460b      	mov	r3, r1
 800e696:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e698:	2300      	movs	r3, #0
 800e69a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e69c:	4b0d      	ldr	r3, [pc, #52]	; (800e6d4 <CDC_Transmit_FS+0x48>)
 800e69e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e6a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d001      	beq.n	800e6b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	e00b      	b.n	800e6ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e6b2:	887b      	ldrh	r3, [r7, #2]
 800e6b4:	461a      	mov	r2, r3
 800e6b6:	6879      	ldr	r1, [r7, #4]
 800e6b8:	4806      	ldr	r0, [pc, #24]	; (800e6d4 <CDC_Transmit_FS+0x48>)
 800e6ba:	f7fb f98b 	bl	80099d4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e6be:	4805      	ldr	r0, [pc, #20]	; (800e6d4 <CDC_Transmit_FS+0x48>)
 800e6c0:	f7fb f9c8 	bl	8009a54 <USBD_CDC_TransmitPacket>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	3710      	adds	r7, #16
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
 800e6d2:	bf00      	nop
 800e6d4:	20005234 	.word	0x20005234

0800e6d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e6d8:	b480      	push	{r7}
 800e6da:	b087      	sub	sp, #28
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	60f8      	str	r0, [r7, #12]
 800e6e0:	60b9      	str	r1, [r7, #8]
 800e6e2:	4613      	mov	r3, r2
 800e6e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e6ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	371c      	adds	r7, #28
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f8:	4770      	bx	lr
	...

0800e6fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b083      	sub	sp, #12
 800e700:	af00      	add	r7, sp, #0
 800e702:	4603      	mov	r3, r0
 800e704:	6039      	str	r1, [r7, #0]
 800e706:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	2212      	movs	r2, #18
 800e70c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e70e:	4b03      	ldr	r3, [pc, #12]	; (800e71c <USBD_FS_DeviceDescriptor+0x20>)
}
 800e710:	4618      	mov	r0, r3
 800e712:	370c      	adds	r7, #12
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr
 800e71c:	20000100 	.word	0x20000100

0800e720 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e720:	b480      	push	{r7}
 800e722:	b083      	sub	sp, #12
 800e724:	af00      	add	r7, sp, #0
 800e726:	4603      	mov	r3, r0
 800e728:	6039      	str	r1, [r7, #0]
 800e72a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	2204      	movs	r2, #4
 800e730:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e732:	4b03      	ldr	r3, [pc, #12]	; (800e740 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e734:	4618      	mov	r0, r3
 800e736:	370c      	adds	r7, #12
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr
 800e740:	20000114 	.word	0x20000114

0800e744 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b082      	sub	sp, #8
 800e748:	af00      	add	r7, sp, #0
 800e74a:	4603      	mov	r3, r0
 800e74c:	6039      	str	r1, [r7, #0]
 800e74e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e750:	79fb      	ldrb	r3, [r7, #7]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d105      	bne.n	800e762 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e756:	683a      	ldr	r2, [r7, #0]
 800e758:	4907      	ldr	r1, [pc, #28]	; (800e778 <USBD_FS_ProductStrDescriptor+0x34>)
 800e75a:	4808      	ldr	r0, [pc, #32]	; (800e77c <USBD_FS_ProductStrDescriptor+0x38>)
 800e75c:	f7fc fc08 	bl	800af70 <USBD_GetString>
 800e760:	e004      	b.n	800e76c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e762:	683a      	ldr	r2, [r7, #0]
 800e764:	4904      	ldr	r1, [pc, #16]	; (800e778 <USBD_FS_ProductStrDescriptor+0x34>)
 800e766:	4805      	ldr	r0, [pc, #20]	; (800e77c <USBD_FS_ProductStrDescriptor+0x38>)
 800e768:	f7fc fc02 	bl	800af70 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e76c:	4b02      	ldr	r3, [pc, #8]	; (800e778 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3708      	adds	r7, #8
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
 800e776:	bf00      	nop
 800e778:	20005d10 	.word	0x20005d10
 800e77c:	0800f584 	.word	0x0800f584

0800e780 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b082      	sub	sp, #8
 800e784:	af00      	add	r7, sp, #0
 800e786:	4603      	mov	r3, r0
 800e788:	6039      	str	r1, [r7, #0]
 800e78a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e78c:	683a      	ldr	r2, [r7, #0]
 800e78e:	4904      	ldr	r1, [pc, #16]	; (800e7a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e790:	4804      	ldr	r0, [pc, #16]	; (800e7a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e792:	f7fc fbed 	bl	800af70 <USBD_GetString>
  return USBD_StrDesc;
 800e796:	4b02      	ldr	r3, [pc, #8]	; (800e7a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3708      	adds	r7, #8
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}
 800e7a0:	20005d10 	.word	0x20005d10
 800e7a4:	0800f59c 	.word	0x0800f59c

0800e7a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b082      	sub	sp, #8
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	6039      	str	r1, [r7, #0]
 800e7b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	221a      	movs	r2, #26
 800e7b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e7ba:	f000 f843 	bl	800e844 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e7be:	4b02      	ldr	r3, [pc, #8]	; (800e7c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3708      	adds	r7, #8
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}
 800e7c8:	20000118 	.word	0x20000118

0800e7cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	6039      	str	r1, [r7, #0]
 800e7d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e7d8:	79fb      	ldrb	r3, [r7, #7]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d105      	bne.n	800e7ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e7de:	683a      	ldr	r2, [r7, #0]
 800e7e0:	4907      	ldr	r1, [pc, #28]	; (800e800 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e7e2:	4808      	ldr	r0, [pc, #32]	; (800e804 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e7e4:	f7fc fbc4 	bl	800af70 <USBD_GetString>
 800e7e8:	e004      	b.n	800e7f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e7ea:	683a      	ldr	r2, [r7, #0]
 800e7ec:	4904      	ldr	r1, [pc, #16]	; (800e800 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e7ee:	4805      	ldr	r0, [pc, #20]	; (800e804 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e7f0:	f7fc fbbe 	bl	800af70 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e7f4:	4b02      	ldr	r3, [pc, #8]	; (800e800 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3708      	adds	r7, #8
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	20005d10 	.word	0x20005d10
 800e804:	0800f5b0 	.word	0x0800f5b0

0800e808 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	4603      	mov	r3, r0
 800e810:	6039      	str	r1, [r7, #0]
 800e812:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e814:	79fb      	ldrb	r3, [r7, #7]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d105      	bne.n	800e826 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e81a:	683a      	ldr	r2, [r7, #0]
 800e81c:	4907      	ldr	r1, [pc, #28]	; (800e83c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e81e:	4808      	ldr	r0, [pc, #32]	; (800e840 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e820:	f7fc fba6 	bl	800af70 <USBD_GetString>
 800e824:	e004      	b.n	800e830 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e826:	683a      	ldr	r2, [r7, #0]
 800e828:	4904      	ldr	r1, [pc, #16]	; (800e83c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e82a:	4805      	ldr	r0, [pc, #20]	; (800e840 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e82c:	f7fc fba0 	bl	800af70 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e830:	4b02      	ldr	r3, [pc, #8]	; (800e83c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e832:	4618      	mov	r0, r3
 800e834:	3708      	adds	r7, #8
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}
 800e83a:	bf00      	nop
 800e83c:	20005d10 	.word	0x20005d10
 800e840:	0800f5bc 	.word	0x0800f5bc

0800e844 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e84a:	4b0f      	ldr	r3, [pc, #60]	; (800e888 <Get_SerialNum+0x44>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e850:	4b0e      	ldr	r3, [pc, #56]	; (800e88c <Get_SerialNum+0x48>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e856:	4b0e      	ldr	r3, [pc, #56]	; (800e890 <Get_SerialNum+0x4c>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e85c:	68fa      	ldr	r2, [r7, #12]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	4413      	add	r3, r2
 800e862:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d009      	beq.n	800e87e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e86a:	2208      	movs	r2, #8
 800e86c:	4909      	ldr	r1, [pc, #36]	; (800e894 <Get_SerialNum+0x50>)
 800e86e:	68f8      	ldr	r0, [r7, #12]
 800e870:	f000 f814 	bl	800e89c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e874:	2204      	movs	r2, #4
 800e876:	4908      	ldr	r1, [pc, #32]	; (800e898 <Get_SerialNum+0x54>)
 800e878:	68b8      	ldr	r0, [r7, #8]
 800e87a:	f000 f80f 	bl	800e89c <IntToUnicode>
  }
}
 800e87e:	bf00      	nop
 800e880:	3710      	adds	r7, #16
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}
 800e886:	bf00      	nop
 800e888:	1fff7a10 	.word	0x1fff7a10
 800e88c:	1fff7a14 	.word	0x1fff7a14
 800e890:	1fff7a18 	.word	0x1fff7a18
 800e894:	2000011a 	.word	0x2000011a
 800e898:	2000012a 	.word	0x2000012a

0800e89c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e89c:	b480      	push	{r7}
 800e89e:	b087      	sub	sp, #28
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	60f8      	str	r0, [r7, #12]
 800e8a4:	60b9      	str	r1, [r7, #8]
 800e8a6:	4613      	mov	r3, r2
 800e8a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	75fb      	strb	r3, [r7, #23]
 800e8b2:	e027      	b.n	800e904 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	0f1b      	lsrs	r3, r3, #28
 800e8b8:	2b09      	cmp	r3, #9
 800e8ba:	d80b      	bhi.n	800e8d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	0f1b      	lsrs	r3, r3, #28
 800e8c0:	b2da      	uxtb	r2, r3
 800e8c2:	7dfb      	ldrb	r3, [r7, #23]
 800e8c4:	005b      	lsls	r3, r3, #1
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	440b      	add	r3, r1
 800e8cc:	3230      	adds	r2, #48	; 0x30
 800e8ce:	b2d2      	uxtb	r2, r2
 800e8d0:	701a      	strb	r2, [r3, #0]
 800e8d2:	e00a      	b.n	800e8ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	0f1b      	lsrs	r3, r3, #28
 800e8d8:	b2da      	uxtb	r2, r3
 800e8da:	7dfb      	ldrb	r3, [r7, #23]
 800e8dc:	005b      	lsls	r3, r3, #1
 800e8de:	4619      	mov	r1, r3
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	440b      	add	r3, r1
 800e8e4:	3237      	adds	r2, #55	; 0x37
 800e8e6:	b2d2      	uxtb	r2, r2
 800e8e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	011b      	lsls	r3, r3, #4
 800e8ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e8f0:	7dfb      	ldrb	r3, [r7, #23]
 800e8f2:	005b      	lsls	r3, r3, #1
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	68ba      	ldr	r2, [r7, #8]
 800e8f8:	4413      	add	r3, r2
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e8fe:	7dfb      	ldrb	r3, [r7, #23]
 800e900:	3301      	adds	r3, #1
 800e902:	75fb      	strb	r3, [r7, #23]
 800e904:	7dfa      	ldrb	r2, [r7, #23]
 800e906:	79fb      	ldrb	r3, [r7, #7]
 800e908:	429a      	cmp	r2, r3
 800e90a:	d3d3      	bcc.n	800e8b4 <IntToUnicode+0x18>
  }
}
 800e90c:	bf00      	nop
 800e90e:	bf00      	nop
 800e910:	371c      	adds	r7, #28
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr
	...

0800e91c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b08a      	sub	sp, #40	; 0x28
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e924:	f107 0314 	add.w	r3, r7, #20
 800e928:	2200      	movs	r2, #0
 800e92a:	601a      	str	r2, [r3, #0]
 800e92c:	605a      	str	r2, [r3, #4]
 800e92e:	609a      	str	r2, [r3, #8]
 800e930:	60da      	str	r2, [r3, #12]
 800e932:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e93c:	d13a      	bne.n	800e9b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e93e:	2300      	movs	r3, #0
 800e940:	613b      	str	r3, [r7, #16]
 800e942:	4b1e      	ldr	r3, [pc, #120]	; (800e9bc <HAL_PCD_MspInit+0xa0>)
 800e944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e946:	4a1d      	ldr	r2, [pc, #116]	; (800e9bc <HAL_PCD_MspInit+0xa0>)
 800e948:	f043 0301 	orr.w	r3, r3, #1
 800e94c:	6313      	str	r3, [r2, #48]	; 0x30
 800e94e:	4b1b      	ldr	r3, [pc, #108]	; (800e9bc <HAL_PCD_MspInit+0xa0>)
 800e950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e952:	f003 0301 	and.w	r3, r3, #1
 800e956:	613b      	str	r3, [r7, #16]
 800e958:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e95a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e95e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e960:	2302      	movs	r3, #2
 800e962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e964:	2300      	movs	r3, #0
 800e966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e968:	2303      	movs	r3, #3
 800e96a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e96c:	230a      	movs	r3, #10
 800e96e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e970:	f107 0314 	add.w	r3, r7, #20
 800e974:	4619      	mov	r1, r3
 800e976:	4812      	ldr	r0, [pc, #72]	; (800e9c0 <HAL_PCD_MspInit+0xa4>)
 800e978:	f7f4 fa18 	bl	8002dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e97c:	4b0f      	ldr	r3, [pc, #60]	; (800e9bc <HAL_PCD_MspInit+0xa0>)
 800e97e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e980:	4a0e      	ldr	r2, [pc, #56]	; (800e9bc <HAL_PCD_MspInit+0xa0>)
 800e982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e986:	6353      	str	r3, [r2, #52]	; 0x34
 800e988:	2300      	movs	r3, #0
 800e98a:	60fb      	str	r3, [r7, #12]
 800e98c:	4b0b      	ldr	r3, [pc, #44]	; (800e9bc <HAL_PCD_MspInit+0xa0>)
 800e98e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e990:	4a0a      	ldr	r2, [pc, #40]	; (800e9bc <HAL_PCD_MspInit+0xa0>)
 800e992:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e996:	6453      	str	r3, [r2, #68]	; 0x44
 800e998:	4b08      	ldr	r3, [pc, #32]	; (800e9bc <HAL_PCD_MspInit+0xa0>)
 800e99a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e99c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e9a0:	60fb      	str	r3, [r7, #12]
 800e9a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	2105      	movs	r1, #5
 800e9a8:	2043      	movs	r0, #67	; 0x43
 800e9aa:	f7f3 feeb 	bl	8002784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e9ae:	2043      	movs	r0, #67	; 0x43
 800e9b0:	f7f3 ff04 	bl	80027bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e9b4:	bf00      	nop
 800e9b6:	3728      	adds	r7, #40	; 0x28
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	40023800 	.word	0x40023800
 800e9c0:	40020000 	.word	0x40020000

0800e9c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b082      	sub	sp, #8
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e9d8:	4619      	mov	r1, r3
 800e9da:	4610      	mov	r0, r2
 800e9dc:	f7fb f969 	bl	8009cb2 <USBD_LL_SetupStage>
}
 800e9e0:	bf00      	nop
 800e9e2:	3708      	adds	r7, #8
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e9fa:	78fa      	ldrb	r2, [r7, #3]
 800e9fc:	6879      	ldr	r1, [r7, #4]
 800e9fe:	4613      	mov	r3, r2
 800ea00:	00db      	lsls	r3, r3, #3
 800ea02:	4413      	add	r3, r2
 800ea04:	009b      	lsls	r3, r3, #2
 800ea06:	440b      	add	r3, r1
 800ea08:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ea0c:	681a      	ldr	r2, [r3, #0]
 800ea0e:	78fb      	ldrb	r3, [r7, #3]
 800ea10:	4619      	mov	r1, r3
 800ea12:	f7fb f9a3 	bl	8009d5c <USBD_LL_DataOutStage>
}
 800ea16:	bf00      	nop
 800ea18:	3708      	adds	r7, #8
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}

0800ea1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea1e:	b580      	push	{r7, lr}
 800ea20:	b082      	sub	sp, #8
 800ea22:	af00      	add	r7, sp, #0
 800ea24:	6078      	str	r0, [r7, #4]
 800ea26:	460b      	mov	r3, r1
 800ea28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ea30:	78fa      	ldrb	r2, [r7, #3]
 800ea32:	6879      	ldr	r1, [r7, #4]
 800ea34:	4613      	mov	r3, r2
 800ea36:	00db      	lsls	r3, r3, #3
 800ea38:	4413      	add	r3, r2
 800ea3a:	009b      	lsls	r3, r3, #2
 800ea3c:	440b      	add	r3, r1
 800ea3e:	334c      	adds	r3, #76	; 0x4c
 800ea40:	681a      	ldr	r2, [r3, #0]
 800ea42:	78fb      	ldrb	r3, [r7, #3]
 800ea44:	4619      	mov	r1, r3
 800ea46:	f7fb fa3c 	bl	8009ec2 <USBD_LL_DataInStage>
}
 800ea4a:	bf00      	nop
 800ea4c:	3708      	adds	r7, #8
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}

0800ea52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea52:	b580      	push	{r7, lr}
 800ea54:	b082      	sub	sp, #8
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea60:	4618      	mov	r0, r3
 800ea62:	f7fb fb70 	bl	800a146 <USBD_LL_SOF>
}
 800ea66:	bf00      	nop
 800ea68:	3708      	adds	r7, #8
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}

0800ea6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea6e:	b580      	push	{r7, lr}
 800ea70:	b084      	sub	sp, #16
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ea76:	2301      	movs	r3, #1
 800ea78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	68db      	ldr	r3, [r3, #12]
 800ea7e:	2b02      	cmp	r3, #2
 800ea80:	d001      	beq.n	800ea86 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ea82:	f7f3 f8cd 	bl	8001c20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea8c:	7bfa      	ldrb	r2, [r7, #15]
 800ea8e:	4611      	mov	r1, r2
 800ea90:	4618      	mov	r0, r3
 800ea92:	f7fb fb1a 	bl	800a0ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f7fb fac2 	bl	800a026 <USBD_LL_Reset>
}
 800eaa2:	bf00      	nop
 800eaa4:	3710      	adds	r7, #16
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}
	...

0800eaac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b082      	sub	sp, #8
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7fb fb15 	bl	800a0ea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	687a      	ldr	r2, [r7, #4]
 800eacc:	6812      	ldr	r2, [r2, #0]
 800eace:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ead2:	f043 0301 	orr.w	r3, r3, #1
 800ead6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6a1b      	ldr	r3, [r3, #32]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d005      	beq.n	800eaec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eae0:	4b04      	ldr	r3, [pc, #16]	; (800eaf4 <HAL_PCD_SuspendCallback+0x48>)
 800eae2:	691b      	ldr	r3, [r3, #16]
 800eae4:	4a03      	ldr	r2, [pc, #12]	; (800eaf4 <HAL_PCD_SuspendCallback+0x48>)
 800eae6:	f043 0306 	orr.w	r3, r3, #6
 800eaea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eaec:	bf00      	nop
 800eaee:	3708      	adds	r7, #8
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}
 800eaf4:	e000ed00 	.word	0xe000ed00

0800eaf8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b082      	sub	sp, #8
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7fb fb05 	bl	800a116 <USBD_LL_Resume>
}
 800eb0c:	bf00      	nop
 800eb0e:	3708      	adds	r7, #8
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}

0800eb14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b082      	sub	sp, #8
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	460b      	mov	r3, r1
 800eb1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eb26:	78fa      	ldrb	r2, [r7, #3]
 800eb28:	4611      	mov	r1, r2
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f7fb fb5d 	bl	800a1ea <USBD_LL_IsoOUTIncomplete>
}
 800eb30:	bf00      	nop
 800eb32:	3708      	adds	r7, #8
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b082      	sub	sp, #8
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	460b      	mov	r3, r1
 800eb42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eb4a:	78fa      	ldrb	r2, [r7, #3]
 800eb4c:	4611      	mov	r1, r2
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7fb fb19 	bl	800a186 <USBD_LL_IsoINIncomplete>
}
 800eb54:	bf00      	nop
 800eb56:	3708      	adds	r7, #8
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b082      	sub	sp, #8
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f7fb fb6f 	bl	800a24e <USBD_LL_DevConnected>
}
 800eb70:	bf00      	nop
 800eb72:	3708      	adds	r7, #8
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b082      	sub	sp, #8
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7fb fb6c 	bl	800a264 <USBD_LL_DevDisconnected>
}
 800eb8c:	bf00      	nop
 800eb8e:	3708      	adds	r7, #8
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}

0800eb94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b082      	sub	sp, #8
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d13c      	bne.n	800ec1e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800eba4:	4a20      	ldr	r2, [pc, #128]	; (800ec28 <USBD_LL_Init+0x94>)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	4a1e      	ldr	r2, [pc, #120]	; (800ec28 <USBD_LL_Init+0x94>)
 800ebb0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ebb4:	4b1c      	ldr	r3, [pc, #112]	; (800ec28 <USBD_LL_Init+0x94>)
 800ebb6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ebba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ebbc:	4b1a      	ldr	r3, [pc, #104]	; (800ec28 <USBD_LL_Init+0x94>)
 800ebbe:	2204      	movs	r2, #4
 800ebc0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ebc2:	4b19      	ldr	r3, [pc, #100]	; (800ec28 <USBD_LL_Init+0x94>)
 800ebc4:	2202      	movs	r2, #2
 800ebc6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ebc8:	4b17      	ldr	r3, [pc, #92]	; (800ec28 <USBD_LL_Init+0x94>)
 800ebca:	2200      	movs	r2, #0
 800ebcc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ebce:	4b16      	ldr	r3, [pc, #88]	; (800ec28 <USBD_LL_Init+0x94>)
 800ebd0:	2202      	movs	r2, #2
 800ebd2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ebd4:	4b14      	ldr	r3, [pc, #80]	; (800ec28 <USBD_LL_Init+0x94>)
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ebda:	4b13      	ldr	r3, [pc, #76]	; (800ec28 <USBD_LL_Init+0x94>)
 800ebdc:	2200      	movs	r2, #0
 800ebde:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ebe0:	4b11      	ldr	r3, [pc, #68]	; (800ec28 <USBD_LL_Init+0x94>)
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ebe6:	4b10      	ldr	r3, [pc, #64]	; (800ec28 <USBD_LL_Init+0x94>)
 800ebe8:	2200      	movs	r2, #0
 800ebea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ebec:	4b0e      	ldr	r3, [pc, #56]	; (800ec28 <USBD_LL_Init+0x94>)
 800ebee:	2200      	movs	r2, #0
 800ebf0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ebf2:	480d      	ldr	r0, [pc, #52]	; (800ec28 <USBD_LL_Init+0x94>)
 800ebf4:	f7f6 f809 	bl	8004c0a <HAL_PCD_Init>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d001      	beq.n	800ec02 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ebfe:	f7f3 f80f 	bl	8001c20 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ec02:	2180      	movs	r1, #128	; 0x80
 800ec04:	4808      	ldr	r0, [pc, #32]	; (800ec28 <USBD_LL_Init+0x94>)
 800ec06:	f7f7 fa60 	bl	80060ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ec0a:	2240      	movs	r2, #64	; 0x40
 800ec0c:	2100      	movs	r1, #0
 800ec0e:	4806      	ldr	r0, [pc, #24]	; (800ec28 <USBD_LL_Init+0x94>)
 800ec10:	f7f7 fa14 	bl	800603c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ec14:	2280      	movs	r2, #128	; 0x80
 800ec16:	2101      	movs	r1, #1
 800ec18:	4803      	ldr	r0, [pc, #12]	; (800ec28 <USBD_LL_Init+0x94>)
 800ec1a:	f7f7 fa0f 	bl	800603c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ec1e:	2300      	movs	r3, #0
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3708      	adds	r7, #8
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}
 800ec28:	20005f10 	.word	0x20005f10

0800ec2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b084      	sub	sp, #16
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec34:	2300      	movs	r3, #0
 800ec36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec38:	2300      	movs	r3, #0
 800ec3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec42:	4618      	mov	r0, r3
 800ec44:	f7f6 f8fe 	bl	8004e44 <HAL_PCD_Start>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec4c:	7bfb      	ldrb	r3, [r7, #15]
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f000 f942 	bl	800eed8 <USBD_Get_USB_Status>
 800ec54:	4603      	mov	r3, r0
 800ec56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3710      	adds	r7, #16
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}

0800ec62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ec62:	b580      	push	{r7, lr}
 800ec64:	b084      	sub	sp, #16
 800ec66:	af00      	add	r7, sp, #0
 800ec68:	6078      	str	r0, [r7, #4]
 800ec6a:	4608      	mov	r0, r1
 800ec6c:	4611      	mov	r1, r2
 800ec6e:	461a      	mov	r2, r3
 800ec70:	4603      	mov	r3, r0
 800ec72:	70fb      	strb	r3, [r7, #3]
 800ec74:	460b      	mov	r3, r1
 800ec76:	70bb      	strb	r3, [r7, #2]
 800ec78:	4613      	mov	r3, r2
 800ec7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec80:	2300      	movs	r3, #0
 800ec82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ec8a:	78bb      	ldrb	r3, [r7, #2]
 800ec8c:	883a      	ldrh	r2, [r7, #0]
 800ec8e:	78f9      	ldrb	r1, [r7, #3]
 800ec90:	f7f6 fdcf 	bl	8005832 <HAL_PCD_EP_Open>
 800ec94:	4603      	mov	r3, r0
 800ec96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec98:	7bfb      	ldrb	r3, [r7, #15]
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f000 f91c 	bl	800eed8 <USBD_Get_USB_Status>
 800eca0:	4603      	mov	r3, r0
 800eca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eca4:	7bbb      	ldrb	r3, [r7, #14]
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	3710      	adds	r7, #16
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}

0800ecae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecae:	b580      	push	{r7, lr}
 800ecb0:	b084      	sub	sp, #16
 800ecb2:	af00      	add	r7, sp, #0
 800ecb4:	6078      	str	r0, [r7, #4]
 800ecb6:	460b      	mov	r3, r1
 800ecb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ecc8:	78fa      	ldrb	r2, [r7, #3]
 800ecca:	4611      	mov	r1, r2
 800eccc:	4618      	mov	r0, r3
 800ecce:	f7f6 fe18 	bl	8005902 <HAL_PCD_EP_Close>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecd6:	7bfb      	ldrb	r3, [r7, #15]
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f000 f8fd 	bl	800eed8 <USBD_Get_USB_Status>
 800ecde:	4603      	mov	r3, r0
 800ece0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ece2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3710      	adds	r7, #16
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b084      	sub	sp, #16
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	460b      	mov	r3, r1
 800ecf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed06:	78fa      	ldrb	r2, [r7, #3]
 800ed08:	4611      	mov	r1, r2
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7f6 fef0 	bl	8005af0 <HAL_PCD_EP_SetStall>
 800ed10:	4603      	mov	r3, r0
 800ed12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed14:	7bfb      	ldrb	r3, [r7, #15]
 800ed16:	4618      	mov	r0, r3
 800ed18:	f000 f8de 	bl	800eed8 <USBD_Get_USB_Status>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed20:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3710      	adds	r7, #16
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}

0800ed2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed2a:	b580      	push	{r7, lr}
 800ed2c:	b084      	sub	sp, #16
 800ed2e:	af00      	add	r7, sp, #0
 800ed30:	6078      	str	r0, [r7, #4]
 800ed32:	460b      	mov	r3, r1
 800ed34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed36:	2300      	movs	r3, #0
 800ed38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed44:	78fa      	ldrb	r2, [r7, #3]
 800ed46:	4611      	mov	r1, r2
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7f6 ff35 	bl	8005bb8 <HAL_PCD_EP_ClrStall>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed52:	7bfb      	ldrb	r3, [r7, #15]
 800ed54:	4618      	mov	r0, r3
 800ed56:	f000 f8bf 	bl	800eed8 <USBD_Get_USB_Status>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	3710      	adds	r7, #16
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}

0800ed68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed68:	b480      	push	{r7}
 800ed6a:	b085      	sub	sp, #20
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
 800ed70:	460b      	mov	r3, r1
 800ed72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ed7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	da0b      	bge.n	800ed9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ed84:	78fb      	ldrb	r3, [r7, #3]
 800ed86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed8a:	68f9      	ldr	r1, [r7, #12]
 800ed8c:	4613      	mov	r3, r2
 800ed8e:	00db      	lsls	r3, r3, #3
 800ed90:	4413      	add	r3, r2
 800ed92:	009b      	lsls	r3, r3, #2
 800ed94:	440b      	add	r3, r1
 800ed96:	333e      	adds	r3, #62	; 0x3e
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	e00b      	b.n	800edb4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ed9c:	78fb      	ldrb	r3, [r7, #3]
 800ed9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eda2:	68f9      	ldr	r1, [r7, #12]
 800eda4:	4613      	mov	r3, r2
 800eda6:	00db      	lsls	r3, r3, #3
 800eda8:	4413      	add	r3, r2
 800edaa:	009b      	lsls	r3, r3, #2
 800edac:	440b      	add	r3, r1
 800edae:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800edb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3714      	adds	r7, #20
 800edb8:	46bd      	mov	sp, r7
 800edba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbe:	4770      	bx	lr

0800edc0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b084      	sub	sp, #16
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
 800edc8:	460b      	mov	r3, r1
 800edca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edcc:	2300      	movs	r3, #0
 800edce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edd0:	2300      	movs	r3, #0
 800edd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800edda:	78fa      	ldrb	r2, [r7, #3]
 800eddc:	4611      	mov	r1, r2
 800edde:	4618      	mov	r0, r3
 800ede0:	f7f6 fd02 	bl	80057e8 <HAL_PCD_SetAddress>
 800ede4:	4603      	mov	r3, r0
 800ede6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ede8:	7bfb      	ldrb	r3, [r7, #15]
 800edea:	4618      	mov	r0, r3
 800edec:	f000 f874 	bl	800eed8 <USBD_Get_USB_Status>
 800edf0:	4603      	mov	r3, r0
 800edf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3710      	adds	r7, #16
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}

0800edfe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800edfe:	b580      	push	{r7, lr}
 800ee00:	b086      	sub	sp, #24
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	60f8      	str	r0, [r7, #12]
 800ee06:	607a      	str	r2, [r7, #4]
 800ee08:	603b      	str	r3, [r7, #0]
 800ee0a:	460b      	mov	r3, r1
 800ee0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee12:	2300      	movs	r3, #0
 800ee14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ee1c:	7af9      	ldrb	r1, [r7, #11]
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	687a      	ldr	r2, [r7, #4]
 800ee22:	f7f6 fe1b 	bl	8005a5c <HAL_PCD_EP_Transmit>
 800ee26:	4603      	mov	r3, r0
 800ee28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee2a:	7dfb      	ldrb	r3, [r7, #23]
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f000 f853 	bl	800eed8 <USBD_Get_USB_Status>
 800ee32:	4603      	mov	r3, r0
 800ee34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ee36:	7dbb      	ldrb	r3, [r7, #22]
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3718      	adds	r7, #24
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b086      	sub	sp, #24
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	60f8      	str	r0, [r7, #12]
 800ee48:	607a      	str	r2, [r7, #4]
 800ee4a:	603b      	str	r3, [r7, #0]
 800ee4c:	460b      	mov	r3, r1
 800ee4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee50:	2300      	movs	r3, #0
 800ee52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee54:	2300      	movs	r3, #0
 800ee56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ee5e:	7af9      	ldrb	r1, [r7, #11]
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	687a      	ldr	r2, [r7, #4]
 800ee64:	f7f6 fd97 	bl	8005996 <HAL_PCD_EP_Receive>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee6c:	7dfb      	ldrb	r3, [r7, #23]
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f000 f832 	bl	800eed8 <USBD_Get_USB_Status>
 800ee74:	4603      	mov	r3, r0
 800ee76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ee78:	7dbb      	ldrb	r3, [r7, #22]
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3718      	adds	r7, #24
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}

0800ee82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee82:	b580      	push	{r7, lr}
 800ee84:	b082      	sub	sp, #8
 800ee86:	af00      	add	r7, sp, #0
 800ee88:	6078      	str	r0, [r7, #4]
 800ee8a:	460b      	mov	r3, r1
 800ee8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ee94:	78fa      	ldrb	r2, [r7, #3]
 800ee96:	4611      	mov	r1, r2
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7f6 fdc7 	bl	8005a2c <HAL_PCD_EP_GetRxCount>
 800ee9e:	4603      	mov	r3, r0
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	3708      	adds	r7, #8
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}

0800eea8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b083      	sub	sp, #12
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800eeb0:	4b03      	ldr	r3, [pc, #12]	; (800eec0 <USBD_static_malloc+0x18>)
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	370c      	adds	r7, #12
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr
 800eebe:	bf00      	nop
 800eec0:	2000641c 	.word	0x2000641c

0800eec4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800eec4:	b480      	push	{r7}
 800eec6:	b083      	sub	sp, #12
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]

}
 800eecc:	bf00      	nop
 800eece:	370c      	adds	r7, #12
 800eed0:	46bd      	mov	sp, r7
 800eed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed6:	4770      	bx	lr

0800eed8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800eed8:	b480      	push	{r7}
 800eeda:	b085      	sub	sp, #20
 800eedc:	af00      	add	r7, sp, #0
 800eede:	4603      	mov	r3, r0
 800eee0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eee2:	2300      	movs	r3, #0
 800eee4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800eee6:	79fb      	ldrb	r3, [r7, #7]
 800eee8:	2b03      	cmp	r3, #3
 800eeea:	d817      	bhi.n	800ef1c <USBD_Get_USB_Status+0x44>
 800eeec:	a201      	add	r2, pc, #4	; (adr r2, 800eef4 <USBD_Get_USB_Status+0x1c>)
 800eeee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eef2:	bf00      	nop
 800eef4:	0800ef05 	.word	0x0800ef05
 800eef8:	0800ef0b 	.word	0x0800ef0b
 800eefc:	0800ef11 	.word	0x0800ef11
 800ef00:	0800ef17 	.word	0x0800ef17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ef04:	2300      	movs	r3, #0
 800ef06:	73fb      	strb	r3, [r7, #15]
    break;
 800ef08:	e00b      	b.n	800ef22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ef0a:	2303      	movs	r3, #3
 800ef0c:	73fb      	strb	r3, [r7, #15]
    break;
 800ef0e:	e008      	b.n	800ef22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ef10:	2301      	movs	r3, #1
 800ef12:	73fb      	strb	r3, [r7, #15]
    break;
 800ef14:	e005      	b.n	800ef22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ef16:	2303      	movs	r3, #3
 800ef18:	73fb      	strb	r3, [r7, #15]
    break;
 800ef1a:	e002      	b.n	800ef22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ef1c:	2303      	movs	r3, #3
 800ef1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ef20:	bf00      	nop
  }
  return usb_status;
 800ef22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	3714      	adds	r7, #20
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2e:	4770      	bx	lr

0800ef30 <__errno>:
 800ef30:	4b01      	ldr	r3, [pc, #4]	; (800ef38 <__errno+0x8>)
 800ef32:	6818      	ldr	r0, [r3, #0]
 800ef34:	4770      	bx	lr
 800ef36:	bf00      	nop
 800ef38:	20000134 	.word	0x20000134

0800ef3c <__libc_init_array>:
 800ef3c:	b570      	push	{r4, r5, r6, lr}
 800ef3e:	4d0d      	ldr	r5, [pc, #52]	; (800ef74 <__libc_init_array+0x38>)
 800ef40:	4c0d      	ldr	r4, [pc, #52]	; (800ef78 <__libc_init_array+0x3c>)
 800ef42:	1b64      	subs	r4, r4, r5
 800ef44:	10a4      	asrs	r4, r4, #2
 800ef46:	2600      	movs	r6, #0
 800ef48:	42a6      	cmp	r6, r4
 800ef4a:	d109      	bne.n	800ef60 <__libc_init_array+0x24>
 800ef4c:	4d0b      	ldr	r5, [pc, #44]	; (800ef7c <__libc_init_array+0x40>)
 800ef4e:	4c0c      	ldr	r4, [pc, #48]	; (800ef80 <__libc_init_array+0x44>)
 800ef50:	f000 f9fa 	bl	800f348 <_init>
 800ef54:	1b64      	subs	r4, r4, r5
 800ef56:	10a4      	asrs	r4, r4, #2
 800ef58:	2600      	movs	r6, #0
 800ef5a:	42a6      	cmp	r6, r4
 800ef5c:	d105      	bne.n	800ef6a <__libc_init_array+0x2e>
 800ef5e:	bd70      	pop	{r4, r5, r6, pc}
 800ef60:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef64:	4798      	blx	r3
 800ef66:	3601      	adds	r6, #1
 800ef68:	e7ee      	b.n	800ef48 <__libc_init_array+0xc>
 800ef6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef6e:	4798      	blx	r3
 800ef70:	3601      	adds	r6, #1
 800ef72:	e7f2      	b.n	800ef5a <__libc_init_array+0x1e>
 800ef74:	08010454 	.word	0x08010454
 800ef78:	08010454 	.word	0x08010454
 800ef7c:	08010454 	.word	0x08010454
 800ef80:	08010458 	.word	0x08010458

0800ef84 <__itoa>:
 800ef84:	1e93      	subs	r3, r2, #2
 800ef86:	2b22      	cmp	r3, #34	; 0x22
 800ef88:	b510      	push	{r4, lr}
 800ef8a:	460c      	mov	r4, r1
 800ef8c:	d904      	bls.n	800ef98 <__itoa+0x14>
 800ef8e:	2300      	movs	r3, #0
 800ef90:	700b      	strb	r3, [r1, #0]
 800ef92:	461c      	mov	r4, r3
 800ef94:	4620      	mov	r0, r4
 800ef96:	bd10      	pop	{r4, pc}
 800ef98:	2a0a      	cmp	r2, #10
 800ef9a:	d109      	bne.n	800efb0 <__itoa+0x2c>
 800ef9c:	2800      	cmp	r0, #0
 800ef9e:	da07      	bge.n	800efb0 <__itoa+0x2c>
 800efa0:	232d      	movs	r3, #45	; 0x2d
 800efa2:	700b      	strb	r3, [r1, #0]
 800efa4:	4240      	negs	r0, r0
 800efa6:	2101      	movs	r1, #1
 800efa8:	4421      	add	r1, r4
 800efaa:	f000 f97f 	bl	800f2ac <__utoa>
 800efae:	e7f1      	b.n	800ef94 <__itoa+0x10>
 800efb0:	2100      	movs	r1, #0
 800efb2:	e7f9      	b.n	800efa8 <__itoa+0x24>

0800efb4 <itoa>:
 800efb4:	f7ff bfe6 	b.w	800ef84 <__itoa>

0800efb8 <__retarget_lock_acquire_recursive>:
 800efb8:	4770      	bx	lr

0800efba <__retarget_lock_release_recursive>:
 800efba:	4770      	bx	lr

0800efbc <malloc>:
 800efbc:	4b02      	ldr	r3, [pc, #8]	; (800efc8 <malloc+0xc>)
 800efbe:	4601      	mov	r1, r0
 800efc0:	6818      	ldr	r0, [r3, #0]
 800efc2:	f000 b885 	b.w	800f0d0 <_malloc_r>
 800efc6:	bf00      	nop
 800efc8:	20000134 	.word	0x20000134

0800efcc <memcpy>:
 800efcc:	440a      	add	r2, r1
 800efce:	4291      	cmp	r1, r2
 800efd0:	f100 33ff 	add.w	r3, r0, #4294967295
 800efd4:	d100      	bne.n	800efd8 <memcpy+0xc>
 800efd6:	4770      	bx	lr
 800efd8:	b510      	push	{r4, lr}
 800efda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efde:	f803 4f01 	strb.w	r4, [r3, #1]!
 800efe2:	4291      	cmp	r1, r2
 800efe4:	d1f9      	bne.n	800efda <memcpy+0xe>
 800efe6:	bd10      	pop	{r4, pc}

0800efe8 <memset>:
 800efe8:	4402      	add	r2, r0
 800efea:	4603      	mov	r3, r0
 800efec:	4293      	cmp	r3, r2
 800efee:	d100      	bne.n	800eff2 <memset+0xa>
 800eff0:	4770      	bx	lr
 800eff2:	f803 1b01 	strb.w	r1, [r3], #1
 800eff6:	e7f9      	b.n	800efec <memset+0x4>

0800eff8 <_free_r>:
 800eff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800effa:	2900      	cmp	r1, #0
 800effc:	d044      	beq.n	800f088 <_free_r+0x90>
 800effe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f002:	9001      	str	r0, [sp, #4]
 800f004:	2b00      	cmp	r3, #0
 800f006:	f1a1 0404 	sub.w	r4, r1, #4
 800f00a:	bfb8      	it	lt
 800f00c:	18e4      	addlt	r4, r4, r3
 800f00e:	f000 f98f 	bl	800f330 <__malloc_lock>
 800f012:	4a1e      	ldr	r2, [pc, #120]	; (800f08c <_free_r+0x94>)
 800f014:	9801      	ldr	r0, [sp, #4]
 800f016:	6813      	ldr	r3, [r2, #0]
 800f018:	b933      	cbnz	r3, 800f028 <_free_r+0x30>
 800f01a:	6063      	str	r3, [r4, #4]
 800f01c:	6014      	str	r4, [r2, #0]
 800f01e:	b003      	add	sp, #12
 800f020:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f024:	f000 b98a 	b.w	800f33c <__malloc_unlock>
 800f028:	42a3      	cmp	r3, r4
 800f02a:	d908      	bls.n	800f03e <_free_r+0x46>
 800f02c:	6825      	ldr	r5, [r4, #0]
 800f02e:	1961      	adds	r1, r4, r5
 800f030:	428b      	cmp	r3, r1
 800f032:	bf01      	itttt	eq
 800f034:	6819      	ldreq	r1, [r3, #0]
 800f036:	685b      	ldreq	r3, [r3, #4]
 800f038:	1949      	addeq	r1, r1, r5
 800f03a:	6021      	streq	r1, [r4, #0]
 800f03c:	e7ed      	b.n	800f01a <_free_r+0x22>
 800f03e:	461a      	mov	r2, r3
 800f040:	685b      	ldr	r3, [r3, #4]
 800f042:	b10b      	cbz	r3, 800f048 <_free_r+0x50>
 800f044:	42a3      	cmp	r3, r4
 800f046:	d9fa      	bls.n	800f03e <_free_r+0x46>
 800f048:	6811      	ldr	r1, [r2, #0]
 800f04a:	1855      	adds	r5, r2, r1
 800f04c:	42a5      	cmp	r5, r4
 800f04e:	d10b      	bne.n	800f068 <_free_r+0x70>
 800f050:	6824      	ldr	r4, [r4, #0]
 800f052:	4421      	add	r1, r4
 800f054:	1854      	adds	r4, r2, r1
 800f056:	42a3      	cmp	r3, r4
 800f058:	6011      	str	r1, [r2, #0]
 800f05a:	d1e0      	bne.n	800f01e <_free_r+0x26>
 800f05c:	681c      	ldr	r4, [r3, #0]
 800f05e:	685b      	ldr	r3, [r3, #4]
 800f060:	6053      	str	r3, [r2, #4]
 800f062:	4421      	add	r1, r4
 800f064:	6011      	str	r1, [r2, #0]
 800f066:	e7da      	b.n	800f01e <_free_r+0x26>
 800f068:	d902      	bls.n	800f070 <_free_r+0x78>
 800f06a:	230c      	movs	r3, #12
 800f06c:	6003      	str	r3, [r0, #0]
 800f06e:	e7d6      	b.n	800f01e <_free_r+0x26>
 800f070:	6825      	ldr	r5, [r4, #0]
 800f072:	1961      	adds	r1, r4, r5
 800f074:	428b      	cmp	r3, r1
 800f076:	bf04      	itt	eq
 800f078:	6819      	ldreq	r1, [r3, #0]
 800f07a:	685b      	ldreq	r3, [r3, #4]
 800f07c:	6063      	str	r3, [r4, #4]
 800f07e:	bf04      	itt	eq
 800f080:	1949      	addeq	r1, r1, r5
 800f082:	6021      	streq	r1, [r4, #0]
 800f084:	6054      	str	r4, [r2, #4]
 800f086:	e7ca      	b.n	800f01e <_free_r+0x26>
 800f088:	b003      	add	sp, #12
 800f08a:	bd30      	pop	{r4, r5, pc}
 800f08c:	20006640 	.word	0x20006640

0800f090 <sbrk_aligned>:
 800f090:	b570      	push	{r4, r5, r6, lr}
 800f092:	4e0e      	ldr	r6, [pc, #56]	; (800f0cc <sbrk_aligned+0x3c>)
 800f094:	460c      	mov	r4, r1
 800f096:	6831      	ldr	r1, [r6, #0]
 800f098:	4605      	mov	r5, r0
 800f09a:	b911      	cbnz	r1, 800f0a2 <sbrk_aligned+0x12>
 800f09c:	f000 f8f6 	bl	800f28c <_sbrk_r>
 800f0a0:	6030      	str	r0, [r6, #0]
 800f0a2:	4621      	mov	r1, r4
 800f0a4:	4628      	mov	r0, r5
 800f0a6:	f000 f8f1 	bl	800f28c <_sbrk_r>
 800f0aa:	1c43      	adds	r3, r0, #1
 800f0ac:	d00a      	beq.n	800f0c4 <sbrk_aligned+0x34>
 800f0ae:	1cc4      	adds	r4, r0, #3
 800f0b0:	f024 0403 	bic.w	r4, r4, #3
 800f0b4:	42a0      	cmp	r0, r4
 800f0b6:	d007      	beq.n	800f0c8 <sbrk_aligned+0x38>
 800f0b8:	1a21      	subs	r1, r4, r0
 800f0ba:	4628      	mov	r0, r5
 800f0bc:	f000 f8e6 	bl	800f28c <_sbrk_r>
 800f0c0:	3001      	adds	r0, #1
 800f0c2:	d101      	bne.n	800f0c8 <sbrk_aligned+0x38>
 800f0c4:	f04f 34ff 	mov.w	r4, #4294967295
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	bd70      	pop	{r4, r5, r6, pc}
 800f0cc:	20006644 	.word	0x20006644

0800f0d0 <_malloc_r>:
 800f0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0d4:	1ccd      	adds	r5, r1, #3
 800f0d6:	f025 0503 	bic.w	r5, r5, #3
 800f0da:	3508      	adds	r5, #8
 800f0dc:	2d0c      	cmp	r5, #12
 800f0de:	bf38      	it	cc
 800f0e0:	250c      	movcc	r5, #12
 800f0e2:	2d00      	cmp	r5, #0
 800f0e4:	4607      	mov	r7, r0
 800f0e6:	db01      	blt.n	800f0ec <_malloc_r+0x1c>
 800f0e8:	42a9      	cmp	r1, r5
 800f0ea:	d905      	bls.n	800f0f8 <_malloc_r+0x28>
 800f0ec:	230c      	movs	r3, #12
 800f0ee:	603b      	str	r3, [r7, #0]
 800f0f0:	2600      	movs	r6, #0
 800f0f2:	4630      	mov	r0, r6
 800f0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0f8:	4e2e      	ldr	r6, [pc, #184]	; (800f1b4 <_malloc_r+0xe4>)
 800f0fa:	f000 f919 	bl	800f330 <__malloc_lock>
 800f0fe:	6833      	ldr	r3, [r6, #0]
 800f100:	461c      	mov	r4, r3
 800f102:	bb34      	cbnz	r4, 800f152 <_malloc_r+0x82>
 800f104:	4629      	mov	r1, r5
 800f106:	4638      	mov	r0, r7
 800f108:	f7ff ffc2 	bl	800f090 <sbrk_aligned>
 800f10c:	1c43      	adds	r3, r0, #1
 800f10e:	4604      	mov	r4, r0
 800f110:	d14d      	bne.n	800f1ae <_malloc_r+0xde>
 800f112:	6834      	ldr	r4, [r6, #0]
 800f114:	4626      	mov	r6, r4
 800f116:	2e00      	cmp	r6, #0
 800f118:	d140      	bne.n	800f19c <_malloc_r+0xcc>
 800f11a:	6823      	ldr	r3, [r4, #0]
 800f11c:	4631      	mov	r1, r6
 800f11e:	4638      	mov	r0, r7
 800f120:	eb04 0803 	add.w	r8, r4, r3
 800f124:	f000 f8b2 	bl	800f28c <_sbrk_r>
 800f128:	4580      	cmp	r8, r0
 800f12a:	d13a      	bne.n	800f1a2 <_malloc_r+0xd2>
 800f12c:	6821      	ldr	r1, [r4, #0]
 800f12e:	3503      	adds	r5, #3
 800f130:	1a6d      	subs	r5, r5, r1
 800f132:	f025 0503 	bic.w	r5, r5, #3
 800f136:	3508      	adds	r5, #8
 800f138:	2d0c      	cmp	r5, #12
 800f13a:	bf38      	it	cc
 800f13c:	250c      	movcc	r5, #12
 800f13e:	4629      	mov	r1, r5
 800f140:	4638      	mov	r0, r7
 800f142:	f7ff ffa5 	bl	800f090 <sbrk_aligned>
 800f146:	3001      	adds	r0, #1
 800f148:	d02b      	beq.n	800f1a2 <_malloc_r+0xd2>
 800f14a:	6823      	ldr	r3, [r4, #0]
 800f14c:	442b      	add	r3, r5
 800f14e:	6023      	str	r3, [r4, #0]
 800f150:	e00e      	b.n	800f170 <_malloc_r+0xa0>
 800f152:	6822      	ldr	r2, [r4, #0]
 800f154:	1b52      	subs	r2, r2, r5
 800f156:	d41e      	bmi.n	800f196 <_malloc_r+0xc6>
 800f158:	2a0b      	cmp	r2, #11
 800f15a:	d916      	bls.n	800f18a <_malloc_r+0xba>
 800f15c:	1961      	adds	r1, r4, r5
 800f15e:	42a3      	cmp	r3, r4
 800f160:	6025      	str	r5, [r4, #0]
 800f162:	bf18      	it	ne
 800f164:	6059      	strne	r1, [r3, #4]
 800f166:	6863      	ldr	r3, [r4, #4]
 800f168:	bf08      	it	eq
 800f16a:	6031      	streq	r1, [r6, #0]
 800f16c:	5162      	str	r2, [r4, r5]
 800f16e:	604b      	str	r3, [r1, #4]
 800f170:	4638      	mov	r0, r7
 800f172:	f104 060b 	add.w	r6, r4, #11
 800f176:	f000 f8e1 	bl	800f33c <__malloc_unlock>
 800f17a:	f026 0607 	bic.w	r6, r6, #7
 800f17e:	1d23      	adds	r3, r4, #4
 800f180:	1af2      	subs	r2, r6, r3
 800f182:	d0b6      	beq.n	800f0f2 <_malloc_r+0x22>
 800f184:	1b9b      	subs	r3, r3, r6
 800f186:	50a3      	str	r3, [r4, r2]
 800f188:	e7b3      	b.n	800f0f2 <_malloc_r+0x22>
 800f18a:	6862      	ldr	r2, [r4, #4]
 800f18c:	42a3      	cmp	r3, r4
 800f18e:	bf0c      	ite	eq
 800f190:	6032      	streq	r2, [r6, #0]
 800f192:	605a      	strne	r2, [r3, #4]
 800f194:	e7ec      	b.n	800f170 <_malloc_r+0xa0>
 800f196:	4623      	mov	r3, r4
 800f198:	6864      	ldr	r4, [r4, #4]
 800f19a:	e7b2      	b.n	800f102 <_malloc_r+0x32>
 800f19c:	4634      	mov	r4, r6
 800f19e:	6876      	ldr	r6, [r6, #4]
 800f1a0:	e7b9      	b.n	800f116 <_malloc_r+0x46>
 800f1a2:	230c      	movs	r3, #12
 800f1a4:	603b      	str	r3, [r7, #0]
 800f1a6:	4638      	mov	r0, r7
 800f1a8:	f000 f8c8 	bl	800f33c <__malloc_unlock>
 800f1ac:	e7a1      	b.n	800f0f2 <_malloc_r+0x22>
 800f1ae:	6025      	str	r5, [r4, #0]
 800f1b0:	e7de      	b.n	800f170 <_malloc_r+0xa0>
 800f1b2:	bf00      	nop
 800f1b4:	20006640 	.word	0x20006640

0800f1b8 <cleanup_glue>:
 800f1b8:	b538      	push	{r3, r4, r5, lr}
 800f1ba:	460c      	mov	r4, r1
 800f1bc:	6809      	ldr	r1, [r1, #0]
 800f1be:	4605      	mov	r5, r0
 800f1c0:	b109      	cbz	r1, 800f1c6 <cleanup_glue+0xe>
 800f1c2:	f7ff fff9 	bl	800f1b8 <cleanup_glue>
 800f1c6:	4621      	mov	r1, r4
 800f1c8:	4628      	mov	r0, r5
 800f1ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1ce:	f7ff bf13 	b.w	800eff8 <_free_r>
	...

0800f1d4 <_reclaim_reent>:
 800f1d4:	4b2c      	ldr	r3, [pc, #176]	; (800f288 <_reclaim_reent+0xb4>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	4283      	cmp	r3, r0
 800f1da:	b570      	push	{r4, r5, r6, lr}
 800f1dc:	4604      	mov	r4, r0
 800f1de:	d051      	beq.n	800f284 <_reclaim_reent+0xb0>
 800f1e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f1e2:	b143      	cbz	r3, 800f1f6 <_reclaim_reent+0x22>
 800f1e4:	68db      	ldr	r3, [r3, #12]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d14a      	bne.n	800f280 <_reclaim_reent+0xac>
 800f1ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1ec:	6819      	ldr	r1, [r3, #0]
 800f1ee:	b111      	cbz	r1, 800f1f6 <_reclaim_reent+0x22>
 800f1f0:	4620      	mov	r0, r4
 800f1f2:	f7ff ff01 	bl	800eff8 <_free_r>
 800f1f6:	6961      	ldr	r1, [r4, #20]
 800f1f8:	b111      	cbz	r1, 800f200 <_reclaim_reent+0x2c>
 800f1fa:	4620      	mov	r0, r4
 800f1fc:	f7ff fefc 	bl	800eff8 <_free_r>
 800f200:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f202:	b111      	cbz	r1, 800f20a <_reclaim_reent+0x36>
 800f204:	4620      	mov	r0, r4
 800f206:	f7ff fef7 	bl	800eff8 <_free_r>
 800f20a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f20c:	b111      	cbz	r1, 800f214 <_reclaim_reent+0x40>
 800f20e:	4620      	mov	r0, r4
 800f210:	f7ff fef2 	bl	800eff8 <_free_r>
 800f214:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f216:	b111      	cbz	r1, 800f21e <_reclaim_reent+0x4a>
 800f218:	4620      	mov	r0, r4
 800f21a:	f7ff feed 	bl	800eff8 <_free_r>
 800f21e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f220:	b111      	cbz	r1, 800f228 <_reclaim_reent+0x54>
 800f222:	4620      	mov	r0, r4
 800f224:	f7ff fee8 	bl	800eff8 <_free_r>
 800f228:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f22a:	b111      	cbz	r1, 800f232 <_reclaim_reent+0x5e>
 800f22c:	4620      	mov	r0, r4
 800f22e:	f7ff fee3 	bl	800eff8 <_free_r>
 800f232:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f234:	b111      	cbz	r1, 800f23c <_reclaim_reent+0x68>
 800f236:	4620      	mov	r0, r4
 800f238:	f7ff fede 	bl	800eff8 <_free_r>
 800f23c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f23e:	b111      	cbz	r1, 800f246 <_reclaim_reent+0x72>
 800f240:	4620      	mov	r0, r4
 800f242:	f7ff fed9 	bl	800eff8 <_free_r>
 800f246:	69a3      	ldr	r3, [r4, #24]
 800f248:	b1e3      	cbz	r3, 800f284 <_reclaim_reent+0xb0>
 800f24a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f24c:	4620      	mov	r0, r4
 800f24e:	4798      	blx	r3
 800f250:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f252:	b1b9      	cbz	r1, 800f284 <_reclaim_reent+0xb0>
 800f254:	4620      	mov	r0, r4
 800f256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f25a:	f7ff bfad 	b.w	800f1b8 <cleanup_glue>
 800f25e:	5949      	ldr	r1, [r1, r5]
 800f260:	b941      	cbnz	r1, 800f274 <_reclaim_reent+0xa0>
 800f262:	3504      	adds	r5, #4
 800f264:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f266:	2d80      	cmp	r5, #128	; 0x80
 800f268:	68d9      	ldr	r1, [r3, #12]
 800f26a:	d1f8      	bne.n	800f25e <_reclaim_reent+0x8a>
 800f26c:	4620      	mov	r0, r4
 800f26e:	f7ff fec3 	bl	800eff8 <_free_r>
 800f272:	e7ba      	b.n	800f1ea <_reclaim_reent+0x16>
 800f274:	680e      	ldr	r6, [r1, #0]
 800f276:	4620      	mov	r0, r4
 800f278:	f7ff febe 	bl	800eff8 <_free_r>
 800f27c:	4631      	mov	r1, r6
 800f27e:	e7ef      	b.n	800f260 <_reclaim_reent+0x8c>
 800f280:	2500      	movs	r5, #0
 800f282:	e7ef      	b.n	800f264 <_reclaim_reent+0x90>
 800f284:	bd70      	pop	{r4, r5, r6, pc}
 800f286:	bf00      	nop
 800f288:	20000134 	.word	0x20000134

0800f28c <_sbrk_r>:
 800f28c:	b538      	push	{r3, r4, r5, lr}
 800f28e:	4d06      	ldr	r5, [pc, #24]	; (800f2a8 <_sbrk_r+0x1c>)
 800f290:	2300      	movs	r3, #0
 800f292:	4604      	mov	r4, r0
 800f294:	4608      	mov	r0, r1
 800f296:	602b      	str	r3, [r5, #0]
 800f298:	f7f2 feca 	bl	8002030 <_sbrk>
 800f29c:	1c43      	adds	r3, r0, #1
 800f29e:	d102      	bne.n	800f2a6 <_sbrk_r+0x1a>
 800f2a0:	682b      	ldr	r3, [r5, #0]
 800f2a2:	b103      	cbz	r3, 800f2a6 <_sbrk_r+0x1a>
 800f2a4:	6023      	str	r3, [r4, #0]
 800f2a6:	bd38      	pop	{r3, r4, r5, pc}
 800f2a8:	20006648 	.word	0x20006648

0800f2ac <__utoa>:
 800f2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2ae:	4c1f      	ldr	r4, [pc, #124]	; (800f32c <__utoa+0x80>)
 800f2b0:	b08b      	sub	sp, #44	; 0x2c
 800f2b2:	4605      	mov	r5, r0
 800f2b4:	460b      	mov	r3, r1
 800f2b6:	466e      	mov	r6, sp
 800f2b8:	f104 0c20 	add.w	ip, r4, #32
 800f2bc:	6820      	ldr	r0, [r4, #0]
 800f2be:	6861      	ldr	r1, [r4, #4]
 800f2c0:	4637      	mov	r7, r6
 800f2c2:	c703      	stmia	r7!, {r0, r1}
 800f2c4:	3408      	adds	r4, #8
 800f2c6:	4564      	cmp	r4, ip
 800f2c8:	463e      	mov	r6, r7
 800f2ca:	d1f7      	bne.n	800f2bc <__utoa+0x10>
 800f2cc:	7921      	ldrb	r1, [r4, #4]
 800f2ce:	7139      	strb	r1, [r7, #4]
 800f2d0:	1e91      	subs	r1, r2, #2
 800f2d2:	6820      	ldr	r0, [r4, #0]
 800f2d4:	6038      	str	r0, [r7, #0]
 800f2d6:	2922      	cmp	r1, #34	; 0x22
 800f2d8:	f04f 0100 	mov.w	r1, #0
 800f2dc:	d904      	bls.n	800f2e8 <__utoa+0x3c>
 800f2de:	7019      	strb	r1, [r3, #0]
 800f2e0:	460b      	mov	r3, r1
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	b00b      	add	sp, #44	; 0x2c
 800f2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2e8:	1e58      	subs	r0, r3, #1
 800f2ea:	4684      	mov	ip, r0
 800f2ec:	fbb5 f7f2 	udiv	r7, r5, r2
 800f2f0:	fb02 5617 	mls	r6, r2, r7, r5
 800f2f4:	3628      	adds	r6, #40	; 0x28
 800f2f6:	446e      	add	r6, sp
 800f2f8:	460c      	mov	r4, r1
 800f2fa:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800f2fe:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800f302:	462e      	mov	r6, r5
 800f304:	42b2      	cmp	r2, r6
 800f306:	f101 0101 	add.w	r1, r1, #1
 800f30a:	463d      	mov	r5, r7
 800f30c:	d9ee      	bls.n	800f2ec <__utoa+0x40>
 800f30e:	2200      	movs	r2, #0
 800f310:	545a      	strb	r2, [r3, r1]
 800f312:	1919      	adds	r1, r3, r4
 800f314:	1aa5      	subs	r5, r4, r2
 800f316:	42aa      	cmp	r2, r5
 800f318:	dae3      	bge.n	800f2e2 <__utoa+0x36>
 800f31a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800f31e:	780e      	ldrb	r6, [r1, #0]
 800f320:	7006      	strb	r6, [r0, #0]
 800f322:	3201      	adds	r2, #1
 800f324:	f801 5901 	strb.w	r5, [r1], #-1
 800f328:	e7f4      	b.n	800f314 <__utoa+0x68>
 800f32a:	bf00      	nop
 800f32c:	08010424 	.word	0x08010424

0800f330 <__malloc_lock>:
 800f330:	4801      	ldr	r0, [pc, #4]	; (800f338 <__malloc_lock+0x8>)
 800f332:	f7ff be41 	b.w	800efb8 <__retarget_lock_acquire_recursive>
 800f336:	bf00      	nop
 800f338:	2000663c 	.word	0x2000663c

0800f33c <__malloc_unlock>:
 800f33c:	4801      	ldr	r0, [pc, #4]	; (800f344 <__malloc_unlock+0x8>)
 800f33e:	f7ff be3c 	b.w	800efba <__retarget_lock_release_recursive>
 800f342:	bf00      	nop
 800f344:	2000663c 	.word	0x2000663c

0800f348 <_init>:
 800f348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f34a:	bf00      	nop
 800f34c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f34e:	bc08      	pop	{r3}
 800f350:	469e      	mov	lr, r3
 800f352:	4770      	bx	lr

0800f354 <_fini>:
 800f354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f356:	bf00      	nop
 800f358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f35a:	bc08      	pop	{r3}
 800f35c:	469e      	mov	lr, r3
 800f35e:	4770      	bx	lr
