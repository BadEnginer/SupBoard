
SUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010840  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001114  080109e0  080109e0  000209e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011af4  08011af4  0003019c  2**0
                  CONTENTS
  4 .ARM          00000008  08011af4  08011af4  00021af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011afc  08011afc  0003019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011afc  08011afc  00021afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011b00  08011b00  00021b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  08011b04  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006d54  2000019c  08011ca0  0003019c  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20006ef0  08011ca0  00036ef0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003019c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b9b7  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000065e6  00000000  00000000  0005bb83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002310  00000000  00000000  00062170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002058  00000000  00000000  00064480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020972  00000000  00000000  000664d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e6c8  00000000  00000000  00086e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1625  00000000  00000000  000b5512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156b37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000970c  00000000  00000000  00156b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000019c 	.word	0x2000019c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080109c8 	.word	0x080109c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001a0 	.word	0x200001a0
 80001dc:	080109c8 	.word	0x080109c8

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b974 	b.w	8000cbc <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	4604      	mov	r4, r0
 80009f4:	468e      	mov	lr, r1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d14d      	bne.n	8000a96 <__udivmoddi4+0xaa>
 80009fa:	428a      	cmp	r2, r1
 80009fc:	4694      	mov	ip, r2
 80009fe:	d969      	bls.n	8000ad4 <__udivmoddi4+0xe8>
 8000a00:	fab2 f282 	clz	r2, r2
 8000a04:	b152      	cbz	r2, 8000a1c <__udivmoddi4+0x30>
 8000a06:	fa01 f302 	lsl.w	r3, r1, r2
 8000a0a:	f1c2 0120 	rsb	r1, r2, #32
 8000a0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a16:	ea41 0e03 	orr.w	lr, r1, r3
 8000a1a:	4094      	lsls	r4, r2
 8000a1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a20:	0c21      	lsrs	r1, r4, #16
 8000a22:	fbbe f6f8 	udiv	r6, lr, r8
 8000a26:	fa1f f78c 	uxth.w	r7, ip
 8000a2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a32:	fb06 f107 	mul.w	r1, r6, r7
 8000a36:	4299      	cmp	r1, r3
 8000a38:	d90a      	bls.n	8000a50 <__udivmoddi4+0x64>
 8000a3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a42:	f080 811f 	bcs.w	8000c84 <__udivmoddi4+0x298>
 8000a46:	4299      	cmp	r1, r3
 8000a48:	f240 811c 	bls.w	8000c84 <__udivmoddi4+0x298>
 8000a4c:	3e02      	subs	r6, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a5b      	subs	r3, r3, r1
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a58:	fb08 3310 	mls	r3, r8, r0, r3
 8000a5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a60:	fb00 f707 	mul.w	r7, r0, r7
 8000a64:	42a7      	cmp	r7, r4
 8000a66:	d90a      	bls.n	8000a7e <__udivmoddi4+0x92>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a70:	f080 810a 	bcs.w	8000c88 <__udivmoddi4+0x29c>
 8000a74:	42a7      	cmp	r7, r4
 8000a76:	f240 8107 	bls.w	8000c88 <__udivmoddi4+0x29c>
 8000a7a:	4464      	add	r4, ip
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a82:	1be4      	subs	r4, r4, r7
 8000a84:	2600      	movs	r6, #0
 8000a86:	b11d      	cbz	r5, 8000a90 <__udivmoddi4+0xa4>
 8000a88:	40d4      	lsrs	r4, r2
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d909      	bls.n	8000aae <__udivmoddi4+0xc2>
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	f000 80ef 	beq.w	8000c7e <__udivmoddi4+0x292>
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa6:	4630      	mov	r0, r6
 8000aa8:	4631      	mov	r1, r6
 8000aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aae:	fab3 f683 	clz	r6, r3
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d14a      	bne.n	8000b4c <__udivmoddi4+0x160>
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d302      	bcc.n	8000ac0 <__udivmoddi4+0xd4>
 8000aba:	4282      	cmp	r2, r0
 8000abc:	f200 80f9 	bhi.w	8000cb2 <__udivmoddi4+0x2c6>
 8000ac0:	1a84      	subs	r4, r0, r2
 8000ac2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	469e      	mov	lr, r3
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d0e0      	beq.n	8000a90 <__udivmoddi4+0xa4>
 8000ace:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ad2:	e7dd      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000ad4:	b902      	cbnz	r2, 8000ad8 <__udivmoddi4+0xec>
 8000ad6:	deff      	udf	#255	; 0xff
 8000ad8:	fab2 f282 	clz	r2, r2
 8000adc:	2a00      	cmp	r2, #0
 8000ade:	f040 8092 	bne.w	8000c06 <__udivmoddi4+0x21a>
 8000ae2:	eba1 010c 	sub.w	r1, r1, ip
 8000ae6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aea:	fa1f fe8c 	uxth.w	lr, ip
 8000aee:	2601      	movs	r6, #1
 8000af0:	0c20      	lsrs	r0, r4, #16
 8000af2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000af6:	fb07 1113 	mls	r1, r7, r3, r1
 8000afa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000afe:	fb0e f003 	mul.w	r0, lr, r3
 8000b02:	4288      	cmp	r0, r1
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x12c>
 8000b06:	eb1c 0101 	adds.w	r1, ip, r1
 8000b0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x12a>
 8000b10:	4288      	cmp	r0, r1
 8000b12:	f200 80cb 	bhi.w	8000cac <__udivmoddi4+0x2c0>
 8000b16:	4643      	mov	r3, r8
 8000b18:	1a09      	subs	r1, r1, r0
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b20:	fb07 1110 	mls	r1, r7, r0, r1
 8000b24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b28:	fb0e fe00 	mul.w	lr, lr, r0
 8000b2c:	45a6      	cmp	lr, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x156>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x154>
 8000b3a:	45a6      	cmp	lr, r4
 8000b3c:	f200 80bb 	bhi.w	8000cb6 <__udivmoddi4+0x2ca>
 8000b40:	4608      	mov	r0, r1
 8000b42:	eba4 040e 	sub.w	r4, r4, lr
 8000b46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b4a:	e79c      	b.n	8000a86 <__udivmoddi4+0x9a>
 8000b4c:	f1c6 0720 	rsb	r7, r6, #32
 8000b50:	40b3      	lsls	r3, r6
 8000b52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b62:	431c      	orrs	r4, r3
 8000b64:	40f9      	lsrs	r1, r7
 8000b66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b72:	0c20      	lsrs	r0, r4, #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fb09 1118 	mls	r1, r9, r8, r1
 8000b7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b80:	fb08 f00e 	mul.w	r0, r8, lr
 8000b84:	4288      	cmp	r0, r1
 8000b86:	fa02 f206 	lsl.w	r2, r2, r6
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b8>
 8000b8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b94:	f080 8088 	bcs.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f240 8085 	bls.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1a09      	subs	r1, r1, r0
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bac:	fb09 1110 	mls	r1, r9, r0, r1
 8000bb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb8:	458e      	cmp	lr, r1
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1e2>
 8000bbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc4:	d26c      	bcs.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bc6:	458e      	cmp	lr, r1
 8000bc8:	d96a      	bls.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bca:	3802      	subs	r0, #2
 8000bcc:	4461      	add	r1, ip
 8000bce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000bd6:	eba1 010e 	sub.w	r1, r1, lr
 8000bda:	42a1      	cmp	r1, r4
 8000bdc:	46c8      	mov	r8, r9
 8000bde:	46a6      	mov	lr, r4
 8000be0:	d356      	bcc.n	8000c90 <__udivmoddi4+0x2a4>
 8000be2:	d053      	beq.n	8000c8c <__udivmoddi4+0x2a0>
 8000be4:	b15d      	cbz	r5, 8000bfe <__udivmoddi4+0x212>
 8000be6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bea:	eb61 010e 	sbc.w	r1, r1, lr
 8000bee:	fa01 f707 	lsl.w	r7, r1, r7
 8000bf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000bf6:	40f1      	lsrs	r1, r6
 8000bf8:	431f      	orrs	r7, r3
 8000bfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000bfe:	2600      	movs	r6, #0
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	40d8      	lsrs	r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	fa21 f303 	lsr.w	r3, r1, r3
 8000c14:	4091      	lsls	r1, r2
 8000c16:	4301      	orrs	r1, r0
 8000c18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1c:	fa1f fe8c 	uxth.w	lr, ip
 8000c20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c24:	fb07 3610 	mls	r6, r7, r0, r3
 8000c28:	0c0b      	lsrs	r3, r1, #16
 8000c2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c32:	429e      	cmp	r6, r3
 8000c34:	fa04 f402 	lsl.w	r4, r4, r2
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x260>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c42:	d22f      	bcs.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c44:	429e      	cmp	r6, r3
 8000c46:	d92d      	bls.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1b9b      	subs	r3, r3, r6
 8000c4e:	b289      	uxth	r1, r1
 8000c50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c54:	fb07 3316 	mls	r3, r7, r6, r3
 8000c58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c60:	428b      	cmp	r3, r1
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x28a>
 8000c64:	eb1c 0101 	adds.w	r1, ip, r1
 8000c68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c6c:	d216      	bcs.n	8000c9c <__udivmoddi4+0x2b0>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d914      	bls.n	8000c9c <__udivmoddi4+0x2b0>
 8000c72:	3e02      	subs	r6, #2
 8000c74:	4461      	add	r1, ip
 8000c76:	1ac9      	subs	r1, r1, r3
 8000c78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c7c:	e738      	b.n	8000af0 <__udivmoddi4+0x104>
 8000c7e:	462e      	mov	r6, r5
 8000c80:	4628      	mov	r0, r5
 8000c82:	e705      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000c84:	4606      	mov	r6, r0
 8000c86:	e6e3      	b.n	8000a50 <__udivmoddi4+0x64>
 8000c88:	4618      	mov	r0, r3
 8000c8a:	e6f8      	b.n	8000a7e <__udivmoddi4+0x92>
 8000c8c:	454b      	cmp	r3, r9
 8000c8e:	d2a9      	bcs.n	8000be4 <__udivmoddi4+0x1f8>
 8000c90:	ebb9 0802 	subs.w	r8, r9, r2
 8000c94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c98:	3801      	subs	r0, #1
 8000c9a:	e7a3      	b.n	8000be4 <__udivmoddi4+0x1f8>
 8000c9c:	4646      	mov	r6, r8
 8000c9e:	e7ea      	b.n	8000c76 <__udivmoddi4+0x28a>
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	e794      	b.n	8000bce <__udivmoddi4+0x1e2>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	e7d1      	b.n	8000c4c <__udivmoddi4+0x260>
 8000ca8:	46d0      	mov	r8, sl
 8000caa:	e77b      	b.n	8000ba4 <__udivmoddi4+0x1b8>
 8000cac:	3b02      	subs	r3, #2
 8000cae:	4461      	add	r1, ip
 8000cb0:	e732      	b.n	8000b18 <__udivmoddi4+0x12c>
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	e709      	b.n	8000aca <__udivmoddi4+0xde>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	e742      	b.n	8000b42 <__udivmoddi4+0x156>

08000cbc <__aeabi_idiv0>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <ADS1115_init>:
	ADS1115_Config_t 	config;
};

//static void prepareConfigFrame(uint8_t *pOutFrame, ADS1115_Config_t config);

ADS1115_Handle_t* ADS1115_init(I2C_HandleTypeDef *hi2c, uint16_t Addr, ADS1115_Config_t config){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	4608      	mov	r0, r1
 8000cca:	4639      	mov	r1, r7
 8000ccc:	e881 000c 	stmia.w	r1, {r2, r3}
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	817b      	strh	r3, [r7, #10]
	ADS1115_Handle_t *pConfig = malloc(sizeof(ADS1115_Handle_t));
 8000cd4:	2010      	movs	r0, #16
 8000cd6:	f00f fcb1 	bl	801063c <malloc>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	617b      	str	r3, [r7, #20]
	pConfig->hi2c = hi2c;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	601a      	str	r2, [r3, #0]
	pConfig->address = Addr;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	897a      	ldrh	r2, [r7, #10]
 8000ce8:	809a      	strh	r2, [r3, #4]
	pConfig->config = config;
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	1d9a      	adds	r2, r3, #6
 8000cee:	463b      	mov	r3, r7
 8000cf0:	cb03      	ldmia	r3!, {r0, r1}
 8000cf2:	6010      	str	r0, [r2, #0]
 8000cf4:	6051      	str	r1, [r2, #4]
	return pConfig;
 8000cf6:	697b      	ldr	r3, [r7, #20]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <ADS1115_updateConfig>:

void ADS1115_deinit(ADS1115_Handle_t* pConfig){
	free(pConfig);
}

void ADS1115_updateConfig(ADS1115_Handle_t *pConfig, ADS1115_Config_t config){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af02      	add	r7, sp, #8
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	e883 0006 	stmia.w	r3, {r1, r2}
	pConfig->config = config;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	1d9a      	adds	r2, r3, #6
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	cb03      	ldmia	r3!, {r0, r1}
 8000d16:	6010      	str	r0, [r2, #0]
 8000d18:	6051      	str	r1, [r2, #4]

	uint8_t bytes[3] = {0};
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <ADS1115_updateConfig+0x60>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	82bb      	strh	r3, [r7, #20]
 8000d20:	2300      	movs	r3, #0
 8000d22:	75bb      	strb	r3, [r7, #22]
	prepareConfigFrame(bytes, pConfig->config);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f107 0014 	add.w	r0, r7, #20
 8000d2a:	f8d3 1006 	ldr.w	r1, [r3, #6]
 8000d2e:	460a      	mov	r2, r1
 8000d30:	f8d3 100a 	ldr.w	r1, [r3, #10]
 8000d34:	460b      	mov	r3, r1
 8000d36:	4611      	mov	r1, r2
 8000d38:	461a      	mov	r2, r3
 8000d3a:	f000 f875 	bl	8000e28 <prepareConfigFrame>

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	6818      	ldr	r0, [r3, #0]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	889b      	ldrh	r3, [r3, #4]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	b299      	uxth	r1, r3
 8000d4a:	f107 0214 	add.w	r2, r7, #20
 8000d4e:	2364      	movs	r3, #100	; 0x64
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	2303      	movs	r3, #3
 8000d54:	f003 fe04 	bl	8004960 <HAL_I2C_Master_Transmit>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	080109e0 	.word	0x080109e0

08000d64 <ADS1115_getData>:
	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);

	return ADS1115_getData(pConfig);
}

int16_t ADS1115_getData(ADS1115_Handle_t *pConfig){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af02      	add	r7, sp, #8
 8000d6a:	6078      	str	r0, [r7, #4]
	uint8_t bytes[2] = {0};
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	81bb      	strh	r3, [r7, #12]
	bytes[0] = 0x00;
 8000d70:	2300      	movs	r3, #0
 8000d72:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 1, 50);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6818      	ldr	r0, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	889b      	ldrh	r3, [r3, #4]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	b299      	uxth	r1, r3
 8000d80:	f107 020c 	add.w	r2, r7, #12
 8000d84:	2332      	movs	r3, #50	; 0x32
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	f003 fde9 	bl	8004960 <HAL_I2C_Master_Transmit>

	if(HAL_I2C_Master_Receive(pConfig->hi2c, (pConfig->address << 1), bytes, 2, 50) != HAL_OK)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6818      	ldr	r0, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	889b      	ldrh	r3, [r3, #4]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	b299      	uxth	r1, r3
 8000d9a:	f107 020c 	add.w	r2, r7, #12
 8000d9e:	2332      	movs	r3, #50	; 0x32
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2302      	movs	r3, #2
 8000da4:	f003 feda 	bl	8004b5c <HAL_I2C_Master_Receive>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <ADS1115_getData+0x4e>
		return 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e008      	b.n	8000dc4 <ADS1115_getData+0x60>

	int16_t readValue = ((bytes[0] << 8) | bytes[1]);
 8000db2:	7b3b      	ldrb	r3, [r7, #12]
 8000db4:	021b      	lsls	r3, r3, #8
 8000db6:	b21a      	sxth	r2, r3
 8000db8:	7b7b      	ldrb	r3, [r7, #13]
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	81fb      	strh	r3, [r7, #14]

	return readValue;
 8000dc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <ADS1115_startContinousMode>:

void ADS1115_setConversionReadyPin(ADS1115_Handle_t* pConfig){
	ADS1115_setThresholds(pConfig, 0x0000, 0xFFFF);
}

void ADS1115_startContinousMode(ADS1115_Handle_t* pConfig){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af02      	add	r7, sp, #8
 8000dd2:	6078      	str	r0, [r7, #4]
	uint8_t bytes[3] = {0};
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <ADS1115_startContinousMode+0x58>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	82bb      	strh	r3, [r7, #20]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	75bb      	strb	r3, [r7, #22]

	ADS1115_Config_t configReg = pConfig->config;
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	3206      	adds	r2, #6
 8000de6:	6810      	ldr	r0, [r2, #0]
 8000de8:	6851      	ldr	r1, [r2, #4]
 8000dea:	c303      	stmia	r3!, {r0, r1}
	configReg.operatingMode = MODE_CONTINOUS;
 8000dec:	2300      	movs	r3, #0
 8000dee:	73bb      	strb	r3, [r7, #14]
	prepareConfigFrame(bytes, configReg);
 8000df0:	f107 0014 	add.w	r0, r7, #20
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000dfc:	f000 f814 	bl	8000e28 <prepareConfigFrame>

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6818      	ldr	r0, [r3, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	889b      	ldrh	r3, [r3, #4]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	b299      	uxth	r1, r3
 8000e0c:	f107 0214 	add.w	r2, r7, #20
 8000e10:	2364      	movs	r3, #100	; 0x64
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	2303      	movs	r3, #3
 8000e16:	f003 fda3 	bl	8004960 <HAL_I2C_Master_Transmit>
}
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	080109e0 	.word	0x080109e0

08000e28 <prepareConfigFrame>:
	prepareConfigFrame(bytes, configReg);

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
}

void prepareConfigFrame(uint8_t *pOutFrame, ADS1115_Config_t config){
 8000e28:	b480      	push	{r7}
 8000e2a:	b087      	sub	sp, #28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t temp[3] = {0};
 8000e36:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <prepareConfigFrame+0xac>)
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	82bb      	strh	r3, [r7, #20]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	75bb      	strb	r3, [r7, #22]
	pOutFrame[0] = 0x01;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2201      	movs	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
	pOutFrame[1] |= (config.channel << 4) | (config.pgaConfig << 1)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	b25a      	sxtb	r2, r3
 8000e4e:	793b      	ldrb	r3, [r7, #4]
 8000e50:	011b      	lsls	r3, r3, #4
 8000e52:	b259      	sxtb	r1, r3
 8000e54:	797b      	ldrb	r3, [r7, #5]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	430b      	orrs	r3, r1
 8000e5c:	b259      	sxtb	r1, r3
					| (config.operatingMode << 0);
 8000e5e:	79bb      	ldrb	r3, [r7, #6]
 8000e60:	b25b      	sxtb	r3, r3
 8000e62:	430b      	orrs	r3, r1
 8000e64:	b25b      	sxtb	r3, r3
	pOutFrame[1] |= (config.channel << 4) | (config.pgaConfig << 1)
 8000e66:	4313      	orrs	r3, r2
 8000e68:	b25a      	sxtb	r2, r3
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	701a      	strb	r2, [r3, #0]
	pOutFrame[2] |= (config.dataRate << 5) | (config.compareMode << 4) | (config.polarityMode << 3)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	3302      	adds	r3, #2
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b25a      	sxtb	r2, r3
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	015b      	lsls	r3, r3, #5
 8000e7e:	b259      	sxtb	r1, r3
 8000e80:	7a3b      	ldrb	r3, [r7, #8]
 8000e82:	011b      	lsls	r3, r3, #4
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	430b      	orrs	r3, r1
 8000e88:	b259      	sxtb	r1, r3
 8000e8a:	7a7b      	ldrb	r3, [r7, #9]
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	430b      	orrs	r3, r1
 8000e92:	b259      	sxtb	r1, r3
					| (config.latchingMode << 2) | (config.queueComparator << 1);
 8000e94:	7abb      	ldrb	r3, [r7, #10]
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	430b      	orrs	r3, r1
 8000e9c:	b259      	sxtb	r1, r3
 8000e9e:	7afb      	ldrb	r3, [r7, #11]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	b25b      	sxtb	r3, r3
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	b25b      	sxtb	r3, r3
	pOutFrame[2] |= (config.dataRate << 5) | (config.compareMode << 4) | (config.polarityMode << 3)
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b25a      	sxtb	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	3302      	adds	r3, #2
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	701a      	strb	r2, [r3, #0]
	temp[0] = pOutFrame[0];
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	753b      	strb	r3, [r7, #20]
	temp[1] = pOutFrame[1];
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	785b      	ldrb	r3, [r3, #1]
 8000ebe:	757b      	strb	r3, [r7, #21]
	temp[2] = pOutFrame[2];
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	789b      	ldrb	r3, [r3, #2]
 8000ec4:	75bb      	strb	r3, [r7, #22]
}
 8000ec6:	bf00      	nop
 8000ec8:	371c      	adds	r7, #28
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	080109e0 	.word	0x080109e0

08000ed8 <MCP4725_init>:

    Constructor
*/
/**************************************************************************/ 
MCP4725 MCP4725_init(I2C_HandleTypeDef* hi2c, MCP4725Ax_ADDRESS addr, float refV)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	ed87 0a00 	vstr	s0, [r7]
 8000ee8:	71fb      	strb	r3, [r7, #7]
	MCP4725 _MCP4725;

	_MCP4725._i2cAddress = (uint16_t)(addr<<1);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	753b      	strb	r3, [r7, #20]
	_MCP4725.hi2c = hi2c;
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	613b      	str	r3, [r7, #16]

	MCP4725_setReferenceVoltage(&_MCP4725, refV); //set _refVoltage & _bitsPerVolt variables
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	ed97 0a00 	vldr	s0, [r7]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f80c 	bl	8000f1c <MCP4725_setReferenceVoltage>

	return _MCP4725;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	461c      	mov	r4, r3
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd90      	pop	{r4, r7, pc}
	...

08000f1c <MCP4725_setReferenceVoltage>:

    Set reference voltage
*/
/**************************************************************************/
void MCP4725_setReferenceVoltage(MCP4725* _MCP4725, float value)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	ed87 0a00 	vstr	s0, [r7]
   if   (value == 0) _MCP4725->_refVoltage = MCP4725_REFERENCE_VOLTAGE; //sanity check, avoid division by zero
 8000f28:	edd7 7a00 	vldr	s15, [r7]
 8000f2c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f34:	d103      	bne.n	8000f3e <MCP4725_setReferenceVoltage+0x22>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a0c      	ldr	r2, [pc, #48]	; (8000f6c <MCP4725_setReferenceVoltage+0x50>)
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	e002      	b.n	8000f44 <MCP4725_setReferenceVoltage+0x28>
   else              _MCP4725->_refVoltage = value;    
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	683a      	ldr	r2, [r7, #0]
 8000f42:	609a      	str	r2, [r3, #8]

   _MCP4725->_bitsPerVolt = (float)MCP4725_STEPS / _MCP4725->_refVoltage;         //TODO: check accuracy with +0.5
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f4a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000f70 <MCP4725_setReferenceVoltage+0x54>
 8000f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f56:	ee17 3a90 	vmov	r3, s15
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	819a      	strh	r2, [r3, #12]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	40533333 	.word	0x40533333
 8000f70:	45800000 	.word	0x45800000

08000f74 <MCP4725_setValue>:
      - "MCP4725_POWER_DOWN_100KOHM"..power down on with 100 kOhm to ground
      - "MCP4725_POWER_DOWN_500KOHM"..power down on with 500kOhm to ground
*/
/**************************************************************************/ 
uint8_t MCP4725_setValue(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	4611      	mov	r1, r2
 8000f80:	461a      	mov	r2, r3
 8000f82:	4603      	mov	r3, r0
 8000f84:	807b      	strh	r3, [r7, #2]
 8000f86:	460b      	mov	r3, r1
 8000f88:	707b      	strb	r3, [r7, #1]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	703b      	strb	r3, [r7, #0]
  #ifndef MCP4725_DISABLE_SANITY_CHECK
  if (value > MCP4725_MAX_VALUE) value = MCP4725_MAX_VALUE; //make sure value never exceeds threshold
  #endif

  return MCP4725_writeComand(_MCP4725, value, mode, powerType);
 8000f8e:	783b      	ldrb	r3, [r7, #0]
 8000f90:	787a      	ldrb	r2, [r7, #1]
 8000f92:	8879      	ldrh	r1, [r7, #2]
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f000 f822 	bl	8000fde <MCP4725_writeComand>
 8000f9a:	4603      	mov	r3, r0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <MCP4725_getEepromBusyFlag>:
      is ignored
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint8_t MCP4725_getEepromBusyFlag(MCP4725* _MCP4725)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint16_t value = MCP4725_readRegister(_MCP4725, MCP4725_READ_SETTINGS); //BSY,POR,xx,xx,xx,PD1,PD0,xx
 8000fac:	2101      	movs	r1, #1
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 f895 	bl	80010de <MCP4725_readRegister>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	81fb      	strh	r3, [r7, #14]

  if (value != MCP4725_ERROR) return (value & 0x80)==0x80;		//1 - completed, 0 - incompleted
 8000fb8:	89fb      	ldrh	r3, [r7, #14]
 8000fba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d008      	beq.n	8000fd4 <MCP4725_getEepromBusyFlag+0x30>
 8000fc2:	89fb      	ldrh	r3, [r7, #14]
 8000fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	bf14      	ite	ne
 8000fcc:	2301      	movne	r3, #1
 8000fce:	2300      	moveq	r3, #0
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	e000      	b.n	8000fd6 <MCP4725_getEepromBusyFlag+0x32>
                              return 0;										//collision on i2c bus
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <MCP4725_writeComand>:
    - "MCP4725_POWER_DOWN_500KOHM"
      1,  1
*/
/**************************************************************************/ 
uint8_t	MCP4725_writeComand(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af02      	add	r7, sp, #8
 8000fe4:	6078      	str	r0, [r7, #4]
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	4611      	mov	r1, r2
 8000fea:	461a      	mov	r2, r3
 8000fec:	4603      	mov	r3, r0
 8000fee:	807b      	strh	r3, [r7, #2]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	707b      	strb	r3, [r7, #1]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	703b      	strb	r3, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef I2C_Stat;
  //Wire.beginTransmission(_i2cAddress);

  switch (mode)
 8000ff8:	787b      	ldrb	r3, [r7, #1]
 8000ffa:	2b60      	cmp	r3, #96	; 0x60
 8000ffc:	d028      	beq.n	8001050 <MCP4725_writeComand+0x72>
 8000ffe:	2b60      	cmp	r3, #96	; 0x60
 8001000:	dc4a      	bgt.n	8001098 <MCP4725_writeComand+0xba>
 8001002:	2b00      	cmp	r3, #0
 8001004:	d002      	beq.n	800100c <MCP4725_writeComand+0x2e>
 8001006:	2b40      	cmp	r3, #64	; 0x40
 8001008:	d022      	beq.n	8001050 <MCP4725_writeComand+0x72>
 800100a:	e045      	b.n	8001098 <MCP4725_writeComand+0xba>
    case MCP4725_FAST_MODE:                                            //see MCP4725 datasheet on p.18
		
      //Wire.send(mode | (powerType << 4)  | highByte(value));
      //Wire.send(lowByte(value));
		
			buffer[0] = mode | (powerType << 4)  | highByte(value);
 800100c:	783b      	ldrb	r3, [r7, #0]
 800100e:	011b      	lsls	r3, r3, #4
 8001010:	b25a      	sxtb	r2, r3
 8001012:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001016:	4313      	orrs	r3, r2
 8001018:	b25a      	sxtb	r2, r3
 800101a:	887b      	ldrh	r3, [r7, #2]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	b29b      	uxth	r3, r3
 8001020:	b25b      	sxtb	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b25b      	sxtb	r3, r3
 8001026:	b2db      	uxtb	r3, r3
 8001028:	733b      	strb	r3, [r7, #12]
			buffer[1] = lowByte(value);
 800102a:	887b      	ldrh	r3, [r7, #2]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	737b      	strb	r3, [r7, #13]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 2, 1000);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	791b      	ldrb	r3, [r3, #4]
 8001038:	b299      	uxth	r1, r3
 800103a:	f107 020c 	add.w	r2, r7, #12
 800103e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2302      	movs	r3, #2
 8001046:	f003 fc8b 	bl	8004960 <HAL_I2C_Master_Transmit>
 800104a:	4603      	mov	r3, r0
 800104c:	73fb      	strb	r3, [r7, #15]
		
      break;
 800104e:	e023      	b.n	8001098 <MCP4725_writeComand+0xba>

    case MCP4725_REGISTER_MODE: case MCP4725_EEPROM_MODE:              //see MCP4725 datasheet on p.19
      value = value << 4;                                              //D11,D10,D9,D8,D7,D6,D5,D4,  D3,D2,D1,D0,xx,xx,xx,xx
 8001050:	887b      	ldrh	r3, [r7, #2]
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	807b      	strh	r3, [r7, #2]
      //Wire.send(mode  | (powerType << 1));
      //Wire.send(highByte(value));
      //Wire.send(lowByte(value));
      
			buffer[0] = mode  | (powerType << 1);
 8001056:	783b      	ldrb	r3, [r7, #0]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	b25a      	sxtb	r2, r3
 800105c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001060:	4313      	orrs	r3, r2
 8001062:	b25b      	sxtb	r3, r3
 8001064:	b2db      	uxtb	r3, r3
 8001066:	733b      	strb	r3, [r7, #12]
			buffer[1] = highByte(value);
 8001068:	887b      	ldrh	r3, [r7, #2]
 800106a:	0a1b      	lsrs	r3, r3, #8
 800106c:	b29b      	uxth	r3, r3
 800106e:	b2db      	uxtb	r3, r3
 8001070:	737b      	strb	r3, [r7, #13]
			buffer[2] = lowByte(value);
 8001072:	887b      	ldrh	r3, [r7, #2]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	73bb      	strb	r3, [r7, #14]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 3, 1000);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6818      	ldr	r0, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	791b      	ldrb	r3, [r3, #4]
 8001080:	b299      	uxth	r1, r3
 8001082:	f107 020c 	add.w	r2, r7, #12
 8001086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2303      	movs	r3, #3
 800108e:	f003 fc67 	bl	8004960 <HAL_I2C_Master_Transmit>
 8001092:	4603      	mov	r3, r0
 8001094:	73fb      	strb	r3, [r7, #15]
		
			break;
 8001096:	bf00      	nop
  }

  if (I2C_Stat != HAL_OK) return 0;                   //send data over i2c & check for collision on i2c bus
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MCP4725_writeComand+0xc4>
 800109e:	2300      	movs	r3, #0
 80010a0:	e019      	b.n	80010d6 <MCP4725_writeComand+0xf8>

  if (mode == MCP4725_EEPROM_MODE)
 80010a2:	787b      	ldrb	r3, [r7, #1]
 80010a4:	2b60      	cmp	r3, #96	; 0x60
 80010a6:	d115      	bne.n	80010d4 <MCP4725_writeComand+0xf6>
  {
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff7b 	bl	8000fa4 <MCP4725_getEepromBusyFlag>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d101      	bne.n	80010b8 <MCP4725_writeComand+0xda>
 80010b4:	2301      	movs	r3, #1
 80010b6:	e00e      	b.n	80010d6 <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //typical EEPROM write time 25 msec
 80010b8:	2019      	movs	r0, #25
 80010ba:	f002 fca7 	bl	8003a0c <HAL_Delay>
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ff70 	bl	8000fa4 <MCP4725_getEepromBusyFlag>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d101      	bne.n	80010ce <MCP4725_writeComand+0xf0>
 80010ca:	2301      	movs	r3, #1
 80010cc:	e003      	b.n	80010d6 <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //maximum EEPROM write time 25 + 25 = 50 msec
 80010ce:	2019      	movs	r0, #25
 80010d0:	f002 fc9c 	bl	8003a0c <HAL_Delay>
  }

  return 1;                                                         //success!!!
 80010d4:	2301      	movs	r3, #1
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <MCP4725_readRegister>:
      ------ Settings data ------  ---------------- DAC register data ---------------  ------------------- EEPROM data --------------------
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint16_t MCP4725_readRegister(MCP4725* _MCP4725, MCP4725_READ_TYPE dataType)
{
 80010de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010e2:	b089      	sub	sp, #36	; 0x24
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	70fb      	strb	r3, [r7, #3]
 80010ec:	466b      	mov	r3, sp
 80010ee:	461e      	mov	r6, r3
  uint16_t value = dataType;                             //convert enum to integer to avoid compiler warnings                                    
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	82bb      	strh	r3, [r7, #20]
	uint16_t ret_val = 0 ;
 80010f4:	2300      	movs	r3, #0
 80010f6:	82fb      	strh	r3, [r7, #22]
	uint8_t buffer[dataType];
 80010f8:	78f9      	ldrb	r1, [r7, #3]
 80010fa:	460b      	mov	r3, r1
 80010fc:	3b01      	subs	r3, #1
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	b2cb      	uxtb	r3, r1
 8001102:	2200      	movs	r2, #0
 8001104:	4698      	mov	r8, r3
 8001106:	4691      	mov	r9, r2
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	f04f 0300 	mov.w	r3, #0
 8001110:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001114:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001118:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800111c:	b2cb      	uxtb	r3, r1
 800111e:	2200      	movs	r2, #0
 8001120:	461c      	mov	r4, r3
 8001122:	4615      	mov	r5, r2
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	00eb      	lsls	r3, r5, #3
 800112e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001132:	00e2      	lsls	r2, r4, #3
 8001134:	460b      	mov	r3, r1
 8001136:	3307      	adds	r3, #7
 8001138:	08db      	lsrs	r3, r3, #3
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	ebad 0d03 	sub.w	sp, sp, r3
 8001140:	ab02      	add	r3, sp, #8
 8001142:	3300      	adds	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef I2C_Stat;
	
	I2C_Stat = HAL_I2C_Master_Receive(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, dataType, 1000);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6818      	ldr	r0, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	791b      	ldrb	r3, [r3, #4]
 800114e:	b299      	uxth	r1, r3
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	b29b      	uxth	r3, r3
 8001154:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001158:	9200      	str	r2, [sp, #0]
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	f003 fcfe 	bl	8004b5c <HAL_I2C_Master_Receive>
 8001160:	4603      	mov	r3, r0
 8001162:	72fb      	strb	r3, [r7, #11]

  if (I2C_Stat != HAL_OK) return MCP4725_ERROR;
 8001164:	7afb      	ldrb	r3, [r7, #11]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d002      	beq.n	8001170 <MCP4725_readRegister+0x92>
 800116a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800116e:	e01f      	b.n	80011b0 <MCP4725_readRegister+0xd2>


  /* read data from buffer */
  switch (dataType)
 8001170:	78fb      	ldrb	r3, [r7, #3]
 8001172:	2b05      	cmp	r3, #5
 8001174:	d00a      	beq.n	800118c <MCP4725_readRegister+0xae>
 8001176:	2b05      	cmp	r3, #5
 8001178:	dc19      	bgt.n	80011ae <MCP4725_readRegister+0xd0>
 800117a:	2b01      	cmp	r3, #1
 800117c:	d002      	beq.n	8001184 <MCP4725_readRegister+0xa6>
 800117e:	2b03      	cmp	r3, #3
 8001180:	d004      	beq.n	800118c <MCP4725_readRegister+0xae>
 8001182:	e014      	b.n	80011ae <MCP4725_readRegister+0xd0>
  {
    case MCP4725_READ_SETTINGS:
      ret_val = buffer[0];
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	82fb      	strh	r3, [r7, #22]

      break;
 800118a:	e010      	b.n	80011ae <MCP4725_readRegister+0xd0>

    case MCP4725_READ_DAC_REG: case MCP4725_READ_EEPROM:

      ret_val = buffer[value-2];
 800118c:	8abb      	ldrh	r3, [r7, #20]
 800118e:	3b02      	subs	r3, #2
 8001190:	68fa      	ldr	r2, [r7, #12]
 8001192:	5cd3      	ldrb	r3, [r2, r3]
 8001194:	82fb      	strh	r3, [r7, #22]
      ret_val = (ret_val << 8) | buffer[value-1];
 8001196:	8afb      	ldrh	r3, [r7, #22]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	b21a      	sxth	r2, r3
 800119c:	8abb      	ldrh	r3, [r7, #20]
 800119e:	3b01      	subs	r3, #1
 80011a0:	68f9      	ldr	r1, [r7, #12]
 80011a2:	5ccb      	ldrb	r3, [r1, r3]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	82fb      	strh	r3, [r7, #22]
      break;
 80011ac:	bf00      	nop
  }

  return ret_val;
 80011ae:	8afb      	ldrh	r3, [r7, #22]
 80011b0:	46b5      	mov	sp, r6
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	371c      	adds	r7, #28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080011bc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af04      	add	r7, sp, #16
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
 80011da:	9302      	str	r3, [sp, #8]
 80011dc:	2301      	movs	r3, #1
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	1dfb      	adds	r3, r7, #7
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2301      	movs	r3, #1
 80011e6:	2200      	movs	r2, #0
 80011e8:	2178      	movs	r1, #120	; 0x78
 80011ea:	4803      	ldr	r0, [pc, #12]	; (80011f8 <ssd1306_WriteCommand+0x2c>)
 80011ec:	f003 fedc 	bl	8004fa8 <HAL_I2C_Mem_Write>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200006bc 	.word	0x200006bc

080011fc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af04      	add	r7, sp, #16
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b29b      	uxth	r3, r3
 800120a:	f04f 32ff 	mov.w	r2, #4294967295
 800120e:	9202      	str	r2, [sp, #8]
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2301      	movs	r3, #1
 8001218:	2240      	movs	r2, #64	; 0x40
 800121a:	2178      	movs	r1, #120	; 0x78
 800121c:	4803      	ldr	r0, [pc, #12]	; (800122c <ssd1306_WriteData+0x30>)
 800121e:	f003 fec3 	bl	8004fa8 <HAL_I2C_Mem_Write>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200006bc 	.word	0x200006bc

08001230 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001234:	f7ff ffc2 	bl	80011bc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001238:	2064      	movs	r0, #100	; 0x64
 800123a:	f002 fbe7 	bl	8003a0c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800123e:	2000      	movs	r0, #0
 8001240:	f000 fa8a 	bl	8001758 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001244:	2020      	movs	r0, #32
 8001246:	f7ff ffc1 	bl	80011cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800124a:	2000      	movs	r0, #0
 800124c:	f7ff ffbe 	bl	80011cc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001250:	20b0      	movs	r0, #176	; 0xb0
 8001252:	f7ff ffbb 	bl	80011cc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001256:	20c8      	movs	r0, #200	; 0xc8
 8001258:	f7ff ffb8 	bl	80011cc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800125c:	2000      	movs	r0, #0
 800125e:	f7ff ffb5 	bl	80011cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001262:	2010      	movs	r0, #16
 8001264:	f7ff ffb2 	bl	80011cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001268:	2040      	movs	r0, #64	; 0x40
 800126a:	f7ff ffaf 	bl	80011cc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800126e:	20ff      	movs	r0, #255	; 0xff
 8001270:	f000 fa5f 	bl	8001732 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001274:	20a1      	movs	r0, #161	; 0xa1
 8001276:	f7ff ffa9 	bl	80011cc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800127a:	20a6      	movs	r0, #166	; 0xa6
 800127c:	f7ff ffa6 	bl	80011cc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001280:	20a8      	movs	r0, #168	; 0xa8
 8001282:	f7ff ffa3 	bl	80011cc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001286:	203f      	movs	r0, #63	; 0x3f
 8001288:	f7ff ffa0 	bl	80011cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800128c:	20a4      	movs	r0, #164	; 0xa4
 800128e:	f7ff ff9d 	bl	80011cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001292:	20d3      	movs	r0, #211	; 0xd3
 8001294:	f7ff ff9a 	bl	80011cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff ff97 	bl	80011cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800129e:	20d5      	movs	r0, #213	; 0xd5
 80012a0:	f7ff ff94 	bl	80011cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80012a4:	20f0      	movs	r0, #240	; 0xf0
 80012a6:	f7ff ff91 	bl	80011cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80012aa:	20d9      	movs	r0, #217	; 0xd9
 80012ac:	f7ff ff8e 	bl	80011cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80012b0:	2022      	movs	r0, #34	; 0x22
 80012b2:	f7ff ff8b 	bl	80011cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80012b6:	20da      	movs	r0, #218	; 0xda
 80012b8:	f7ff ff88 	bl	80011cc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80012bc:	2012      	movs	r0, #18
 80012be:	f7ff ff85 	bl	80011cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80012c2:	20db      	movs	r0, #219	; 0xdb
 80012c4:	f7ff ff82 	bl	80011cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80012c8:	2020      	movs	r0, #32
 80012ca:	f7ff ff7f 	bl	80011cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80012ce:	208d      	movs	r0, #141	; 0x8d
 80012d0:	f7ff ff7c 	bl	80011cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80012d4:	2014      	movs	r0, #20
 80012d6:	f7ff ff79 	bl	80011cc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80012da:	2001      	movs	r0, #1
 80012dc:	f000 fa3c 	bl	8001758 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80012e0:	2000      	movs	r0, #0
 80012e2:	f000 f80f 	bl	8001304 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80012e6:	f000 f831 	bl	800134c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <ssd1306_Init+0xd0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <ssd1306_Init+0xd0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80012f6:	4b02      	ldr	r3, [pc, #8]	; (8001300 <ssd1306_Init+0xd0>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	711a      	strb	r2, [r3, #4]
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200005c8 	.word	0x200005c8

08001304 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	e00d      	b.n	8001330 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <ssd1306_Fill+0x1a>
 800131a:	2100      	movs	r1, #0
 800131c:	e000      	b.n	8001320 <ssd1306_Fill+0x1c>
 800131e:	21ff      	movs	r1, #255	; 0xff
 8001320:	4a09      	ldr	r2, [pc, #36]	; (8001348 <ssd1306_Fill+0x44>)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4413      	add	r3, r2
 8001326:	460a      	mov	r2, r1
 8001328:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3301      	adds	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8001336:	d3ed      	bcc.n	8001314 <ssd1306_Fill+0x10>
    }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	200001b8 	.word	0x200001b8

0800134c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001352:	2300      	movs	r3, #0
 8001354:	71fb      	strb	r3, [r7, #7]
 8001356:	e01a      	b.n	800138e <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	3b50      	subs	r3, #80	; 0x50
 800135c:	b2db      	uxtb	r3, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ff34 	bl	80011cc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001364:	2000      	movs	r0, #0
 8001366:	f7ff ff31 	bl	80011cc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800136a:	2010      	movs	r0, #16
 800136c:	f7ff ff2e 	bl	80011cc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001370:	79fa      	ldrb	r2, [r7, #7]
 8001372:	4613      	mov	r3, r2
 8001374:	019b      	lsls	r3, r3, #6
 8001376:	4413      	add	r3, r2
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	461a      	mov	r2, r3
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <ssd1306_UpdateScreen+0x54>)
 800137e:	4413      	add	r3, r2
 8001380:	2182      	movs	r1, #130	; 0x82
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ff3a 	bl	80011fc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	3301      	adds	r3, #1
 800138c:	71fb      	strb	r3, [r7, #7]
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	2b07      	cmp	r3, #7
 8001392:	d9e1      	bls.n	8001358 <ssd1306_UpdateScreen+0xc>
    }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200001b8 	.word	0x200001b8

080013a4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80013a4:	b490      	push	{r4, r7}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
 80013ae:	460b      	mov	r3, r1
 80013b0:	71bb      	strb	r3, [r7, #6]
 80013b2:	4613      	mov	r3, r2
 80013b4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	2b81      	cmp	r3, #129	; 0x81
 80013ba:	d849      	bhi.n	8001450 <ssd1306_DrawPixel+0xac>
 80013bc:	79bb      	ldrb	r3, [r7, #6]
 80013be:	2b3f      	cmp	r3, #63	; 0x3f
 80013c0:	d846      	bhi.n	8001450 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80013c2:	797b      	ldrb	r3, [r7, #5]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d120      	bne.n	800140a <ssd1306_DrawPixel+0x66>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80013c8:	79fa      	ldrb	r2, [r7, #7]
 80013ca:	79bb      	ldrb	r3, [r7, #6]
 80013cc:	08db      	lsrs	r3, r3, #3
 80013ce:	b2d8      	uxtb	r0, r3
 80013d0:	4601      	mov	r1, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	019b      	lsls	r3, r3, #6
 80013d6:	440b      	add	r3, r1
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	4a1f      	ldr	r2, [pc, #124]	; (800145c <ssd1306_DrawPixel+0xb8>)
 80013de:	5cd3      	ldrb	r3, [r2, r3]
 80013e0:	b25a      	sxtb	r2, r3
 80013e2:	79bb      	ldrb	r3, [r7, #6]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	2101      	movs	r1, #1
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	4313      	orrs	r3, r2
 80013f2:	b25c      	sxtb	r4, r3
 80013f4:	79fa      	ldrb	r2, [r7, #7]
 80013f6:	4601      	mov	r1, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	019b      	lsls	r3, r3, #6
 80013fc:	440b      	add	r3, r1
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	b2e1      	uxtb	r1, r4
 8001404:	4a15      	ldr	r2, [pc, #84]	; (800145c <ssd1306_DrawPixel+0xb8>)
 8001406:	54d1      	strb	r1, [r2, r3]
 8001408:	e023      	b.n	8001452 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800140a:	79fa      	ldrb	r2, [r7, #7]
 800140c:	79bb      	ldrb	r3, [r7, #6]
 800140e:	08db      	lsrs	r3, r3, #3
 8001410:	b2d8      	uxtb	r0, r3
 8001412:	4601      	mov	r1, r0
 8001414:	460b      	mov	r3, r1
 8001416:	019b      	lsls	r3, r3, #6
 8001418:	440b      	add	r3, r1
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4413      	add	r3, r2
 800141e:	4a0f      	ldr	r2, [pc, #60]	; (800145c <ssd1306_DrawPixel+0xb8>)
 8001420:	5cd3      	ldrb	r3, [r2, r3]
 8001422:	b25a      	sxtb	r2, r3
 8001424:	79bb      	ldrb	r3, [r7, #6]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	2101      	movs	r1, #1
 800142c:	fa01 f303 	lsl.w	r3, r1, r3
 8001430:	b25b      	sxtb	r3, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	b25b      	sxtb	r3, r3
 8001436:	4013      	ands	r3, r2
 8001438:	b25c      	sxtb	r4, r3
 800143a:	79fa      	ldrb	r2, [r7, #7]
 800143c:	4601      	mov	r1, r0
 800143e:	460b      	mov	r3, r1
 8001440:	019b      	lsls	r3, r3, #6
 8001442:	440b      	add	r3, r1
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	b2e1      	uxtb	r1, r4
 800144a:	4a04      	ldr	r2, [pc, #16]	; (800145c <ssd1306_DrawPixel+0xb8>)
 800144c:	54d1      	strb	r1, [r2, r3]
 800144e:	e000      	b.n	8001452 <ssd1306_DrawPixel+0xae>
        return;
 8001450:	bf00      	nop
    }
}
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bc90      	pop	{r4, r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	200001b8 	.word	0x200001b8

08001460 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	4604      	mov	r4, r0
 8001468:	1d38      	adds	r0, r7, #4
 800146a:	e880 0006 	stmia.w	r0, {r1, r2}
 800146e:	461a      	mov	r2, r3
 8001470:	4623      	mov	r3, r4
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	4613      	mov	r3, r2
 8001476:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	2b1f      	cmp	r3, #31
 800147c:	d902      	bls.n	8001484 <ssd1306_WriteChar+0x24>
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	2b7e      	cmp	r3, #126	; 0x7e
 8001482:	d901      	bls.n	8001488 <ssd1306_WriteChar+0x28>
        return 0;
 8001484:	2300      	movs	r3, #0
 8001486:	e06d      	b.n	8001564 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001488:	4b38      	ldr	r3, [pc, #224]	; (800156c <ssd1306_WriteChar+0x10c>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	793b      	ldrb	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	2b82      	cmp	r3, #130	; 0x82
 8001494:	dc06      	bgt.n	80014a4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001496:	4b35      	ldr	r3, [pc, #212]	; (800156c <ssd1306_WriteChar+0x10c>)
 8001498:	885b      	ldrh	r3, [r3, #2]
 800149a:	461a      	mov	r2, r3
 800149c:	797b      	ldrb	r3, [r7, #5]
 800149e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80014a0:	2b40      	cmp	r3, #64	; 0x40
 80014a2:	dd01      	ble.n	80014a8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	e05d      	b.n	8001564 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	e04c      	b.n	8001548 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	3b20      	subs	r3, #32
 80014b4:	7979      	ldrb	r1, [r7, #5]
 80014b6:	fb01 f303 	mul.w	r3, r1, r3
 80014ba:	4619      	mov	r1, r3
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	440b      	add	r3, r1
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4413      	add	r3, r2
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
 80014cc:	e034      	b.n	8001538 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d012      	beq.n	8001504 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80014de:	4b23      	ldr	r3, [pc, #140]	; (800156c <ssd1306_WriteChar+0x10c>)
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	4413      	add	r3, r2
 80014ea:	b2d8      	uxtb	r0, r3
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <ssd1306_WriteChar+0x10c>)
 80014ee:	885b      	ldrh	r3, [r3, #2]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	4413      	add	r3, r2
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	7bba      	ldrb	r2, [r7, #14]
 80014fc:	4619      	mov	r1, r3
 80014fe:	f7ff ff51 	bl	80013a4 <ssd1306_DrawPixel>
 8001502:	e016      	b.n	8001532 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <ssd1306_WriteChar+0x10c>)
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	4413      	add	r3, r2
 8001510:	b2d8      	uxtb	r0, r3
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <ssd1306_WriteChar+0x10c>)
 8001514:	885b      	ldrh	r3, [r3, #2]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	4413      	add	r3, r2
 800151e:	b2d9      	uxtb	r1, r3
 8001520:	7bbb      	ldrb	r3, [r7, #14]
 8001522:	2b00      	cmp	r3, #0
 8001524:	bf0c      	ite	eq
 8001526:	2301      	moveq	r3, #1
 8001528:	2300      	movne	r3, #0
 800152a:	b2db      	uxtb	r3, r3
 800152c:	461a      	mov	r2, r3
 800152e:	f7ff ff39 	bl	80013a4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	3301      	adds	r3, #1
 8001536:	61bb      	str	r3, [r7, #24]
 8001538:	793b      	ldrb	r3, [r7, #4]
 800153a:	461a      	mov	r2, r3
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	4293      	cmp	r3, r2
 8001540:	d3c5      	bcc.n	80014ce <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3301      	adds	r3, #1
 8001546:	61fb      	str	r3, [r7, #28]
 8001548:	797b      	ldrb	r3, [r7, #5]
 800154a:	461a      	mov	r2, r3
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	4293      	cmp	r3, r2
 8001550:	d3ad      	bcc.n	80014ae <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <ssd1306_WriteChar+0x10c>)
 8001554:	881a      	ldrh	r2, [r3, #0]
 8001556:	793b      	ldrb	r3, [r7, #4]
 8001558:	b29b      	uxth	r3, r3
 800155a:	4413      	add	r3, r2
 800155c:	b29a      	uxth	r2, r3
 800155e:	4b03      	ldr	r3, [pc, #12]	; (800156c <ssd1306_WriteChar+0x10c>)
 8001560:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001562:	7bfb      	ldrb	r3, [r7, #15]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3724      	adds	r7, #36	; 0x24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd90      	pop	{r4, r7, pc}
 800156c:	200005c8 	.word	0x200005c8

08001570 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	1d38      	adds	r0, r7, #4
 800157a:	e880 0006 	stmia.w	r0, {r1, r2}
 800157e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001580:	e012      	b.n	80015a8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	7818      	ldrb	r0, [r3, #0]
 8001586:	78fb      	ldrb	r3, [r7, #3]
 8001588:	1d3a      	adds	r2, r7, #4
 800158a:	ca06      	ldmia	r2, {r1, r2}
 800158c:	f7ff ff68 	bl	8001460 <ssd1306_WriteChar>
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d002      	beq.n	80015a2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	e008      	b.n	80015b4 <ssd1306_WriteString+0x44>
        }
        str++;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	3301      	adds	r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1e8      	bne.n	8001582 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	781b      	ldrb	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	460a      	mov	r2, r1
 80015c6:	71fb      	strb	r3, [r7, #7]
 80015c8:	4613      	mov	r3, r2
 80015ca:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <ssd1306_SetCursor+0x2c>)
 80015d2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <ssd1306_SetCursor+0x2c>)
 80015da:	805a      	strh	r2, [r3, #2]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	200005c8 	.word	0x200005c8

080015ec <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4604      	mov	r4, r0
 80015f4:	4608      	mov	r0, r1
 80015f6:	4611      	mov	r1, r2
 80015f8:	461a      	mov	r2, r3
 80015fa:	4623      	mov	r3, r4
 80015fc:	71fb      	strb	r3, [r7, #7]
 80015fe:	4603      	mov	r3, r0
 8001600:	71bb      	strb	r3, [r7, #6]
 8001602:	460b      	mov	r3, r1
 8001604:	717b      	strb	r3, [r7, #5]
 8001606:	4613      	mov	r3, r2
 8001608:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 800160a:	797a      	ldrb	r2, [r7, #5]
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	bfb8      	it	lt
 8001614:	425b      	neglt	r3, r3
 8001616:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8001618:	793a      	ldrb	r2, [r7, #4]
 800161a:	79bb      	ldrb	r3, [r7, #6]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	bfb8      	it	lt
 8001622:	425b      	neglt	r3, r3
 8001624:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8001626:	79fa      	ldrb	r2, [r7, #7]
 8001628:	797b      	ldrb	r3, [r7, #5]
 800162a:	429a      	cmp	r2, r3
 800162c:	d201      	bcs.n	8001632 <ssd1306_Line+0x46>
 800162e:	2301      	movs	r3, #1
 8001630:	e001      	b.n	8001636 <ssd1306_Line+0x4a>
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
 8001636:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8001638:	79ba      	ldrb	r2, [r7, #6]
 800163a:	793b      	ldrb	r3, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	d201      	bcs.n	8001644 <ssd1306_Line+0x58>
 8001640:	2301      	movs	r3, #1
 8001642:	e001      	b.n	8001648 <ssd1306_Line+0x5c>
 8001644:	f04f 33ff 	mov.w	r3, #4294967295
 8001648:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8001652:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001656:	7939      	ldrb	r1, [r7, #4]
 8001658:	797b      	ldrb	r3, [r7, #5]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fea2 	bl	80013a4 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001660:	e024      	b.n	80016ac <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8001662:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001666:	79b9      	ldrb	r1, [r7, #6]
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fe9a 	bl	80013a4 <ssd1306_DrawPixel>
        error2 = error * 2;
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	425b      	negs	r3, r3
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	429a      	cmp	r2, r3
 800167e:	dd08      	ble.n	8001692 <ssd1306_Line+0xa6>
            error -= deltaY;
 8001680:	69fa      	ldr	r2, [r7, #28]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	b2da      	uxtb	r2, r3
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	4413      	add	r3, r2
 8001690:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	429a      	cmp	r2, r3
 8001698:	da08      	bge.n	80016ac <ssd1306_Line+0xc0>
            error += deltaX;
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	4413      	add	r3, r2
 80016a0:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	79bb      	ldrb	r3, [r7, #6]
 80016a8:	4413      	add	r3, r2
 80016aa:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80016ac:	79fa      	ldrb	r2, [r7, #7]
 80016ae:	797b      	ldrb	r3, [r7, #5]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d1d6      	bne.n	8001662 <ssd1306_Line+0x76>
 80016b4:	79ba      	ldrb	r2, [r7, #6]
 80016b6:	793b      	ldrb	r3, [r7, #4]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d1d2      	bne.n	8001662 <ssd1306_Line+0x76>
        }
    }
    return;
 80016bc:	bf00      	nop
}
 80016be:	3724      	adds	r7, #36	; 0x24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd90      	pop	{r4, r7, pc}

080016c4 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	4604      	mov	r4, r0
 80016cc:	4608      	mov	r0, r1
 80016ce:	4611      	mov	r1, r2
 80016d0:	461a      	mov	r2, r3
 80016d2:	4623      	mov	r3, r4
 80016d4:	71fb      	strb	r3, [r7, #7]
 80016d6:	4603      	mov	r3, r0
 80016d8:	71bb      	strb	r3, [r7, #6]
 80016da:	460b      	mov	r3, r1
 80016dc:	717b      	strb	r3, [r7, #5]
 80016de:	4613      	mov	r3, r2
 80016e0:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 80016e2:	79bc      	ldrb	r4, [r7, #6]
 80016e4:	797a      	ldrb	r2, [r7, #5]
 80016e6:	79b9      	ldrb	r1, [r7, #6]
 80016e8:	79f8      	ldrb	r0, [r7, #7]
 80016ea:	7e3b      	ldrb	r3, [r7, #24]
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	4623      	mov	r3, r4
 80016f0:	f7ff ff7c 	bl	80015ec <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80016f4:	793c      	ldrb	r4, [r7, #4]
 80016f6:	797a      	ldrb	r2, [r7, #5]
 80016f8:	79b9      	ldrb	r1, [r7, #6]
 80016fa:	7978      	ldrb	r0, [r7, #5]
 80016fc:	7e3b      	ldrb	r3, [r7, #24]
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	4623      	mov	r3, r4
 8001702:	f7ff ff73 	bl	80015ec <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8001706:	793c      	ldrb	r4, [r7, #4]
 8001708:	79fa      	ldrb	r2, [r7, #7]
 800170a:	7939      	ldrb	r1, [r7, #4]
 800170c:	7978      	ldrb	r0, [r7, #5]
 800170e:	7e3b      	ldrb	r3, [r7, #24]
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	4623      	mov	r3, r4
 8001714:	f7ff ff6a 	bl	80015ec <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8001718:	79bc      	ldrb	r4, [r7, #6]
 800171a:	79fa      	ldrb	r2, [r7, #7]
 800171c:	7939      	ldrb	r1, [r7, #4]
 800171e:	79f8      	ldrb	r0, [r7, #7]
 8001720:	7e3b      	ldrb	r3, [r7, #24]
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	4623      	mov	r3, r4
 8001726:	f7ff ff61 	bl	80015ec <ssd1306_Line>

    return;
 800172a:	bf00      	nop
}
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bd90      	pop	{r4, r7, pc}

08001732 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001732:	b580      	push	{r7, lr}
 8001734:	b084      	sub	sp, #16
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800173c:	2381      	movs	r3, #129	; 0x81
 800173e:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fd42 	bl	80011cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fd3e 	bl	80011cc <ssd1306_WriteCommand>
}
 8001750:	bf00      	nop
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001768:	23af      	movs	r3, #175	; 0xaf
 800176a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <ssd1306_SetDisplayOn+0x38>)
 800176e:	2201      	movs	r2, #1
 8001770:	715a      	strb	r2, [r3, #5]
 8001772:	e004      	b.n	800177e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001774:	23ae      	movs	r3, #174	; 0xae
 8001776:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <ssd1306_SetDisplayOn+0x38>)
 800177a:	2200      	movs	r2, #0
 800177c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fd23 	bl	80011cc <ssd1306_WriteCommand>
}
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200005c8 	.word	0x200005c8
 8001794:	00000000 	.word	0x00000000

08001798 <ARGB_Init>:

/**
 * @brief Init timer & prescalers
 * @param none
 */
void ARGB_Init(void) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
#endif
#ifdef APB2
    APBfq = HAL_RCC_GetPCLK2Freq();
 800179e:	f006 fbbd 	bl	8007f1c <HAL_RCC_GetPCLK2Freq>
 80017a2:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
 80017a4:	4b32      	ldr	r3, [pc, #200]	; (8001870 <ARGB_Init+0xd8>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <ARGB_Init+0x1c>
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <ARGB_Init+0x1e>
 80017b4:	2302      	movs	r3, #2
 80017b6:	461a      	mov	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	fb02 f303 	mul.w	r3, r2, r3
 80017be:	607b      	str	r3, [r7, #4]
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	0a1b      	lsrs	r3, r3, #8
 80017c4:	4a2b      	ldr	r2, [pc, #172]	; (8001874 <ARGB_Init+0xdc>)
 80017c6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ca:	091b      	lsrs	r3, r3, #4
 80017cc:	607b      	str	r3, [r7, #4]
#endif
    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 80017ce:	4b2a      	ldr	r3, [pc, #168]	; (8001878 <ARGB_Init+0xe0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2200      	movs	r2, #0
 80017d4:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	3b01      	subs	r3, #1
 80017dc:	b29a      	uxth	r2, r3
 80017de:	4b26      	ldr	r3, [pc, #152]	; (8001878 <ARGB_Init+0xe0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 80017e4:	4b24      	ldr	r3, [pc, #144]	; (8001878 <ARGB_Init+0xe0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2201      	movs	r2, #1
 80017ea:	615a      	str	r2, [r3, #20]
#if defined(WS2811F) || defined(WS2811S)
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us/1.2us
    PWM_LO = (u8_t) (APBfq * 0.20) - 1;     // Log.0 - 20% - 0.25us/0.5us
#endif
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7fe fe39 	bl	8000464 <__aeabi_ui2d>
 80017f2:	a31b      	add	r3, pc, #108	; (adr r3, 8001860 <ARGB_Init+0xc8>)
 80017f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f8:	f7fe feae 	bl	8000558 <__aeabi_dmul>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	f7ff f8ba 	bl	800097c <__aeabi_d2uiz>
 8001808:	4603      	mov	r3, r0
 800180a:	b2db      	uxtb	r3, r3
 800180c:	3b01      	subs	r3, #1
 800180e:	b2da      	uxtb	r2, r3
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <ARGB_Init+0xe4>)
 8001812:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7fe fe25 	bl	8000464 <__aeabi_ui2d>
 800181a:	a313      	add	r3, pc, #76	; (adr r3, 8001868 <ARGB_Init+0xd0>)
 800181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001820:	f7fe fe9a 	bl	8000558 <__aeabi_dmul>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f7ff f8a6 	bl	800097c <__aeabi_d2uiz>
 8001830:	4603      	mov	r3, r0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	3b01      	subs	r3, #1
 8001836:	b2da      	uxtb	r2, r3
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <ARGB_Init+0xe8>)
 800183a:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <ARGB_Init+0xec>)
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <ARGB_Init+0xe0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2201      	movs	r2, #1
 8001848:	2104      	movs	r1, #4
 800184a:	4618      	mov	r0, r3
 800184c:	f007 faf2 	bl	8008e34 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8001850:	2001      	movs	r0, #1
 8001852:	f002 f8db 	bl	8003a0c <HAL_Delay>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	1eb851ec 	.word	0x1eb851ec
 8001864:	3fe1eb85 	.word	0x3fe1eb85
 8001868:	1eb851ec 	.word	0x1eb851ec
 800186c:	3fd1eb85 	.word	0x3fd1eb85
 8001870:	40023800 	.word	0x40023800
 8001874:	014f8b59 	.word	0x014f8b59
 8001878:	20000768 	.word	0x20000768
 800187c:	200005ce 	.word	0x200005ce
 8001880:	200005cf 	.word	0x200005cf
 8001884:	200006aa 	.word	0x200006aa

08001888 <ARGB_Clear>:
/**
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 */
void ARGB_Clear(void) {
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
    ARGB_FillRGB(0, 0, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	2000      	movs	r0, #0
 8001892:	f000 f885 	bl	80019a0 <ARGB_FillRGB>
#ifdef SK6812
    ARGB_FillWhite(0);
#endif
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <ARGB_SetBrightness>:

/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 */
void ARGB_SetBrightness(u8_t br) {
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 80018a6:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <ARGB_SetBrightness+0x1c>)
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	7013      	strb	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	20000008 	.word	0x20000008

080018bc <ARGB_SetRGB>:
 * @param[in] i LED position
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4604      	mov	r4, r0
 80018c4:	4608      	mov	r0, r1
 80018c6:	4611      	mov	r1, r2
 80018c8:	461a      	mov	r2, r3
 80018ca:	4623      	mov	r3, r4
 80018cc:	80fb      	strh	r3, [r7, #6]
 80018ce:	4603      	mov	r3, r0
 80018d0:	717b      	strb	r3, [r7, #5]
 80018d2:	460b      	mov	r3, r1
 80018d4:	713b      	strb	r3, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 80018da:	88fb      	ldrh	r3, [r7, #6]
 80018dc:	2b07      	cmp	r3, #7
 80018de:	d908      	bls.n	80018f2 <ARGB_SetRGB+0x36>
        u16_t _i = i / NUM_PIXELS;
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	08db      	lsrs	r3, r3, #3
 80018e4:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 80018e6:	89fb      	ldrh	r3, [r7, #14]
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	88fa      	ldrh	r2, [r7, #6]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 80018f2:	4b29      	ldr	r3, [pc, #164]	; (8001998 <ARGB_SetRGB+0xdc>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	3301      	adds	r3, #1
 80018fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001902:	797a      	ldrb	r2, [r7, #5]
 8001904:	fb92 f3f3 	sdiv	r3, r2, r3
 8001908:	717b      	strb	r3, [r7, #5]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 800190a:	4b23      	ldr	r3, [pc, #140]	; (8001998 <ARGB_SetRGB+0xdc>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	b2db      	uxtb	r3, r3
 8001910:	3301      	adds	r3, #1
 8001912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001916:	fb92 f3f3 	sdiv	r3, r2, r3
 800191a:	793a      	ldrb	r2, [r7, #4]
 800191c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001920:	713b      	strb	r3, [r7, #4]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 8001922:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <ARGB_SetRGB+0xdc>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	3301      	adds	r3, #1
 800192a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800192e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001932:	78fa      	ldrb	r2, [r7, #3]
 8001934:	fb92 f3f3 	sdiv	r3, r2, r3
 8001938:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 800193a:	793b      	ldrb	r3, [r7, #4]
 800193c:	21b0      	movs	r1, #176	; 0xb0
 800193e:	4618      	mov	r0, r3
 8001940:	f000 f9ca 	bl	8001cd8 <scale8>
 8001944:	4603      	mov	r3, r0
 8001946:	713b      	strb	r3, [r7, #4]
    b = scale8(b, 0xF0);
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	21f0      	movs	r1, #240	; 0xf0
 800194c:	4618      	mov	r0, r3
 800194e:	f000 f9c3 	bl	8001cd8 <scale8>
 8001952:	4603      	mov	r3, r0
 8001954:	70fb      	strb	r3, [r7, #3]
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
    const u8_t subp2 = g;
    const u8_t subp3 = b;
#else
    const u8_t subp1 = g;
 8001956:	793b      	ldrb	r3, [r7, #4]
 8001958:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = r;
 800195a:	797b      	ldrb	r3, [r7, #5]
 800195c:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	72fb      	strb	r3, [r7, #11]
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
 8001962:	88fa      	ldrh	r2, [r7, #6]
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	490c      	ldr	r1, [pc, #48]	; (800199c <ARGB_SetRGB+0xe0>)
 800196c:	7b7a      	ldrb	r2, [r7, #13]
 800196e:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
 8001970:	88fa      	ldrh	r2, [r7, #6]
 8001972:	4613      	mov	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4413      	add	r3, r2
 8001978:	3301      	adds	r3, #1
 800197a:	4908      	ldr	r1, [pc, #32]	; (800199c <ARGB_SetRGB+0xe0>)
 800197c:	7b3a      	ldrb	r2, [r7, #12]
 800197e:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
 8001980:	88fa      	ldrh	r2, [r7, #6]
 8001982:	4613      	mov	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4413      	add	r3, r2
 8001988:	3302      	adds	r3, #2
 800198a:	4904      	ldr	r1, [pc, #16]	; (800199c <ARGB_SetRGB+0xe0>)
 800198c:	7afa      	ldrb	r2, [r7, #11]
 800198e:	54ca      	strb	r2, [r1, r3]
#endif
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	bd90      	pop	{r4, r7, pc}
 8001998:	20000008 	.word	0x20000008
 800199c:	200005d0 	.word	0x200005d0

080019a0 <ARGB_FillRGB>:
 * @brief Fill ALL LEDs with RGB color
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
 80019aa:	460b      	mov	r3, r1
 80019ac:	71bb      	strb	r3, [r7, #6]
 80019ae:	4613      	mov	r3, r2
 80019b0:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	81fb      	strh	r3, [r7, #14]
 80019b6:	e00b      	b.n	80019d0 <ARGB_FillRGB+0x30>
        ARGB_SetRGB(i, r, g, b);
 80019b8:	89fb      	ldrh	r3, [r7, #14]
 80019ba:	b298      	uxth	r0, r3
 80019bc:	797b      	ldrb	r3, [r7, #5]
 80019be:	79ba      	ldrb	r2, [r7, #6]
 80019c0:	79f9      	ldrb	r1, [r7, #7]
 80019c2:	f7ff ff7b 	bl	80018bc <ARGB_SetRGB>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 80019c6:	89fb      	ldrh	r3, [r7, #14]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	3301      	adds	r3, #1
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	81fb      	strh	r3, [r7, #14]
 80019d0:	89fb      	ldrh	r3, [r7, #14]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	2b07      	cmp	r3, #7
 80019d6:	d9ef      	bls.n	80019b8 <ARGB_FillRGB+0x18>
}
 80019d8:	bf00      	nop
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <ARGB_Show>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show(void) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
    ARGB_LOC_ST = ARGB_BUSY;
 80019ea:	4b9d      	ldr	r3, [pc, #628]	; (8001c60 <ARGB_Show+0x27c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 80019f0:	4b9c      	ldr	r3, [pc, #624]	; (8001c64 <ARGB_Show+0x280>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d105      	bne.n	8001a06 <ARGB_Show+0x22>
 80019fa:	4b9b      	ldr	r3, [pc, #620]	; (8001c68 <ARGB_Show+0x284>)
 80019fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d001      	beq.n	8001a0a <ARGB_Show+0x26>
        return ARGB_BUSY;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e15e      	b.n	8001cc8 <ARGB_Show+0x2e4>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	71fb      	strb	r3, [r7, #7]
 8001a0e:	e0a6      	b.n	8001b5e <ARGB_Show+0x17a>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001a10:	4b96      	ldr	r3, [pc, #600]	; (8001c6c <ARGB_Show+0x288>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	461a      	mov	r2, r3
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	dd04      	ble.n	8001a32 <ARGB_Show+0x4e>
 8001a28:	4b91      	ldr	r3, [pc, #580]	; (8001c70 <ARGB_Show+0x28c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	461a      	mov	r2, r3
 8001a30:	e003      	b.n	8001a3a <ARGB_Show+0x56>
 8001a32:	4b90      	ldr	r3, [pc, #576]	; (8001c74 <ARGB_Show+0x290>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	461a      	mov	r2, r3
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4b8d      	ldr	r3, [pc, #564]	; (8001c78 <ARGB_Show+0x294>)
 8001a42:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001a46:	4b89      	ldr	r3, [pc, #548]	; (8001c6c <ARGB_Show+0x288>)
 8001a48:	785b      	ldrb	r3, [r3, #1]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	dd04      	ble.n	8001a68 <ARGB_Show+0x84>
 8001a5e:	4b84      	ldr	r3, [pc, #528]	; (8001c70 <ARGB_Show+0x28c>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	4619      	mov	r1, r3
 8001a66:	e003      	b.n	8001a70 <ARGB_Show+0x8c>
 8001a68:	4b82      	ldr	r3, [pc, #520]	; (8001c74 <ARGB_Show+0x290>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	4619      	mov	r1, r3
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	3308      	adds	r3, #8
 8001a76:	4a80      	ldr	r2, [pc, #512]	; (8001c78 <ARGB_Show+0x294>)
 8001a78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001a7c:	4b7b      	ldr	r3, [pc, #492]	; (8001c6c <ARGB_Show+0x288>)
 8001a7e:	789b      	ldrb	r3, [r3, #2]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	dd04      	ble.n	8001a9e <ARGB_Show+0xba>
 8001a94:	4b76      	ldr	r3, [pc, #472]	; (8001c70 <ARGB_Show+0x28c>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	e003      	b.n	8001aa6 <ARGB_Show+0xc2>
 8001a9e:	4b75      	ldr	r3, [pc, #468]	; (8001c74 <ARGB_Show+0x290>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	3310      	adds	r3, #16
 8001aac:	4a72      	ldr	r2, [pc, #456]	; (8001c78 <ARGB_Show+0x294>)
 8001aae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001ab2:	4b6e      	ldr	r3, [pc, #440]	; (8001c6c <ARGB_Show+0x288>)
 8001ab4:	78db      	ldrb	r3, [r3, #3]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	461a      	mov	r2, r3
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	dd04      	ble.n	8001ad4 <ARGB_Show+0xf0>
 8001aca:	4b69      	ldr	r3, [pc, #420]	; (8001c70 <ARGB_Show+0x28c>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	e003      	b.n	8001adc <ARGB_Show+0xf8>
 8001ad4:	4b67      	ldr	r3, [pc, #412]	; (8001c74 <ARGB_Show+0x290>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	4619      	mov	r1, r3
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	3318      	adds	r3, #24
 8001ae2:	4a65      	ldr	r2, [pc, #404]	; (8001c78 <ARGB_Show+0x294>)
 8001ae4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001ae8:	4b60      	ldr	r3, [pc, #384]	; (8001c6c <ARGB_Show+0x288>)
 8001aea:	791b      	ldrb	r3, [r3, #4]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	461a      	mov	r2, r3
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	dd04      	ble.n	8001b0a <ARGB_Show+0x126>
 8001b00:	4b5b      	ldr	r3, [pc, #364]	; (8001c70 <ARGB_Show+0x28c>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	4619      	mov	r1, r3
 8001b08:	e003      	b.n	8001b12 <ARGB_Show+0x12e>
 8001b0a:	4b5a      	ldr	r3, [pc, #360]	; (8001c74 <ARGB_Show+0x290>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	4619      	mov	r1, r3
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	3320      	adds	r3, #32
 8001b18:	4a57      	ldr	r2, [pc, #348]	; (8001c78 <ARGB_Show+0x294>)
 8001b1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001b1e:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <ARGB_Show+0x288>)
 8001b20:	795b      	ldrb	r3, [r3, #5]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	461a      	mov	r2, r3
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	dd04      	ble.n	8001b40 <ARGB_Show+0x15c>
 8001b36:	4b4e      	ldr	r3, [pc, #312]	; (8001c70 <ARGB_Show+0x28c>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	e003      	b.n	8001b48 <ARGB_Show+0x164>
 8001b40:	4b4c      	ldr	r3, [pc, #304]	; (8001c74 <ARGB_Show+0x290>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	4619      	mov	r1, r3
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	3328      	adds	r3, #40	; 0x28
 8001b4e:	4a4a      	ldr	r2, [pc, #296]	; (8001c78 <ARGB_Show+0x294>)
 8001b50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	3301      	adds	r3, #1
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	71fb      	strb	r3, [r7, #7]
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b07      	cmp	r3, #7
 8001b64:	f67f af54 	bls.w	8001a10 <ARGB_Show+0x2c>
#ifdef SK6812
            PWM_BUF[i + 48] = (((RGB_BUF[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001b6c:	e0a4      	b.n	8001cb8 <ARGB_Show+0x2d4>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8001b6e:	4b43      	ldr	r3, [pc, #268]	; (8001c7c <ARGB_Show+0x298>)
 8001b70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d102      	bne.n	8001b80 <ARGB_Show+0x19c>
                DMA_Send_Stat = HAL_BUSY;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	73fb      	strb	r3, [r7, #15]
                continue;
 8001b7e:	e09b      	b.n	8001cb8 <ARGB_Show+0x2d4>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 8001b80:	4b3e      	ldr	r3, [pc, #248]	; (8001c7c <ARGB_Show+0x298>)
 8001b82:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d11d      	bne.n	8001bc8 <ARGB_Show+0x1e4>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b8c:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <ARGB_Show+0x298>)
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
#elif TIM_CH == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 8001b94:	4b39      	ldr	r3, [pc, #228]	; (8001c7c <ARGB_Show+0x298>)
 8001b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b98:	4a39      	ldr	r2, [pc, #228]	; (8001c80 <ARGB_Show+0x29c>)
 8001b9a:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 8001b9c:	4b37      	ldr	r3, [pc, #220]	; (8001c7c <ARGB_Show+0x298>)
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba0:	4a38      	ldr	r2, [pc, #224]	; (8001c84 <ARGB_Show+0x2a0>)
 8001ba2:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8001ba4:	4b35      	ldr	r3, [pc, #212]	; (8001c7c <ARGB_Show+0x298>)
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba8:	4a37      	ldr	r2, [pc, #220]	; (8001c88 <ARGB_Show+0x2a4>)
 8001baa:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8001bac:	4b33      	ldr	r3, [pc, #204]	; (8001c7c <ARGB_Show+0x298>)
 8001bae:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001bb0:	4931      	ldr	r1, [pc, #196]	; (8001c78 <ARGB_Show+0x294>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 8001bb2:	4b32      	ldr	r3, [pc, #200]	; (8001c7c <ARGB_Show+0x298>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	3338      	adds	r3, #56	; 0x38
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8001bb8:	461a      	mov	r2, r3
 8001bba:	2330      	movs	r3, #48	; 0x30
 8001bbc:	f002 f8da 	bl	8003d74 <HAL_DMA_Start_IT>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d006      	beq.n	8001bd4 <ARGB_Show+0x1f0>
 8001bc6:	e002      	b.n	8001bce <ARGB_Show+0x1ea>
                DMA_Send_Stat = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	73fb      	strb	r3, [r7, #15]
                continue;
 8001bcc:	e074      	b.n	8001cb8 <ARGB_Show+0x2d4>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
                continue;
 8001bd2:	e071      	b.n	8001cb8 <ARGB_Show+0x2d4>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 8001bd4:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <ARGB_Show+0x298>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	4b28      	ldr	r3, [pc, #160]	; (8001c7c <ARGB_Show+0x298>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001be2:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8001be4:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <ARGB_Show+0x298>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a28      	ldr	r2, [pc, #160]	; (8001c8c <ARGB_Show+0x2a8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d107      	bne.n	8001bfe <ARGB_Show+0x21a>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8001bee:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <ARGB_Show+0x298>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bf4:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <ARGB_Show+0x298>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bfc:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001bfe:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <ARGB_Show+0x298>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a22      	ldr	r2, [pc, #136]	; (8001c8c <ARGB_Show+0x2a8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d018      	beq.n	8001c3a <ARGB_Show+0x256>
 8001c08:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <ARGB_Show+0x298>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c10:	d013      	beq.n	8001c3a <ARGB_Show+0x256>
 8001c12:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <ARGB_Show+0x298>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a1e      	ldr	r2, [pc, #120]	; (8001c90 <ARGB_Show+0x2ac>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d00e      	beq.n	8001c3a <ARGB_Show+0x256>
 8001c1c:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <ARGB_Show+0x298>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <ARGB_Show+0x2b0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d009      	beq.n	8001c3a <ARGB_Show+0x256>
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <ARGB_Show+0x298>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a1b      	ldr	r2, [pc, #108]	; (8001c98 <ARGB_Show+0x2b4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d004      	beq.n	8001c3a <ARGB_Show+0x256>
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <ARGB_Show+0x298>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a19      	ldr	r2, [pc, #100]	; (8001c9c <ARGB_Show+0x2b8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d132      	bne.n	8001ca0 <ARGB_Show+0x2bc>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <ARGB_Show+0x298>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b06      	cmp	r3, #6
 8001c4a:	d032      	beq.n	8001cb2 <ARGB_Show+0x2ce>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <ARGB_Show+0x298>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <ARGB_Show+0x298>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0201 	orr.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001c5c:	e029      	b.n	8001cb2 <ARGB_Show+0x2ce>
 8001c5e:	bf00      	nop
 8001c60:	200006aa 	.word	0x200006aa
 8001c64:	200006a8 	.word	0x200006a8
 8001c68:	200007b0 	.word	0x200007b0
 8001c6c:	200005d0 	.word	0x200005d0
 8001c70:	200005ce 	.word	0x200005ce
 8001c74:	200005cf 	.word	0x200005cf
 8001c78:	200005e8 	.word	0x200005e8
 8001c7c:	20000768 	.word	0x20000768
 8001c80:	08001d01 	.word	0x08001d01
 8001c84:	08001fb1 	.word	0x08001fb1
 8001c88:	08008857 	.word	0x08008857
 8001c8c:	40010000 	.word	0x40010000
 8001c90:	40000400 	.word	0x40000400
 8001c94:	40000800 	.word	0x40000800
 8001c98:	40000c00 	.word	0x40000c00
 8001c9c:	40014000 	.word	0x40014000
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <ARGB_Show+0x2ec>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <ARGB_Show+0x2ec>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	e000      	b.n	8001cb4 <ARGB_Show+0x2d0>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001cb2:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f47f af57 	bne.w	8001b6e <ARGB_Show+0x18a>
        }
        BUF_COUNTER = 2;
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <ARGB_Show+0x2f0>)
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 8001cc6:	2302      	movs	r3, #2
    }
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000768 	.word	0x20000768
 8001cd4:	200006a8 	.word	0x200006a8

08001cd8 <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	460a      	mov	r2, r1
 8001ce2:	71fb      	strb	r3, [r7, #7]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	79ba      	ldrb	r2, [r7, #6]
 8001cec:	fb02 f303 	mul.w	r3, r2, r3
 8001cf0:	121b      	asrs	r3, r3, #8
 8001cf2:	b2db      	uxtb	r3, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <ARGB_TIM_DMADelayPulseCplt>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0c:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a9d      	ldr	r2, [pc, #628]	; (8001f88 <ARGB_TIM_DMADelayPulseCplt+0x288>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	f040 8131 	bne.w	8001f7a <ARGB_TIM_DMADelayPulseCplt+0x27a>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4a9c      	ldr	r2, [pc, #624]	; (8001f8c <ARGB_TIM_DMADelayPulseCplt+0x28c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	f040 812c 	bne.w	8001f7a <ARGB_TIM_DMADelayPulseCplt+0x27a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001d22:	4b9b      	ldr	r3, [pc, #620]	; (8001f90 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 8128 	beq.w	8001f7e <ARGB_TIM_DMADelayPulseCplt+0x27e>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d10b      	bne.n	8001d50 <ARGB_TIM_DMADelayPulseCplt+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d136      	bne.n	8001db4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d4e:	e031      	b.n	8001db4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d10b      	bne.n	8001d72 <ARGB_TIM_DMADelayPulseCplt+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d125      	bne.n	8001db4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d70:	e020      	b.n	8001db4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d10b      	bne.n	8001d94 <ARGB_TIM_DMADelayPulseCplt+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2204      	movs	r2, #4
 8001d80:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d114      	bne.n	8001db4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d92:	e00f      	b.n	8001db4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d10a      	bne.n	8001db4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2208      	movs	r2, #8
 8001da2:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d103      	bne.n	8001db4 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8001db4:	4b76      	ldr	r3, [pc, #472]	; (8001f90 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	2b07      	cmp	r3, #7
 8001dbc:	d87b      	bhi.n	8001eb6 <ARGB_TIM_DMADelayPulseCplt+0x1b6>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	72fb      	strb	r3, [r7, #11]
 8001dc2:	e06c      	b.n	8001e9e <ARGB_TIM_DMADelayPulseCplt+0x19e>
            PWM_BUF[i + 32] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 40] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 48] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#else
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001dc4:	4b72      	ldr	r3, [pc, #456]	; (8001f90 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4613      	mov	r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a70      	ldr	r2, [pc, #448]	; (8001f94 <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001dd4:	5cd3      	ldrb	r3, [r2, r3]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	461a      	mov	r2, r3
 8001dda:	7afb      	ldrb	r3, [r7, #11]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	dd04      	ble.n	8001df4 <ARGB_TIM_DMADelayPulseCplt+0xf4>
 8001dea:	4b6b      	ldr	r3, [pc, #428]	; (8001f98 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	4619      	mov	r1, r3
 8001df2:	e003      	b.n	8001dfc <ARGB_TIM_DMADelayPulseCplt+0xfc>
 8001df4:	4b69      	ldr	r3, [pc, #420]	; (8001f9c <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	7afb      	ldrb	r3, [r7, #11]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	3318      	adds	r3, #24
 8001e02:	4a67      	ldr	r2, [pc, #412]	; (8001fa0 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001e04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001e08:	4b61      	ldr	r3, [pc, #388]	; (8001f90 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	3301      	adds	r3, #1
 8001e18:	4a5e      	ldr	r2, [pc, #376]	; (8001f94 <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001e1a:	5cd3      	ldrb	r3, [r2, r3]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	461a      	mov	r2, r3
 8001e20:	7afb      	ldrb	r3, [r7, #11]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	dd04      	ble.n	8001e3a <ARGB_TIM_DMADelayPulseCplt+0x13a>
 8001e30:	4b59      	ldr	r3, [pc, #356]	; (8001f98 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	4619      	mov	r1, r3
 8001e38:	e003      	b.n	8001e42 <ARGB_TIM_DMADelayPulseCplt+0x142>
 8001e3a:	4b58      	ldr	r3, [pc, #352]	; (8001f9c <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	4619      	mov	r1, r3
 8001e42:	7afb      	ldrb	r3, [r7, #11]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	3320      	adds	r3, #32
 8001e48:	4a55      	ldr	r2, [pc, #340]	; (8001fa0 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001e4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001e4e:	4b50      	ldr	r3, [pc, #320]	; (8001f90 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	461a      	mov	r2, r3
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	4a4d      	ldr	r2, [pc, #308]	; (8001f94 <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001e60:	5cd3      	ldrb	r3, [r2, r3]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	7afb      	ldrb	r3, [r7, #11]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	dd04      	ble.n	8001e80 <ARGB_TIM_DMADelayPulseCplt+0x180>
 8001e76:	4b48      	ldr	r3, [pc, #288]	; (8001f98 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	e003      	b.n	8001e88 <ARGB_TIM_DMADelayPulseCplt+0x188>
 8001e80:	4b46      	ldr	r3, [pc, #280]	; (8001f9c <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	4619      	mov	r1, r3
 8001e88:	7afb      	ldrb	r3, [r7, #11]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	3328      	adds	r3, #40	; 0x28
 8001e8e:	4a44      	ldr	r2, [pc, #272]	; (8001fa0 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001e90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001e94:	7afb      	ldrb	r3, [r7, #11]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	3301      	adds	r3, #1
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	72fb      	strb	r3, [r7, #11]
 8001e9e:	7afb      	ldrb	r3, [r7, #11]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b07      	cmp	r3, #7
 8001ea4:	d98e      	bls.n	8001dc4 <ARGB_TIM_DMADelayPulseCplt+0xc4>
#endif
        }
        BUF_COUNTER++;
 8001ea6:	4b3a      	ldr	r3, [pc, #232]	; (8001f90 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	3301      	adds	r3, #1
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	4b37      	ldr	r3, [pc, #220]	; (8001f90 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001eb2:	801a      	strh	r2, [r3, #0]
 8001eb4:	e05d      	b.n	8001f72 <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 8001eb6:	4b36      	ldr	r3, [pc, #216]	; (8001f90 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	2b09      	cmp	r3, #9
 8001ebe:	d80c      	bhi.n	8001eda <ARGB_TIM_DMADelayPulseCplt+0x1da>
        memset((dma_siz *) &PWM_BUF[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 8001ec0:	2260      	movs	r2, #96	; 0x60
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4837      	ldr	r0, [pc, #220]	; (8001fa4 <ARGB_TIM_DMADelayPulseCplt+0x2a4>)
 8001ec6:	f00e fbcf 	bl	8010668 <memset>
        BUF_COUNTER++;
 8001eca:	4b31      	ldr	r3, [pc, #196]	; (8001f90 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	4b2e      	ldr	r3, [pc, #184]	; (8001f90 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001ed6:	801a      	strh	r2, [r3, #0]
 8001ed8:	e04b      	b.n	8001f72 <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else { // if END of transfer
        BUF_COUNTER = 0;
 8001eda:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	801a      	strh	r2, [r3, #0]
#if TIM_CH == TIM_CHANNEL_1
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
#endif
#if TIM_CH == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eee:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f001 ff95 	bl	8003e24 <HAL_DMA_Abort_IT>
#endif
#if TIM_CH == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a2a      	ldr	r2, [pc, #168]	; (8001fa8 <ARGB_TIM_DMADelayPulseCplt+0x2a8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d117      	bne.n	8001f34 <ARGB_TIM_DMADelayPulseCplt+0x234>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6a1a      	ldr	r2, [r3, #32]
 8001f0a:	f241 1311 	movw	r3, #4369	; 0x1111
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10f      	bne.n	8001f34 <ARGB_TIM_DMADelayPulseCplt+0x234>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6a1a      	ldr	r2, [r3, #32]
 8001f1a:	f240 4344 	movw	r3, #1092	; 0x444
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d107      	bne.n	8001f34 <ARGB_TIM_DMADelayPulseCplt+0x234>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f32:	645a      	str	r2, [r3, #68]	; 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6a1a      	ldr	r2, [r3, #32]
 8001f3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10f      	bne.n	8001f64 <ARGB_TIM_DMADelayPulseCplt+0x264>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6a1a      	ldr	r2, [r3, #32]
 8001f4a:	f240 4344 	movw	r3, #1092	; 0x444
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d107      	bne.n	8001f64 <ARGB_TIM_DMADelayPulseCplt+0x264>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        ARGB_LOC_ST = ARGB_READY;
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <ARGB_TIM_DMADelayPulseCplt+0x2ac>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	771a      	strb	r2, [r3, #28]
 8001f78:	e002      	b.n	8001f80 <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001f7a:	bf00      	nop
 8001f7c:	e000      	b.n	8001f80 <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001f7e:	bf00      	nop
}
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200007b0 	.word	0x200007b0
 8001f8c:	20000768 	.word	0x20000768
 8001f90:	200006a8 	.word	0x200006a8
 8001f94:	200005d0 	.word	0x200005d0
 8001f98:	200005ce 	.word	0x200005ce
 8001f9c:	200005cf 	.word	0x200005cf
 8001fa0:	200005e8 	.word	0x200005e8
 8001fa4:	20000648 	.word	0x20000648
 8001fa8:	40010000 	.word	0x40010000
 8001fac:	200006aa 	.word	0x200006aa

08001fb0 <ARGB_TIM_DMADelayPulseHalfCplt>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fbc:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a53      	ldr	r2, [pc, #332]	; (8002110 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	f040 809e 	bne.w	8002104 <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4a52      	ldr	r2, [pc, #328]	; (8002114 <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	f040 8099 	bne.w	8002104 <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001fd2:	4b51      	ldr	r3, [pc, #324]	; (8002118 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 8095 	beq.w	8002108 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>
    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8001fde:	4b4e      	ldr	r3, [pc, #312]	; (8002118 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	2b07      	cmp	r3, #7
 8001fe6:	d87b      	bhi.n	80020e0 <ARGB_TIM_DMADelayPulseHalfCplt+0x130>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001fe8:	2300      	movs	r3, #0
 8001fea:	72fb      	strb	r3, [r7, #11]
 8001fec:	e06c      	b.n	80020c8 <ARGB_TIM_DMADelayPulseHalfCplt+0x118>
            PWM_BUF[i] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 8] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 16] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 24] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
#else
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001fee:	4b4a      	ldr	r3, [pc, #296]	; (8002118 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	4a47      	ldr	r2, [pc, #284]	; (800211c <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8001ffe:	5cd3      	ldrb	r3, [r2, r3]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	461a      	mov	r2, r3
 8002004:	7afb      	ldrb	r3, [r7, #11]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002010:	2b00      	cmp	r3, #0
 8002012:	dd04      	ble.n	800201e <ARGB_TIM_DMADelayPulseHalfCplt+0x6e>
 8002014:	4b42      	ldr	r3, [pc, #264]	; (8002120 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	461a      	mov	r2, r3
 800201c:	e003      	b.n	8002026 <ARGB_TIM_DMADelayPulseHalfCplt+0x76>
 800201e:	4b41      	ldr	r3, [pc, #260]	; (8002124 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	7afb      	ldrb	r3, [r7, #11]
 8002028:	b2db      	uxtb	r3, r3
 800202a:	4619      	mov	r1, r3
 800202c:	4b3e      	ldr	r3, [pc, #248]	; (8002128 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 800202e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002032:	4b39      	ldr	r3, [pc, #228]	; (8002118 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	b29b      	uxth	r3, r3
 8002038:	461a      	mov	r2, r3
 800203a:	4613      	mov	r3, r2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4413      	add	r3, r2
 8002040:	3301      	adds	r3, #1
 8002042:	4a36      	ldr	r2, [pc, #216]	; (800211c <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8002044:	5cd3      	ldrb	r3, [r2, r3]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	7afb      	ldrb	r3, [r7, #11]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002056:	2b00      	cmp	r3, #0
 8002058:	dd04      	ble.n	8002064 <ARGB_TIM_DMADelayPulseHalfCplt+0xb4>
 800205a:	4b31      	ldr	r3, [pc, #196]	; (8002120 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	b2db      	uxtb	r3, r3
 8002060:	4619      	mov	r1, r3
 8002062:	e003      	b.n	800206c <ARGB_TIM_DMADelayPulseHalfCplt+0xbc>
 8002064:	4b2f      	ldr	r3, [pc, #188]	; (8002124 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	4619      	mov	r1, r3
 800206c:	7afb      	ldrb	r3, [r7, #11]
 800206e:	b2db      	uxtb	r3, r3
 8002070:	3308      	adds	r3, #8
 8002072:	4a2d      	ldr	r2, [pc, #180]	; (8002128 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8002074:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002078:	4b27      	ldr	r3, [pc, #156]	; (8002118 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	b29b      	uxth	r3, r3
 800207e:	461a      	mov	r2, r3
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	3302      	adds	r3, #2
 8002088:	4a24      	ldr	r2, [pc, #144]	; (800211c <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 800208a:	5cd3      	ldrb	r3, [r2, r3]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	7afb      	ldrb	r3, [r7, #11]
 8002092:	b2db      	uxtb	r3, r3
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209c:	2b00      	cmp	r3, #0
 800209e:	dd04      	ble.n	80020aa <ARGB_TIM_DMADelayPulseHalfCplt+0xfa>
 80020a0:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	4619      	mov	r1, r3
 80020a8:	e003      	b.n	80020b2 <ARGB_TIM_DMADelayPulseHalfCplt+0x102>
 80020aa:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	4619      	mov	r1, r3
 80020b2:	7afb      	ldrb	r3, [r7, #11]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	3310      	adds	r3, #16
 80020b8:	4a1b      	ldr	r2, [pc, #108]	; (8002128 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 80020ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 80020be:	7afb      	ldrb	r3, [r7, #11]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	3301      	adds	r3, #1
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	72fb      	strb	r3, [r7, #11]
 80020c8:	7afb      	ldrb	r3, [r7, #11]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b07      	cmp	r3, #7
 80020ce:	d98e      	bls.n	8001fee <ARGB_TIM_DMADelayPulseHalfCplt+0x3e>
#endif
        }
        BUF_COUNTER++;
 80020d0:	4b11      	ldr	r3, [pc, #68]	; (8002118 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	3301      	adds	r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80020dc:	801a      	strh	r2, [r3, #0]
 80020de:	e014      	b.n	800210a <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 80020e0:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	2b09      	cmp	r3, #9
 80020e8:	d80f      	bhi.n	800210a <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
        memset((dma_siz *) &PWM_BUF[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 80020ea:	2260      	movs	r2, #96	; 0x60
 80020ec:	2100      	movs	r1, #0
 80020ee:	480e      	ldr	r0, [pc, #56]	; (8002128 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 80020f0:	f00e faba 	bl	8010668 <memset>
        BUF_COUNTER++;
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	3301      	adds	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8002100:	801a      	strh	r2, [r3, #0]
 8002102:	e002      	b.n	800210a <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8002104:	bf00      	nop
 8002106:	e000      	b.n	800210a <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8002108:	bf00      	nop
    }
}
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	200007b0 	.word	0x200007b0
 8002114:	20000768 	.word	0x20000768
 8002118:	200006a8 	.word	0x200006a8
 800211c:	200005d0 	.word	0x200005d0
 8002120:	200005ce 	.word	0x200005ce
 8002124:	200005cf 	.word	0x200005cf
 8002128:	200005e8 	.word	0x200005e8

0800212c <AS5600_ReadReg>:
	HAL_I2C_Master_Transmit(&hi2c1,AS5600_ADDR,&Data,1,10);	
	HAL_I2C_Mem_Write(&hi2c1,(AS5600_ADDR << 1),Reg,1,&Data,1,100);
}

uint8_t AS5600_ReadReg(uint8_t Reg)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af04      	add	r7, sp, #16
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
	uint8_t DataRead=0;	
 8002136:	2300      	movs	r3, #0
 8002138:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c1,(AS5600_ADDR << 1),Reg,1,&DataRead,1,100);
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	b29a      	uxth	r2, r3
 800213e:	2364      	movs	r3, #100	; 0x64
 8002140:	9302      	str	r3, [sp, #8]
 8002142:	2301      	movs	r3, #1
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	f107 030f 	add.w	r3, r7, #15
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	2301      	movs	r3, #1
 800214e:	216c      	movs	r1, #108	; 0x6c
 8002150:	4803      	ldr	r0, [pc, #12]	; (8002160 <AS5600_ReadReg+0x34>)
 8002152:	f003 f823 	bl	800519c <HAL_I2C_Mem_Read>
	
	
	return DataRead;
 8002156:	7bfb      	ldrb	r3, [r7, #15]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	200006bc 	.word	0x200006bc

08002164 <AS5600_GetRawAngle>:
	return (int)((float)(AS5600_ReadReg(ANGLE_L) + (AS5600_ReadReg(ANGLE_H) << 8))/4096*360);	
}


uint16_t AS5600_GetRawAngle()
{
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
	uint16_t AngleVal=AS5600_ReadReg(RAWANG_L) + (AS5600_ReadReg(RAWANG_H) << 8);
 800216a:	200d      	movs	r0, #13
 800216c:	f7ff ffde 	bl	800212c <AS5600_ReadReg>
 8002170:	4603      	mov	r3, r0
 8002172:	b29c      	uxth	r4, r3
 8002174:	200c      	movs	r0, #12
 8002176:	f7ff ffd9 	bl	800212c <AS5600_ReadReg>
 800217a:	4603      	mov	r3, r0
 800217c:	b29b      	uxth	r3, r3
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	b29b      	uxth	r3, r3
 8002182:	4423      	add	r3, r4
 8002184:	80fb      	strh	r3, [r7, #6]
	return AngleVal;	
 8002186:	88fb      	ldrh	r3, [r7, #6]
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bd90      	pop	{r4, r7, pc}

08002190 <AS5600_GetStatus>:

uint8_t AS5600_GetStatus()
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
	return AS5600_ReadReg(STATUS) & 0x38;	
 8002194:	200b      	movs	r0, #11
 8002196:	f7ff ffc9 	bl	800212c <AS5600_ReadReg>
 800219a:	4603      	mov	r3, r0
 800219c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021a0:	b2db      	uxtb	r3, r3
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <drawMainMenu>:
    "C1:   C3:  ",
    "C2:   C4:  ",
	"    ADC    "
};

void drawMainMenu() {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af02      	add	r7, sp, #8

    uint8_t exit = 1;
 80021ae:	2301      	movs	r3, #1
 80021b0:	71fb      	strb	r3, [r7, #7]
    int8_t  current_item_menu = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	71bb      	strb	r3, [r7, #6]
    ssd1306_Fill(Black);
 80021b6:	2000      	movs	r0, #0
 80021b8:	f7ff f8a4 	bl	8001304 <ssd1306_Fill>
    ssd1306_DrawRectangle(1, 1, 127, 63, White);
 80021bc:	2301      	movs	r3, #1
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	233f      	movs	r3, #63	; 0x3f
 80021c2:	227f      	movs	r2, #127	; 0x7f
 80021c4:	2101      	movs	r1, #1
 80021c6:	2001      	movs	r0, #1
 80021c8:	f7ff fa7c 	bl	80016c4 <ssd1306_DrawRectangle>
    udpateDisplay();
 80021cc:	f000 f8b4 	bl	8002338 <udpateDisplay>

    while(exit){ // Вывод главного меню
 80021d0:	e0a5      	b.n	800231e <drawMainMenu+0x176>
        ssd1306_Fill(Black);
 80021d2:	2000      	movs	r0, #0
 80021d4:	f7ff f896 	bl	8001304 <ssd1306_Fill>
        ssd1306_DrawRectangle(1, 1, 127, 63, White);
 80021d8:	2301      	movs	r3, #1
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	233f      	movs	r3, #63	; 0x3f
 80021de:	227f      	movs	r2, #127	; 0x7f
 80021e0:	2101      	movs	r1, #1
 80021e2:	2001      	movs	r0, #1
 80021e4:	f7ff fa6e 	bl	80016c4 <ssd1306_DrawRectangle>
        udpateDisplay();
 80021e8:	f000 f8a6 	bl	8002338 <udpateDisplay>
    	if(current_item_menu >= MENU_ITEMS_COUNT )
 80021ec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80021f0:	2b06      	cmp	r3, #6
 80021f2:	dd01      	ble.n	80021f8 <drawMainMenu+0x50>
			current_item_menu = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	71bb      	strb	r3, [r7, #6]
    	if(current_item_menu <= 0 )
 80021f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	dc01      	bgt.n	8002204 <drawMainMenu+0x5c>
    	    current_item_menu = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	71bb      	strb	r3, [r7, #6]
    	ssd1306_SetCursor(START_POS_X, START_POS_Y+6);
 8002204:	2106      	movs	r1, #6
 8002206:	2002      	movs	r0, #2
 8002208:	f7ff f9d8 	bl	80015bc <ssd1306_SetCursor>
    		ssd1306_WriteString(menuItems[MENU_ITEMS_COUNT], Font_11x18, White);
 800220c:	4b48      	ldr	r3, [pc, #288]	; (8002330 <drawMainMenu+0x188>)
 800220e:	69d8      	ldr	r0, [r3, #28]
 8002210:	4a48      	ldr	r2, [pc, #288]	; (8002334 <drawMainMenu+0x18c>)
 8002212:	2301      	movs	r3, #1
 8002214:	ca06      	ldmia	r2, {r1, r2}
 8002216:	f7ff f9ab 	bl	8001570 <ssd1306_WriteString>
    	ssd1306_SetCursor(START_POS_X, START_POS_Y + SIZE_FONT_Y + 5+6);
 800221a:	211d      	movs	r1, #29
 800221c:	2002      	movs	r0, #2
 800221e:	f7ff f9cd 	bl	80015bc <ssd1306_SetCursor>
    		ssd1306_WriteString(menuItems[current_item_menu], Font_11x18, White);
 8002222:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002226:	4a42      	ldr	r2, [pc, #264]	; (8002330 <drawMainMenu+0x188>)
 8002228:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800222c:	4a41      	ldr	r2, [pc, #260]	; (8002334 <drawMainMenu+0x18c>)
 800222e:	2301      	movs	r3, #1
 8002230:	ca06      	ldmia	r2, {r1, r2}
 8002232:	f7ff f99d 	bl	8001570 <ssd1306_WriteString>
    	udpateDisplay();
 8002236:	f000 f87f 	bl	8002338 <udpateDisplay>
        buttonEnReset();
 800223a:	f000 f8bf 	bl	80023bc <buttonEnReset>
        buttonLongReset();
 800223e:	f000 f909 	bl	8002454 <buttonLongReset>
        encoderReset();
 8002242:	f000 f937 	bl	80024b4 <encoderReset>
        HAL_Delay(500);
 8002246:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800224a:	f001 fbdf 	bl	8003a0c <HAL_Delay>
    	while(1){
    		if(buttonLong()){
 800224e:	f000 f8e9 	bl	8002424 <buttonLong>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <drawMainMenu+0xb6>
    			// Вернуться на стартовый дисплей
    			exit = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	71fb      	strb	r3, [r7, #7]
    			break;
 800225c:	e05f      	b.n	800231e <drawMainMenu+0x176>
    		}
    		if(buttonEn()){// если нажали ввод переходим в подменю
 800225e:	f000 f895 	bl	800238c <buttonEn>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d03f      	beq.n	80022e8 <drawMainMenu+0x140>
    			HAL_Delay(600);
 8002268:	f44f 7016 	mov.w	r0, #600	; 0x258
 800226c:	f001 fbce 	bl	8003a0c <HAL_Delay>
        		if(buttonLong()){ // если нажата кнопка подтверждения ждем что это не выход
 8002270:	f000 f8d8 	bl	8002424 <buttonLong>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <drawMainMenu+0xd8>
        			// Вернуться на стартовый дисплей
        			exit = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	71fb      	strb	r3, [r7, #7]
        			break;
 800227e:	e04e      	b.n	800231e <drawMainMenu+0x176>
        		}
    		    switch(current_item_menu){
 8002280:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002284:	2b06      	cmp	r3, #6
 8002286:	d826      	bhi.n	80022d6 <drawMainMenu+0x12e>
 8002288:	a201      	add	r2, pc, #4	; (adr r2, 8002290 <drawMainMenu+0xe8>)
 800228a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228e:	bf00      	nop
 8002290:	080022ad 	.word	0x080022ad
 8002294:	080022b3 	.word	0x080022b3
 8002298:	080022b9 	.word	0x080022b9
 800229c:	080022bf 	.word	0x080022bf
 80022a0:	080022c5 	.word	0x080022c5
 80022a4:	080022cb 	.word	0x080022cb
 80022a8:	080022d1 	.word	0x080022d1
    		    	case 0: drawButtonMenu();	break;
 80022ac:	f000 f94e 	bl	800254c <drawButtonMenu>
 80022b0:	e013      	b.n	80022da <drawMainMenu+0x132>
    		    	case 1: drawLEDMenu(); 		break;
 80022b2:	f000 fa2f 	bl	8002714 <drawLEDMenu>
 80022b6:	e010      	b.n	80022da <drawMainMenu+0x132>
    		    	case 2: drawE_inkMenu();	break;
 80022b8:	f000 fa37 	bl	800272a <drawE_inkMenu>
 80022bc:	e00d      	b.n	80022da <drawMainMenu+0x132>
    		    	case 3: drawADCMenu();		break;
 80022be:	f000 fa3f 	bl	8002740 <drawADCMenu>
 80022c2:	e00a      	b.n	80022da <drawMainMenu+0x132>
    		    	case 4: drawEncodMenu();	break;
 80022c4:	f000 fa47 	bl	8002756 <drawEncodMenu>
 80022c8:	e007      	b.n	80022da <drawMainMenu+0x132>
    		    	case 5: drawDACMenu();		break;
 80022ca:	f000 fa4f 	bl	800276c <drawDACMenu>
 80022ce:	e004      	b.n	80022da <drawMainMenu+0x132>
    		    	case 6: drawSettinMenu();	break;
 80022d0:	f000 fa57 	bl	8002782 <drawSettinMenu>
 80022d4:	e001      	b.n	80022da <drawMainMenu+0x132>
    		    	default: current_item_menu = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	71bb      	strb	r3, [r7, #6]
    		    }
                buttonEnReset();
 80022da:	f000 f86f 	bl	80023bc <buttonEnReset>
                buttonLongReset();
 80022de:	f000 f8b9 	bl	8002454 <buttonLongReset>
                encoderReset();
 80022e2:	f000 f8e7 	bl	80024b4 <encoderReset>
                break;
 80022e6:	e01a      	b.n	800231e <drawMainMenu+0x176>
    		}
    		if(encoderData() > 0){
 80022e8:	f000 f8c0 	bl	800246c <encoderData>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	dd08      	ble.n	8002304 <drawMainMenu+0x15c>
    			current_item_menu++;
 80022f2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	3301      	adds	r3, #1
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	71bb      	strb	r3, [r7, #6]
    			encoderReset();
 80022fe:	f000 f8d9 	bl	80024b4 <encoderReset>
    			break;
 8002302:	e00c      	b.n	800231e <drawMainMenu+0x176>
    		}
    		if(encoderData() < 0){
 8002304:	f000 f8b2 	bl	800246c <encoderData>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	da9f      	bge.n	800224e <drawMainMenu+0xa6>
    			current_item_menu--;
 800230e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b2db      	uxtb	r3, r3
 8002318:	71bb      	strb	r3, [r7, #6]
    			encoderReset();
 800231a:	f000 f8cb 	bl	80024b4 <encoderReset>
    while(exit){ // Вывод главного меню
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	2b00      	cmp	r3, #0
 8002322:	f47f af56 	bne.w	80021d2 <drawMainMenu+0x2a>
    			break;
    		}
    	}
    }

}
 8002326:	bf00      	nop
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	2000000c 	.word	0x2000000c
 8002334:	20000000 	.word	0x20000000

08002338 <udpateDisplay>:

extern osMutexId_t BlockI2CHandle;

void udpateDisplay(){
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
	statusMutex = osMutexAcquire(BlockI2CHandle, 1000);
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <udpateDisplay+0x34>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002344:	4618      	mov	r0, r3
 8002346:	f00a fbf4 	bl	800cb32 <osMutexAcquire>
 800234a:	4603      	mov	r3, r0
 800234c:	4a08      	ldr	r2, [pc, #32]	; (8002370 <udpateDisplay+0x38>)
 800234e:	6013      	str	r3, [r2, #0]
	if(statusMutex == osOK)
 8002350:	4b07      	ldr	r3, [pc, #28]	; (8002370 <udpateDisplay+0x38>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <udpateDisplay+0x24>
		ssd1306_UpdateScreen();
 8002358:	f7fe fff8 	bl	800134c <ssd1306_UpdateScreen>
	osMutexRelease(BlockI2CHandle);// Освобождение мьютекса
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <udpateDisplay+0x34>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f00a fc31 	bl	800cbc8 <osMutexRelease>
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000814 	.word	0x20000814
 8002370:	200006ac 	.word	0x200006ac

08002374 <buttonUpSet>:


uint8_t buttonUp(){
	return buttonUpper;
}
void buttonUpSet(){
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
	buttonUpper = 1;
 8002378:	4b03      	ldr	r3, [pc, #12]	; (8002388 <buttonUpSet+0x14>)
 800237a:	2201      	movs	r2, #1
 800237c:	701a      	strb	r2, [r3, #0]
}
 800237e:	bf00      	nop
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	200006b0 	.word	0x200006b0

0800238c <buttonEn>:
void buttonUpReset(){
	buttonUpper = 0;
}

uint8_t buttonEn(){
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
	return buttonEnable;
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <buttonEn+0x14>)
 8002392:	781b      	ldrb	r3, [r3, #0]
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	200006b1 	.word	0x200006b1

080023a4 <buttonEnSet>:
void buttonEnSet(){
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
	buttonEnable = 1;
 80023a8:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <buttonEnSet+0x14>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	701a      	strb	r2, [r3, #0]
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	200006b1 	.word	0x200006b1

080023bc <buttonEnReset>:
void buttonEnReset(){
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
	buttonEnable = 0;
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <buttonEnReset+0x14>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	200006b1 	.word	0x200006b1

080023d4 <buttonCounter>:

uint8_t buttonCounter(){
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
	return button_counter;
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <buttonCounter+0x14>)
 80023da:	781b      	ldrb	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	200006b2 	.word	0x200006b2

080023ec <buttonCounterSet>:
void buttonCounterSet(){
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
	button_counter++;
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <buttonCounterSet+0x1c>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	3301      	adds	r3, #1
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <buttonCounterSet+0x1c>)
 80023fa:	701a      	strb	r2, [r3, #0]
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	200006b2 	.word	0x200006b2

0800240c <buttonCounterReset>:

void buttonCounterReset(){
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
	button_counter = 0;
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <buttonCounterReset+0x14>)
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	200006b2 	.word	0x200006b2

08002424 <buttonLong>:

uint8_t buttonLong(){
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
	return button_long;
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <buttonLong+0x14>)
 800242a:	781b      	ldrb	r3, [r3, #0]
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	200006b3 	.word	0x200006b3

0800243c <buttonLongSet>:
void buttonLongSet(){
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
	button_long = 1;
 8002440:	4b03      	ldr	r3, [pc, #12]	; (8002450 <buttonLongSet+0x14>)
 8002442:	2201      	movs	r2, #1
 8002444:	701a      	strb	r2, [r3, #0]
}
 8002446:	bf00      	nop
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	200006b3 	.word	0x200006b3

08002454 <buttonLongReset>:
void buttonLongReset(){
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
	button_long = 0;
 8002458:	4b03      	ldr	r3, [pc, #12]	; (8002468 <buttonLongReset+0x14>)
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	200006b3 	.word	0x200006b3

0800246c <encoderData>:

int8_t encoderData(){
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
	return encoderAS56;
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <encoderData+0x14>)
 8002472:	f993 3000 	ldrsb.w	r3, [r3]
}
 8002476:	4618      	mov	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	200006b4 	.word	0x200006b4

08002484 <encoderSetUp>:
void encoderSetUp(){
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
	encoderAS56 = 1;
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <encoderSetUp+0x14>)
 800248a:	2201      	movs	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	200006b4 	.word	0x200006b4

0800249c <encoderSetDown>:

void encoderSetDown(){
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
	encoderAS56 = -1;
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <encoderSetDown+0x14>)
 80024a2:	22ff      	movs	r2, #255	; 0xff
 80024a4:	701a      	strb	r2, [r3, #0]
}
 80024a6:	bf00      	nop
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	200006b4 	.word	0x200006b4

080024b4 <encoderReset>:

void encoderReset(){
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
	encoderAS56 = 0;
 80024b8:	4b03      	ldr	r3, [pc, #12]	; (80024c8 <encoderReset+0x14>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
}
 80024be:	bf00      	nop
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	200006b4 	.word	0x200006b4

080024cc <startDisplay>:
	uint8_t grn		[LED_NUM];
	uint8_t blu		[LED_NUM];
}LedData;


void startDisplay(){
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af02      	add	r7, sp, #8
	    ssd1306_Fill(Black);
 80024d2:	2000      	movs	r0, #0
 80024d4:	f7fe ff16 	bl	8001304 <ssd1306_Fill>
	    ssd1306_Line(0, 1, 128, 1, White);
 80024d8:	2301      	movs	r3, #1
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	2301      	movs	r3, #1
 80024de:	2280      	movs	r2, #128	; 0x80
 80024e0:	2101      	movs	r1, #1
 80024e2:	2000      	movs	r0, #0
 80024e4:	f7ff f882 	bl	80015ec <ssd1306_Line>
	    ssd1306_SetCursor(7, 7); //
 80024e8:	2107      	movs	r1, #7
 80024ea:	2007      	movs	r0, #7
 80024ec:	f7ff f866 	bl	80015bc <ssd1306_SetCursor>
	    ssd1306_WriteString("SPEED:-2", Font_11x18, White);
 80024f0:	4a12      	ldr	r2, [pc, #72]	; (800253c <startDisplay+0x70>)
 80024f2:	2301      	movs	r3, #1
 80024f4:	ca06      	ldmia	r2, {r1, r2}
 80024f6:	4812      	ldr	r0, [pc, #72]	; (8002540 <startDisplay+0x74>)
 80024f8:	f7ff f83a 	bl	8001570 <ssd1306_WriteString>
	 	ssd1306_SetCursor(7, 7+18); //
 80024fc:	2119      	movs	r1, #25
 80024fe:	2007      	movs	r0, #7
 8002500:	f7ff f85c 	bl	80015bc <ssd1306_SetCursor>
	 	ssd1306_WriteString("CHARG:82%", Font_11x18, White);
 8002504:	4a0d      	ldr	r2, [pc, #52]	; (800253c <startDisplay+0x70>)
 8002506:	2301      	movs	r3, #1
 8002508:	ca06      	ldmia	r2, {r1, r2}
 800250a:	480e      	ldr	r0, [pc, #56]	; (8002544 <startDisplay+0x78>)
 800250c:	f7ff f830 	bl	8001570 <ssd1306_WriteString>
	 	ssd1306_SetCursor(7, 7+18+18); //
 8002510:	212b      	movs	r1, #43	; 0x2b
 8002512:	2007      	movs	r0, #7
 8002514:	f7ff f852 	bl	80015bc <ssd1306_SetCursor>
	 	ssd1306_WriteString("TIMER:3h22m", Font_11x18, White);
 8002518:	4a08      	ldr	r2, [pc, #32]	; (800253c <startDisplay+0x70>)
 800251a:	2301      	movs	r3, #1
 800251c:	ca06      	ldmia	r2, {r1, r2}
 800251e:	480a      	ldr	r0, [pc, #40]	; (8002548 <startDisplay+0x7c>)
 8002520:	f7ff f826 	bl	8001570 <ssd1306_WriteString>
	 	ssd1306_Line(0, 63, 128, 63, White);
 8002524:	2301      	movs	r3, #1
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	233f      	movs	r3, #63	; 0x3f
 800252a:	2280      	movs	r2, #128	; 0x80
 800252c:	213f      	movs	r1, #63	; 0x3f
 800252e:	2000      	movs	r0, #0
 8002530:	f7ff f85c 	bl	80015ec <ssd1306_Line>
  }
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000000 	.word	0x20000000
 8002540:	08010b6c 	.word	0x08010b6c
 8002544:	08010b78 	.word	0x08010b78
 8002548:	08010b84 	.word	0x08010b84

0800254c <drawButtonMenu>:

// Тестовая функция для проверки кнопок  готова
void drawButtonMenu(){
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
	uint8_t butEn = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	75fb      	strb	r3, [r7, #23]
	uint8_t butLo = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	75bb      	strb	r3, [r7, #22]
	uint8_t encodP = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	757b      	strb	r3, [r7, #21]
	uint8_t encodM = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	753b      	strb	r3, [r7, #20]

	char sym_butEn[1];
	char sym_butLo[1];
	char sym_encP[1];
	char sym_encM[1];
	buttonEnReset();
 8002562:	f7ff ff2b 	bl	80023bc <buttonEnReset>
	buttonLongReset();
 8002566:	f7ff ff75 	bl	8002454 <buttonLongReset>
	encoderReset();
 800256a:	f7ff ffa3 	bl	80024b4 <encoderReset>

	ssd1306_Fill(Black);
 800256e:	2000      	movs	r0, #0
 8002570:	f7fe fec8 	bl	8001304 <ssd1306_Fill>
	ssd1306_SetCursor(START_POS_X, START_POS_Y);
 8002574:	2100      	movs	r1, #0
 8002576:	2002      	movs	r0, #2
 8002578:	f7ff f820 	bl	80015bc <ssd1306_SetCursor>
		ssd1306_WriteString(menuButton[2], Font_11x18, White);
 800257c:	4b62      	ldr	r3, [pc, #392]	; (8002708 <drawButtonMenu+0x1bc>)
 800257e:	6898      	ldr	r0, [r3, #8]
 8002580:	4a62      	ldr	r2, [pc, #392]	; (800270c <drawButtonMenu+0x1c0>)
 8002582:	2301      	movs	r3, #1
 8002584:	ca06      	ldmia	r2, {r1, r2}
 8002586:	f7fe fff3 	bl	8001570 <ssd1306_WriteString>
	ssd1306_SetCursor(START_POS_X, START_POS_Y + SIZE_FONT_Y);
 800258a:	2112      	movs	r1, #18
 800258c:	2002      	movs	r0, #2
 800258e:	f7ff f815 	bl	80015bc <ssd1306_SetCursor>
		ssd1306_WriteString(menuButton[0], Font_11x18, White);
 8002592:	4b5d      	ldr	r3, [pc, #372]	; (8002708 <drawButtonMenu+0x1bc>)
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	4a5d      	ldr	r2, [pc, #372]	; (800270c <drawButtonMenu+0x1c0>)
 8002598:	2301      	movs	r3, #1
 800259a:	ca06      	ldmia	r2, {r1, r2}
 800259c:	f7fe ffe8 	bl	8001570 <ssd1306_WriteString>
	ssd1306_SetCursor(START_POS_X, START_POS_Y + SIZE_FONT_Y*2);
 80025a0:	2124      	movs	r1, #36	; 0x24
 80025a2:	2002      	movs	r0, #2
 80025a4:	f7ff f80a 	bl	80015bc <ssd1306_SetCursor>
		ssd1306_WriteString(menuButton[1], Font_11x18, White);
 80025a8:	4b57      	ldr	r3, [pc, #348]	; (8002708 <drawButtonMenu+0x1bc>)
 80025aa:	6858      	ldr	r0, [r3, #4]
 80025ac:	4a57      	ldr	r2, [pc, #348]	; (800270c <drawButtonMenu+0x1c0>)
 80025ae:	2301      	movs	r3, #1
 80025b0:	ca06      	ldmia	r2, {r1, r2}
 80025b2:	f7fe ffdd 	bl	8001570 <ssd1306_WriteString>

	while(1){
		if(buttonEn() == ON){
 80025b6:	f7ff fee9 	bl	800238c <buttonEn>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d104      	bne.n	80025ca <drawButtonMenu+0x7e>
			buttonEnReset();
 80025c0:	f7ff fefc 	bl	80023bc <buttonEnReset>
			butEn++;
 80025c4:	7dfb      	ldrb	r3, [r7, #23]
 80025c6:	3301      	adds	r3, #1
 80025c8:	75fb      	strb	r3, [r7, #23]
		}
		if(buttonLong() == ON){
 80025ca:	f7ff ff2b 	bl	8002424 <buttonLong>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d104      	bne.n	80025de <drawButtonMenu+0x92>
			buttonLongReset();
 80025d4:	f7ff ff3e 	bl	8002454 <buttonLongReset>
			butLo++;
 80025d8:	7dbb      	ldrb	r3, [r7, #22]
 80025da:	3301      	adds	r3, #1
 80025dc:	75bb      	strb	r3, [r7, #22]
		}
		if(encoderData() > 0){
 80025de:	f7ff ff45 	bl	800246c <encoderData>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	dd04      	ble.n	80025f2 <drawButtonMenu+0xa6>
			encoderReset();
 80025e8:	f7ff ff64 	bl	80024b4 <encoderReset>
			encodP++;
 80025ec:	7d7b      	ldrb	r3, [r7, #21]
 80025ee:	3301      	adds	r3, #1
 80025f0:	757b      	strb	r3, [r7, #21]
		}
		if(encoderData() < 0){
 80025f2:	f7ff ff3b 	bl	800246c <encoderData>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	da04      	bge.n	8002606 <drawButtonMenu+0xba>
			encoderReset();
 80025fc:	f7ff ff5a 	bl	80024b4 <encoderReset>
			encodM++;
 8002600:	7d3b      	ldrb	r3, [r7, #20]
 8002602:	3301      	adds	r3, #1
 8002604:	753b      	strb	r3, [r7, #20]
		}
		encodM %=10;
 8002606:	7d3a      	ldrb	r2, [r7, #20]
 8002608:	4b41      	ldr	r3, [pc, #260]	; (8002710 <drawButtonMenu+0x1c4>)
 800260a:	fba3 1302 	umull	r1, r3, r3, r2
 800260e:	08d9      	lsrs	r1, r3, #3
 8002610:	460b      	mov	r3, r1
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	753b      	strb	r3, [r7, #20]
		encodP %=10;
 800261c:	7d7a      	ldrb	r2, [r7, #21]
 800261e:	4b3c      	ldr	r3, [pc, #240]	; (8002710 <drawButtonMenu+0x1c4>)
 8002620:	fba3 1302 	umull	r1, r3, r3, r2
 8002624:	08d9      	lsrs	r1, r3, #3
 8002626:	460b      	mov	r3, r1
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	757b      	strb	r3, [r7, #21]

		butEn = butEn % 10;
 8002632:	7dfa      	ldrb	r2, [r7, #23]
 8002634:	4b36      	ldr	r3, [pc, #216]	; (8002710 <drawButtonMenu+0x1c4>)
 8002636:	fba3 1302 	umull	r1, r3, r3, r2
 800263a:	08d9      	lsrs	r1, r3, #3
 800263c:	460b      	mov	r3, r1
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	75fb      	strb	r3, [r7, #23]
		butLo = butLo % 10;
 8002648:	7dba      	ldrb	r2, [r7, #22]
 800264a:	4b31      	ldr	r3, [pc, #196]	; (8002710 <drawButtonMenu+0x1c4>)
 800264c:	fba3 1302 	umull	r1, r3, r3, r2
 8002650:	08d9      	lsrs	r1, r3, #3
 8002652:	460b      	mov	r3, r1
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	75bb      	strb	r3, [r7, #22]

		itoa(butEn, sym_butEn, 10);
 800265e:	7dfb      	ldrb	r3, [r7, #23]
 8002660:	f107 0110 	add.w	r1, r7, #16
 8002664:	220a      	movs	r2, #10
 8002666:	4618      	mov	r0, r3
 8002668:	f00d ffe4 	bl	8010634 <itoa>
		itoa(butLo, sym_butLo, 10);
 800266c:	7dbb      	ldrb	r3, [r7, #22]
 800266e:	f107 010c 	add.w	r1, r7, #12
 8002672:	220a      	movs	r2, #10
 8002674:	4618      	mov	r0, r3
 8002676:	f00d ffdd 	bl	8010634 <itoa>
		itoa(encodM, sym_encM, 10);
 800267a:	7d3b      	ldrb	r3, [r7, #20]
 800267c:	1d39      	adds	r1, r7, #4
 800267e:	220a      	movs	r2, #10
 8002680:	4618      	mov	r0, r3
 8002682:	f00d ffd7 	bl	8010634 <itoa>
		itoa(encodP, sym_encP, 10);
 8002686:	7d7b      	ldrb	r3, [r7, #21]
 8002688:	f107 0108 	add.w	r1, r7, #8
 800268c:	220a      	movs	r2, #10
 800268e:	4618      	mov	r0, r3
 8002690:	f00d ffd0 	bl	8010634 <itoa>

		ssd1306_SetCursor(SIZE_FONT_X * 4, START_POS_Y + SIZE_FONT_Y);
 8002694:	2112      	movs	r1, #18
 8002696:	202c      	movs	r0, #44	; 0x2c
 8002698:	f7fe ff90 	bl	80015bc <ssd1306_SetCursor>
			ssd1306_WriteString(sym_butLo, Font_11x18, White);
 800269c:	4a1b      	ldr	r2, [pc, #108]	; (800270c <drawButtonMenu+0x1c0>)
 800269e:	f107 000c 	add.w	r0, r7, #12
 80026a2:	2301      	movs	r3, #1
 80026a4:	ca06      	ldmia	r2, {r1, r2}
 80026a6:	f7fe ff63 	bl	8001570 <ssd1306_WriteString>
		ssd1306_SetCursor(SIZE_FONT_X * 10, START_POS_Y + SIZE_FONT_Y);
 80026aa:	2112      	movs	r1, #18
 80026ac:	206e      	movs	r0, #110	; 0x6e
 80026ae:	f7fe ff85 	bl	80015bc <ssd1306_SetCursor>
			ssd1306_WriteString(sym_butEn, Font_11x18, White);
 80026b2:	4a16      	ldr	r2, [pc, #88]	; (800270c <drawButtonMenu+0x1c0>)
 80026b4:	f107 0010 	add.w	r0, r7, #16
 80026b8:	2301      	movs	r3, #1
 80026ba:	ca06      	ldmia	r2, {r1, r2}
 80026bc:	f7fe ff58 	bl	8001570 <ssd1306_WriteString>
		ssd1306_SetCursor(SIZE_FONT_X * 4, START_POS_Y + SIZE_FONT_Y*2);
 80026c0:	2124      	movs	r1, #36	; 0x24
 80026c2:	202c      	movs	r0, #44	; 0x2c
 80026c4:	f7fe ff7a 	bl	80015bc <ssd1306_SetCursor>
			ssd1306_WriteString(sym_encM, Font_11x18, White);
 80026c8:	4a10      	ldr	r2, [pc, #64]	; (800270c <drawButtonMenu+0x1c0>)
 80026ca:	1d38      	adds	r0, r7, #4
 80026cc:	2301      	movs	r3, #1
 80026ce:	ca06      	ldmia	r2, {r1, r2}
 80026d0:	f7fe ff4e 	bl	8001570 <ssd1306_WriteString>
		ssd1306_SetCursor(SIZE_FONT_X * 10, START_POS_Y + SIZE_FONT_Y*2);
 80026d4:	2124      	movs	r1, #36	; 0x24
 80026d6:	206e      	movs	r0, #110	; 0x6e
 80026d8:	f7fe ff70 	bl	80015bc <ssd1306_SetCursor>
			ssd1306_WriteString(sym_encP, Font_11x18, White);
 80026dc:	4a0b      	ldr	r2, [pc, #44]	; (800270c <drawButtonMenu+0x1c0>)
 80026de:	f107 0008 	add.w	r0, r7, #8
 80026e2:	2301      	movs	r3, #1
 80026e4:	ca06      	ldmia	r2, {r1, r2}
 80026e6:	f7fe ff43 	bl	8001570 <ssd1306_WriteString>

		udpateDisplay();
 80026ea:	f7ff fe25 	bl	8002338 <udpateDisplay>
		HAL_Delay(50);
 80026ee:	2032      	movs	r0, #50	; 0x32
 80026f0:	f001 f98c 	bl	8003a0c <HAL_Delay>
		if(butLo > 2)
 80026f4:	7dbb      	ldrb	r3, [r7, #22]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d800      	bhi.n	80026fc <drawButtonMenu+0x1b0>
		if(buttonEn() == ON){
 80026fa:	e75c      	b.n	80025b6 <drawButtonMenu+0x6a>
			break;
 80026fc:	bf00      	nop
	}
}
 80026fe:	bf00      	nop
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	2000002c 	.word	0x2000002c
 800270c:	20000000 	.word	0x20000000
 8002710:	cccccccd 	.word	0xcccccccd

08002714 <drawLEDMenu>:

void drawLEDMenu(){
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
	uint8_t currentLed = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	71fb      	strb	r3, [r7, #7]
	uint8_t red,grn,blu;
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <drawE_inkMenu>:

void drawE_inkMenu(){
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
	uint8_t exit = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	71fb      	strb	r3, [r7, #7]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <drawADCMenu>:

void drawADCMenu(){
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
	uint8_t exit = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	71fb      	strb	r3, [r7, #7]
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <drawEncodMenu>:
void drawEncodMenu(){
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
	uint8_t exit = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	71fb      	strb	r3, [r7, #7]
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <drawDACMenu>:
void drawDACMenu(){
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
	uint8_t exit = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	71fb      	strb	r3, [r7, #7]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <drawSettinMenu>:
void drawSettinMenu(){
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
	uint8_t exit = 0;
 8002788:	2300      	movs	r3, #0
 800278a:	71fb      	strb	r3, [r7, #7]
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800279c:	f001 f8f4 	bl	8003988 <HAL_Init>
  //MCP4725 myMCP4725;
  //MCP4725_setValue(&myMCP4725, 2048, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027a0:	f000 f854 	bl	800284c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027a4:	f000 f9b2 	bl	8002b0c <MX_GPIO_Init>
  MX_DMA_Init();
 80027a8:	f000 f990 	bl	8002acc <MX_DMA_Init>
  MX_I2C1_Init();
 80027ac:	f000 f8b6 	bl	800291c <MX_I2C1_Init>
  MX_SPI1_Init();
 80027b0:	f000 f8e2 	bl	8002978 <MX_SPI1_Init>
  MX_TIM2_Init();
 80027b4:	f000 f916 	bl	80029e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  test_i2c_dev(); // Определяем что все устройства на линии i2c подключены
 80027b8:	f000 fa2e 	bl	8002c18 <test_i2c_dev>
  ssd1306_Init();
 80027bc:	f7fe fd38 	bl	8001230 <ssd1306_Init>
  ssd1306_SetCursor(5, 10);
 80027c0:	210a      	movs	r1, #10
 80027c2:	2005      	movs	r0, #5
 80027c4:	f7fe fefa 	bl	80015bc <ssd1306_SetCursor>
  ssd1306_WriteString("JetPro,Bro!", Font_11x18, White);
 80027c8:	4a18      	ldr	r2, [pc, #96]	; (800282c <main+0x94>)
 80027ca:	2301      	movs	r3, #1
 80027cc:	ca06      	ldmia	r2, {r1, r2}
 80027ce:	4818      	ldr	r0, [pc, #96]	; (8002830 <main+0x98>)
 80027d0:	f7fe fece 	bl	8001570 <ssd1306_WriteString>
  ssd1306_SetCursor(3, 40);
 80027d4:	2128      	movs	r1, #40	; 0x28
 80027d6:	2003      	movs	r0, #3
 80027d8:	f7fe fef0 	bl	80015bc <ssd1306_SetCursor>
  ssd1306_WriteString(" Tap Start ", Font_11x18, White);
 80027dc:	4a13      	ldr	r2, [pc, #76]	; (800282c <main+0x94>)
 80027de:	2301      	movs	r3, #1
 80027e0:	ca06      	ldmia	r2, {r1, r2}
 80027e2:	4814      	ldr	r0, [pc, #80]	; (8002834 <main+0x9c>)
 80027e4:	f7fe fec4 	bl	8001570 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80027e8:	f7fe fdb0 	bl	800134c <ssd1306_UpdateScreen>
  BlockI2CHandle = osMutexNew(&BlockI2C_attributes);
 80027ec:	4812      	ldr	r0, [pc, #72]	; (8002838 <main+0xa0>)
 80027ee:	f00a f91a 	bl	800ca26 <osMutexNew>
 80027f2:	4603      	mov	r3, r0
 80027f4:	4a11      	ldr	r2, [pc, #68]	; (800283c <main+0xa4>)
 80027f6:	6013      	str	r3, [r2, #0]
  //osStatus_t status = osMutexAcquire(BlockI2CHandle, 1000);
  //osMutexRelease (BlockI2CHandle);

  HAL_Delay(1000);
 80027f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027fc:	f001 f906 	bl	8003a0c <HAL_Delay>
  //EPD_WhiteScreen_ALL_Clean();
  //EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002800:	f00a f81a 	bl	800c838 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of BlockI2C */
  BlockI2CHandle = osMutexNew(&BlockI2C_attributes);
 8002804:	480c      	ldr	r0, [pc, #48]	; (8002838 <main+0xa0>)
 8002806:	f00a f90e 	bl	800ca26 <osMutexNew>
 800280a:	4603      	mov	r3, r0
 800280c:	4a0b      	ldr	r2, [pc, #44]	; (800283c <main+0xa4>)
 800280e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of EmptyTask */
  EmptyTaskHandle = osThreadNew(StartEmptyTask, NULL, &EmptyTask_attributes);
 8002810:	4a0b      	ldr	r2, [pc, #44]	; (8002840 <main+0xa8>)
 8002812:	2100      	movs	r1, #0
 8002814:	480b      	ldr	r0, [pc, #44]	; (8002844 <main+0xac>)
 8002816:	f00a f859 	bl	800c8cc <osThreadNew>
 800281a:	4603      	mov	r3, r0
 800281c:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <main+0xb0>)
 800281e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  initUserTasks();
 8002820:	f001 f85a 	bl	80038d8 <initUserTasks>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002824:	f00a f82c 	bl	800c880 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002828:	e7fe      	b.n	8002828 <main+0x90>
 800282a:	bf00      	nop
 800282c:	20000000 	.word	0x20000000
 8002830:	08010ba8 	.word	0x08010ba8
 8002834:	08010bb4 	.word	0x08010bb4
 8002838:	080119d0 	.word	0x080119d0
 800283c:	20000814 	.word	0x20000814
 8002840:	080119ac 	.word	0x080119ac
 8002844:	08002ccd 	.word	0x08002ccd
 8002848:	20000810 	.word	0x20000810

0800284c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b094      	sub	sp, #80	; 0x50
 8002850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002852:	f107 0320 	add.w	r3, r7, #32
 8002856:	2230      	movs	r2, #48	; 0x30
 8002858:	2100      	movs	r1, #0
 800285a:	4618      	mov	r0, r3
 800285c:	f00d ff04 	bl	8010668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002860:	f107 030c 	add.w	r3, r7, #12
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	60da      	str	r2, [r3, #12]
 800286e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002870:	2300      	movs	r3, #0
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	4b27      	ldr	r3, [pc, #156]	; (8002914 <SystemClock_Config+0xc8>)
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	4a26      	ldr	r2, [pc, #152]	; (8002914 <SystemClock_Config+0xc8>)
 800287a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800287e:	6413      	str	r3, [r2, #64]	; 0x40
 8002880:	4b24      	ldr	r3, [pc, #144]	; (8002914 <SystemClock_Config+0xc8>)
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800288c:	2300      	movs	r3, #0
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	4b21      	ldr	r3, [pc, #132]	; (8002918 <SystemClock_Config+0xcc>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a20      	ldr	r2, [pc, #128]	; (8002918 <SystemClock_Config+0xcc>)
 8002896:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	4b1e      	ldr	r3, [pc, #120]	; (8002918 <SystemClock_Config+0xcc>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028a8:	2301      	movs	r3, #1
 80028aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028b2:	2302      	movs	r3, #2
 80028b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80028bc:	2319      	movs	r3, #25
 80028be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80028c0:	2390      	movs	r3, #144	; 0x90
 80028c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028c4:	2302      	movs	r3, #2
 80028c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80028c8:	2303      	movs	r3, #3
 80028ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028cc:	f107 0320 	add.w	r3, r7, #32
 80028d0:	4618      	mov	r0, r3
 80028d2:	f004 fedf 	bl	8007694 <HAL_RCC_OscConfig>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80028dc:	f000 fa12 	bl	8002d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028e0:	230f      	movs	r3, #15
 80028e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028e4:	2302      	movs	r3, #2
 80028e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028f6:	f107 030c 	add.w	r3, r7, #12
 80028fa:	2102      	movs	r1, #2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f005 f941 	bl	8007b84 <HAL_RCC_ClockConfig>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002908:	f000 f9fc 	bl	8002d04 <Error_Handler>
  }
}
 800290c:	bf00      	nop
 800290e:	3750      	adds	r7, #80	; 0x50
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40023800 	.word	0x40023800
 8002918:	40007000 	.word	0x40007000

0800291c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002920:	4b12      	ldr	r3, [pc, #72]	; (800296c <MX_I2C1_Init+0x50>)
 8002922:	4a13      	ldr	r2, [pc, #76]	; (8002970 <MX_I2C1_Init+0x54>)
 8002924:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002926:	4b11      	ldr	r3, [pc, #68]	; (800296c <MX_I2C1_Init+0x50>)
 8002928:	4a12      	ldr	r2, [pc, #72]	; (8002974 <MX_I2C1_Init+0x58>)
 800292a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800292c:	4b0f      	ldr	r3, [pc, #60]	; (800296c <MX_I2C1_Init+0x50>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002932:	4b0e      	ldr	r3, [pc, #56]	; (800296c <MX_I2C1_Init+0x50>)
 8002934:	2200      	movs	r2, #0
 8002936:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <MX_I2C1_Init+0x50>)
 800293a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800293e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002940:	4b0a      	ldr	r3, [pc, #40]	; (800296c <MX_I2C1_Init+0x50>)
 8002942:	2200      	movs	r2, #0
 8002944:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <MX_I2C1_Init+0x50>)
 8002948:	2200      	movs	r2, #0
 800294a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800294c:	4b07      	ldr	r3, [pc, #28]	; (800296c <MX_I2C1_Init+0x50>)
 800294e:	2200      	movs	r2, #0
 8002950:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <MX_I2C1_Init+0x50>)
 8002954:	2200      	movs	r2, #0
 8002956:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002958:	4804      	ldr	r0, [pc, #16]	; (800296c <MX_I2C1_Init+0x50>)
 800295a:	f001 febd 	bl	80046d8 <HAL_I2C_Init>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002964:	f000 f9ce 	bl	8002d04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002968:	bf00      	nop
 800296a:	bd80      	pop	{r7, pc}
 800296c:	200006bc 	.word	0x200006bc
 8002970:	40005400 	.word	0x40005400
 8002974:	00061a80 	.word	0x00061a80

08002978 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800297c:	4b17      	ldr	r3, [pc, #92]	; (80029dc <MX_SPI1_Init+0x64>)
 800297e:	4a18      	ldr	r2, [pc, #96]	; (80029e0 <MX_SPI1_Init+0x68>)
 8002980:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002982:	4b16      	ldr	r3, [pc, #88]	; (80029dc <MX_SPI1_Init+0x64>)
 8002984:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002988:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800298a:	4b14      	ldr	r3, [pc, #80]	; (80029dc <MX_SPI1_Init+0x64>)
 800298c:	2200      	movs	r2, #0
 800298e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002990:	4b12      	ldr	r3, [pc, #72]	; (80029dc <MX_SPI1_Init+0x64>)
 8002992:	2200      	movs	r2, #0
 8002994:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <MX_SPI1_Init+0x64>)
 8002998:	2200      	movs	r2, #0
 800299a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800299c:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <MX_SPI1_Init+0x64>)
 800299e:	2200      	movs	r2, #0
 80029a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029a2:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <MX_SPI1_Init+0x64>)
 80029a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80029aa:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <MX_SPI1_Init+0x64>)
 80029ac:	2230      	movs	r2, #48	; 0x30
 80029ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029b0:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <MX_SPI1_Init+0x64>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <MX_SPI1_Init+0x64>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029bc:	4b07      	ldr	r3, [pc, #28]	; (80029dc <MX_SPI1_Init+0x64>)
 80029be:	2200      	movs	r2, #0
 80029c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <MX_SPI1_Init+0x64>)
 80029c4:	220a      	movs	r2, #10
 80029c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029c8:	4804      	ldr	r0, [pc, #16]	; (80029dc <MX_SPI1_Init+0x64>)
 80029ca:	f005 faed 	bl	8007fa8 <HAL_SPI_Init>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80029d4:	f000 f996 	bl	8002d04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80029d8:	bf00      	nop
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20000710 	.word	0x20000710
 80029e0:	40013000 	.word	0x40013000

080029e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08e      	sub	sp, #56	; 0x38
 80029e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	605a      	str	r2, [r3, #4]
 80029f4:	609a      	str	r2, [r3, #8]
 80029f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029f8:	f107 0320 	add.w	r3, r7, #32
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a02:	1d3b      	adds	r3, r7, #4
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	611a      	str	r2, [r3, #16]
 8002a10:	615a      	str	r2, [r3, #20]
 8002a12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a14:	4b2c      	ldr	r3, [pc, #176]	; (8002ac8 <MX_TIM2_Init+0xe4>)
 8002a16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a1c:	4b2a      	ldr	r3, [pc, #168]	; (8002ac8 <MX_TIM2_Init+0xe4>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a22:	4b29      	ldr	r3, [pc, #164]	; (8002ac8 <MX_TIM2_Init+0xe4>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 8002a28:	4b27      	ldr	r3, [pc, #156]	; (8002ac8 <MX_TIM2_Init+0xe4>)
 8002a2a:	2259      	movs	r2, #89	; 0x59
 8002a2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a2e:	4b26      	ldr	r3, [pc, #152]	; (8002ac8 <MX_TIM2_Init+0xe4>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a34:	4b24      	ldr	r3, [pc, #144]	; (8002ac8 <MX_TIM2_Init+0xe4>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a3a:	4823      	ldr	r0, [pc, #140]	; (8002ac8 <MX_TIM2_Init+0xe4>)
 8002a3c:	f005 fb3d 	bl	80080ba <HAL_TIM_Base_Init>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002a46:	f000 f95d 	bl	8002d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a54:	4619      	mov	r1, r3
 8002a56:	481c      	ldr	r0, [pc, #112]	; (8002ac8 <MX_TIM2_Init+0xe4>)
 8002a58:	f005 fe04 	bl	8008664 <HAL_TIM_ConfigClockSource>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002a62:	f000 f94f 	bl	8002d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a66:	4818      	ldr	r0, [pc, #96]	; (8002ac8 <MX_TIM2_Init+0xe4>)
 8002a68:	f005 fbd8 	bl	800821c <HAL_TIM_PWM_Init>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002a72:	f000 f947 	bl	8002d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a76:	2300      	movs	r3, #0
 8002a78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a7e:	f107 0320 	add.w	r3, r7, #32
 8002a82:	4619      	mov	r1, r3
 8002a84:	4810      	ldr	r0, [pc, #64]	; (8002ac8 <MX_TIM2_Init+0xe4>)
 8002a86:	f006 f9fb 	bl	8008e80 <HAL_TIMEx_MasterConfigSynchronization>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002a90:	f000 f938 	bl	8002d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a94:	2360      	movs	r3, #96	; 0x60
 8002a96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	2204      	movs	r2, #4
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4807      	ldr	r0, [pc, #28]	; (8002ac8 <MX_TIM2_Init+0xe4>)
 8002aac:	f005 fd18 	bl	80084e0 <HAL_TIM_PWM_ConfigChannel>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002ab6:	f000 f925 	bl	8002d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002aba:	4803      	ldr	r0, [pc, #12]	; (8002ac8 <MX_TIM2_Init+0xe4>)
 8002abc:	f000 fa44 	bl	8002f48 <HAL_TIM_MspPostInit>

}
 8002ac0:	bf00      	nop
 8002ac2:	3738      	adds	r7, #56	; 0x38
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20000768 	.word	0x20000768

08002acc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <MX_DMA_Init+0x3c>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	4a0b      	ldr	r2, [pc, #44]	; (8002b08 <MX_DMA_Init+0x3c>)
 8002adc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <MX_DMA_Init+0x3c>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aea:	607b      	str	r3, [r7, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2105      	movs	r1, #5
 8002af2:	2011      	movs	r0, #17
 8002af4:	f001 f866 	bl	8003bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002af8:	2011      	movs	r0, #17
 8002afa:	f001 f87f 	bl	8003bfc <HAL_NVIC_EnableIRQ>

}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800

08002b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b12:	f107 030c 	add.w	r3, r7, #12
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	605a      	str	r2, [r3, #4]
 8002b1c:	609a      	str	r2, [r3, #8]
 8002b1e:	60da      	str	r2, [r3, #12]
 8002b20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	4b31      	ldr	r3, [pc, #196]	; (8002bec <MX_GPIO_Init+0xe0>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	4a30      	ldr	r2, [pc, #192]	; (8002bec <MX_GPIO_Init+0xe0>)
 8002b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b30:	6313      	str	r3, [r2, #48]	; 0x30
 8002b32:	4b2e      	ldr	r3, [pc, #184]	; (8002bec <MX_GPIO_Init+0xe0>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	607b      	str	r3, [r7, #4]
 8002b42:	4b2a      	ldr	r3, [pc, #168]	; (8002bec <MX_GPIO_Init+0xe0>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	4a29      	ldr	r2, [pc, #164]	; (8002bec <MX_GPIO_Init+0xe0>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4e:	4b27      	ldr	r3, [pc, #156]	; (8002bec <MX_GPIO_Init+0xe0>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	607b      	str	r3, [r7, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	603b      	str	r3, [r7, #0]
 8002b5e:	4b23      	ldr	r3, [pc, #140]	; (8002bec <MX_GPIO_Init+0xe0>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	4a22      	ldr	r2, [pc, #136]	; (8002bec <MX_GPIO_Init+0xe0>)
 8002b64:	f043 0302 	orr.w	r3, r3, #2
 8002b68:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6a:	4b20      	ldr	r3, [pc, #128]	; (8002bec <MX_GPIO_Init+0xe0>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin, GPIO_PIN_RESET);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2107      	movs	r1, #7
 8002b7a:	481d      	ldr	r0, [pc, #116]	; (8002bf0 <MX_GPIO_Init+0xe4>)
 8002b7c:	f001 fd7a 	bl	8004674 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_CS_Pin EPD_Reset_Pin EPD_Data_Control_Pin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin;
 8002b80:	2307      	movs	r3, #7
 8002b82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b84:	2301      	movs	r3, #1
 8002b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b90:	f107 030c 	add.w	r3, r7, #12
 8002b94:	4619      	mov	r1, r3
 8002b96:	4816      	ldr	r0, [pc, #88]	; (8002bf0 <MX_GPIO_Init+0xe4>)
 8002b98:	f001 fbd0 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_Busy_Pin */
  GPIO_InitStruct.Pin = EPD_Busy_Pin;
 8002b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ba0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EPD_Busy_GPIO_Port, &GPIO_InitStruct);
 8002baa:	f107 030c 	add.w	r3, r7, #12
 8002bae:	4619      	mov	r1, r3
 8002bb0:	480f      	ldr	r0, [pc, #60]	; (8002bf0 <MX_GPIO_Init+0xe4>)
 8002bb2:	f001 fbc3 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_button_on_Pin */
  GPIO_InitStruct.Pin = EXT_button_on_Pin;
 8002bb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002bbc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002bc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EXT_button_on_GPIO_Port, &GPIO_InitStruct);
 8002bc6:	f107 030c 	add.w	r3, r7, #12
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4808      	ldr	r0, [pc, #32]	; (8002bf0 <MX_GPIO_Init+0xe4>)
 8002bce:	f001 fbb5 	bl	800433c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2105      	movs	r1, #5
 8002bd6:	2028      	movs	r0, #40	; 0x28
 8002bd8:	f000 fff4 	bl	8003bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002bdc:	2028      	movs	r0, #40	; 0x28
 8002bde:	f001 f80d 	bl	8003bfc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002be2:	bf00      	nop
 8002be4:	3720      	adds	r7, #32
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40020400 	.word	0x40020400

08002bf4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EXT_button_on_Pin){
 8002bfe:	88fb      	ldrh	r3, [r7, #6]
 8002c00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c04:	d104      	bne.n	8002c10 <HAL_GPIO_EXTI_Callback+0x1c>
		buttonEnSet(ON);
 8002c06:	2001      	movs	r0, #1
 8002c08:	f7ff fbcc 	bl	80023a4 <buttonEnSet>
		buttonUpSet();
 8002c0c:	f7ff fbb2 	bl	8002374 <buttonUpSet>
	}
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <test_i2c_dev>:


uint8_t test_i2c_dev(){
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef stateI2c;
	  // Подсчёт устройств в сети I2C 60-display, 72-ацп, 54-encoder, 96 -dac/
	  for(uint8_t i = 1; i < 127 ; i++){
 8002c1e:	2301      	movs	r3, #1
 8002c20:	71fb      	strb	r3, [r7, #7]
 8002c22:	e046      	b.n	8002cb2 <test_i2c_dev+0x9a>
		  stateI2c = HAL_I2C_IsDeviceReady(&hi2c1, (i << 1), 2, 10);
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	b299      	uxth	r1, r3
 8002c2c:	230a      	movs	r3, #10
 8002c2e:	2202      	movs	r2, #2
 8002c30:	4824      	ldr	r0, [pc, #144]	; (8002cc4 <test_i2c_dev+0xac>)
 8002c32:	f002 fcd9 	bl	80055e8 <HAL_I2C_IsDeviceReady>
 8002c36:	4603      	mov	r3, r0
 8002c38:	71bb      	strb	r3, [r7, #6]
		  if(stateI2c == HAL_OK){
 8002c3a:	79bb      	ldrb	r3, [r7, #6]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d134      	bne.n	8002caa <test_i2c_dev+0x92>
			  switch ( i ) {
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	2b60      	cmp	r3, #96	; 0x60
 8002c44:	d01c      	beq.n	8002c80 <test_i2c_dev+0x68>
 8002c46:	2b60      	cmp	r3, #96	; 0x60
 8002c48:	dc20      	bgt.n	8002c8c <test_i2c_dev+0x74>
 8002c4a:	2b48      	cmp	r3, #72	; 0x48
 8002c4c:	d012      	beq.n	8002c74 <test_i2c_dev+0x5c>
 8002c4e:	2b48      	cmp	r3, #72	; 0x48
 8002c50:	dc1c      	bgt.n	8002c8c <test_i2c_dev+0x74>
 8002c52:	2b36      	cmp	r3, #54	; 0x36
 8002c54:	d002      	beq.n	8002c5c <test_i2c_dev+0x44>
 8002c56:	2b3c      	cmp	r3, #60	; 0x3c
 8002c58:	d006      	beq.n	8002c68 <test_i2c_dev+0x50>
 8002c5a:	e017      	b.n	8002c8c <test_i2c_dev+0x74>
			  	  case ENC_ADRESS: devise_i2c_tree.encoder_dev = ON; break;
 8002c5c:	4a1a      	ldr	r2, [pc, #104]	; (8002cc8 <test_i2c_dev+0xb0>)
 8002c5e:	7813      	ldrb	r3, [r2, #0]
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	7013      	strb	r3, [r2, #0]
 8002c66:	e021      	b.n	8002cac <test_i2c_dev+0x94>
			  	  case DIS_ADRESS: devise_i2c_tree.display_dev = ON; break;
 8002c68:	4a17      	ldr	r2, [pc, #92]	; (8002cc8 <test_i2c_dev+0xb0>)
 8002c6a:	7813      	ldrb	r3, [r2, #0]
 8002c6c:	f043 0302 	orr.w	r3, r3, #2
 8002c70:	7013      	strb	r3, [r2, #0]
 8002c72:	e01b      	b.n	8002cac <test_i2c_dev+0x94>
			  	  case ADC_ADRESS: devise_i2c_tree.ADC_dev 	   = ON; break;
 8002c74:	4a14      	ldr	r2, [pc, #80]	; (8002cc8 <test_i2c_dev+0xb0>)
 8002c76:	7813      	ldrb	r3, [r2, #0]
 8002c78:	f043 0304 	orr.w	r3, r3, #4
 8002c7c:	7013      	strb	r3, [r2, #0]
 8002c7e:	e015      	b.n	8002cac <test_i2c_dev+0x94>
			  	  case DAC_ADRESS: devise_i2c_tree.DAC_dev 	   = ON; break;
 8002c80:	4a11      	ldr	r2, [pc, #68]	; (8002cc8 <test_i2c_dev+0xb0>)
 8002c82:	7813      	ldrb	r3, [r2, #0]
 8002c84:	f043 0308 	orr.w	r3, r3, #8
 8002c88:	7013      	strb	r3, [r2, #0]
 8002c8a:	e00f      	b.n	8002cac <test_i2c_dev+0x94>
			      default: devise_i2c_tree.unknown_dev++;
 8002c8c:	4b0e      	ldr	r3, [pc, #56]	; (8002cc8 <test_i2c_dev+0xb0>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	3301      	adds	r3, #1
 8002c98:	f003 030f 	and.w	r3, r3, #15
 8002c9c:	b2d9      	uxtb	r1, r3
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <test_i2c_dev+0xb0>)
 8002ca0:	7813      	ldrb	r3, [r2, #0]
 8002ca2:	f361 1307 	bfi	r3, r1, #4, #4
 8002ca6:	7013      	strb	r3, [r2, #0]
 8002ca8:	e000      	b.n	8002cac <test_i2c_dev+0x94>
			      }
		  }
 8002caa:	bf00      	nop
	  for(uint8_t i = 1; i < 127 ; i++){
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	71fb      	strb	r3, [r7, #7]
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	2b7e      	cmp	r3, #126	; 0x7e
 8002cb6:	d9b5      	bls.n	8002c24 <test_i2c_dev+0xc>
	  }
  }
 8002cb8:	bf00      	nop
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	200006bc 	.word	0x200006bc
 8002cc8:	200006b8 	.word	0x200006b8

08002ccc <StartEmptyTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEmptyTask */
void StartEmptyTask(void *argument)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002cd4:	f00c ff5a 	bl	800fb8c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(1);
 8002cd8:	2001      	movs	r0, #1
 8002cda:	f009 fe89 	bl	800c9f0 <osDelay>
 8002cde:	e7fb      	b.n	8002cd8 <StartEmptyTask+0xc>

08002ce0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d101      	bne.n	8002cf6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002cf2:	f000 fe6b 	bl	80039cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40014000 	.word	0x40014000

08002d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d08:	b672      	cpsid	i
}
 8002d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d0c:	e7fe      	b.n	8002d0c <Error_Handler+0x8>
	...

08002d10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	607b      	str	r3, [r7, #4]
 8002d1a:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <HAL_MspInit+0x54>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	4a11      	ldr	r2, [pc, #68]	; (8002d64 <HAL_MspInit+0x54>)
 8002d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d24:	6453      	str	r3, [r2, #68]	; 0x44
 8002d26:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <HAL_MspInit+0x54>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	603b      	str	r3, [r7, #0]
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_MspInit+0x54>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <HAL_MspInit+0x54>)
 8002d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
 8002d42:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <HAL_MspInit+0x54>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	210f      	movs	r1, #15
 8002d52:	f06f 0001 	mvn.w	r0, #1
 8002d56:	f000 ff35 	bl	8003bc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800

08002d68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08a      	sub	sp, #40	; 0x28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a19      	ldr	r2, [pc, #100]	; (8002dec <HAL_I2C_MspInit+0x84>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d12b      	bne.n	8002de2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <HAL_I2C_MspInit+0x88>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	4a17      	ldr	r2, [pc, #92]	; (8002df0 <HAL_I2C_MspInit+0x88>)
 8002d94:	f043 0302 	orr.w	r3, r3, #2
 8002d98:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9a:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <HAL_I2C_MspInit+0x88>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002da6:	23c0      	movs	r3, #192	; 0xc0
 8002da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002daa:	2312      	movs	r3, #18
 8002dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db2:	2303      	movs	r3, #3
 8002db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002db6:	2304      	movs	r3, #4
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dba:	f107 0314 	add.w	r3, r7, #20
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	480c      	ldr	r0, [pc, #48]	; (8002df4 <HAL_I2C_MspInit+0x8c>)
 8002dc2:	f001 fabb 	bl	800433c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <HAL_I2C_MspInit+0x88>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	4a08      	ldr	r2, [pc, #32]	; (8002df0 <HAL_I2C_MspInit+0x88>)
 8002dd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_I2C_MspInit+0x88>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002de2:	bf00      	nop
 8002de4:	3728      	adds	r7, #40	; 0x28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40005400 	.word	0x40005400
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40020400 	.word	0x40020400

08002df8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08a      	sub	sp, #40	; 0x28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a19      	ldr	r2, [pc, #100]	; (8002e7c <HAL_SPI_MspInit+0x84>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d12b      	bne.n	8002e72 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <HAL_SPI_MspInit+0x88>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	4a17      	ldr	r2, [pc, #92]	; (8002e80 <HAL_SPI_MspInit+0x88>)
 8002e24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e28:	6453      	str	r3, [r2, #68]	; 0x44
 8002e2a:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <HAL_SPI_MspInit+0x88>)
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <HAL_SPI_MspInit+0x88>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	4a10      	ldr	r2, [pc, #64]	; (8002e80 <HAL_SPI_MspInit+0x88>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6313      	str	r3, [r2, #48]	; 0x30
 8002e46:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <HAL_SPI_MspInit+0x88>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002e52:	23a0      	movs	r3, #160	; 0xa0
 8002e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e56:	2302      	movs	r3, #2
 8002e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e62:	2305      	movs	r3, #5
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e66:	f107 0314 	add.w	r3, r7, #20
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4805      	ldr	r0, [pc, #20]	; (8002e84 <HAL_SPI_MspInit+0x8c>)
 8002e6e:	f001 fa65 	bl	800433c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002e72:	bf00      	nop
 8002e74:	3728      	adds	r7, #40	; 0x28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40013000 	.word	0x40013000
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40020000 	.word	0x40020000

08002e88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e98:	d14c      	bne.n	8002f34 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	4b27      	ldr	r3, [pc, #156]	; (8002f3c <HAL_TIM_Base_MspInit+0xb4>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	4a26      	ldr	r2, [pc, #152]	; (8002f3c <HAL_TIM_Base_MspInit+0xb4>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eaa:	4b24      	ldr	r3, [pc, #144]	; (8002f3c <HAL_TIM_Base_MspInit+0xb4>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 8002eb6:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <HAL_TIM_Base_MspInit+0xb8>)
 8002eb8:	4a22      	ldr	r2, [pc, #136]	; (8002f44 <HAL_TIM_Base_MspInit+0xbc>)
 8002eba:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 8002ebc:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <HAL_TIM_Base_MspInit+0xb8>)
 8002ebe:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002ec2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ec4:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <HAL_TIM_Base_MspInit+0xb8>)
 8002ec6:	2240      	movs	r2, #64	; 0x40
 8002ec8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eca:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <HAL_TIM_Base_MspInit+0xb8>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002ed0:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <HAL_TIM_Base_MspInit+0xb8>)
 8002ed2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ed6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ed8:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <HAL_TIM_Base_MspInit+0xb8>)
 8002eda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ede:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ee0:	4b17      	ldr	r3, [pc, #92]	; (8002f40 <HAL_TIM_Base_MspInit+0xb8>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8002ee6:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <HAL_TIM_Base_MspInit+0xb8>)
 8002ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eec:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002eee:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <HAL_TIM_Base_MspInit+0xb8>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002ef4:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <HAL_TIM_Base_MspInit+0xb8>)
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch2_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <HAL_TIM_Base_MspInit+0xb8>)
 8002efc:	2203      	movs	r2, #3
 8002efe:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch2_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 8002f00:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <HAL_TIM_Base_MspInit+0xb8>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch2_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002f06:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <HAL_TIM_Base_MspInit+0xb8>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8002f0c:	480c      	ldr	r0, [pc, #48]	; (8002f40 <HAL_TIM_Base_MspInit+0xb8>)
 8002f0e:	f000 fe83 	bl	8003c18 <HAL_DMA_Init>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_TIM_Base_MspInit+0x94>
    {
      Error_Handler();
 8002f18:	f7ff fef4 	bl	8002d04 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a08      	ldr	r2, [pc, #32]	; (8002f40 <HAL_TIM_Base_MspInit+0xb8>)
 8002f20:	629a      	str	r2, [r3, #40]	; 0x28
 8002f22:	4a07      	ldr	r2, [pc, #28]	; (8002f40 <HAL_TIM_Base_MspInit+0xb8>)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a05      	ldr	r2, [pc, #20]	; (8002f40 <HAL_TIM_Base_MspInit+0xb8>)
 8002f2c:	631a      	str	r2, [r3, #48]	; 0x30
 8002f2e:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <HAL_TIM_Base_MspInit+0xb8>)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f34:	bf00      	nop
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	200007b0 	.word	0x200007b0
 8002f44:	400260a0 	.word	0x400260a0

08002f48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f50:	f107 030c 	add.w	r3, r7, #12
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f68:	d11d      	bne.n	8002fa6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <HAL_TIM_MspPostInit+0x68>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	4a0f      	ldr	r2, [pc, #60]	; (8002fb0 <HAL_TIM_MspPostInit+0x68>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <HAL_TIM_MspPostInit+0x68>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002f86:	2302      	movs	r3, #2
 8002f88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f92:	2302      	movs	r3, #2
 8002f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f96:	2301      	movs	r3, #1
 8002f98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9a:	f107 030c 	add.w	r3, r7, #12
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4804      	ldr	r0, [pc, #16]	; (8002fb4 <HAL_TIM_MspPostInit+0x6c>)
 8002fa2:	f001 f9cb 	bl	800433c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002fa6:	bf00      	nop
 8002fa8:	3720      	adds	r7, #32
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	40020000 	.word	0x40020000

08002fb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08c      	sub	sp, #48	; 0x30
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	4b2e      	ldr	r3, [pc, #184]	; (8003088 <HAL_InitTick+0xd0>)
 8002fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd0:	4a2d      	ldr	r2, [pc, #180]	; (8003088 <HAL_InitTick+0xd0>)
 8002fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd6:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd8:	4b2b      	ldr	r3, [pc, #172]	; (8003088 <HAL_InitTick+0xd0>)
 8002fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fe4:	f107 020c 	add.w	r2, r7, #12
 8002fe8:	f107 0310 	add.w	r3, r7, #16
 8002fec:	4611      	mov	r1, r2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f004 ffa8 	bl	8007f44 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002ff4:	f004 ff92 	bl	8007f1c <HAL_RCC_GetPCLK2Freq>
 8002ff8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffc:	4a23      	ldr	r2, [pc, #140]	; (800308c <HAL_InitTick+0xd4>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	0c9b      	lsrs	r3, r3, #18
 8003004:	3b01      	subs	r3, #1
 8003006:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8003008:	4b21      	ldr	r3, [pc, #132]	; (8003090 <HAL_InitTick+0xd8>)
 800300a:	4a22      	ldr	r2, [pc, #136]	; (8003094 <HAL_InitTick+0xdc>)
 800300c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800300e:	4b20      	ldr	r3, [pc, #128]	; (8003090 <HAL_InitTick+0xd8>)
 8003010:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003014:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8003016:	4a1e      	ldr	r2, [pc, #120]	; (8003090 <HAL_InitTick+0xd8>)
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 800301c:	4b1c      	ldr	r3, [pc, #112]	; (8003090 <HAL_InitTick+0xd8>)
 800301e:	2200      	movs	r2, #0
 8003020:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003022:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <HAL_InitTick+0xd8>)
 8003024:	2200      	movs	r2, #0
 8003026:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003028:	4b19      	ldr	r3, [pc, #100]	; (8003090 <HAL_InitTick+0xd8>)
 800302a:	2200      	movs	r2, #0
 800302c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 800302e:	4818      	ldr	r0, [pc, #96]	; (8003090 <HAL_InitTick+0xd8>)
 8003030:	f005 f843 	bl	80080ba <HAL_TIM_Base_Init>
 8003034:	4603      	mov	r3, r0
 8003036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800303a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800303e:	2b00      	cmp	r3, #0
 8003040:	d11b      	bne.n	800307a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8003042:	4813      	ldr	r0, [pc, #76]	; (8003090 <HAL_InitTick+0xd8>)
 8003044:	f005 f888 	bl	8008158 <HAL_TIM_Base_Start_IT>
 8003048:	4603      	mov	r3, r0
 800304a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800304e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003052:	2b00      	cmp	r3, #0
 8003054:	d111      	bne.n	800307a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003056:	2018      	movs	r0, #24
 8003058:	f000 fdd0 	bl	8003bfc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b0f      	cmp	r3, #15
 8003060:	d808      	bhi.n	8003074 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8003062:	2200      	movs	r2, #0
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	2018      	movs	r0, #24
 8003068:	f000 fdac 	bl	8003bc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800306c:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <HAL_InitTick+0xe0>)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e002      	b.n	800307a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800307a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800307e:	4618      	mov	r0, r3
 8003080:	3730      	adds	r7, #48	; 0x30
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40023800 	.word	0x40023800
 800308c:	431bde83 	.word	0x431bde83
 8003090:	20000818 	.word	0x20000818
 8003094:	40014000 	.word	0x40014000
 8003098:	2000003c 	.word	0x2000003c

0800309c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030a0:	e7fe      	b.n	80030a0 <NMI_Handler+0x4>

080030a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030a2:	b480      	push	{r7}
 80030a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030a6:	e7fe      	b.n	80030a6 <HardFault_Handler+0x4>

080030a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030ac:	e7fe      	b.n	80030ac <MemManage_Handler+0x4>

080030ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030b2:	e7fe      	b.n	80030b2 <BusFault_Handler+0x4>

080030b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030b8:	e7fe      	b.n	80030b8 <UsageFault_Handler+0x4>

080030ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030ba:	b480      	push	{r7}
 80030bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80030cc:	4802      	ldr	r0, [pc, #8]	; (80030d8 <DMA1_Stream6_IRQHandler+0x10>)
 80030ce:	f000 fecb 	bl	8003e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	200007b0 	.word	0x200007b0

080030dc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80030e0:	4802      	ldr	r0, [pc, #8]	; (80030ec <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80030e2:	f005 f8f4 	bl	80082ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000818 	.word	0x20000818

080030f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT_button_on_Pin);
 80030f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80030f8:	f001 fad6 	bl	80046a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030fc:	bf00      	nop
 80030fe:	bd80      	pop	{r7, pc}

08003100 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003104:	4802      	ldr	r0, [pc, #8]	; (8003110 <OTG_FS_IRQHandler+0x10>)
 8003106:	f003 f998 	bl	800643a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	200067b4 	.word	0x200067b4

08003114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800311c:	4a14      	ldr	r2, [pc, #80]	; (8003170 <_sbrk+0x5c>)
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <_sbrk+0x60>)
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003128:	4b13      	ldr	r3, [pc, #76]	; (8003178 <_sbrk+0x64>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d102      	bne.n	8003136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003130:	4b11      	ldr	r3, [pc, #68]	; (8003178 <_sbrk+0x64>)
 8003132:	4a12      	ldr	r2, [pc, #72]	; (800317c <_sbrk+0x68>)
 8003134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003136:	4b10      	ldr	r3, [pc, #64]	; (8003178 <_sbrk+0x64>)
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	429a      	cmp	r2, r3
 8003142:	d207      	bcs.n	8003154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003144:	f00d fa34 	bl	80105b0 <__errno>
 8003148:	4603      	mov	r3, r0
 800314a:	220c      	movs	r2, #12
 800314c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800314e:	f04f 33ff 	mov.w	r3, #4294967295
 8003152:	e009      	b.n	8003168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003154:	4b08      	ldr	r3, [pc, #32]	; (8003178 <_sbrk+0x64>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800315a:	4b07      	ldr	r3, [pc, #28]	; (8003178 <_sbrk+0x64>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4413      	add	r3, r2
 8003162:	4a05      	ldr	r2, [pc, #20]	; (8003178 <_sbrk+0x64>)
 8003164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003166:	68fb      	ldr	r3, [r7, #12]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20020000 	.word	0x20020000
 8003174:	00004000 	.word	0x00004000
 8003178:	20000860 	.word	0x20000860
 800317c:	20006ef0 	.word	0x20006ef0

08003180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003184:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <SystemInit+0x20>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318a:	4a05      	ldr	r2, [pc, #20]	; (80031a0 <SystemInit+0x20>)
 800318c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	e000ed00 	.word	0xe000ed00

080031a4 <StartLedControlTask>:
#define MAX_LED 7

//сложная фигня получается функции говорится сколько светодиодов горит и с какой яркостью горит последний остальные обнуляем


void StartLedControlTask(void *argument){
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
	uint8_t red,green,blue;
	  uint8_t old_data;
	  uint8_t numOnLed;
	  ARGB_Init();  // Initialization
 80031ac:	f7fe faf4 	bl	8001798 <ARGB_Init>
	  ARGB_Clear();
 80031b0:	f7fe fb6a 	bl	8001888 <ARGB_Clear>
	  while (ARGB_Show() != ARGB_OK);
 80031b4:	bf00      	nop
 80031b6:	f7fe fc15 	bl	80019e4 <ARGB_Show>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d1fa      	bne.n	80031b6 <StartLedControlTask+0x12>
	  ARGB_SetBrightness(100);
 80031c0:	2064      	movs	r0, #100	; 0x64
 80031c2:	f7fe fb6b 	bl	800189c <ARGB_SetBrightness>
	  ARGB_Clear(); // Clear stirp
 80031c6:	f7fe fb5f 	bl	8001888 <ARGB_Clear>
		ARGB_SetRGB(2, 50, 0, 0); // Set LED №2 with 255 Green
		ARGB_SetRGB(3, 0, 0, 50); // Set LED №3 with 255 Green
	  while (ARGB_Show() != ARGB_OK);
*/
	for(;;){
		HAL_Delay(50);
 80031ca:	2032      	movs	r0, #50	; 0x32
 80031cc:	f000 fc1e 	bl	8003a0c <HAL_Delay>
		// todo  сделать хорошо
		// если значение цвета изменилось то
		//определить сколько стало и попытаться зажечь нужноче число диодов
		if(global_color != old_data){
 80031d0:	4b39      	ldr	r3, [pc, #228]	; (80032b8 <StartLedControlTask+0x114>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	7b3a      	ldrb	r2, [r7, #12]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d0f7      	beq.n	80031ca <StartLedControlTask+0x26>
			old_data = global_color;
 80031da:	4b37      	ldr	r3, [pc, #220]	; (80032b8 <StartLedControlTask+0x114>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	733b      	strb	r3, [r7, #12]
			if(old_data > 80)
 80031e0:	7b3b      	ldrb	r3, [r7, #12]
 80031e2:	2b50      	cmp	r3, #80	; 0x50
 80031e4:	d902      	bls.n	80031ec <StartLedControlTask+0x48>
				red = 80;
 80031e6:	2350      	movs	r3, #80	; 0x50
 80031e8:	73fb      	strb	r3, [r7, #15]
 80031ea:	e001      	b.n	80031f0 <StartLedControlTask+0x4c>
			else
				red = old_data;
 80031ec:	7b3b      	ldrb	r3, [r7, #12]
 80031ee:	73fb      	strb	r3, [r7, #15]
			if(old_data > 160)
 80031f0:	7b3b      	ldrb	r3, [r7, #12]
 80031f2:	2ba0      	cmp	r3, #160	; 0xa0
 80031f4:	d902      	bls.n	80031fc <StartLedControlTask+0x58>
				green = 80;
 80031f6:	2350      	movs	r3, #80	; 0x50
 80031f8:	73bb      	strb	r3, [r7, #14]
 80031fa:	e005      	b.n	8003208 <StartLedControlTask+0x64>
			else if(old_data > 80)
 80031fc:	7b3b      	ldrb	r3, [r7, #12]
 80031fe:	2b50      	cmp	r3, #80	; 0x50
 8003200:	d902      	bls.n	8003208 <StartLedControlTask+0x64>
				green = old_data - 80;
 8003202:	7b3b      	ldrb	r3, [r7, #12]
 8003204:	3b50      	subs	r3, #80	; 0x50
 8003206:	73bb      	strb	r3, [r7, #14]
			if(old_data >= 239)
 8003208:	7b3b      	ldrb	r3, [r7, #12]
 800320a:	2bee      	cmp	r3, #238	; 0xee
 800320c:	d902      	bls.n	8003214 <StartLedControlTask+0x70>
				blue = 80;
 800320e:	2350      	movs	r3, #80	; 0x50
 8003210:	737b      	strb	r3, [r7, #13]
 8003212:	e005      	b.n	8003220 <StartLedControlTask+0x7c>
			else if(old_data > 160)
 8003214:	7b3b      	ldrb	r3, [r7, #12]
 8003216:	2ba0      	cmp	r3, #160	; 0xa0
 8003218:	d902      	bls.n	8003220 <StartLedControlTask+0x7c>
				blue = old_data - 160;
 800321a:	7b3b      	ldrb	r3, [r7, #12]
 800321c:	3360      	adds	r3, #96	; 0x60
 800321e:	737b      	strb	r3, [r7, #13]
			if(red > 0)
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d013      	beq.n	800324e <StartLedControlTask+0xaa>
				setRedLed(red/10, red%10);
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	4a24      	ldr	r2, [pc, #144]	; (80032bc <StartLedControlTask+0x118>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	08db      	lsrs	r3, r3, #3
 8003230:	b2d8      	uxtb	r0, r3
 8003232:	7bfa      	ldrb	r2, [r7, #15]
 8003234:	4b21      	ldr	r3, [pc, #132]	; (80032bc <StartLedControlTask+0x118>)
 8003236:	fba3 1302 	umull	r1, r3, r3, r2
 800323a:	08d9      	lsrs	r1, r3, #3
 800323c:	460b      	mov	r3, r1
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	b2db      	uxtb	r3, r3
 8003248:	4619      	mov	r1, r3
 800324a:	f000 f839 	bl	80032c0 <setRedLed>
			if(green > 0)
 800324e:	7bbb      	ldrb	r3, [r7, #14]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d013      	beq.n	800327c <StartLedControlTask+0xd8>
				setGreenLed(green/10, green%10);
 8003254:	7bbb      	ldrb	r3, [r7, #14]
 8003256:	4a19      	ldr	r2, [pc, #100]	; (80032bc <StartLedControlTask+0x118>)
 8003258:	fba2 2303 	umull	r2, r3, r2, r3
 800325c:	08db      	lsrs	r3, r3, #3
 800325e:	b2d8      	uxtb	r0, r3
 8003260:	7bba      	ldrb	r2, [r7, #14]
 8003262:	4b16      	ldr	r3, [pc, #88]	; (80032bc <StartLedControlTask+0x118>)
 8003264:	fba3 1302 	umull	r1, r3, r3, r2
 8003268:	08d9      	lsrs	r1, r3, #3
 800326a:	460b      	mov	r3, r1
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	b2db      	uxtb	r3, r3
 8003276:	4619      	mov	r1, r3
 8003278:	f000 f86b 	bl	8003352 <setGreenLed>
			if(blue > 0)
 800327c:	7b7b      	ldrb	r3, [r7, #13]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d013      	beq.n	80032aa <StartLedControlTask+0x106>
				setBlueLed(blue/10, blue%10);
 8003282:	7b7b      	ldrb	r3, [r7, #13]
 8003284:	4a0d      	ldr	r2, [pc, #52]	; (80032bc <StartLedControlTask+0x118>)
 8003286:	fba2 2303 	umull	r2, r3, r2, r3
 800328a:	08db      	lsrs	r3, r3, #3
 800328c:	b2d8      	uxtb	r0, r3
 800328e:	7b7a      	ldrb	r2, [r7, #13]
 8003290:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <StartLedControlTask+0x118>)
 8003292:	fba3 1302 	umull	r1, r3, r3, r2
 8003296:	08d9      	lsrs	r1, r3, #3
 8003298:	460b      	mov	r3, r1
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	4619      	mov	r1, r3
 80032a6:	f000 f898 	bl	80033da <setBlueLed>
			while (ARGB_Show() != ARGB_OK);
 80032aa:	bf00      	nop
 80032ac:	f7fe fb9a 	bl	80019e4 <ARGB_Show>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d1fa      	bne.n	80032ac <StartLedControlTask+0x108>
		HAL_Delay(50);
 80032b6:	e788      	b.n	80031ca <StartLedControlTask+0x26>
 80032b8:	200006b9 	.word	0x200006b9
 80032bc:	cccccccd 	.word	0xcccccccd

080032c0 <setRedLed>:

	}
}


static void setRedLed(uint8_t num, uint8_t last){
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	460a      	mov	r2, r1
 80032ca:	71fb      	strb	r3, [r7, #7]
 80032cc:	4613      	mov	r3, r2
 80032ce:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	if(num > MAX_LED)
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	2b07      	cmp	r3, #7
 80032d4:	d901      	bls.n	80032da <setRedLed+0x1a>
		num = MAX_LED;
 80032d6:	2307      	movs	r3, #7
 80032d8:	71fb      	strb	r3, [r7, #7]
	for(i = 0; i < num; i++){
 80032da:	2300      	movs	r3, #0
 80032dc:	73fb      	strb	r3, [r7, #15]
 80032de:	e009      	b.n	80032f4 <setRedLed+0x34>
		ARGB_SetRGB(i, 255, 0, 0);
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	b298      	uxth	r0, r3
 80032e4:	2300      	movs	r3, #0
 80032e6:	2200      	movs	r2, #0
 80032e8:	21ff      	movs	r1, #255	; 0xff
 80032ea:	f7fe fae7 	bl	80018bc <ARGB_SetRGB>
	for(i = 0; i < num; i++){
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	3301      	adds	r3, #1
 80032f2:	73fb      	strb	r3, [r7, #15]
 80032f4:	7bfa      	ldrb	r2, [r7, #15]
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d3f1      	bcc.n	80032e0 <setRedLed+0x20>
	}
	if(i < (MAX_LED)){
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	2b06      	cmp	r3, #6
 8003300:	d812      	bhi.n	8003328 <setRedLed+0x68>
		i++;
 8003302:	7bfb      	ldrb	r3, [r7, #15]
 8003304:	3301      	adds	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
		ARGB_SetRGB(i, 25*last, 0, 0);
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	b298      	uxth	r0, r3
 800330c:	79bb      	ldrb	r3, [r7, #6]
 800330e:	461a      	mov	r2, r3
 8003310:	0092      	lsls	r2, r2, #2
 8003312:	4413      	add	r3, r2
 8003314:	461a      	mov	r2, r3
 8003316:	0091      	lsls	r1, r2, #2
 8003318:	461a      	mov	r2, r3
 800331a:	460b      	mov	r3, r1
 800331c:	4413      	add	r3, r2
 800331e:	b2d9      	uxtb	r1, r3
 8003320:	2300      	movs	r3, #0
 8003322:	2200      	movs	r2, #0
 8003324:	f7fe faca 	bl	80018bc <ARGB_SetRGB>
	}
	if(i < (MAX_LED)){
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	2b06      	cmp	r3, #6
 800332c:	d80d      	bhi.n	800334a <setRedLed+0x8a>
		while(i < (MAX_LED)){
 800332e:	e009      	b.n	8003344 <setRedLed+0x84>
			ARGB_SetRGB(i, 0, 0, 0);
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	b298      	uxth	r0, r3
 8003334:	2300      	movs	r3, #0
 8003336:	2200      	movs	r2, #0
 8003338:	2100      	movs	r1, #0
 800333a:	f7fe fabf 	bl	80018bc <ARGB_SetRGB>
			i++;
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	3301      	adds	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
		while(i < (MAX_LED)){
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	2b06      	cmp	r3, #6
 8003348:	d9f2      	bls.n	8003330 <setRedLed+0x70>
		}
	}
}
 800334a:	bf00      	nop
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <setGreenLed>:

static void setGreenLed(uint8_t num, uint8_t last){
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	4603      	mov	r3, r0
 800335a:	460a      	mov	r2, r1
 800335c:	71fb      	strb	r3, [r7, #7]
 800335e:	4613      	mov	r3, r2
 8003360:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	for(i = 0; i < num; i++){
 8003362:	2300      	movs	r3, #0
 8003364:	73fb      	strb	r3, [r7, #15]
 8003366:	e009      	b.n	800337c <setGreenLed+0x2a>
		ARGB_SetRGB(i, 0, 250, 0);
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	b298      	uxth	r0, r3
 800336c:	2300      	movs	r3, #0
 800336e:	22fa      	movs	r2, #250	; 0xfa
 8003370:	2100      	movs	r1, #0
 8003372:	f7fe faa3 	bl	80018bc <ARGB_SetRGB>
	for(i = 0; i < num; i++){
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	3301      	adds	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
 800337c:	7bfa      	ldrb	r2, [r7, #15]
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	429a      	cmp	r2, r3
 8003382:	d3f1      	bcc.n	8003368 <setGreenLed+0x16>
	}
	if(i < (MAX_LED)){
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	2b06      	cmp	r3, #6
 8003388:	d812      	bhi.n	80033b0 <setGreenLed+0x5e>
		i++;
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	3301      	adds	r3, #1
 800338e:	73fb      	strb	r3, [r7, #15]
		ARGB_SetRGB(i, 0, 25*last, 0);
 8003390:	7bfb      	ldrb	r3, [r7, #15]
 8003392:	b298      	uxth	r0, r3
 8003394:	79bb      	ldrb	r3, [r7, #6]
 8003396:	461a      	mov	r2, r3
 8003398:	0092      	lsls	r2, r2, #2
 800339a:	4413      	add	r3, r2
 800339c:	461a      	mov	r2, r3
 800339e:	0091      	lsls	r1, r2, #2
 80033a0:	461a      	mov	r2, r3
 80033a2:	460b      	mov	r3, r1
 80033a4:	4413      	add	r3, r2
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	2300      	movs	r3, #0
 80033aa:	2100      	movs	r1, #0
 80033ac:	f7fe fa86 	bl	80018bc <ARGB_SetRGB>
	}
	if(i < (MAX_LED)){
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	2b06      	cmp	r3, #6
 80033b4:	d80d      	bhi.n	80033d2 <setGreenLed+0x80>
		while(i < (MAX_LED)){
 80033b6:	e009      	b.n	80033cc <setGreenLed+0x7a>
			ARGB_SetRGB(i, 0, 0, 0);
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	b298      	uxth	r0, r3
 80033bc:	2300      	movs	r3, #0
 80033be:	2200      	movs	r2, #0
 80033c0:	2100      	movs	r1, #0
 80033c2:	f7fe fa7b 	bl	80018bc <ARGB_SetRGB>
			i++;
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
 80033c8:	3301      	adds	r3, #1
 80033ca:	73fb      	strb	r3, [r7, #15]
		while(i < (MAX_LED)){
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	2b06      	cmp	r3, #6
 80033d0:	d9f2      	bls.n	80033b8 <setGreenLed+0x66>
		}
	}
}
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <setBlueLed>:

static void setBlueLed(uint8_t num, uint8_t last){
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	4603      	mov	r3, r0
 80033e2:	460a      	mov	r2, r1
 80033e4:	71fb      	strb	r3, [r7, #7]
 80033e6:	4613      	mov	r3, r2
 80033e8:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	for(i = 0; i < num; i++){
 80033ea:	2300      	movs	r3, #0
 80033ec:	73fb      	strb	r3, [r7, #15]
 80033ee:	e009      	b.n	8003404 <setBlueLed+0x2a>
		ARGB_SetRGB(i, 0, 0, 250);
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	b298      	uxth	r0, r3
 80033f4:	23fa      	movs	r3, #250	; 0xfa
 80033f6:	2200      	movs	r2, #0
 80033f8:	2100      	movs	r1, #0
 80033fa:	f7fe fa5f 	bl	80018bc <ARGB_SetRGB>
	for(i = 0; i < num; i++){
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	3301      	adds	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
 8003404:	7bfa      	ldrb	r2, [r7, #15]
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	429a      	cmp	r2, r3
 800340a:	d3f1      	bcc.n	80033f0 <setBlueLed+0x16>
	}
	if(i < (MAX_LED)){
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	2b06      	cmp	r3, #6
 8003410:	d812      	bhi.n	8003438 <setBlueLed+0x5e>
		i++;
 8003412:	7bfb      	ldrb	r3, [r7, #15]
 8003414:	3301      	adds	r3, #1
 8003416:	73fb      	strb	r3, [r7, #15]
		ARGB_SetRGB(i, 0, 0, 25*last);
 8003418:	7bfb      	ldrb	r3, [r7, #15]
 800341a:	b298      	uxth	r0, r3
 800341c:	79bb      	ldrb	r3, [r7, #6]
 800341e:	461a      	mov	r2, r3
 8003420:	0092      	lsls	r2, r2, #2
 8003422:	4413      	add	r3, r2
 8003424:	461a      	mov	r2, r3
 8003426:	0091      	lsls	r1, r2, #2
 8003428:	461a      	mov	r2, r3
 800342a:	460b      	mov	r3, r1
 800342c:	4413      	add	r3, r2
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2200      	movs	r2, #0
 8003432:	2100      	movs	r1, #0
 8003434:	f7fe fa42 	bl	80018bc <ARGB_SetRGB>
	}
	if(i < (MAX_LED)){
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	2b06      	cmp	r3, #6
 800343c:	d80d      	bhi.n	800345a <setBlueLed+0x80>
		while(i < (MAX_LED)){
 800343e:	e009      	b.n	8003454 <setBlueLed+0x7a>
			ARGB_SetRGB(i, 0, 0, 0);
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	b298      	uxth	r0, r3
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	2100      	movs	r1, #0
 800344a:	f7fe fa37 	bl	80018bc <ARGB_SetRGB>
			i++;
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	3301      	adds	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
		while(i < (MAX_LED)){
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	2b06      	cmp	r3, #6
 8003458:	d9f2      	bls.n	8003440 <setBlueLed+0x66>
		}
	}
}
 800345a:	bf00      	nop
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <StartOledMenuTask>:

#include "tasks/OledMenu.h"

void StartOledMenuTask(void *argument){
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]

	while(buttonEn() != ON){
 800346a:	e002      	b.n	8003472 <StartOledMenuTask+0x10>
		osDelay(50);
 800346c:	2032      	movs	r0, #50	; 0x32
 800346e:	f009 fabf 	bl	800c9f0 <osDelay>
	while(buttonEn() != ON){
 8003472:	f7fe ff8b 	bl	800238c <buttonEn>
 8003476:	4603      	mov	r3, r0
 8003478:	2b01      	cmp	r3, #1
 800347a:	d1f7      	bne.n	800346c <StartOledMenuTask+0xa>
	}
	buttonEnReset();
 800347c:	f7fe ff9e 	bl	80023bc <buttonEnReset>
	for(;;){
		osDelay(50);
 8003480:	2032      	movs	r0, #50	; 0x32
 8003482:	f009 fab5 	bl	800c9f0 <osDelay>
		if(buttonEn() == ON){
 8003486:	f7fe ff81 	bl	800238c <buttonEn>
 800348a:	4603      	mov	r3, r0
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <StartOledMenuTask+0x32>
			drawMainMenu();
 8003490:	f7fe fe8a 	bl	80021a8 <drawMainMenu>
		}
		startDisplay();
 8003494:	f7ff f81a 	bl	80024cc <startDisplay>
		udpateDisplay();
 8003498:	f7fe ff4e 	bl	8002338 <udpateDisplay>
		osDelay(50);
 800349c:	e7f0      	b.n	8003480 <StartOledMenuTask+0x1e>
	...

080034a0 <aver_mass>:
osStatus_t statusMutexI2C;
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);
uint8_t command_CMD[10] = {0};
int16_t data_ch[4][10] = {0};
extern uint16_t global_DAC;
uint8_t aver_mass(int16_t* data){
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	uint16_t temp = 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < 9; i++)
 80034ac:	2300      	movs	r3, #0
 80034ae:	737b      	strb	r3, [r7, #13]
 80034b0:	e00c      	b.n	80034cc <aver_mass+0x2c>
		temp += data[i];
 80034b2:	7b7b      	ldrb	r3, [r7, #13]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	4413      	add	r3, r2
 80034ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034be:	b29a      	uxth	r2, r3
 80034c0:	89fb      	ldrh	r3, [r7, #14]
 80034c2:	4413      	add	r3, r2
 80034c4:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < 9; i++)
 80034c6:	7b7b      	ldrb	r3, [r7, #13]
 80034c8:	3301      	adds	r3, #1
 80034ca:	737b      	strb	r3, [r7, #13]
 80034cc:	7b7b      	ldrb	r3, [r7, #13]
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d9ef      	bls.n	80034b2 <aver_mass+0x12>
	temp /= 10;
 80034d2:	89fb      	ldrh	r3, [r7, #14]
 80034d4:	4a07      	ldr	r2, [pc, #28]	; (80034f4 <aver_mass+0x54>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	08db      	lsrs	r3, r3, #3
 80034dc:	81fb      	strh	r3, [r7, #14]
	temp /= 8;
 80034de:	89fb      	ldrh	r3, [r7, #14]
 80034e0:	08db      	lsrs	r3, r3, #3
 80034e2:	81fb      	strh	r3, [r7, #14]
	return (uint8_t)temp;
 80034e4:	89fb      	ldrh	r3, [r7, #14]
 80034e6:	b2db      	uxtb	r3, r3
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	cccccccd 	.word	0xcccccccd

080034f8 <StartSensOutTask>:
// Задача для опросо кнопок ADC и энкодера и система команд от usb
void StartSensOutTask(void *argument){
 80034f8:	b5b0      	push	{r4, r5, r7, lr}
 80034fa:	b08a      	sub	sp, #40	; 0x28
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	6078      	str	r0, [r7, #4]
	uint8_t currentChanel = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	77fb      	strb	r3, [r7, #31]
	initAllChanelADC(); // todo сделать новую задачу для ацп
 8003504:	f000 f982 	bl	800380c <initAllChanelADC>
    pADS = ADS1115_init(&hi2c1, ADS1115_ADR, configChanel[currentChanel]);
 8003508:	7ffb      	ldrb	r3, [r7, #31]
 800350a:	4a77      	ldr	r2, [pc, #476]	; (80036e8 <StartSensOutTask+0x1f0>)
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4413      	add	r3, r2
 8003510:	cb0c      	ldmia	r3, {r2, r3}
 8003512:	2148      	movs	r1, #72	; 0x48
 8003514:	4875      	ldr	r0, [pc, #468]	; (80036ec <StartSensOutTask+0x1f4>)
 8003516:	f7fd fbd3 	bl	8000cc0 <ADS1115_init>
 800351a:	4603      	mov	r3, r0
 800351c:	4a74      	ldr	r2, [pc, #464]	; (80036f0 <StartSensOutTask+0x1f8>)
 800351e:	6013      	str	r3, [r2, #0]
    ADS1115_updateConfig(pADS, configChanel[currentChanel]);
 8003520:	4b73      	ldr	r3, [pc, #460]	; (80036f0 <StartSensOutTask+0x1f8>)
 8003522:	6818      	ldr	r0, [r3, #0]
 8003524:	7ffb      	ldrb	r3, [r7, #31]
 8003526:	4a70      	ldr	r2, [pc, #448]	; (80036e8 <StartSensOutTask+0x1f0>)
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4413      	add	r3, r2
 800352c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003530:	f7fd fbe6 	bl	8000d00 <ADS1115_updateConfig>
    ADS1115_startContinousMode(pADS);
 8003534:	4b6e      	ldr	r3, [pc, #440]	; (80036f0 <StartSensOutTask+0x1f8>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f7fd fc47 	bl	8000dcc <ADS1115_startContinousMode>
    uint8_t buffer[] = {0};
 800353e:	2300      	movs	r3, #0
 8003540:	773b      	strb	r3, [r7, #28]
    MCP4725 myMCP4725 = MCP4725_init(&hi2c1, MCP4725A0_ADDR_A00, 3.30);
 8003542:	f107 030c 	add.w	r3, r7, #12
 8003546:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 80036f4 <StartSensOutTask+0x1fc>
 800354a:	2260      	movs	r2, #96	; 0x60
 800354c:	4967      	ldr	r1, [pc, #412]	; (80036ec <StartSensOutTask+0x1f4>)
 800354e:	4618      	mov	r0, r3
 8003550:	f7fd fcc2 	bl	8000ed8 <MCP4725_init>
    global_DAC = 1244;// это вроде 1 вольт
 8003554:	4b68      	ldr	r3, [pc, #416]	; (80036f8 <StartSensOutTask+0x200>)
 8003556:	f240 42dc 	movw	r2, #1244	; 0x4dc
 800355a:	801a      	strh	r2, [r3, #0]
    setDAC(myMCP4725,  global_DAC);
 800355c:	4b66      	ldr	r3, [pc, #408]	; (80036f8 <StartSensOutTask+0x200>)
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	f107 030c 	add.w	r3, r7, #12
 8003566:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003568:	f000 f9a6 	bl	80038b8 <setDAC>

	for(;;){
		if(command_CMD[0] != 0){ // Самоя простая система команда из палок и прочего
 800356c:	4b63      	ldr	r3, [pc, #396]	; (80036fc <StartSensOutTask+0x204>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d042      	beq.n	80035fa <StartSensOutTask+0x102>
			switch(command_CMD[0] - 48){
 8003574:	4b61      	ldr	r3, [pc, #388]	; (80036fc <StartSensOutTask+0x204>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	3b30      	subs	r3, #48	; 0x30
 800357a:	3b01      	subs	r3, #1
 800357c:	2b03      	cmp	r3, #3
 800357e:	d817      	bhi.n	80035b0 <StartSensOutTask+0xb8>
 8003580:	a201      	add	r2, pc, #4	; (adr r2, 8003588 <StartSensOutTask+0x90>)
 8003582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003586:	bf00      	nop
 8003588:	08003599 	.word	0x08003599
 800358c:	0800359f 	.word	0x0800359f
 8003590:	080035a5 	.word	0x080035a5
 8003594:	080035ab 	.word	0x080035ab
				case 1: buttonEnSet();    break;
 8003598:	f7fe ff04 	bl	80023a4 <buttonEnSet>
 800359c:	e008      	b.n	80035b0 <StartSensOutTask+0xb8>
				case 2: buttonLongSet();  break;
 800359e:	f7fe ff4d 	bl	800243c <buttonLongSet>
 80035a2:	e005      	b.n	80035b0 <StartSensOutTask+0xb8>
				case 3: encoderSetUp();   break;
 80035a4:	f7fe ff6e 	bl	8002484 <encoderSetUp>
 80035a8:	e002      	b.n	80035b0 <StartSensOutTask+0xb8>
				case 4: encoderSetDown(); break;
 80035aa:	f7fe ff77 	bl	800249c <encoderSetDown>
 80035ae:	bf00      	nop
			}
			buffer[0] = command_CMD[0];
 80035b0:	4b52      	ldr	r3, [pc, #328]	; (80036fc <StartSensOutTask+0x204>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	773b      	strb	r3, [r7, #28]
			buffer[1] = aver_mass(data_ch[0]);
 80035b6:	4852      	ldr	r0, [pc, #328]	; (8003700 <StartSensOutTask+0x208>)
 80035b8:	f7ff ff72 	bl	80034a0 <aver_mass>
 80035bc:	4603      	mov	r3, r0
 80035be:	777b      	strb	r3, [r7, #29]
			buffer[2] = aver_mass(data_ch[1]);
 80035c0:	4850      	ldr	r0, [pc, #320]	; (8003704 <StartSensOutTask+0x20c>)
 80035c2:	f7ff ff6d 	bl	80034a0 <aver_mass>
 80035c6:	4603      	mov	r3, r0
 80035c8:	77bb      	strb	r3, [r7, #30]
			buffer[3] = aver_mass(data_ch[2]);
 80035ca:	484f      	ldr	r0, [pc, #316]	; (8003708 <StartSensOutTask+0x210>)
 80035cc:	f7ff ff68 	bl	80034a0 <aver_mass>
 80035d0:	4603      	mov	r3, r0
 80035d2:	77fb      	strb	r3, [r7, #31]
			buffer[4] = aver_mass(data_ch[3]);
 80035d4:	484d      	ldr	r0, [pc, #308]	; (800370c <StartSensOutTask+0x214>)
 80035d6:	f7ff ff63 	bl	80034a0 <aver_mass>
 80035da:	4603      	mov	r3, r0
 80035dc:	f887 3020 	strb.w	r3, [r7, #32]
			buffer[5] = (int16_t)"\n";
 80035e0:	4b4b      	ldr	r3, [pc, #300]	; (8003710 <StartSensOutTask+0x218>)
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			command_CMD[0] = 0;
 80035e8:	4b44      	ldr	r3, [pc, #272]	; (80036fc <StartSensOutTask+0x204>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	701a      	strb	r2, [r3, #0]
			CDC_Transmit_FS(buffer, sizeof(buffer));
 80035ee:	f107 031c 	add.w	r3, r7, #28
 80035f2:	2101      	movs	r1, #1
 80035f4:	4618      	mov	r0, r3
 80035f6:	f00c fb89 	bl	800fd0c <CDC_Transmit_FS>
		}
		// Попытка захвата мьютекса с таймаутом 1000 мс
		statusMutexI2C = osMutexAcquire(BlockI2CHandle, 1000);
 80035fa:	4b46      	ldr	r3, [pc, #280]	; (8003714 <StartSensOutTask+0x21c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003602:	4618      	mov	r0, r3
 8003604:	f009 fa95 	bl	800cb32 <osMutexAcquire>
 8003608:	4603      	mov	r3, r0
 800360a:	4a43      	ldr	r2, [pc, #268]	; (8003718 <StartSensOutTask+0x220>)
 800360c:	6013      	str	r3, [r2, #0]
		if(statusMutexI2C == osOK){
 800360e:	4b42      	ldr	r3, [pc, #264]	; (8003718 <StartSensOutTask+0x220>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10b      	bne.n	800362e <StartSensOutTask+0x136>
			calcDeltaAngle((int16_t)getEncoderData()); // Расчитываем смещение энкодера
 8003616:	f000 f8db 	bl	80037d0 <getEncoderData>
 800361a:	4603      	mov	r3, r0
 800361c:	b21b      	sxth	r3, r3
 800361e:	4618      	mov	r0, r3
 8003620:	f000 f87c 	bl	800371c <calcDeltaAngle>
			osMutexRelease(BlockI2CHandle);// Освобождение мьютекса
 8003624:	4b3b      	ldr	r3, [pc, #236]	; (8003714 <StartSensOutTask+0x21c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f009 facd 	bl	800cbc8 <osMutexRelease>
		}
		for(uint8_t i = 0; i < 10;){ // Читаем с ацп порта 10 значений
 800362e:	2300      	movs	r3, #0
 8003630:	77bb      	strb	r3, [r7, #30]
 8003632:	e025      	b.n	8003680 <StartSensOutTask+0x188>
			if(osMutexAcquire(BlockI2CHandle, 1000) == osOK){
 8003634:	4b37      	ldr	r3, [pc, #220]	; (8003714 <StartSensOutTask+0x21c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800363c:	4618      	mov	r0, r3
 800363e:	f009 fa78 	bl	800cb32 <osMutexAcquire>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d11b      	bne.n	8003680 <StartSensOutTask+0x188>
				data_ch[currentChanel][i] = ADS1115_getData(pADS);
 8003648:	4b29      	ldr	r3, [pc, #164]	; (80036f0 <StartSensOutTask+0x1f8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	7ffc      	ldrb	r4, [r7, #31]
 800364e:	7fbd      	ldrb	r5, [r7, #30]
 8003650:	4618      	mov	r0, r3
 8003652:	f7fd fb87 	bl	8000d64 <ADS1115_getData>
 8003656:	4603      	mov	r3, r0
 8003658:	4619      	mov	r1, r3
 800365a:	4a29      	ldr	r2, [pc, #164]	; (8003700 <StartSensOutTask+0x208>)
 800365c:	4623      	mov	r3, r4
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4423      	add	r3, r4
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	442b      	add	r3, r5
 8003666:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				osMutexRelease(BlockI2CHandle);// Освобождение мьютекса
 800366a:	4b2a      	ldr	r3, [pc, #168]	; (8003714 <StartSensOutTask+0x21c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f009 faaa 	bl	800cbc8 <osMutexRelease>
				osDelay(6);
 8003674:	2006      	movs	r0, #6
 8003676:	f009 f9bb 	bl	800c9f0 <osDelay>
				i++;
 800367a:	7fbb      	ldrb	r3, [r7, #30]
 800367c:	3301      	adds	r3, #1
 800367e:	77bb      	strb	r3, [r7, #30]
		for(uint8_t i = 0; i < 10;){ // Читаем с ацп порта 10 значений
 8003680:	7fbb      	ldrb	r3, [r7, #30]
 8003682:	2b09      	cmp	r3, #9
 8003684:	d9d6      	bls.n	8003634 <StartSensOutTask+0x13c>
			}
		 }
				// меняем канал после завершения цикла
				currentChanel++;
 8003686:	7ffb      	ldrb	r3, [r7, #31]
 8003688:	3301      	adds	r3, #1
 800368a:	77fb      	strb	r3, [r7, #31]
				if(currentChanel > 3)
 800368c:	7ffb      	ldrb	r3, [r7, #31]
 800368e:	2b03      	cmp	r3, #3
 8003690:	d901      	bls.n	8003696 <StartSensOutTask+0x19e>
					currentChanel = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	77fb      	strb	r3, [r7, #31]
				while(osMutexAcquire(BlockI2CHandle, 1000) != osOK){};
 8003696:	bf00      	nop
 8003698:	4b1e      	ldr	r3, [pc, #120]	; (8003714 <StartSensOutTask+0x21c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80036a0:	4618      	mov	r0, r3
 80036a2:	f009 fa46 	bl	800cb32 <osMutexAcquire>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f5      	bne.n	8003698 <StartSensOutTask+0x1a0>
					ADS1115_updateConfig(pADS, configChanel[currentChanel]);
 80036ac:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <StartSensOutTask+0x1f8>)
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	7ffb      	ldrb	r3, [r7, #31]
 80036b2:	4a0d      	ldr	r2, [pc, #52]	; (80036e8 <StartSensOutTask+0x1f0>)
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	4413      	add	r3, r2
 80036b8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80036bc:	f7fd fb20 	bl	8000d00 <ADS1115_updateConfig>
					osMutexRelease(BlockI2CHandle);// Освобождение мьютекса
 80036c0:	4b14      	ldr	r3, [pc, #80]	; (8003714 <StartSensOutTask+0x21c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f009 fa7f 	bl	800cbc8 <osMutexRelease>
					osDelay(10);
 80036ca:	200a      	movs	r0, #10
 80036cc:	f009 f990 	bl	800c9f0 <osDelay>
		setDAC(myMCP4725,  global_DAC);
 80036d0:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <StartSensOutTask+0x200>)
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	f107 030c 	add.w	r3, r7, #12
 80036da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036dc:	f000 f8ec 	bl	80038b8 <setDAC>
		longButton();
 80036e0:	f000 f854 	bl	800378c <longButton>
		if(command_CMD[0] != 0){ // Самоя простая система команда из палок и прочего
 80036e4:	e742      	b.n	800356c <StartSensOutTask+0x74>
 80036e6:	bf00      	nop
 80036e8:	2000086c 	.word	0x2000086c
 80036ec:	200006bc 	.word	0x200006bc
 80036f0:	2000088c 	.word	0x2000088c
 80036f4:	40533333 	.word	0x40533333
 80036f8:	200006ba 	.word	0x200006ba
 80036fc:	20000894 	.word	0x20000894
 8003700:	200008a0 	.word	0x200008a0
 8003704:	200008b4 	.word	0x200008b4
 8003708:	200008c8 	.word	0x200008c8
 800370c:	200008dc 	.word	0x200008dc
 8003710:	08010bc0 	.word	0x08010bc0
 8003714:	20000814 	.word	0x20000814
 8003718:	20000890 	.word	0x20000890

0800371c <calcDeltaAngle>:
		//osDelay(50);
	}
}

void calcDeltaAngle(int16_t current_encoder_data){
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	80fb      	strh	r3, [r7, #6]
	delta_encoder = current_encoder_data - old_encoder_data;
 8003726:	88fa      	ldrh	r2, [r7, #6]
 8003728:	4b16      	ldr	r3, [pc, #88]	; (8003784 <calcDeltaAngle+0x68>)
 800372a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800372e:	b29b      	uxth	r3, r3
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	b29b      	uxth	r3, r3
 8003734:	b21a      	sxth	r2, r3
 8003736:	4b14      	ldr	r3, [pc, #80]	; (8003788 <calcDeltaAngle+0x6c>)
 8003738:	801a      	strh	r2, [r3, #0]
	old_encoder_data = current_encoder_data;
 800373a:	4a12      	ldr	r2, [pc, #72]	; (8003784 <calcDeltaAngle+0x68>)
 800373c:	88fb      	ldrh	r3, [r7, #6]
 800373e:	8013      	strh	r3, [r2, #0]
	if(delta_encoder > MAX_ANGLE || delta_encoder < (-1)*MAX_ANGLE){
 8003740:	4b11      	ldr	r3, [pc, #68]	; (8003788 <calcDeltaAngle+0x6c>)
 8003742:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003746:	2bb4      	cmp	r3, #180	; 0xb4
 8003748:	dc05      	bgt.n	8003756 <calcDeltaAngle+0x3a>
 800374a:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <calcDeltaAngle+0x6c>)
 800374c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003750:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8003754:	da02      	bge.n	800375c <calcDeltaAngle+0x40>
		delta_encoder = 0;
 8003756:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <calcDeltaAngle+0x6c>)
 8003758:	2200      	movs	r2, #0
 800375a:	801a      	strh	r2, [r3, #0]
	}
	if(delta_encoder > MIN_ANGLE )
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <calcDeltaAngle+0x6c>)
 800375e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003762:	2b05      	cmp	r3, #5
 8003764:	dd01      	ble.n	800376a <calcDeltaAngle+0x4e>
		encoderSetUp();
 8003766:	f7fe fe8d 	bl	8002484 <encoderSetUp>
	if(delta_encoder < (-1)*MIN_ANGLE)
 800376a:	4b07      	ldr	r3, [pc, #28]	; (8003788 <calcDeltaAngle+0x6c>)
 800376c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003770:	f113 0f05 	cmn.w	r3, #5
 8003774:	da01      	bge.n	800377a <calcDeltaAngle+0x5e>
		encoderSetDown();
 8003776:	f7fe fe91 	bl	800249c <encoderSetDown>
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20000866 	.word	0x20000866
 8003788:	20000868 	.word	0x20000868

0800378c <longButton>:
void longButton(){
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
	GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8003792:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003796:	480d      	ldr	r0, [pc, #52]	; (80037cc <longButton+0x40>)
 8003798:	f000 ff54 	bl	8004644 <HAL_GPIO_ReadPin>
 800379c:	4603      	mov	r3, r0
 800379e:	71fb      	strb	r3, [r7, #7]
	if(pinState == GPIO_PIN_RESET){
 80037a0:	79fb      	ldrb	r3, [r7, #7]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d102      	bne.n	80037ac <longButton+0x20>
		buttonCounterSet();
 80037a6:	f7fe fe21 	bl	80023ec <buttonCounterSet>
 80037aa:	e001      	b.n	80037b0 <longButton+0x24>
	}
	else{
		buttonCounterReset();
 80037ac:	f7fe fe2e 	bl	800240c <buttonCounterReset>
	}

	if(buttonCounter() > 50){
 80037b0:	f7fe fe10 	bl	80023d4 <buttonCounter>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b32      	cmp	r3, #50	; 0x32
 80037b8:	d903      	bls.n	80037c2 <longButton+0x36>
		buttonLongSet();
 80037ba:	f7fe fe3f 	bl	800243c <buttonLongSet>
		buttonCounterReset();
 80037be:	f7fe fe25 	bl	800240c <buttonCounterReset>
	}
}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40020400 	.word	0x40020400

080037d0 <getEncoderData>:

u_magnituda magnituda;
uint16_t getEncoderData(){
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
	magnituda.data = AS5600_GetStatus();
 80037d4:	f7fe fcdc 	bl	8002190 <AS5600_GetStatus>
 80037d8:	4603      	mov	r3, r0
 80037da:	461a      	mov	r2, r3
 80037dc:	4b09      	ldr	r3, [pc, #36]	; (8003804 <getEncoderData+0x34>)
 80037de:	701a      	strb	r2, [r3, #0]
	if(magnituda.state_magnit.MD == ON)
 80037e0:	4b08      	ldr	r3, [pc, #32]	; (8003804 <getEncoderData+0x34>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d005      	beq.n	80037fa <getEncoderData+0x2a>
		raw_angle = AS5600_GetRawAngle();
 80037ee:	f7fe fcb9 	bl	8002164 <AS5600_GetRawAngle>
 80037f2:	4603      	mov	r3, r0
 80037f4:	461a      	mov	r2, r3
 80037f6:	4b04      	ldr	r3, [pc, #16]	; (8003808 <getEncoderData+0x38>)
 80037f8:	801a      	strh	r2, [r3, #0]
	return 	raw_angle;
 80037fa:	4b03      	ldr	r3, [pc, #12]	; (8003808 <getEncoderData+0x38>)
 80037fc:	881b      	ldrh	r3, [r3, #0]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	200008f0 	.word	0x200008f0
 8003808:	20000864 	.word	0x20000864

0800380c <initAllChanelADC>:

void initAllChanelADC(){
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
	initADC(&configChanel[ADC_CHANEL_1]);
 8003810:	480e      	ldr	r0, [pc, #56]	; (800384c <initAllChanelADC+0x40>)
 8003812:	f000 f823 	bl	800385c <initADC>
	initADC(&configChanel[ADC_CHANEL_2]);
 8003816:	480e      	ldr	r0, [pc, #56]	; (8003850 <initAllChanelADC+0x44>)
 8003818:	f000 f820 	bl	800385c <initADC>
	initADC(&configChanel[ADC_CHANEL_3]);
 800381c:	480d      	ldr	r0, [pc, #52]	; (8003854 <initAllChanelADC+0x48>)
 800381e:	f000 f81d 	bl	800385c <initADC>
	initADC(&configChanel[ADC_CHANEL_4]);
 8003822:	480d      	ldr	r0, [pc, #52]	; (8003858 <initAllChanelADC+0x4c>)
 8003824:	f000 f81a 	bl	800385c <initADC>

	initChanelADC(&configChanel[ADC_CHANEL_1], CHANNEL_AIN0_GND);
 8003828:	2104      	movs	r1, #4
 800382a:	4808      	ldr	r0, [pc, #32]	; (800384c <initAllChanelADC+0x40>)
 800382c:	f000 f835 	bl	800389a <initChanelADC>
	initChanelADC(&configChanel[ADC_CHANEL_2], CHANNEL_AIN1_GND);
 8003830:	2105      	movs	r1, #5
 8003832:	4807      	ldr	r0, [pc, #28]	; (8003850 <initAllChanelADC+0x44>)
 8003834:	f000 f831 	bl	800389a <initChanelADC>
	initChanelADC(&configChanel[ADC_CHANEL_3], CHANNEL_AIN2_GND);
 8003838:	2106      	movs	r1, #6
 800383a:	4806      	ldr	r0, [pc, #24]	; (8003854 <initAllChanelADC+0x48>)
 800383c:	f000 f82d 	bl	800389a <initChanelADC>
	initChanelADC(&configChanel[ADC_CHANEL_4], CHANNEL_AIN3_GND);
 8003840:	2107      	movs	r1, #7
 8003842:	4805      	ldr	r0, [pc, #20]	; (8003858 <initAllChanelADC+0x4c>)
 8003844:	f000 f829 	bl	800389a <initChanelADC>
}
 8003848:	bf00      	nop
 800384a:	bd80      	pop	{r7, pc}
 800384c:	2000086c 	.word	0x2000086c
 8003850:	20000874 	.word	0x20000874
 8003854:	2000087c 	.word	0x2000087c
 8003858:	20000884 	.word	0x20000884

0800385c <initADC>:

void initADC(ADS1115_Config_t* configReg){
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
	configReg->pgaConfig 		= PGA_4_096;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	705a      	strb	r2, [r3, #1]
	configReg->operatingMode 	= MODE_CONTINOUS;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	709a      	strb	r2, [r3, #2]
	configReg->dataRate 		= DRATE_250;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2205      	movs	r2, #5
 8003874:	70da      	strb	r2, [r3, #3]
	configReg->compareMode 		= COMP_HYSTERESIS;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	711a      	strb	r2, [r3, #4]
	configReg->polarityMode 	= POLARITY_ACTIVE_LOW;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	715a      	strb	r2, [r3, #5]
	configReg->latchingMode  	= LATCHING_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	719a      	strb	r2, [r3, #6]
	configReg->queueComparator 	= QUEUE_ONE; 			// ПОднять флаг через сколько измерений
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	71da      	strb	r2, [r3, #7]
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <initChanelADC>:

void initChanelADC(ADS1115_Config_t* configReg, MultiplexerConfig_t chanel){
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	460b      	mov	r3, r1
 80038a4:	70fb      	strb	r3, [r7, #3]
	configReg->channel = chanel;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	78fa      	ldrb	r2, [r7, #3]
 80038aa:	701a      	strb	r2, [r3, #0]
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <setDAC>:

void setDAC(MCP4725 myMCP4725, uint16_t Vout){
 80038b8:	b590      	push	{r4, r7, lr}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	463c      	mov	r4, r7
 80038c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MCP4725_setValue(&myMCP4725, Vout, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 80038c4:	8c39      	ldrh	r1, [r7, #32]
 80038c6:	4638      	mov	r0, r7
 80038c8:	2300      	movs	r3, #0
 80038ca:	2200      	movs	r2, #0
 80038cc:	f7fd fb52 	bl	8000f74 <MCP4725_setValue>
}
 80038d0:	bf00      	nop
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd90      	pop	{r4, r7, pc}

080038d8 <initUserTasks>:
  .name = "SensOutTask",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

void initUserTasks(){
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
	OledMenuTaskHandle   = osThreadNew(StartOledMenuTask,   NULL, &OledMenuTask_attributes);
 80038dc:	4a0c      	ldr	r2, [pc, #48]	; (8003910 <initUserTasks+0x38>)
 80038de:	2100      	movs	r1, #0
 80038e0:	480c      	ldr	r0, [pc, #48]	; (8003914 <initUserTasks+0x3c>)
 80038e2:	f008 fff3 	bl	800c8cc <osThreadNew>
 80038e6:	4603      	mov	r3, r0
 80038e8:	4a0b      	ldr	r2, [pc, #44]	; (8003918 <initUserTasks+0x40>)
 80038ea:	6013      	str	r3, [r2, #0]
	LedControlTaskHandle = osThreadNew(StartLedControlTask, NULL, &LedControlTask_attributes);
 80038ec:	4a0b      	ldr	r2, [pc, #44]	; (800391c <initUserTasks+0x44>)
 80038ee:	2100      	movs	r1, #0
 80038f0:	480b      	ldr	r0, [pc, #44]	; (8003920 <initUserTasks+0x48>)
 80038f2:	f008 ffeb 	bl	800c8cc <osThreadNew>
 80038f6:	4603      	mov	r3, r0
 80038f8:	4a0a      	ldr	r2, [pc, #40]	; (8003924 <initUserTasks+0x4c>)
 80038fa:	6013      	str	r3, [r2, #0]
	SensOutTaskHandle    = osThreadNew(StartSensOutTask,    NULL, &SensOutTask_attributes);
 80038fc:	4a0a      	ldr	r2, [pc, #40]	; (8003928 <initUserTasks+0x50>)
 80038fe:	2100      	movs	r1, #0
 8003900:	480a      	ldr	r0, [pc, #40]	; (800392c <initUserTasks+0x54>)
 8003902:	f008 ffe3 	bl	800c8cc <osThreadNew>
 8003906:	4603      	mov	r3, r0
 8003908:	4a09      	ldr	r2, [pc, #36]	; (8003930 <initUserTasks+0x58>)
 800390a:	6013      	str	r3, [r2, #0]
};
 800390c:	bf00      	nop
 800390e:	bd80      	pop	{r7, pc}
 8003910:	080119f8 	.word	0x080119f8
 8003914:	08003463 	.word	0x08003463
 8003918:	200008f4 	.word	0x200008f4
 800391c:	08011a1c 	.word	0x08011a1c
 8003920:	080031a5 	.word	0x080031a5
 8003924:	200008f8 	.word	0x200008f8
 8003928:	08011a40 	.word	0x08011a40
 800392c:	080034f9 	.word	0x080034f9
 8003930:	200008fc 	.word	0x200008fc

08003934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800396c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003938:	480d      	ldr	r0, [pc, #52]	; (8003970 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800393a:	490e      	ldr	r1, [pc, #56]	; (8003974 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800393c:	4a0e      	ldr	r2, [pc, #56]	; (8003978 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800393e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003940:	e002      	b.n	8003948 <LoopCopyDataInit>

08003942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003946:	3304      	adds	r3, #4

08003948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800394a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800394c:	d3f9      	bcc.n	8003942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800394e:	4a0b      	ldr	r2, [pc, #44]	; (800397c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003950:	4c0b      	ldr	r4, [pc, #44]	; (8003980 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003954:	e001      	b.n	800395a <LoopFillZerobss>

08003956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003958:	3204      	adds	r2, #4

0800395a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800395a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800395c:	d3fb      	bcc.n	8003956 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800395e:	f7ff fc0f 	bl	8003180 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003962:	f00c fe2b 	bl	80105bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003966:	f7fe ff17 	bl	8002798 <main>
  bx  lr    
 800396a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800396c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003974:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 8003978:	08011b04 	.word	0x08011b04
  ldr r2, =_sbss
 800397c:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8003980:	20006ef0 	.word	0x20006ef0

08003984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003984:	e7fe      	b.n	8003984 <ADC_IRQHandler>
	...

08003988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800398c:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <HAL_Init+0x40>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a0d      	ldr	r2, [pc, #52]	; (80039c8 <HAL_Init+0x40>)
 8003992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003996:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_Init+0x40>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <HAL_Init+0x40>)
 800399e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039a4:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <HAL_Init+0x40>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a07      	ldr	r2, [pc, #28]	; (80039c8 <HAL_Init+0x40>)
 80039aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039b0:	2003      	movs	r0, #3
 80039b2:	f000 f8fc 	bl	8003bae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039b6:	2000      	movs	r0, #0
 80039b8:	f7ff fafe 	bl	8002fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039bc:	f7ff f9a8 	bl	8002d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40023c00 	.word	0x40023c00

080039cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039d0:	4b06      	ldr	r3, [pc, #24]	; (80039ec <HAL_IncTick+0x20>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <HAL_IncTick+0x24>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4413      	add	r3, r2
 80039dc:	4a04      	ldr	r2, [pc, #16]	; (80039f0 <HAL_IncTick+0x24>)
 80039de:	6013      	str	r3, [r2, #0]
}
 80039e0:	bf00      	nop
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	20000040 	.word	0x20000040
 80039f0:	20000900 	.word	0x20000900

080039f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  return uwTick;
 80039f8:	4b03      	ldr	r3, [pc, #12]	; (8003a08 <HAL_GetTick+0x14>)
 80039fa:	681b      	ldr	r3, [r3, #0]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	20000900 	.word	0x20000900

08003a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a14:	f7ff ffee 	bl	80039f4 <HAL_GetTick>
 8003a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a24:	d005      	beq.n	8003a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a26:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <HAL_Delay+0x44>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a32:	bf00      	nop
 8003a34:	f7ff ffde 	bl	80039f4 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d8f7      	bhi.n	8003a34 <HAL_Delay+0x28>
  {
  }
}
 8003a44:	bf00      	nop
 8003a46:	bf00      	nop
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000040 	.word	0x20000040

08003a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a64:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <__NVIC_SetPriorityGrouping+0x44>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a70:	4013      	ands	r3, r2
 8003a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a86:	4a04      	ldr	r2, [pc, #16]	; (8003a98 <__NVIC_SetPriorityGrouping+0x44>)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	60d3      	str	r3, [r2, #12]
}
 8003a8c:	bf00      	nop
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	e000ed00 	.word	0xe000ed00

08003a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003aa0:	4b04      	ldr	r3, [pc, #16]	; (8003ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	0a1b      	lsrs	r3, r3, #8
 8003aa6:	f003 0307 	and.w	r3, r3, #7
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	e000ed00 	.word	0xe000ed00

08003ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	db0b      	blt.n	8003ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	f003 021f 	and.w	r2, r3, #31
 8003ad0:	4907      	ldr	r1, [pc, #28]	; (8003af0 <__NVIC_EnableIRQ+0x38>)
 8003ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad6:	095b      	lsrs	r3, r3, #5
 8003ad8:	2001      	movs	r0, #1
 8003ada:	fa00 f202 	lsl.w	r2, r0, r2
 8003ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	e000e100 	.word	0xe000e100

08003af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	6039      	str	r1, [r7, #0]
 8003afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	db0a      	blt.n	8003b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	490c      	ldr	r1, [pc, #48]	; (8003b40 <__NVIC_SetPriority+0x4c>)
 8003b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b12:	0112      	lsls	r2, r2, #4
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	440b      	add	r3, r1
 8003b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b1c:	e00a      	b.n	8003b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	4908      	ldr	r1, [pc, #32]	; (8003b44 <__NVIC_SetPriority+0x50>)
 8003b24:	79fb      	ldrb	r3, [r7, #7]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	3b04      	subs	r3, #4
 8003b2c:	0112      	lsls	r2, r2, #4
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	440b      	add	r3, r1
 8003b32:	761a      	strb	r2, [r3, #24]
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	e000e100 	.word	0xe000e100
 8003b44:	e000ed00 	.word	0xe000ed00

08003b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b089      	sub	sp, #36	; 0x24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f1c3 0307 	rsb	r3, r3, #7
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	bf28      	it	cs
 8003b66:	2304      	movcs	r3, #4
 8003b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	2b06      	cmp	r3, #6
 8003b70:	d902      	bls.n	8003b78 <NVIC_EncodePriority+0x30>
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	3b03      	subs	r3, #3
 8003b76:	e000      	b.n	8003b7a <NVIC_EncodePriority+0x32>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43da      	mvns	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	401a      	ands	r2, r3
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b90:	f04f 31ff 	mov.w	r1, #4294967295
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9a:	43d9      	mvns	r1, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba0:	4313      	orrs	r3, r2
         );
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3724      	adds	r7, #36	; 0x24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b082      	sub	sp, #8
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7ff ff4c 	bl	8003a54 <__NVIC_SetPriorityGrouping>
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
 8003bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bd6:	f7ff ff61 	bl	8003a9c <__NVIC_GetPriorityGrouping>
 8003bda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	68b9      	ldr	r1, [r7, #8]
 8003be0:	6978      	ldr	r0, [r7, #20]
 8003be2:	f7ff ffb1 	bl	8003b48 <NVIC_EncodePriority>
 8003be6:	4602      	mov	r2, r0
 8003be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bec:	4611      	mov	r1, r2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff ff80 	bl	8003af4 <__NVIC_SetPriority>
}
 8003bf4:	bf00      	nop
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff ff54 	bl	8003ab8 <__NVIC_EnableIRQ>
}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c24:	f7ff fee6 	bl	80039f4 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e099      	b.n	8003d68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0201 	bic.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c54:	e00f      	b.n	8003c76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c56:	f7ff fecd 	bl	80039f4 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b05      	cmp	r3, #5
 8003c62:	d908      	bls.n	8003c76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e078      	b.n	8003d68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e8      	bne.n	8003c56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4b38      	ldr	r3, [pc, #224]	; (8003d70 <HAL_DMA_Init+0x158>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d107      	bne.n	8003ce0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f023 0307 	bic.w	r3, r3, #7
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d117      	bne.n	8003d3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00e      	beq.n	8003d3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fa91 	bl	8004244 <DMA_CheckFifoParam>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2240      	movs	r2, #64	; 0x40
 8003d2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d36:	2301      	movs	r3, #1
 8003d38:	e016      	b.n	8003d68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fa48 	bl	80041d8 <DMA_CalcBaseAndBitshift>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d50:	223f      	movs	r2, #63	; 0x3f
 8003d52:	409a      	lsls	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	f010803f 	.word	0xf010803f

08003d74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <HAL_DMA_Start_IT+0x26>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e040      	b.n	8003e1c <HAL_DMA_Start_IT+0xa8>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d12f      	bne.n	8003e0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2202      	movs	r2, #2
 8003db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f9da 	bl	800417c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dcc:	223f      	movs	r2, #63	; 0x3f
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0216 	orr.w	r2, r2, #22
 8003de2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d007      	beq.n	8003dfc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0208 	orr.w	r2, r2, #8
 8003dfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	e005      	b.n	8003e1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e16:	2302      	movs	r3, #2
 8003e18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d004      	beq.n	8003e42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2280      	movs	r2, #128	; 0x80
 8003e3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e00c      	b.n	8003e5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2205      	movs	r2, #5
 8003e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0201 	bic.w	r2, r2, #1
 8003e58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e74:	4b8e      	ldr	r3, [pc, #568]	; (80040b0 <HAL_DMA_IRQHandler+0x248>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a8e      	ldr	r2, [pc, #568]	; (80040b4 <HAL_DMA_IRQHandler+0x24c>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	0a9b      	lsrs	r3, r3, #10
 8003e80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e92:	2208      	movs	r2, #8
 8003e94:	409a      	lsls	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01a      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d013      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0204 	bic.w	r2, r2, #4
 8003eba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec0:	2208      	movs	r2, #8
 8003ec2:	409a      	lsls	r2, r3
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ecc:	f043 0201 	orr.w	r2, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed8:	2201      	movs	r2, #1
 8003eda:	409a      	lsls	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d012      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	409a      	lsls	r2, r3
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f02:	f043 0202 	orr.w	r2, r3, #2
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0e:	2204      	movs	r2, #4
 8003f10:	409a      	lsls	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4013      	ands	r3, r2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d012      	beq.n	8003f40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00b      	beq.n	8003f40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2c:	2204      	movs	r2, #4
 8003f2e:	409a      	lsls	r2, r3
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f38:	f043 0204 	orr.w	r2, r3, #4
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f44:	2210      	movs	r2, #16
 8003f46:	409a      	lsls	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d043      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d03c      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f62:	2210      	movs	r2, #16
 8003f64:	409a      	lsls	r2, r3
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d018      	beq.n	8003faa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d108      	bne.n	8003f98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d024      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	4798      	blx	r3
 8003f96:	e01f      	b.n	8003fd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d01b      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	4798      	blx	r3
 8003fa8:	e016      	b.n	8003fd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d107      	bne.n	8003fc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0208 	bic.w	r2, r2, #8
 8003fc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fdc:	2220      	movs	r2, #32
 8003fde:	409a      	lsls	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 808f 	beq.w	8004108 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8087 	beq.w	8004108 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffe:	2220      	movs	r2, #32
 8004000:	409a      	lsls	r2, r3
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b05      	cmp	r3, #5
 8004010:	d136      	bne.n	8004080 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0216 	bic.w	r2, r2, #22
 8004020:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695a      	ldr	r2, [r3, #20]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004030:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d103      	bne.n	8004042 <HAL_DMA_IRQHandler+0x1da>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800403e:	2b00      	cmp	r3, #0
 8004040:	d007      	beq.n	8004052 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0208 	bic.w	r2, r2, #8
 8004050:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004056:	223f      	movs	r2, #63	; 0x3f
 8004058:	409a      	lsls	r2, r3
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004072:	2b00      	cmp	r3, #0
 8004074:	d07e      	beq.n	8004174 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	4798      	blx	r3
        }
        return;
 800407e:	e079      	b.n	8004174 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d01d      	beq.n	80040ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10d      	bne.n	80040b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d031      	beq.n	8004108 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	4798      	blx	r3
 80040ac:	e02c      	b.n	8004108 <HAL_DMA_IRQHandler+0x2a0>
 80040ae:	bf00      	nop
 80040b0:	20000038 	.word	0x20000038
 80040b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d023      	beq.n	8004108 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	4798      	blx	r3
 80040c8:	e01e      	b.n	8004108 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10f      	bne.n	80040f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0210 	bic.w	r2, r2, #16
 80040e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410c:	2b00      	cmp	r3, #0
 800410e:	d032      	beq.n	8004176 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d022      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2205      	movs	r2, #5
 8004120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0201 	bic.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	3301      	adds	r3, #1
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	429a      	cmp	r2, r3
 800413e:	d307      	bcc.n	8004150 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f2      	bne.n	8004134 <HAL_DMA_IRQHandler+0x2cc>
 800414e:	e000      	b.n	8004152 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004150:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004166:	2b00      	cmp	r3, #0
 8004168:	d005      	beq.n	8004176 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	4798      	blx	r3
 8004172:	e000      	b.n	8004176 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004174:	bf00      	nop
    }
  }
}
 8004176:	3718      	adds	r7, #24
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004198:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	2b40      	cmp	r3, #64	; 0x40
 80041a8:	d108      	bne.n	80041bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041ba:	e007      	b.n	80041cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	60da      	str	r2, [r3, #12]
}
 80041cc:	bf00      	nop
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	3b10      	subs	r3, #16
 80041e8:	4a14      	ldr	r2, [pc, #80]	; (800423c <DMA_CalcBaseAndBitshift+0x64>)
 80041ea:	fba2 2303 	umull	r2, r3, r2, r3
 80041ee:	091b      	lsrs	r3, r3, #4
 80041f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041f2:	4a13      	ldr	r2, [pc, #76]	; (8004240 <DMA_CalcBaseAndBitshift+0x68>)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4413      	add	r3, r2
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b03      	cmp	r3, #3
 8004204:	d909      	bls.n	800421a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800420e:	f023 0303 	bic.w	r3, r3, #3
 8004212:	1d1a      	adds	r2, r3, #4
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	659a      	str	r2, [r3, #88]	; 0x58
 8004218:	e007      	b.n	800422a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004222:	f023 0303 	bic.w	r3, r3, #3
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	aaaaaaab 	.word	0xaaaaaaab
 8004240:	08011a64 	.word	0x08011a64

08004244 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004254:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d11f      	bne.n	800429e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b03      	cmp	r3, #3
 8004262:	d856      	bhi.n	8004312 <DMA_CheckFifoParam+0xce>
 8004264:	a201      	add	r2, pc, #4	; (adr r2, 800426c <DMA_CheckFifoParam+0x28>)
 8004266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426a:	bf00      	nop
 800426c:	0800427d 	.word	0x0800427d
 8004270:	0800428f 	.word	0x0800428f
 8004274:	0800427d 	.word	0x0800427d
 8004278:	08004313 	.word	0x08004313
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d046      	beq.n	8004316 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800428c:	e043      	b.n	8004316 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004292:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004296:	d140      	bne.n	800431a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800429c:	e03d      	b.n	800431a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042a6:	d121      	bne.n	80042ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d837      	bhi.n	800431e <DMA_CheckFifoParam+0xda>
 80042ae:	a201      	add	r2, pc, #4	; (adr r2, 80042b4 <DMA_CheckFifoParam+0x70>)
 80042b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b4:	080042c5 	.word	0x080042c5
 80042b8:	080042cb 	.word	0x080042cb
 80042bc:	080042c5 	.word	0x080042c5
 80042c0:	080042dd 	.word	0x080042dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	73fb      	strb	r3, [r7, #15]
      break;
 80042c8:	e030      	b.n	800432c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d025      	beq.n	8004322 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042da:	e022      	b.n	8004322 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042e4:	d11f      	bne.n	8004326 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042ea:	e01c      	b.n	8004326 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d903      	bls.n	80042fa <DMA_CheckFifoParam+0xb6>
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	d003      	beq.n	8004300 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042f8:	e018      	b.n	800432c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	73fb      	strb	r3, [r7, #15]
      break;
 80042fe:	e015      	b.n	800432c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00e      	beq.n	800432a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	73fb      	strb	r3, [r7, #15]
      break;
 8004310:	e00b      	b.n	800432a <DMA_CheckFifoParam+0xe6>
      break;
 8004312:	bf00      	nop
 8004314:	e00a      	b.n	800432c <DMA_CheckFifoParam+0xe8>
      break;
 8004316:	bf00      	nop
 8004318:	e008      	b.n	800432c <DMA_CheckFifoParam+0xe8>
      break;
 800431a:	bf00      	nop
 800431c:	e006      	b.n	800432c <DMA_CheckFifoParam+0xe8>
      break;
 800431e:	bf00      	nop
 8004320:	e004      	b.n	800432c <DMA_CheckFifoParam+0xe8>
      break;
 8004322:	bf00      	nop
 8004324:	e002      	b.n	800432c <DMA_CheckFifoParam+0xe8>
      break;   
 8004326:	bf00      	nop
 8004328:	e000      	b.n	800432c <DMA_CheckFifoParam+0xe8>
      break;
 800432a:	bf00      	nop
    }
  } 
  
  return status; 
 800432c:	7bfb      	ldrb	r3, [r7, #15]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop

0800433c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800433c:	b480      	push	{r7}
 800433e:	b089      	sub	sp, #36	; 0x24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800434a:	2300      	movs	r3, #0
 800434c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800434e:	2300      	movs	r3, #0
 8004350:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	e159      	b.n	800460c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004358:	2201      	movs	r2, #1
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	4013      	ands	r3, r2
 800436a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	429a      	cmp	r2, r3
 8004372:	f040 8148 	bne.w	8004606 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	2b01      	cmp	r3, #1
 8004380:	d005      	beq.n	800438e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800438a:	2b02      	cmp	r3, #2
 800438c:	d130      	bne.n	80043f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	2203      	movs	r2, #3
 800439a:	fa02 f303 	lsl.w	r3, r2, r3
 800439e:	43db      	mvns	r3, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4013      	ands	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	fa02 f303 	lsl.w	r3, r2, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043c4:	2201      	movs	r2, #1
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	43db      	mvns	r3, r3
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	4013      	ands	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	091b      	lsrs	r3, r3, #4
 80043da:	f003 0201 	and.w	r2, r3, #1
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	fa02 f303 	lsl.w	r3, r2, r3
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f003 0303 	and.w	r3, r3, #3
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d017      	beq.n	800442c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	2203      	movs	r2, #3
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4013      	ands	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	4313      	orrs	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d123      	bne.n	8004480 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	08da      	lsrs	r2, r3, #3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3208      	adds	r2, #8
 8004440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004444:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	220f      	movs	r2, #15
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	43db      	mvns	r3, r3
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	4013      	ands	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	691a      	ldr	r2, [r3, #16]
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	4313      	orrs	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	08da      	lsrs	r2, r3, #3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3208      	adds	r2, #8
 800447a:	69b9      	ldr	r1, [r7, #24]
 800447c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	2203      	movs	r2, #3
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	43db      	mvns	r3, r3
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	4013      	ands	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 0203 	and.w	r2, r3, #3
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 80a2 	beq.w	8004606 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	4b57      	ldr	r3, [pc, #348]	; (8004624 <HAL_GPIO_Init+0x2e8>)
 80044c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ca:	4a56      	ldr	r2, [pc, #344]	; (8004624 <HAL_GPIO_Init+0x2e8>)
 80044cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044d0:	6453      	str	r3, [r2, #68]	; 0x44
 80044d2:	4b54      	ldr	r3, [pc, #336]	; (8004624 <HAL_GPIO_Init+0x2e8>)
 80044d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044de:	4a52      	ldr	r2, [pc, #328]	; (8004628 <HAL_GPIO_Init+0x2ec>)
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	089b      	lsrs	r3, r3, #2
 80044e4:	3302      	adds	r3, #2
 80044e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	220f      	movs	r2, #15
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	43db      	mvns	r3, r3
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	4013      	ands	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a49      	ldr	r2, [pc, #292]	; (800462c <HAL_GPIO_Init+0x2f0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d019      	beq.n	800453e <HAL_GPIO_Init+0x202>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a48      	ldr	r2, [pc, #288]	; (8004630 <HAL_GPIO_Init+0x2f4>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d013      	beq.n	800453a <HAL_GPIO_Init+0x1fe>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a47      	ldr	r2, [pc, #284]	; (8004634 <HAL_GPIO_Init+0x2f8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00d      	beq.n	8004536 <HAL_GPIO_Init+0x1fa>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a46      	ldr	r2, [pc, #280]	; (8004638 <HAL_GPIO_Init+0x2fc>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d007      	beq.n	8004532 <HAL_GPIO_Init+0x1f6>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a45      	ldr	r2, [pc, #276]	; (800463c <HAL_GPIO_Init+0x300>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d101      	bne.n	800452e <HAL_GPIO_Init+0x1f2>
 800452a:	2304      	movs	r3, #4
 800452c:	e008      	b.n	8004540 <HAL_GPIO_Init+0x204>
 800452e:	2307      	movs	r3, #7
 8004530:	e006      	b.n	8004540 <HAL_GPIO_Init+0x204>
 8004532:	2303      	movs	r3, #3
 8004534:	e004      	b.n	8004540 <HAL_GPIO_Init+0x204>
 8004536:	2302      	movs	r3, #2
 8004538:	e002      	b.n	8004540 <HAL_GPIO_Init+0x204>
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <HAL_GPIO_Init+0x204>
 800453e:	2300      	movs	r3, #0
 8004540:	69fa      	ldr	r2, [r7, #28]
 8004542:	f002 0203 	and.w	r2, r2, #3
 8004546:	0092      	lsls	r2, r2, #2
 8004548:	4093      	lsls	r3, r2
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	4313      	orrs	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004550:	4935      	ldr	r1, [pc, #212]	; (8004628 <HAL_GPIO_Init+0x2ec>)
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	089b      	lsrs	r3, r3, #2
 8004556:	3302      	adds	r3, #2
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800455e:	4b38      	ldr	r3, [pc, #224]	; (8004640 <HAL_GPIO_Init+0x304>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	43db      	mvns	r3, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4013      	ands	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004582:	4a2f      	ldr	r2, [pc, #188]	; (8004640 <HAL_GPIO_Init+0x304>)
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004588:	4b2d      	ldr	r3, [pc, #180]	; (8004640 <HAL_GPIO_Init+0x304>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	43db      	mvns	r3, r3
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	4013      	ands	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045ac:	4a24      	ldr	r2, [pc, #144]	; (8004640 <HAL_GPIO_Init+0x304>)
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045b2:	4b23      	ldr	r3, [pc, #140]	; (8004640 <HAL_GPIO_Init+0x304>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	43db      	mvns	r3, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4013      	ands	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045d6:	4a1a      	ldr	r2, [pc, #104]	; (8004640 <HAL_GPIO_Init+0x304>)
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045dc:	4b18      	ldr	r3, [pc, #96]	; (8004640 <HAL_GPIO_Init+0x304>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	43db      	mvns	r3, r3
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	4013      	ands	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004600:	4a0f      	ldr	r2, [pc, #60]	; (8004640 <HAL_GPIO_Init+0x304>)
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	3301      	adds	r3, #1
 800460a:	61fb      	str	r3, [r7, #28]
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	2b0f      	cmp	r3, #15
 8004610:	f67f aea2 	bls.w	8004358 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004614:	bf00      	nop
 8004616:	bf00      	nop
 8004618:	3724      	adds	r7, #36	; 0x24
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	40023800 	.word	0x40023800
 8004628:	40013800 	.word	0x40013800
 800462c:	40020000 	.word	0x40020000
 8004630:	40020400 	.word	0x40020400
 8004634:	40020800 	.word	0x40020800
 8004638:	40020c00 	.word	0x40020c00
 800463c:	40021000 	.word	0x40021000
 8004640:	40013c00 	.word	0x40013c00

08004644 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	887b      	ldrh	r3, [r7, #2]
 8004656:	4013      	ands	r3, r2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
 8004660:	e001      	b.n	8004666 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004662:	2300      	movs	r3, #0
 8004664:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004666:	7bfb      	ldrb	r3, [r7, #15]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	807b      	strh	r3, [r7, #2]
 8004680:	4613      	mov	r3, r2
 8004682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004684:	787b      	ldrb	r3, [r7, #1]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800468a:	887a      	ldrh	r2, [r7, #2]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004690:	e003      	b.n	800469a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004692:	887b      	ldrh	r3, [r7, #2]
 8004694:	041a      	lsls	r2, r3, #16
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	619a      	str	r2, [r3, #24]
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
	...

080046a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	4603      	mov	r3, r0
 80046b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80046b2:	4b08      	ldr	r3, [pc, #32]	; (80046d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046b4:	695a      	ldr	r2, [r3, #20]
 80046b6:	88fb      	ldrh	r3, [r7, #6]
 80046b8:	4013      	ands	r3, r2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d006      	beq.n	80046cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046be:	4a05      	ldr	r2, [pc, #20]	; (80046d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046c0:	88fb      	ldrh	r3, [r7, #6]
 80046c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046c4:	88fb      	ldrh	r3, [r7, #6]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fe fa94 	bl	8002bf4 <HAL_GPIO_EXTI_Callback>
  }
}
 80046cc:	bf00      	nop
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40013c00 	.word	0x40013c00

080046d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e12b      	b.n	8004942 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d106      	bne.n	8004704 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fe fb32 	bl	8002d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2224      	movs	r2, #36	; 0x24
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0201 	bic.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800472a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800473a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800473c:	f003 fbda 	bl	8007ef4 <HAL_RCC_GetPCLK1Freq>
 8004740:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	4a81      	ldr	r2, [pc, #516]	; (800494c <HAL_I2C_Init+0x274>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d807      	bhi.n	800475c <HAL_I2C_Init+0x84>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4a80      	ldr	r2, [pc, #512]	; (8004950 <HAL_I2C_Init+0x278>)
 8004750:	4293      	cmp	r3, r2
 8004752:	bf94      	ite	ls
 8004754:	2301      	movls	r3, #1
 8004756:	2300      	movhi	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	e006      	b.n	800476a <HAL_I2C_Init+0x92>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4a7d      	ldr	r2, [pc, #500]	; (8004954 <HAL_I2C_Init+0x27c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	bf94      	ite	ls
 8004764:	2301      	movls	r3, #1
 8004766:	2300      	movhi	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e0e7      	b.n	8004942 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4a78      	ldr	r2, [pc, #480]	; (8004958 <HAL_I2C_Init+0x280>)
 8004776:	fba2 2303 	umull	r2, r3, r2, r3
 800477a:	0c9b      	lsrs	r3, r3, #18
 800477c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	430a      	orrs	r2, r1
 8004790:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	4a6a      	ldr	r2, [pc, #424]	; (800494c <HAL_I2C_Init+0x274>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d802      	bhi.n	80047ac <HAL_I2C_Init+0xd4>
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	3301      	adds	r3, #1
 80047aa:	e009      	b.n	80047c0 <HAL_I2C_Init+0xe8>
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047b2:	fb02 f303 	mul.w	r3, r2, r3
 80047b6:	4a69      	ldr	r2, [pc, #420]	; (800495c <HAL_I2C_Init+0x284>)
 80047b8:	fba2 2303 	umull	r2, r3, r2, r3
 80047bc:	099b      	lsrs	r3, r3, #6
 80047be:	3301      	adds	r3, #1
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6812      	ldr	r2, [r2, #0]
 80047c4:	430b      	orrs	r3, r1
 80047c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	495c      	ldr	r1, [pc, #368]	; (800494c <HAL_I2C_Init+0x274>)
 80047dc:	428b      	cmp	r3, r1
 80047de:	d819      	bhi.n	8004814 <HAL_I2C_Init+0x13c>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	1e59      	subs	r1, r3, #1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80047ee:	1c59      	adds	r1, r3, #1
 80047f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047f4:	400b      	ands	r3, r1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <HAL_I2C_Init+0x138>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1e59      	subs	r1, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	fbb1 f3f3 	udiv	r3, r1, r3
 8004808:	3301      	adds	r3, #1
 800480a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800480e:	e051      	b.n	80048b4 <HAL_I2C_Init+0x1dc>
 8004810:	2304      	movs	r3, #4
 8004812:	e04f      	b.n	80048b4 <HAL_I2C_Init+0x1dc>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d111      	bne.n	8004840 <HAL_I2C_Init+0x168>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	1e58      	subs	r0, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6859      	ldr	r1, [r3, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	440b      	add	r3, r1
 800482a:	fbb0 f3f3 	udiv	r3, r0, r3
 800482e:	3301      	adds	r3, #1
 8004830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004834:	2b00      	cmp	r3, #0
 8004836:	bf0c      	ite	eq
 8004838:	2301      	moveq	r3, #1
 800483a:	2300      	movne	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	e012      	b.n	8004866 <HAL_I2C_Init+0x18e>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	1e58      	subs	r0, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6859      	ldr	r1, [r3, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	440b      	add	r3, r1
 800484e:	0099      	lsls	r1, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	fbb0 f3f3 	udiv	r3, r0, r3
 8004856:	3301      	adds	r3, #1
 8004858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800485c:	2b00      	cmp	r3, #0
 800485e:	bf0c      	ite	eq
 8004860:	2301      	moveq	r3, #1
 8004862:	2300      	movne	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <HAL_I2C_Init+0x196>
 800486a:	2301      	movs	r3, #1
 800486c:	e022      	b.n	80048b4 <HAL_I2C_Init+0x1dc>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10e      	bne.n	8004894 <HAL_I2C_Init+0x1bc>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	1e58      	subs	r0, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6859      	ldr	r1, [r3, #4]
 800487e:	460b      	mov	r3, r1
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	440b      	add	r3, r1
 8004884:	fbb0 f3f3 	udiv	r3, r0, r3
 8004888:	3301      	adds	r3, #1
 800488a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800488e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004892:	e00f      	b.n	80048b4 <HAL_I2C_Init+0x1dc>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	1e58      	subs	r0, r3, #1
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6859      	ldr	r1, [r3, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	0099      	lsls	r1, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80048aa:	3301      	adds	r3, #1
 80048ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	6809      	ldr	r1, [r1, #0]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69da      	ldr	r2, [r3, #28]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6911      	ldr	r1, [r2, #16]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	68d2      	ldr	r2, [r2, #12]
 80048ee:	4311      	orrs	r1, r2
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6812      	ldr	r2, [r2, #0]
 80048f4:	430b      	orrs	r3, r1
 80048f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	695a      	ldr	r2, [r3, #20]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0201 	orr.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2220      	movs	r2, #32
 800492e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	000186a0 	.word	0x000186a0
 8004950:	001e847f 	.word	0x001e847f
 8004954:	003d08ff 	.word	0x003d08ff
 8004958:	431bde83 	.word	0x431bde83
 800495c:	10624dd3 	.word	0x10624dd3

08004960 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b088      	sub	sp, #32
 8004964:	af02      	add	r7, sp, #8
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	607a      	str	r2, [r7, #4]
 800496a:	461a      	mov	r2, r3
 800496c:	460b      	mov	r3, r1
 800496e:	817b      	strh	r3, [r7, #10]
 8004970:	4613      	mov	r3, r2
 8004972:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004974:	f7ff f83e 	bl	80039f4 <HAL_GetTick>
 8004978:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b20      	cmp	r3, #32
 8004984:	f040 80e0 	bne.w	8004b48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	2319      	movs	r3, #25
 800498e:	2201      	movs	r2, #1
 8004990:	4970      	ldr	r1, [pc, #448]	; (8004b54 <HAL_I2C_Master_Transmit+0x1f4>)
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f001 fa24 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800499e:	2302      	movs	r3, #2
 80049a0:	e0d3      	b.n	8004b4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d101      	bne.n	80049b0 <HAL_I2C_Master_Transmit+0x50>
 80049ac:	2302      	movs	r3, #2
 80049ae:	e0cc      	b.n	8004b4a <HAL_I2C_Master_Transmit+0x1ea>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d007      	beq.n	80049d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 0201 	orr.w	r2, r2, #1
 80049d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2221      	movs	r2, #33	; 0x21
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2210      	movs	r2, #16
 80049f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	893a      	ldrh	r2, [r7, #8]
 8004a06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4a50      	ldr	r2, [pc, #320]	; (8004b58 <HAL_I2C_Master_Transmit+0x1f8>)
 8004a16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a18:	8979      	ldrh	r1, [r7, #10]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	6a3a      	ldr	r2, [r7, #32]
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 ff10 	bl	8005844 <I2C_MasterRequestWrite>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e08d      	b.n	8004b4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a2e:	2300      	movs	r3, #0
 8004a30:	613b      	str	r3, [r7, #16]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	613b      	str	r3, [r7, #16]
 8004a42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004a44:	e066      	b.n	8004b14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	6a39      	ldr	r1, [r7, #32]
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f001 fa9e 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00d      	beq.n	8004a72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d107      	bne.n	8004a6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e06b      	b.n	8004b4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	781a      	ldrb	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d11b      	bne.n	8004ae8 <HAL_I2C_Master_Transmit+0x188>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d017      	beq.n	8004ae8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	781a      	ldrb	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	6a39      	ldr	r1, [r7, #32]
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f001 fa8e 	bl	800600e <I2C_WaitOnBTFFlagUntilTimeout>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00d      	beq.n	8004b14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d107      	bne.n	8004b10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e01a      	b.n	8004b4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d194      	bne.n	8004a46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b44:	2300      	movs	r3, #0
 8004b46:	e000      	b.n	8004b4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004b48:	2302      	movs	r3, #2
  }
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	00100002 	.word	0x00100002
 8004b58:	ffff0000 	.word	0xffff0000

08004b5c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b08c      	sub	sp, #48	; 0x30
 8004b60:	af02      	add	r7, sp, #8
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	607a      	str	r2, [r7, #4]
 8004b66:	461a      	mov	r2, r3
 8004b68:	460b      	mov	r3, r1
 8004b6a:	817b      	strh	r3, [r7, #10]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b70:	f7fe ff40 	bl	80039f4 <HAL_GetTick>
 8004b74:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b20      	cmp	r3, #32
 8004b80:	f040 820b 	bne.w	8004f9a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	2319      	movs	r3, #25
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	497c      	ldr	r1, [pc, #496]	; (8004d80 <HAL_I2C_Master_Receive+0x224>)
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f001 f926 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e1fe      	b.n	8004f9c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <HAL_I2C_Master_Receive+0x50>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	e1f7      	b.n	8004f9c <HAL_I2C_Master_Receive+0x440>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d007      	beq.n	8004bd2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f042 0201 	orr.w	r2, r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004be0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2222      	movs	r2, #34	; 0x22
 8004be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2210      	movs	r2, #16
 8004bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	893a      	ldrh	r2, [r7, #8]
 8004c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4a5c      	ldr	r2, [pc, #368]	; (8004d84 <HAL_I2C_Master_Receive+0x228>)
 8004c12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c14:	8979      	ldrh	r1, [r7, #10]
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 fe94 	bl	8005948 <I2C_MasterRequestRead>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e1b8      	b.n	8004f9c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d113      	bne.n	8004c5a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c32:	2300      	movs	r3, #0
 8004c34:	623b      	str	r3, [r7, #32]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	623b      	str	r3, [r7, #32]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	623b      	str	r3, [r7, #32]
 8004c46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	e18c      	b.n	8004f74 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d11b      	bne.n	8004c9a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c72:	2300      	movs	r3, #0
 8004c74:	61fb      	str	r3, [r7, #28]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	61fb      	str	r3, [r7, #28]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	61fb      	str	r3, [r7, #28]
 8004c86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	e16c      	b.n	8004f74 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d11b      	bne.n	8004cda <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61bb      	str	r3, [r7, #24]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	61bb      	str	r3, [r7, #24]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	61bb      	str	r3, [r7, #24]
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	e14c      	b.n	8004f74 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ce8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	617b      	str	r3, [r7, #20]
 8004cfe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004d00:	e138      	b.n	8004f74 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	f200 80f1 	bhi.w	8004eee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d123      	bne.n	8004d5c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f001 f9b9 	bl	8006090 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e139      	b.n	8004f9c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691a      	ldr	r2, [r3, #16]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	3b01      	subs	r3, #1
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d5a:	e10b      	b.n	8004f74 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d14e      	bne.n	8004e02 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	4906      	ldr	r1, [pc, #24]	; (8004d88 <HAL_I2C_Master_Receive+0x22c>)
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f001 f836 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d008      	beq.n	8004d8c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e10e      	b.n	8004f9c <HAL_I2C_Master_Receive+0x440>
 8004d7e:	bf00      	nop
 8004d80:	00100002 	.word	0x00100002
 8004d84:	ffff0000 	.word	0xffff0000
 8004d88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	691a      	ldr	r2, [r3, #16]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e00:	e0b8      	b.n	8004f74 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e08:	2200      	movs	r2, #0
 8004e0a:	4966      	ldr	r1, [pc, #408]	; (8004fa4 <HAL_I2C_Master_Receive+0x448>)
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 ffe7 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e0bf      	b.n	8004f9c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691a      	ldr	r2, [r3, #16]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e64:	2200      	movs	r2, #0
 8004e66:	494f      	ldr	r1, [pc, #316]	; (8004fa4 <HAL_I2C_Master_Receive+0x448>)
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 ffb9 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e091      	b.n	8004f9c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	691a      	ldr	r2, [r3, #16]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004eec:	e042      	b.n	8004f74 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f001 f8cc 	bl	8006090 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e04c      	b.n	8004f9c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	691a      	ldr	r2, [r3, #16]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	b2d2      	uxtb	r2, r2
 8004f0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d118      	bne.n	8004f74 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f47f aec2 	bne.w	8004d02 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2220      	movs	r2, #32
 8004f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	e000      	b.n	8004f9c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004f9a:	2302      	movs	r3, #2
  }
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3728      	adds	r7, #40	; 0x28
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	00010004 	.word	0x00010004

08004fa8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b088      	sub	sp, #32
 8004fac:	af02      	add	r7, sp, #8
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	4608      	mov	r0, r1
 8004fb2:	4611      	mov	r1, r2
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	817b      	strh	r3, [r7, #10]
 8004fba:	460b      	mov	r3, r1
 8004fbc:	813b      	strh	r3, [r7, #8]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fc2:	f7fe fd17 	bl	80039f4 <HAL_GetTick>
 8004fc6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b20      	cmp	r3, #32
 8004fd2:	f040 80d9 	bne.w	8005188 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	2319      	movs	r3, #25
 8004fdc:	2201      	movs	r2, #1
 8004fde:	496d      	ldr	r1, [pc, #436]	; (8005194 <HAL_I2C_Mem_Write+0x1ec>)
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 fefd 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004fec:	2302      	movs	r3, #2
 8004fee:	e0cc      	b.n	800518a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d101      	bne.n	8004ffe <HAL_I2C_Mem_Write+0x56>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	e0c5      	b.n	800518a <HAL_I2C_Mem_Write+0x1e2>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b01      	cmp	r3, #1
 8005012:	d007      	beq.n	8005024 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0201 	orr.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005032:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2221      	movs	r2, #33	; 0x21
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2240      	movs	r2, #64	; 0x40
 8005040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a3a      	ldr	r2, [r7, #32]
 800504e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005054:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4a4d      	ldr	r2, [pc, #308]	; (8005198 <HAL_I2C_Mem_Write+0x1f0>)
 8005064:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005066:	88f8      	ldrh	r0, [r7, #6]
 8005068:	893a      	ldrh	r2, [r7, #8]
 800506a:	8979      	ldrh	r1, [r7, #10]
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	9301      	str	r3, [sp, #4]
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	4603      	mov	r3, r0
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 fd34 	bl	8005ae4 <I2C_RequestMemoryWrite>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d052      	beq.n	8005128 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e081      	b.n	800518a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 ff7e 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00d      	beq.n	80050b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	2b04      	cmp	r3, #4
 800509c:	d107      	bne.n	80050ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e06b      	b.n	800518a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	781a      	ldrb	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d8:	b29b      	uxth	r3, r3
 80050da:	3b01      	subs	r3, #1
 80050dc:	b29a      	uxth	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d11b      	bne.n	8005128 <HAL_I2C_Mem_Write+0x180>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d017      	beq.n	8005128 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	781a      	ldrb	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511e:	b29b      	uxth	r3, r3
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1aa      	bne.n	8005086 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 ff6a 	bl	800600e <I2C_WaitOnBTFFlagUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00d      	beq.n	800515c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	2b04      	cmp	r3, #4
 8005146:	d107      	bne.n	8005158 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005156:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e016      	b.n	800518a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800516a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005184:	2300      	movs	r3, #0
 8005186:	e000      	b.n	800518a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005188:	2302      	movs	r3, #2
  }
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	00100002 	.word	0x00100002
 8005198:	ffff0000 	.word	0xffff0000

0800519c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b08c      	sub	sp, #48	; 0x30
 80051a0:	af02      	add	r7, sp, #8
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	4608      	mov	r0, r1
 80051a6:	4611      	mov	r1, r2
 80051a8:	461a      	mov	r2, r3
 80051aa:	4603      	mov	r3, r0
 80051ac:	817b      	strh	r3, [r7, #10]
 80051ae:	460b      	mov	r3, r1
 80051b0:	813b      	strh	r3, [r7, #8]
 80051b2:	4613      	mov	r3, r2
 80051b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051b6:	f7fe fc1d 	bl	80039f4 <HAL_GetTick>
 80051ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	f040 8208 	bne.w	80055da <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	2319      	movs	r3, #25
 80051d0:	2201      	movs	r2, #1
 80051d2:	497b      	ldr	r1, [pc, #492]	; (80053c0 <HAL_I2C_Mem_Read+0x224>)
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 fe03 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80051e0:	2302      	movs	r3, #2
 80051e2:	e1fb      	b.n	80055dc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d101      	bne.n	80051f2 <HAL_I2C_Mem_Read+0x56>
 80051ee:	2302      	movs	r3, #2
 80051f0:	e1f4      	b.n	80055dc <HAL_I2C_Mem_Read+0x440>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b01      	cmp	r3, #1
 8005206:	d007      	beq.n	8005218 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0201 	orr.w	r2, r2, #1
 8005216:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005226:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2222      	movs	r2, #34	; 0x22
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2240      	movs	r2, #64	; 0x40
 8005234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005242:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005248:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524e:	b29a      	uxth	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4a5b      	ldr	r2, [pc, #364]	; (80053c4 <HAL_I2C_Mem_Read+0x228>)
 8005258:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800525a:	88f8      	ldrh	r0, [r7, #6]
 800525c:	893a      	ldrh	r2, [r7, #8]
 800525e:	8979      	ldrh	r1, [r7, #10]
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	9301      	str	r3, [sp, #4]
 8005264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	4603      	mov	r3, r0
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 fcd0 	bl	8005c10 <I2C_RequestMemoryRead>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e1b0      	b.n	80055dc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800527e:	2b00      	cmp	r3, #0
 8005280:	d113      	bne.n	80052aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005282:	2300      	movs	r3, #0
 8005284:	623b      	str	r3, [r7, #32]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	623b      	str	r3, [r7, #32]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	623b      	str	r3, [r7, #32]
 8005296:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	e184      	b.n	80055b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d11b      	bne.n	80052ea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052c2:	2300      	movs	r3, #0
 80052c4:	61fb      	str	r3, [r7, #28]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	61fb      	str	r3, [r7, #28]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	61fb      	str	r3, [r7, #28]
 80052d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	e164      	b.n	80055b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d11b      	bne.n	800532a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005300:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005310:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005312:	2300      	movs	r3, #0
 8005314:	61bb      	str	r3, [r7, #24]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	61bb      	str	r3, [r7, #24]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	61bb      	str	r3, [r7, #24]
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	e144      	b.n	80055b4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005340:	e138      	b.n	80055b4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005346:	2b03      	cmp	r3, #3
 8005348:	f200 80f1 	bhi.w	800552e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005350:	2b01      	cmp	r3, #1
 8005352:	d123      	bne.n	800539c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005356:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 fe99 	bl	8006090 <I2C_WaitOnRXNEFlagUntilTimeout>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e139      	b.n	80055dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691a      	ldr	r2, [r3, #16]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	855a      	strh	r2, [r3, #42]	; 0x2a
 800539a:	e10b      	b.n	80055b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d14e      	bne.n	8005442 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053aa:	2200      	movs	r2, #0
 80053ac:	4906      	ldr	r1, [pc, #24]	; (80053c8 <HAL_I2C_Mem_Read+0x22c>)
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 fd16 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d008      	beq.n	80053cc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e10e      	b.n	80055dc <HAL_I2C_Mem_Read+0x440>
 80053be:	bf00      	nop
 80053c0:	00100002 	.word	0x00100002
 80053c4:	ffff0000 	.word	0xffff0000
 80053c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691a      	ldr	r2, [r3, #16]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005404:	b29b      	uxth	r3, r3
 8005406:	3b01      	subs	r3, #1
 8005408:	b29a      	uxth	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	691a      	ldr	r2, [r3, #16]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542a:	3b01      	subs	r3, #1
 800542c:	b29a      	uxth	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005436:	b29b      	uxth	r3, r3
 8005438:	3b01      	subs	r3, #1
 800543a:	b29a      	uxth	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005440:	e0b8      	b.n	80055b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005448:	2200      	movs	r2, #0
 800544a:	4966      	ldr	r1, [pc, #408]	; (80055e4 <HAL_I2C_Mem_Read+0x448>)
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 fcc7 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e0bf      	b.n	80055dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800546a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691a      	ldr	r2, [r3, #16]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	1c5a      	adds	r2, r3, #1
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005494:	b29b      	uxth	r3, r3
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a4:	2200      	movs	r2, #0
 80054a6:	494f      	ldr	r1, [pc, #316]	; (80055e4 <HAL_I2C_Mem_Read+0x448>)
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 fc99 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e091      	b.n	80055dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	b2d2      	uxtb	r2, r2
 80054d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	b2d2      	uxtb	r2, r2
 8005506:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005516:	3b01      	subs	r3, #1
 8005518:	b29a      	uxth	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005522:	b29b      	uxth	r3, r3
 8005524:	3b01      	subs	r3, #1
 8005526:	b29a      	uxth	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800552c:	e042      	b.n	80055b4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800552e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005530:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 fdac 	bl	8006090 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e04c      	b.n	80055dc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800555e:	3b01      	subs	r3, #1
 8005560:	b29a      	uxth	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556a:	b29b      	uxth	r3, r3
 800556c:	3b01      	subs	r3, #1
 800556e:	b29a      	uxth	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b04      	cmp	r3, #4
 8005580:	d118      	bne.n	80055b4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691a      	ldr	r2, [r3, #16]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800559e:	3b01      	subs	r3, #1
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	3b01      	subs	r3, #1
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f47f aec2 	bne.w	8005342 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80055d6:	2300      	movs	r3, #0
 80055d8:	e000      	b.n	80055dc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80055da:	2302      	movs	r3, #2
  }
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3728      	adds	r7, #40	; 0x28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	00010004 	.word	0x00010004

080055e8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08a      	sub	sp, #40	; 0x28
 80055ec:	af02      	add	r7, sp, #8
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	607a      	str	r2, [r7, #4]
 80055f2:	603b      	str	r3, [r7, #0]
 80055f4:	460b      	mov	r3, r1
 80055f6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80055f8:	f7fe f9fc 	bl	80039f4 <HAL_GetTick>
 80055fc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80055fe:	2300      	movs	r3, #0
 8005600:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b20      	cmp	r3, #32
 800560c:	f040 8111 	bne.w	8005832 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	2319      	movs	r3, #25
 8005616:	2201      	movs	r2, #1
 8005618:	4988      	ldr	r1, [pc, #544]	; (800583c <HAL_I2C_IsDeviceReady+0x254>)
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 fbe0 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005626:	2302      	movs	r3, #2
 8005628:	e104      	b.n	8005834 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_I2C_IsDeviceReady+0x50>
 8005634:	2302      	movs	r3, #2
 8005636:	e0fd      	b.n	8005834 <HAL_I2C_IsDeviceReady+0x24c>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b01      	cmp	r3, #1
 800564c:	d007      	beq.n	800565e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f042 0201 	orr.w	r2, r2, #1
 800565c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800566c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2224      	movs	r2, #36	; 0x24
 8005672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4a70      	ldr	r2, [pc, #448]	; (8005840 <HAL_I2C_IsDeviceReady+0x258>)
 8005680:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005690:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2200      	movs	r2, #0
 800569a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 fb9e 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00d      	beq.n	80056c6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b8:	d103      	bne.n	80056c2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056c0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e0b6      	b.n	8005834 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056c6:	897b      	ldrh	r3, [r7, #10]
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	461a      	mov	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056d4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80056d6:	f7fe f98d 	bl	80039f4 <HAL_GetTick>
 80056da:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	bf0c      	ite	eq
 80056ea:	2301      	moveq	r3, #1
 80056ec:	2300      	movne	r3, #0
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005700:	bf0c      	ite	eq
 8005702:	2301      	moveq	r3, #1
 8005704:	2300      	movne	r3, #0
 8005706:	b2db      	uxtb	r3, r3
 8005708:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800570a:	e025      	b.n	8005758 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800570c:	f7fe f972 	bl	80039f4 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d302      	bcc.n	8005722 <HAL_I2C_IsDeviceReady+0x13a>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d103      	bne.n	800572a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	22a0      	movs	r2, #160	; 0xa0
 8005726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b02      	cmp	r3, #2
 8005736:	bf0c      	ite	eq
 8005738:	2301      	moveq	r3, #1
 800573a:	2300      	movne	r3, #0
 800573c:	b2db      	uxtb	r3, r3
 800573e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800574a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800574e:	bf0c      	ite	eq
 8005750:	2301      	moveq	r3, #1
 8005752:	2300      	movne	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2ba0      	cmp	r3, #160	; 0xa0
 8005762:	d005      	beq.n	8005770 <HAL_I2C_IsDeviceReady+0x188>
 8005764:	7dfb      	ldrb	r3, [r7, #23]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d102      	bne.n	8005770 <HAL_I2C_IsDeviceReady+0x188>
 800576a:	7dbb      	ldrb	r3, [r7, #22]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0cd      	beq.n	800570c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2220      	movs	r2, #32
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b02      	cmp	r3, #2
 8005784:	d129      	bne.n	80057da <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005794:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005796:	2300      	movs	r3, #0
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	2319      	movs	r3, #25
 80057b2:	2201      	movs	r2, #1
 80057b4:	4921      	ldr	r1, [pc, #132]	; (800583c <HAL_I2C_IsDeviceReady+0x254>)
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 fb12 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e036      	b.n	8005834 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	e02c      	b.n	8005834 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057f2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	2319      	movs	r3, #25
 80057fa:	2201      	movs	r2, #1
 80057fc:	490f      	ldr	r1, [pc, #60]	; (800583c <HAL_I2C_IsDeviceReady+0x254>)
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 faee 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e012      	b.n	8005834 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	3301      	adds	r3, #1
 8005812:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	429a      	cmp	r2, r3
 800581a:	f4ff af32 	bcc.w	8005682 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2220      	movs	r2, #32
 8005822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e000      	b.n	8005834 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005832:	2302      	movs	r3, #2
  }
}
 8005834:	4618      	mov	r0, r3
 8005836:	3720      	adds	r7, #32
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	00100002 	.word	0x00100002
 8005840:	ffff0000 	.word	0xffff0000

08005844 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b088      	sub	sp, #32
 8005848:	af02      	add	r7, sp, #8
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	607a      	str	r2, [r7, #4]
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	460b      	mov	r3, r1
 8005852:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005858:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b08      	cmp	r3, #8
 800585e:	d006      	beq.n	800586e <I2C_MasterRequestWrite+0x2a>
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d003      	beq.n	800586e <I2C_MasterRequestWrite+0x2a>
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800586c:	d108      	bne.n	8005880 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	e00b      	b.n	8005898 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005884:	2b12      	cmp	r3, #18
 8005886:	d107      	bne.n	8005898 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005896:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 fa9b 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00d      	beq.n	80058cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058be:	d103      	bne.n	80058c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e035      	b.n	8005938 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058d4:	d108      	bne.n	80058e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058d6:	897b      	ldrh	r3, [r7, #10]
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	461a      	mov	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058e4:	611a      	str	r2, [r3, #16]
 80058e6:	e01b      	b.n	8005920 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058e8:	897b      	ldrh	r3, [r7, #10]
 80058ea:	11db      	asrs	r3, r3, #7
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	f003 0306 	and.w	r3, r3, #6
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	f063 030f 	orn	r3, r3, #15
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	490e      	ldr	r1, [pc, #56]	; (8005940 <I2C_MasterRequestWrite+0xfc>)
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f000 fac1 	bl	8005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e010      	b.n	8005938 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005916:	897b      	ldrh	r3, [r7, #10]
 8005918:	b2da      	uxtb	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	4907      	ldr	r1, [pc, #28]	; (8005944 <I2C_MasterRequestWrite+0x100>)
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 fab1 	bl	8005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e000      	b.n	8005938 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3718      	adds	r7, #24
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	00010008 	.word	0x00010008
 8005944:	00010002 	.word	0x00010002

08005948 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af02      	add	r7, sp, #8
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	607a      	str	r2, [r7, #4]
 8005952:	603b      	str	r3, [r7, #0]
 8005954:	460b      	mov	r3, r1
 8005956:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800596c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b08      	cmp	r3, #8
 8005972:	d006      	beq.n	8005982 <I2C_MasterRequestRead+0x3a>
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d003      	beq.n	8005982 <I2C_MasterRequestRead+0x3a>
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005980:	d108      	bne.n	8005994 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	e00b      	b.n	80059ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005998:	2b11      	cmp	r3, #17
 800599a:	d107      	bne.n	80059ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 fa11 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00d      	beq.n	80059e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d2:	d103      	bne.n	80059dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e079      	b.n	8005ad4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059e8:	d108      	bne.n	80059fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80059ea:	897b      	ldrh	r3, [r7, #10]
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	f043 0301 	orr.w	r3, r3, #1
 80059f2:	b2da      	uxtb	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	611a      	str	r2, [r3, #16]
 80059fa:	e05f      	b.n	8005abc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80059fc:	897b      	ldrh	r3, [r7, #10]
 80059fe:	11db      	asrs	r3, r3, #7
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	f003 0306 	and.w	r3, r3, #6
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	f063 030f 	orn	r3, r3, #15
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	4930      	ldr	r1, [pc, #192]	; (8005adc <I2C_MasterRequestRead+0x194>)
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 fa37 	bl	8005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e054      	b.n	8005ad4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005a2a:	897b      	ldrh	r3, [r7, #10]
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	4929      	ldr	r1, [pc, #164]	; (8005ae0 <I2C_MasterRequestRead+0x198>)
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 fa27 	bl	8005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e044      	b.n	8005ad4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	613b      	str	r3, [r7, #16]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	613b      	str	r3, [r7, #16]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	613b      	str	r3, [r7, #16]
 8005a5e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a6e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 f9af 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00d      	beq.n	8005aa4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a96:	d103      	bne.n	8005aa0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a9e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e017      	b.n	8005ad4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005aa4:	897b      	ldrh	r3, [r7, #10]
 8005aa6:	11db      	asrs	r3, r3, #7
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	f003 0306 	and.w	r3, r3, #6
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	f063 030e 	orn	r3, r3, #14
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	4907      	ldr	r1, [pc, #28]	; (8005ae0 <I2C_MasterRequestRead+0x198>)
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 f9e3 	bl	8005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e000      	b.n	8005ad4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3718      	adds	r7, #24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	00010008 	.word	0x00010008
 8005ae0:	00010002 	.word	0x00010002

08005ae4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b088      	sub	sp, #32
 8005ae8:	af02      	add	r7, sp, #8
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	4608      	mov	r0, r1
 8005aee:	4611      	mov	r1, r2
 8005af0:	461a      	mov	r2, r3
 8005af2:	4603      	mov	r3, r0
 8005af4:	817b      	strh	r3, [r7, #10]
 8005af6:	460b      	mov	r3, r1
 8005af8:	813b      	strh	r3, [r7, #8]
 8005afa:	4613      	mov	r3, r2
 8005afc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 f960 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00d      	beq.n	8005b42 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b34:	d103      	bne.n	8005b3e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e05f      	b.n	8005c02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b42:	897b      	ldrh	r3, [r7, #10]
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	461a      	mov	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	6a3a      	ldr	r2, [r7, #32]
 8005b56:	492d      	ldr	r1, [pc, #180]	; (8005c0c <I2C_RequestMemoryWrite+0x128>)
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 f998 	bl	8005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e04c      	b.n	8005c02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b68:	2300      	movs	r3, #0
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	617b      	str	r3, [r7, #20]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b80:	6a39      	ldr	r1, [r7, #32]
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 fa02 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00d      	beq.n	8005baa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	d107      	bne.n	8005ba6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ba4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e02b      	b.n	8005c02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005baa:	88fb      	ldrh	r3, [r7, #6]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d105      	bne.n	8005bbc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bb0:	893b      	ldrh	r3, [r7, #8]
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	611a      	str	r2, [r3, #16]
 8005bba:	e021      	b.n	8005c00 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005bbc:	893b      	ldrh	r3, [r7, #8]
 8005bbe:	0a1b      	lsrs	r3, r3, #8
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bcc:	6a39      	ldr	r1, [r7, #32]
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 f9dc 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00d      	beq.n	8005bf6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d107      	bne.n	8005bf2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bf0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e005      	b.n	8005c02 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bf6:	893b      	ldrh	r3, [r7, #8]
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	00010002 	.word	0x00010002

08005c10 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b088      	sub	sp, #32
 8005c14:	af02      	add	r7, sp, #8
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	4608      	mov	r0, r1
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	4603      	mov	r3, r0
 8005c20:	817b      	strh	r3, [r7, #10]
 8005c22:	460b      	mov	r3, r1
 8005c24:	813b      	strh	r3, [r7, #8]
 8005c26:	4613      	mov	r3, r2
 8005c28:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c38:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f000 f8c2 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00d      	beq.n	8005c7e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c70:	d103      	bne.n	8005c7a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e0aa      	b.n	8005dd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c7e:	897b      	ldrh	r3, [r7, #10]
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	461a      	mov	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	6a3a      	ldr	r2, [r7, #32]
 8005c92:	4952      	ldr	r1, [pc, #328]	; (8005ddc <I2C_RequestMemoryRead+0x1cc>)
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 f8fa 	bl	8005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e097      	b.n	8005dd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	617b      	str	r3, [r7, #20]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	617b      	str	r3, [r7, #20]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cbc:	6a39      	ldr	r1, [r7, #32]
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 f964 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00d      	beq.n	8005ce6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d107      	bne.n	8005ce2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e076      	b.n	8005dd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ce6:	88fb      	ldrh	r3, [r7, #6]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d105      	bne.n	8005cf8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cec:	893b      	ldrh	r3, [r7, #8]
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	611a      	str	r2, [r3, #16]
 8005cf6:	e021      	b.n	8005d3c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005cf8:	893b      	ldrh	r3, [r7, #8]
 8005cfa:	0a1b      	lsrs	r3, r3, #8
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d08:	6a39      	ldr	r1, [r7, #32]
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 f93e 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00d      	beq.n	8005d32 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	d107      	bne.n	8005d2e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e050      	b.n	8005dd4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d32:	893b      	ldrh	r3, [r7, #8]
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3e:	6a39      	ldr	r1, [r7, #32]
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 f923 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00d      	beq.n	8005d68 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d107      	bne.n	8005d64 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e035      	b.n	8005dd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d76:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 f82b 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00d      	beq.n	8005dac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d9e:	d103      	bne.n	8005da8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005da6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e013      	b.n	8005dd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005dac:	897b      	ldrh	r3, [r7, #10]
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	f043 0301 	orr.w	r3, r3, #1
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	6a3a      	ldr	r2, [r7, #32]
 8005dc0:	4906      	ldr	r1, [pc, #24]	; (8005ddc <I2C_RequestMemoryRead+0x1cc>)
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 f863 	bl	8005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e000      	b.n	8005dd4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	00010002 	.word	0x00010002

08005de0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	4613      	mov	r3, r2
 8005dee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005df0:	e025      	b.n	8005e3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df8:	d021      	beq.n	8005e3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dfa:	f7fd fdfb 	bl	80039f4 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d302      	bcc.n	8005e10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d116      	bne.n	8005e3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	f043 0220 	orr.w	r2, r3, #32
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e023      	b.n	8005e86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	0c1b      	lsrs	r3, r3, #16
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d10d      	bne.n	8005e64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	43da      	mvns	r2, r3
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4013      	ands	r3, r2
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	bf0c      	ite	eq
 8005e5a:	2301      	moveq	r3, #1
 8005e5c:	2300      	movne	r3, #0
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	e00c      	b.n	8005e7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	43da      	mvns	r2, r3
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	bf0c      	ite	eq
 8005e76:	2301      	moveq	r3, #1
 8005e78:	2300      	movne	r3, #0
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	79fb      	ldrb	r3, [r7, #7]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d0b6      	beq.n	8005df2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	607a      	str	r2, [r7, #4]
 8005e9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e9c:	e051      	b.n	8005f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eac:	d123      	bne.n	8005ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ebc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ec6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	f043 0204 	orr.w	r2, r3, #4
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e046      	b.n	8005f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efc:	d021      	beq.n	8005f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005efe:	f7fd fd79 	bl	80039f4 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d302      	bcc.n	8005f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d116      	bne.n	8005f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	f043 0220 	orr.w	r2, r3, #32
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e020      	b.n	8005f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	0c1b      	lsrs	r3, r3, #16
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d10c      	bne.n	8005f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	43da      	mvns	r2, r3
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	4013      	ands	r3, r2
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	bf14      	ite	ne
 8005f5e:	2301      	movne	r3, #1
 8005f60:	2300      	moveq	r3, #0
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	e00b      	b.n	8005f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	43da      	mvns	r2, r3
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	4013      	ands	r3, r2
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	bf14      	ite	ne
 8005f78:	2301      	movne	r3, #1
 8005f7a:	2300      	moveq	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d18d      	bne.n	8005e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f98:	e02d      	b.n	8005ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 f8ce 	bl	800613c <I2C_IsAcknowledgeFailed>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e02d      	b.n	8006006 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb0:	d021      	beq.n	8005ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fb2:	f7fd fd1f 	bl	80039f4 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d302      	bcc.n	8005fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d116      	bne.n	8005ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe2:	f043 0220 	orr.w	r2, r3, #32
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e007      	b.n	8006006 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006000:	2b80      	cmp	r3, #128	; 0x80
 8006002:	d1ca      	bne.n	8005f9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	60f8      	str	r0, [r7, #12]
 8006016:	60b9      	str	r1, [r7, #8]
 8006018:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800601a:	e02d      	b.n	8006078 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 f88d 	bl	800613c <I2C_IsAcknowledgeFailed>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e02d      	b.n	8006088 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006032:	d021      	beq.n	8006078 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006034:	f7fd fcde 	bl	80039f4 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	429a      	cmp	r2, r3
 8006042:	d302      	bcc.n	800604a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d116      	bne.n	8006078 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006064:	f043 0220 	orr.w	r2, r3, #32
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e007      	b.n	8006088 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	f003 0304 	and.w	r3, r3, #4
 8006082:	2b04      	cmp	r3, #4
 8006084:	d1ca      	bne.n	800601c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800609c:	e042      	b.n	8006124 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	f003 0310 	and.w	r3, r3, #16
 80060a8:	2b10      	cmp	r3, #16
 80060aa:	d119      	bne.n	80060e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f06f 0210 	mvn.w	r2, #16
 80060b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2220      	movs	r2, #32
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e029      	b.n	8006134 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060e0:	f7fd fc88 	bl	80039f4 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d302      	bcc.n	80060f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d116      	bne.n	8006124 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2220      	movs	r2, #32
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006110:	f043 0220 	orr.w	r2, r3, #32
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e007      	b.n	8006134 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612e:	2b40      	cmp	r3, #64	; 0x40
 8006130:	d1b5      	bne.n	800609e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800614e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006152:	d11b      	bne.n	800618c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800615c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2220      	movs	r2, #32
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006178:	f043 0204 	orr.w	r2, r3, #4
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e000      	b.n	800618e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800619a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800619c:	b08f      	sub	sp, #60	; 0x3c
 800619e:	af0a      	add	r7, sp, #40	; 0x28
 80061a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e10f      	b.n	80063cc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d106      	bne.n	80061cc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f009 fee8 	bl	800ff9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2203      	movs	r2, #3
 80061d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d102      	bne.n	80061e6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f002 ffdf 	bl	80091ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	603b      	str	r3, [r7, #0]
 80061f6:	687e      	ldr	r6, [r7, #4]
 80061f8:	466d      	mov	r5, sp
 80061fa:	f106 0410 	add.w	r4, r6, #16
 80061fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006204:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006206:	e894 0003 	ldmia.w	r4, {r0, r1}
 800620a:	e885 0003 	stmia.w	r5, {r0, r1}
 800620e:	1d33      	adds	r3, r6, #4
 8006210:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006212:	6838      	ldr	r0, [r7, #0]
 8006214:	f002 feb6 	bl	8008f84 <USB_CoreInit>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d005      	beq.n	800622a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2202      	movs	r2, #2
 8006222:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e0d0      	b.n	80063cc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2100      	movs	r1, #0
 8006230:	4618      	mov	r0, r3
 8006232:	f002 ffcd 	bl	80091d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006236:	2300      	movs	r3, #0
 8006238:	73fb      	strb	r3, [r7, #15]
 800623a:	e04a      	b.n	80062d2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800623c:	7bfa      	ldrb	r2, [r7, #15]
 800623e:	6879      	ldr	r1, [r7, #4]
 8006240:	4613      	mov	r3, r2
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	4413      	add	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	440b      	add	r3, r1
 800624a:	333d      	adds	r3, #61	; 0x3d
 800624c:	2201      	movs	r2, #1
 800624e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006250:	7bfa      	ldrb	r2, [r7, #15]
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	4613      	mov	r3, r2
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	4413      	add	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	440b      	add	r3, r1
 800625e:	333c      	adds	r3, #60	; 0x3c
 8006260:	7bfa      	ldrb	r2, [r7, #15]
 8006262:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006264:	7bfa      	ldrb	r2, [r7, #15]
 8006266:	7bfb      	ldrb	r3, [r7, #15]
 8006268:	b298      	uxth	r0, r3
 800626a:	6879      	ldr	r1, [r7, #4]
 800626c:	4613      	mov	r3, r2
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	4413      	add	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	440b      	add	r3, r1
 8006276:	3344      	adds	r3, #68	; 0x44
 8006278:	4602      	mov	r2, r0
 800627a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800627c:	7bfa      	ldrb	r2, [r7, #15]
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	4613      	mov	r3, r2
 8006282:	00db      	lsls	r3, r3, #3
 8006284:	4413      	add	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	440b      	add	r3, r1
 800628a:	3340      	adds	r3, #64	; 0x40
 800628c:	2200      	movs	r2, #0
 800628e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006290:	7bfa      	ldrb	r2, [r7, #15]
 8006292:	6879      	ldr	r1, [r7, #4]
 8006294:	4613      	mov	r3, r2
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	4413      	add	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	440b      	add	r3, r1
 800629e:	3348      	adds	r3, #72	; 0x48
 80062a0:	2200      	movs	r2, #0
 80062a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80062a4:	7bfa      	ldrb	r2, [r7, #15]
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	4613      	mov	r3, r2
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	4413      	add	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	440b      	add	r3, r1
 80062b2:	334c      	adds	r3, #76	; 0x4c
 80062b4:	2200      	movs	r2, #0
 80062b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80062b8:	7bfa      	ldrb	r2, [r7, #15]
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	4613      	mov	r3, r2
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	4413      	add	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	440b      	add	r3, r1
 80062c6:	3354      	adds	r3, #84	; 0x54
 80062c8:	2200      	movs	r2, #0
 80062ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
 80062ce:	3301      	adds	r3, #1
 80062d0:	73fb      	strb	r3, [r7, #15]
 80062d2:	7bfa      	ldrb	r2, [r7, #15]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d3af      	bcc.n	800623c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062dc:	2300      	movs	r3, #0
 80062de:	73fb      	strb	r3, [r7, #15]
 80062e0:	e044      	b.n	800636c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80062e2:	7bfa      	ldrb	r2, [r7, #15]
 80062e4:	6879      	ldr	r1, [r7, #4]
 80062e6:	4613      	mov	r3, r2
 80062e8:	00db      	lsls	r3, r3, #3
 80062ea:	4413      	add	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	440b      	add	r3, r1
 80062f0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80062f4:	2200      	movs	r2, #0
 80062f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80062f8:	7bfa      	ldrb	r2, [r7, #15]
 80062fa:	6879      	ldr	r1, [r7, #4]
 80062fc:	4613      	mov	r3, r2
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	4413      	add	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	440b      	add	r3, r1
 8006306:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800630a:	7bfa      	ldrb	r2, [r7, #15]
 800630c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800630e:	7bfa      	ldrb	r2, [r7, #15]
 8006310:	6879      	ldr	r1, [r7, #4]
 8006312:	4613      	mov	r3, r2
 8006314:	00db      	lsls	r3, r3, #3
 8006316:	4413      	add	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	440b      	add	r3, r1
 800631c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006320:	2200      	movs	r2, #0
 8006322:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006324:	7bfa      	ldrb	r2, [r7, #15]
 8006326:	6879      	ldr	r1, [r7, #4]
 8006328:	4613      	mov	r3, r2
 800632a:	00db      	lsls	r3, r3, #3
 800632c:	4413      	add	r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	440b      	add	r3, r1
 8006332:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006336:	2200      	movs	r2, #0
 8006338:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800633a:	7bfa      	ldrb	r2, [r7, #15]
 800633c:	6879      	ldr	r1, [r7, #4]
 800633e:	4613      	mov	r3, r2
 8006340:	00db      	lsls	r3, r3, #3
 8006342:	4413      	add	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	440b      	add	r3, r1
 8006348:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800634c:	2200      	movs	r2, #0
 800634e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006350:	7bfa      	ldrb	r2, [r7, #15]
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	4613      	mov	r3, r2
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	440b      	add	r3, r1
 800635e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	3301      	adds	r3, #1
 800636a:	73fb      	strb	r3, [r7, #15]
 800636c:	7bfa      	ldrb	r2, [r7, #15]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	429a      	cmp	r2, r3
 8006374:	d3b5      	bcc.n	80062e2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	603b      	str	r3, [r7, #0]
 800637c:	687e      	ldr	r6, [r7, #4]
 800637e:	466d      	mov	r5, sp
 8006380:	f106 0410 	add.w	r4, r6, #16
 8006384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800638a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800638c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006390:	e885 0003 	stmia.w	r5, {r0, r1}
 8006394:	1d33      	adds	r3, r6, #4
 8006396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006398:	6838      	ldr	r0, [r7, #0]
 800639a:	f002 ff65 	bl	8009268 <USB_DevInit>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d005      	beq.n	80063b0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e00d      	b.n	80063cc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f004 f8b4 	bl	800a532 <USB_DevDisconnect>

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080063d4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d101      	bne.n	80063f0 <HAL_PCD_Start+0x1c>
 80063ec:	2302      	movs	r3, #2
 80063ee:	e020      	b.n	8006432 <HAL_PCD_Start+0x5e>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d109      	bne.n	8006414 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006404:	2b01      	cmp	r3, #1
 8006406:	d005      	beq.n	8006414 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4618      	mov	r0, r3
 800641a:	f002 feb7 	bl	800918c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4618      	mov	r0, r3
 8006424:	f004 f864 	bl	800a4f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800643a:	b590      	push	{r4, r7, lr}
 800643c:	b08d      	sub	sp, #52	; 0x34
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4618      	mov	r0, r3
 8006452:	f004 f922 	bl	800a69a <USB_GetMode>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	f040 848a 	bne.w	8006d72 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4618      	mov	r0, r3
 8006464:	f004 f886 	bl	800a574 <USB_ReadInterrupts>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 8480 	beq.w	8006d70 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	0a1b      	lsrs	r3, r3, #8
 800647a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4618      	mov	r0, r3
 800648a:	f004 f873 	bl	800a574 <USB_ReadInterrupts>
 800648e:	4603      	mov	r3, r0
 8006490:	f003 0302 	and.w	r3, r3, #2
 8006494:	2b02      	cmp	r3, #2
 8006496:	d107      	bne.n	80064a8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	695a      	ldr	r2, [r3, #20]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f002 0202 	and.w	r2, r2, #2
 80064a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f004 f861 	bl	800a574 <USB_ReadInterrupts>
 80064b2:	4603      	mov	r3, r0
 80064b4:	f003 0310 	and.w	r3, r3, #16
 80064b8:	2b10      	cmp	r3, #16
 80064ba:	d161      	bne.n	8006580 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699a      	ldr	r2, [r3, #24]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 0210 	bic.w	r2, r2, #16
 80064ca:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	f003 020f 	and.w	r2, r3, #15
 80064d8:	4613      	mov	r3, r2
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	4413      	add	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	4413      	add	r3, r2
 80064e8:	3304      	adds	r3, #4
 80064ea:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	0c5b      	lsrs	r3, r3, #17
 80064f0:	f003 030f 	and.w	r3, r3, #15
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d124      	bne.n	8006542 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80064fe:	4013      	ands	r3, r2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d035      	beq.n	8006570 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	091b      	lsrs	r3, r3, #4
 800650c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800650e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006512:	b29b      	uxth	r3, r3
 8006514:	461a      	mov	r2, r3
 8006516:	6a38      	ldr	r0, [r7, #32]
 8006518:	f003 fe98 	bl	800a24c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	691a      	ldr	r2, [r3, #16]
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	091b      	lsrs	r3, r3, #4
 8006524:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006528:	441a      	add	r2, r3
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	6a1a      	ldr	r2, [r3, #32]
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	091b      	lsrs	r3, r3, #4
 8006536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800653a:	441a      	add	r2, r3
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	621a      	str	r2, [r3, #32]
 8006540:	e016      	b.n	8006570 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	0c5b      	lsrs	r3, r3, #17
 8006546:	f003 030f 	and.w	r3, r3, #15
 800654a:	2b06      	cmp	r3, #6
 800654c:	d110      	bne.n	8006570 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006554:	2208      	movs	r2, #8
 8006556:	4619      	mov	r1, r3
 8006558:	6a38      	ldr	r0, [r7, #32]
 800655a:	f003 fe77 	bl	800a24c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	6a1a      	ldr	r2, [r3, #32]
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	091b      	lsrs	r3, r3, #4
 8006566:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800656a:	441a      	add	r2, r3
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699a      	ldr	r2, [r3, #24]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0210 	orr.w	r2, r2, #16
 800657e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4618      	mov	r0, r3
 8006586:	f003 fff5 	bl	800a574 <USB_ReadInterrupts>
 800658a:	4603      	mov	r3, r0
 800658c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006590:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006594:	f040 80a7 	bne.w	80066e6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f003 fffa 	bl	800a59a <USB_ReadDevAllOutEpInterrupt>
 80065a6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80065a8:	e099      	b.n	80066de <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80065aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 808e 	beq.w	80066d2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065bc:	b2d2      	uxtb	r2, r2
 80065be:	4611      	mov	r1, r2
 80065c0:	4618      	mov	r0, r3
 80065c2:	f004 f81e 	bl	800a602 <USB_ReadDevOutEPInterrupt>
 80065c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00c      	beq.n	80065ec <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065de:	461a      	mov	r2, r3
 80065e0:	2301      	movs	r3, #1
 80065e2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80065e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fec2 	bl	8007370 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	f003 0308 	and.w	r3, r3, #8
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00c      	beq.n	8006610 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006602:	461a      	mov	r2, r3
 8006604:	2308      	movs	r3, #8
 8006606:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006608:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 ff98 	bl	8007540 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f003 0310 	and.w	r3, r3, #16
 8006616:	2b00      	cmp	r3, #0
 8006618:	d008      	beq.n	800662c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006626:	461a      	mov	r2, r3
 8006628:	2310      	movs	r3, #16
 800662a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d030      	beq.n	8006698 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663e:	2b80      	cmp	r3, #128	; 0x80
 8006640:	d109      	bne.n	8006656 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	69fa      	ldr	r2, [r7, #28]
 800664c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006650:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006654:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006658:	4613      	mov	r3, r2
 800665a:	00db      	lsls	r3, r3, #3
 800665c:	4413      	add	r3, r2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	4413      	add	r3, r2
 8006668:	3304      	adds	r3, #4
 800666a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	78db      	ldrb	r3, [r3, #3]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d108      	bne.n	8006686 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2200      	movs	r2, #0
 8006678:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667c:	b2db      	uxtb	r3, r3
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f009 fd87 	bl	8010194 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	4413      	add	r3, r2
 800668e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006692:	461a      	mov	r2, r3
 8006694:	2302      	movs	r3, #2
 8006696:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	f003 0320 	and.w	r3, r3, #32
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d008      	beq.n	80066b4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ae:	461a      	mov	r2, r3
 80066b0:	2320      	movs	r3, #32
 80066b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d009      	beq.n	80066d2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80066be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ca:	461a      	mov	r2, r3
 80066cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80066d0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	3301      	adds	r3, #1
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80066d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066da:	085b      	lsrs	r3, r3, #1
 80066dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80066de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f47f af62 	bne.w	80065aa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f003 ff42 	bl	800a574 <USB_ReadInterrupts>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066fa:	f040 80db 	bne.w	80068b4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4618      	mov	r0, r3
 8006704:	f003 ff63 	bl	800a5ce <USB_ReadDevAllInEpInterrupt>
 8006708:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800670e:	e0cd      	b.n	80068ac <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 80c2 	beq.w	80068a0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006722:	b2d2      	uxtb	r2, r2
 8006724:	4611      	mov	r1, r2
 8006726:	4618      	mov	r0, r3
 8006728:	f003 ff89 	bl	800a63e <USB_ReadDevInEPInterrupt>
 800672c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	d057      	beq.n	80067e8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	f003 030f 	and.w	r3, r3, #15
 800673e:	2201      	movs	r2, #1
 8006740:	fa02 f303 	lsl.w	r3, r2, r3
 8006744:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	43db      	mvns	r3, r3
 8006752:	69f9      	ldr	r1, [r7, #28]
 8006754:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006758:	4013      	ands	r3, r2
 800675a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	4413      	add	r3, r2
 8006764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006768:	461a      	mov	r2, r3
 800676a:	2301      	movs	r3, #1
 800676c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d132      	bne.n	80067dc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006776:	6879      	ldr	r1, [r7, #4]
 8006778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677a:	4613      	mov	r3, r2
 800677c:	00db      	lsls	r3, r3, #3
 800677e:	4413      	add	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	440b      	add	r3, r1
 8006784:	334c      	adds	r3, #76	; 0x4c
 8006786:	6819      	ldr	r1, [r3, #0]
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800678c:	4613      	mov	r3, r2
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	4413      	add	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4403      	add	r3, r0
 8006796:	3348      	adds	r3, #72	; 0x48
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4419      	add	r1, r3
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067a0:	4613      	mov	r3, r2
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	4413      	add	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4403      	add	r3, r0
 80067aa:	334c      	adds	r3, #76	; 0x4c
 80067ac:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d113      	bne.n	80067dc <HAL_PCD_IRQHandler+0x3a2>
 80067b4:	6879      	ldr	r1, [r7, #4]
 80067b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067b8:	4613      	mov	r3, r2
 80067ba:	00db      	lsls	r3, r3, #3
 80067bc:	4413      	add	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	440b      	add	r3, r1
 80067c2:	3354      	adds	r3, #84	; 0x54
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d108      	bne.n	80067dc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6818      	ldr	r0, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80067d4:	461a      	mov	r2, r3
 80067d6:	2101      	movs	r1, #1
 80067d8:	f003 ff90 	bl	800a6fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	4619      	mov	r1, r3
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f009 fc5b 	bl	801009e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f003 0308 	and.w	r3, r3, #8
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d008      	beq.n	8006804 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fe:	461a      	mov	r2, r3
 8006800:	2308      	movs	r3, #8
 8006802:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	f003 0310 	and.w	r3, r3, #16
 800680a:	2b00      	cmp	r3, #0
 800680c:	d008      	beq.n	8006820 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681a:	461a      	mov	r2, r3
 800681c:	2310      	movs	r3, #16
 800681e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006826:	2b00      	cmp	r3, #0
 8006828:	d008      	beq.n	800683c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	4413      	add	r3, r2
 8006832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006836:	461a      	mov	r2, r3
 8006838:	2340      	movs	r3, #64	; 0x40
 800683a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d023      	beq.n	800688e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006846:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006848:	6a38      	ldr	r0, [r7, #32]
 800684a:	f002 fe71 	bl	8009530 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800684e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006850:	4613      	mov	r3, r2
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	4413      	add	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	3338      	adds	r3, #56	; 0x38
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	4413      	add	r3, r2
 800685e:	3304      	adds	r3, #4
 8006860:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	78db      	ldrb	r3, [r3, #3]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d108      	bne.n	800687c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	2200      	movs	r2, #0
 800686e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	b2db      	uxtb	r3, r3
 8006874:	4619      	mov	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f009 fc9e 	bl	80101b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006888:	461a      	mov	r2, r3
 800688a:	2302      	movs	r3, #2
 800688c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006894:	2b00      	cmp	r3, #0
 8006896:	d003      	beq.n	80068a0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006898:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fcdb 	bl	8007256 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	3301      	adds	r3, #1
 80068a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80068a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a8:	085b      	lsrs	r3, r3, #1
 80068aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80068ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f47f af2e 	bne.w	8006710 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f003 fe5b 	bl	800a574 <USB_ReadInterrupts>
 80068be:	4603      	mov	r3, r0
 80068c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068c8:	d122      	bne.n	8006910 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	69fa      	ldr	r2, [r7, #28]
 80068d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068d8:	f023 0301 	bic.w	r3, r3, #1
 80068dc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d108      	bne.n	80068fa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80068f0:	2100      	movs	r1, #0
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fec2 	bl	800767c <HAL_PCDEx_LPM_Callback>
 80068f8:	e002      	b.n	8006900 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f009 fc3c 	bl	8010178 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	695a      	ldr	r2, [r3, #20]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800690e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4618      	mov	r0, r3
 8006916:	f003 fe2d 	bl	800a574 <USB_ReadInterrupts>
 800691a:	4603      	mov	r3, r0
 800691c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006924:	d112      	bne.n	800694c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b01      	cmp	r3, #1
 8006934:	d102      	bne.n	800693c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f009 fbf8 	bl	801012c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	695a      	ldr	r2, [r3, #20]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800694a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4618      	mov	r0, r3
 8006952:	f003 fe0f 	bl	800a574 <USB_ReadInterrupts>
 8006956:	4603      	mov	r3, r0
 8006958:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800695c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006960:	f040 80b7 	bne.w	8006ad2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	69fa      	ldr	r2, [r7, #28]
 800696e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006972:	f023 0301 	bic.w	r3, r3, #1
 8006976:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2110      	movs	r1, #16
 800697e:	4618      	mov	r0, r3
 8006980:	f002 fdd6 	bl	8009530 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006984:	2300      	movs	r3, #0
 8006986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006988:	e046      	b.n	8006a18 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800698a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	4413      	add	r3, r2
 8006992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006996:	461a      	mov	r2, r3
 8006998:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800699c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800699e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069ae:	0151      	lsls	r1, r2, #5
 80069b0:	69fa      	ldr	r2, [r7, #28]
 80069b2:	440a      	add	r2, r1
 80069b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80069be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c0:	015a      	lsls	r2, r3, #5
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ca:	461a      	mov	r2, r3
 80069cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069d0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80069d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069e2:	0151      	lsls	r1, r2, #5
 80069e4:	69fa      	ldr	r2, [r7, #28]
 80069e6:	440a      	add	r2, r1
 80069e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80069f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a02:	0151      	lsls	r1, r2, #5
 8006a04:	69fa      	ldr	r2, [r7, #28]
 8006a06:	440a      	add	r2, r1
 8006a08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a10:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a14:	3301      	adds	r3, #1
 8006a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d3b3      	bcc.n	800698a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	69fa      	ldr	r2, [r7, #28]
 8006a2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a30:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006a34:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d016      	beq.n	8006a6c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a48:	69fa      	ldr	r2, [r7, #28]
 8006a4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a4e:	f043 030b 	orr.w	r3, r3, #11
 8006a52:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a5e:	69fa      	ldr	r2, [r7, #28]
 8006a60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a64:	f043 030b 	orr.w	r3, r3, #11
 8006a68:	6453      	str	r3, [r2, #68]	; 0x44
 8006a6a:	e015      	b.n	8006a98 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	69fa      	ldr	r2, [r7, #28]
 8006a76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a7e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006a82:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	69fa      	ldr	r2, [r7, #28]
 8006a8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a92:	f043 030b 	orr.w	r3, r3, #11
 8006a96:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	69fa      	ldr	r2, [r7, #28]
 8006aa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006aa6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006aaa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6818      	ldr	r0, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006abc:	461a      	mov	r2, r3
 8006abe:	f003 fe1d 	bl	800a6fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	695a      	ldr	r2, [r3, #20]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006ad0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f003 fd4c 	bl	800a574 <USB_ReadInterrupts>
 8006adc:	4603      	mov	r3, r0
 8006ade:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ae6:	d124      	bne.n	8006b32 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4618      	mov	r0, r3
 8006aee:	f003 fde2 	bl	800a6b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f002 fd97 	bl	800962a <USB_GetDevSpeed>
 8006afc:	4603      	mov	r3, r0
 8006afe:	461a      	mov	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681c      	ldr	r4, [r3, #0]
 8006b08:	f001 f9e8 	bl	8007edc <HAL_RCC_GetHCLKFreq>
 8006b0c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	461a      	mov	r2, r3
 8006b16:	4620      	mov	r0, r4
 8006b18:	f002 fa96 	bl	8009048 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f009 fae6 	bl	80100ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	695a      	ldr	r2, [r3, #20]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f003 fd1c 	bl	800a574 <USB_ReadInterrupts>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	f003 0308 	and.w	r3, r3, #8
 8006b42:	2b08      	cmp	r3, #8
 8006b44:	d10a      	bne.n	8006b5c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f009 fac3 	bl	80100d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	695a      	ldr	r2, [r3, #20]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f002 0208 	and.w	r2, r2, #8
 8006b5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f003 fd07 	bl	800a574 <USB_ReadInterrupts>
 8006b66:	4603      	mov	r3, r0
 8006b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b6c:	2b80      	cmp	r3, #128	; 0x80
 8006b6e:	d122      	bne.n	8006bb6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b80:	e014      	b.n	8006bac <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006b82:	6879      	ldr	r1, [r7, #4]
 8006b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b86:	4613      	mov	r3, r2
 8006b88:	00db      	lsls	r3, r3, #3
 8006b8a:	4413      	add	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	440b      	add	r3, r1
 8006b90:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d105      	bne.n	8006ba6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fb27 	bl	80071f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	3301      	adds	r3, #1
 8006baa:	627b      	str	r3, [r7, #36]	; 0x24
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d3e5      	bcc.n	8006b82 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f003 fcda 	bl	800a574 <USB_ReadInterrupts>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bca:	d13b      	bne.n	8006c44 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006bcc:	2301      	movs	r3, #1
 8006bce:	627b      	str	r3, [r7, #36]	; 0x24
 8006bd0:	e02b      	b.n	8006c2a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd4:	015a      	lsls	r2, r3, #5
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006be2:	6879      	ldr	r1, [r7, #4]
 8006be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be6:	4613      	mov	r3, r2
 8006be8:	00db      	lsls	r3, r3, #3
 8006bea:	4413      	add	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	440b      	add	r3, r1
 8006bf0:	3340      	adds	r3, #64	; 0x40
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d115      	bne.n	8006c24 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006bf8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	da12      	bge.n	8006c24 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006bfe:	6879      	ldr	r1, [r7, #4]
 8006c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c02:	4613      	mov	r3, r2
 8006c04:	00db      	lsls	r3, r3, #3
 8006c06:	4413      	add	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	440b      	add	r3, r1
 8006c0c:	333f      	adds	r3, #63	; 0x3f
 8006c0e:	2201      	movs	r2, #1
 8006c10:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fae8 	bl	80071f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	3301      	adds	r3, #1
 8006c28:	627b      	str	r3, [r7, #36]	; 0x24
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d3ce      	bcc.n	8006bd2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	695a      	ldr	r2, [r3, #20]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006c42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f003 fc93 	bl	800a574 <USB_ReadInterrupts>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c58:	d155      	bne.n	8006d06 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c5e:	e045      	b.n	8006cec <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c70:	6879      	ldr	r1, [r7, #4]
 8006c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c74:	4613      	mov	r3, r2
 8006c76:	00db      	lsls	r3, r3, #3
 8006c78:	4413      	add	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	440b      	add	r3, r1
 8006c7e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d12e      	bne.n	8006ce6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006c88:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	da2b      	bge.n	8006ce6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006c9a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d121      	bne.n	8006ce6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006ca2:	6879      	ldr	r1, [r7, #4]
 8006ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	00db      	lsls	r3, r3, #3
 8006caa:	4413      	add	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	440b      	add	r3, r1
 8006cb0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10a      	bne.n	8006ce6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	69fa      	ldr	r2, [r7, #28]
 8006cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ce2:	6053      	str	r3, [r2, #4]
            break;
 8006ce4:	e007      	b.n	8006cf6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	3301      	adds	r3, #1
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d3b4      	bcc.n	8006c60 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	695a      	ldr	r2, [r3, #20]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f003 fc32 	bl	800a574 <USB_ReadInterrupts>
 8006d10:	4603      	mov	r3, r0
 8006d12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d1a:	d10a      	bne.n	8006d32 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f009 fa5d 	bl	80101dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	695a      	ldr	r2, [r3, #20]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006d30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4618      	mov	r0, r3
 8006d38:	f003 fc1c 	bl	800a574 <USB_ReadInterrupts>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	f003 0304 	and.w	r3, r3, #4
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	d115      	bne.n	8006d72 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	f003 0304 	and.w	r3, r3, #4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d002      	beq.n	8006d5e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f009 fa4d 	bl	80101f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6859      	ldr	r1, [r3, #4]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	605a      	str	r2, [r3, #4]
 8006d6e:	e000      	b.n	8006d72 <HAL_PCD_IRQHandler+0x938>
      return;
 8006d70:	bf00      	nop
    }
  }
}
 8006d72:	3734      	adds	r7, #52	; 0x34
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd90      	pop	{r4, r7, pc}

08006d78 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d101      	bne.n	8006d92 <HAL_PCD_SetAddress+0x1a>
 8006d8e:	2302      	movs	r3, #2
 8006d90:	e013      	b.n	8006dba <HAL_PCD_SetAddress+0x42>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	78fa      	ldrb	r2, [r7, #3]
 8006d9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	78fa      	ldrb	r2, [r7, #3]
 8006da8:	4611      	mov	r1, r2
 8006daa:	4618      	mov	r0, r3
 8006dac:	f003 fb7a 	bl	800a4a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	4608      	mov	r0, r1
 8006dcc:	4611      	mov	r1, r2
 8006dce:	461a      	mov	r2, r3
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	70fb      	strb	r3, [r7, #3]
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	803b      	strh	r3, [r7, #0]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006de0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	da0f      	bge.n	8006e08 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006de8:	78fb      	ldrb	r3, [r7, #3]
 8006dea:	f003 020f 	and.w	r2, r3, #15
 8006dee:	4613      	mov	r3, r2
 8006df0:	00db      	lsls	r3, r3, #3
 8006df2:	4413      	add	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	3338      	adds	r3, #56	; 0x38
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2201      	movs	r2, #1
 8006e04:	705a      	strb	r2, [r3, #1]
 8006e06:	e00f      	b.n	8006e28 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e08:	78fb      	ldrb	r3, [r7, #3]
 8006e0a:	f003 020f 	and.w	r2, r3, #15
 8006e0e:	4613      	mov	r3, r2
 8006e10:	00db      	lsls	r3, r3, #3
 8006e12:	4413      	add	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	3304      	adds	r3, #4
 8006e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006e28:	78fb      	ldrb	r3, [r7, #3]
 8006e2a:	f003 030f 	and.w	r3, r3, #15
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006e34:	883a      	ldrh	r2, [r7, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	78ba      	ldrb	r2, [r7, #2]
 8006e3e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	785b      	ldrb	r3, [r3, #1]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d004      	beq.n	8006e52 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006e52:	78bb      	ldrb	r3, [r7, #2]
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d102      	bne.n	8006e5e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d101      	bne.n	8006e6c <HAL_PCD_EP_Open+0xaa>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	e00e      	b.n	8006e8a <HAL_PCD_EP_Open+0xc8>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68f9      	ldr	r1, [r7, #12]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f002 fbfa 	bl	8009674 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006e88:	7afb      	ldrb	r3, [r7, #11]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006e9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	da0f      	bge.n	8006ec6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ea6:	78fb      	ldrb	r3, [r7, #3]
 8006ea8:	f003 020f 	and.w	r2, r3, #15
 8006eac:	4613      	mov	r3, r2
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	4413      	add	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	3338      	adds	r3, #56	; 0x38
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	4413      	add	r3, r2
 8006eba:	3304      	adds	r3, #4
 8006ebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	705a      	strb	r2, [r3, #1]
 8006ec4:	e00f      	b.n	8006ee6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ec6:	78fb      	ldrb	r3, [r7, #3]
 8006ec8:	f003 020f 	and.w	r2, r3, #15
 8006ecc:	4613      	mov	r3, r2
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	4413      	add	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	4413      	add	r3, r2
 8006edc:	3304      	adds	r3, #4
 8006ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006ee6:	78fb      	ldrb	r3, [r7, #3]
 8006ee8:	f003 030f 	and.w	r3, r3, #15
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d101      	bne.n	8006f00 <HAL_PCD_EP_Close+0x6e>
 8006efc:	2302      	movs	r3, #2
 8006efe:	e00e      	b.n	8006f1e <HAL_PCD_EP_Close+0x8c>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68f9      	ldr	r1, [r7, #12]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f002 fc38 	bl	8009784 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b086      	sub	sp, #24
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	60f8      	str	r0, [r7, #12]
 8006f2e:	607a      	str	r2, [r7, #4]
 8006f30:	603b      	str	r3, [r7, #0]
 8006f32:	460b      	mov	r3, r1
 8006f34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f36:	7afb      	ldrb	r3, [r7, #11]
 8006f38:	f003 020f 	and.w	r2, r3, #15
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	00db      	lsls	r3, r3, #3
 8006f40:	4413      	add	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	2200      	movs	r2, #0
 8006f66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f68:	7afb      	ldrb	r3, [r7, #11]
 8006f6a:	f003 030f 	and.w	r3, r3, #15
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d102      	bne.n	8006f82 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006f82:	7afb      	ldrb	r3, [r7, #11]
 8006f84:	f003 030f 	and.w	r3, r3, #15
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d109      	bne.n	8006fa0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6818      	ldr	r0, [r3, #0]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	461a      	mov	r2, r3
 8006f98:	6979      	ldr	r1, [r7, #20]
 8006f9a:	f002 ff17 	bl	8009dcc <USB_EP0StartXfer>
 8006f9e:	e008      	b.n	8006fb2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6818      	ldr	r0, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	461a      	mov	r2, r3
 8006fac:	6979      	ldr	r1, [r7, #20]
 8006fae:	f002 fcc5 	bl	800993c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006fc8:	78fb      	ldrb	r3, [r7, #3]
 8006fca:	f003 020f 	and.w	r2, r3, #15
 8006fce:	6879      	ldr	r1, [r7, #4]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	4413      	add	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	440b      	add	r3, r1
 8006fda:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006fde:	681b      	ldr	r3, [r3, #0]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	607a      	str	r2, [r7, #4]
 8006ff6:	603b      	str	r3, [r7, #0]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ffc:	7afb      	ldrb	r3, [r7, #11]
 8006ffe:	f003 020f 	and.w	r2, r3, #15
 8007002:	4613      	mov	r3, r2
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	4413      	add	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	3338      	adds	r3, #56	; 0x38
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	4413      	add	r3, r2
 8007010:	3304      	adds	r3, #4
 8007012:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	2200      	movs	r2, #0
 8007024:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2201      	movs	r2, #1
 800702a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800702c:	7afb      	ldrb	r3, [r7, #11]
 800702e:	f003 030f 	and.w	r3, r3, #15
 8007032:	b2da      	uxtb	r2, r3
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d102      	bne.n	8007046 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007046:	7afb      	ldrb	r3, [r7, #11]
 8007048:	f003 030f 	and.w	r3, r3, #15
 800704c:	2b00      	cmp	r3, #0
 800704e:	d109      	bne.n	8007064 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6818      	ldr	r0, [r3, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	b2db      	uxtb	r3, r3
 800705a:	461a      	mov	r2, r3
 800705c:	6979      	ldr	r1, [r7, #20]
 800705e:	f002 feb5 	bl	8009dcc <USB_EP0StartXfer>
 8007062:	e008      	b.n	8007076 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6818      	ldr	r0, [r3, #0]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	b2db      	uxtb	r3, r3
 800706e:	461a      	mov	r2, r3
 8007070:	6979      	ldr	r1, [r7, #20]
 8007072:	f002 fc63 	bl	800993c <USB_EPStartXfer>
  }

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3718      	adds	r7, #24
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	460b      	mov	r3, r1
 800708a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800708c:	78fb      	ldrb	r3, [r7, #3]
 800708e:	f003 020f 	and.w	r2, r3, #15
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	429a      	cmp	r2, r3
 8007098:	d901      	bls.n	800709e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e050      	b.n	8007140 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800709e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	da0f      	bge.n	80070c6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070a6:	78fb      	ldrb	r3, [r7, #3]
 80070a8:	f003 020f 	and.w	r2, r3, #15
 80070ac:	4613      	mov	r3, r2
 80070ae:	00db      	lsls	r3, r3, #3
 80070b0:	4413      	add	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	3338      	adds	r3, #56	; 0x38
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	4413      	add	r3, r2
 80070ba:	3304      	adds	r3, #4
 80070bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2201      	movs	r2, #1
 80070c2:	705a      	strb	r2, [r3, #1]
 80070c4:	e00d      	b.n	80070e2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80070c6:	78fa      	ldrb	r2, [r7, #3]
 80070c8:	4613      	mov	r3, r2
 80070ca:	00db      	lsls	r3, r3, #3
 80070cc:	4413      	add	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	4413      	add	r3, r2
 80070d8:	3304      	adds	r3, #4
 80070da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2201      	movs	r2, #1
 80070e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80070e8:	78fb      	ldrb	r3, [r7, #3]
 80070ea:	f003 030f 	and.w	r3, r3, #15
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d101      	bne.n	8007102 <HAL_PCD_EP_SetStall+0x82>
 80070fe:	2302      	movs	r3, #2
 8007100:	e01e      	b.n	8007140 <HAL_PCD_EP_SetStall+0xc0>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68f9      	ldr	r1, [r7, #12]
 8007110:	4618      	mov	r0, r3
 8007112:	f003 f8f3 	bl	800a2fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007116:	78fb      	ldrb	r3, [r7, #3]
 8007118:	f003 030f 	and.w	r3, r3, #15
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10a      	bne.n	8007136 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6818      	ldr	r0, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	b2d9      	uxtb	r1, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007130:	461a      	mov	r2, r3
 8007132:	f003 fae3 	bl	800a6fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	460b      	mov	r3, r1
 8007152:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007154:	78fb      	ldrb	r3, [r7, #3]
 8007156:	f003 020f 	and.w	r2, r3, #15
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	429a      	cmp	r2, r3
 8007160:	d901      	bls.n	8007166 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e042      	b.n	80071ec <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007166:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800716a:	2b00      	cmp	r3, #0
 800716c:	da0f      	bge.n	800718e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800716e:	78fb      	ldrb	r3, [r7, #3]
 8007170:	f003 020f 	and.w	r2, r3, #15
 8007174:	4613      	mov	r3, r2
 8007176:	00db      	lsls	r3, r3, #3
 8007178:	4413      	add	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	3338      	adds	r3, #56	; 0x38
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	4413      	add	r3, r2
 8007182:	3304      	adds	r3, #4
 8007184:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2201      	movs	r2, #1
 800718a:	705a      	strb	r2, [r3, #1]
 800718c:	e00f      	b.n	80071ae <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800718e:	78fb      	ldrb	r3, [r7, #3]
 8007190:	f003 020f 	and.w	r2, r3, #15
 8007194:	4613      	mov	r3, r2
 8007196:	00db      	lsls	r3, r3, #3
 8007198:	4413      	add	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	4413      	add	r3, r2
 80071a4:	3304      	adds	r3, #4
 80071a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80071b4:	78fb      	ldrb	r3, [r7, #3]
 80071b6:	f003 030f 	and.w	r3, r3, #15
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d101      	bne.n	80071ce <HAL_PCD_EP_ClrStall+0x86>
 80071ca:	2302      	movs	r3, #2
 80071cc:	e00e      	b.n	80071ec <HAL_PCD_EP_ClrStall+0xa4>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68f9      	ldr	r1, [r7, #12]
 80071dc:	4618      	mov	r0, r3
 80071de:	f003 f8fb 	bl	800a3d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007200:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007204:	2b00      	cmp	r3, #0
 8007206:	da0c      	bge.n	8007222 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007208:	78fb      	ldrb	r3, [r7, #3]
 800720a:	f003 020f 	and.w	r2, r3, #15
 800720e:	4613      	mov	r3, r2
 8007210:	00db      	lsls	r3, r3, #3
 8007212:	4413      	add	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	3338      	adds	r3, #56	; 0x38
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	4413      	add	r3, r2
 800721c:	3304      	adds	r3, #4
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	e00c      	b.n	800723c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007222:	78fb      	ldrb	r3, [r7, #3]
 8007224:	f003 020f 	and.w	r2, r3, #15
 8007228:	4613      	mov	r3, r2
 800722a:	00db      	lsls	r3, r3, #3
 800722c:	4413      	add	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	4413      	add	r3, r2
 8007238:	3304      	adds	r3, #4
 800723a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68f9      	ldr	r1, [r7, #12]
 8007242:	4618      	mov	r0, r3
 8007244:	f002 ff1a 	bl	800a07c <USB_EPStopXfer>
 8007248:	4603      	mov	r3, r0
 800724a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800724c:	7afb      	ldrb	r3, [r7, #11]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b08a      	sub	sp, #40	; 0x28
 800725a:	af02      	add	r7, sp, #8
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	4613      	mov	r3, r2
 800726e:	00db      	lsls	r3, r3, #3
 8007270:	4413      	add	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	3338      	adds	r3, #56	; 0x38
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	4413      	add	r3, r2
 800727a:	3304      	adds	r3, #4
 800727c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6a1a      	ldr	r2, [r3, #32]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	429a      	cmp	r2, r3
 8007288:	d901      	bls.n	800728e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e06c      	b.n	8007368 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	699a      	ldr	r2, [r3, #24]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	69fa      	ldr	r2, [r7, #28]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d902      	bls.n	80072aa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	3303      	adds	r3, #3
 80072ae:	089b      	lsrs	r3, r3, #2
 80072b0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80072b2:	e02b      	b.n	800730c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	699a      	ldr	r2, [r3, #24]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6a1b      	ldr	r3, [r3, #32]
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	69fa      	ldr	r2, [r7, #28]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d902      	bls.n	80072d0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	3303      	adds	r3, #3
 80072d4:	089b      	lsrs	r3, r3, #2
 80072d6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6919      	ldr	r1, [r3, #16]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	4603      	mov	r3, r0
 80072ee:	6978      	ldr	r0, [r7, #20]
 80072f0:	f002 ff6e 	bl	800a1d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	691a      	ldr	r2, [r3, #16]
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	441a      	add	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6a1a      	ldr	r2, [r3, #32]
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	441a      	add	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	b29b      	uxth	r3, r3
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	429a      	cmp	r2, r3
 8007320:	d809      	bhi.n	8007336 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6a1a      	ldr	r2, [r3, #32]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800732a:	429a      	cmp	r2, r3
 800732c:	d203      	bcs.n	8007336 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1be      	bne.n	80072b4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	699a      	ldr	r2, [r3, #24]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	429a      	cmp	r2, r3
 8007340:	d811      	bhi.n	8007366 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	f003 030f 	and.w	r3, r3, #15
 8007348:	2201      	movs	r2, #1
 800734a:	fa02 f303 	lsl.w	r3, r2, r3
 800734e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	43db      	mvns	r3, r3
 800735c:	6939      	ldr	r1, [r7, #16]
 800735e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007362:	4013      	ands	r3, r2
 8007364:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3720      	adds	r7, #32
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b088      	sub	sp, #32
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	333c      	adds	r3, #60	; 0x3c
 8007388:	3304      	adds	r3, #4
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	4413      	add	r3, r2
 8007396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d17b      	bne.n	800749e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	f003 0308 	and.w	r3, r3, #8
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d015      	beq.n	80073dc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	4a61      	ldr	r2, [pc, #388]	; (8007538 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	f240 80b9 	bls.w	800752c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f000 80b3 	beq.w	800752c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d2:	461a      	mov	r2, r3
 80073d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073d8:	6093      	str	r3, [r2, #8]
 80073da:	e0a7      	b.n	800752c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	f003 0320 	and.w	r3, r3, #32
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d009      	beq.n	80073fa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f2:	461a      	mov	r2, r3
 80073f4:	2320      	movs	r3, #32
 80073f6:	6093      	str	r3, [r2, #8]
 80073f8:	e098      	b.n	800752c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007400:	2b00      	cmp	r3, #0
 8007402:	f040 8093 	bne.w	800752c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	4a4b      	ldr	r2, [pc, #300]	; (8007538 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d90f      	bls.n	800742e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00a      	beq.n	800742e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	4413      	add	r3, r2
 8007420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007424:	461a      	mov	r2, r3
 8007426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800742a:	6093      	str	r3, [r2, #8]
 800742c:	e07e      	b.n	800752c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	4613      	mov	r3, r2
 8007432:	00db      	lsls	r3, r3, #3
 8007434:	4413      	add	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	4413      	add	r3, r2
 8007440:	3304      	adds	r3, #4
 8007442:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	69da      	ldr	r2, [r3, #28]
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	0159      	lsls	r1, r3, #5
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	440b      	add	r3, r1
 8007450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800745a:	1ad2      	subs	r2, r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d114      	bne.n	8007490 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d109      	bne.n	8007482 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6818      	ldr	r0, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007478:	461a      	mov	r2, r3
 800747a:	2101      	movs	r1, #1
 800747c:	f003 f93e 	bl	800a6fc <USB_EP0_OutStart>
 8007480:	e006      	b.n	8007490 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	691a      	ldr	r2, [r3, #16]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	441a      	add	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	b2db      	uxtb	r3, r3
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f008 fde6 	bl	8010068 <HAL_PCD_DataOutStageCallback>
 800749c:	e046      	b.n	800752c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	4a26      	ldr	r2, [pc, #152]	; (800753c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d124      	bne.n	80074f0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00a      	beq.n	80074c6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074bc:	461a      	mov	r2, r3
 80074be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074c2:	6093      	str	r3, [r2, #8]
 80074c4:	e032      	b.n	800752c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	f003 0320 	and.w	r3, r3, #32
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d008      	beq.n	80074e2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	015a      	lsls	r2, r3, #5
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074dc:	461a      	mov	r2, r3
 80074de:	2320      	movs	r3, #32
 80074e0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	4619      	mov	r1, r3
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f008 fdbd 	bl	8010068 <HAL_PCD_DataOutStageCallback>
 80074ee:	e01d      	b.n	800752c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d114      	bne.n	8007520 <PCD_EP_OutXfrComplete_int+0x1b0>
 80074f6:	6879      	ldr	r1, [r7, #4]
 80074f8:	683a      	ldr	r2, [r7, #0]
 80074fa:	4613      	mov	r3, r2
 80074fc:	00db      	lsls	r3, r3, #3
 80074fe:	4413      	add	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	440b      	add	r3, r1
 8007504:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d108      	bne.n	8007520 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6818      	ldr	r0, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007518:	461a      	mov	r2, r3
 800751a:	2100      	movs	r1, #0
 800751c:	f003 f8ee 	bl	800a6fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	b2db      	uxtb	r3, r3
 8007524:	4619      	mov	r1, r3
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f008 fd9e 	bl	8010068 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3720      	adds	r7, #32
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	4f54300a 	.word	0x4f54300a
 800753c:	4f54310a 	.word	0x4f54310a

08007540 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	333c      	adds	r3, #60	; 0x3c
 8007558:	3304      	adds	r3, #4
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	015a      	lsls	r2, r3, #5
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	4413      	add	r3, r2
 8007566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	4a15      	ldr	r2, [pc, #84]	; (80075c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d90e      	bls.n	8007594 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800757c:	2b00      	cmp	r3, #0
 800757e:	d009      	beq.n	8007594 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	4413      	add	r3, r2
 8007588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800758c:	461a      	mov	r2, r3
 800758e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007592:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f008 fd55 	bl	8010044 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	4a0a      	ldr	r2, [pc, #40]	; (80075c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d90c      	bls.n	80075bc <PCD_EP_OutSetupPacket_int+0x7c>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d108      	bne.n	80075bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6818      	ldr	r0, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80075b4:	461a      	mov	r2, r3
 80075b6:	2101      	movs	r1, #1
 80075b8:	f003 f8a0 	bl	800a6fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3718      	adds	r7, #24
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	4f54300a 	.word	0x4f54300a

080075cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	460b      	mov	r3, r1
 80075d6:	70fb      	strb	r3, [r7, #3]
 80075d8:	4613      	mov	r3, r2
 80075da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80075e4:	78fb      	ldrb	r3, [r7, #3]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d107      	bne.n	80075fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80075ea:	883b      	ldrh	r3, [r7, #0]
 80075ec:	0419      	lsls	r1, r3, #16
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	430a      	orrs	r2, r1
 80075f6:	629a      	str	r2, [r3, #40]	; 0x28
 80075f8:	e028      	b.n	800764c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007600:	0c1b      	lsrs	r3, r3, #16
 8007602:	68ba      	ldr	r2, [r7, #8]
 8007604:	4413      	add	r3, r2
 8007606:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007608:	2300      	movs	r3, #0
 800760a:	73fb      	strb	r3, [r7, #15]
 800760c:	e00d      	b.n	800762a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	7bfb      	ldrb	r3, [r7, #15]
 8007614:	3340      	adds	r3, #64	; 0x40
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	0c1b      	lsrs	r3, r3, #16
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	4413      	add	r3, r2
 8007622:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007624:	7bfb      	ldrb	r3, [r7, #15]
 8007626:	3301      	adds	r3, #1
 8007628:	73fb      	strb	r3, [r7, #15]
 800762a:	7bfa      	ldrb	r2, [r7, #15]
 800762c:	78fb      	ldrb	r3, [r7, #3]
 800762e:	3b01      	subs	r3, #1
 8007630:	429a      	cmp	r2, r3
 8007632:	d3ec      	bcc.n	800760e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007634:	883b      	ldrh	r3, [r7, #0]
 8007636:	0418      	lsls	r0, r3, #16
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6819      	ldr	r1, [r3, #0]
 800763c:	78fb      	ldrb	r3, [r7, #3]
 800763e:	3b01      	subs	r3, #1
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	4302      	orrs	r2, r0
 8007644:	3340      	adds	r3, #64	; 0x40
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	440b      	add	r3, r1
 800764a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3714      	adds	r7, #20
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800765a:	b480      	push	{r7}
 800765c:	b083      	sub	sp, #12
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	460b      	mov	r3, r1
 8007664:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	887a      	ldrh	r2, [r7, #2]
 800766c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	460b      	mov	r3, r1
 8007686:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e267      	b.n	8007b76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d075      	beq.n	800779e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076b2:	4b88      	ldr	r3, [pc, #544]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f003 030c 	and.w	r3, r3, #12
 80076ba:	2b04      	cmp	r3, #4
 80076bc:	d00c      	beq.n	80076d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076be:	4b85      	ldr	r3, [pc, #532]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076c6:	2b08      	cmp	r3, #8
 80076c8:	d112      	bne.n	80076f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076ca:	4b82      	ldr	r3, [pc, #520]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076d6:	d10b      	bne.n	80076f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076d8:	4b7e      	ldr	r3, [pc, #504]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d05b      	beq.n	800779c <HAL_RCC_OscConfig+0x108>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d157      	bne.n	800779c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e242      	b.n	8007b76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076f8:	d106      	bne.n	8007708 <HAL_RCC_OscConfig+0x74>
 80076fa:	4b76      	ldr	r3, [pc, #472]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a75      	ldr	r2, [pc, #468]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 8007700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007704:	6013      	str	r3, [r2, #0]
 8007706:	e01d      	b.n	8007744 <HAL_RCC_OscConfig+0xb0>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007710:	d10c      	bne.n	800772c <HAL_RCC_OscConfig+0x98>
 8007712:	4b70      	ldr	r3, [pc, #448]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a6f      	ldr	r2, [pc, #444]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 8007718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800771c:	6013      	str	r3, [r2, #0]
 800771e:	4b6d      	ldr	r3, [pc, #436]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a6c      	ldr	r2, [pc, #432]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 8007724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007728:	6013      	str	r3, [r2, #0]
 800772a:	e00b      	b.n	8007744 <HAL_RCC_OscConfig+0xb0>
 800772c:	4b69      	ldr	r3, [pc, #420]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a68      	ldr	r2, [pc, #416]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 8007732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	4b66      	ldr	r3, [pc, #408]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a65      	ldr	r2, [pc, #404]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 800773e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d013      	beq.n	8007774 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800774c:	f7fc f952 	bl	80039f4 <HAL_GetTick>
 8007750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007752:	e008      	b.n	8007766 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007754:	f7fc f94e 	bl	80039f4 <HAL_GetTick>
 8007758:	4602      	mov	r2, r0
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	2b64      	cmp	r3, #100	; 0x64
 8007760:	d901      	bls.n	8007766 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007762:	2303      	movs	r3, #3
 8007764:	e207      	b.n	8007b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007766:	4b5b      	ldr	r3, [pc, #364]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d0f0      	beq.n	8007754 <HAL_RCC_OscConfig+0xc0>
 8007772:	e014      	b.n	800779e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007774:	f7fc f93e 	bl	80039f4 <HAL_GetTick>
 8007778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800777a:	e008      	b.n	800778e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800777c:	f7fc f93a 	bl	80039f4 <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	2b64      	cmp	r3, #100	; 0x64
 8007788:	d901      	bls.n	800778e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e1f3      	b.n	8007b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800778e:	4b51      	ldr	r3, [pc, #324]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1f0      	bne.n	800777c <HAL_RCC_OscConfig+0xe8>
 800779a:	e000      	b.n	800779e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800779c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0302 	and.w	r3, r3, #2
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d063      	beq.n	8007872 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077aa:	4b4a      	ldr	r3, [pc, #296]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f003 030c 	and.w	r3, r3, #12
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00b      	beq.n	80077ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077b6:	4b47      	ldr	r3, [pc, #284]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077be:	2b08      	cmp	r3, #8
 80077c0:	d11c      	bne.n	80077fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077c2:	4b44      	ldr	r3, [pc, #272]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d116      	bne.n	80077fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077ce:	4b41      	ldr	r3, [pc, #260]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 0302 	and.w	r3, r3, #2
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d005      	beq.n	80077e6 <HAL_RCC_OscConfig+0x152>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d001      	beq.n	80077e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e1c7      	b.n	8007b76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077e6:	4b3b      	ldr	r3, [pc, #236]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	00db      	lsls	r3, r3, #3
 80077f4:	4937      	ldr	r1, [pc, #220]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077fa:	e03a      	b.n	8007872 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d020      	beq.n	8007846 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007804:	4b34      	ldr	r3, [pc, #208]	; (80078d8 <HAL_RCC_OscConfig+0x244>)
 8007806:	2201      	movs	r2, #1
 8007808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800780a:	f7fc f8f3 	bl	80039f4 <HAL_GetTick>
 800780e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007810:	e008      	b.n	8007824 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007812:	f7fc f8ef 	bl	80039f4 <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	2b02      	cmp	r3, #2
 800781e:	d901      	bls.n	8007824 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e1a8      	b.n	8007b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007824:	4b2b      	ldr	r3, [pc, #172]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0302 	and.w	r3, r3, #2
 800782c:	2b00      	cmp	r3, #0
 800782e:	d0f0      	beq.n	8007812 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007830:	4b28      	ldr	r3, [pc, #160]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	00db      	lsls	r3, r3, #3
 800783e:	4925      	ldr	r1, [pc, #148]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 8007840:	4313      	orrs	r3, r2
 8007842:	600b      	str	r3, [r1, #0]
 8007844:	e015      	b.n	8007872 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007846:	4b24      	ldr	r3, [pc, #144]	; (80078d8 <HAL_RCC_OscConfig+0x244>)
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800784c:	f7fc f8d2 	bl	80039f4 <HAL_GetTick>
 8007850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007852:	e008      	b.n	8007866 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007854:	f7fc f8ce 	bl	80039f4 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	2b02      	cmp	r3, #2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e187      	b.n	8007b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007866:	4b1b      	ldr	r3, [pc, #108]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1f0      	bne.n	8007854 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0308 	and.w	r3, r3, #8
 800787a:	2b00      	cmp	r3, #0
 800787c:	d036      	beq.n	80078ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d016      	beq.n	80078b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007886:	4b15      	ldr	r3, [pc, #84]	; (80078dc <HAL_RCC_OscConfig+0x248>)
 8007888:	2201      	movs	r2, #1
 800788a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800788c:	f7fc f8b2 	bl	80039f4 <HAL_GetTick>
 8007890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007892:	e008      	b.n	80078a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007894:	f7fc f8ae 	bl	80039f4 <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d901      	bls.n	80078a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80078a2:	2303      	movs	r3, #3
 80078a4:	e167      	b.n	8007b76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078a6:	4b0b      	ldr	r3, [pc, #44]	; (80078d4 <HAL_RCC_OscConfig+0x240>)
 80078a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078aa:	f003 0302 	and.w	r3, r3, #2
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d0f0      	beq.n	8007894 <HAL_RCC_OscConfig+0x200>
 80078b2:	e01b      	b.n	80078ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078b4:	4b09      	ldr	r3, [pc, #36]	; (80078dc <HAL_RCC_OscConfig+0x248>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078ba:	f7fc f89b 	bl	80039f4 <HAL_GetTick>
 80078be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078c0:	e00e      	b.n	80078e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078c2:	f7fc f897 	bl	80039f4 <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d907      	bls.n	80078e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e150      	b.n	8007b76 <HAL_RCC_OscConfig+0x4e2>
 80078d4:	40023800 	.word	0x40023800
 80078d8:	42470000 	.word	0x42470000
 80078dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078e0:	4b88      	ldr	r3, [pc, #544]	; (8007b04 <HAL_RCC_OscConfig+0x470>)
 80078e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078e4:	f003 0302 	and.w	r3, r3, #2
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1ea      	bne.n	80078c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0304 	and.w	r3, r3, #4
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f000 8097 	beq.w	8007a28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078fa:	2300      	movs	r3, #0
 80078fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078fe:	4b81      	ldr	r3, [pc, #516]	; (8007b04 <HAL_RCC_OscConfig+0x470>)
 8007900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10f      	bne.n	800792a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800790a:	2300      	movs	r3, #0
 800790c:	60bb      	str	r3, [r7, #8]
 800790e:	4b7d      	ldr	r3, [pc, #500]	; (8007b04 <HAL_RCC_OscConfig+0x470>)
 8007910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007912:	4a7c      	ldr	r2, [pc, #496]	; (8007b04 <HAL_RCC_OscConfig+0x470>)
 8007914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007918:	6413      	str	r3, [r2, #64]	; 0x40
 800791a:	4b7a      	ldr	r3, [pc, #488]	; (8007b04 <HAL_RCC_OscConfig+0x470>)
 800791c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007922:	60bb      	str	r3, [r7, #8]
 8007924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007926:	2301      	movs	r3, #1
 8007928:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800792a:	4b77      	ldr	r3, [pc, #476]	; (8007b08 <HAL_RCC_OscConfig+0x474>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007932:	2b00      	cmp	r3, #0
 8007934:	d118      	bne.n	8007968 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007936:	4b74      	ldr	r3, [pc, #464]	; (8007b08 <HAL_RCC_OscConfig+0x474>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a73      	ldr	r2, [pc, #460]	; (8007b08 <HAL_RCC_OscConfig+0x474>)
 800793c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007942:	f7fc f857 	bl	80039f4 <HAL_GetTick>
 8007946:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007948:	e008      	b.n	800795c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800794a:	f7fc f853 	bl	80039f4 <HAL_GetTick>
 800794e:	4602      	mov	r2, r0
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	2b02      	cmp	r3, #2
 8007956:	d901      	bls.n	800795c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	e10c      	b.n	8007b76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800795c:	4b6a      	ldr	r3, [pc, #424]	; (8007b08 <HAL_RCC_OscConfig+0x474>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007964:	2b00      	cmp	r3, #0
 8007966:	d0f0      	beq.n	800794a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d106      	bne.n	800797e <HAL_RCC_OscConfig+0x2ea>
 8007970:	4b64      	ldr	r3, [pc, #400]	; (8007b04 <HAL_RCC_OscConfig+0x470>)
 8007972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007974:	4a63      	ldr	r2, [pc, #396]	; (8007b04 <HAL_RCC_OscConfig+0x470>)
 8007976:	f043 0301 	orr.w	r3, r3, #1
 800797a:	6713      	str	r3, [r2, #112]	; 0x70
 800797c:	e01c      	b.n	80079b8 <HAL_RCC_OscConfig+0x324>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	2b05      	cmp	r3, #5
 8007984:	d10c      	bne.n	80079a0 <HAL_RCC_OscConfig+0x30c>
 8007986:	4b5f      	ldr	r3, [pc, #380]	; (8007b04 <HAL_RCC_OscConfig+0x470>)
 8007988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798a:	4a5e      	ldr	r2, [pc, #376]	; (8007b04 <HAL_RCC_OscConfig+0x470>)
 800798c:	f043 0304 	orr.w	r3, r3, #4
 8007990:	6713      	str	r3, [r2, #112]	; 0x70
 8007992:	4b5c      	ldr	r3, [pc, #368]	; (8007b04 <HAL_RCC_OscConfig+0x470>)
 8007994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007996:	4a5b      	ldr	r2, [pc, #364]	; (8007b04 <HAL_RCC_OscConfig+0x470>)
 8007998:	f043 0301 	orr.w	r3, r3, #1
 800799c:	6713      	str	r3, [r2, #112]	; 0x70
 800799e:	e00b      	b.n	80079b8 <HAL_RCC_OscConfig+0x324>
 80079a0:	4b58      	ldr	r3, [pc, #352]	; (8007b04 <HAL_RCC_OscConfig+0x470>)
 80079a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a4:	4a57      	ldr	r2, [pc, #348]	; (8007b04 <HAL_RCC_OscConfig+0x470>)
 80079a6:	f023 0301 	bic.w	r3, r3, #1
 80079aa:	6713      	str	r3, [r2, #112]	; 0x70
 80079ac:	4b55      	ldr	r3, [pc, #340]	; (8007b04 <HAL_RCC_OscConfig+0x470>)
 80079ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b0:	4a54      	ldr	r2, [pc, #336]	; (8007b04 <HAL_RCC_OscConfig+0x470>)
 80079b2:	f023 0304 	bic.w	r3, r3, #4
 80079b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d015      	beq.n	80079ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079c0:	f7fc f818 	bl	80039f4 <HAL_GetTick>
 80079c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079c6:	e00a      	b.n	80079de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079c8:	f7fc f814 	bl	80039f4 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d901      	bls.n	80079de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e0cb      	b.n	8007b76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079de:	4b49      	ldr	r3, [pc, #292]	; (8007b04 <HAL_RCC_OscConfig+0x470>)
 80079e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e2:	f003 0302 	and.w	r3, r3, #2
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0ee      	beq.n	80079c8 <HAL_RCC_OscConfig+0x334>
 80079ea:	e014      	b.n	8007a16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079ec:	f7fc f802 	bl	80039f4 <HAL_GetTick>
 80079f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079f2:	e00a      	b.n	8007a0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079f4:	f7fb fffe 	bl	80039f4 <HAL_GetTick>
 80079f8:	4602      	mov	r2, r0
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d901      	bls.n	8007a0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e0b5      	b.n	8007b76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a0a:	4b3e      	ldr	r3, [pc, #248]	; (8007b04 <HAL_RCC_OscConfig+0x470>)
 8007a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a0e:	f003 0302 	and.w	r3, r3, #2
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1ee      	bne.n	80079f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a16:	7dfb      	ldrb	r3, [r7, #23]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d105      	bne.n	8007a28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a1c:	4b39      	ldr	r3, [pc, #228]	; (8007b04 <HAL_RCC_OscConfig+0x470>)
 8007a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a20:	4a38      	ldr	r2, [pc, #224]	; (8007b04 <HAL_RCC_OscConfig+0x470>)
 8007a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 80a1 	beq.w	8007b74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a32:	4b34      	ldr	r3, [pc, #208]	; (8007b04 <HAL_RCC_OscConfig+0x470>)
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f003 030c 	and.w	r3, r3, #12
 8007a3a:	2b08      	cmp	r3, #8
 8007a3c:	d05c      	beq.n	8007af8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d141      	bne.n	8007aca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a46:	4b31      	ldr	r3, [pc, #196]	; (8007b0c <HAL_RCC_OscConfig+0x478>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a4c:	f7fb ffd2 	bl	80039f4 <HAL_GetTick>
 8007a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a52:	e008      	b.n	8007a66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a54:	f7fb ffce 	bl	80039f4 <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d901      	bls.n	8007a66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e087      	b.n	8007b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a66:	4b27      	ldr	r3, [pc, #156]	; (8007b04 <HAL_RCC_OscConfig+0x470>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1f0      	bne.n	8007a54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	69da      	ldr	r2, [r3, #28]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a80:	019b      	lsls	r3, r3, #6
 8007a82:	431a      	orrs	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a88:	085b      	lsrs	r3, r3, #1
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	041b      	lsls	r3, r3, #16
 8007a8e:	431a      	orrs	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a94:	061b      	lsls	r3, r3, #24
 8007a96:	491b      	ldr	r1, [pc, #108]	; (8007b04 <HAL_RCC_OscConfig+0x470>)
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a9c:	4b1b      	ldr	r3, [pc, #108]	; (8007b0c <HAL_RCC_OscConfig+0x478>)
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aa2:	f7fb ffa7 	bl	80039f4 <HAL_GetTick>
 8007aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007aa8:	e008      	b.n	8007abc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007aaa:	f7fb ffa3 	bl	80039f4 <HAL_GetTick>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d901      	bls.n	8007abc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e05c      	b.n	8007b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007abc:	4b11      	ldr	r3, [pc, #68]	; (8007b04 <HAL_RCC_OscConfig+0x470>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d0f0      	beq.n	8007aaa <HAL_RCC_OscConfig+0x416>
 8007ac8:	e054      	b.n	8007b74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007aca:	4b10      	ldr	r3, [pc, #64]	; (8007b0c <HAL_RCC_OscConfig+0x478>)
 8007acc:	2200      	movs	r2, #0
 8007ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ad0:	f7fb ff90 	bl	80039f4 <HAL_GetTick>
 8007ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ad6:	e008      	b.n	8007aea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ad8:	f7fb ff8c 	bl	80039f4 <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d901      	bls.n	8007aea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e045      	b.n	8007b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aea:	4b06      	ldr	r3, [pc, #24]	; (8007b04 <HAL_RCC_OscConfig+0x470>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1f0      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x444>
 8007af6:	e03d      	b.n	8007b74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d107      	bne.n	8007b10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e038      	b.n	8007b76 <HAL_RCC_OscConfig+0x4e2>
 8007b04:	40023800 	.word	0x40023800
 8007b08:	40007000 	.word	0x40007000
 8007b0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b10:	4b1b      	ldr	r3, [pc, #108]	; (8007b80 <HAL_RCC_OscConfig+0x4ec>)
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d028      	beq.n	8007b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d121      	bne.n	8007b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d11a      	bne.n	8007b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b40:	4013      	ands	r3, r2
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d111      	bne.n	8007b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b56:	085b      	lsrs	r3, r3, #1
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d107      	bne.n	8007b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d001      	beq.n	8007b74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e000      	b.n	8007b76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3718      	adds	r7, #24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	40023800 	.word	0x40023800

08007b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d101      	bne.n	8007b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e0cc      	b.n	8007d32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b98:	4b68      	ldr	r3, [pc, #416]	; (8007d3c <HAL_RCC_ClockConfig+0x1b8>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0307 	and.w	r3, r3, #7
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d90c      	bls.n	8007bc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ba6:	4b65      	ldr	r3, [pc, #404]	; (8007d3c <HAL_RCC_ClockConfig+0x1b8>)
 8007ba8:	683a      	ldr	r2, [r7, #0]
 8007baa:	b2d2      	uxtb	r2, r2
 8007bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bae:	4b63      	ldr	r3, [pc, #396]	; (8007d3c <HAL_RCC_ClockConfig+0x1b8>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0307 	and.w	r3, r3, #7
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d001      	beq.n	8007bc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e0b8      	b.n	8007d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d020      	beq.n	8007c0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 0304 	and.w	r3, r3, #4
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d005      	beq.n	8007be4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bd8:	4b59      	ldr	r3, [pc, #356]	; (8007d40 <HAL_RCC_ClockConfig+0x1bc>)
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	4a58      	ldr	r2, [pc, #352]	; (8007d40 <HAL_RCC_ClockConfig+0x1bc>)
 8007bde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007be2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0308 	and.w	r3, r3, #8
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d005      	beq.n	8007bfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007bf0:	4b53      	ldr	r3, [pc, #332]	; (8007d40 <HAL_RCC_ClockConfig+0x1bc>)
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	4a52      	ldr	r2, [pc, #328]	; (8007d40 <HAL_RCC_ClockConfig+0x1bc>)
 8007bf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007bfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bfc:	4b50      	ldr	r3, [pc, #320]	; (8007d40 <HAL_RCC_ClockConfig+0x1bc>)
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	494d      	ldr	r1, [pc, #308]	; (8007d40 <HAL_RCC_ClockConfig+0x1bc>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d044      	beq.n	8007ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d107      	bne.n	8007c32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c22:	4b47      	ldr	r3, [pc, #284]	; (8007d40 <HAL_RCC_ClockConfig+0x1bc>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d119      	bne.n	8007c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e07f      	b.n	8007d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d003      	beq.n	8007c42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c3e:	2b03      	cmp	r3, #3
 8007c40:	d107      	bne.n	8007c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c42:	4b3f      	ldr	r3, [pc, #252]	; (8007d40 <HAL_RCC_ClockConfig+0x1bc>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d109      	bne.n	8007c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e06f      	b.n	8007d32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c52:	4b3b      	ldr	r3, [pc, #236]	; (8007d40 <HAL_RCC_ClockConfig+0x1bc>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 0302 	and.w	r3, r3, #2
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e067      	b.n	8007d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c62:	4b37      	ldr	r3, [pc, #220]	; (8007d40 <HAL_RCC_ClockConfig+0x1bc>)
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	f023 0203 	bic.w	r2, r3, #3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	4934      	ldr	r1, [pc, #208]	; (8007d40 <HAL_RCC_ClockConfig+0x1bc>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c74:	f7fb febe 	bl	80039f4 <HAL_GetTick>
 8007c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c7a:	e00a      	b.n	8007c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c7c:	f7fb feba 	bl	80039f4 <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d901      	bls.n	8007c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e04f      	b.n	8007d32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c92:	4b2b      	ldr	r3, [pc, #172]	; (8007d40 <HAL_RCC_ClockConfig+0x1bc>)
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	f003 020c 	and.w	r2, r3, #12
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d1eb      	bne.n	8007c7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ca4:	4b25      	ldr	r3, [pc, #148]	; (8007d3c <HAL_RCC_ClockConfig+0x1b8>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0307 	and.w	r3, r3, #7
 8007cac:	683a      	ldr	r2, [r7, #0]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d20c      	bcs.n	8007ccc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cb2:	4b22      	ldr	r3, [pc, #136]	; (8007d3c <HAL_RCC_ClockConfig+0x1b8>)
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	b2d2      	uxtb	r2, r2
 8007cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cba:	4b20      	ldr	r3, [pc, #128]	; (8007d3c <HAL_RCC_ClockConfig+0x1b8>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0307 	and.w	r3, r3, #7
 8007cc2:	683a      	ldr	r2, [r7, #0]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d001      	beq.n	8007ccc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e032      	b.n	8007d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0304 	and.w	r3, r3, #4
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d008      	beq.n	8007cea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cd8:	4b19      	ldr	r3, [pc, #100]	; (8007d40 <HAL_RCC_ClockConfig+0x1bc>)
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	4916      	ldr	r1, [pc, #88]	; (8007d40 <HAL_RCC_ClockConfig+0x1bc>)
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0308 	and.w	r3, r3, #8
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d009      	beq.n	8007d0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007cf6:	4b12      	ldr	r3, [pc, #72]	; (8007d40 <HAL_RCC_ClockConfig+0x1bc>)
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	00db      	lsls	r3, r3, #3
 8007d04:	490e      	ldr	r1, [pc, #56]	; (8007d40 <HAL_RCC_ClockConfig+0x1bc>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d0a:	f000 f821 	bl	8007d50 <HAL_RCC_GetSysClockFreq>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	4b0b      	ldr	r3, [pc, #44]	; (8007d40 <HAL_RCC_ClockConfig+0x1bc>)
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	091b      	lsrs	r3, r3, #4
 8007d16:	f003 030f 	and.w	r3, r3, #15
 8007d1a:	490a      	ldr	r1, [pc, #40]	; (8007d44 <HAL_RCC_ClockConfig+0x1c0>)
 8007d1c:	5ccb      	ldrb	r3, [r1, r3]
 8007d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d22:	4a09      	ldr	r2, [pc, #36]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007d26:	4b09      	ldr	r3, [pc, #36]	; (8007d4c <HAL_RCC_ClockConfig+0x1c8>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fb f944 	bl	8002fb8 <HAL_InitTick>

  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	40023c00 	.word	0x40023c00
 8007d40:	40023800 	.word	0x40023800
 8007d44:	080119e0 	.word	0x080119e0
 8007d48:	20000038 	.word	0x20000038
 8007d4c:	2000003c 	.word	0x2000003c

08007d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d54:	b090      	sub	sp, #64	; 0x40
 8007d56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d60:	2300      	movs	r3, #0
 8007d62:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007d64:	2300      	movs	r3, #0
 8007d66:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d68:	4b59      	ldr	r3, [pc, #356]	; (8007ed0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	f003 030c 	and.w	r3, r3, #12
 8007d70:	2b08      	cmp	r3, #8
 8007d72:	d00d      	beq.n	8007d90 <HAL_RCC_GetSysClockFreq+0x40>
 8007d74:	2b08      	cmp	r3, #8
 8007d76:	f200 80a1 	bhi.w	8007ebc <HAL_RCC_GetSysClockFreq+0x16c>
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d002      	beq.n	8007d84 <HAL_RCC_GetSysClockFreq+0x34>
 8007d7e:	2b04      	cmp	r3, #4
 8007d80:	d003      	beq.n	8007d8a <HAL_RCC_GetSysClockFreq+0x3a>
 8007d82:	e09b      	b.n	8007ebc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d84:	4b53      	ldr	r3, [pc, #332]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007d86:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007d88:	e09b      	b.n	8007ec2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d8a:	4b53      	ldr	r3, [pc, #332]	; (8007ed8 <HAL_RCC_GetSysClockFreq+0x188>)
 8007d8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007d8e:	e098      	b.n	8007ec2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d90:	4b4f      	ldr	r3, [pc, #316]	; (8007ed0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d98:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d9a:	4b4d      	ldr	r3, [pc, #308]	; (8007ed0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d028      	beq.n	8007df8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007da6:	4b4a      	ldr	r3, [pc, #296]	; (8007ed0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	099b      	lsrs	r3, r3, #6
 8007dac:	2200      	movs	r2, #0
 8007dae:	623b      	str	r3, [r7, #32]
 8007db0:	627a      	str	r2, [r7, #36]	; 0x24
 8007db2:	6a3b      	ldr	r3, [r7, #32]
 8007db4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007db8:	2100      	movs	r1, #0
 8007dba:	4b47      	ldr	r3, [pc, #284]	; (8007ed8 <HAL_RCC_GetSysClockFreq+0x188>)
 8007dbc:	fb03 f201 	mul.w	r2, r3, r1
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	fb00 f303 	mul.w	r3, r0, r3
 8007dc6:	4413      	add	r3, r2
 8007dc8:	4a43      	ldr	r2, [pc, #268]	; (8007ed8 <HAL_RCC_GetSysClockFreq+0x188>)
 8007dca:	fba0 1202 	umull	r1, r2, r0, r2
 8007dce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dd0:	460a      	mov	r2, r1
 8007dd2:	62ba      	str	r2, [r7, #40]	; 0x28
 8007dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dd6:	4413      	add	r3, r2
 8007dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ddc:	2200      	movs	r2, #0
 8007dde:	61bb      	str	r3, [r7, #24]
 8007de0:	61fa      	str	r2, [r7, #28]
 8007de2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007de6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007dea:	f7f8 fde7 	bl	80009bc <__aeabi_uldivmod>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	4613      	mov	r3, r2
 8007df4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007df6:	e053      	b.n	8007ea0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007df8:	4b35      	ldr	r3, [pc, #212]	; (8007ed0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	099b      	lsrs	r3, r3, #6
 8007dfe:	2200      	movs	r2, #0
 8007e00:	613b      	str	r3, [r7, #16]
 8007e02:	617a      	str	r2, [r7, #20]
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007e0a:	f04f 0b00 	mov.w	fp, #0
 8007e0e:	4652      	mov	r2, sl
 8007e10:	465b      	mov	r3, fp
 8007e12:	f04f 0000 	mov.w	r0, #0
 8007e16:	f04f 0100 	mov.w	r1, #0
 8007e1a:	0159      	lsls	r1, r3, #5
 8007e1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e20:	0150      	lsls	r0, r2, #5
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	ebb2 080a 	subs.w	r8, r2, sl
 8007e2a:	eb63 090b 	sbc.w	r9, r3, fp
 8007e2e:	f04f 0200 	mov.w	r2, #0
 8007e32:	f04f 0300 	mov.w	r3, #0
 8007e36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007e3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007e3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007e42:	ebb2 0408 	subs.w	r4, r2, r8
 8007e46:	eb63 0509 	sbc.w	r5, r3, r9
 8007e4a:	f04f 0200 	mov.w	r2, #0
 8007e4e:	f04f 0300 	mov.w	r3, #0
 8007e52:	00eb      	lsls	r3, r5, #3
 8007e54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e58:	00e2      	lsls	r2, r4, #3
 8007e5a:	4614      	mov	r4, r2
 8007e5c:	461d      	mov	r5, r3
 8007e5e:	eb14 030a 	adds.w	r3, r4, sl
 8007e62:	603b      	str	r3, [r7, #0]
 8007e64:	eb45 030b 	adc.w	r3, r5, fp
 8007e68:	607b      	str	r3, [r7, #4]
 8007e6a:	f04f 0200 	mov.w	r2, #0
 8007e6e:	f04f 0300 	mov.w	r3, #0
 8007e72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007e76:	4629      	mov	r1, r5
 8007e78:	028b      	lsls	r3, r1, #10
 8007e7a:	4621      	mov	r1, r4
 8007e7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e80:	4621      	mov	r1, r4
 8007e82:	028a      	lsls	r2, r1, #10
 8007e84:	4610      	mov	r0, r2
 8007e86:	4619      	mov	r1, r3
 8007e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	60bb      	str	r3, [r7, #8]
 8007e8e:	60fa      	str	r2, [r7, #12]
 8007e90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e94:	f7f8 fd92 	bl	80009bc <__aeabi_uldivmod>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ea0:	4b0b      	ldr	r3, [pc, #44]	; (8007ed0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	0c1b      	lsrs	r3, r3, #16
 8007ea6:	f003 0303 	and.w	r3, r3, #3
 8007eaa:	3301      	adds	r3, #1
 8007eac:	005b      	lsls	r3, r3, #1
 8007eae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007eb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007eba:	e002      	b.n	8007ec2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ebc:	4b05      	ldr	r3, [pc, #20]	; (8007ed4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007ebe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3740      	adds	r7, #64	; 0x40
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ece:	bf00      	nop
 8007ed0:	40023800 	.word	0x40023800
 8007ed4:	00f42400 	.word	0x00f42400
 8007ed8:	017d7840 	.word	0x017d7840

08007edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007edc:	b480      	push	{r7}
 8007ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ee0:	4b03      	ldr	r3, [pc, #12]	; (8007ef0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	20000038 	.word	0x20000038

08007ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ef8:	f7ff fff0 	bl	8007edc <HAL_RCC_GetHCLKFreq>
 8007efc:	4602      	mov	r2, r0
 8007efe:	4b05      	ldr	r3, [pc, #20]	; (8007f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	0a9b      	lsrs	r3, r3, #10
 8007f04:	f003 0307 	and.w	r3, r3, #7
 8007f08:	4903      	ldr	r1, [pc, #12]	; (8007f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f0a:	5ccb      	ldrb	r3, [r1, r3]
 8007f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	40023800 	.word	0x40023800
 8007f18:	080119f0 	.word	0x080119f0

08007f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007f20:	f7ff ffdc 	bl	8007edc <HAL_RCC_GetHCLKFreq>
 8007f24:	4602      	mov	r2, r0
 8007f26:	4b05      	ldr	r3, [pc, #20]	; (8007f3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	0b5b      	lsrs	r3, r3, #13
 8007f2c:	f003 0307 	and.w	r3, r3, #7
 8007f30:	4903      	ldr	r1, [pc, #12]	; (8007f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f32:	5ccb      	ldrb	r3, [r1, r3]
 8007f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	40023800 	.word	0x40023800
 8007f40:	080119f0 	.word	0x080119f0

08007f44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	220f      	movs	r2, #15
 8007f52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007f54:	4b12      	ldr	r3, [pc, #72]	; (8007fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f003 0203 	and.w	r2, r3, #3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007f60:	4b0f      	ldr	r3, [pc, #60]	; (8007fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007f6c:	4b0c      	ldr	r3, [pc, #48]	; (8007fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007f78:	4b09      	ldr	r3, [pc, #36]	; (8007fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	08db      	lsrs	r3, r3, #3
 8007f7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007f86:	4b07      	ldr	r3, [pc, #28]	; (8007fa4 <HAL_RCC_GetClockConfig+0x60>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0207 	and.w	r2, r3, #7
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	601a      	str	r2, [r3, #0]
}
 8007f92:	bf00      	nop
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	40023800 	.word	0x40023800
 8007fa4:	40023c00 	.word	0x40023c00

08007fa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e07b      	b.n	80080b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d108      	bne.n	8007fd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fca:	d009      	beq.n	8007fe0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	61da      	str	r2, [r3, #28]
 8007fd2:	e005      	b.n	8007fe0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d106      	bne.n	8008000 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f7fa fefc 	bl	8002df8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2202      	movs	r2, #2
 8008004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008016:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008028:	431a      	orrs	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008032:	431a      	orrs	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	431a      	orrs	r2, r3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	431a      	orrs	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	699b      	ldr	r3, [r3, #24]
 800804c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008050:	431a      	orrs	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	69db      	ldr	r3, [r3, #28]
 8008056:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800805a:	431a      	orrs	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a1b      	ldr	r3, [r3, #32]
 8008060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008064:	ea42 0103 	orr.w	r1, r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	430a      	orrs	r2, r1
 8008076:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	0c1b      	lsrs	r3, r3, #16
 800807e:	f003 0104 	and.w	r1, r3, #4
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008086:	f003 0210 	and.w	r2, r3, #16
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	430a      	orrs	r2, r1
 8008090:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	69da      	ldr	r2, [r3, #28]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b082      	sub	sp, #8
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d101      	bne.n	80080cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e041      	b.n	8008150 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d106      	bne.n	80080e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7fa fed1 	bl	8002e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2202      	movs	r2, #2
 80080ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	3304      	adds	r3, #4
 80080f6:	4619      	mov	r1, r3
 80080f8:	4610      	mov	r0, r2
 80080fa:	f000 fbf5 	bl	80088e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b01      	cmp	r3, #1
 800816a:	d001      	beq.n	8008170 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e044      	b.n	80081fa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2202      	movs	r2, #2
 8008174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68da      	ldr	r2, [r3, #12]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f042 0201 	orr.w	r2, r2, #1
 8008186:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a1e      	ldr	r2, [pc, #120]	; (8008208 <HAL_TIM_Base_Start_IT+0xb0>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d018      	beq.n	80081c4 <HAL_TIM_Base_Start_IT+0x6c>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800819a:	d013      	beq.n	80081c4 <HAL_TIM_Base_Start_IT+0x6c>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a1a      	ldr	r2, [pc, #104]	; (800820c <HAL_TIM_Base_Start_IT+0xb4>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d00e      	beq.n	80081c4 <HAL_TIM_Base_Start_IT+0x6c>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a19      	ldr	r2, [pc, #100]	; (8008210 <HAL_TIM_Base_Start_IT+0xb8>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d009      	beq.n	80081c4 <HAL_TIM_Base_Start_IT+0x6c>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a17      	ldr	r2, [pc, #92]	; (8008214 <HAL_TIM_Base_Start_IT+0xbc>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d004      	beq.n	80081c4 <HAL_TIM_Base_Start_IT+0x6c>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a16      	ldr	r2, [pc, #88]	; (8008218 <HAL_TIM_Base_Start_IT+0xc0>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d111      	bne.n	80081e8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f003 0307 	and.w	r3, r3, #7
 80081ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2b06      	cmp	r3, #6
 80081d4:	d010      	beq.n	80081f8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f042 0201 	orr.w	r2, r2, #1
 80081e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081e6:	e007      	b.n	80081f8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f042 0201 	orr.w	r2, r2, #1
 80081f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3714      	adds	r7, #20
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	40010000 	.word	0x40010000
 800820c:	40000400 	.word	0x40000400
 8008210:	40000800 	.word	0x40000800
 8008214:	40000c00 	.word	0x40000c00
 8008218:	40014000 	.word	0x40014000

0800821c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e041      	b.n	80082b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d106      	bne.n	8008248 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f839 	bl	80082ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2202      	movs	r2, #2
 800824c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	3304      	adds	r3, #4
 8008258:	4619      	mov	r1, r3
 800825a:	4610      	mov	r0, r2
 800825c:	f000 fb44 	bl	80088e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b083      	sub	sp, #12
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80082c2:	bf00      	nop
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	f003 0302 	and.w	r3, r3, #2
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d122      	bne.n	800832a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	f003 0302 	and.w	r3, r3, #2
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d11b      	bne.n	800832a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f06f 0202 	mvn.w	r2, #2
 80082fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	f003 0303 	and.w	r3, r3, #3
 800830c:	2b00      	cmp	r3, #0
 800830e:	d003      	beq.n	8008318 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fa78 	bl	8008806 <HAL_TIM_IC_CaptureCallback>
 8008316:	e005      	b.n	8008324 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fa6a 	bl	80087f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fa7b 	bl	800881a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	f003 0304 	and.w	r3, r3, #4
 8008334:	2b04      	cmp	r3, #4
 8008336:	d122      	bne.n	800837e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	f003 0304 	and.w	r3, r3, #4
 8008342:	2b04      	cmp	r3, #4
 8008344:	d11b      	bne.n	800837e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f06f 0204 	mvn.w	r2, #4
 800834e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008360:	2b00      	cmp	r3, #0
 8008362:	d003      	beq.n	800836c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fa4e 	bl	8008806 <HAL_TIM_IC_CaptureCallback>
 800836a:	e005      	b.n	8008378 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fa40 	bl	80087f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fa51 	bl	800881a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	f003 0308 	and.w	r3, r3, #8
 8008388:	2b08      	cmp	r3, #8
 800838a:	d122      	bne.n	80083d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	f003 0308 	and.w	r3, r3, #8
 8008396:	2b08      	cmp	r3, #8
 8008398:	d11b      	bne.n	80083d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f06f 0208 	mvn.w	r2, #8
 80083a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2204      	movs	r2, #4
 80083a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	f003 0303 	and.w	r3, r3, #3
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d003      	beq.n	80083c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 fa24 	bl	8008806 <HAL_TIM_IC_CaptureCallback>
 80083be:	e005      	b.n	80083cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fa16 	bl	80087f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fa27 	bl	800881a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	f003 0310 	and.w	r3, r3, #16
 80083dc:	2b10      	cmp	r3, #16
 80083de:	d122      	bne.n	8008426 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	f003 0310 	and.w	r3, r3, #16
 80083ea:	2b10      	cmp	r3, #16
 80083ec:	d11b      	bne.n	8008426 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f06f 0210 	mvn.w	r2, #16
 80083f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2208      	movs	r2, #8
 80083fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	69db      	ldr	r3, [r3, #28]
 8008404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008408:	2b00      	cmp	r3, #0
 800840a:	d003      	beq.n	8008414 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f9fa 	bl	8008806 <HAL_TIM_IC_CaptureCallback>
 8008412:	e005      	b.n	8008420 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f9ec 	bl	80087f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f9fd 	bl	800881a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	f003 0301 	and.w	r3, r3, #1
 8008430:	2b01      	cmp	r3, #1
 8008432:	d10e      	bne.n	8008452 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	2b01      	cmp	r3, #1
 8008440:	d107      	bne.n	8008452 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f06f 0201 	mvn.w	r2, #1
 800844a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7fa fc47 	bl	8002ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800845c:	2b80      	cmp	r3, #128	; 0x80
 800845e:	d10e      	bne.n	800847e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800846a:	2b80      	cmp	r3, #128	; 0x80
 800846c:	d107      	bne.n	800847e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fd79 	bl	8008f70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008488:	2b40      	cmp	r3, #64	; 0x40
 800848a:	d10e      	bne.n	80084aa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008496:	2b40      	cmp	r3, #64	; 0x40
 8008498:	d107      	bne.n	80084aa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f9c2 	bl	800882e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	f003 0320 	and.w	r3, r3, #32
 80084b4:	2b20      	cmp	r3, #32
 80084b6:	d10e      	bne.n	80084d6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	f003 0320 	and.w	r3, r3, #32
 80084c2:	2b20      	cmp	r3, #32
 80084c4:	d107      	bne.n	80084d6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f06f 0220 	mvn.w	r2, #32
 80084ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fd43 	bl	8008f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084d6:	bf00      	nop
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084ec:	2300      	movs	r3, #0
 80084ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d101      	bne.n	80084fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80084fa:	2302      	movs	r3, #2
 80084fc:	e0ae      	b.n	800865c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b0c      	cmp	r3, #12
 800850a:	f200 809f 	bhi.w	800864c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800850e:	a201      	add	r2, pc, #4	; (adr r2, 8008514 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008514:	08008549 	.word	0x08008549
 8008518:	0800864d 	.word	0x0800864d
 800851c:	0800864d 	.word	0x0800864d
 8008520:	0800864d 	.word	0x0800864d
 8008524:	08008589 	.word	0x08008589
 8008528:	0800864d 	.word	0x0800864d
 800852c:	0800864d 	.word	0x0800864d
 8008530:	0800864d 	.word	0x0800864d
 8008534:	080085cb 	.word	0x080085cb
 8008538:	0800864d 	.word	0x0800864d
 800853c:	0800864d 	.word	0x0800864d
 8008540:	0800864d 	.word	0x0800864d
 8008544:	0800860b 	.word	0x0800860b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68b9      	ldr	r1, [r7, #8]
 800854e:	4618      	mov	r0, r3
 8008550:	f000 fa4a 	bl	80089e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	699a      	ldr	r2, [r3, #24]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f042 0208 	orr.w	r2, r2, #8
 8008562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	699a      	ldr	r2, [r3, #24]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f022 0204 	bic.w	r2, r2, #4
 8008572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6999      	ldr	r1, [r3, #24]
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	691a      	ldr	r2, [r3, #16]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	430a      	orrs	r2, r1
 8008584:	619a      	str	r2, [r3, #24]
      break;
 8008586:	e064      	b.n	8008652 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68b9      	ldr	r1, [r7, #8]
 800858e:	4618      	mov	r0, r3
 8008590:	f000 fa90 	bl	8008ab4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	699a      	ldr	r2, [r3, #24]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	699a      	ldr	r2, [r3, #24]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6999      	ldr	r1, [r3, #24]
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	021a      	lsls	r2, r3, #8
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	430a      	orrs	r2, r1
 80085c6:	619a      	str	r2, [r3, #24]
      break;
 80085c8:	e043      	b.n	8008652 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68b9      	ldr	r1, [r7, #8]
 80085d0:	4618      	mov	r0, r3
 80085d2:	f000 fadb 	bl	8008b8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	69da      	ldr	r2, [r3, #28]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f042 0208 	orr.w	r2, r2, #8
 80085e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	69da      	ldr	r2, [r3, #28]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f022 0204 	bic.w	r2, r2, #4
 80085f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	69d9      	ldr	r1, [r3, #28]
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	691a      	ldr	r2, [r3, #16]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	430a      	orrs	r2, r1
 8008606:	61da      	str	r2, [r3, #28]
      break;
 8008608:	e023      	b.n	8008652 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68b9      	ldr	r1, [r7, #8]
 8008610:	4618      	mov	r0, r3
 8008612:	f000 fb25 	bl	8008c60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	69da      	ldr	r2, [r3, #28]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008624:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	69da      	ldr	r2, [r3, #28]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008634:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	69d9      	ldr	r1, [r3, #28]
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	021a      	lsls	r2, r3, #8
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	430a      	orrs	r2, r1
 8008648:	61da      	str	r2, [r3, #28]
      break;
 800864a:	e002      	b.n	8008652 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	75fb      	strb	r3, [r7, #23]
      break;
 8008650:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800865a:	7dfb      	ldrb	r3, [r7, #23]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3718      	adds	r7, #24
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800866e:	2300      	movs	r3, #0
 8008670:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008678:	2b01      	cmp	r3, #1
 800867a:	d101      	bne.n	8008680 <HAL_TIM_ConfigClockSource+0x1c>
 800867c:	2302      	movs	r3, #2
 800867e:	e0b4      	b.n	80087ea <HAL_TIM_ConfigClockSource+0x186>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2202      	movs	r2, #2
 800868c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800869e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086b8:	d03e      	beq.n	8008738 <HAL_TIM_ConfigClockSource+0xd4>
 80086ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086be:	f200 8087 	bhi.w	80087d0 <HAL_TIM_ConfigClockSource+0x16c>
 80086c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086c6:	f000 8086 	beq.w	80087d6 <HAL_TIM_ConfigClockSource+0x172>
 80086ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ce:	d87f      	bhi.n	80087d0 <HAL_TIM_ConfigClockSource+0x16c>
 80086d0:	2b70      	cmp	r3, #112	; 0x70
 80086d2:	d01a      	beq.n	800870a <HAL_TIM_ConfigClockSource+0xa6>
 80086d4:	2b70      	cmp	r3, #112	; 0x70
 80086d6:	d87b      	bhi.n	80087d0 <HAL_TIM_ConfigClockSource+0x16c>
 80086d8:	2b60      	cmp	r3, #96	; 0x60
 80086da:	d050      	beq.n	800877e <HAL_TIM_ConfigClockSource+0x11a>
 80086dc:	2b60      	cmp	r3, #96	; 0x60
 80086de:	d877      	bhi.n	80087d0 <HAL_TIM_ConfigClockSource+0x16c>
 80086e0:	2b50      	cmp	r3, #80	; 0x50
 80086e2:	d03c      	beq.n	800875e <HAL_TIM_ConfigClockSource+0xfa>
 80086e4:	2b50      	cmp	r3, #80	; 0x50
 80086e6:	d873      	bhi.n	80087d0 <HAL_TIM_ConfigClockSource+0x16c>
 80086e8:	2b40      	cmp	r3, #64	; 0x40
 80086ea:	d058      	beq.n	800879e <HAL_TIM_ConfigClockSource+0x13a>
 80086ec:	2b40      	cmp	r3, #64	; 0x40
 80086ee:	d86f      	bhi.n	80087d0 <HAL_TIM_ConfigClockSource+0x16c>
 80086f0:	2b30      	cmp	r3, #48	; 0x30
 80086f2:	d064      	beq.n	80087be <HAL_TIM_ConfigClockSource+0x15a>
 80086f4:	2b30      	cmp	r3, #48	; 0x30
 80086f6:	d86b      	bhi.n	80087d0 <HAL_TIM_ConfigClockSource+0x16c>
 80086f8:	2b20      	cmp	r3, #32
 80086fa:	d060      	beq.n	80087be <HAL_TIM_ConfigClockSource+0x15a>
 80086fc:	2b20      	cmp	r3, #32
 80086fe:	d867      	bhi.n	80087d0 <HAL_TIM_ConfigClockSource+0x16c>
 8008700:	2b00      	cmp	r3, #0
 8008702:	d05c      	beq.n	80087be <HAL_TIM_ConfigClockSource+0x15a>
 8008704:	2b10      	cmp	r3, #16
 8008706:	d05a      	beq.n	80087be <HAL_TIM_ConfigClockSource+0x15a>
 8008708:	e062      	b.n	80087d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6818      	ldr	r0, [r3, #0]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	6899      	ldr	r1, [r3, #8]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	685a      	ldr	r2, [r3, #4]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	f000 fb6b 	bl	8008df4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800872c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	609a      	str	r2, [r3, #8]
      break;
 8008736:	e04f      	b.n	80087d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6818      	ldr	r0, [r3, #0]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	6899      	ldr	r1, [r3, #8]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	685a      	ldr	r2, [r3, #4]
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	f000 fb54 	bl	8008df4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	689a      	ldr	r2, [r3, #8]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800875a:	609a      	str	r2, [r3, #8]
      break;
 800875c:	e03c      	b.n	80087d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6818      	ldr	r0, [r3, #0]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	6859      	ldr	r1, [r3, #4]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	461a      	mov	r2, r3
 800876c:	f000 fac8 	bl	8008d00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2150      	movs	r1, #80	; 0x50
 8008776:	4618      	mov	r0, r3
 8008778:	f000 fb21 	bl	8008dbe <TIM_ITRx_SetConfig>
      break;
 800877c:	e02c      	b.n	80087d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6818      	ldr	r0, [r3, #0]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	6859      	ldr	r1, [r3, #4]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	461a      	mov	r2, r3
 800878c:	f000 fae7 	bl	8008d5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2160      	movs	r1, #96	; 0x60
 8008796:	4618      	mov	r0, r3
 8008798:	f000 fb11 	bl	8008dbe <TIM_ITRx_SetConfig>
      break;
 800879c:	e01c      	b.n	80087d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6818      	ldr	r0, [r3, #0]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	6859      	ldr	r1, [r3, #4]
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	461a      	mov	r2, r3
 80087ac:	f000 faa8 	bl	8008d00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2140      	movs	r1, #64	; 0x40
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 fb01 	bl	8008dbe <TIM_ITRx_SetConfig>
      break;
 80087bc:	e00c      	b.n	80087d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4619      	mov	r1, r3
 80087c8:	4610      	mov	r0, r2
 80087ca:	f000 faf8 	bl	8008dbe <TIM_ITRx_SetConfig>
      break;
 80087ce:	e003      	b.n	80087d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	73fb      	strb	r3, [r7, #15]
      break;
 80087d4:	e000      	b.n	80087d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80087d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b083      	sub	sp, #12
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087fa:	bf00      	nop
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008806:	b480      	push	{r7}
 8008808:	b083      	sub	sp, #12
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800880e:	bf00      	nop
 8008810:	370c      	adds	r7, #12
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr

0800881a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800881a:	b480      	push	{r7}
 800881c:	b083      	sub	sp, #12
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008822:	bf00      	nop
 8008824:	370c      	adds	r7, #12
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr

0800882e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800882e:	b480      	push	{r7}
 8008830:	b083      	sub	sp, #12
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008836:	bf00      	nop
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008842:	b480      	push	{r7}
 8008844:	b083      	sub	sp, #12
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800884a:	bf00      	nop
 800884c:	370c      	adds	r7, #12
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008862:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	429a      	cmp	r2, r3
 800886c:	d107      	bne.n	800887e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2201      	movs	r2, #1
 8008872:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800887c:	e02a      	b.n	80088d4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	429a      	cmp	r2, r3
 8008886:	d107      	bne.n	8008898 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2202      	movs	r2, #2
 800888c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008896:	e01d      	b.n	80088d4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d107      	bne.n	80088b2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2204      	movs	r2, #4
 80088a6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088b0:	e010      	b.n	80088d4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d107      	bne.n	80088cc <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2208      	movs	r2, #8
 80088c0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088ca:	e003      	b.n	80088d4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f7ff ffb4 	bl	8008842 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	771a      	strb	r2, [r3, #28]
}
 80088e0:	bf00      	nop
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a34      	ldr	r2, [pc, #208]	; (80089cc <TIM_Base_SetConfig+0xe4>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d00f      	beq.n	8008920 <TIM_Base_SetConfig+0x38>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008906:	d00b      	beq.n	8008920 <TIM_Base_SetConfig+0x38>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a31      	ldr	r2, [pc, #196]	; (80089d0 <TIM_Base_SetConfig+0xe8>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d007      	beq.n	8008920 <TIM_Base_SetConfig+0x38>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a30      	ldr	r2, [pc, #192]	; (80089d4 <TIM_Base_SetConfig+0xec>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d003      	beq.n	8008920 <TIM_Base_SetConfig+0x38>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a2f      	ldr	r2, [pc, #188]	; (80089d8 <TIM_Base_SetConfig+0xf0>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d108      	bne.n	8008932 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	4313      	orrs	r3, r2
 8008930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a25      	ldr	r2, [pc, #148]	; (80089cc <TIM_Base_SetConfig+0xe4>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d01b      	beq.n	8008972 <TIM_Base_SetConfig+0x8a>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008940:	d017      	beq.n	8008972 <TIM_Base_SetConfig+0x8a>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a22      	ldr	r2, [pc, #136]	; (80089d0 <TIM_Base_SetConfig+0xe8>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d013      	beq.n	8008972 <TIM_Base_SetConfig+0x8a>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a21      	ldr	r2, [pc, #132]	; (80089d4 <TIM_Base_SetConfig+0xec>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d00f      	beq.n	8008972 <TIM_Base_SetConfig+0x8a>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a20      	ldr	r2, [pc, #128]	; (80089d8 <TIM_Base_SetConfig+0xf0>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d00b      	beq.n	8008972 <TIM_Base_SetConfig+0x8a>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a1f      	ldr	r2, [pc, #124]	; (80089dc <TIM_Base_SetConfig+0xf4>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d007      	beq.n	8008972 <TIM_Base_SetConfig+0x8a>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a1e      	ldr	r2, [pc, #120]	; (80089e0 <TIM_Base_SetConfig+0xf8>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d003      	beq.n	8008972 <TIM_Base_SetConfig+0x8a>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a1d      	ldr	r2, [pc, #116]	; (80089e4 <TIM_Base_SetConfig+0xfc>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d108      	bne.n	8008984 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	4313      	orrs	r3, r2
 8008982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	4313      	orrs	r3, r2
 8008990:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	689a      	ldr	r2, [r3, #8]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a08      	ldr	r2, [pc, #32]	; (80089cc <TIM_Base_SetConfig+0xe4>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d103      	bne.n	80089b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	691a      	ldr	r2, [r3, #16]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	615a      	str	r2, [r3, #20]
}
 80089be:	bf00      	nop
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	40010000 	.word	0x40010000
 80089d0:	40000400 	.word	0x40000400
 80089d4:	40000800 	.word	0x40000800
 80089d8:	40000c00 	.word	0x40000c00
 80089dc:	40014000 	.word	0x40014000
 80089e0:	40014400 	.word	0x40014400
 80089e4:	40014800 	.word	0x40014800

080089e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b087      	sub	sp, #28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	f023 0201 	bic.w	r2, r3, #1
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	699b      	ldr	r3, [r3, #24]
 8008a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f023 0303 	bic.w	r3, r3, #3
 8008a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	f023 0302 	bic.w	r3, r3, #2
 8008a30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a1c      	ldr	r2, [pc, #112]	; (8008ab0 <TIM_OC1_SetConfig+0xc8>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d10c      	bne.n	8008a5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	f023 0308 	bic.w	r3, r3, #8
 8008a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f023 0304 	bic.w	r3, r3, #4
 8008a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a13      	ldr	r2, [pc, #76]	; (8008ab0 <TIM_OC1_SetConfig+0xc8>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d111      	bne.n	8008a8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	693a      	ldr	r2, [r7, #16]
 8008a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	685a      	ldr	r2, [r3, #4]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	621a      	str	r2, [r3, #32]
}
 8008aa4:	bf00      	nop
 8008aa6:	371c      	adds	r7, #28
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr
 8008ab0:	40010000 	.word	0x40010000

08008ab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a1b      	ldr	r3, [r3, #32]
 8008ac2:	f023 0210 	bic.w	r2, r3, #16
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a1b      	ldr	r3, [r3, #32]
 8008ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	699b      	ldr	r3, [r3, #24]
 8008ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	021b      	lsls	r3, r3, #8
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	f023 0320 	bic.w	r3, r3, #32
 8008afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	011b      	lsls	r3, r3, #4
 8008b06:	697a      	ldr	r2, [r7, #20]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4a1e      	ldr	r2, [pc, #120]	; (8008b88 <TIM_OC2_SetConfig+0xd4>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d10d      	bne.n	8008b30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	011b      	lsls	r3, r3, #4
 8008b22:	697a      	ldr	r2, [r7, #20]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a15      	ldr	r2, [pc, #84]	; (8008b88 <TIM_OC2_SetConfig+0xd4>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d113      	bne.n	8008b60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	695b      	ldr	r3, [r3, #20]
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	699b      	ldr	r3, [r3, #24]
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	693a      	ldr	r2, [r7, #16]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	621a      	str	r2, [r3, #32]
}
 8008b7a:	bf00      	nop
 8008b7c:	371c      	adds	r7, #28
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	40010000 	.word	0x40010000

08008b8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b087      	sub	sp, #28
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	69db      	ldr	r3, [r3, #28]
 8008bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f023 0303 	bic.w	r3, r3, #3
 8008bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	021b      	lsls	r3, r3, #8
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a1d      	ldr	r2, [pc, #116]	; (8008c5c <TIM_OC3_SetConfig+0xd0>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d10d      	bne.n	8008c06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	021b      	lsls	r3, r3, #8
 8008bf8:	697a      	ldr	r2, [r7, #20]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a14      	ldr	r2, [pc, #80]	; (8008c5c <TIM_OC3_SetConfig+0xd0>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d113      	bne.n	8008c36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	695b      	ldr	r3, [r3, #20]
 8008c22:	011b      	lsls	r3, r3, #4
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	011b      	lsls	r3, r3, #4
 8008c30:	693a      	ldr	r2, [r7, #16]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	697a      	ldr	r2, [r7, #20]
 8008c4e:	621a      	str	r2, [r3, #32]
}
 8008c50:	bf00      	nop
 8008c52:	371c      	adds	r7, #28
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	40010000 	.word	0x40010000

08008c60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a1b      	ldr	r3, [r3, #32]
 8008c7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	021b      	lsls	r3, r3, #8
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008caa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	031b      	lsls	r3, r3, #12
 8008cb2:	693a      	ldr	r2, [r7, #16]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a10      	ldr	r2, [pc, #64]	; (8008cfc <TIM_OC4_SetConfig+0x9c>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d109      	bne.n	8008cd4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	695b      	ldr	r3, [r3, #20]
 8008ccc:	019b      	lsls	r3, r3, #6
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	697a      	ldr	r2, [r7, #20]
 8008cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	685a      	ldr	r2, [r3, #4]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	693a      	ldr	r2, [r7, #16]
 8008cec:	621a      	str	r2, [r3, #32]
}
 8008cee:	bf00      	nop
 8008cf0:	371c      	adds	r7, #28
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	40010000 	.word	0x40010000

08008d00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b087      	sub	sp, #28
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6a1b      	ldr	r3, [r3, #32]
 8008d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	f023 0201 	bic.w	r2, r3, #1
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	699b      	ldr	r3, [r3, #24]
 8008d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	011b      	lsls	r3, r3, #4
 8008d30:	693a      	ldr	r2, [r7, #16]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	f023 030a 	bic.w	r3, r3, #10
 8008d3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d3e:	697a      	ldr	r2, [r7, #20]
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	621a      	str	r2, [r3, #32]
}
 8008d52:	bf00      	nop
 8008d54:	371c      	adds	r7, #28
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b087      	sub	sp, #28
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	60f8      	str	r0, [r7, #12]
 8008d66:	60b9      	str	r1, [r7, #8]
 8008d68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6a1b      	ldr	r3, [r3, #32]
 8008d6e:	f023 0210 	bic.w	r2, r3, #16
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6a1b      	ldr	r3, [r3, #32]
 8008d80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	031b      	lsls	r3, r3, #12
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	011b      	lsls	r3, r3, #4
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	697a      	ldr	r2, [r7, #20]
 8008daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	693a      	ldr	r2, [r7, #16]
 8008db0:	621a      	str	r2, [r3, #32]
}
 8008db2:	bf00      	nop
 8008db4:	371c      	adds	r7, #28
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b085      	sub	sp, #20
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008dd6:	683a      	ldr	r2, [r7, #0]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	f043 0307 	orr.w	r3, r3, #7
 8008de0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	609a      	str	r2, [r3, #8]
}
 8008de8:	bf00      	nop
 8008dea:	3714      	adds	r7, #20
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b087      	sub	sp, #28
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
 8008e00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	021a      	lsls	r2, r3, #8
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	431a      	orrs	r2, r3
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	697a      	ldr	r2, [r7, #20]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	697a      	ldr	r2, [r7, #20]
 8008e26:	609a      	str	r2, [r3, #8]
}
 8008e28:	bf00      	nop
 8008e2a:	371c      	adds	r7, #28
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b087      	sub	sp, #28
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	f003 031f 	and.w	r3, r3, #31
 8008e46:	2201      	movs	r2, #1
 8008e48:	fa02 f303 	lsl.w	r3, r2, r3
 8008e4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6a1a      	ldr	r2, [r3, #32]
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	43db      	mvns	r3, r3
 8008e56:	401a      	ands	r2, r3
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6a1a      	ldr	r2, [r3, #32]
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	f003 031f 	and.w	r3, r3, #31
 8008e66:	6879      	ldr	r1, [r7, #4]
 8008e68:	fa01 f303 	lsl.w	r3, r1, r3
 8008e6c:	431a      	orrs	r2, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	621a      	str	r2, [r3, #32]
}
 8008e72:	bf00      	nop
 8008e74:	371c      	adds	r7, #28
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
	...

08008e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d101      	bne.n	8008e98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e94:	2302      	movs	r3, #2
 8008e96:	e050      	b.n	8008f3a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2202      	movs	r2, #2
 8008ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ebe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a1c      	ldr	r2, [pc, #112]	; (8008f48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d018      	beq.n	8008f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ee4:	d013      	beq.n	8008f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a18      	ldr	r2, [pc, #96]	; (8008f4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d00e      	beq.n	8008f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a16      	ldr	r2, [pc, #88]	; (8008f50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d009      	beq.n	8008f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a15      	ldr	r2, [pc, #84]	; (8008f54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d004      	beq.n	8008f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a13      	ldr	r2, [pc, #76]	; (8008f58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d10c      	bne.n	8008f28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3714      	adds	r7, #20
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	40010000 	.word	0x40010000
 8008f4c:	40000400 	.word	0x40000400
 8008f50:	40000800 	.word	0x40000800
 8008f54:	40000c00 	.word	0x40000c00
 8008f58:	40014000 	.word	0x40014000

08008f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f64:	bf00      	nop
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f84:	b084      	sub	sp, #16
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
 8008f8e:	f107 001c 	add.w	r0, r7, #28
 8008f92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d122      	bne.n	8008fe2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d105      	bne.n	8008fd6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f001 fbee 	bl	800a7b8 <USB_CoreReset>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	73fb      	strb	r3, [r7, #15]
 8008fe0:	e01a      	b.n	8009018 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f001 fbe2 	bl	800a7b8 <USB_CoreReset>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d106      	bne.n	800900c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009002:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	639a      	str	r2, [r3, #56]	; 0x38
 800900a:	e005      	b.n	8009018 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009010:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901a:	2b01      	cmp	r3, #1
 800901c:	d10b      	bne.n	8009036 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	f043 0206 	orr.w	r2, r3, #6
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	f043 0220 	orr.w	r2, r3, #32
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009036:	7bfb      	ldrb	r3, [r7, #15]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009042:	b004      	add	sp, #16
 8009044:	4770      	bx	lr
	...

08009048 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009048:	b480      	push	{r7}
 800904a:	b087      	sub	sp, #28
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	4613      	mov	r3, r2
 8009054:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009056:	79fb      	ldrb	r3, [r7, #7]
 8009058:	2b02      	cmp	r3, #2
 800905a:	d165      	bne.n	8009128 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	4a41      	ldr	r2, [pc, #260]	; (8009164 <USB_SetTurnaroundTime+0x11c>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d906      	bls.n	8009072 <USB_SetTurnaroundTime+0x2a>
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	4a40      	ldr	r2, [pc, #256]	; (8009168 <USB_SetTurnaroundTime+0x120>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d202      	bcs.n	8009072 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800906c:	230f      	movs	r3, #15
 800906e:	617b      	str	r3, [r7, #20]
 8009070:	e062      	b.n	8009138 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	4a3c      	ldr	r2, [pc, #240]	; (8009168 <USB_SetTurnaroundTime+0x120>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d306      	bcc.n	8009088 <USB_SetTurnaroundTime+0x40>
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	4a3b      	ldr	r2, [pc, #236]	; (800916c <USB_SetTurnaroundTime+0x124>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d202      	bcs.n	8009088 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009082:	230e      	movs	r3, #14
 8009084:	617b      	str	r3, [r7, #20]
 8009086:	e057      	b.n	8009138 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	4a38      	ldr	r2, [pc, #224]	; (800916c <USB_SetTurnaroundTime+0x124>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d306      	bcc.n	800909e <USB_SetTurnaroundTime+0x56>
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	4a37      	ldr	r2, [pc, #220]	; (8009170 <USB_SetTurnaroundTime+0x128>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d202      	bcs.n	800909e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009098:	230d      	movs	r3, #13
 800909a:	617b      	str	r3, [r7, #20]
 800909c:	e04c      	b.n	8009138 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	4a33      	ldr	r2, [pc, #204]	; (8009170 <USB_SetTurnaroundTime+0x128>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d306      	bcc.n	80090b4 <USB_SetTurnaroundTime+0x6c>
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	4a32      	ldr	r2, [pc, #200]	; (8009174 <USB_SetTurnaroundTime+0x12c>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d802      	bhi.n	80090b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80090ae:	230c      	movs	r3, #12
 80090b0:	617b      	str	r3, [r7, #20]
 80090b2:	e041      	b.n	8009138 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	4a2f      	ldr	r2, [pc, #188]	; (8009174 <USB_SetTurnaroundTime+0x12c>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d906      	bls.n	80090ca <USB_SetTurnaroundTime+0x82>
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	4a2e      	ldr	r2, [pc, #184]	; (8009178 <USB_SetTurnaroundTime+0x130>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d802      	bhi.n	80090ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80090c4:	230b      	movs	r3, #11
 80090c6:	617b      	str	r3, [r7, #20]
 80090c8:	e036      	b.n	8009138 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	4a2a      	ldr	r2, [pc, #168]	; (8009178 <USB_SetTurnaroundTime+0x130>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d906      	bls.n	80090e0 <USB_SetTurnaroundTime+0x98>
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	4a29      	ldr	r2, [pc, #164]	; (800917c <USB_SetTurnaroundTime+0x134>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d802      	bhi.n	80090e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80090da:	230a      	movs	r3, #10
 80090dc:	617b      	str	r3, [r7, #20]
 80090de:	e02b      	b.n	8009138 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	4a26      	ldr	r2, [pc, #152]	; (800917c <USB_SetTurnaroundTime+0x134>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d906      	bls.n	80090f6 <USB_SetTurnaroundTime+0xae>
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	4a25      	ldr	r2, [pc, #148]	; (8009180 <USB_SetTurnaroundTime+0x138>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d202      	bcs.n	80090f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80090f0:	2309      	movs	r3, #9
 80090f2:	617b      	str	r3, [r7, #20]
 80090f4:	e020      	b.n	8009138 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	4a21      	ldr	r2, [pc, #132]	; (8009180 <USB_SetTurnaroundTime+0x138>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d306      	bcc.n	800910c <USB_SetTurnaroundTime+0xc4>
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	4a20      	ldr	r2, [pc, #128]	; (8009184 <USB_SetTurnaroundTime+0x13c>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d802      	bhi.n	800910c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009106:	2308      	movs	r3, #8
 8009108:	617b      	str	r3, [r7, #20]
 800910a:	e015      	b.n	8009138 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	4a1d      	ldr	r2, [pc, #116]	; (8009184 <USB_SetTurnaroundTime+0x13c>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d906      	bls.n	8009122 <USB_SetTurnaroundTime+0xda>
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	4a1c      	ldr	r2, [pc, #112]	; (8009188 <USB_SetTurnaroundTime+0x140>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d202      	bcs.n	8009122 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800911c:	2307      	movs	r3, #7
 800911e:	617b      	str	r3, [r7, #20]
 8009120:	e00a      	b.n	8009138 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009122:	2306      	movs	r3, #6
 8009124:	617b      	str	r3, [r7, #20]
 8009126:	e007      	b.n	8009138 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009128:	79fb      	ldrb	r3, [r7, #7]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d102      	bne.n	8009134 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800912e:	2309      	movs	r3, #9
 8009130:	617b      	str	r3, [r7, #20]
 8009132:	e001      	b.n	8009138 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009134:	2309      	movs	r3, #9
 8009136:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	68da      	ldr	r2, [r3, #12]
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	029b      	lsls	r3, r3, #10
 800914c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009150:	431a      	orrs	r2, r3
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	371c      	adds	r7, #28
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr
 8009164:	00d8acbf 	.word	0x00d8acbf
 8009168:	00e4e1c0 	.word	0x00e4e1c0
 800916c:	00f42400 	.word	0x00f42400
 8009170:	01067380 	.word	0x01067380
 8009174:	011a499f 	.word	0x011a499f
 8009178:	01312cff 	.word	0x01312cff
 800917c:	014ca43f 	.word	0x014ca43f
 8009180:	016e3600 	.word	0x016e3600
 8009184:	01a6ab1f 	.word	0x01a6ab1f
 8009188:	01e84800 	.word	0x01e84800

0800918c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	f043 0201 	orr.w	r2, r3, #1
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	370c      	adds	r7, #12
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr

080091ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091ae:	b480      	push	{r7}
 80091b0:	b083      	sub	sp, #12
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	f023 0201 	bic.w	r2, r3, #1
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	460b      	mov	r3, r1
 80091da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80091dc:	2300      	movs	r3, #0
 80091de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80091ec:	78fb      	ldrb	r3, [r7, #3]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d115      	bne.n	800921e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80091fe:	2001      	movs	r0, #1
 8009200:	f7fa fc04 	bl	8003a0c <HAL_Delay>
      ms++;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	3301      	adds	r3, #1
 8009208:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f001 fa45 	bl	800a69a <USB_GetMode>
 8009210:	4603      	mov	r3, r0
 8009212:	2b01      	cmp	r3, #1
 8009214:	d01e      	beq.n	8009254 <USB_SetCurrentMode+0x84>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2b31      	cmp	r3, #49	; 0x31
 800921a:	d9f0      	bls.n	80091fe <USB_SetCurrentMode+0x2e>
 800921c:	e01a      	b.n	8009254 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800921e:	78fb      	ldrb	r3, [r7, #3]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d115      	bne.n	8009250 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009230:	2001      	movs	r0, #1
 8009232:	f7fa fbeb 	bl	8003a0c <HAL_Delay>
      ms++;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	3301      	adds	r3, #1
 800923a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f001 fa2c 	bl	800a69a <USB_GetMode>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d005      	beq.n	8009254 <USB_SetCurrentMode+0x84>
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2b31      	cmp	r3, #49	; 0x31
 800924c:	d9f0      	bls.n	8009230 <USB_SetCurrentMode+0x60>
 800924e:	e001      	b.n	8009254 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	e005      	b.n	8009260 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2b32      	cmp	r3, #50	; 0x32
 8009258:	d101      	bne.n	800925e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e000      	b.n	8009260 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009268:	b084      	sub	sp, #16
 800926a:	b580      	push	{r7, lr}
 800926c:	b086      	sub	sp, #24
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
 8009272:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009282:	2300      	movs	r3, #0
 8009284:	613b      	str	r3, [r7, #16]
 8009286:	e009      	b.n	800929c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	3340      	adds	r3, #64	; 0x40
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	4413      	add	r3, r2
 8009292:	2200      	movs	r2, #0
 8009294:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	3301      	adds	r3, #1
 800929a:	613b      	str	r3, [r7, #16]
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	2b0e      	cmp	r3, #14
 80092a0:	d9f2      	bls.n	8009288 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80092a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d11c      	bne.n	80092e2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092b6:	f043 0302 	orr.w	r3, r3, #2
 80092ba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092cc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	639a      	str	r2, [r3, #56]	; 0x38
 80092e0:	e00b      	b.n	80092fa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009300:	461a      	mov	r2, r3
 8009302:	2300      	movs	r3, #0
 8009304:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800930c:	4619      	mov	r1, r3
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009314:	461a      	mov	r2, r3
 8009316:	680b      	ldr	r3, [r1, #0]
 8009318:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800931a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931c:	2b01      	cmp	r3, #1
 800931e:	d10c      	bne.n	800933a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009322:	2b00      	cmp	r3, #0
 8009324:	d104      	bne.n	8009330 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009326:	2100      	movs	r1, #0
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 f965 	bl	80095f8 <USB_SetDevSpeed>
 800932e:	e008      	b.n	8009342 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009330:	2101      	movs	r1, #1
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 f960 	bl	80095f8 <USB_SetDevSpeed>
 8009338:	e003      	b.n	8009342 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800933a:	2103      	movs	r1, #3
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 f95b 	bl	80095f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009342:	2110      	movs	r1, #16
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 f8f3 	bl	8009530 <USB_FlushTxFifo>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d001      	beq.n	8009354 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 f91f 	bl	8009598 <USB_FlushRxFifo>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800936a:	461a      	mov	r2, r3
 800936c:	2300      	movs	r3, #0
 800936e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009376:	461a      	mov	r2, r3
 8009378:	2300      	movs	r3, #0
 800937a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009382:	461a      	mov	r2, r3
 8009384:	2300      	movs	r3, #0
 8009386:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009388:	2300      	movs	r3, #0
 800938a:	613b      	str	r3, [r7, #16]
 800938c:	e043      	b.n	8009416 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	015a      	lsls	r2, r3, #5
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	4413      	add	r3, r2
 8009396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093a4:	d118      	bne.n	80093d8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10a      	bne.n	80093c2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	015a      	lsls	r2, r3, #5
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	4413      	add	r3, r2
 80093b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093b8:	461a      	mov	r2, r3
 80093ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80093be:	6013      	str	r3, [r2, #0]
 80093c0:	e013      	b.n	80093ea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	015a      	lsls	r2, r3, #5
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	4413      	add	r3, r2
 80093ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ce:	461a      	mov	r2, r3
 80093d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80093d4:	6013      	str	r3, [r2, #0]
 80093d6:	e008      	b.n	80093ea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	015a      	lsls	r2, r3, #5
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	4413      	add	r3, r2
 80093e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e4:	461a      	mov	r2, r3
 80093e6:	2300      	movs	r3, #0
 80093e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	015a      	lsls	r2, r3, #5
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	4413      	add	r3, r2
 80093f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093f6:	461a      	mov	r2, r3
 80093f8:	2300      	movs	r3, #0
 80093fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	015a      	lsls	r2, r3, #5
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	4413      	add	r3, r2
 8009404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009408:	461a      	mov	r2, r3
 800940a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800940e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	3301      	adds	r3, #1
 8009414:	613b      	str	r3, [r7, #16]
 8009416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009418:	693a      	ldr	r2, [r7, #16]
 800941a:	429a      	cmp	r2, r3
 800941c:	d3b7      	bcc.n	800938e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800941e:	2300      	movs	r3, #0
 8009420:	613b      	str	r3, [r7, #16]
 8009422:	e043      	b.n	80094ac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	015a      	lsls	r2, r3, #5
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	4413      	add	r3, r2
 800942c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009436:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800943a:	d118      	bne.n	800946e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10a      	bne.n	8009458 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	015a      	lsls	r2, r3, #5
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	4413      	add	r3, r2
 800944a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800944e:	461a      	mov	r2, r3
 8009450:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009454:	6013      	str	r3, [r2, #0]
 8009456:	e013      	b.n	8009480 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	015a      	lsls	r2, r3, #5
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	4413      	add	r3, r2
 8009460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009464:	461a      	mov	r2, r3
 8009466:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800946a:	6013      	str	r3, [r2, #0]
 800946c:	e008      	b.n	8009480 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	015a      	lsls	r2, r3, #5
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	4413      	add	r3, r2
 8009476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800947a:	461a      	mov	r2, r3
 800947c:	2300      	movs	r3, #0
 800947e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	015a      	lsls	r2, r3, #5
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	4413      	add	r3, r2
 8009488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800948c:	461a      	mov	r2, r3
 800948e:	2300      	movs	r3, #0
 8009490:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	015a      	lsls	r2, r3, #5
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	4413      	add	r3, r2
 800949a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800949e:	461a      	mov	r2, r3
 80094a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80094a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	3301      	adds	r3, #1
 80094aa:	613b      	str	r3, [r7, #16]
 80094ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d3b7      	bcc.n	8009424 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80094d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80094d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d105      	bne.n	80094e8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	f043 0210 	orr.w	r2, r3, #16
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	699a      	ldr	r2, [r3, #24]
 80094ec:	4b0f      	ldr	r3, [pc, #60]	; (800952c <USB_DevInit+0x2c4>)
 80094ee:	4313      	orrs	r3, r2
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80094f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d005      	beq.n	8009506 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	699b      	ldr	r3, [r3, #24]
 80094fe:	f043 0208 	orr.w	r2, r3, #8
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009508:	2b01      	cmp	r3, #1
 800950a:	d107      	bne.n	800951c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009514:	f043 0304 	orr.w	r3, r3, #4
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800951c:	7dfb      	ldrb	r3, [r7, #23]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3718      	adds	r7, #24
 8009522:	46bd      	mov	sp, r7
 8009524:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009528:	b004      	add	sp, #16
 800952a:	4770      	bx	lr
 800952c:	803c3800 	.word	0x803c3800

08009530 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800953a:	2300      	movs	r3, #0
 800953c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	3301      	adds	r3, #1
 8009542:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	4a13      	ldr	r2, [pc, #76]	; (8009594 <USB_FlushTxFifo+0x64>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d901      	bls.n	8009550 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800954c:	2303      	movs	r3, #3
 800954e:	e01b      	b.n	8009588 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	691b      	ldr	r3, [r3, #16]
 8009554:	2b00      	cmp	r3, #0
 8009556:	daf2      	bge.n	800953e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009558:	2300      	movs	r3, #0
 800955a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	019b      	lsls	r3, r3, #6
 8009560:	f043 0220 	orr.w	r2, r3, #32
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	3301      	adds	r3, #1
 800956c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	4a08      	ldr	r2, [pc, #32]	; (8009594 <USB_FlushTxFifo+0x64>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d901      	bls.n	800957a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009576:	2303      	movs	r3, #3
 8009578:	e006      	b.n	8009588 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	f003 0320 	and.w	r3, r3, #32
 8009582:	2b20      	cmp	r3, #32
 8009584:	d0f0      	beq.n	8009568 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3714      	adds	r7, #20
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr
 8009594:	00030d40 	.word	0x00030d40

08009598 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095a0:	2300      	movs	r3, #0
 80095a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	3301      	adds	r3, #1
 80095a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	4a11      	ldr	r2, [pc, #68]	; (80095f4 <USB_FlushRxFifo+0x5c>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d901      	bls.n	80095b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80095b2:	2303      	movs	r3, #3
 80095b4:	e018      	b.n	80095e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	daf2      	bge.n	80095a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80095be:	2300      	movs	r3, #0
 80095c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2210      	movs	r2, #16
 80095c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	3301      	adds	r3, #1
 80095cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	4a08      	ldr	r2, [pc, #32]	; (80095f4 <USB_FlushRxFifo+0x5c>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d901      	bls.n	80095da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80095d6:	2303      	movs	r3, #3
 80095d8:	e006      	b.n	80095e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	f003 0310 	and.w	r3, r3, #16
 80095e2:	2b10      	cmp	r3, #16
 80095e4:	d0f0      	beq.n	80095c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3714      	adds	r7, #20
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr
 80095f4:	00030d40 	.word	0x00030d40

080095f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	460b      	mov	r3, r1
 8009602:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	78fb      	ldrb	r3, [r7, #3]
 8009612:	68f9      	ldr	r1, [r7, #12]
 8009614:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009618:	4313      	orrs	r3, r2
 800961a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3714      	adds	r7, #20
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr

0800962a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800962a:	b480      	push	{r7}
 800962c:	b087      	sub	sp, #28
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	f003 0306 	and.w	r3, r3, #6
 8009642:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d102      	bne.n	8009650 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800964a:	2300      	movs	r3, #0
 800964c:	75fb      	strb	r3, [r7, #23]
 800964e:	e00a      	b.n	8009666 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2b02      	cmp	r3, #2
 8009654:	d002      	beq.n	800965c <USB_GetDevSpeed+0x32>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2b06      	cmp	r3, #6
 800965a:	d102      	bne.n	8009662 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800965c:	2302      	movs	r3, #2
 800965e:	75fb      	strb	r3, [r7, #23]
 8009660:	e001      	b.n	8009666 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009662:	230f      	movs	r3, #15
 8009664:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009666:	7dfb      	ldrb	r3, [r7, #23]
}
 8009668:	4618      	mov	r0, r3
 800966a:	371c      	adds	r7, #28
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009674:	b480      	push	{r7}
 8009676:	b085      	sub	sp, #20
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	785b      	ldrb	r3, [r3, #1]
 800968c:	2b01      	cmp	r3, #1
 800968e:	d13a      	bne.n	8009706 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009696:	69da      	ldr	r2, [r3, #28]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	f003 030f 	and.w	r3, r3, #15
 80096a0:	2101      	movs	r1, #1
 80096a2:	fa01 f303 	lsl.w	r3, r1, r3
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	68f9      	ldr	r1, [r7, #12]
 80096aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096ae:	4313      	orrs	r3, r2
 80096b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	015a      	lsls	r2, r3, #5
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	4413      	add	r3, r2
 80096ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d155      	bne.n	8009774 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	015a      	lsls	r2, r3, #5
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	4413      	add	r3, r2
 80096d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	791b      	ldrb	r3, [r3, #4]
 80096e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	059b      	lsls	r3, r3, #22
 80096ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096ec:	4313      	orrs	r3, r2
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	0151      	lsls	r1, r2, #5
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	440a      	add	r2, r1
 80096f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009702:	6013      	str	r3, [r2, #0]
 8009704:	e036      	b.n	8009774 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800970c:	69da      	ldr	r2, [r3, #28]
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	f003 030f 	and.w	r3, r3, #15
 8009716:	2101      	movs	r1, #1
 8009718:	fa01 f303 	lsl.w	r3, r1, r3
 800971c:	041b      	lsls	r3, r3, #16
 800971e:	68f9      	ldr	r1, [r7, #12]
 8009720:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009724:	4313      	orrs	r3, r2
 8009726:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	015a      	lsls	r2, r3, #5
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	4413      	add	r3, r2
 8009730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800973a:	2b00      	cmp	r3, #0
 800973c:	d11a      	bne.n	8009774 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	015a      	lsls	r2, r3, #5
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	4413      	add	r3, r2
 8009746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	791b      	ldrb	r3, [r3, #4]
 8009758:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800975a:	430b      	orrs	r3, r1
 800975c:	4313      	orrs	r3, r2
 800975e:	68ba      	ldr	r2, [r7, #8]
 8009760:	0151      	lsls	r1, r2, #5
 8009762:	68fa      	ldr	r2, [r7, #12]
 8009764:	440a      	add	r2, r1
 8009766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800976a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800976e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009772:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3714      	adds	r7, #20
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
	...

08009784 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009784:	b480      	push	{r7}
 8009786:	b085      	sub	sp, #20
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	785b      	ldrb	r3, [r3, #1]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d161      	bne.n	8009864 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	015a      	lsls	r2, r3, #5
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	4413      	add	r3, r2
 80097a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097b6:	d11f      	bne.n	80097f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	015a      	lsls	r2, r3, #5
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	4413      	add	r3, r2
 80097c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	0151      	lsls	r1, r2, #5
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	440a      	add	r2, r1
 80097ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80097d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	015a      	lsls	r2, r3, #5
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	4413      	add	r3, r2
 80097e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68ba      	ldr	r2, [r7, #8]
 80097e8:	0151      	lsls	r1, r2, #5
 80097ea:	68fa      	ldr	r2, [r7, #12]
 80097ec:	440a      	add	r2, r1
 80097ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	f003 030f 	and.w	r3, r3, #15
 8009808:	2101      	movs	r1, #1
 800980a:	fa01 f303 	lsl.w	r3, r1, r3
 800980e:	b29b      	uxth	r3, r3
 8009810:	43db      	mvns	r3, r3
 8009812:	68f9      	ldr	r1, [r7, #12]
 8009814:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009818:	4013      	ands	r3, r2
 800981a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009822:	69da      	ldr	r2, [r3, #28]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	f003 030f 	and.w	r3, r3, #15
 800982c:	2101      	movs	r1, #1
 800982e:	fa01 f303 	lsl.w	r3, r1, r3
 8009832:	b29b      	uxth	r3, r3
 8009834:	43db      	mvns	r3, r3
 8009836:	68f9      	ldr	r1, [r7, #12]
 8009838:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800983c:	4013      	ands	r3, r2
 800983e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	015a      	lsls	r2, r3, #5
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	4413      	add	r3, r2
 8009848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	0159      	lsls	r1, r3, #5
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	440b      	add	r3, r1
 8009856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800985a:	4619      	mov	r1, r3
 800985c:	4b35      	ldr	r3, [pc, #212]	; (8009934 <USB_DeactivateEndpoint+0x1b0>)
 800985e:	4013      	ands	r3, r2
 8009860:	600b      	str	r3, [r1, #0]
 8009862:	e060      	b.n	8009926 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	015a      	lsls	r2, r3, #5
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	4413      	add	r3, r2
 800986c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009876:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800987a:	d11f      	bne.n	80098bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	015a      	lsls	r2, r3, #5
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	4413      	add	r3, r2
 8009884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	68ba      	ldr	r2, [r7, #8]
 800988c:	0151      	lsls	r1, r2, #5
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	440a      	add	r2, r1
 8009892:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009896:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800989a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	015a      	lsls	r2, r3, #5
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	4413      	add	r3, r2
 80098a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	0151      	lsls	r1, r2, #5
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	440a      	add	r2, r1
 80098b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	f003 030f 	and.w	r3, r3, #15
 80098cc:	2101      	movs	r1, #1
 80098ce:	fa01 f303 	lsl.w	r3, r1, r3
 80098d2:	041b      	lsls	r3, r3, #16
 80098d4:	43db      	mvns	r3, r3
 80098d6:	68f9      	ldr	r1, [r7, #12]
 80098d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098dc:	4013      	ands	r3, r2
 80098de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098e6:	69da      	ldr	r2, [r3, #28]
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	f003 030f 	and.w	r3, r3, #15
 80098f0:	2101      	movs	r1, #1
 80098f2:	fa01 f303 	lsl.w	r3, r1, r3
 80098f6:	041b      	lsls	r3, r3, #16
 80098f8:	43db      	mvns	r3, r3
 80098fa:	68f9      	ldr	r1, [r7, #12]
 80098fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009900:	4013      	ands	r3, r2
 8009902:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	015a      	lsls	r2, r3, #5
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	4413      	add	r3, r2
 800990c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	0159      	lsls	r1, r3, #5
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	440b      	add	r3, r1
 800991a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800991e:	4619      	mov	r1, r3
 8009920:	4b05      	ldr	r3, [pc, #20]	; (8009938 <USB_DeactivateEndpoint+0x1b4>)
 8009922:	4013      	ands	r3, r2
 8009924:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3714      	adds	r7, #20
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr
 8009934:	ec337800 	.word	0xec337800
 8009938:	eff37800 	.word	0xeff37800

0800993c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b08a      	sub	sp, #40	; 0x28
 8009940:	af02      	add	r7, sp, #8
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	4613      	mov	r3, r2
 8009948:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	785b      	ldrb	r3, [r3, #1]
 8009958:	2b01      	cmp	r3, #1
 800995a:	f040 815c 	bne.w	8009c16 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	699b      	ldr	r3, [r3, #24]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d132      	bne.n	80099cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	015a      	lsls	r2, r3, #5
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	4413      	add	r3, r2
 800996e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009972:	691b      	ldr	r3, [r3, #16]
 8009974:	69ba      	ldr	r2, [r7, #24]
 8009976:	0151      	lsls	r1, r2, #5
 8009978:	69fa      	ldr	r2, [r7, #28]
 800997a:	440a      	add	r2, r1
 800997c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009980:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009984:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009988:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	015a      	lsls	r2, r3, #5
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	4413      	add	r3, r2
 8009992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009996:	691b      	ldr	r3, [r3, #16]
 8009998:	69ba      	ldr	r2, [r7, #24]
 800999a:	0151      	lsls	r1, r2, #5
 800999c:	69fa      	ldr	r2, [r7, #28]
 800999e:	440a      	add	r2, r1
 80099a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	015a      	lsls	r2, r3, #5
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	4413      	add	r3, r2
 80099b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	69ba      	ldr	r2, [r7, #24]
 80099ba:	0151      	lsls	r1, r2, #5
 80099bc:	69fa      	ldr	r2, [r7, #28]
 80099be:	440a      	add	r2, r1
 80099c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099c4:	0cdb      	lsrs	r3, r3, #19
 80099c6:	04db      	lsls	r3, r3, #19
 80099c8:	6113      	str	r3, [r2, #16]
 80099ca:	e074      	b.n	8009ab6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	015a      	lsls	r2, r3, #5
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	4413      	add	r3, r2
 80099d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	69ba      	ldr	r2, [r7, #24]
 80099dc:	0151      	lsls	r1, r2, #5
 80099de:	69fa      	ldr	r2, [r7, #28]
 80099e0:	440a      	add	r2, r1
 80099e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099e6:	0cdb      	lsrs	r3, r3, #19
 80099e8:	04db      	lsls	r3, r3, #19
 80099ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	015a      	lsls	r2, r3, #5
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	4413      	add	r3, r2
 80099f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	69ba      	ldr	r2, [r7, #24]
 80099fc:	0151      	lsls	r1, r2, #5
 80099fe:	69fa      	ldr	r2, [r7, #28]
 8009a00:	440a      	add	r2, r1
 8009a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a06:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a0a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	015a      	lsls	r2, r3, #5
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	4413      	add	r3, r2
 8009a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a1c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	6999      	ldr	r1, [r3, #24]
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	440b      	add	r3, r1
 8009a28:	1e59      	subs	r1, r3, #1
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009a32:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009a34:	4b9d      	ldr	r3, [pc, #628]	; (8009cac <USB_EPStartXfer+0x370>)
 8009a36:	400b      	ands	r3, r1
 8009a38:	69b9      	ldr	r1, [r7, #24]
 8009a3a:	0148      	lsls	r0, r1, #5
 8009a3c:	69f9      	ldr	r1, [r7, #28]
 8009a3e:	4401      	add	r1, r0
 8009a40:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a44:	4313      	orrs	r3, r2
 8009a46:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	015a      	lsls	r2, r3, #5
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	4413      	add	r3, r2
 8009a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a54:	691a      	ldr	r2, [r3, #16]
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a5e:	69b9      	ldr	r1, [r7, #24]
 8009a60:	0148      	lsls	r0, r1, #5
 8009a62:	69f9      	ldr	r1, [r7, #28]
 8009a64:	4401      	add	r1, r0
 8009a66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	791b      	ldrb	r3, [r3, #4]
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d11f      	bne.n	8009ab6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	015a      	lsls	r2, r3, #5
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a82:	691b      	ldr	r3, [r3, #16]
 8009a84:	69ba      	ldr	r2, [r7, #24]
 8009a86:	0151      	lsls	r1, r2, #5
 8009a88:	69fa      	ldr	r2, [r7, #28]
 8009a8a:	440a      	add	r2, r1
 8009a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a90:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009a94:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	015a      	lsls	r2, r3, #5
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	69ba      	ldr	r2, [r7, #24]
 8009aa6:	0151      	lsls	r1, r2, #5
 8009aa8:	69fa      	ldr	r2, [r7, #28]
 8009aaa:	440a      	add	r2, r1
 8009aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ab0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009ab4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009ab6:	79fb      	ldrb	r3, [r7, #7]
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d14b      	bne.n	8009b54 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	695b      	ldr	r3, [r3, #20]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d009      	beq.n	8009ad8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	015a      	lsls	r2, r3, #5
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	4413      	add	r3, r2
 8009acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	791b      	ldrb	r3, [r3, #4]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d128      	bne.n	8009b32 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d110      	bne.n	8009b12 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	015a      	lsls	r2, r3, #5
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	4413      	add	r3, r2
 8009af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	69ba      	ldr	r2, [r7, #24]
 8009b00:	0151      	lsls	r1, r2, #5
 8009b02:	69fa      	ldr	r2, [r7, #28]
 8009b04:	440a      	add	r2, r1
 8009b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b0e:	6013      	str	r3, [r2, #0]
 8009b10:	e00f      	b.n	8009b32 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	015a      	lsls	r2, r3, #5
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	4413      	add	r3, r2
 8009b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	69ba      	ldr	r2, [r7, #24]
 8009b22:	0151      	lsls	r1, r2, #5
 8009b24:	69fa      	ldr	r2, [r7, #28]
 8009b26:	440a      	add	r2, r1
 8009b28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b30:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	015a      	lsls	r2, r3, #5
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	4413      	add	r3, r2
 8009b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	69ba      	ldr	r2, [r7, #24]
 8009b42:	0151      	lsls	r1, r2, #5
 8009b44:	69fa      	ldr	r2, [r7, #28]
 8009b46:	440a      	add	r2, r1
 8009b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b50:	6013      	str	r3, [r2, #0]
 8009b52:	e133      	b.n	8009dbc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	015a      	lsls	r2, r3, #5
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	69ba      	ldr	r2, [r7, #24]
 8009b64:	0151      	lsls	r1, r2, #5
 8009b66:	69fa      	ldr	r2, [r7, #28]
 8009b68:	440a      	add	r2, r1
 8009b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b72:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	791b      	ldrb	r3, [r3, #4]
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d015      	beq.n	8009ba8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	f000 811b 	beq.w	8009dbc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	f003 030f 	and.w	r3, r3, #15
 8009b96:	2101      	movs	r1, #1
 8009b98:	fa01 f303 	lsl.w	r3, r1, r3
 8009b9c:	69f9      	ldr	r1, [r7, #28]
 8009b9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	634b      	str	r3, [r1, #52]	; 0x34
 8009ba6:	e109      	b.n	8009dbc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d110      	bne.n	8009bda <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	015a      	lsls	r2, r3, #5
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	69ba      	ldr	r2, [r7, #24]
 8009bc8:	0151      	lsls	r1, r2, #5
 8009bca:	69fa      	ldr	r2, [r7, #28]
 8009bcc:	440a      	add	r2, r1
 8009bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009bd6:	6013      	str	r3, [r2, #0]
 8009bd8:	e00f      	b.n	8009bfa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	015a      	lsls	r2, r3, #5
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	4413      	add	r3, r2
 8009be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	69ba      	ldr	r2, [r7, #24]
 8009bea:	0151      	lsls	r1, r2, #5
 8009bec:	69fa      	ldr	r2, [r7, #28]
 8009bee:	440a      	add	r2, r1
 8009bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bf8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	6919      	ldr	r1, [r3, #16]
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	781a      	ldrb	r2, [r3, #0]
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	699b      	ldr	r3, [r3, #24]
 8009c06:	b298      	uxth	r0, r3
 8009c08:	79fb      	ldrb	r3, [r7, #7]
 8009c0a:	9300      	str	r3, [sp, #0]
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f000 fade 	bl	800a1d0 <USB_WritePacket>
 8009c14:	e0d2      	b.n	8009dbc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	015a      	lsls	r2, r3, #5
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	69ba      	ldr	r2, [r7, #24]
 8009c26:	0151      	lsls	r1, r2, #5
 8009c28:	69fa      	ldr	r2, [r7, #28]
 8009c2a:	440a      	add	r2, r1
 8009c2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c30:	0cdb      	lsrs	r3, r3, #19
 8009c32:	04db      	lsls	r3, r3, #19
 8009c34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	015a      	lsls	r2, r3, #5
 8009c3a:	69fb      	ldr	r3, [r7, #28]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	69ba      	ldr	r2, [r7, #24]
 8009c46:	0151      	lsls	r1, r2, #5
 8009c48:	69fa      	ldr	r2, [r7, #28]
 8009c4a:	440a      	add	r2, r1
 8009c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c58:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	699b      	ldr	r3, [r3, #24]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d126      	bne.n	8009cb0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	015a      	lsls	r2, r3, #5
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	4413      	add	r3, r2
 8009c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c6e:	691a      	ldr	r2, [r3, #16]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c78:	69b9      	ldr	r1, [r7, #24]
 8009c7a:	0148      	lsls	r0, r1, #5
 8009c7c:	69f9      	ldr	r1, [r7, #28]
 8009c7e:	4401      	add	r1, r0
 8009c80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009c84:	4313      	orrs	r3, r2
 8009c86:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	015a      	lsls	r2, r3, #5
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	4413      	add	r3, r2
 8009c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	69ba      	ldr	r2, [r7, #24]
 8009c98:	0151      	lsls	r1, r2, #5
 8009c9a:	69fa      	ldr	r2, [r7, #28]
 8009c9c:	440a      	add	r2, r1
 8009c9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ca2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ca6:	6113      	str	r3, [r2, #16]
 8009ca8:	e03a      	b.n	8009d20 <USB_EPStartXfer+0x3e4>
 8009caa:	bf00      	nop
 8009cac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	699a      	ldr	r2, [r3, #24]
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	4413      	add	r3, r2
 8009cba:	1e5a      	subs	r2, r3, #1
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	68db      	ldr	r3, [r3, #12]
 8009cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cc4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	8afa      	ldrh	r2, [r7, #22]
 8009ccc:	fb03 f202 	mul.w	r2, r3, r2
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009cd4:	69bb      	ldr	r3, [r7, #24]
 8009cd6:	015a      	lsls	r2, r3, #5
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	4413      	add	r3, r2
 8009cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ce0:	691a      	ldr	r2, [r3, #16]
 8009ce2:	8afb      	ldrh	r3, [r7, #22]
 8009ce4:	04d9      	lsls	r1, r3, #19
 8009ce6:	4b38      	ldr	r3, [pc, #224]	; (8009dc8 <USB_EPStartXfer+0x48c>)
 8009ce8:	400b      	ands	r3, r1
 8009cea:	69b9      	ldr	r1, [r7, #24]
 8009cec:	0148      	lsls	r0, r1, #5
 8009cee:	69f9      	ldr	r1, [r7, #28]
 8009cf0:	4401      	add	r1, r0
 8009cf2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	015a      	lsls	r2, r3, #5
 8009cfe:	69fb      	ldr	r3, [r7, #28]
 8009d00:	4413      	add	r3, r2
 8009d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d06:	691a      	ldr	r2, [r3, #16]
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	69db      	ldr	r3, [r3, #28]
 8009d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d10:	69b9      	ldr	r1, [r7, #24]
 8009d12:	0148      	lsls	r0, r1, #5
 8009d14:	69f9      	ldr	r1, [r7, #28]
 8009d16:	4401      	add	r1, r0
 8009d18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009d20:	79fb      	ldrb	r3, [r7, #7]
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d10d      	bne.n	8009d42 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d009      	beq.n	8009d42 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	6919      	ldr	r1, [r3, #16]
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	015a      	lsls	r2, r3, #5
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	4413      	add	r3, r2
 8009d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d3e:	460a      	mov	r2, r1
 8009d40:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	791b      	ldrb	r3, [r3, #4]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d128      	bne.n	8009d9c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d110      	bne.n	8009d7c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	015a      	lsls	r2, r3, #5
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	4413      	add	r3, r2
 8009d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	69ba      	ldr	r2, [r7, #24]
 8009d6a:	0151      	lsls	r1, r2, #5
 8009d6c:	69fa      	ldr	r2, [r7, #28]
 8009d6e:	440a      	add	r2, r1
 8009d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d78:	6013      	str	r3, [r2, #0]
 8009d7a:	e00f      	b.n	8009d9c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	015a      	lsls	r2, r3, #5
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	4413      	add	r3, r2
 8009d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	69ba      	ldr	r2, [r7, #24]
 8009d8c:	0151      	lsls	r1, r2, #5
 8009d8e:	69fa      	ldr	r2, [r7, #28]
 8009d90:	440a      	add	r2, r1
 8009d92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d9a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	015a      	lsls	r2, r3, #5
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	4413      	add	r3, r2
 8009da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	69ba      	ldr	r2, [r7, #24]
 8009dac:	0151      	lsls	r1, r2, #5
 8009dae:	69fa      	ldr	r2, [r7, #28]
 8009db0:	440a      	add	r2, r1
 8009db2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009db6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009dba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3720      	adds	r7, #32
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	1ff80000 	.word	0x1ff80000

08009dcc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b087      	sub	sp, #28
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	785b      	ldrb	r3, [r3, #1]
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	f040 80ce 	bne.w	8009f8a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	699b      	ldr	r3, [r3, #24]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d132      	bne.n	8009e5c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	015a      	lsls	r2, r3, #5
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	693a      	ldr	r2, [r7, #16]
 8009e06:	0151      	lsls	r1, r2, #5
 8009e08:	697a      	ldr	r2, [r7, #20]
 8009e0a:	440a      	add	r2, r1
 8009e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	015a      	lsls	r2, r3, #5
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	4413      	add	r3, r2
 8009e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e26:	691b      	ldr	r3, [r3, #16]
 8009e28:	693a      	ldr	r2, [r7, #16]
 8009e2a:	0151      	lsls	r1, r2, #5
 8009e2c:	697a      	ldr	r2, [r7, #20]
 8009e2e:	440a      	add	r2, r1
 8009e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	015a      	lsls	r2, r3, #5
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	4413      	add	r3, r2
 8009e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	693a      	ldr	r2, [r7, #16]
 8009e4a:	0151      	lsls	r1, r2, #5
 8009e4c:	697a      	ldr	r2, [r7, #20]
 8009e4e:	440a      	add	r2, r1
 8009e50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e54:	0cdb      	lsrs	r3, r3, #19
 8009e56:	04db      	lsls	r3, r3, #19
 8009e58:	6113      	str	r3, [r2, #16]
 8009e5a:	e04e      	b.n	8009efa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	015a      	lsls	r2, r3, #5
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	4413      	add	r3, r2
 8009e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e68:	691b      	ldr	r3, [r3, #16]
 8009e6a:	693a      	ldr	r2, [r7, #16]
 8009e6c:	0151      	lsls	r1, r2, #5
 8009e6e:	697a      	ldr	r2, [r7, #20]
 8009e70:	440a      	add	r2, r1
 8009e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e76:	0cdb      	lsrs	r3, r3, #19
 8009e78:	04db      	lsls	r3, r3, #19
 8009e7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	015a      	lsls	r2, r3, #5
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	4413      	add	r3, r2
 8009e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e88:	691b      	ldr	r3, [r3, #16]
 8009e8a:	693a      	ldr	r2, [r7, #16]
 8009e8c:	0151      	lsls	r1, r2, #5
 8009e8e:	697a      	ldr	r2, [r7, #20]
 8009e90:	440a      	add	r2, r1
 8009e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e9e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	699a      	ldr	r2, [r3, #24]
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d903      	bls.n	8009eb4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	68da      	ldr	r2, [r3, #12]
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	015a      	lsls	r2, r3, #5
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	4413      	add	r3, r2
 8009ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	693a      	ldr	r2, [r7, #16]
 8009ec4:	0151      	lsls	r1, r2, #5
 8009ec6:	697a      	ldr	r2, [r7, #20]
 8009ec8:	440a      	add	r2, r1
 8009eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ece:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ed2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	015a      	lsls	r2, r3, #5
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	4413      	add	r3, r2
 8009edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ee0:	691a      	ldr	r2, [r3, #16]
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009eea:	6939      	ldr	r1, [r7, #16]
 8009eec:	0148      	lsls	r0, r1, #5
 8009eee:	6979      	ldr	r1, [r7, #20]
 8009ef0:	4401      	add	r1, r0
 8009ef2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009efa:	79fb      	ldrb	r3, [r7, #7]
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d11e      	bne.n	8009f3e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	695b      	ldr	r3, [r3, #20]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d009      	beq.n	8009f1c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	015a      	lsls	r2, r3, #5
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	4413      	add	r3, r2
 8009f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f14:	461a      	mov	r2, r3
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	695b      	ldr	r3, [r3, #20]
 8009f1a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	015a      	lsls	r2, r3, #5
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	4413      	add	r3, r2
 8009f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	693a      	ldr	r2, [r7, #16]
 8009f2c:	0151      	lsls	r1, r2, #5
 8009f2e:	697a      	ldr	r2, [r7, #20]
 8009f30:	440a      	add	r2, r1
 8009f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f3a:	6013      	str	r3, [r2, #0]
 8009f3c:	e097      	b.n	800a06e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	015a      	lsls	r2, r3, #5
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	4413      	add	r3, r2
 8009f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	0151      	lsls	r1, r2, #5
 8009f50:	697a      	ldr	r2, [r7, #20]
 8009f52:	440a      	add	r2, r1
 8009f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f5c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	699b      	ldr	r3, [r3, #24]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f000 8083 	beq.w	800a06e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	f003 030f 	and.w	r3, r3, #15
 8009f78:	2101      	movs	r1, #1
 8009f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f7e:	6979      	ldr	r1, [r7, #20]
 8009f80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f84:	4313      	orrs	r3, r2
 8009f86:	634b      	str	r3, [r1, #52]	; 0x34
 8009f88:	e071      	b.n	800a06e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	015a      	lsls	r2, r3, #5
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	4413      	add	r3, r2
 8009f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	693a      	ldr	r2, [r7, #16]
 8009f9a:	0151      	lsls	r1, r2, #5
 8009f9c:	697a      	ldr	r2, [r7, #20]
 8009f9e:	440a      	add	r2, r1
 8009fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fa4:	0cdb      	lsrs	r3, r3, #19
 8009fa6:	04db      	lsls	r3, r3, #19
 8009fa8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	015a      	lsls	r2, r3, #5
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	0151      	lsls	r1, r2, #5
 8009fbc:	697a      	ldr	r2, [r7, #20]
 8009fbe:	440a      	add	r2, r1
 8009fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009fc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009fcc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	699b      	ldr	r3, [r3, #24]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d003      	beq.n	8009fde <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	68da      	ldr	r2, [r3, #12]
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	68da      	ldr	r2, [r3, #12]
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	015a      	lsls	r2, r3, #5
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	4413      	add	r3, r2
 8009fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ff2:	691b      	ldr	r3, [r3, #16]
 8009ff4:	693a      	ldr	r2, [r7, #16]
 8009ff6:	0151      	lsls	r1, r2, #5
 8009ff8:	697a      	ldr	r2, [r7, #20]
 8009ffa:	440a      	add	r2, r1
 8009ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a000:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a004:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	015a      	lsls	r2, r3, #5
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	4413      	add	r3, r2
 800a00e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a012:	691a      	ldr	r2, [r3, #16]
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	69db      	ldr	r3, [r3, #28]
 800a018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a01c:	6939      	ldr	r1, [r7, #16]
 800a01e:	0148      	lsls	r0, r1, #5
 800a020:	6979      	ldr	r1, [r7, #20]
 800a022:	4401      	add	r1, r0
 800a024:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a028:	4313      	orrs	r3, r2
 800a02a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a02c:	79fb      	ldrb	r3, [r7, #7]
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d10d      	bne.n	800a04e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	691b      	ldr	r3, [r3, #16]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d009      	beq.n	800a04e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	6919      	ldr	r1, [r3, #16]
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	015a      	lsls	r2, r3, #5
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	4413      	add	r3, r2
 800a046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a04a:	460a      	mov	r2, r1
 800a04c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	015a      	lsls	r2, r3, #5
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	4413      	add	r3, r2
 800a056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	693a      	ldr	r2, [r7, #16]
 800a05e:	0151      	lsls	r1, r2, #5
 800a060:	697a      	ldr	r2, [r7, #20]
 800a062:	440a      	add	r2, r1
 800a064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a068:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a06c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	371c      	adds	r7, #28
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b087      	sub	sp, #28
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a086:	2300      	movs	r3, #0
 800a088:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a08a:	2300      	movs	r3, #0
 800a08c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	785b      	ldrb	r3, [r3, #1]
 800a096:	2b01      	cmp	r3, #1
 800a098:	d14a      	bne.n	800a130 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	015a      	lsls	r2, r3, #5
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0b2:	f040 8086 	bne.w	800a1c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	015a      	lsls	r2, r3, #5
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	4413      	add	r3, r2
 800a0c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	683a      	ldr	r2, [r7, #0]
 800a0c8:	7812      	ldrb	r2, [r2, #0]
 800a0ca:	0151      	lsls	r1, r2, #5
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	440a      	add	r2, r1
 800a0d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a0d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	015a      	lsls	r2, r3, #5
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	683a      	ldr	r2, [r7, #0]
 800a0ec:	7812      	ldrb	r2, [r2, #0]
 800a0ee:	0151      	lsls	r1, r2, #5
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	440a      	add	r2, r1
 800a0f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	3301      	adds	r3, #1
 800a102:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f242 7210 	movw	r2, #10000	; 0x2710
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d902      	bls.n	800a114 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	75fb      	strb	r3, [r7, #23]
          break;
 800a112:	e056      	b.n	800a1c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	015a      	lsls	r2, r3, #5
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	4413      	add	r3, r2
 800a11e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a128:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a12c:	d0e7      	beq.n	800a0fe <USB_EPStopXfer+0x82>
 800a12e:	e048      	b.n	800a1c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	015a      	lsls	r2, r3, #5
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	4413      	add	r3, r2
 800a13a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a144:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a148:	d13b      	bne.n	800a1c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	015a      	lsls	r2, r3, #5
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	4413      	add	r3, r2
 800a154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	683a      	ldr	r2, [r7, #0]
 800a15c:	7812      	ldrb	r2, [r2, #0]
 800a15e:	0151      	lsls	r1, r2, #5
 800a160:	693a      	ldr	r2, [r7, #16]
 800a162:	440a      	add	r2, r1
 800a164:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a168:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a16c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	015a      	lsls	r2, r3, #5
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	4413      	add	r3, r2
 800a178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	683a      	ldr	r2, [r7, #0]
 800a180:	7812      	ldrb	r2, [r2, #0]
 800a182:	0151      	lsls	r1, r2, #5
 800a184:	693a      	ldr	r2, [r7, #16]
 800a186:	440a      	add	r2, r1
 800a188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a18c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a190:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	3301      	adds	r3, #1
 800a196:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d902      	bls.n	800a1a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	75fb      	strb	r3, [r7, #23]
          break;
 800a1a6:	e00c      	b.n	800a1c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	015a      	lsls	r2, r3, #5
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1c0:	d0e7      	beq.n	800a192 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a1c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	371c      	adds	r7, #28
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b089      	sub	sp, #36	; 0x24
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	4611      	mov	r1, r2
 800a1dc:	461a      	mov	r2, r3
 800a1de:	460b      	mov	r3, r1
 800a1e0:	71fb      	strb	r3, [r7, #7]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a1ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d123      	bne.n	800a23e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a1f6:	88bb      	ldrh	r3, [r7, #4]
 800a1f8:	3303      	adds	r3, #3
 800a1fa:	089b      	lsrs	r3, r3, #2
 800a1fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a1fe:	2300      	movs	r3, #0
 800a200:	61bb      	str	r3, [r7, #24]
 800a202:	e018      	b.n	800a236 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a204:	79fb      	ldrb	r3, [r7, #7]
 800a206:	031a      	lsls	r2, r3, #12
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	4413      	add	r3, r2
 800a20c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a210:	461a      	mov	r2, r3
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	3301      	adds	r3, #1
 800a21c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	3301      	adds	r3, #1
 800a222:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	3301      	adds	r3, #1
 800a228:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	3301      	adds	r3, #1
 800a22e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	3301      	adds	r3, #1
 800a234:	61bb      	str	r3, [r7, #24]
 800a236:	69ba      	ldr	r2, [r7, #24]
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d3e2      	bcc.n	800a204 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3724      	adds	r7, #36	; 0x24
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b08b      	sub	sp, #44	; 0x2c
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	4613      	mov	r3, r2
 800a258:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a262:	88fb      	ldrh	r3, [r7, #6]
 800a264:	089b      	lsrs	r3, r3, #2
 800a266:	b29b      	uxth	r3, r3
 800a268:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a26a:	88fb      	ldrh	r3, [r7, #6]
 800a26c:	f003 0303 	and.w	r3, r3, #3
 800a270:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a272:	2300      	movs	r3, #0
 800a274:	623b      	str	r3, [r7, #32]
 800a276:	e014      	b.n	800a2a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a282:	601a      	str	r2, [r3, #0]
    pDest++;
 800a284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a286:	3301      	adds	r3, #1
 800a288:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28c:	3301      	adds	r3, #1
 800a28e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a292:	3301      	adds	r3, #1
 800a294:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a298:	3301      	adds	r3, #1
 800a29a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a29c:	6a3b      	ldr	r3, [r7, #32]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	623b      	str	r3, [r7, #32]
 800a2a2:	6a3a      	ldr	r2, [r7, #32]
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d3e6      	bcc.n	800a278 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a2aa:	8bfb      	ldrh	r3, [r7, #30]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d01e      	beq.n	800a2ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	f107 0310 	add.w	r3, r7, #16
 800a2c0:	6812      	ldr	r2, [r2, #0]
 800a2c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a2c4:	693a      	ldr	r2, [r7, #16]
 800a2c6:	6a3b      	ldr	r3, [r7, #32]
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	00db      	lsls	r3, r3, #3
 800a2cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a2d0:	b2da      	uxtb	r2, r3
 800a2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d4:	701a      	strb	r2, [r3, #0]
      i++;
 800a2d6:	6a3b      	ldr	r3, [r7, #32]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	623b      	str	r3, [r7, #32]
      pDest++;
 800a2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2de:	3301      	adds	r3, #1
 800a2e0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a2e2:	8bfb      	ldrh	r3, [r7, #30]
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a2e8:	8bfb      	ldrh	r3, [r7, #30]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d1ea      	bne.n	800a2c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	372c      	adds	r7, #44	; 0x2c
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	785b      	ldrb	r3, [r3, #1]
 800a314:	2b01      	cmp	r3, #1
 800a316:	d12c      	bne.n	800a372 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	015a      	lsls	r2, r3, #5
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	4413      	add	r3, r2
 800a320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	db12      	blt.n	800a350 <USB_EPSetStall+0x54>
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00f      	beq.n	800a350 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	015a      	lsls	r2, r3, #5
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	4413      	add	r3, r2
 800a338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	68ba      	ldr	r2, [r7, #8]
 800a340:	0151      	lsls	r1, r2, #5
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	440a      	add	r2, r1
 800a346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a34a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a34e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	015a      	lsls	r2, r3, #5
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	4413      	add	r3, r2
 800a358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	68ba      	ldr	r2, [r7, #8]
 800a360:	0151      	lsls	r1, r2, #5
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	440a      	add	r2, r1
 800a366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a36a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a36e:	6013      	str	r3, [r2, #0]
 800a370:	e02b      	b.n	800a3ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	015a      	lsls	r2, r3, #5
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	4413      	add	r3, r2
 800a37a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	db12      	blt.n	800a3aa <USB_EPSetStall+0xae>
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d00f      	beq.n	800a3aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	015a      	lsls	r2, r3, #5
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	4413      	add	r3, r2
 800a392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	68ba      	ldr	r2, [r7, #8]
 800a39a:	0151      	lsls	r1, r2, #5
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	440a      	add	r2, r1
 800a3a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a3a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	015a      	lsls	r2, r3, #5
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	68ba      	ldr	r2, [r7, #8]
 800a3ba:	0151      	lsls	r1, r2, #5
 800a3bc:	68fa      	ldr	r2, [r7, #12]
 800a3be:	440a      	add	r2, r1
 800a3c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a3c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3ca:	2300      	movs	r3, #0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3714      	adds	r7, #20
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	785b      	ldrb	r3, [r3, #1]
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d128      	bne.n	800a446 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	015a      	lsls	r2, r3, #5
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	68ba      	ldr	r2, [r7, #8]
 800a404:	0151      	lsls	r1, r2, #5
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	440a      	add	r2, r1
 800a40a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a40e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a412:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	791b      	ldrb	r3, [r3, #4]
 800a418:	2b03      	cmp	r3, #3
 800a41a:	d003      	beq.n	800a424 <USB_EPClearStall+0x4c>
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	791b      	ldrb	r3, [r3, #4]
 800a420:	2b02      	cmp	r3, #2
 800a422:	d138      	bne.n	800a496 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	015a      	lsls	r2, r3, #5
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	4413      	add	r3, r2
 800a42c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	68ba      	ldr	r2, [r7, #8]
 800a434:	0151      	lsls	r1, r2, #5
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	440a      	add	r2, r1
 800a43a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a43e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a442:	6013      	str	r3, [r2, #0]
 800a444:	e027      	b.n	800a496 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	015a      	lsls	r2, r3, #5
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	4413      	add	r3, r2
 800a44e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	0151      	lsls	r1, r2, #5
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	440a      	add	r2, r1
 800a45c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a460:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a464:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	791b      	ldrb	r3, [r3, #4]
 800a46a:	2b03      	cmp	r3, #3
 800a46c:	d003      	beq.n	800a476 <USB_EPClearStall+0x9e>
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	791b      	ldrb	r3, [r3, #4]
 800a472:	2b02      	cmp	r3, #2
 800a474:	d10f      	bne.n	800a496 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	015a      	lsls	r2, r3, #5
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	4413      	add	r3, r2
 800a47e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	68ba      	ldr	r2, [r7, #8]
 800a486:	0151      	lsls	r1, r2, #5
 800a488:	68fa      	ldr	r2, [r7, #12]
 800a48a:	440a      	add	r2, r1
 800a48c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a494:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a496:	2300      	movs	r3, #0
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a4c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a4c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	78fb      	ldrb	r3, [r7, #3]
 800a4d2:	011b      	lsls	r3, r3, #4
 800a4d4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a4d8:	68f9      	ldr	r1, [r7, #12]
 800a4da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3714      	adds	r7, #20
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68fa      	ldr	r2, [r7, #12]
 800a506:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a50a:	f023 0303 	bic.w	r3, r3, #3
 800a50e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a51e:	f023 0302 	bic.w	r3, r3, #2
 800a522:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	3714      	adds	r7, #20
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr

0800a532 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a532:	b480      	push	{r7}
 800a534:	b085      	sub	sp, #20
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a54c:	f023 0303 	bic.w	r3, r3, #3
 800a550:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a560:	f043 0302 	orr.w	r3, r3, #2
 800a564:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3714      	adds	r7, #20
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	695b      	ldr	r3, [r3, #20]
 800a580:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	68fa      	ldr	r2, [r7, #12]
 800a588:	4013      	ands	r3, r2
 800a58a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a58c:	68fb      	ldr	r3, [r7, #12]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3714      	adds	r7, #20
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr

0800a59a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a59a:	b480      	push	{r7}
 800a59c:	b085      	sub	sp, #20
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5ac:	699b      	ldr	r3, [r3, #24]
 800a5ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5b6:	69db      	ldr	r3, [r3, #28]
 800a5b8:	68ba      	ldr	r2, [r7, #8]
 800a5ba:	4013      	ands	r3, r2
 800a5bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	0c1b      	lsrs	r3, r3, #16
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3714      	adds	r7, #20
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr

0800a5ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a5ce:	b480      	push	{r7}
 800a5d0:	b085      	sub	sp, #20
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5e0:	699b      	ldr	r3, [r3, #24]
 800a5e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5ea:	69db      	ldr	r3, [r3, #28]
 800a5ec:	68ba      	ldr	r2, [r7, #8]
 800a5ee:	4013      	ands	r3, r2
 800a5f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	b29b      	uxth	r3, r3
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3714      	adds	r7, #20
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr

0800a602 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a602:	b480      	push	{r7}
 800a604:	b085      	sub	sp, #20
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
 800a60a:	460b      	mov	r3, r1
 800a60c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a612:	78fb      	ldrb	r3, [r7, #3]
 800a614:	015a      	lsls	r2, r3, #5
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	4413      	add	r3, r2
 800a61a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a628:	695b      	ldr	r3, [r3, #20]
 800a62a:	68ba      	ldr	r2, [r7, #8]
 800a62c:	4013      	ands	r3, r2
 800a62e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a630:	68bb      	ldr	r3, [r7, #8]
}
 800a632:	4618      	mov	r0, r3
 800a634:	3714      	adds	r7, #20
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr

0800a63e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a63e:	b480      	push	{r7}
 800a640:	b087      	sub	sp, #28
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
 800a646:	460b      	mov	r3, r1
 800a648:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a65e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a660:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a662:	78fb      	ldrb	r3, [r7, #3]
 800a664:	f003 030f 	and.w	r3, r3, #15
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	fa22 f303 	lsr.w	r3, r2, r3
 800a66e:	01db      	lsls	r3, r3, #7
 800a670:	b2db      	uxtb	r3, r3
 800a672:	693a      	ldr	r2, [r7, #16]
 800a674:	4313      	orrs	r3, r2
 800a676:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a678:	78fb      	ldrb	r3, [r7, #3]
 800a67a:	015a      	lsls	r2, r3, #5
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	4413      	add	r3, r2
 800a680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	693a      	ldr	r2, [r7, #16]
 800a688:	4013      	ands	r3, r2
 800a68a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a68c:	68bb      	ldr	r3, [r7, #8]
}
 800a68e:	4618      	mov	r0, r3
 800a690:	371c      	adds	r7, #28
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr

0800a69a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a69a:	b480      	push	{r7}
 800a69c:	b083      	sub	sp, #12
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	695b      	ldr	r3, [r3, #20]
 800a6a6:	f003 0301 	and.w	r3, r3, #1
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	370c      	adds	r7, #12
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr

0800a6b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a6b6:	b480      	push	{r7}
 800a6b8:	b085      	sub	sp, #20
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	68fa      	ldr	r2, [r7, #12]
 800a6cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a6d4:	f023 0307 	bic.w	r3, r3, #7
 800a6d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	68fa      	ldr	r2, [r7, #12]
 800a6e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3714      	adds	r7, #20
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b087      	sub	sp, #28
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	460b      	mov	r3, r1
 800a706:	607a      	str	r2, [r7, #4]
 800a708:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	333c      	adds	r3, #60	; 0x3c
 800a712:	3304      	adds	r3, #4
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	4a26      	ldr	r2, [pc, #152]	; (800a7b4 <USB_EP0_OutStart+0xb8>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d90a      	bls.n	800a736 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a72c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a730:	d101      	bne.n	800a736 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a732:	2300      	movs	r3, #0
 800a734:	e037      	b.n	800a7a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a73c:	461a      	mov	r2, r3
 800a73e:	2300      	movs	r3, #0
 800a740:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a748:	691b      	ldr	r3, [r3, #16]
 800a74a:	697a      	ldr	r2, [r7, #20]
 800a74c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a750:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a754:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a75c:	691b      	ldr	r3, [r3, #16]
 800a75e:	697a      	ldr	r2, [r7, #20]
 800a760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a764:	f043 0318 	orr.w	r3, r3, #24
 800a768:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a770:	691b      	ldr	r3, [r3, #16]
 800a772:	697a      	ldr	r2, [r7, #20]
 800a774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a778:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a77c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a77e:	7afb      	ldrb	r3, [r7, #11]
 800a780:	2b01      	cmp	r3, #1
 800a782:	d10f      	bne.n	800a7a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a78a:	461a      	mov	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	697a      	ldr	r2, [r7, #20]
 800a79a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a79e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a7a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	371c      	adds	r7, #28
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	4f54300a 	.word	0x4f54300a

0800a7b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	4a13      	ldr	r2, [pc, #76]	; (800a81c <USB_CoreReset+0x64>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d901      	bls.n	800a7d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a7d2:	2303      	movs	r3, #3
 800a7d4:	e01b      	b.n	800a80e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	daf2      	bge.n	800a7c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	691b      	ldr	r3, [r3, #16]
 800a7e6:	f043 0201 	orr.w	r2, r3, #1
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	4a09      	ldr	r2, [pc, #36]	; (800a81c <USB_CoreReset+0x64>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d901      	bls.n	800a800 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	e006      	b.n	800a80e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	691b      	ldr	r3, [r3, #16]
 800a804:	f003 0301 	and.w	r3, r3, #1
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d0f0      	beq.n	800a7ee <USB_CoreReset+0x36>

  return HAL_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3714      	adds	r7, #20
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr
 800a81a:	bf00      	nop
 800a81c:	00030d40 	.word	0x00030d40

0800a820 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	460b      	mov	r3, r1
 800a82a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a82c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a830:	f005 fe7a 	bl	8010528 <USBD_static_malloc>
 800a834:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d109      	bne.n	800a850 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	32b0      	adds	r2, #176	; 0xb0
 800a846:	2100      	movs	r1, #0
 800a848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a84c:	2302      	movs	r3, #2
 800a84e:	e0d4      	b.n	800a9fa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a850:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a854:	2100      	movs	r1, #0
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f005 ff06 	bl	8010668 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	32b0      	adds	r2, #176	; 0xb0
 800a866:	68f9      	ldr	r1, [r7, #12]
 800a868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	32b0      	adds	r2, #176	; 0xb0
 800a876:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	7c1b      	ldrb	r3, [r3, #16]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d138      	bne.n	800a8fa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a888:	4b5e      	ldr	r3, [pc, #376]	; (800aa04 <USBD_CDC_Init+0x1e4>)
 800a88a:	7819      	ldrb	r1, [r3, #0]
 800a88c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a890:	2202      	movs	r2, #2
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f005 fd25 	bl	80102e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a898:	4b5a      	ldr	r3, [pc, #360]	; (800aa04 <USBD_CDC_Init+0x1e4>)
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	f003 020f 	and.w	r2, r3, #15
 800a8a0:	6879      	ldr	r1, [r7, #4]
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	4413      	add	r3, r2
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	440b      	add	r3, r1
 800a8ac:	3324      	adds	r3, #36	; 0x24
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a8b2:	4b55      	ldr	r3, [pc, #340]	; (800aa08 <USBD_CDC_Init+0x1e8>)
 800a8b4:	7819      	ldrb	r1, [r3, #0]
 800a8b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f005 fd10 	bl	80102e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a8c2:	4b51      	ldr	r3, [pc, #324]	; (800aa08 <USBD_CDC_Init+0x1e8>)
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	f003 020f 	and.w	r2, r3, #15
 800a8ca:	6879      	ldr	r1, [r7, #4]
 800a8cc:	4613      	mov	r3, r2
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	4413      	add	r3, r2
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	440b      	add	r3, r1
 800a8d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a8da:	2201      	movs	r2, #1
 800a8dc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a8de:	4b4b      	ldr	r3, [pc, #300]	; (800aa0c <USBD_CDC_Init+0x1ec>)
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	f003 020f 	and.w	r2, r3, #15
 800a8e6:	6879      	ldr	r1, [r7, #4]
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4413      	add	r3, r2
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	440b      	add	r3, r1
 800a8f2:	3326      	adds	r3, #38	; 0x26
 800a8f4:	2210      	movs	r2, #16
 800a8f6:	801a      	strh	r2, [r3, #0]
 800a8f8:	e035      	b.n	800a966 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a8fa:	4b42      	ldr	r3, [pc, #264]	; (800aa04 <USBD_CDC_Init+0x1e4>)
 800a8fc:	7819      	ldrb	r1, [r3, #0]
 800a8fe:	2340      	movs	r3, #64	; 0x40
 800a900:	2202      	movs	r2, #2
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f005 fced 	bl	80102e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a908:	4b3e      	ldr	r3, [pc, #248]	; (800aa04 <USBD_CDC_Init+0x1e4>)
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	f003 020f 	and.w	r2, r3, #15
 800a910:	6879      	ldr	r1, [r7, #4]
 800a912:	4613      	mov	r3, r2
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	4413      	add	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	440b      	add	r3, r1
 800a91c:	3324      	adds	r3, #36	; 0x24
 800a91e:	2201      	movs	r2, #1
 800a920:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a922:	4b39      	ldr	r3, [pc, #228]	; (800aa08 <USBD_CDC_Init+0x1e8>)
 800a924:	7819      	ldrb	r1, [r3, #0]
 800a926:	2340      	movs	r3, #64	; 0x40
 800a928:	2202      	movs	r2, #2
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f005 fcd9 	bl	80102e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a930:	4b35      	ldr	r3, [pc, #212]	; (800aa08 <USBD_CDC_Init+0x1e8>)
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	f003 020f 	and.w	r2, r3, #15
 800a938:	6879      	ldr	r1, [r7, #4]
 800a93a:	4613      	mov	r3, r2
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	4413      	add	r3, r2
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	440b      	add	r3, r1
 800a944:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a948:	2201      	movs	r2, #1
 800a94a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a94c:	4b2f      	ldr	r3, [pc, #188]	; (800aa0c <USBD_CDC_Init+0x1ec>)
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	f003 020f 	and.w	r2, r3, #15
 800a954:	6879      	ldr	r1, [r7, #4]
 800a956:	4613      	mov	r3, r2
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	4413      	add	r3, r2
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	440b      	add	r3, r1
 800a960:	3326      	adds	r3, #38	; 0x26
 800a962:	2210      	movs	r2, #16
 800a964:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a966:	4b29      	ldr	r3, [pc, #164]	; (800aa0c <USBD_CDC_Init+0x1ec>)
 800a968:	7819      	ldrb	r1, [r3, #0]
 800a96a:	2308      	movs	r3, #8
 800a96c:	2203      	movs	r2, #3
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f005 fcb7 	bl	80102e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a974:	4b25      	ldr	r3, [pc, #148]	; (800aa0c <USBD_CDC_Init+0x1ec>)
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	f003 020f 	and.w	r2, r3, #15
 800a97c:	6879      	ldr	r1, [r7, #4]
 800a97e:	4613      	mov	r3, r2
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	4413      	add	r3, r2
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	440b      	add	r3, r1
 800a988:	3324      	adds	r3, #36	; 0x24
 800a98a:	2201      	movs	r2, #1
 800a98c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2200      	movs	r2, #0
 800a992:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	33b0      	adds	r3, #176	; 0xb0
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	4413      	add	r3, r2
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d101      	bne.n	800a9c8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	e018      	b.n	800a9fa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	7c1b      	ldrb	r3, [r3, #16]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d10a      	bne.n	800a9e6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a9d0:	4b0d      	ldr	r3, [pc, #52]	; (800aa08 <USBD_CDC_Init+0x1e8>)
 800a9d2:	7819      	ldrb	r1, [r3, #0]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9da:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f005 fd6e 	bl	80104c0 <USBD_LL_PrepareReceive>
 800a9e4:	e008      	b.n	800a9f8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a9e6:	4b08      	ldr	r3, [pc, #32]	; (800aa08 <USBD_CDC_Init+0x1e8>)
 800a9e8:	7819      	ldrb	r1, [r3, #0]
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9f0:	2340      	movs	r3, #64	; 0x40
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f005 fd64 	bl	80104c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a9f8:	2300      	movs	r3, #0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	200000cb 	.word	0x200000cb
 800aa08:	200000cc 	.word	0x200000cc
 800aa0c:	200000cd 	.word	0x200000cd

0800aa10 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	460b      	mov	r3, r1
 800aa1a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800aa1c:	4b3a      	ldr	r3, [pc, #232]	; (800ab08 <USBD_CDC_DeInit+0xf8>)
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	4619      	mov	r1, r3
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f005 fc83 	bl	801032e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800aa28:	4b37      	ldr	r3, [pc, #220]	; (800ab08 <USBD_CDC_DeInit+0xf8>)
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	f003 020f 	and.w	r2, r3, #15
 800aa30:	6879      	ldr	r1, [r7, #4]
 800aa32:	4613      	mov	r3, r2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	4413      	add	r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	440b      	add	r3, r1
 800aa3c:	3324      	adds	r3, #36	; 0x24
 800aa3e:	2200      	movs	r2, #0
 800aa40:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800aa42:	4b32      	ldr	r3, [pc, #200]	; (800ab0c <USBD_CDC_DeInit+0xfc>)
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	4619      	mov	r1, r3
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f005 fc70 	bl	801032e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800aa4e:	4b2f      	ldr	r3, [pc, #188]	; (800ab0c <USBD_CDC_DeInit+0xfc>)
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	f003 020f 	and.w	r2, r3, #15
 800aa56:	6879      	ldr	r1, [r7, #4]
 800aa58:	4613      	mov	r3, r2
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	4413      	add	r3, r2
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	440b      	add	r3, r1
 800aa62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aa66:	2200      	movs	r2, #0
 800aa68:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800aa6a:	4b29      	ldr	r3, [pc, #164]	; (800ab10 <USBD_CDC_DeInit+0x100>)
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	4619      	mov	r1, r3
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f005 fc5c 	bl	801032e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800aa76:	4b26      	ldr	r3, [pc, #152]	; (800ab10 <USBD_CDC_DeInit+0x100>)
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	f003 020f 	and.w	r2, r3, #15
 800aa7e:	6879      	ldr	r1, [r7, #4]
 800aa80:	4613      	mov	r3, r2
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	4413      	add	r3, r2
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	440b      	add	r3, r1
 800aa8a:	3324      	adds	r3, #36	; 0x24
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800aa90:	4b1f      	ldr	r3, [pc, #124]	; (800ab10 <USBD_CDC_DeInit+0x100>)
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	f003 020f 	and.w	r2, r3, #15
 800aa98:	6879      	ldr	r1, [r7, #4]
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	4413      	add	r3, r2
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	440b      	add	r3, r1
 800aaa4:	3326      	adds	r3, #38	; 0x26
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	32b0      	adds	r2, #176	; 0xb0
 800aab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d01f      	beq.n	800aafc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	33b0      	adds	r3, #176	; 0xb0
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	4413      	add	r3, r2
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	32b0      	adds	r2, #176	; 0xb0
 800aada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aade:	4618      	mov	r0, r3
 800aae0:	f005 fd30 	bl	8010544 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	32b0      	adds	r2, #176	; 0xb0
 800aaee:	2100      	movs	r1, #0
 800aaf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3708      	adds	r7, #8
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	200000cb 	.word	0x200000cb
 800ab0c:	200000cc 	.word	0x200000cc
 800ab10:	200000cd 	.word	0x200000cd

0800ab14 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b086      	sub	sp, #24
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	32b0      	adds	r2, #176	; 0xb0
 800ab28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab2c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ab32:	2300      	movs	r3, #0
 800ab34:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab36:	2300      	movs	r3, #0
 800ab38:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d101      	bne.n	800ab44 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ab40:	2303      	movs	r3, #3
 800ab42:	e0bf      	b.n	800acc4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d050      	beq.n	800abf2 <USBD_CDC_Setup+0xde>
 800ab50:	2b20      	cmp	r3, #32
 800ab52:	f040 80af 	bne.w	800acb4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	88db      	ldrh	r3, [r3, #6]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d03a      	beq.n	800abd4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	b25b      	sxtb	r3, r3
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	da1b      	bge.n	800aba0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	33b0      	adds	r3, #176	; 0xb0
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	4413      	add	r3, r2
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	683a      	ldr	r2, [r7, #0]
 800ab7c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ab7e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ab80:	683a      	ldr	r2, [r7, #0]
 800ab82:	88d2      	ldrh	r2, [r2, #6]
 800ab84:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	88db      	ldrh	r3, [r3, #6]
 800ab8a:	2b07      	cmp	r3, #7
 800ab8c:	bf28      	it	cs
 800ab8e:	2307      	movcs	r3, #7
 800ab90:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	89fa      	ldrh	r2, [r7, #14]
 800ab96:	4619      	mov	r1, r3
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f001 fd89 	bl	800c6b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ab9e:	e090      	b.n	800acc2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	785a      	ldrb	r2, [r3, #1]
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	88db      	ldrh	r3, [r3, #6]
 800abae:	2b3f      	cmp	r3, #63	; 0x3f
 800abb0:	d803      	bhi.n	800abba <USBD_CDC_Setup+0xa6>
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	88db      	ldrh	r3, [r3, #6]
 800abb6:	b2da      	uxtb	r2, r3
 800abb8:	e000      	b.n	800abbc <USBD_CDC_Setup+0xa8>
 800abba:	2240      	movs	r2, #64	; 0x40
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800abc2:	6939      	ldr	r1, [r7, #16]
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800abca:	461a      	mov	r2, r3
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f001 fd9b 	bl	800c708 <USBD_CtlPrepareRx>
      break;
 800abd2:	e076      	b.n	800acc2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	33b0      	adds	r3, #176	; 0xb0
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4413      	add	r3, r2
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	683a      	ldr	r2, [r7, #0]
 800abe8:	7850      	ldrb	r0, [r2, #1]
 800abea:	2200      	movs	r2, #0
 800abec:	6839      	ldr	r1, [r7, #0]
 800abee:	4798      	blx	r3
      break;
 800abf0:	e067      	b.n	800acc2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	785b      	ldrb	r3, [r3, #1]
 800abf6:	2b0b      	cmp	r3, #11
 800abf8:	d851      	bhi.n	800ac9e <USBD_CDC_Setup+0x18a>
 800abfa:	a201      	add	r2, pc, #4	; (adr r2, 800ac00 <USBD_CDC_Setup+0xec>)
 800abfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac00:	0800ac31 	.word	0x0800ac31
 800ac04:	0800acad 	.word	0x0800acad
 800ac08:	0800ac9f 	.word	0x0800ac9f
 800ac0c:	0800ac9f 	.word	0x0800ac9f
 800ac10:	0800ac9f 	.word	0x0800ac9f
 800ac14:	0800ac9f 	.word	0x0800ac9f
 800ac18:	0800ac9f 	.word	0x0800ac9f
 800ac1c:	0800ac9f 	.word	0x0800ac9f
 800ac20:	0800ac9f 	.word	0x0800ac9f
 800ac24:	0800ac9f 	.word	0x0800ac9f
 800ac28:	0800ac5b 	.word	0x0800ac5b
 800ac2c:	0800ac85 	.word	0x0800ac85
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	2b03      	cmp	r3, #3
 800ac3a:	d107      	bne.n	800ac4c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ac3c:	f107 030a 	add.w	r3, r7, #10
 800ac40:	2202      	movs	r2, #2
 800ac42:	4619      	mov	r1, r3
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f001 fd33 	bl	800c6b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac4a:	e032      	b.n	800acb2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ac4c:	6839      	ldr	r1, [r7, #0]
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f001 fcbd 	bl	800c5ce <USBD_CtlError>
            ret = USBD_FAIL;
 800ac54:	2303      	movs	r3, #3
 800ac56:	75fb      	strb	r3, [r7, #23]
          break;
 800ac58:	e02b      	b.n	800acb2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	2b03      	cmp	r3, #3
 800ac64:	d107      	bne.n	800ac76 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ac66:	f107 030d 	add.w	r3, r7, #13
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f001 fd1e 	bl	800c6b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac74:	e01d      	b.n	800acb2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ac76:	6839      	ldr	r1, [r7, #0]
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f001 fca8 	bl	800c5ce <USBD_CtlError>
            ret = USBD_FAIL;
 800ac7e:	2303      	movs	r3, #3
 800ac80:	75fb      	strb	r3, [r7, #23]
          break;
 800ac82:	e016      	b.n	800acb2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	2b03      	cmp	r3, #3
 800ac8e:	d00f      	beq.n	800acb0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ac90:	6839      	ldr	r1, [r7, #0]
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f001 fc9b 	bl	800c5ce <USBD_CtlError>
            ret = USBD_FAIL;
 800ac98:	2303      	movs	r3, #3
 800ac9a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ac9c:	e008      	b.n	800acb0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ac9e:	6839      	ldr	r1, [r7, #0]
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f001 fc94 	bl	800c5ce <USBD_CtlError>
          ret = USBD_FAIL;
 800aca6:	2303      	movs	r3, #3
 800aca8:	75fb      	strb	r3, [r7, #23]
          break;
 800acaa:	e002      	b.n	800acb2 <USBD_CDC_Setup+0x19e>
          break;
 800acac:	bf00      	nop
 800acae:	e008      	b.n	800acc2 <USBD_CDC_Setup+0x1ae>
          break;
 800acb0:	bf00      	nop
      }
      break;
 800acb2:	e006      	b.n	800acc2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800acb4:	6839      	ldr	r1, [r7, #0]
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f001 fc89 	bl	800c5ce <USBD_CtlError>
      ret = USBD_FAIL;
 800acbc:	2303      	movs	r3, #3
 800acbe:	75fb      	strb	r3, [r7, #23]
      break;
 800acc0:	bf00      	nop
  }

  return (uint8_t)ret;
 800acc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3718      	adds	r7, #24
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	460b      	mov	r3, r1
 800acd6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800acde:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	32b0      	adds	r2, #176	; 0xb0
 800acea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d101      	bne.n	800acf6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800acf2:	2303      	movs	r3, #3
 800acf4:	e065      	b.n	800adc2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	32b0      	adds	r2, #176	; 0xb0
 800ad00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad04:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ad06:	78fb      	ldrb	r3, [r7, #3]
 800ad08:	f003 020f 	and.w	r2, r3, #15
 800ad0c:	6879      	ldr	r1, [r7, #4]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	4413      	add	r3, r2
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	440b      	add	r3, r1
 800ad18:	3318      	adds	r3, #24
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d02f      	beq.n	800ad80 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ad20:	78fb      	ldrb	r3, [r7, #3]
 800ad22:	f003 020f 	and.w	r2, r3, #15
 800ad26:	6879      	ldr	r1, [r7, #4]
 800ad28:	4613      	mov	r3, r2
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	4413      	add	r3, r2
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	440b      	add	r3, r1
 800ad32:	3318      	adds	r3, #24
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	78fb      	ldrb	r3, [r7, #3]
 800ad38:	f003 010f 	and.w	r1, r3, #15
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	460b      	mov	r3, r1
 800ad40:	00db      	lsls	r3, r3, #3
 800ad42:	440b      	add	r3, r1
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	4403      	add	r3, r0
 800ad48:	3348      	adds	r3, #72	; 0x48
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ad50:	fb01 f303 	mul.w	r3, r1, r3
 800ad54:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d112      	bne.n	800ad80 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ad5a:	78fb      	ldrb	r3, [r7, #3]
 800ad5c:	f003 020f 	and.w	r2, r3, #15
 800ad60:	6879      	ldr	r1, [r7, #4]
 800ad62:	4613      	mov	r3, r2
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	4413      	add	r3, r2
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	440b      	add	r3, r1
 800ad6c:	3318      	adds	r3, #24
 800ad6e:	2200      	movs	r2, #0
 800ad70:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ad72:	78f9      	ldrb	r1, [r7, #3]
 800ad74:	2300      	movs	r3, #0
 800ad76:	2200      	movs	r2, #0
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f005 fb80 	bl	801047e <USBD_LL_Transmit>
 800ad7e:	e01f      	b.n	800adc0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	33b0      	adds	r3, #176	; 0xb0
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	4413      	add	r3, r2
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	691b      	ldr	r3, [r3, #16]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d010      	beq.n	800adc0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	33b0      	adds	r3, #176	; 0xb0
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	4413      	add	r3, r2
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	691b      	ldr	r3, [r3, #16]
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800adb6:	68ba      	ldr	r2, [r7, #8]
 800adb8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800adbc:	78fa      	ldrb	r2, [r7, #3]
 800adbe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800adca:	b580      	push	{r7, lr}
 800adcc:	b084      	sub	sp, #16
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
 800add2:	460b      	mov	r3, r1
 800add4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	32b0      	adds	r2, #176	; 0xb0
 800ade0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ade4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	32b0      	adds	r2, #176	; 0xb0
 800adf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d101      	bne.n	800adfc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800adf8:	2303      	movs	r3, #3
 800adfa:	e01a      	b.n	800ae32 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800adfc:	78fb      	ldrb	r3, [r7, #3]
 800adfe:	4619      	mov	r1, r3
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f005 fb7e 	bl	8010502 <USBD_LL_GetRxDataSize>
 800ae06:	4602      	mov	r2, r0
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	33b0      	adds	r3, #176	; 0xb0
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	4413      	add	r3, r2
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	68fa      	ldr	r2, [r7, #12]
 800ae22:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ae2c:	4611      	mov	r1, r2
 800ae2e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b084      	sub	sp, #16
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	32b0      	adds	r2, #176	; 0xb0
 800ae4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d101      	bne.n	800ae5c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ae58:	2303      	movs	r3, #3
 800ae5a:	e025      	b.n	800aea8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	33b0      	adds	r3, #176	; 0xb0
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	4413      	add	r3, r2
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d01a      	beq.n	800aea6 <USBD_CDC_EP0_RxReady+0x6c>
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ae76:	2bff      	cmp	r3, #255	; 0xff
 800ae78:	d015      	beq.n	800aea6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	33b0      	adds	r3, #176	; 0xb0
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	4413      	add	r3, r2
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800ae92:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ae94:	68fa      	ldr	r2, [r7, #12]
 800ae96:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ae9a:	b292      	uxth	r2, r2
 800ae9c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	22ff      	movs	r2, #255	; 0xff
 800aea2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800aea6:	2300      	movs	r3, #0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3710      	adds	r7, #16
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b086      	sub	sp, #24
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aeb8:	2182      	movs	r1, #130	; 0x82
 800aeba:	4818      	ldr	r0, [pc, #96]	; (800af1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aebc:	f000 fd4f 	bl	800b95e <USBD_GetEpDesc>
 800aec0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aec2:	2101      	movs	r1, #1
 800aec4:	4815      	ldr	r0, [pc, #84]	; (800af1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aec6:	f000 fd4a 	bl	800b95e <USBD_GetEpDesc>
 800aeca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aecc:	2181      	movs	r1, #129	; 0x81
 800aece:	4813      	ldr	r0, [pc, #76]	; (800af1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aed0:	f000 fd45 	bl	800b95e <USBD_GetEpDesc>
 800aed4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d002      	beq.n	800aee2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	2210      	movs	r2, #16
 800aee0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d006      	beq.n	800aef6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aef0:	711a      	strb	r2, [r3, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d006      	beq.n	800af0a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2200      	movs	r2, #0
 800af00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af04:	711a      	strb	r2, [r3, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2243      	movs	r2, #67	; 0x43
 800af0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800af10:	4b02      	ldr	r3, [pc, #8]	; (800af1c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800af12:	4618      	mov	r0, r3
 800af14:	3718      	adds	r7, #24
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	20000088 	.word	0x20000088

0800af20 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b086      	sub	sp, #24
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800af28:	2182      	movs	r1, #130	; 0x82
 800af2a:	4818      	ldr	r0, [pc, #96]	; (800af8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800af2c:	f000 fd17 	bl	800b95e <USBD_GetEpDesc>
 800af30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800af32:	2101      	movs	r1, #1
 800af34:	4815      	ldr	r0, [pc, #84]	; (800af8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800af36:	f000 fd12 	bl	800b95e <USBD_GetEpDesc>
 800af3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800af3c:	2181      	movs	r1, #129	; 0x81
 800af3e:	4813      	ldr	r0, [pc, #76]	; (800af8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800af40:	f000 fd0d 	bl	800b95e <USBD_GetEpDesc>
 800af44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d002      	beq.n	800af52 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	2210      	movs	r2, #16
 800af50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d006      	beq.n	800af66 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	2200      	movs	r2, #0
 800af5c:	711a      	strb	r2, [r3, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	f042 0202 	orr.w	r2, r2, #2
 800af64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d006      	beq.n	800af7a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2200      	movs	r2, #0
 800af70:	711a      	strb	r2, [r3, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	f042 0202 	orr.w	r2, r2, #2
 800af78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2243      	movs	r2, #67	; 0x43
 800af7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800af80:	4b02      	ldr	r3, [pc, #8]	; (800af8c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800af82:	4618      	mov	r0, r3
 800af84:	3718      	adds	r7, #24
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	20000088 	.word	0x20000088

0800af90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800af98:	2182      	movs	r1, #130	; 0x82
 800af9a:	4818      	ldr	r0, [pc, #96]	; (800affc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800af9c:	f000 fcdf 	bl	800b95e <USBD_GetEpDesc>
 800afa0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800afa2:	2101      	movs	r1, #1
 800afa4:	4815      	ldr	r0, [pc, #84]	; (800affc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800afa6:	f000 fcda 	bl	800b95e <USBD_GetEpDesc>
 800afaa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800afac:	2181      	movs	r1, #129	; 0x81
 800afae:	4813      	ldr	r0, [pc, #76]	; (800affc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800afb0:	f000 fcd5 	bl	800b95e <USBD_GetEpDesc>
 800afb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d002      	beq.n	800afc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	2210      	movs	r2, #16
 800afc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d006      	beq.n	800afd6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	2200      	movs	r2, #0
 800afcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afd0:	711a      	strb	r2, [r3, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d006      	beq.n	800afea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2200      	movs	r2, #0
 800afe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afe4:	711a      	strb	r2, [r3, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2243      	movs	r2, #67	; 0x43
 800afee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aff0:	4b02      	ldr	r3, [pc, #8]	; (800affc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3718      	adds	r7, #24
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	20000088 	.word	0x20000088

0800b000 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	220a      	movs	r2, #10
 800b00c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b00e:	4b03      	ldr	r3, [pc, #12]	; (800b01c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b010:	4618      	mov	r0, r3
 800b012:	370c      	adds	r7, #12
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr
 800b01c:	20000044 	.word	0x20000044

0800b020 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d101      	bne.n	800b034 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b030:	2303      	movs	r3, #3
 800b032:	e009      	b.n	800b048 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	33b0      	adds	r3, #176	; 0xb0
 800b03e:	009b      	lsls	r3, r3, #2
 800b040:	4413      	add	r3, r2
 800b042:	683a      	ldr	r2, [r7, #0]
 800b044:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b054:	b480      	push	{r7}
 800b056:	b087      	sub	sp, #28
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	32b0      	adds	r2, #176	; 0xb0
 800b06a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b06e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d101      	bne.n	800b07a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b076:	2303      	movs	r3, #3
 800b078:	e008      	b.n	800b08c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	68ba      	ldr	r2, [r7, #8]
 800b07e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	687a      	ldr	r2, [r7, #4]
 800b086:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	371c      	adds	r7, #28
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	32b0      	adds	r2, #176	; 0xb0
 800b0ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d101      	bne.n	800b0bc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b0b8:	2303      	movs	r3, #3
 800b0ba:	e004      	b.n	800b0c6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	683a      	ldr	r2, [r7, #0]
 800b0c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3714      	adds	r7, #20
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
	...

0800b0d4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	32b0      	adds	r2, #176	; 0xb0
 800b0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	32b0      	adds	r2, #176	; 0xb0
 800b0fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d101      	bne.n	800b106 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b102:	2303      	movs	r3, #3
 800b104:	e025      	b.n	800b152 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d11f      	bne.n	800b150 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	2201      	movs	r2, #1
 800b114:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b118:	4b10      	ldr	r3, [pc, #64]	; (800b15c <USBD_CDC_TransmitPacket+0x88>)
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	f003 020f 	and.w	r2, r3, #15
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	4613      	mov	r3, r2
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	4413      	add	r3, r2
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	4403      	add	r3, r0
 800b132:	3318      	adds	r3, #24
 800b134:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b136:	4b09      	ldr	r3, [pc, #36]	; (800b15c <USBD_CDC_TransmitPacket+0x88>)
 800b138:	7819      	ldrb	r1, [r3, #0]
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f005 f999 	bl	801047e <USBD_LL_Transmit>

    ret = USBD_OK;
 800b14c:	2300      	movs	r3, #0
 800b14e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b150:	7bfb      	ldrb	r3, [r7, #15]
}
 800b152:	4618      	mov	r0, r3
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	200000cb 	.word	0x200000cb

0800b160 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	32b0      	adds	r2, #176	; 0xb0
 800b172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b176:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	32b0      	adds	r2, #176	; 0xb0
 800b182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d101      	bne.n	800b18e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b18a:	2303      	movs	r3, #3
 800b18c:	e018      	b.n	800b1c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	7c1b      	ldrb	r3, [r3, #16]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d10a      	bne.n	800b1ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b196:	4b0c      	ldr	r3, [pc, #48]	; (800b1c8 <USBD_CDC_ReceivePacket+0x68>)
 800b198:	7819      	ldrb	r1, [r3, #0]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f005 f98b 	bl	80104c0 <USBD_LL_PrepareReceive>
 800b1aa:	e008      	b.n	800b1be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b1ac:	4b06      	ldr	r3, [pc, #24]	; (800b1c8 <USBD_CDC_ReceivePacket+0x68>)
 800b1ae:	7819      	ldrb	r1, [r3, #0]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1b6:	2340      	movs	r3, #64	; 0x40
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f005 f981 	bl	80104c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b1be:	2300      	movs	r3, #0
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3710      	adds	r7, #16
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	200000cc 	.word	0x200000cc

0800b1cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b086      	sub	sp, #24
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	4613      	mov	r3, r2
 800b1d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d101      	bne.n	800b1e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b1e0:	2303      	movs	r3, #3
 800b1e2:	e01f      	b.n	800b224 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d003      	beq.n	800b20a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	68ba      	ldr	r2, [r7, #8]
 800b206:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2201      	movs	r2, #1
 800b20e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	79fa      	ldrb	r2, [r7, #7]
 800b216:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	f004 fffb 	bl	8010214 <USBD_LL_Init>
 800b21e:	4603      	mov	r3, r0
 800b220:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b222:	7dfb      	ldrb	r3, [r7, #23]
}
 800b224:	4618      	mov	r0, r3
 800b226:	3718      	adds	r7, #24
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b084      	sub	sp, #16
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b236:	2300      	movs	r3, #0
 800b238:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d101      	bne.n	800b244 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b240:	2303      	movs	r3, #3
 800b242:	e025      	b.n	800b290 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	683a      	ldr	r2, [r7, #0]
 800b248:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	32ae      	adds	r2, #174	; 0xae
 800b256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d00f      	beq.n	800b280 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	32ae      	adds	r2, #174	; 0xae
 800b26a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b270:	f107 020e 	add.w	r2, r7, #14
 800b274:	4610      	mov	r0, r2
 800b276:	4798      	blx	r3
 800b278:	4602      	mov	r2, r0
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b286:	1c5a      	adds	r2, r3, #1
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b28e:	2300      	movs	r3, #0
}
 800b290:	4618      	mov	r0, r3
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f005 f803 	bl	80102ac <USBD_LL_Start>
 800b2a6:	4603      	mov	r3, r0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b2b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	370c      	adds	r7, #12
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr

0800b2c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b084      	sub	sp, #16
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d009      	beq.n	800b2f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	78fa      	ldrb	r2, [r7, #3]
 800b2ea:	4611      	mov	r1, r2
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	4798      	blx	r3
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3710      	adds	r7, #16
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b084      	sub	sp, #16
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
 800b306:	460b      	mov	r3, r1
 800b308:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b30a:	2300      	movs	r3, #0
 800b30c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	78fa      	ldrb	r2, [r7, #3]
 800b318:	4611      	mov	r1, r2
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	4798      	blx	r3
 800b31e:	4603      	mov	r3, r0
 800b320:	2b00      	cmp	r3, #0
 800b322:	d001      	beq.n	800b328 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b324:	2303      	movs	r3, #3
 800b326:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b328:	7bfb      	ldrb	r3, [r7, #15]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3710      	adds	r7, #16
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b332:	b580      	push	{r7, lr}
 800b334:	b084      	sub	sp, #16
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
 800b33a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b342:	6839      	ldr	r1, [r7, #0]
 800b344:	4618      	mov	r0, r3
 800b346:	f001 f908 	bl	800c55a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2201      	movs	r2, #1
 800b34e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b358:	461a      	mov	r2, r3
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b366:	f003 031f 	and.w	r3, r3, #31
 800b36a:	2b02      	cmp	r3, #2
 800b36c:	d01a      	beq.n	800b3a4 <USBD_LL_SetupStage+0x72>
 800b36e:	2b02      	cmp	r3, #2
 800b370:	d822      	bhi.n	800b3b8 <USBD_LL_SetupStage+0x86>
 800b372:	2b00      	cmp	r3, #0
 800b374:	d002      	beq.n	800b37c <USBD_LL_SetupStage+0x4a>
 800b376:	2b01      	cmp	r3, #1
 800b378:	d00a      	beq.n	800b390 <USBD_LL_SetupStage+0x5e>
 800b37a:	e01d      	b.n	800b3b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b382:	4619      	mov	r1, r3
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 fb5f 	bl	800ba48 <USBD_StdDevReq>
 800b38a:	4603      	mov	r3, r0
 800b38c:	73fb      	strb	r3, [r7, #15]
      break;
 800b38e:	e020      	b.n	800b3d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b396:	4619      	mov	r1, r3
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 fbc7 	bl	800bb2c <USBD_StdItfReq>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	73fb      	strb	r3, [r7, #15]
      break;
 800b3a2:	e016      	b.n	800b3d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 fc29 	bl	800bc04 <USBD_StdEPReq>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	73fb      	strb	r3, [r7, #15]
      break;
 800b3b6:	e00c      	b.n	800b3d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b3be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f004 ffd0 	bl	801036c <USBD_LL_StallEP>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	73fb      	strb	r3, [r7, #15]
      break;
 800b3d0:	bf00      	nop
  }

  return ret;
 800b3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3710      	adds	r7, #16
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b086      	sub	sp, #24
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	607a      	str	r2, [r7, #4]
 800b3e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b3ee:	7afb      	ldrb	r3, [r7, #11]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d16e      	bne.n	800b4d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b3fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b402:	2b03      	cmp	r3, #3
 800b404:	f040 8098 	bne.w	800b538 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	689a      	ldr	r2, [r3, #8]
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	429a      	cmp	r2, r3
 800b412:	d913      	bls.n	800b43c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	689a      	ldr	r2, [r3, #8]
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	1ad2      	subs	r2, r2, r3
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	68da      	ldr	r2, [r3, #12]
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	4293      	cmp	r3, r2
 800b42c:	bf28      	it	cs
 800b42e:	4613      	movcs	r3, r2
 800b430:	461a      	mov	r2, r3
 800b432:	6879      	ldr	r1, [r7, #4]
 800b434:	68f8      	ldr	r0, [r7, #12]
 800b436:	f001 f984 	bl	800c742 <USBD_CtlContinueRx>
 800b43a:	e07d      	b.n	800b538 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b442:	f003 031f 	and.w	r3, r3, #31
 800b446:	2b02      	cmp	r3, #2
 800b448:	d014      	beq.n	800b474 <USBD_LL_DataOutStage+0x98>
 800b44a:	2b02      	cmp	r3, #2
 800b44c:	d81d      	bhi.n	800b48a <USBD_LL_DataOutStage+0xae>
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d002      	beq.n	800b458 <USBD_LL_DataOutStage+0x7c>
 800b452:	2b01      	cmp	r3, #1
 800b454:	d003      	beq.n	800b45e <USBD_LL_DataOutStage+0x82>
 800b456:	e018      	b.n	800b48a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b458:	2300      	movs	r3, #0
 800b45a:	75bb      	strb	r3, [r7, #22]
            break;
 800b45c:	e018      	b.n	800b490 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b464:	b2db      	uxtb	r3, r3
 800b466:	4619      	mov	r1, r3
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f000 fa5e 	bl	800b92a <USBD_CoreFindIF>
 800b46e:	4603      	mov	r3, r0
 800b470:	75bb      	strb	r3, [r7, #22]
            break;
 800b472:	e00d      	b.n	800b490 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b47a:	b2db      	uxtb	r3, r3
 800b47c:	4619      	mov	r1, r3
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f000 fa60 	bl	800b944 <USBD_CoreFindEP>
 800b484:	4603      	mov	r3, r0
 800b486:	75bb      	strb	r3, [r7, #22]
            break;
 800b488:	e002      	b.n	800b490 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b48a:	2300      	movs	r3, #0
 800b48c:	75bb      	strb	r3, [r7, #22]
            break;
 800b48e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b490:	7dbb      	ldrb	r3, [r7, #22]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d119      	bne.n	800b4ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	2b03      	cmp	r3, #3
 800b4a0:	d113      	bne.n	800b4ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b4a2:	7dba      	ldrb	r2, [r7, #22]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	32ae      	adds	r2, #174	; 0xae
 800b4a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ac:	691b      	ldr	r3, [r3, #16]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00b      	beq.n	800b4ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b4b2:	7dba      	ldrb	r2, [r7, #22]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b4ba:	7dba      	ldrb	r2, [r7, #22]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	32ae      	adds	r2, #174	; 0xae
 800b4c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c4:	691b      	ldr	r3, [r3, #16]
 800b4c6:	68f8      	ldr	r0, [r7, #12]
 800b4c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f001 f94a 	bl	800c764 <USBD_CtlSendStatus>
 800b4d0:	e032      	b.n	800b538 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b4d2:	7afb      	ldrb	r3, [r7, #11]
 800b4d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	4619      	mov	r1, r3
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	f000 fa31 	bl	800b944 <USBD_CoreFindEP>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b4e6:	7dbb      	ldrb	r3, [r7, #22]
 800b4e8:	2bff      	cmp	r3, #255	; 0xff
 800b4ea:	d025      	beq.n	800b538 <USBD_LL_DataOutStage+0x15c>
 800b4ec:	7dbb      	ldrb	r3, [r7, #22]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d122      	bne.n	800b538 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	2b03      	cmp	r3, #3
 800b4fc:	d117      	bne.n	800b52e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b4fe:	7dba      	ldrb	r2, [r7, #22]
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	32ae      	adds	r2, #174	; 0xae
 800b504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b508:	699b      	ldr	r3, [r3, #24]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d00f      	beq.n	800b52e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b50e:	7dba      	ldrb	r2, [r7, #22]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b516:	7dba      	ldrb	r2, [r7, #22]
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	32ae      	adds	r2, #174	; 0xae
 800b51c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b520:	699b      	ldr	r3, [r3, #24]
 800b522:	7afa      	ldrb	r2, [r7, #11]
 800b524:	4611      	mov	r1, r2
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	4798      	blx	r3
 800b52a:	4603      	mov	r3, r0
 800b52c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b52e:	7dfb      	ldrb	r3, [r7, #23]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d001      	beq.n	800b538 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b534:	7dfb      	ldrb	r3, [r7, #23]
 800b536:	e000      	b.n	800b53a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b538:	2300      	movs	r3, #0
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3718      	adds	r7, #24
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b542:	b580      	push	{r7, lr}
 800b544:	b086      	sub	sp, #24
 800b546:	af00      	add	r7, sp, #0
 800b548:	60f8      	str	r0, [r7, #12]
 800b54a:	460b      	mov	r3, r1
 800b54c:	607a      	str	r2, [r7, #4]
 800b54e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b550:	7afb      	ldrb	r3, [r7, #11]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d16f      	bne.n	800b636 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	3314      	adds	r3, #20
 800b55a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b562:	2b02      	cmp	r3, #2
 800b564:	d15a      	bne.n	800b61c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	689a      	ldr	r2, [r3, #8]
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	68db      	ldr	r3, [r3, #12]
 800b56e:	429a      	cmp	r2, r3
 800b570:	d914      	bls.n	800b59c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	689a      	ldr	r2, [r3, #8]
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	1ad2      	subs	r2, r2, r3
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	461a      	mov	r2, r3
 800b586:	6879      	ldr	r1, [r7, #4]
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f001 f8ac 	bl	800c6e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b58e:	2300      	movs	r3, #0
 800b590:	2200      	movs	r2, #0
 800b592:	2100      	movs	r1, #0
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	f004 ff93 	bl	80104c0 <USBD_LL_PrepareReceive>
 800b59a:	e03f      	b.n	800b61c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	68da      	ldr	r2, [r3, #12]
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d11c      	bne.n	800b5e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	685a      	ldr	r2, [r3, #4]
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d316      	bcc.n	800b5e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	685a      	ldr	r2, [r3, #4]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d20f      	bcs.n	800b5e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	2100      	movs	r1, #0
 800b5c6:	68f8      	ldr	r0, [r7, #12]
 800b5c8:	f001 f88d 	bl	800c6e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	2100      	movs	r1, #0
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f004 ff70 	bl	80104c0 <USBD_LL_PrepareReceive>
 800b5e0:	e01c      	b.n	800b61c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b03      	cmp	r3, #3
 800b5ec:	d10f      	bne.n	800b60e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5f4:	68db      	ldr	r3, [r3, #12]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d009      	beq.n	800b60e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b60e:	2180      	movs	r1, #128	; 0x80
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	f004 feab 	bl	801036c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b616:	68f8      	ldr	r0, [r7, #12]
 800b618:	f001 f8b7 	bl	800c78a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b622:	2b00      	cmp	r3, #0
 800b624:	d03a      	beq.n	800b69c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f7ff fe42 	bl	800b2b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2200      	movs	r2, #0
 800b630:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b634:	e032      	b.n	800b69c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b636:	7afb      	ldrb	r3, [r7, #11]
 800b638:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	4619      	mov	r1, r3
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f000 f97f 	bl	800b944 <USBD_CoreFindEP>
 800b646:	4603      	mov	r3, r0
 800b648:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b64a:	7dfb      	ldrb	r3, [r7, #23]
 800b64c:	2bff      	cmp	r3, #255	; 0xff
 800b64e:	d025      	beq.n	800b69c <USBD_LL_DataInStage+0x15a>
 800b650:	7dfb      	ldrb	r3, [r7, #23]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d122      	bne.n	800b69c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	2b03      	cmp	r3, #3
 800b660:	d11c      	bne.n	800b69c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b662:	7dfa      	ldrb	r2, [r7, #23]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	32ae      	adds	r2, #174	; 0xae
 800b668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b66c:	695b      	ldr	r3, [r3, #20]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d014      	beq.n	800b69c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b672:	7dfa      	ldrb	r2, [r7, #23]
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b67a:	7dfa      	ldrb	r2, [r7, #23]
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	32ae      	adds	r2, #174	; 0xae
 800b680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b684:	695b      	ldr	r3, [r3, #20]
 800b686:	7afa      	ldrb	r2, [r7, #11]
 800b688:	4611      	mov	r1, r2
 800b68a:	68f8      	ldr	r0, [r7, #12]
 800b68c:	4798      	blx	r3
 800b68e:	4603      	mov	r3, r0
 800b690:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b692:	7dbb      	ldrb	r3, [r7, #22]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d001      	beq.n	800b69c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b698:	7dbb      	ldrb	r3, [r7, #22]
 800b69a:	e000      	b.n	800b69e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b69c:	2300      	movs	r3, #0
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3718      	adds	r7, #24
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b084      	sub	sp, #16
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d014      	beq.n	800b70c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00e      	beq.n	800b70c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	6852      	ldr	r2, [r2, #4]
 800b6fa:	b2d2      	uxtb	r2, r2
 800b6fc:	4611      	mov	r1, r2
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	4798      	blx	r3
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d001      	beq.n	800b70c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b708:	2303      	movs	r3, #3
 800b70a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b70c:	2340      	movs	r3, #64	; 0x40
 800b70e:	2200      	movs	r2, #0
 800b710:	2100      	movs	r1, #0
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f004 fde5 	bl	80102e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2201      	movs	r2, #1
 800b71c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2240      	movs	r2, #64	; 0x40
 800b724:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b728:	2340      	movs	r3, #64	; 0x40
 800b72a:	2200      	movs	r2, #0
 800b72c:	2180      	movs	r1, #128	; 0x80
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f004 fdd7 	bl	80102e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2201      	movs	r2, #1
 800b738:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2240      	movs	r2, #64	; 0x40
 800b73e:	621a      	str	r2, [r3, #32]

  return ret;
 800b740:	7bfb      	ldrb	r3, [r7, #15]
}
 800b742:	4618      	mov	r0, r3
 800b744:	3710      	adds	r7, #16
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}

0800b74a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b74a:	b480      	push	{r7}
 800b74c:	b083      	sub	sp, #12
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
 800b752:	460b      	mov	r3, r1
 800b754:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	78fa      	ldrb	r2, [r7, #3]
 800b75a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b75c:	2300      	movs	r3, #0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	370c      	adds	r7, #12
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr

0800b76a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b76a:	b480      	push	{r7}
 800b76c:	b083      	sub	sp, #12
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b778:	b2da      	uxtb	r2, r3
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2204      	movs	r2, #4
 800b784:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	370c      	adds	r7, #12
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr

0800b796 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b796:	b480      	push	{r7}
 800b798:	b083      	sub	sp, #12
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	2b04      	cmp	r3, #4
 800b7a8:	d106      	bne.n	800b7b8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b7b0:	b2da      	uxtb	r2, r3
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	370c      	adds	r7, #12
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr

0800b7c6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b082      	sub	sp, #8
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	2b03      	cmp	r3, #3
 800b7d8:	d110      	bne.n	800b7fc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d00b      	beq.n	800b7fc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7ea:	69db      	ldr	r3, [r3, #28]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d005      	beq.n	800b7fc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7f6:	69db      	ldr	r3, [r3, #28]
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b7fc:	2300      	movs	r3, #0
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3708      	adds	r7, #8
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}

0800b806 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b082      	sub	sp, #8
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
 800b80e:	460b      	mov	r3, r1
 800b810:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	32ae      	adds	r2, #174	; 0xae
 800b81c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d101      	bne.n	800b828 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b824:	2303      	movs	r3, #3
 800b826:	e01c      	b.n	800b862 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	2b03      	cmp	r3, #3
 800b832:	d115      	bne.n	800b860 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	32ae      	adds	r2, #174	; 0xae
 800b83e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b842:	6a1b      	ldr	r3, [r3, #32]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d00b      	beq.n	800b860 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	32ae      	adds	r2, #174	; 0xae
 800b852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b856:	6a1b      	ldr	r3, [r3, #32]
 800b858:	78fa      	ldrb	r2, [r7, #3]
 800b85a:	4611      	mov	r1, r2
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b860:	2300      	movs	r3, #0
}
 800b862:	4618      	mov	r0, r3
 800b864:	3708      	adds	r7, #8
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}

0800b86a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b082      	sub	sp, #8
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
 800b872:	460b      	mov	r3, r1
 800b874:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	32ae      	adds	r2, #174	; 0xae
 800b880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d101      	bne.n	800b88c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b888:	2303      	movs	r3, #3
 800b88a:	e01c      	b.n	800b8c6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b892:	b2db      	uxtb	r3, r3
 800b894:	2b03      	cmp	r3, #3
 800b896:	d115      	bne.n	800b8c4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	32ae      	adds	r2, #174	; 0xae
 800b8a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d00b      	beq.n	800b8c4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	32ae      	adds	r2, #174	; 0xae
 800b8b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8bc:	78fa      	ldrb	r2, [r7, #3]
 800b8be:	4611      	mov	r1, r2
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3708      	adds	r7, #8
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}

0800b8ce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b8ce:	b480      	push	{r7}
 800b8d0:	b083      	sub	sp, #12
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d00e      	beq.n	800b920 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	6852      	ldr	r2, [r2, #4]
 800b90e:	b2d2      	uxtb	r2, r2
 800b910:	4611      	mov	r1, r2
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	4798      	blx	r3
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d001      	beq.n	800b920 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b91c:	2303      	movs	r3, #3
 800b91e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b920:	7bfb      	ldrb	r3, [r7, #15]
}
 800b922:	4618      	mov	r0, r3
 800b924:	3710      	adds	r7, #16
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}

0800b92a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b92a:	b480      	push	{r7}
 800b92c:	b083      	sub	sp, #12
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
 800b932:	460b      	mov	r3, r1
 800b934:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b936:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b938:	4618      	mov	r0, r3
 800b93a:	370c      	adds	r7, #12
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr

0800b944 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	460b      	mov	r3, r1
 800b94e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b950:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b952:	4618      	mov	r0, r3
 800b954:	370c      	adds	r7, #12
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr

0800b95e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b95e:	b580      	push	{r7, lr}
 800b960:	b086      	sub	sp, #24
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
 800b966:	460b      	mov	r3, r1
 800b968:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b972:	2300      	movs	r3, #0
 800b974:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	885b      	ldrh	r3, [r3, #2]
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	b29b      	uxth	r3, r3
 800b982:	429a      	cmp	r2, r3
 800b984:	d920      	bls.n	800b9c8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b98e:	e013      	b.n	800b9b8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b990:	f107 030a 	add.w	r3, r7, #10
 800b994:	4619      	mov	r1, r3
 800b996:	6978      	ldr	r0, [r7, #20]
 800b998:	f000 f81b 	bl	800b9d2 <USBD_GetNextDesc>
 800b99c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	785b      	ldrb	r3, [r3, #1]
 800b9a2:	2b05      	cmp	r3, #5
 800b9a4:	d108      	bne.n	800b9b8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	789b      	ldrb	r3, [r3, #2]
 800b9ae:	78fa      	ldrb	r2, [r7, #3]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d008      	beq.n	800b9c6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	885b      	ldrh	r3, [r3, #2]
 800b9bc:	b29a      	uxth	r2, r3
 800b9be:	897b      	ldrh	r3, [r7, #10]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d8e5      	bhi.n	800b990 <USBD_GetEpDesc+0x32>
 800b9c4:	e000      	b.n	800b9c8 <USBD_GetEpDesc+0x6a>
          break;
 800b9c6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b9c8:	693b      	ldr	r3, [r7, #16]
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3718      	adds	r7, #24
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}

0800b9d2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b9d2:	b480      	push	{r7}
 800b9d4:	b085      	sub	sp, #20
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	6078      	str	r0, [r7, #4]
 800b9da:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	881a      	ldrh	r2, [r3, #0]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	4413      	add	r3, r2
 800b9ec:	b29a      	uxth	r2, r3
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	4413      	add	r3, r2
 800b9fc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3714      	adds	r7, #20
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr

0800ba0c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b087      	sub	sp, #28
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	3301      	adds	r3, #1
 800ba22:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ba2a:	8a3b      	ldrh	r3, [r7, #16]
 800ba2c:	021b      	lsls	r3, r3, #8
 800ba2e:	b21a      	sxth	r2, r3
 800ba30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ba34:	4313      	orrs	r3, r2
 800ba36:	b21b      	sxth	r3, r3
 800ba38:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ba3a:	89fb      	ldrh	r3, [r7, #14]
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	371c      	adds	r7, #28
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba52:	2300      	movs	r3, #0
 800ba54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba5e:	2b40      	cmp	r3, #64	; 0x40
 800ba60:	d005      	beq.n	800ba6e <USBD_StdDevReq+0x26>
 800ba62:	2b40      	cmp	r3, #64	; 0x40
 800ba64:	d857      	bhi.n	800bb16 <USBD_StdDevReq+0xce>
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d00f      	beq.n	800ba8a <USBD_StdDevReq+0x42>
 800ba6a:	2b20      	cmp	r3, #32
 800ba6c:	d153      	bne.n	800bb16 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	32ae      	adds	r2, #174	; 0xae
 800ba78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	6839      	ldr	r1, [r7, #0]
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	4798      	blx	r3
 800ba84:	4603      	mov	r3, r0
 800ba86:	73fb      	strb	r3, [r7, #15]
      break;
 800ba88:	e04a      	b.n	800bb20 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	785b      	ldrb	r3, [r3, #1]
 800ba8e:	2b09      	cmp	r3, #9
 800ba90:	d83b      	bhi.n	800bb0a <USBD_StdDevReq+0xc2>
 800ba92:	a201      	add	r2, pc, #4	; (adr r2, 800ba98 <USBD_StdDevReq+0x50>)
 800ba94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba98:	0800baed 	.word	0x0800baed
 800ba9c:	0800bb01 	.word	0x0800bb01
 800baa0:	0800bb0b 	.word	0x0800bb0b
 800baa4:	0800baf7 	.word	0x0800baf7
 800baa8:	0800bb0b 	.word	0x0800bb0b
 800baac:	0800bacb 	.word	0x0800bacb
 800bab0:	0800bac1 	.word	0x0800bac1
 800bab4:	0800bb0b 	.word	0x0800bb0b
 800bab8:	0800bae3 	.word	0x0800bae3
 800babc:	0800bad5 	.word	0x0800bad5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bac0:	6839      	ldr	r1, [r7, #0]
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 fa3c 	bl	800bf40 <USBD_GetDescriptor>
          break;
 800bac8:	e024      	b.n	800bb14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800baca:	6839      	ldr	r1, [r7, #0]
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 fba1 	bl	800c214 <USBD_SetAddress>
          break;
 800bad2:	e01f      	b.n	800bb14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bad4:	6839      	ldr	r1, [r7, #0]
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 fbe0 	bl	800c29c <USBD_SetConfig>
 800badc:	4603      	mov	r3, r0
 800bade:	73fb      	strb	r3, [r7, #15]
          break;
 800bae0:	e018      	b.n	800bb14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bae2:	6839      	ldr	r1, [r7, #0]
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 fc83 	bl	800c3f0 <USBD_GetConfig>
          break;
 800baea:	e013      	b.n	800bb14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800baec:	6839      	ldr	r1, [r7, #0]
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 fcb4 	bl	800c45c <USBD_GetStatus>
          break;
 800baf4:	e00e      	b.n	800bb14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800baf6:	6839      	ldr	r1, [r7, #0]
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 fce3 	bl	800c4c4 <USBD_SetFeature>
          break;
 800bafe:	e009      	b.n	800bb14 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bb00:	6839      	ldr	r1, [r7, #0]
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 fd07 	bl	800c516 <USBD_ClrFeature>
          break;
 800bb08:	e004      	b.n	800bb14 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bb0a:	6839      	ldr	r1, [r7, #0]
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 fd5e 	bl	800c5ce <USBD_CtlError>
          break;
 800bb12:	bf00      	nop
      }
      break;
 800bb14:	e004      	b.n	800bb20 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bb16:	6839      	ldr	r1, [r7, #0]
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 fd58 	bl	800c5ce <USBD_CtlError>
      break;
 800bb1e:	bf00      	nop
  }

  return ret;
 800bb20:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3710      	adds	r7, #16
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop

0800bb2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb36:	2300      	movs	r3, #0
 800bb38:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb42:	2b40      	cmp	r3, #64	; 0x40
 800bb44:	d005      	beq.n	800bb52 <USBD_StdItfReq+0x26>
 800bb46:	2b40      	cmp	r3, #64	; 0x40
 800bb48:	d852      	bhi.n	800bbf0 <USBD_StdItfReq+0xc4>
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d001      	beq.n	800bb52 <USBD_StdItfReq+0x26>
 800bb4e:	2b20      	cmp	r3, #32
 800bb50:	d14e      	bne.n	800bbf0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	2b02      	cmp	r3, #2
 800bb5e:	d840      	bhi.n	800bbe2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	889b      	ldrh	r3, [r3, #4]
 800bb64:	b2db      	uxtb	r3, r3
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d836      	bhi.n	800bbd8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	889b      	ldrh	r3, [r3, #4]
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	4619      	mov	r1, r3
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7ff fed9 	bl	800b92a <USBD_CoreFindIF>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb7c:	7bbb      	ldrb	r3, [r7, #14]
 800bb7e:	2bff      	cmp	r3, #255	; 0xff
 800bb80:	d01d      	beq.n	800bbbe <USBD_StdItfReq+0x92>
 800bb82:	7bbb      	ldrb	r3, [r7, #14]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d11a      	bne.n	800bbbe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bb88:	7bba      	ldrb	r2, [r7, #14]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	32ae      	adds	r2, #174	; 0xae
 800bb8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d00f      	beq.n	800bbb8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bb98:	7bba      	ldrb	r2, [r7, #14]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bba0:	7bba      	ldrb	r2, [r7, #14]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	32ae      	adds	r2, #174	; 0xae
 800bba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbaa:	689b      	ldr	r3, [r3, #8]
 800bbac:	6839      	ldr	r1, [r7, #0]
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	4798      	blx	r3
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bbb6:	e004      	b.n	800bbc2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bbb8:	2303      	movs	r3, #3
 800bbba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bbbc:	e001      	b.n	800bbc2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bbbe:	2303      	movs	r3, #3
 800bbc0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	88db      	ldrh	r3, [r3, #6]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d110      	bne.n	800bbec <USBD_StdItfReq+0xc0>
 800bbca:	7bfb      	ldrb	r3, [r7, #15]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d10d      	bne.n	800bbec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 fdc7 	bl	800c764 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bbd6:	e009      	b.n	800bbec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bbd8:	6839      	ldr	r1, [r7, #0]
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 fcf7 	bl	800c5ce <USBD_CtlError>
          break;
 800bbe0:	e004      	b.n	800bbec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bbe2:	6839      	ldr	r1, [r7, #0]
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 fcf2 	bl	800c5ce <USBD_CtlError>
          break;
 800bbea:	e000      	b.n	800bbee <USBD_StdItfReq+0xc2>
          break;
 800bbec:	bf00      	nop
      }
      break;
 800bbee:	e004      	b.n	800bbfa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bbf0:	6839      	ldr	r1, [r7, #0]
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 fceb 	bl	800c5ce <USBD_CtlError>
      break;
 800bbf8:	bf00      	nop
  }

  return ret;
 800bbfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3710      	adds	r7, #16
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	889b      	ldrh	r3, [r3, #4]
 800bc16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc20:	2b40      	cmp	r3, #64	; 0x40
 800bc22:	d007      	beq.n	800bc34 <USBD_StdEPReq+0x30>
 800bc24:	2b40      	cmp	r3, #64	; 0x40
 800bc26:	f200 817f 	bhi.w	800bf28 <USBD_StdEPReq+0x324>
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d02a      	beq.n	800bc84 <USBD_StdEPReq+0x80>
 800bc2e:	2b20      	cmp	r3, #32
 800bc30:	f040 817a 	bne.w	800bf28 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bc34:	7bbb      	ldrb	r3, [r7, #14]
 800bc36:	4619      	mov	r1, r3
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f7ff fe83 	bl	800b944 <USBD_CoreFindEP>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc42:	7b7b      	ldrb	r3, [r7, #13]
 800bc44:	2bff      	cmp	r3, #255	; 0xff
 800bc46:	f000 8174 	beq.w	800bf32 <USBD_StdEPReq+0x32e>
 800bc4a:	7b7b      	ldrb	r3, [r7, #13]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f040 8170 	bne.w	800bf32 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bc52:	7b7a      	ldrb	r2, [r7, #13]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bc5a:	7b7a      	ldrb	r2, [r7, #13]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	32ae      	adds	r2, #174	; 0xae
 800bc60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	f000 8163 	beq.w	800bf32 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bc6c:	7b7a      	ldrb	r2, [r7, #13]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	32ae      	adds	r2, #174	; 0xae
 800bc72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	6839      	ldr	r1, [r7, #0]
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	4798      	blx	r3
 800bc7e:	4603      	mov	r3, r0
 800bc80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bc82:	e156      	b.n	800bf32 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	785b      	ldrb	r3, [r3, #1]
 800bc88:	2b03      	cmp	r3, #3
 800bc8a:	d008      	beq.n	800bc9e <USBD_StdEPReq+0x9a>
 800bc8c:	2b03      	cmp	r3, #3
 800bc8e:	f300 8145 	bgt.w	800bf1c <USBD_StdEPReq+0x318>
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	f000 809b 	beq.w	800bdce <USBD_StdEPReq+0x1ca>
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d03c      	beq.n	800bd16 <USBD_StdEPReq+0x112>
 800bc9c:	e13e      	b.n	800bf1c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	d002      	beq.n	800bcb0 <USBD_StdEPReq+0xac>
 800bcaa:	2b03      	cmp	r3, #3
 800bcac:	d016      	beq.n	800bcdc <USBD_StdEPReq+0xd8>
 800bcae:	e02c      	b.n	800bd0a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bcb0:	7bbb      	ldrb	r3, [r7, #14]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d00d      	beq.n	800bcd2 <USBD_StdEPReq+0xce>
 800bcb6:	7bbb      	ldrb	r3, [r7, #14]
 800bcb8:	2b80      	cmp	r3, #128	; 0x80
 800bcba:	d00a      	beq.n	800bcd2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bcbc:	7bbb      	ldrb	r3, [r7, #14]
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f004 fb53 	bl	801036c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bcc6:	2180      	movs	r1, #128	; 0x80
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f004 fb4f 	bl	801036c <USBD_LL_StallEP>
 800bcce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bcd0:	e020      	b.n	800bd14 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bcd2:	6839      	ldr	r1, [r7, #0]
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f000 fc7a 	bl	800c5ce <USBD_CtlError>
              break;
 800bcda:	e01b      	b.n	800bd14 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	885b      	ldrh	r3, [r3, #2]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d10e      	bne.n	800bd02 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bce4:	7bbb      	ldrb	r3, [r7, #14]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d00b      	beq.n	800bd02 <USBD_StdEPReq+0xfe>
 800bcea:	7bbb      	ldrb	r3, [r7, #14]
 800bcec:	2b80      	cmp	r3, #128	; 0x80
 800bcee:	d008      	beq.n	800bd02 <USBD_StdEPReq+0xfe>
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	88db      	ldrh	r3, [r3, #6]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d104      	bne.n	800bd02 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bcf8:	7bbb      	ldrb	r3, [r7, #14]
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f004 fb35 	bl	801036c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f000 fd2e 	bl	800c764 <USBD_CtlSendStatus>

              break;
 800bd08:	e004      	b.n	800bd14 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bd0a:	6839      	ldr	r1, [r7, #0]
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f000 fc5e 	bl	800c5ce <USBD_CtlError>
              break;
 800bd12:	bf00      	nop
          }
          break;
 800bd14:	e107      	b.n	800bf26 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	2b02      	cmp	r3, #2
 800bd20:	d002      	beq.n	800bd28 <USBD_StdEPReq+0x124>
 800bd22:	2b03      	cmp	r3, #3
 800bd24:	d016      	beq.n	800bd54 <USBD_StdEPReq+0x150>
 800bd26:	e04b      	b.n	800bdc0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd28:	7bbb      	ldrb	r3, [r7, #14]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d00d      	beq.n	800bd4a <USBD_StdEPReq+0x146>
 800bd2e:	7bbb      	ldrb	r3, [r7, #14]
 800bd30:	2b80      	cmp	r3, #128	; 0x80
 800bd32:	d00a      	beq.n	800bd4a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd34:	7bbb      	ldrb	r3, [r7, #14]
 800bd36:	4619      	mov	r1, r3
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f004 fb17 	bl	801036c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd3e:	2180      	movs	r1, #128	; 0x80
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f004 fb13 	bl	801036c <USBD_LL_StallEP>
 800bd46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd48:	e040      	b.n	800bdcc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bd4a:	6839      	ldr	r1, [r7, #0]
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f000 fc3e 	bl	800c5ce <USBD_CtlError>
              break;
 800bd52:	e03b      	b.n	800bdcc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	885b      	ldrh	r3, [r3, #2]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d136      	bne.n	800bdca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bd5c:	7bbb      	ldrb	r3, [r7, #14]
 800bd5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d004      	beq.n	800bd70 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bd66:	7bbb      	ldrb	r3, [r7, #14]
 800bd68:	4619      	mov	r1, r3
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f004 fb1d 	bl	80103aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 fcf7 	bl	800c764 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bd76:	7bbb      	ldrb	r3, [r7, #14]
 800bd78:	4619      	mov	r1, r3
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f7ff fde2 	bl	800b944 <USBD_CoreFindEP>
 800bd80:	4603      	mov	r3, r0
 800bd82:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd84:	7b7b      	ldrb	r3, [r7, #13]
 800bd86:	2bff      	cmp	r3, #255	; 0xff
 800bd88:	d01f      	beq.n	800bdca <USBD_StdEPReq+0x1c6>
 800bd8a:	7b7b      	ldrb	r3, [r7, #13]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d11c      	bne.n	800bdca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bd90:	7b7a      	ldrb	r2, [r7, #13]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bd98:	7b7a      	ldrb	r2, [r7, #13]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	32ae      	adds	r2, #174	; 0xae
 800bd9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d010      	beq.n	800bdca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bda8:	7b7a      	ldrb	r2, [r7, #13]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	32ae      	adds	r2, #174	; 0xae
 800bdae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdb2:	689b      	ldr	r3, [r3, #8]
 800bdb4:	6839      	ldr	r1, [r7, #0]
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	4798      	blx	r3
 800bdba:	4603      	mov	r3, r0
 800bdbc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bdbe:	e004      	b.n	800bdca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bdc0:	6839      	ldr	r1, [r7, #0]
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 fc03 	bl	800c5ce <USBD_CtlError>
              break;
 800bdc8:	e000      	b.n	800bdcc <USBD_StdEPReq+0x1c8>
              break;
 800bdca:	bf00      	nop
          }
          break;
 800bdcc:	e0ab      	b.n	800bf26 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdd4:	b2db      	uxtb	r3, r3
 800bdd6:	2b02      	cmp	r3, #2
 800bdd8:	d002      	beq.n	800bde0 <USBD_StdEPReq+0x1dc>
 800bdda:	2b03      	cmp	r3, #3
 800bddc:	d032      	beq.n	800be44 <USBD_StdEPReq+0x240>
 800bdde:	e097      	b.n	800bf10 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bde0:	7bbb      	ldrb	r3, [r7, #14]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d007      	beq.n	800bdf6 <USBD_StdEPReq+0x1f2>
 800bde6:	7bbb      	ldrb	r3, [r7, #14]
 800bde8:	2b80      	cmp	r3, #128	; 0x80
 800bdea:	d004      	beq.n	800bdf6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bdec:	6839      	ldr	r1, [r7, #0]
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 fbed 	bl	800c5ce <USBD_CtlError>
                break;
 800bdf4:	e091      	b.n	800bf1a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	da0b      	bge.n	800be16 <USBD_StdEPReq+0x212>
 800bdfe:	7bbb      	ldrb	r3, [r7, #14]
 800be00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be04:	4613      	mov	r3, r2
 800be06:	009b      	lsls	r3, r3, #2
 800be08:	4413      	add	r3, r2
 800be0a:	009b      	lsls	r3, r3, #2
 800be0c:	3310      	adds	r3, #16
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	4413      	add	r3, r2
 800be12:	3304      	adds	r3, #4
 800be14:	e00b      	b.n	800be2e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be16:	7bbb      	ldrb	r3, [r7, #14]
 800be18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be1c:	4613      	mov	r3, r2
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	4413      	add	r3, r2
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	4413      	add	r3, r2
 800be2c:	3304      	adds	r3, #4
 800be2e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	2200      	movs	r2, #0
 800be34:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	2202      	movs	r2, #2
 800be3a:	4619      	mov	r1, r3
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 fc37 	bl	800c6b0 <USBD_CtlSendData>
              break;
 800be42:	e06a      	b.n	800bf1a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800be44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	da11      	bge.n	800be70 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800be4c:	7bbb      	ldrb	r3, [r7, #14]
 800be4e:	f003 020f 	and.w	r2, r3, #15
 800be52:	6879      	ldr	r1, [r7, #4]
 800be54:	4613      	mov	r3, r2
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	4413      	add	r3, r2
 800be5a:	009b      	lsls	r3, r3, #2
 800be5c:	440b      	add	r3, r1
 800be5e:	3324      	adds	r3, #36	; 0x24
 800be60:	881b      	ldrh	r3, [r3, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d117      	bne.n	800be96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800be66:	6839      	ldr	r1, [r7, #0]
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 fbb0 	bl	800c5ce <USBD_CtlError>
                  break;
 800be6e:	e054      	b.n	800bf1a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800be70:	7bbb      	ldrb	r3, [r7, #14]
 800be72:	f003 020f 	and.w	r2, r3, #15
 800be76:	6879      	ldr	r1, [r7, #4]
 800be78:	4613      	mov	r3, r2
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	4413      	add	r3, r2
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	440b      	add	r3, r1
 800be82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800be86:	881b      	ldrh	r3, [r3, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d104      	bne.n	800be96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800be8c:	6839      	ldr	r1, [r7, #0]
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 fb9d 	bl	800c5ce <USBD_CtlError>
                  break;
 800be94:	e041      	b.n	800bf1a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	da0b      	bge.n	800beb6 <USBD_StdEPReq+0x2b2>
 800be9e:	7bbb      	ldrb	r3, [r7, #14]
 800bea0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bea4:	4613      	mov	r3, r2
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	4413      	add	r3, r2
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	3310      	adds	r3, #16
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	4413      	add	r3, r2
 800beb2:	3304      	adds	r3, #4
 800beb4:	e00b      	b.n	800bece <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800beb6:	7bbb      	ldrb	r3, [r7, #14]
 800beb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bebc:	4613      	mov	r3, r2
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	4413      	add	r3, r2
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	4413      	add	r3, r2
 800becc:	3304      	adds	r3, #4
 800bece:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bed0:	7bbb      	ldrb	r3, [r7, #14]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d002      	beq.n	800bedc <USBD_StdEPReq+0x2d8>
 800bed6:	7bbb      	ldrb	r3, [r7, #14]
 800bed8:	2b80      	cmp	r3, #128	; 0x80
 800beda:	d103      	bne.n	800bee4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	2200      	movs	r2, #0
 800bee0:	601a      	str	r2, [r3, #0]
 800bee2:	e00e      	b.n	800bf02 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bee4:	7bbb      	ldrb	r3, [r7, #14]
 800bee6:	4619      	mov	r1, r3
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f004 fa7d 	bl	80103e8 <USBD_LL_IsStallEP>
 800beee:	4603      	mov	r3, r0
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d003      	beq.n	800befc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	2201      	movs	r2, #1
 800bef8:	601a      	str	r2, [r3, #0]
 800befa:	e002      	b.n	800bf02 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	2200      	movs	r2, #0
 800bf00:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	2202      	movs	r2, #2
 800bf06:	4619      	mov	r1, r3
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f000 fbd1 	bl	800c6b0 <USBD_CtlSendData>
              break;
 800bf0e:	e004      	b.n	800bf1a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bf10:	6839      	ldr	r1, [r7, #0]
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 fb5b 	bl	800c5ce <USBD_CtlError>
              break;
 800bf18:	bf00      	nop
          }
          break;
 800bf1a:	e004      	b.n	800bf26 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bf1c:	6839      	ldr	r1, [r7, #0]
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 fb55 	bl	800c5ce <USBD_CtlError>
          break;
 800bf24:	bf00      	nop
      }
      break;
 800bf26:	e005      	b.n	800bf34 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bf28:	6839      	ldr	r1, [r7, #0]
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 fb4f 	bl	800c5ce <USBD_CtlError>
      break;
 800bf30:	e000      	b.n	800bf34 <USBD_StdEPReq+0x330>
      break;
 800bf32:	bf00      	nop
  }

  return ret;
 800bf34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3710      	adds	r7, #16
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
	...

0800bf40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bf52:	2300      	movs	r3, #0
 800bf54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	885b      	ldrh	r3, [r3, #2]
 800bf5a:	0a1b      	lsrs	r3, r3, #8
 800bf5c:	b29b      	uxth	r3, r3
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	2b06      	cmp	r3, #6
 800bf62:	f200 8128 	bhi.w	800c1b6 <USBD_GetDescriptor+0x276>
 800bf66:	a201      	add	r2, pc, #4	; (adr r2, 800bf6c <USBD_GetDescriptor+0x2c>)
 800bf68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf6c:	0800bf89 	.word	0x0800bf89
 800bf70:	0800bfa1 	.word	0x0800bfa1
 800bf74:	0800bfe1 	.word	0x0800bfe1
 800bf78:	0800c1b7 	.word	0x0800c1b7
 800bf7c:	0800c1b7 	.word	0x0800c1b7
 800bf80:	0800c157 	.word	0x0800c157
 800bf84:	0800c183 	.word	0x0800c183
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	7c12      	ldrb	r2, [r2, #16]
 800bf94:	f107 0108 	add.w	r1, r7, #8
 800bf98:	4610      	mov	r0, r2
 800bf9a:	4798      	blx	r3
 800bf9c:	60f8      	str	r0, [r7, #12]
      break;
 800bf9e:	e112      	b.n	800c1c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	7c1b      	ldrb	r3, [r3, #16]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d10d      	bne.n	800bfc4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfb0:	f107 0208 	add.w	r2, r7, #8
 800bfb4:	4610      	mov	r0, r2
 800bfb6:	4798      	blx	r3
 800bfb8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	2202      	movs	r2, #2
 800bfc0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bfc2:	e100      	b.n	800c1c6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfcc:	f107 0208 	add.w	r2, r7, #8
 800bfd0:	4610      	mov	r0, r2
 800bfd2:	4798      	blx	r3
 800bfd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	3301      	adds	r3, #1
 800bfda:	2202      	movs	r2, #2
 800bfdc:	701a      	strb	r2, [r3, #0]
      break;
 800bfde:	e0f2      	b.n	800c1c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	885b      	ldrh	r3, [r3, #2]
 800bfe4:	b2db      	uxtb	r3, r3
 800bfe6:	2b05      	cmp	r3, #5
 800bfe8:	f200 80ac 	bhi.w	800c144 <USBD_GetDescriptor+0x204>
 800bfec:	a201      	add	r2, pc, #4	; (adr r2, 800bff4 <USBD_GetDescriptor+0xb4>)
 800bfee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff2:	bf00      	nop
 800bff4:	0800c00d 	.word	0x0800c00d
 800bff8:	0800c041 	.word	0x0800c041
 800bffc:	0800c075 	.word	0x0800c075
 800c000:	0800c0a9 	.word	0x0800c0a9
 800c004:	0800c0dd 	.word	0x0800c0dd
 800c008:	0800c111 	.word	0x0800c111
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d00b      	beq.n	800c030 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	687a      	ldr	r2, [r7, #4]
 800c022:	7c12      	ldrb	r2, [r2, #16]
 800c024:	f107 0108 	add.w	r1, r7, #8
 800c028:	4610      	mov	r0, r2
 800c02a:	4798      	blx	r3
 800c02c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c02e:	e091      	b.n	800c154 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c030:	6839      	ldr	r1, [r7, #0]
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f000 facb 	bl	800c5ce <USBD_CtlError>
            err++;
 800c038:	7afb      	ldrb	r3, [r7, #11]
 800c03a:	3301      	adds	r3, #1
 800c03c:	72fb      	strb	r3, [r7, #11]
          break;
 800c03e:	e089      	b.n	800c154 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00b      	beq.n	800c064 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c052:	689b      	ldr	r3, [r3, #8]
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	7c12      	ldrb	r2, [r2, #16]
 800c058:	f107 0108 	add.w	r1, r7, #8
 800c05c:	4610      	mov	r0, r2
 800c05e:	4798      	blx	r3
 800c060:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c062:	e077      	b.n	800c154 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c064:	6839      	ldr	r1, [r7, #0]
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 fab1 	bl	800c5ce <USBD_CtlError>
            err++;
 800c06c:	7afb      	ldrb	r3, [r7, #11]
 800c06e:	3301      	adds	r3, #1
 800c070:	72fb      	strb	r3, [r7, #11]
          break;
 800c072:	e06f      	b.n	800c154 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d00b      	beq.n	800c098 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	7c12      	ldrb	r2, [r2, #16]
 800c08c:	f107 0108 	add.w	r1, r7, #8
 800c090:	4610      	mov	r0, r2
 800c092:	4798      	blx	r3
 800c094:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c096:	e05d      	b.n	800c154 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c098:	6839      	ldr	r1, [r7, #0]
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 fa97 	bl	800c5ce <USBD_CtlError>
            err++;
 800c0a0:	7afb      	ldrb	r3, [r7, #11]
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	72fb      	strb	r3, [r7, #11]
          break;
 800c0a6:	e055      	b.n	800c154 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0ae:	691b      	ldr	r3, [r3, #16]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d00b      	beq.n	800c0cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0ba:	691b      	ldr	r3, [r3, #16]
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	7c12      	ldrb	r2, [r2, #16]
 800c0c0:	f107 0108 	add.w	r1, r7, #8
 800c0c4:	4610      	mov	r0, r2
 800c0c6:	4798      	blx	r3
 800c0c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0ca:	e043      	b.n	800c154 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0cc:	6839      	ldr	r1, [r7, #0]
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 fa7d 	bl	800c5ce <USBD_CtlError>
            err++;
 800c0d4:	7afb      	ldrb	r3, [r7, #11]
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	72fb      	strb	r3, [r7, #11]
          break;
 800c0da:	e03b      	b.n	800c154 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0e2:	695b      	ldr	r3, [r3, #20]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d00b      	beq.n	800c100 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0ee:	695b      	ldr	r3, [r3, #20]
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	7c12      	ldrb	r2, [r2, #16]
 800c0f4:	f107 0108 	add.w	r1, r7, #8
 800c0f8:	4610      	mov	r0, r2
 800c0fa:	4798      	blx	r3
 800c0fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0fe:	e029      	b.n	800c154 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c100:	6839      	ldr	r1, [r7, #0]
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 fa63 	bl	800c5ce <USBD_CtlError>
            err++;
 800c108:	7afb      	ldrb	r3, [r7, #11]
 800c10a:	3301      	adds	r3, #1
 800c10c:	72fb      	strb	r3, [r7, #11]
          break;
 800c10e:	e021      	b.n	800c154 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c116:	699b      	ldr	r3, [r3, #24]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d00b      	beq.n	800c134 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c122:	699b      	ldr	r3, [r3, #24]
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	7c12      	ldrb	r2, [r2, #16]
 800c128:	f107 0108 	add.w	r1, r7, #8
 800c12c:	4610      	mov	r0, r2
 800c12e:	4798      	blx	r3
 800c130:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c132:	e00f      	b.n	800c154 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c134:	6839      	ldr	r1, [r7, #0]
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 fa49 	bl	800c5ce <USBD_CtlError>
            err++;
 800c13c:	7afb      	ldrb	r3, [r7, #11]
 800c13e:	3301      	adds	r3, #1
 800c140:	72fb      	strb	r3, [r7, #11]
          break;
 800c142:	e007      	b.n	800c154 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c144:	6839      	ldr	r1, [r7, #0]
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 fa41 	bl	800c5ce <USBD_CtlError>
          err++;
 800c14c:	7afb      	ldrb	r3, [r7, #11]
 800c14e:	3301      	adds	r3, #1
 800c150:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c152:	bf00      	nop
      }
      break;
 800c154:	e037      	b.n	800c1c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	7c1b      	ldrb	r3, [r3, #16]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d109      	bne.n	800c172 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c166:	f107 0208 	add.w	r2, r7, #8
 800c16a:	4610      	mov	r0, r2
 800c16c:	4798      	blx	r3
 800c16e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c170:	e029      	b.n	800c1c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c172:	6839      	ldr	r1, [r7, #0]
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 fa2a 	bl	800c5ce <USBD_CtlError>
        err++;
 800c17a:	7afb      	ldrb	r3, [r7, #11]
 800c17c:	3301      	adds	r3, #1
 800c17e:	72fb      	strb	r3, [r7, #11]
      break;
 800c180:	e021      	b.n	800c1c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	7c1b      	ldrb	r3, [r3, #16]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d10d      	bne.n	800c1a6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c192:	f107 0208 	add.w	r2, r7, #8
 800c196:	4610      	mov	r0, r2
 800c198:	4798      	blx	r3
 800c19a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	3301      	adds	r3, #1
 800c1a0:	2207      	movs	r2, #7
 800c1a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c1a4:	e00f      	b.n	800c1c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c1a6:	6839      	ldr	r1, [r7, #0]
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 fa10 	bl	800c5ce <USBD_CtlError>
        err++;
 800c1ae:	7afb      	ldrb	r3, [r7, #11]
 800c1b0:	3301      	adds	r3, #1
 800c1b2:	72fb      	strb	r3, [r7, #11]
      break;
 800c1b4:	e007      	b.n	800c1c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c1b6:	6839      	ldr	r1, [r7, #0]
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 fa08 	bl	800c5ce <USBD_CtlError>
      err++;
 800c1be:	7afb      	ldrb	r3, [r7, #11]
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	72fb      	strb	r3, [r7, #11]
      break;
 800c1c4:	bf00      	nop
  }

  if (err != 0U)
 800c1c6:	7afb      	ldrb	r3, [r7, #11]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d11e      	bne.n	800c20a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	88db      	ldrh	r3, [r3, #6]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d016      	beq.n	800c202 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c1d4:	893b      	ldrh	r3, [r7, #8]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d00e      	beq.n	800c1f8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	88da      	ldrh	r2, [r3, #6]
 800c1de:	893b      	ldrh	r3, [r7, #8]
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	bf28      	it	cs
 800c1e4:	4613      	movcs	r3, r2
 800c1e6:	b29b      	uxth	r3, r3
 800c1e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c1ea:	893b      	ldrh	r3, [r7, #8]
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	68f9      	ldr	r1, [r7, #12]
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 fa5d 	bl	800c6b0 <USBD_CtlSendData>
 800c1f6:	e009      	b.n	800c20c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c1f8:	6839      	ldr	r1, [r7, #0]
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 f9e7 	bl	800c5ce <USBD_CtlError>
 800c200:	e004      	b.n	800c20c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 faae 	bl	800c764 <USBD_CtlSendStatus>
 800c208:	e000      	b.n	800c20c <USBD_GetDescriptor+0x2cc>
    return;
 800c20a:	bf00      	nop
  }
}
 800c20c:	3710      	adds	r7, #16
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop

0800c214 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	889b      	ldrh	r3, [r3, #4]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d131      	bne.n	800c28a <USBD_SetAddress+0x76>
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	88db      	ldrh	r3, [r3, #6]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d12d      	bne.n	800c28a <USBD_SetAddress+0x76>
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	885b      	ldrh	r3, [r3, #2]
 800c232:	2b7f      	cmp	r3, #127	; 0x7f
 800c234:	d829      	bhi.n	800c28a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	885b      	ldrh	r3, [r3, #2]
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c240:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	2b03      	cmp	r3, #3
 800c24c:	d104      	bne.n	800c258 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c24e:	6839      	ldr	r1, [r7, #0]
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f000 f9bc 	bl	800c5ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c256:	e01d      	b.n	800c294 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	7bfa      	ldrb	r2, [r7, #15]
 800c25c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c260:	7bfb      	ldrb	r3, [r7, #15]
 800c262:	4619      	mov	r1, r3
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f004 f8eb 	bl	8010440 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 fa7a 	bl	800c764 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c270:	7bfb      	ldrb	r3, [r7, #15]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d004      	beq.n	800c280 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2202      	movs	r2, #2
 800c27a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c27e:	e009      	b.n	800c294 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2201      	movs	r2, #1
 800c284:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c288:	e004      	b.n	800c294 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c28a:	6839      	ldr	r1, [r7, #0]
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 f99e 	bl	800c5ce <USBD_CtlError>
  }
}
 800c292:	bf00      	nop
 800c294:	bf00      	nop
 800c296:	3710      	adds	r7, #16
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	885b      	ldrh	r3, [r3, #2]
 800c2ae:	b2da      	uxtb	r2, r3
 800c2b0:	4b4e      	ldr	r3, [pc, #312]	; (800c3ec <USBD_SetConfig+0x150>)
 800c2b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c2b4:	4b4d      	ldr	r3, [pc, #308]	; (800c3ec <USBD_SetConfig+0x150>)
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	d905      	bls.n	800c2c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c2bc:	6839      	ldr	r1, [r7, #0]
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 f985 	bl	800c5ce <USBD_CtlError>
    return USBD_FAIL;
 800c2c4:	2303      	movs	r3, #3
 800c2c6:	e08c      	b.n	800c3e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2ce:	b2db      	uxtb	r3, r3
 800c2d0:	2b02      	cmp	r3, #2
 800c2d2:	d002      	beq.n	800c2da <USBD_SetConfig+0x3e>
 800c2d4:	2b03      	cmp	r3, #3
 800c2d6:	d029      	beq.n	800c32c <USBD_SetConfig+0x90>
 800c2d8:	e075      	b.n	800c3c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c2da:	4b44      	ldr	r3, [pc, #272]	; (800c3ec <USBD_SetConfig+0x150>)
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d020      	beq.n	800c324 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c2e2:	4b42      	ldr	r3, [pc, #264]	; (800c3ec <USBD_SetConfig+0x150>)
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c2ec:	4b3f      	ldr	r3, [pc, #252]	; (800c3ec <USBD_SetConfig+0x150>)
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f7fe ffe7 	bl	800b2c6 <USBD_SetClassConfig>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c2fc:	7bfb      	ldrb	r3, [r7, #15]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d008      	beq.n	800c314 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c302:	6839      	ldr	r1, [r7, #0]
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 f962 	bl	800c5ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2202      	movs	r2, #2
 800c30e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c312:	e065      	b.n	800c3e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 fa25 	bl	800c764 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2203      	movs	r2, #3
 800c31e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c322:	e05d      	b.n	800c3e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f000 fa1d 	bl	800c764 <USBD_CtlSendStatus>
      break;
 800c32a:	e059      	b.n	800c3e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c32c:	4b2f      	ldr	r3, [pc, #188]	; (800c3ec <USBD_SetConfig+0x150>)
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d112      	bne.n	800c35a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2202      	movs	r2, #2
 800c338:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c33c:	4b2b      	ldr	r3, [pc, #172]	; (800c3ec <USBD_SetConfig+0x150>)
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	461a      	mov	r2, r3
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c346:	4b29      	ldr	r3, [pc, #164]	; (800c3ec <USBD_SetConfig+0x150>)
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	4619      	mov	r1, r3
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f7fe ffd6 	bl	800b2fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 fa06 	bl	800c764 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c358:	e042      	b.n	800c3e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c35a:	4b24      	ldr	r3, [pc, #144]	; (800c3ec <USBD_SetConfig+0x150>)
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	461a      	mov	r2, r3
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	429a      	cmp	r2, r3
 800c366:	d02a      	beq.n	800c3be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	685b      	ldr	r3, [r3, #4]
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	4619      	mov	r1, r3
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f7fe ffc4 	bl	800b2fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c376:	4b1d      	ldr	r3, [pc, #116]	; (800c3ec <USBD_SetConfig+0x150>)
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	461a      	mov	r2, r3
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c380:	4b1a      	ldr	r3, [pc, #104]	; (800c3ec <USBD_SetConfig+0x150>)
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	4619      	mov	r1, r3
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f7fe ff9d 	bl	800b2c6 <USBD_SetClassConfig>
 800c38c:	4603      	mov	r3, r0
 800c38e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c390:	7bfb      	ldrb	r3, [r7, #15]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d00f      	beq.n	800c3b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c396:	6839      	ldr	r1, [r7, #0]
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 f918 	bl	800c5ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f7fe ffa9 	bl	800b2fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2202      	movs	r2, #2
 800c3b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c3b4:	e014      	b.n	800c3e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 f9d4 	bl	800c764 <USBD_CtlSendStatus>
      break;
 800c3bc:	e010      	b.n	800c3e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 f9d0 	bl	800c764 <USBD_CtlSendStatus>
      break;
 800c3c4:	e00c      	b.n	800c3e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c3c6:	6839      	ldr	r1, [r7, #0]
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 f900 	bl	800c5ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c3ce:	4b07      	ldr	r3, [pc, #28]	; (800c3ec <USBD_SetConfig+0x150>)
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f7fe ff92 	bl	800b2fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c3da:	2303      	movs	r3, #3
 800c3dc:	73fb      	strb	r3, [r7, #15]
      break;
 800c3de:	bf00      	nop
  }

  return ret;
 800c3e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3710      	adds	r7, #16
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	20000904 	.word	0x20000904

0800c3f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b082      	sub	sp, #8
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	88db      	ldrh	r3, [r3, #6]
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	d004      	beq.n	800c40c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c402:	6839      	ldr	r1, [r7, #0]
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 f8e2 	bl	800c5ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c40a:	e023      	b.n	800c454 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c412:	b2db      	uxtb	r3, r3
 800c414:	2b02      	cmp	r3, #2
 800c416:	dc02      	bgt.n	800c41e <USBD_GetConfig+0x2e>
 800c418:	2b00      	cmp	r3, #0
 800c41a:	dc03      	bgt.n	800c424 <USBD_GetConfig+0x34>
 800c41c:	e015      	b.n	800c44a <USBD_GetConfig+0x5a>
 800c41e:	2b03      	cmp	r3, #3
 800c420:	d00b      	beq.n	800c43a <USBD_GetConfig+0x4a>
 800c422:	e012      	b.n	800c44a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2200      	movs	r2, #0
 800c428:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	3308      	adds	r3, #8
 800c42e:	2201      	movs	r2, #1
 800c430:	4619      	mov	r1, r3
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f000 f93c 	bl	800c6b0 <USBD_CtlSendData>
        break;
 800c438:	e00c      	b.n	800c454 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	3304      	adds	r3, #4
 800c43e:	2201      	movs	r2, #1
 800c440:	4619      	mov	r1, r3
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f000 f934 	bl	800c6b0 <USBD_CtlSendData>
        break;
 800c448:	e004      	b.n	800c454 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c44a:	6839      	ldr	r1, [r7, #0]
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 f8be 	bl	800c5ce <USBD_CtlError>
        break;
 800c452:	bf00      	nop
}
 800c454:	bf00      	nop
 800c456:	3708      	adds	r7, #8
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	3b01      	subs	r3, #1
 800c470:	2b02      	cmp	r3, #2
 800c472:	d81e      	bhi.n	800c4b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	88db      	ldrh	r3, [r3, #6]
 800c478:	2b02      	cmp	r3, #2
 800c47a:	d004      	beq.n	800c486 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c47c:	6839      	ldr	r1, [r7, #0]
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f000 f8a5 	bl	800c5ce <USBD_CtlError>
        break;
 800c484:	e01a      	b.n	800c4bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2201      	movs	r2, #1
 800c48a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c492:	2b00      	cmp	r3, #0
 800c494:	d005      	beq.n	800c4a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	f043 0202 	orr.w	r2, r3, #2
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	330c      	adds	r3, #12
 800c4a6:	2202      	movs	r2, #2
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 f900 	bl	800c6b0 <USBD_CtlSendData>
      break;
 800c4b0:	e004      	b.n	800c4bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c4b2:	6839      	ldr	r1, [r7, #0]
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f000 f88a 	bl	800c5ce <USBD_CtlError>
      break;
 800c4ba:	bf00      	nop
  }
}
 800c4bc:	bf00      	nop
 800c4be:	3708      	adds	r7, #8
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	885b      	ldrh	r3, [r3, #2]
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d107      	bne.n	800c4e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2201      	movs	r2, #1
 800c4da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 f940 	bl	800c764 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c4e4:	e013      	b.n	800c50e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	885b      	ldrh	r3, [r3, #2]
 800c4ea:	2b02      	cmp	r3, #2
 800c4ec:	d10b      	bne.n	800c506 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	889b      	ldrh	r3, [r3, #4]
 800c4f2:	0a1b      	lsrs	r3, r3, #8
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	b2da      	uxtb	r2, r3
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 f930 	bl	800c764 <USBD_CtlSendStatus>
}
 800c504:	e003      	b.n	800c50e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c506:	6839      	ldr	r1, [r7, #0]
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f000 f860 	bl	800c5ce <USBD_CtlError>
}
 800c50e:	bf00      	nop
 800c510:	3708      	adds	r7, #8
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}

0800c516 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c516:	b580      	push	{r7, lr}
 800c518:	b082      	sub	sp, #8
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
 800c51e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c526:	b2db      	uxtb	r3, r3
 800c528:	3b01      	subs	r3, #1
 800c52a:	2b02      	cmp	r3, #2
 800c52c:	d80b      	bhi.n	800c546 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	885b      	ldrh	r3, [r3, #2]
 800c532:	2b01      	cmp	r3, #1
 800c534:	d10c      	bne.n	800c550 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2200      	movs	r2, #0
 800c53a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 f910 	bl	800c764 <USBD_CtlSendStatus>
      }
      break;
 800c544:	e004      	b.n	800c550 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c546:	6839      	ldr	r1, [r7, #0]
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f000 f840 	bl	800c5ce <USBD_CtlError>
      break;
 800c54e:	e000      	b.n	800c552 <USBD_ClrFeature+0x3c>
      break;
 800c550:	bf00      	nop
  }
}
 800c552:	bf00      	nop
 800c554:	3708      	adds	r7, #8
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}

0800c55a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c55a:	b580      	push	{r7, lr}
 800c55c:	b084      	sub	sp, #16
 800c55e:	af00      	add	r7, sp, #0
 800c560:	6078      	str	r0, [r7, #4]
 800c562:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	781a      	ldrb	r2, [r3, #0]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	3301      	adds	r3, #1
 800c574:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	781a      	ldrb	r2, [r3, #0]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	3301      	adds	r3, #1
 800c582:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c584:	68f8      	ldr	r0, [r7, #12]
 800c586:	f7ff fa41 	bl	800ba0c <SWAPBYTE>
 800c58a:	4603      	mov	r3, r0
 800c58c:	461a      	mov	r2, r3
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	3301      	adds	r3, #1
 800c596:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	3301      	adds	r3, #1
 800c59c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c59e:	68f8      	ldr	r0, [r7, #12]
 800c5a0:	f7ff fa34 	bl	800ba0c <SWAPBYTE>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c5b8:	68f8      	ldr	r0, [r7, #12]
 800c5ba:	f7ff fa27 	bl	800ba0c <SWAPBYTE>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	80da      	strh	r2, [r3, #6]
}
 800c5c6:	bf00      	nop
 800c5c8:	3710      	adds	r7, #16
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}

0800c5ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5ce:	b580      	push	{r7, lr}
 800c5d0:	b082      	sub	sp, #8
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	6078      	str	r0, [r7, #4]
 800c5d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5d8:	2180      	movs	r1, #128	; 0x80
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f003 fec6 	bl	801036c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c5e0:	2100      	movs	r1, #0
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f003 fec2 	bl	801036c <USBD_LL_StallEP>
}
 800c5e8:	bf00      	nop
 800c5ea:	3708      	adds	r7, #8
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b086      	sub	sp, #24
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d036      	beq.n	800c674 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c60a:	6938      	ldr	r0, [r7, #16]
 800c60c:	f000 f836 	bl	800c67c <USBD_GetLen>
 800c610:	4603      	mov	r3, r0
 800c612:	3301      	adds	r3, #1
 800c614:	b29b      	uxth	r3, r3
 800c616:	005b      	lsls	r3, r3, #1
 800c618:	b29a      	uxth	r2, r3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c61e:	7dfb      	ldrb	r3, [r7, #23]
 800c620:	68ba      	ldr	r2, [r7, #8]
 800c622:	4413      	add	r3, r2
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	7812      	ldrb	r2, [r2, #0]
 800c628:	701a      	strb	r2, [r3, #0]
  idx++;
 800c62a:	7dfb      	ldrb	r3, [r7, #23]
 800c62c:	3301      	adds	r3, #1
 800c62e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c630:	7dfb      	ldrb	r3, [r7, #23]
 800c632:	68ba      	ldr	r2, [r7, #8]
 800c634:	4413      	add	r3, r2
 800c636:	2203      	movs	r2, #3
 800c638:	701a      	strb	r2, [r3, #0]
  idx++;
 800c63a:	7dfb      	ldrb	r3, [r7, #23]
 800c63c:	3301      	adds	r3, #1
 800c63e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c640:	e013      	b.n	800c66a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c642:	7dfb      	ldrb	r3, [r7, #23]
 800c644:	68ba      	ldr	r2, [r7, #8]
 800c646:	4413      	add	r3, r2
 800c648:	693a      	ldr	r2, [r7, #16]
 800c64a:	7812      	ldrb	r2, [r2, #0]
 800c64c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	3301      	adds	r3, #1
 800c652:	613b      	str	r3, [r7, #16]
    idx++;
 800c654:	7dfb      	ldrb	r3, [r7, #23]
 800c656:	3301      	adds	r3, #1
 800c658:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c65a:	7dfb      	ldrb	r3, [r7, #23]
 800c65c:	68ba      	ldr	r2, [r7, #8]
 800c65e:	4413      	add	r3, r2
 800c660:	2200      	movs	r2, #0
 800c662:	701a      	strb	r2, [r3, #0]
    idx++;
 800c664:	7dfb      	ldrb	r3, [r7, #23]
 800c666:	3301      	adds	r3, #1
 800c668:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	781b      	ldrb	r3, [r3, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d1e7      	bne.n	800c642 <USBD_GetString+0x52>
 800c672:	e000      	b.n	800c676 <USBD_GetString+0x86>
    return;
 800c674:	bf00      	nop
  }
}
 800c676:	3718      	adds	r7, #24
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c684:	2300      	movs	r3, #0
 800c686:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c68c:	e005      	b.n	800c69a <USBD_GetLen+0x1e>
  {
    len++;
 800c68e:	7bfb      	ldrb	r3, [r7, #15]
 800c690:	3301      	adds	r3, #1
 800c692:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	3301      	adds	r3, #1
 800c698:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1f5      	bne.n	800c68e <USBD_GetLen+0x12>
  }

  return len;
 800c6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3714      	adds	r7, #20
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b084      	sub	sp, #16
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2202      	movs	r2, #2
 800c6c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	68ba      	ldr	r2, [r7, #8]
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	68f8      	ldr	r0, [r7, #12]
 800c6d8:	f003 fed1 	bl	801047e <USBD_LL_Transmit>

  return USBD_OK;
 800c6dc:	2300      	movs	r3, #0
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3710      	adds	r7, #16
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	b084      	sub	sp, #16
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	60f8      	str	r0, [r7, #12]
 800c6ee:	60b9      	str	r1, [r7, #8]
 800c6f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	68ba      	ldr	r2, [r7, #8]
 800c6f6:	2100      	movs	r1, #0
 800c6f8:	68f8      	ldr	r0, [r7, #12]
 800c6fa:	f003 fec0 	bl	801047e <USBD_LL_Transmit>

  return USBD_OK;
 800c6fe:	2300      	movs	r3, #0
}
 800c700:	4618      	mov	r0, r3
 800c702:	3710      	adds	r7, #16
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2203      	movs	r2, #3
 800c718:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	68ba      	ldr	r2, [r7, #8]
 800c730:	2100      	movs	r1, #0
 800c732:	68f8      	ldr	r0, [r7, #12]
 800c734:	f003 fec4 	bl	80104c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c738:	2300      	movs	r3, #0
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}

0800c742 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b084      	sub	sp, #16
 800c746:	af00      	add	r7, sp, #0
 800c748:	60f8      	str	r0, [r7, #12]
 800c74a:	60b9      	str	r1, [r7, #8]
 800c74c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	68ba      	ldr	r2, [r7, #8]
 800c752:	2100      	movs	r1, #0
 800c754:	68f8      	ldr	r0, [r7, #12]
 800c756:	f003 feb3 	bl	80104c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c75a:	2300      	movs	r3, #0
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3710      	adds	r7, #16
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2204      	movs	r2, #4
 800c770:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c774:	2300      	movs	r3, #0
 800c776:	2200      	movs	r2, #0
 800c778:	2100      	movs	r1, #0
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f003 fe7f 	bl	801047e <USBD_LL_Transmit>

  return USBD_OK;
 800c780:	2300      	movs	r3, #0
}
 800c782:	4618      	mov	r0, r3
 800c784:	3708      	adds	r7, #8
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}

0800c78a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c78a:	b580      	push	{r7, lr}
 800c78c:	b082      	sub	sp, #8
 800c78e:	af00      	add	r7, sp, #0
 800c790:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2205      	movs	r2, #5
 800c796:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c79a:	2300      	movs	r3, #0
 800c79c:	2200      	movs	r2, #0
 800c79e:	2100      	movs	r1, #0
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f003 fe8d 	bl	80104c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c7a6:	2300      	movs	r3, #0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <__NVIC_SetPriority>:
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b083      	sub	sp, #12
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	6039      	str	r1, [r7, #0]
 800c7ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c7bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	db0a      	blt.n	800c7da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	b2da      	uxtb	r2, r3
 800c7c8:	490c      	ldr	r1, [pc, #48]	; (800c7fc <__NVIC_SetPriority+0x4c>)
 800c7ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7ce:	0112      	lsls	r2, r2, #4
 800c7d0:	b2d2      	uxtb	r2, r2
 800c7d2:	440b      	add	r3, r1
 800c7d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c7d8:	e00a      	b.n	800c7f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	b2da      	uxtb	r2, r3
 800c7de:	4908      	ldr	r1, [pc, #32]	; (800c800 <__NVIC_SetPriority+0x50>)
 800c7e0:	79fb      	ldrb	r3, [r7, #7]
 800c7e2:	f003 030f 	and.w	r3, r3, #15
 800c7e6:	3b04      	subs	r3, #4
 800c7e8:	0112      	lsls	r2, r2, #4
 800c7ea:	b2d2      	uxtb	r2, r2
 800c7ec:	440b      	add	r3, r1
 800c7ee:	761a      	strb	r2, [r3, #24]
}
 800c7f0:	bf00      	nop
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr
 800c7fc:	e000e100 	.word	0xe000e100
 800c800:	e000ed00 	.word	0xe000ed00

0800c804 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c804:	b580      	push	{r7, lr}
 800c806:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c808:	4b05      	ldr	r3, [pc, #20]	; (800c820 <SysTick_Handler+0x1c>)
 800c80a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c80c:	f002 f85a 	bl	800e8c4 <xTaskGetSchedulerState>
 800c810:	4603      	mov	r3, r0
 800c812:	2b01      	cmp	r3, #1
 800c814:	d001      	beq.n	800c81a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c816:	f002 ff3f 	bl	800f698 <xPortSysTickHandler>
  }
}
 800c81a:	bf00      	nop
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	bf00      	nop
 800c820:	e000e010 	.word	0xe000e010

0800c824 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c824:	b580      	push	{r7, lr}
 800c826:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c828:	2100      	movs	r1, #0
 800c82a:	f06f 0004 	mvn.w	r0, #4
 800c82e:	f7ff ffbf 	bl	800c7b0 <__NVIC_SetPriority>
#endif
}
 800c832:	bf00      	nop
 800c834:	bd80      	pop	{r7, pc}
	...

0800c838 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c83e:	f3ef 8305 	mrs	r3, IPSR
 800c842:	603b      	str	r3, [r7, #0]
  return(result);
 800c844:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c846:	2b00      	cmp	r3, #0
 800c848:	d003      	beq.n	800c852 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c84a:	f06f 0305 	mvn.w	r3, #5
 800c84e:	607b      	str	r3, [r7, #4]
 800c850:	e00c      	b.n	800c86c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c852:	4b0a      	ldr	r3, [pc, #40]	; (800c87c <osKernelInitialize+0x44>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d105      	bne.n	800c866 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c85a:	4b08      	ldr	r3, [pc, #32]	; (800c87c <osKernelInitialize+0x44>)
 800c85c:	2201      	movs	r2, #1
 800c85e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c860:	2300      	movs	r3, #0
 800c862:	607b      	str	r3, [r7, #4]
 800c864:	e002      	b.n	800c86c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c866:	f04f 33ff 	mov.w	r3, #4294967295
 800c86a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c86c:	687b      	ldr	r3, [r7, #4]
}
 800c86e:	4618      	mov	r0, r3
 800c870:	370c      	adds	r7, #12
 800c872:	46bd      	mov	sp, r7
 800c874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c878:	4770      	bx	lr
 800c87a:	bf00      	nop
 800c87c:	20000908 	.word	0x20000908

0800c880 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c886:	f3ef 8305 	mrs	r3, IPSR
 800c88a:	603b      	str	r3, [r7, #0]
  return(result);
 800c88c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d003      	beq.n	800c89a <osKernelStart+0x1a>
    stat = osErrorISR;
 800c892:	f06f 0305 	mvn.w	r3, #5
 800c896:	607b      	str	r3, [r7, #4]
 800c898:	e010      	b.n	800c8bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c89a:	4b0b      	ldr	r3, [pc, #44]	; (800c8c8 <osKernelStart+0x48>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d109      	bne.n	800c8b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c8a2:	f7ff ffbf 	bl	800c824 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c8a6:	4b08      	ldr	r3, [pc, #32]	; (800c8c8 <osKernelStart+0x48>)
 800c8a8:	2202      	movs	r2, #2
 800c8aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c8ac:	f001 fb9e 	bl	800dfec <vTaskStartScheduler>
      stat = osOK;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	607b      	str	r3, [r7, #4]
 800c8b4:	e002      	b.n	800c8bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c8b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c8ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c8bc:	687b      	ldr	r3, [r7, #4]
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3708      	adds	r7, #8
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	20000908 	.word	0x20000908

0800c8cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b08e      	sub	sp, #56	; 0x38
 800c8d0:	af04      	add	r7, sp, #16
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8dc:	f3ef 8305 	mrs	r3, IPSR
 800c8e0:	617b      	str	r3, [r7, #20]
  return(result);
 800c8e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d17e      	bne.n	800c9e6 <osThreadNew+0x11a>
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d07b      	beq.n	800c9e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c8ee:	2380      	movs	r3, #128	; 0x80
 800c8f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c8f2:	2318      	movs	r3, #24
 800c8f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c8fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c8fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d045      	beq.n	800c992 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d002      	beq.n	800c914 <osThreadNew+0x48>
        name = attr->name;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	699b      	ldr	r3, [r3, #24]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d002      	beq.n	800c922 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	699b      	ldr	r3, [r3, #24]
 800c920:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c922:	69fb      	ldr	r3, [r7, #28]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d008      	beq.n	800c93a <osThreadNew+0x6e>
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	2b38      	cmp	r3, #56	; 0x38
 800c92c:	d805      	bhi.n	800c93a <osThreadNew+0x6e>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	685b      	ldr	r3, [r3, #4]
 800c932:	f003 0301 	and.w	r3, r3, #1
 800c936:	2b00      	cmp	r3, #0
 800c938:	d001      	beq.n	800c93e <osThreadNew+0x72>
        return (NULL);
 800c93a:	2300      	movs	r3, #0
 800c93c:	e054      	b.n	800c9e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	695b      	ldr	r3, [r3, #20]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d003      	beq.n	800c94e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	695b      	ldr	r3, [r3, #20]
 800c94a:	089b      	lsrs	r3, r3, #2
 800c94c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	689b      	ldr	r3, [r3, #8]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d00e      	beq.n	800c974 <osThreadNew+0xa8>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	68db      	ldr	r3, [r3, #12]
 800c95a:	2bbb      	cmp	r3, #187	; 0xbb
 800c95c:	d90a      	bls.n	800c974 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c962:	2b00      	cmp	r3, #0
 800c964:	d006      	beq.n	800c974 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	695b      	ldr	r3, [r3, #20]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d002      	beq.n	800c974 <osThreadNew+0xa8>
        mem = 1;
 800c96e:	2301      	movs	r3, #1
 800c970:	61bb      	str	r3, [r7, #24]
 800c972:	e010      	b.n	800c996 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d10c      	bne.n	800c996 <osThreadNew+0xca>
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d108      	bne.n	800c996 <osThreadNew+0xca>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	691b      	ldr	r3, [r3, #16]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d104      	bne.n	800c996 <osThreadNew+0xca>
          mem = 0;
 800c98c:	2300      	movs	r3, #0
 800c98e:	61bb      	str	r3, [r7, #24]
 800c990:	e001      	b.n	800c996 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c992:	2300      	movs	r3, #0
 800c994:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	2b01      	cmp	r3, #1
 800c99a:	d110      	bne.n	800c9be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c9a4:	9202      	str	r2, [sp, #8]
 800c9a6:	9301      	str	r3, [sp, #4]
 800c9a8:	69fb      	ldr	r3, [r7, #28]
 800c9aa:	9300      	str	r3, [sp, #0]
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	6a3a      	ldr	r2, [r7, #32]
 800c9b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c9b2:	68f8      	ldr	r0, [r7, #12]
 800c9b4:	f001 f92e 	bl	800dc14 <xTaskCreateStatic>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	613b      	str	r3, [r7, #16]
 800c9bc:	e013      	b.n	800c9e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c9be:	69bb      	ldr	r3, [r7, #24]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d110      	bne.n	800c9e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c9c4:	6a3b      	ldr	r3, [r7, #32]
 800c9c6:	b29a      	uxth	r2, r3
 800c9c8:	f107 0310 	add.w	r3, r7, #16
 800c9cc:	9301      	str	r3, [sp, #4]
 800c9ce:	69fb      	ldr	r3, [r7, #28]
 800c9d0:	9300      	str	r3, [sp, #0]
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c9d6:	68f8      	ldr	r0, [r7, #12]
 800c9d8:	f001 f979 	bl	800dcce <xTaskCreate>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d001      	beq.n	800c9e6 <osThreadNew+0x11a>
            hTask = NULL;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c9e6:	693b      	ldr	r3, [r7, #16]
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3728      	adds	r7, #40	; 0x28
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9f8:	f3ef 8305 	mrs	r3, IPSR
 800c9fc:	60bb      	str	r3, [r7, #8]
  return(result);
 800c9fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d003      	beq.n	800ca0c <osDelay+0x1c>
    stat = osErrorISR;
 800ca04:	f06f 0305 	mvn.w	r3, #5
 800ca08:	60fb      	str	r3, [r7, #12]
 800ca0a:	e007      	b.n	800ca1c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d002      	beq.n	800ca1c <osDelay+0x2c>
      vTaskDelay(ticks);
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f001 fab4 	bl	800df84 <vTaskDelay>
    }
  }

  return (stat);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3710      	adds	r7, #16
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}

0800ca26 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ca26:	b580      	push	{r7, lr}
 800ca28:	b088      	sub	sp, #32
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca32:	f3ef 8305 	mrs	r3, IPSR
 800ca36:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca38:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d174      	bne.n	800cb28 <osMutexNew+0x102>
    if (attr != NULL) {
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d003      	beq.n	800ca4c <osMutexNew+0x26>
      type = attr->attr_bits;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	61bb      	str	r3, [r7, #24]
 800ca4a:	e001      	b.n	800ca50 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ca50:	69bb      	ldr	r3, [r7, #24]
 800ca52:	f003 0301 	and.w	r3, r3, #1
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d002      	beq.n	800ca60 <osMutexNew+0x3a>
      rmtx = 1U;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	617b      	str	r3, [r7, #20]
 800ca5e:	e001      	b.n	800ca64 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800ca60:	2300      	movs	r3, #0
 800ca62:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ca64:	69bb      	ldr	r3, [r7, #24]
 800ca66:	f003 0308 	and.w	r3, r3, #8
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d15c      	bne.n	800cb28 <osMutexNew+0x102>
      mem = -1;
 800ca6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ca72:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d015      	beq.n	800caa6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	689b      	ldr	r3, [r3, #8]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d006      	beq.n	800ca90 <osMutexNew+0x6a>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	68db      	ldr	r3, [r3, #12]
 800ca86:	2b4f      	cmp	r3, #79	; 0x4f
 800ca88:	d902      	bls.n	800ca90 <osMutexNew+0x6a>
          mem = 1;
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	613b      	str	r3, [r7, #16]
 800ca8e:	e00c      	b.n	800caaa <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d108      	bne.n	800caaa <osMutexNew+0x84>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	68db      	ldr	r3, [r3, #12]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d104      	bne.n	800caaa <osMutexNew+0x84>
            mem = 0;
 800caa0:	2300      	movs	r3, #0
 800caa2:	613b      	str	r3, [r7, #16]
 800caa4:	e001      	b.n	800caaa <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800caa6:	2300      	movs	r3, #0
 800caa8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800caaa:	693b      	ldr	r3, [r7, #16]
 800caac:	2b01      	cmp	r3, #1
 800caae:	d112      	bne.n	800cad6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d007      	beq.n	800cac6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	689b      	ldr	r3, [r3, #8]
 800caba:	4619      	mov	r1, r3
 800cabc:	2004      	movs	r0, #4
 800cabe:	f000 fb18 	bl	800d0f2 <xQueueCreateMutexStatic>
 800cac2:	61f8      	str	r0, [r7, #28]
 800cac4:	e016      	b.n	800caf4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	689b      	ldr	r3, [r3, #8]
 800caca:	4619      	mov	r1, r3
 800cacc:	2001      	movs	r0, #1
 800cace:	f000 fb10 	bl	800d0f2 <xQueueCreateMutexStatic>
 800cad2:	61f8      	str	r0, [r7, #28]
 800cad4:	e00e      	b.n	800caf4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d10b      	bne.n	800caf4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d004      	beq.n	800caec <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800cae2:	2004      	movs	r0, #4
 800cae4:	f000 faed 	bl	800d0c2 <xQueueCreateMutex>
 800cae8:	61f8      	str	r0, [r7, #28]
 800caea:	e003      	b.n	800caf4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800caec:	2001      	movs	r0, #1
 800caee:	f000 fae8 	bl	800d0c2 <xQueueCreateMutex>
 800caf2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800caf4:	69fb      	ldr	r3, [r7, #28]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d00c      	beq.n	800cb14 <osMutexNew+0xee>
        if (attr != NULL) {
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d003      	beq.n	800cb08 <osMutexNew+0xe2>
          name = attr->name;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	60fb      	str	r3, [r7, #12]
 800cb06:	e001      	b.n	800cb0c <osMutexNew+0xe6>
        } else {
          name = NULL;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800cb0c:	68f9      	ldr	r1, [r7, #12]
 800cb0e:	69f8      	ldr	r0, [r7, #28]
 800cb10:	f001 f822 	bl	800db58 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d006      	beq.n	800cb28 <osMutexNew+0x102>
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d003      	beq.n	800cb28 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800cb20:	69fb      	ldr	r3, [r7, #28]
 800cb22:	f043 0301 	orr.w	r3, r3, #1
 800cb26:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800cb28:	69fb      	ldr	r3, [r7, #28]
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3720      	adds	r7, #32
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b086      	sub	sp, #24
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
 800cb3a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f023 0301 	bic.w	r3, r3, #1
 800cb42:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f003 0301 	and.w	r3, r3, #1
 800cb4a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb50:	f3ef 8305 	mrs	r3, IPSR
 800cb54:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb56:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d003      	beq.n	800cb64 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800cb5c:	f06f 0305 	mvn.w	r3, #5
 800cb60:	617b      	str	r3, [r7, #20]
 800cb62:	e02c      	b.n	800cbbe <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d103      	bne.n	800cb72 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800cb6a:	f06f 0303 	mvn.w	r3, #3
 800cb6e:	617b      	str	r3, [r7, #20]
 800cb70:	e025      	b.n	800cbbe <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d011      	beq.n	800cb9c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800cb78:	6839      	ldr	r1, [r7, #0]
 800cb7a:	6938      	ldr	r0, [r7, #16]
 800cb7c:	f000 fb08 	bl	800d190 <xQueueTakeMutexRecursive>
 800cb80:	4603      	mov	r3, r0
 800cb82:	2b01      	cmp	r3, #1
 800cb84:	d01b      	beq.n	800cbbe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d003      	beq.n	800cb94 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800cb8c:	f06f 0301 	mvn.w	r3, #1
 800cb90:	617b      	str	r3, [r7, #20]
 800cb92:	e014      	b.n	800cbbe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800cb94:	f06f 0302 	mvn.w	r3, #2
 800cb98:	617b      	str	r3, [r7, #20]
 800cb9a:	e010      	b.n	800cbbe <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800cb9c:	6839      	ldr	r1, [r7, #0]
 800cb9e:	6938      	ldr	r0, [r7, #16]
 800cba0:	f000 fda6 	bl	800d6f0 <xQueueSemaphoreTake>
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	d009      	beq.n	800cbbe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d003      	beq.n	800cbb8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800cbb0:	f06f 0301 	mvn.w	r3, #1
 800cbb4:	617b      	str	r3, [r7, #20]
 800cbb6:	e002      	b.n	800cbbe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800cbb8:	f06f 0302 	mvn.w	r3, #2
 800cbbc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800cbbe:	697b      	ldr	r3, [r7, #20]
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3718      	adds	r7, #24
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b086      	sub	sp, #24
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f023 0301 	bic.w	r3, r3, #1
 800cbd6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f003 0301 	and.w	r3, r3, #1
 800cbde:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbe4:	f3ef 8305 	mrs	r3, IPSR
 800cbe8:	60bb      	str	r3, [r7, #8]
  return(result);
 800cbea:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d003      	beq.n	800cbf8 <osMutexRelease+0x30>
    stat = osErrorISR;
 800cbf0:	f06f 0305 	mvn.w	r3, #5
 800cbf4:	617b      	str	r3, [r7, #20]
 800cbf6:	e01f      	b.n	800cc38 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d103      	bne.n	800cc06 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800cbfe:	f06f 0303 	mvn.w	r3, #3
 800cc02:	617b      	str	r3, [r7, #20]
 800cc04:	e018      	b.n	800cc38 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d009      	beq.n	800cc20 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800cc0c:	6938      	ldr	r0, [r7, #16]
 800cc0e:	f000 fa8b 	bl	800d128 <xQueueGiveMutexRecursive>
 800cc12:	4603      	mov	r3, r0
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	d00f      	beq.n	800cc38 <osMutexRelease+0x70>
        stat = osErrorResource;
 800cc18:	f06f 0302 	mvn.w	r3, #2
 800cc1c:	617b      	str	r3, [r7, #20]
 800cc1e:	e00b      	b.n	800cc38 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800cc20:	2300      	movs	r3, #0
 800cc22:	2200      	movs	r2, #0
 800cc24:	2100      	movs	r1, #0
 800cc26:	6938      	ldr	r0, [r7, #16]
 800cc28:	f000 fae8 	bl	800d1fc <xQueueGenericSend>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	2b01      	cmp	r3, #1
 800cc30:	d002      	beq.n	800cc38 <osMutexRelease+0x70>
        stat = osErrorResource;
 800cc32:	f06f 0302 	mvn.w	r3, #2
 800cc36:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800cc38:	697b      	ldr	r3, [r7, #20]
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3718      	adds	r7, #24
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
	...

0800cc44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cc44:	b480      	push	{r7}
 800cc46:	b085      	sub	sp, #20
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	60b9      	str	r1, [r7, #8]
 800cc4e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	4a07      	ldr	r2, [pc, #28]	; (800cc70 <vApplicationGetIdleTaskMemory+0x2c>)
 800cc54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	4a06      	ldr	r2, [pc, #24]	; (800cc74 <vApplicationGetIdleTaskMemory+0x30>)
 800cc5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2280      	movs	r2, #128	; 0x80
 800cc60:	601a      	str	r2, [r3, #0]
}
 800cc62:	bf00      	nop
 800cc64:	3714      	adds	r7, #20
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr
 800cc6e:	bf00      	nop
 800cc70:	2000090c 	.word	0x2000090c
 800cc74:	200009c8 	.word	0x200009c8

0800cc78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cc78:	b480      	push	{r7}
 800cc7a:	b085      	sub	sp, #20
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	4a07      	ldr	r2, [pc, #28]	; (800cca4 <vApplicationGetTimerTaskMemory+0x2c>)
 800cc88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	4a06      	ldr	r2, [pc, #24]	; (800cca8 <vApplicationGetTimerTaskMemory+0x30>)
 800cc8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc96:	601a      	str	r2, [r3, #0]
}
 800cc98:	bf00      	nop
 800cc9a:	3714      	adds	r7, #20
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr
 800cca4:	20000bc8 	.word	0x20000bc8
 800cca8:	20000c84 	.word	0x20000c84

0800ccac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ccac:	b480      	push	{r7}
 800ccae:	b083      	sub	sp, #12
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f103 0208 	add.w	r2, r3, #8
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f04f 32ff 	mov.w	r2, #4294967295
 800ccc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f103 0208 	add.w	r2, r3, #8
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f103 0208 	add.w	r2, r3, #8
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cce0:	bf00      	nop
 800cce2:	370c      	adds	r7, #12
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr

0800ccec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ccec:	b480      	push	{r7}
 800ccee:	b083      	sub	sp, #12
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ccfa:	bf00      	nop
 800ccfc:	370c      	adds	r7, #12
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd04:	4770      	bx	lr

0800cd06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd06:	b480      	push	{r7}
 800cd08:	b085      	sub	sp, #20
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6078      	str	r0, [r7, #4]
 800cd0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	68fa      	ldr	r2, [r7, #12]
 800cd1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	689a      	ldr	r2, [r3, #8]
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	689b      	ldr	r3, [r3, #8]
 800cd28:	683a      	ldr	r2, [r7, #0]
 800cd2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	683a      	ldr	r2, [r7, #0]
 800cd30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	1c5a      	adds	r2, r3, #1
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	601a      	str	r2, [r3, #0]
}
 800cd42:	bf00      	nop
 800cd44:	3714      	adds	r7, #20
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr

0800cd4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd4e:	b480      	push	{r7}
 800cd50:	b085      	sub	sp, #20
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6078      	str	r0, [r7, #4]
 800cd56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd64:	d103      	bne.n	800cd6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	691b      	ldr	r3, [r3, #16]
 800cd6a:	60fb      	str	r3, [r7, #12]
 800cd6c:	e00c      	b.n	800cd88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	3308      	adds	r3, #8
 800cd72:	60fb      	str	r3, [r7, #12]
 800cd74:	e002      	b.n	800cd7c <vListInsert+0x2e>
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	60fb      	str	r3, [r7, #12]
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	685b      	ldr	r3, [r3, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	68ba      	ldr	r2, [r7, #8]
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d2f6      	bcs.n	800cd76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	685a      	ldr	r2, [r3, #4]
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	683a      	ldr	r2, [r7, #0]
 800cd96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	68fa      	ldr	r2, [r7, #12]
 800cd9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	683a      	ldr	r2, [r7, #0]
 800cda2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	687a      	ldr	r2, [r7, #4]
 800cda8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	1c5a      	adds	r2, r3, #1
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	601a      	str	r2, [r3, #0]
}
 800cdb4:	bf00      	nop
 800cdb6:	3714      	adds	r7, #20
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	691b      	ldr	r3, [r3, #16]
 800cdcc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	6892      	ldr	r2, [r2, #8]
 800cdd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	689b      	ldr	r3, [r3, #8]
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	6852      	ldr	r2, [r2, #4]
 800cde0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d103      	bne.n	800cdf4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	689a      	ldr	r2, [r3, #8]
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	1e5a      	subs	r2, r3, #1
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3714      	adds	r7, #20
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr

0800ce14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b084      	sub	sp, #16
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d10a      	bne.n	800ce3e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ce28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce2c:	f383 8811 	msr	BASEPRI, r3
 800ce30:	f3bf 8f6f 	isb	sy
 800ce34:	f3bf 8f4f 	dsb	sy
 800ce38:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ce3a:	bf00      	nop
 800ce3c:	e7fe      	b.n	800ce3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ce3e:	f002 fb99 	bl	800f574 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	681a      	ldr	r2, [r3, #0]
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce4a:	68f9      	ldr	r1, [r7, #12]
 800ce4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce4e:	fb01 f303 	mul.w	r3, r1, r3
 800ce52:	441a      	add	r2, r3
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681a      	ldr	r2, [r3, #0]
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce6e:	3b01      	subs	r3, #1
 800ce70:	68f9      	ldr	r1, [r7, #12]
 800ce72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce74:	fb01 f303 	mul.w	r3, r1, r3
 800ce78:	441a      	add	r2, r3
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	22ff      	movs	r2, #255	; 0xff
 800ce82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	22ff      	movs	r2, #255	; 0xff
 800ce8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d114      	bne.n	800cebe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	691b      	ldr	r3, [r3, #16]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d01a      	beq.n	800ced2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	3310      	adds	r3, #16
 800cea0:	4618      	mov	r0, r3
 800cea2:	f001 fb3d 	bl	800e520 <xTaskRemoveFromEventList>
 800cea6:	4603      	mov	r3, r0
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d012      	beq.n	800ced2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ceac:	4b0c      	ldr	r3, [pc, #48]	; (800cee0 <xQueueGenericReset+0xcc>)
 800ceae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceb2:	601a      	str	r2, [r3, #0]
 800ceb4:	f3bf 8f4f 	dsb	sy
 800ceb8:	f3bf 8f6f 	isb	sy
 800cebc:	e009      	b.n	800ced2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	3310      	adds	r3, #16
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7ff fef2 	bl	800ccac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	3324      	adds	r3, #36	; 0x24
 800cecc:	4618      	mov	r0, r3
 800cece:	f7ff feed 	bl	800ccac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ced2:	f002 fb7f 	bl	800f5d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ced6:	2301      	movs	r3, #1
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3710      	adds	r7, #16
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}
 800cee0:	e000ed04 	.word	0xe000ed04

0800cee4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b08e      	sub	sp, #56	; 0x38
 800cee8:	af02      	add	r7, sp, #8
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	607a      	str	r2, [r7, #4]
 800cef0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d10a      	bne.n	800cf0e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefc:	f383 8811 	msr	BASEPRI, r3
 800cf00:	f3bf 8f6f 	isb	sy
 800cf04:	f3bf 8f4f 	dsb	sy
 800cf08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf0a:	bf00      	nop
 800cf0c:	e7fe      	b.n	800cf0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d10a      	bne.n	800cf2a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf18:	f383 8811 	msr	BASEPRI, r3
 800cf1c:	f3bf 8f6f 	isb	sy
 800cf20:	f3bf 8f4f 	dsb	sy
 800cf24:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf26:	bf00      	nop
 800cf28:	e7fe      	b.n	800cf28 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d002      	beq.n	800cf36 <xQueueGenericCreateStatic+0x52>
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d001      	beq.n	800cf3a <xQueueGenericCreateStatic+0x56>
 800cf36:	2301      	movs	r3, #1
 800cf38:	e000      	b.n	800cf3c <xQueueGenericCreateStatic+0x58>
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d10a      	bne.n	800cf56 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cf40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf44:	f383 8811 	msr	BASEPRI, r3
 800cf48:	f3bf 8f6f 	isb	sy
 800cf4c:	f3bf 8f4f 	dsb	sy
 800cf50:	623b      	str	r3, [r7, #32]
}
 800cf52:	bf00      	nop
 800cf54:	e7fe      	b.n	800cf54 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d102      	bne.n	800cf62 <xQueueGenericCreateStatic+0x7e>
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d101      	bne.n	800cf66 <xQueueGenericCreateStatic+0x82>
 800cf62:	2301      	movs	r3, #1
 800cf64:	e000      	b.n	800cf68 <xQueueGenericCreateStatic+0x84>
 800cf66:	2300      	movs	r3, #0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d10a      	bne.n	800cf82 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cf6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf70:	f383 8811 	msr	BASEPRI, r3
 800cf74:	f3bf 8f6f 	isb	sy
 800cf78:	f3bf 8f4f 	dsb	sy
 800cf7c:	61fb      	str	r3, [r7, #28]
}
 800cf7e:	bf00      	nop
 800cf80:	e7fe      	b.n	800cf80 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cf82:	2350      	movs	r3, #80	; 0x50
 800cf84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	2b50      	cmp	r3, #80	; 0x50
 800cf8a:	d00a      	beq.n	800cfa2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf90:	f383 8811 	msr	BASEPRI, r3
 800cf94:	f3bf 8f6f 	isb	sy
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	61bb      	str	r3, [r7, #24]
}
 800cf9e:	bf00      	nop
 800cfa0:	e7fe      	b.n	800cfa0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cfa2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cfa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d00d      	beq.n	800cfca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cfae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb0:	2201      	movs	r2, #1
 800cfb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cfb6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cfba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfbc:	9300      	str	r3, [sp, #0]
 800cfbe:	4613      	mov	r3, r2
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	68b9      	ldr	r1, [r7, #8]
 800cfc4:	68f8      	ldr	r0, [r7, #12]
 800cfc6:	f000 f83f 	bl	800d048 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cfca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	3730      	adds	r7, #48	; 0x30
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b08a      	sub	sp, #40	; 0x28
 800cfd8:	af02      	add	r7, sp, #8
 800cfda:	60f8      	str	r0, [r7, #12]
 800cfdc:	60b9      	str	r1, [r7, #8]
 800cfde:	4613      	mov	r3, r2
 800cfe0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d10a      	bne.n	800cffe <xQueueGenericCreate+0x2a>
	__asm volatile
 800cfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfec:	f383 8811 	msr	BASEPRI, r3
 800cff0:	f3bf 8f6f 	isb	sy
 800cff4:	f3bf 8f4f 	dsb	sy
 800cff8:	613b      	str	r3, [r7, #16]
}
 800cffa:	bf00      	nop
 800cffc:	e7fe      	b.n	800cffc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	68ba      	ldr	r2, [r7, #8]
 800d002:	fb02 f303 	mul.w	r3, r2, r3
 800d006:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d008:	69fb      	ldr	r3, [r7, #28]
 800d00a:	3350      	adds	r3, #80	; 0x50
 800d00c:	4618      	mov	r0, r3
 800d00e:	f002 fbd3 	bl	800f7b8 <pvPortMalloc>
 800d012:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d011      	beq.n	800d03e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d01a:	69bb      	ldr	r3, [r7, #24]
 800d01c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	3350      	adds	r3, #80	; 0x50
 800d022:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d024:	69bb      	ldr	r3, [r7, #24]
 800d026:	2200      	movs	r2, #0
 800d028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d02c:	79fa      	ldrb	r2, [r7, #7]
 800d02e:	69bb      	ldr	r3, [r7, #24]
 800d030:	9300      	str	r3, [sp, #0]
 800d032:	4613      	mov	r3, r2
 800d034:	697a      	ldr	r2, [r7, #20]
 800d036:	68b9      	ldr	r1, [r7, #8]
 800d038:	68f8      	ldr	r0, [r7, #12]
 800d03a:	f000 f805 	bl	800d048 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d03e:	69bb      	ldr	r3, [r7, #24]
	}
 800d040:	4618      	mov	r0, r3
 800d042:	3720      	adds	r7, #32
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	60b9      	str	r1, [r7, #8]
 800d052:	607a      	str	r2, [r7, #4]
 800d054:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d103      	bne.n	800d064 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d05c:	69bb      	ldr	r3, [r7, #24]
 800d05e:	69ba      	ldr	r2, [r7, #24]
 800d060:	601a      	str	r2, [r3, #0]
 800d062:	e002      	b.n	800d06a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d064:	69bb      	ldr	r3, [r7, #24]
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d06a:	69bb      	ldr	r3, [r7, #24]
 800d06c:	68fa      	ldr	r2, [r7, #12]
 800d06e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d070:	69bb      	ldr	r3, [r7, #24]
 800d072:	68ba      	ldr	r2, [r7, #8]
 800d074:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d076:	2101      	movs	r1, #1
 800d078:	69b8      	ldr	r0, [r7, #24]
 800d07a:	f7ff fecb 	bl	800ce14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d07e:	69bb      	ldr	r3, [r7, #24]
 800d080:	78fa      	ldrb	r2, [r7, #3]
 800d082:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d086:	bf00      	nop
 800d088:	3710      	adds	r7, #16
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}

0800d08e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d08e:	b580      	push	{r7, lr}
 800d090:	b082      	sub	sp, #8
 800d092:	af00      	add	r7, sp, #0
 800d094:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d00e      	beq.n	800d0ba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	2100      	movs	r1, #0
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 f8a1 	bl	800d1fc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d0ba:	bf00      	nop
 800d0bc:	3708      	adds	r7, #8
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}

0800d0c2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d0c2:	b580      	push	{r7, lr}
 800d0c4:	b086      	sub	sp, #24
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	617b      	str	r3, [r7, #20]
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d0d4:	79fb      	ldrb	r3, [r7, #7]
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	6939      	ldr	r1, [r7, #16]
 800d0da:	6978      	ldr	r0, [r7, #20]
 800d0dc:	f7ff ff7a 	bl	800cfd4 <xQueueGenericCreate>
 800d0e0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d0e2:	68f8      	ldr	r0, [r7, #12]
 800d0e4:	f7ff ffd3 	bl	800d08e <prvInitialiseMutex>

		return xNewQueue;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
	}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3718      	adds	r7, #24
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}

0800d0f2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d0f2:	b580      	push	{r7, lr}
 800d0f4:	b088      	sub	sp, #32
 800d0f6:	af02      	add	r7, sp, #8
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	6039      	str	r1, [r7, #0]
 800d0fc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d0fe:	2301      	movs	r3, #1
 800d100:	617b      	str	r3, [r7, #20]
 800d102:	2300      	movs	r3, #0
 800d104:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d106:	79fb      	ldrb	r3, [r7, #7]
 800d108:	9300      	str	r3, [sp, #0]
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	2200      	movs	r2, #0
 800d10e:	6939      	ldr	r1, [r7, #16]
 800d110:	6978      	ldr	r0, [r7, #20]
 800d112:	f7ff fee7 	bl	800cee4 <xQueueGenericCreateStatic>
 800d116:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d118:	68f8      	ldr	r0, [r7, #12]
 800d11a:	f7ff ffb8 	bl	800d08e <prvInitialiseMutex>

		return xNewQueue;
 800d11e:	68fb      	ldr	r3, [r7, #12]
	}
 800d120:	4618      	mov	r0, r3
 800d122:	3718      	adds	r7, #24
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}

0800d128 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d128:	b590      	push	{r4, r7, lr}
 800d12a:	b087      	sub	sp, #28
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d10a      	bne.n	800d150 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800d13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d13e:	f383 8811 	msr	BASEPRI, r3
 800d142:	f3bf 8f6f 	isb	sy
 800d146:	f3bf 8f4f 	dsb	sy
 800d14a:	60fb      	str	r3, [r7, #12]
}
 800d14c:	bf00      	nop
 800d14e:	e7fe      	b.n	800d14e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d150:	693b      	ldr	r3, [r7, #16]
 800d152:	689c      	ldr	r4, [r3, #8]
 800d154:	f001 fba6 	bl	800e8a4 <xTaskGetCurrentTaskHandle>
 800d158:	4603      	mov	r3, r0
 800d15a:	429c      	cmp	r4, r3
 800d15c:	d111      	bne.n	800d182 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	68db      	ldr	r3, [r3, #12]
 800d162:	1e5a      	subs	r2, r3, #1
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	68db      	ldr	r3, [r3, #12]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d105      	bne.n	800d17c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d170:	2300      	movs	r3, #0
 800d172:	2200      	movs	r2, #0
 800d174:	2100      	movs	r1, #0
 800d176:	6938      	ldr	r0, [r7, #16]
 800d178:	f000 f840 	bl	800d1fc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d17c:	2301      	movs	r3, #1
 800d17e:	617b      	str	r3, [r7, #20]
 800d180:	e001      	b.n	800d186 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d182:	2300      	movs	r3, #0
 800d184:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d186:	697b      	ldr	r3, [r7, #20]
	}
 800d188:	4618      	mov	r0, r3
 800d18a:	371c      	adds	r7, #28
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd90      	pop	{r4, r7, pc}

0800d190 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d190:	b590      	push	{r4, r7, lr}
 800d192:	b087      	sub	sp, #28
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d10a      	bne.n	800d1ba <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800d1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a8:	f383 8811 	msr	BASEPRI, r3
 800d1ac:	f3bf 8f6f 	isb	sy
 800d1b0:	f3bf 8f4f 	dsb	sy
 800d1b4:	60fb      	str	r3, [r7, #12]
}
 800d1b6:	bf00      	nop
 800d1b8:	e7fe      	b.n	800d1b8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	689c      	ldr	r4, [r3, #8]
 800d1be:	f001 fb71 	bl	800e8a4 <xTaskGetCurrentTaskHandle>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	429c      	cmp	r4, r3
 800d1c6:	d107      	bne.n	800d1d8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	68db      	ldr	r3, [r3, #12]
 800d1cc:	1c5a      	adds	r2, r3, #1
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	617b      	str	r3, [r7, #20]
 800d1d6:	e00c      	b.n	800d1f2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d1d8:	6839      	ldr	r1, [r7, #0]
 800d1da:	6938      	ldr	r0, [r7, #16]
 800d1dc:	f000 fa88 	bl	800d6f0 <xQueueSemaphoreTake>
 800d1e0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d004      	beq.n	800d1f2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	68db      	ldr	r3, [r3, #12]
 800d1ec:	1c5a      	adds	r2, r3, #1
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d1f2:	697b      	ldr	r3, [r7, #20]
	}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	371c      	adds	r7, #28
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd90      	pop	{r4, r7, pc}

0800d1fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b08e      	sub	sp, #56	; 0x38
 800d200:	af00      	add	r7, sp, #0
 800d202:	60f8      	str	r0, [r7, #12]
 800d204:	60b9      	str	r1, [r7, #8]
 800d206:	607a      	str	r2, [r7, #4]
 800d208:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d20a:	2300      	movs	r3, #0
 800d20c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d214:	2b00      	cmp	r3, #0
 800d216:	d10a      	bne.n	800d22e <xQueueGenericSend+0x32>
	__asm volatile
 800d218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21c:	f383 8811 	msr	BASEPRI, r3
 800d220:	f3bf 8f6f 	isb	sy
 800d224:	f3bf 8f4f 	dsb	sy
 800d228:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d22a:	bf00      	nop
 800d22c:	e7fe      	b.n	800d22c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d103      	bne.n	800d23c <xQueueGenericSend+0x40>
 800d234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d101      	bne.n	800d240 <xQueueGenericSend+0x44>
 800d23c:	2301      	movs	r3, #1
 800d23e:	e000      	b.n	800d242 <xQueueGenericSend+0x46>
 800d240:	2300      	movs	r3, #0
 800d242:	2b00      	cmp	r3, #0
 800d244:	d10a      	bne.n	800d25c <xQueueGenericSend+0x60>
	__asm volatile
 800d246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d24a:	f383 8811 	msr	BASEPRI, r3
 800d24e:	f3bf 8f6f 	isb	sy
 800d252:	f3bf 8f4f 	dsb	sy
 800d256:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d258:	bf00      	nop
 800d25a:	e7fe      	b.n	800d25a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	2b02      	cmp	r3, #2
 800d260:	d103      	bne.n	800d26a <xQueueGenericSend+0x6e>
 800d262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d266:	2b01      	cmp	r3, #1
 800d268:	d101      	bne.n	800d26e <xQueueGenericSend+0x72>
 800d26a:	2301      	movs	r3, #1
 800d26c:	e000      	b.n	800d270 <xQueueGenericSend+0x74>
 800d26e:	2300      	movs	r3, #0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d10a      	bne.n	800d28a <xQueueGenericSend+0x8e>
	__asm volatile
 800d274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d278:	f383 8811 	msr	BASEPRI, r3
 800d27c:	f3bf 8f6f 	isb	sy
 800d280:	f3bf 8f4f 	dsb	sy
 800d284:	623b      	str	r3, [r7, #32]
}
 800d286:	bf00      	nop
 800d288:	e7fe      	b.n	800d288 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d28a:	f001 fb1b 	bl	800e8c4 <xTaskGetSchedulerState>
 800d28e:	4603      	mov	r3, r0
 800d290:	2b00      	cmp	r3, #0
 800d292:	d102      	bne.n	800d29a <xQueueGenericSend+0x9e>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d101      	bne.n	800d29e <xQueueGenericSend+0xa2>
 800d29a:	2301      	movs	r3, #1
 800d29c:	e000      	b.n	800d2a0 <xQueueGenericSend+0xa4>
 800d29e:	2300      	movs	r3, #0
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d10a      	bne.n	800d2ba <xQueueGenericSend+0xbe>
	__asm volatile
 800d2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a8:	f383 8811 	msr	BASEPRI, r3
 800d2ac:	f3bf 8f6f 	isb	sy
 800d2b0:	f3bf 8f4f 	dsb	sy
 800d2b4:	61fb      	str	r3, [r7, #28]
}
 800d2b6:	bf00      	nop
 800d2b8:	e7fe      	b.n	800d2b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d2ba:	f002 f95b 	bl	800f574 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d302      	bcc.n	800d2d0 <xQueueGenericSend+0xd4>
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	2b02      	cmp	r3, #2
 800d2ce:	d129      	bne.n	800d324 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d2d0:	683a      	ldr	r2, [r7, #0]
 800d2d2:	68b9      	ldr	r1, [r7, #8]
 800d2d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2d6:	f000 fb2f 	bl	800d938 <prvCopyDataToQueue>
 800d2da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d010      	beq.n	800d306 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e6:	3324      	adds	r3, #36	; 0x24
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f001 f919 	bl	800e520 <xTaskRemoveFromEventList>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d013      	beq.n	800d31c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d2f4:	4b3f      	ldr	r3, [pc, #252]	; (800d3f4 <xQueueGenericSend+0x1f8>)
 800d2f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2fa:	601a      	str	r2, [r3, #0]
 800d2fc:	f3bf 8f4f 	dsb	sy
 800d300:	f3bf 8f6f 	isb	sy
 800d304:	e00a      	b.n	800d31c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d007      	beq.n	800d31c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d30c:	4b39      	ldr	r3, [pc, #228]	; (800d3f4 <xQueueGenericSend+0x1f8>)
 800d30e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d312:	601a      	str	r2, [r3, #0]
 800d314:	f3bf 8f4f 	dsb	sy
 800d318:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d31c:	f002 f95a 	bl	800f5d4 <vPortExitCritical>
				return pdPASS;
 800d320:	2301      	movs	r3, #1
 800d322:	e063      	b.n	800d3ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d103      	bne.n	800d332 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d32a:	f002 f953 	bl	800f5d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d32e:	2300      	movs	r3, #0
 800d330:	e05c      	b.n	800d3ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d334:	2b00      	cmp	r3, #0
 800d336:	d106      	bne.n	800d346 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d338:	f107 0314 	add.w	r3, r7, #20
 800d33c:	4618      	mov	r0, r3
 800d33e:	f001 f953 	bl	800e5e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d342:	2301      	movs	r3, #1
 800d344:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d346:	f002 f945 	bl	800f5d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d34a:	f000 febf 	bl	800e0cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d34e:	f002 f911 	bl	800f574 <vPortEnterCritical>
 800d352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d354:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d358:	b25b      	sxtb	r3, r3
 800d35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d35e:	d103      	bne.n	800d368 <xQueueGenericSend+0x16c>
 800d360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d362:	2200      	movs	r2, #0
 800d364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d36e:	b25b      	sxtb	r3, r3
 800d370:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d374:	d103      	bne.n	800d37e <xQueueGenericSend+0x182>
 800d376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d378:	2200      	movs	r2, #0
 800d37a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d37e:	f002 f929 	bl	800f5d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d382:	1d3a      	adds	r2, r7, #4
 800d384:	f107 0314 	add.w	r3, r7, #20
 800d388:	4611      	mov	r1, r2
 800d38a:	4618      	mov	r0, r3
 800d38c:	f001 f942 	bl	800e614 <xTaskCheckForTimeOut>
 800d390:	4603      	mov	r3, r0
 800d392:	2b00      	cmp	r3, #0
 800d394:	d124      	bne.n	800d3e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d396:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d398:	f000 fbc6 	bl	800db28 <prvIsQueueFull>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d018      	beq.n	800d3d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a4:	3310      	adds	r3, #16
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	4611      	mov	r1, r2
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f001 f868 	bl	800e480 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d3b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3b2:	f000 fb51 	bl	800da58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d3b6:	f000 fe97 	bl	800e0e8 <xTaskResumeAll>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	f47f af7c 	bne.w	800d2ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d3c2:	4b0c      	ldr	r3, [pc, #48]	; (800d3f4 <xQueueGenericSend+0x1f8>)
 800d3c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3c8:	601a      	str	r2, [r3, #0]
 800d3ca:	f3bf 8f4f 	dsb	sy
 800d3ce:	f3bf 8f6f 	isb	sy
 800d3d2:	e772      	b.n	800d2ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d3d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3d6:	f000 fb3f 	bl	800da58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d3da:	f000 fe85 	bl	800e0e8 <xTaskResumeAll>
 800d3de:	e76c      	b.n	800d2ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d3e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3e2:	f000 fb39 	bl	800da58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d3e6:	f000 fe7f 	bl	800e0e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d3ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3738      	adds	r7, #56	; 0x38
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}
 800d3f4:	e000ed04 	.word	0xe000ed04

0800d3f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b090      	sub	sp, #64	; 0x40
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	60f8      	str	r0, [r7, #12]
 800d400:	60b9      	str	r1, [r7, #8]
 800d402:	607a      	str	r2, [r7, #4]
 800d404:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d10a      	bne.n	800d426 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d414:	f383 8811 	msr	BASEPRI, r3
 800d418:	f3bf 8f6f 	isb	sy
 800d41c:	f3bf 8f4f 	dsb	sy
 800d420:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d422:	bf00      	nop
 800d424:	e7fe      	b.n	800d424 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d103      	bne.n	800d434 <xQueueGenericSendFromISR+0x3c>
 800d42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d42e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d430:	2b00      	cmp	r3, #0
 800d432:	d101      	bne.n	800d438 <xQueueGenericSendFromISR+0x40>
 800d434:	2301      	movs	r3, #1
 800d436:	e000      	b.n	800d43a <xQueueGenericSendFromISR+0x42>
 800d438:	2300      	movs	r3, #0
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d10a      	bne.n	800d454 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d442:	f383 8811 	msr	BASEPRI, r3
 800d446:	f3bf 8f6f 	isb	sy
 800d44a:	f3bf 8f4f 	dsb	sy
 800d44e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d450:	bf00      	nop
 800d452:	e7fe      	b.n	800d452 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	2b02      	cmp	r3, #2
 800d458:	d103      	bne.n	800d462 <xQueueGenericSendFromISR+0x6a>
 800d45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d45c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d45e:	2b01      	cmp	r3, #1
 800d460:	d101      	bne.n	800d466 <xQueueGenericSendFromISR+0x6e>
 800d462:	2301      	movs	r3, #1
 800d464:	e000      	b.n	800d468 <xQueueGenericSendFromISR+0x70>
 800d466:	2300      	movs	r3, #0
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d10a      	bne.n	800d482 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d470:	f383 8811 	msr	BASEPRI, r3
 800d474:	f3bf 8f6f 	isb	sy
 800d478:	f3bf 8f4f 	dsb	sy
 800d47c:	623b      	str	r3, [r7, #32]
}
 800d47e:	bf00      	nop
 800d480:	e7fe      	b.n	800d480 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d482:	f002 f959 	bl	800f738 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d486:	f3ef 8211 	mrs	r2, BASEPRI
 800d48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d48e:	f383 8811 	msr	BASEPRI, r3
 800d492:	f3bf 8f6f 	isb	sy
 800d496:	f3bf 8f4f 	dsb	sy
 800d49a:	61fa      	str	r2, [r7, #28]
 800d49c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d49e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d4a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d302      	bcc.n	800d4b4 <xQueueGenericSendFromISR+0xbc>
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	2b02      	cmp	r3, #2
 800d4b2:	d12f      	bne.n	800d514 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d4c4:	683a      	ldr	r2, [r7, #0]
 800d4c6:	68b9      	ldr	r1, [r7, #8]
 800d4c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d4ca:	f000 fa35 	bl	800d938 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d4ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4d6:	d112      	bne.n	800d4fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d016      	beq.n	800d50e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e2:	3324      	adds	r3, #36	; 0x24
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f001 f81b 	bl	800e520 <xTaskRemoveFromEventList>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d00e      	beq.n	800d50e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d00b      	beq.n	800d50e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	601a      	str	r2, [r3, #0]
 800d4fc:	e007      	b.n	800d50e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d4fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d502:	3301      	adds	r3, #1
 800d504:	b2db      	uxtb	r3, r3
 800d506:	b25a      	sxtb	r2, r3
 800d508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d50a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d50e:	2301      	movs	r3, #1
 800d510:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d512:	e001      	b.n	800d518 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d514:	2300      	movs	r3, #0
 800d516:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d51a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d522:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d526:	4618      	mov	r0, r3
 800d528:	3740      	adds	r7, #64	; 0x40
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
	...

0800d530 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b08c      	sub	sp, #48	; 0x30
 800d534:	af00      	add	r7, sp, #0
 800d536:	60f8      	str	r0, [r7, #12]
 800d538:	60b9      	str	r1, [r7, #8]
 800d53a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d53c:	2300      	movs	r3, #0
 800d53e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d546:	2b00      	cmp	r3, #0
 800d548:	d10a      	bne.n	800d560 <xQueueReceive+0x30>
	__asm volatile
 800d54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d54e:	f383 8811 	msr	BASEPRI, r3
 800d552:	f3bf 8f6f 	isb	sy
 800d556:	f3bf 8f4f 	dsb	sy
 800d55a:	623b      	str	r3, [r7, #32]
}
 800d55c:	bf00      	nop
 800d55e:	e7fe      	b.n	800d55e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d103      	bne.n	800d56e <xQueueReceive+0x3e>
 800d566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d101      	bne.n	800d572 <xQueueReceive+0x42>
 800d56e:	2301      	movs	r3, #1
 800d570:	e000      	b.n	800d574 <xQueueReceive+0x44>
 800d572:	2300      	movs	r3, #0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d10a      	bne.n	800d58e <xQueueReceive+0x5e>
	__asm volatile
 800d578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d57c:	f383 8811 	msr	BASEPRI, r3
 800d580:	f3bf 8f6f 	isb	sy
 800d584:	f3bf 8f4f 	dsb	sy
 800d588:	61fb      	str	r3, [r7, #28]
}
 800d58a:	bf00      	nop
 800d58c:	e7fe      	b.n	800d58c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d58e:	f001 f999 	bl	800e8c4 <xTaskGetSchedulerState>
 800d592:	4603      	mov	r3, r0
 800d594:	2b00      	cmp	r3, #0
 800d596:	d102      	bne.n	800d59e <xQueueReceive+0x6e>
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d101      	bne.n	800d5a2 <xQueueReceive+0x72>
 800d59e:	2301      	movs	r3, #1
 800d5a0:	e000      	b.n	800d5a4 <xQueueReceive+0x74>
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d10a      	bne.n	800d5be <xQueueReceive+0x8e>
	__asm volatile
 800d5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ac:	f383 8811 	msr	BASEPRI, r3
 800d5b0:	f3bf 8f6f 	isb	sy
 800d5b4:	f3bf 8f4f 	dsb	sy
 800d5b8:	61bb      	str	r3, [r7, #24]
}
 800d5ba:	bf00      	nop
 800d5bc:	e7fe      	b.n	800d5bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d5be:	f001 ffd9 	bl	800f574 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d01f      	beq.n	800d60e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d5ce:	68b9      	ldr	r1, [r7, #8]
 800d5d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5d2:	f000 fa1b 	bl	800da0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d8:	1e5a      	subs	r2, r3, #1
 800d5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e0:	691b      	ldr	r3, [r3, #16]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d00f      	beq.n	800d606 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e8:	3310      	adds	r3, #16
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f000 ff98 	bl	800e520 <xTaskRemoveFromEventList>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d007      	beq.n	800d606 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d5f6:	4b3d      	ldr	r3, [pc, #244]	; (800d6ec <xQueueReceive+0x1bc>)
 800d5f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5fc:	601a      	str	r2, [r3, #0]
 800d5fe:	f3bf 8f4f 	dsb	sy
 800d602:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d606:	f001 ffe5 	bl	800f5d4 <vPortExitCritical>
				return pdPASS;
 800d60a:	2301      	movs	r3, #1
 800d60c:	e069      	b.n	800d6e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d103      	bne.n	800d61c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d614:	f001 ffde 	bl	800f5d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d618:	2300      	movs	r3, #0
 800d61a:	e062      	b.n	800d6e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d106      	bne.n	800d630 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d622:	f107 0310 	add.w	r3, r7, #16
 800d626:	4618      	mov	r0, r3
 800d628:	f000 ffde 	bl	800e5e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d62c:	2301      	movs	r3, #1
 800d62e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d630:	f001 ffd0 	bl	800f5d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d634:	f000 fd4a 	bl	800e0cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d638:	f001 ff9c 	bl	800f574 <vPortEnterCritical>
 800d63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d642:	b25b      	sxtb	r3, r3
 800d644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d648:	d103      	bne.n	800d652 <xQueueReceive+0x122>
 800d64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d64c:	2200      	movs	r2, #0
 800d64e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d654:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d658:	b25b      	sxtb	r3, r3
 800d65a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d65e:	d103      	bne.n	800d668 <xQueueReceive+0x138>
 800d660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d662:	2200      	movs	r2, #0
 800d664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d668:	f001 ffb4 	bl	800f5d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d66c:	1d3a      	adds	r2, r7, #4
 800d66e:	f107 0310 	add.w	r3, r7, #16
 800d672:	4611      	mov	r1, r2
 800d674:	4618      	mov	r0, r3
 800d676:	f000 ffcd 	bl	800e614 <xTaskCheckForTimeOut>
 800d67a:	4603      	mov	r3, r0
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d123      	bne.n	800d6c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d682:	f000 fa3b 	bl	800dafc <prvIsQueueEmpty>
 800d686:	4603      	mov	r3, r0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d017      	beq.n	800d6bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d68e:	3324      	adds	r3, #36	; 0x24
 800d690:	687a      	ldr	r2, [r7, #4]
 800d692:	4611      	mov	r1, r2
 800d694:	4618      	mov	r0, r3
 800d696:	f000 fef3 	bl	800e480 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d69a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d69c:	f000 f9dc 	bl	800da58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d6a0:	f000 fd22 	bl	800e0e8 <xTaskResumeAll>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d189      	bne.n	800d5be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d6aa:	4b10      	ldr	r3, [pc, #64]	; (800d6ec <xQueueReceive+0x1bc>)
 800d6ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6b0:	601a      	str	r2, [r3, #0]
 800d6b2:	f3bf 8f4f 	dsb	sy
 800d6b6:	f3bf 8f6f 	isb	sy
 800d6ba:	e780      	b.n	800d5be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d6bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6be:	f000 f9cb 	bl	800da58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6c2:	f000 fd11 	bl	800e0e8 <xTaskResumeAll>
 800d6c6:	e77a      	b.n	800d5be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d6c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6ca:	f000 f9c5 	bl	800da58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d6ce:	f000 fd0b 	bl	800e0e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d6d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6d4:	f000 fa12 	bl	800dafc <prvIsQueueEmpty>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	f43f af6f 	beq.w	800d5be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d6e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3730      	adds	r7, #48	; 0x30
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	e000ed04 	.word	0xe000ed04

0800d6f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b08e      	sub	sp, #56	; 0x38
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d702:	2300      	movs	r3, #0
 800d704:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d10a      	bne.n	800d722 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d710:	f383 8811 	msr	BASEPRI, r3
 800d714:	f3bf 8f6f 	isb	sy
 800d718:	f3bf 8f4f 	dsb	sy
 800d71c:	623b      	str	r3, [r7, #32]
}
 800d71e:	bf00      	nop
 800d720:	e7fe      	b.n	800d720 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d726:	2b00      	cmp	r3, #0
 800d728:	d00a      	beq.n	800d740 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d72e:	f383 8811 	msr	BASEPRI, r3
 800d732:	f3bf 8f6f 	isb	sy
 800d736:	f3bf 8f4f 	dsb	sy
 800d73a:	61fb      	str	r3, [r7, #28]
}
 800d73c:	bf00      	nop
 800d73e:	e7fe      	b.n	800d73e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d740:	f001 f8c0 	bl	800e8c4 <xTaskGetSchedulerState>
 800d744:	4603      	mov	r3, r0
 800d746:	2b00      	cmp	r3, #0
 800d748:	d102      	bne.n	800d750 <xQueueSemaphoreTake+0x60>
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d101      	bne.n	800d754 <xQueueSemaphoreTake+0x64>
 800d750:	2301      	movs	r3, #1
 800d752:	e000      	b.n	800d756 <xQueueSemaphoreTake+0x66>
 800d754:	2300      	movs	r3, #0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d10a      	bne.n	800d770 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d75e:	f383 8811 	msr	BASEPRI, r3
 800d762:	f3bf 8f6f 	isb	sy
 800d766:	f3bf 8f4f 	dsb	sy
 800d76a:	61bb      	str	r3, [r7, #24]
}
 800d76c:	bf00      	nop
 800d76e:	e7fe      	b.n	800d76e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d770:	f001 ff00 	bl	800f574 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d778:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d024      	beq.n	800d7ca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d782:	1e5a      	subs	r2, r3, #1
 800d784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d786:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d104      	bne.n	800d79a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d790:	f001 fa0e 	bl	800ebb0 <pvTaskIncrementMutexHeldCount>
 800d794:	4602      	mov	r2, r0
 800d796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d798:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79c:	691b      	ldr	r3, [r3, #16]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d00f      	beq.n	800d7c2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a4:	3310      	adds	r3, #16
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f000 feba 	bl	800e520 <xTaskRemoveFromEventList>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d007      	beq.n	800d7c2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d7b2:	4b54      	ldr	r3, [pc, #336]	; (800d904 <xQueueSemaphoreTake+0x214>)
 800d7b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7b8:	601a      	str	r2, [r3, #0]
 800d7ba:	f3bf 8f4f 	dsb	sy
 800d7be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d7c2:	f001 ff07 	bl	800f5d4 <vPortExitCritical>
				return pdPASS;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	e097      	b.n	800d8fa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d111      	bne.n	800d7f4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d00a      	beq.n	800d7ec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7da:	f383 8811 	msr	BASEPRI, r3
 800d7de:	f3bf 8f6f 	isb	sy
 800d7e2:	f3bf 8f4f 	dsb	sy
 800d7e6:	617b      	str	r3, [r7, #20]
}
 800d7e8:	bf00      	nop
 800d7ea:	e7fe      	b.n	800d7ea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d7ec:	f001 fef2 	bl	800f5d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	e082      	b.n	800d8fa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d7f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d106      	bne.n	800d808 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7fa:	f107 030c 	add.w	r3, r7, #12
 800d7fe:	4618      	mov	r0, r3
 800d800:	f000 fef2 	bl	800e5e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d804:	2301      	movs	r3, #1
 800d806:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d808:	f001 fee4 	bl	800f5d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d80c:	f000 fc5e 	bl	800e0cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d810:	f001 feb0 	bl	800f574 <vPortEnterCritical>
 800d814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d816:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d81a:	b25b      	sxtb	r3, r3
 800d81c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d820:	d103      	bne.n	800d82a <xQueueSemaphoreTake+0x13a>
 800d822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d824:	2200      	movs	r2, #0
 800d826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d82c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d830:	b25b      	sxtb	r3, r3
 800d832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d836:	d103      	bne.n	800d840 <xQueueSemaphoreTake+0x150>
 800d838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d83a:	2200      	movs	r2, #0
 800d83c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d840:	f001 fec8 	bl	800f5d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d844:	463a      	mov	r2, r7
 800d846:	f107 030c 	add.w	r3, r7, #12
 800d84a:	4611      	mov	r1, r2
 800d84c:	4618      	mov	r0, r3
 800d84e:	f000 fee1 	bl	800e614 <xTaskCheckForTimeOut>
 800d852:	4603      	mov	r3, r0
 800d854:	2b00      	cmp	r3, #0
 800d856:	d132      	bne.n	800d8be <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d858:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d85a:	f000 f94f 	bl	800dafc <prvIsQueueEmpty>
 800d85e:	4603      	mov	r3, r0
 800d860:	2b00      	cmp	r3, #0
 800d862:	d026      	beq.n	800d8b2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d109      	bne.n	800d880 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d86c:	f001 fe82 	bl	800f574 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d872:	689b      	ldr	r3, [r3, #8]
 800d874:	4618      	mov	r0, r3
 800d876:	f001 f843 	bl	800e900 <xTaskPriorityInherit>
 800d87a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d87c:	f001 feaa 	bl	800f5d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d882:	3324      	adds	r3, #36	; 0x24
 800d884:	683a      	ldr	r2, [r7, #0]
 800d886:	4611      	mov	r1, r2
 800d888:	4618      	mov	r0, r3
 800d88a:	f000 fdf9 	bl	800e480 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d88e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d890:	f000 f8e2 	bl	800da58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d894:	f000 fc28 	bl	800e0e8 <xTaskResumeAll>
 800d898:	4603      	mov	r3, r0
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	f47f af68 	bne.w	800d770 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d8a0:	4b18      	ldr	r3, [pc, #96]	; (800d904 <xQueueSemaphoreTake+0x214>)
 800d8a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8a6:	601a      	str	r2, [r3, #0]
 800d8a8:	f3bf 8f4f 	dsb	sy
 800d8ac:	f3bf 8f6f 	isb	sy
 800d8b0:	e75e      	b.n	800d770 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d8b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8b4:	f000 f8d0 	bl	800da58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d8b8:	f000 fc16 	bl	800e0e8 <xTaskResumeAll>
 800d8bc:	e758      	b.n	800d770 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d8be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8c0:	f000 f8ca 	bl	800da58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d8c4:	f000 fc10 	bl	800e0e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d8c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8ca:	f000 f917 	bl	800dafc <prvIsQueueEmpty>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	f43f af4d 	beq.w	800d770 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d00d      	beq.n	800d8f8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d8dc:	f001 fe4a 	bl	800f574 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d8e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8e2:	f000 f811 	bl	800d908 <prvGetDisinheritPriorityAfterTimeout>
 800d8e6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ea:	689b      	ldr	r3, [r3, #8]
 800d8ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f001 f8dc 	bl	800eaac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d8f4:	f001 fe6e 	bl	800f5d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d8f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3738      	adds	r7, #56	; 0x38
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	e000ed04 	.word	0xe000ed04

0800d908 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d908:	b480      	push	{r7}
 800d90a:	b085      	sub	sp, #20
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d914:	2b00      	cmp	r3, #0
 800d916:	d006      	beq.n	800d926 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d922:	60fb      	str	r3, [r7, #12]
 800d924:	e001      	b.n	800d92a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d926:	2300      	movs	r3, #0
 800d928:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d92a:	68fb      	ldr	r3, [r7, #12]
	}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3714      	adds	r7, #20
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr

0800d938 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b086      	sub	sp, #24
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	60f8      	str	r0, [r7, #12]
 800d940:	60b9      	str	r1, [r7, #8]
 800d942:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d944:	2300      	movs	r3, #0
 800d946:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d94c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d952:	2b00      	cmp	r3, #0
 800d954:	d10d      	bne.n	800d972 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d14d      	bne.n	800d9fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	689b      	ldr	r3, [r3, #8]
 800d962:	4618      	mov	r0, r3
 800d964:	f001 f834 	bl	800e9d0 <xTaskPriorityDisinherit>
 800d968:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	2200      	movs	r2, #0
 800d96e:	609a      	str	r2, [r3, #8]
 800d970:	e043      	b.n	800d9fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d119      	bne.n	800d9ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	6858      	ldr	r0, [r3, #4]
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d980:	461a      	mov	r2, r3
 800d982:	68b9      	ldr	r1, [r7, #8]
 800d984:	f002 fe62 	bl	801064c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	685a      	ldr	r2, [r3, #4]
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d990:	441a      	add	r2, r3
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	685a      	ldr	r2, [r3, #4]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	689b      	ldr	r3, [r3, #8]
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d32b      	bcc.n	800d9fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681a      	ldr	r2, [r3, #0]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	605a      	str	r2, [r3, #4]
 800d9aa:	e026      	b.n	800d9fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	68d8      	ldr	r0, [r3, #12]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	68b9      	ldr	r1, [r7, #8]
 800d9b8:	f002 fe48 	bl	801064c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	68da      	ldr	r2, [r3, #12]
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9c4:	425b      	negs	r3, r3
 800d9c6:	441a      	add	r2, r3
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	68da      	ldr	r2, [r3, #12]
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d207      	bcs.n	800d9e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	689a      	ldr	r2, [r3, #8]
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9e0:	425b      	negs	r3, r3
 800d9e2:	441a      	add	r2, r3
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2b02      	cmp	r3, #2
 800d9ec:	d105      	bne.n	800d9fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d002      	beq.n	800d9fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	3b01      	subs	r3, #1
 800d9f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d9fa:	693b      	ldr	r3, [r7, #16]
 800d9fc:	1c5a      	adds	r2, r3, #1
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800da02:	697b      	ldr	r3, [r7, #20]
}
 800da04:	4618      	mov	r0, r3
 800da06:	3718      	adds	r7, #24
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d018      	beq.n	800da50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	68da      	ldr	r2, [r3, #12]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da26:	441a      	add	r2, r3
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	68da      	ldr	r2, [r3, #12]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	689b      	ldr	r3, [r3, #8]
 800da34:	429a      	cmp	r2, r3
 800da36:	d303      	bcc.n	800da40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	68d9      	ldr	r1, [r3, #12]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da48:	461a      	mov	r2, r3
 800da4a:	6838      	ldr	r0, [r7, #0]
 800da4c:	f002 fdfe 	bl	801064c <memcpy>
	}
}
 800da50:	bf00      	nop
 800da52:	3708      	adds	r7, #8
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b084      	sub	sp, #16
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800da60:	f001 fd88 	bl	800f574 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800da6c:	e011      	b.n	800da92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da72:	2b00      	cmp	r3, #0
 800da74:	d012      	beq.n	800da9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	3324      	adds	r3, #36	; 0x24
 800da7a:	4618      	mov	r0, r3
 800da7c:	f000 fd50 	bl	800e520 <xTaskRemoveFromEventList>
 800da80:	4603      	mov	r3, r0
 800da82:	2b00      	cmp	r3, #0
 800da84:	d001      	beq.n	800da8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800da86:	f000 fe27 	bl	800e6d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800da8a:	7bfb      	ldrb	r3, [r7, #15]
 800da8c:	3b01      	subs	r3, #1
 800da8e:	b2db      	uxtb	r3, r3
 800da90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800da92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da96:	2b00      	cmp	r3, #0
 800da98:	dce9      	bgt.n	800da6e <prvUnlockQueue+0x16>
 800da9a:	e000      	b.n	800da9e <prvUnlockQueue+0x46>
					break;
 800da9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	22ff      	movs	r2, #255	; 0xff
 800daa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800daa6:	f001 fd95 	bl	800f5d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800daaa:	f001 fd63 	bl	800f574 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dab4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dab6:	e011      	b.n	800dadc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	691b      	ldr	r3, [r3, #16]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d012      	beq.n	800dae6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	3310      	adds	r3, #16
 800dac4:	4618      	mov	r0, r3
 800dac6:	f000 fd2b 	bl	800e520 <xTaskRemoveFromEventList>
 800daca:	4603      	mov	r3, r0
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d001      	beq.n	800dad4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dad0:	f000 fe02 	bl	800e6d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dad4:	7bbb      	ldrb	r3, [r7, #14]
 800dad6:	3b01      	subs	r3, #1
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dadc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	dce9      	bgt.n	800dab8 <prvUnlockQueue+0x60>
 800dae4:	e000      	b.n	800dae8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dae6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	22ff      	movs	r2, #255	; 0xff
 800daec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800daf0:	f001 fd70 	bl	800f5d4 <vPortExitCritical>
}
 800daf4:	bf00      	nop
 800daf6:	3710      	adds	r7, #16
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800db04:	f001 fd36 	bl	800f574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d102      	bne.n	800db16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800db10:	2301      	movs	r3, #1
 800db12:	60fb      	str	r3, [r7, #12]
 800db14:	e001      	b.n	800db1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800db16:	2300      	movs	r3, #0
 800db18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800db1a:	f001 fd5b 	bl	800f5d4 <vPortExitCritical>

	return xReturn;
 800db1e:	68fb      	ldr	r3, [r7, #12]
}
 800db20:	4618      	mov	r0, r3
 800db22:	3710      	adds	r7, #16
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b084      	sub	sp, #16
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800db30:	f001 fd20 	bl	800f574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d102      	bne.n	800db46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800db40:	2301      	movs	r3, #1
 800db42:	60fb      	str	r3, [r7, #12]
 800db44:	e001      	b.n	800db4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800db46:	2300      	movs	r3, #0
 800db48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800db4a:	f001 fd43 	bl	800f5d4 <vPortExitCritical>

	return xReturn;
 800db4e:	68fb      	ldr	r3, [r7, #12]
}
 800db50:	4618      	mov	r0, r3
 800db52:	3710      	adds	r7, #16
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800db58:	b480      	push	{r7}
 800db5a:	b085      	sub	sp, #20
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800db62:	2300      	movs	r3, #0
 800db64:	60fb      	str	r3, [r7, #12]
 800db66:	e014      	b.n	800db92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800db68:	4a0f      	ldr	r2, [pc, #60]	; (800dba8 <vQueueAddToRegistry+0x50>)
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d10b      	bne.n	800db8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800db74:	490c      	ldr	r1, [pc, #48]	; (800dba8 <vQueueAddToRegistry+0x50>)
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	683a      	ldr	r2, [r7, #0]
 800db7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800db7e:	4a0a      	ldr	r2, [pc, #40]	; (800dba8 <vQueueAddToRegistry+0x50>)
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	00db      	lsls	r3, r3, #3
 800db84:	4413      	add	r3, r2
 800db86:	687a      	ldr	r2, [r7, #4]
 800db88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800db8a:	e006      	b.n	800db9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	3301      	adds	r3, #1
 800db90:	60fb      	str	r3, [r7, #12]
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2b07      	cmp	r3, #7
 800db96:	d9e7      	bls.n	800db68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800db98:	bf00      	nop
 800db9a:	bf00      	nop
 800db9c:	3714      	adds	r7, #20
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr
 800dba6:	bf00      	nop
 800dba8:	20001084 	.word	0x20001084

0800dbac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b086      	sub	sp, #24
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	60f8      	str	r0, [r7, #12]
 800dbb4:	60b9      	str	r1, [r7, #8]
 800dbb6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dbbc:	f001 fcda 	bl	800f574 <vPortEnterCritical>
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dbc6:	b25b      	sxtb	r3, r3
 800dbc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbcc:	d103      	bne.n	800dbd6 <vQueueWaitForMessageRestricted+0x2a>
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbdc:	b25b      	sxtb	r3, r3
 800dbde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbe2:	d103      	bne.n	800dbec <vQueueWaitForMessageRestricted+0x40>
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dbec:	f001 fcf2 	bl	800f5d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d106      	bne.n	800dc06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	3324      	adds	r3, #36	; 0x24
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	68b9      	ldr	r1, [r7, #8]
 800dc00:	4618      	mov	r0, r3
 800dc02:	f000 fc61 	bl	800e4c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dc06:	6978      	ldr	r0, [r7, #20]
 800dc08:	f7ff ff26 	bl	800da58 <prvUnlockQueue>
	}
 800dc0c:	bf00      	nop
 800dc0e:	3718      	adds	r7, #24
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}

0800dc14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b08e      	sub	sp, #56	; 0x38
 800dc18:	af04      	add	r7, sp, #16
 800dc1a:	60f8      	str	r0, [r7, #12]
 800dc1c:	60b9      	str	r1, [r7, #8]
 800dc1e:	607a      	str	r2, [r7, #4]
 800dc20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dc22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d10a      	bne.n	800dc3e <xTaskCreateStatic+0x2a>
	__asm volatile
 800dc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2c:	f383 8811 	msr	BASEPRI, r3
 800dc30:	f3bf 8f6f 	isb	sy
 800dc34:	f3bf 8f4f 	dsb	sy
 800dc38:	623b      	str	r3, [r7, #32]
}
 800dc3a:	bf00      	nop
 800dc3c:	e7fe      	b.n	800dc3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d10a      	bne.n	800dc5a <xTaskCreateStatic+0x46>
	__asm volatile
 800dc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc48:	f383 8811 	msr	BASEPRI, r3
 800dc4c:	f3bf 8f6f 	isb	sy
 800dc50:	f3bf 8f4f 	dsb	sy
 800dc54:	61fb      	str	r3, [r7, #28]
}
 800dc56:	bf00      	nop
 800dc58:	e7fe      	b.n	800dc58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dc5a:	23bc      	movs	r3, #188	; 0xbc
 800dc5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	2bbc      	cmp	r3, #188	; 0xbc
 800dc62:	d00a      	beq.n	800dc7a <xTaskCreateStatic+0x66>
	__asm volatile
 800dc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc68:	f383 8811 	msr	BASEPRI, r3
 800dc6c:	f3bf 8f6f 	isb	sy
 800dc70:	f3bf 8f4f 	dsb	sy
 800dc74:	61bb      	str	r3, [r7, #24]
}
 800dc76:	bf00      	nop
 800dc78:	e7fe      	b.n	800dc78 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dc7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d01e      	beq.n	800dcc0 <xTaskCreateStatic+0xac>
 800dc82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d01b      	beq.n	800dcc0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc94:	2202      	movs	r2, #2
 800dc96:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	9303      	str	r3, [sp, #12]
 800dc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca0:	9302      	str	r3, [sp, #8]
 800dca2:	f107 0314 	add.w	r3, r7, #20
 800dca6:	9301      	str	r3, [sp, #4]
 800dca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcaa:	9300      	str	r3, [sp, #0]
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	68b9      	ldr	r1, [r7, #8]
 800dcb2:	68f8      	ldr	r0, [r7, #12]
 800dcb4:	f000 f850 	bl	800dd58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dcb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcba:	f000 f8f3 	bl	800dea4 <prvAddNewTaskToReadyList>
 800dcbe:	e001      	b.n	800dcc4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dcc4:	697b      	ldr	r3, [r7, #20]
	}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3728      	adds	r7, #40	; 0x28
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}

0800dcce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b08c      	sub	sp, #48	; 0x30
 800dcd2:	af04      	add	r7, sp, #16
 800dcd4:	60f8      	str	r0, [r7, #12]
 800dcd6:	60b9      	str	r1, [r7, #8]
 800dcd8:	603b      	str	r3, [r7, #0]
 800dcda:	4613      	mov	r3, r2
 800dcdc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dcde:	88fb      	ldrh	r3, [r7, #6]
 800dce0:	009b      	lsls	r3, r3, #2
 800dce2:	4618      	mov	r0, r3
 800dce4:	f001 fd68 	bl	800f7b8 <pvPortMalloc>
 800dce8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d00e      	beq.n	800dd0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dcf0:	20bc      	movs	r0, #188	; 0xbc
 800dcf2:	f001 fd61 	bl	800f7b8 <pvPortMalloc>
 800dcf6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dcf8:	69fb      	ldr	r3, [r7, #28]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d003      	beq.n	800dd06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dcfe:	69fb      	ldr	r3, [r7, #28]
 800dd00:	697a      	ldr	r2, [r7, #20]
 800dd02:	631a      	str	r2, [r3, #48]	; 0x30
 800dd04:	e005      	b.n	800dd12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dd06:	6978      	ldr	r0, [r7, #20]
 800dd08:	f001 fe22 	bl	800f950 <vPortFree>
 800dd0c:	e001      	b.n	800dd12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dd12:	69fb      	ldr	r3, [r7, #28]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d017      	beq.n	800dd48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dd18:	69fb      	ldr	r3, [r7, #28]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dd20:	88fa      	ldrh	r2, [r7, #6]
 800dd22:	2300      	movs	r3, #0
 800dd24:	9303      	str	r3, [sp, #12]
 800dd26:	69fb      	ldr	r3, [r7, #28]
 800dd28:	9302      	str	r3, [sp, #8]
 800dd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd2c:	9301      	str	r3, [sp, #4]
 800dd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd30:	9300      	str	r3, [sp, #0]
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	68b9      	ldr	r1, [r7, #8]
 800dd36:	68f8      	ldr	r0, [r7, #12]
 800dd38:	f000 f80e 	bl	800dd58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd3c:	69f8      	ldr	r0, [r7, #28]
 800dd3e:	f000 f8b1 	bl	800dea4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dd42:	2301      	movs	r3, #1
 800dd44:	61bb      	str	r3, [r7, #24]
 800dd46:	e002      	b.n	800dd4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dd48:	f04f 33ff 	mov.w	r3, #4294967295
 800dd4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dd4e:	69bb      	ldr	r3, [r7, #24]
	}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3720      	adds	r7, #32
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b088      	sub	sp, #32
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	607a      	str	r2, [r7, #4]
 800dd64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	009b      	lsls	r3, r3, #2
 800dd6e:	461a      	mov	r2, r3
 800dd70:	21a5      	movs	r1, #165	; 0xa5
 800dd72:	f002 fc79 	bl	8010668 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dd80:	3b01      	subs	r3, #1
 800dd82:	009b      	lsls	r3, r3, #2
 800dd84:	4413      	add	r3, r2
 800dd86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dd88:	69bb      	ldr	r3, [r7, #24]
 800dd8a:	f023 0307 	bic.w	r3, r3, #7
 800dd8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dd90:	69bb      	ldr	r3, [r7, #24]
 800dd92:	f003 0307 	and.w	r3, r3, #7
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d00a      	beq.n	800ddb0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800dd9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd9e:	f383 8811 	msr	BASEPRI, r3
 800dda2:	f3bf 8f6f 	isb	sy
 800dda6:	f3bf 8f4f 	dsb	sy
 800ddaa:	617b      	str	r3, [r7, #20]
}
 800ddac:	bf00      	nop
 800ddae:	e7fe      	b.n	800ddae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d01f      	beq.n	800ddf6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	61fb      	str	r3, [r7, #28]
 800ddba:	e012      	b.n	800dde2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ddbc:	68ba      	ldr	r2, [r7, #8]
 800ddbe:	69fb      	ldr	r3, [r7, #28]
 800ddc0:	4413      	add	r3, r2
 800ddc2:	7819      	ldrb	r1, [r3, #0]
 800ddc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddc6:	69fb      	ldr	r3, [r7, #28]
 800ddc8:	4413      	add	r3, r2
 800ddca:	3334      	adds	r3, #52	; 0x34
 800ddcc:	460a      	mov	r2, r1
 800ddce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ddd0:	68ba      	ldr	r2, [r7, #8]
 800ddd2:	69fb      	ldr	r3, [r7, #28]
 800ddd4:	4413      	add	r3, r2
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d006      	beq.n	800ddea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dddc:	69fb      	ldr	r3, [r7, #28]
 800ddde:	3301      	adds	r3, #1
 800dde0:	61fb      	str	r3, [r7, #28]
 800dde2:	69fb      	ldr	r3, [r7, #28]
 800dde4:	2b0f      	cmp	r3, #15
 800dde6:	d9e9      	bls.n	800ddbc <prvInitialiseNewTask+0x64>
 800dde8:	e000      	b.n	800ddec <prvInitialiseNewTask+0x94>
			{
				break;
 800ddea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ddec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddee:	2200      	movs	r2, #0
 800ddf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ddf4:	e003      	b.n	800ddfe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ddf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ddfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de00:	2b37      	cmp	r3, #55	; 0x37
 800de02:	d901      	bls.n	800de08 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800de04:	2337      	movs	r3, #55	; 0x37
 800de06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800de08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800de0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800de14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de16:	2200      	movs	r2, #0
 800de18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800de1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de1c:	3304      	adds	r3, #4
 800de1e:	4618      	mov	r0, r3
 800de20:	f7fe ff64 	bl	800ccec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800de24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de26:	3318      	adds	r3, #24
 800de28:	4618      	mov	r0, r3
 800de2a:	f7fe ff5f 	bl	800ccec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800de2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800de3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800de3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800de44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de46:	2200      	movs	r2, #0
 800de48:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800de4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de4e:	2200      	movs	r2, #0
 800de50:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800de54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de56:	3354      	adds	r3, #84	; 0x54
 800de58:	2260      	movs	r2, #96	; 0x60
 800de5a:	2100      	movs	r1, #0
 800de5c:	4618      	mov	r0, r3
 800de5e:	f002 fc03 	bl	8010668 <memset>
 800de62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de64:	4a0c      	ldr	r2, [pc, #48]	; (800de98 <prvInitialiseNewTask+0x140>)
 800de66:	659a      	str	r2, [r3, #88]	; 0x58
 800de68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de6a:	4a0c      	ldr	r2, [pc, #48]	; (800de9c <prvInitialiseNewTask+0x144>)
 800de6c:	65da      	str	r2, [r3, #92]	; 0x5c
 800de6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de70:	4a0b      	ldr	r2, [pc, #44]	; (800dea0 <prvInitialiseNewTask+0x148>)
 800de72:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800de74:	683a      	ldr	r2, [r7, #0]
 800de76:	68f9      	ldr	r1, [r7, #12]
 800de78:	69b8      	ldr	r0, [r7, #24]
 800de7a:	f001 fa4f 	bl	800f31c <pxPortInitialiseStack>
 800de7e:	4602      	mov	r2, r0
 800de80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de82:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800de84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de86:	2b00      	cmp	r3, #0
 800de88:	d002      	beq.n	800de90 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800de8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de90:	bf00      	nop
 800de92:	3720      	adds	r7, #32
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}
 800de98:	08011a8c 	.word	0x08011a8c
 800de9c:	08011aac 	.word	0x08011aac
 800dea0:	08011a6c 	.word	0x08011a6c

0800dea4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800deac:	f001 fb62 	bl	800f574 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800deb0:	4b2d      	ldr	r3, [pc, #180]	; (800df68 <prvAddNewTaskToReadyList+0xc4>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	3301      	adds	r3, #1
 800deb6:	4a2c      	ldr	r2, [pc, #176]	; (800df68 <prvAddNewTaskToReadyList+0xc4>)
 800deb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800deba:	4b2c      	ldr	r3, [pc, #176]	; (800df6c <prvAddNewTaskToReadyList+0xc8>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d109      	bne.n	800ded6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dec2:	4a2a      	ldr	r2, [pc, #168]	; (800df6c <prvAddNewTaskToReadyList+0xc8>)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dec8:	4b27      	ldr	r3, [pc, #156]	; (800df68 <prvAddNewTaskToReadyList+0xc4>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	2b01      	cmp	r3, #1
 800dece:	d110      	bne.n	800def2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ded0:	f000 fc26 	bl	800e720 <prvInitialiseTaskLists>
 800ded4:	e00d      	b.n	800def2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ded6:	4b26      	ldr	r3, [pc, #152]	; (800df70 <prvAddNewTaskToReadyList+0xcc>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d109      	bne.n	800def2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dede:	4b23      	ldr	r3, [pc, #140]	; (800df6c <prvAddNewTaskToReadyList+0xc8>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dee8:	429a      	cmp	r2, r3
 800deea:	d802      	bhi.n	800def2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800deec:	4a1f      	ldr	r2, [pc, #124]	; (800df6c <prvAddNewTaskToReadyList+0xc8>)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800def2:	4b20      	ldr	r3, [pc, #128]	; (800df74 <prvAddNewTaskToReadyList+0xd0>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	3301      	adds	r3, #1
 800def8:	4a1e      	ldr	r2, [pc, #120]	; (800df74 <prvAddNewTaskToReadyList+0xd0>)
 800defa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800defc:	4b1d      	ldr	r3, [pc, #116]	; (800df74 <prvAddNewTaskToReadyList+0xd0>)
 800defe:	681a      	ldr	r2, [r3, #0]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df08:	4b1b      	ldr	r3, [pc, #108]	; (800df78 <prvAddNewTaskToReadyList+0xd4>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d903      	bls.n	800df18 <prvAddNewTaskToReadyList+0x74>
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df14:	4a18      	ldr	r2, [pc, #96]	; (800df78 <prvAddNewTaskToReadyList+0xd4>)
 800df16:	6013      	str	r3, [r2, #0]
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df1c:	4613      	mov	r3, r2
 800df1e:	009b      	lsls	r3, r3, #2
 800df20:	4413      	add	r3, r2
 800df22:	009b      	lsls	r3, r3, #2
 800df24:	4a15      	ldr	r2, [pc, #84]	; (800df7c <prvAddNewTaskToReadyList+0xd8>)
 800df26:	441a      	add	r2, r3
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	3304      	adds	r3, #4
 800df2c:	4619      	mov	r1, r3
 800df2e:	4610      	mov	r0, r2
 800df30:	f7fe fee9 	bl	800cd06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800df34:	f001 fb4e 	bl	800f5d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800df38:	4b0d      	ldr	r3, [pc, #52]	; (800df70 <prvAddNewTaskToReadyList+0xcc>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d00e      	beq.n	800df5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800df40:	4b0a      	ldr	r3, [pc, #40]	; (800df6c <prvAddNewTaskToReadyList+0xc8>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d207      	bcs.n	800df5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800df4e:	4b0c      	ldr	r3, [pc, #48]	; (800df80 <prvAddNewTaskToReadyList+0xdc>)
 800df50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df54:	601a      	str	r2, [r3, #0]
 800df56:	f3bf 8f4f 	dsb	sy
 800df5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df5e:	bf00      	nop
 800df60:	3708      	adds	r7, #8
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	20001598 	.word	0x20001598
 800df6c:	200010c4 	.word	0x200010c4
 800df70:	200015a4 	.word	0x200015a4
 800df74:	200015b4 	.word	0x200015b4
 800df78:	200015a0 	.word	0x200015a0
 800df7c:	200010c8 	.word	0x200010c8
 800df80:	e000ed04 	.word	0xe000ed04

0800df84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800df84:	b580      	push	{r7, lr}
 800df86:	b084      	sub	sp, #16
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800df8c:	2300      	movs	r3, #0
 800df8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d017      	beq.n	800dfc6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800df96:	4b13      	ldr	r3, [pc, #76]	; (800dfe4 <vTaskDelay+0x60>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d00a      	beq.n	800dfb4 <vTaskDelay+0x30>
	__asm volatile
 800df9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa2:	f383 8811 	msr	BASEPRI, r3
 800dfa6:	f3bf 8f6f 	isb	sy
 800dfaa:	f3bf 8f4f 	dsb	sy
 800dfae:	60bb      	str	r3, [r7, #8]
}
 800dfb0:	bf00      	nop
 800dfb2:	e7fe      	b.n	800dfb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dfb4:	f000 f88a 	bl	800e0cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dfb8:	2100      	movs	r1, #0
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f000 fe0c 	bl	800ebd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dfc0:	f000 f892 	bl	800e0e8 <xTaskResumeAll>
 800dfc4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d107      	bne.n	800dfdc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dfcc:	4b06      	ldr	r3, [pc, #24]	; (800dfe8 <vTaskDelay+0x64>)
 800dfce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfd2:	601a      	str	r2, [r3, #0]
 800dfd4:	f3bf 8f4f 	dsb	sy
 800dfd8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dfdc:	bf00      	nop
 800dfde:	3710      	adds	r7, #16
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}
 800dfe4:	200015c0 	.word	0x200015c0
 800dfe8:	e000ed04 	.word	0xe000ed04

0800dfec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b08a      	sub	sp, #40	; 0x28
 800dff0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dff2:	2300      	movs	r3, #0
 800dff4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dff6:	2300      	movs	r3, #0
 800dff8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dffa:	463a      	mov	r2, r7
 800dffc:	1d39      	adds	r1, r7, #4
 800dffe:	f107 0308 	add.w	r3, r7, #8
 800e002:	4618      	mov	r0, r3
 800e004:	f7fe fe1e 	bl	800cc44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e008:	6839      	ldr	r1, [r7, #0]
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	68ba      	ldr	r2, [r7, #8]
 800e00e:	9202      	str	r2, [sp, #8]
 800e010:	9301      	str	r3, [sp, #4]
 800e012:	2300      	movs	r3, #0
 800e014:	9300      	str	r3, [sp, #0]
 800e016:	2300      	movs	r3, #0
 800e018:	460a      	mov	r2, r1
 800e01a:	4924      	ldr	r1, [pc, #144]	; (800e0ac <vTaskStartScheduler+0xc0>)
 800e01c:	4824      	ldr	r0, [pc, #144]	; (800e0b0 <vTaskStartScheduler+0xc4>)
 800e01e:	f7ff fdf9 	bl	800dc14 <xTaskCreateStatic>
 800e022:	4603      	mov	r3, r0
 800e024:	4a23      	ldr	r2, [pc, #140]	; (800e0b4 <vTaskStartScheduler+0xc8>)
 800e026:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e028:	4b22      	ldr	r3, [pc, #136]	; (800e0b4 <vTaskStartScheduler+0xc8>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d002      	beq.n	800e036 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e030:	2301      	movs	r3, #1
 800e032:	617b      	str	r3, [r7, #20]
 800e034:	e001      	b.n	800e03a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e036:	2300      	movs	r3, #0
 800e038:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d102      	bne.n	800e046 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e040:	f000 fe1e 	bl	800ec80 <xTimerCreateTimerTask>
 800e044:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	2b01      	cmp	r3, #1
 800e04a:	d11b      	bne.n	800e084 <vTaskStartScheduler+0x98>
	__asm volatile
 800e04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e050:	f383 8811 	msr	BASEPRI, r3
 800e054:	f3bf 8f6f 	isb	sy
 800e058:	f3bf 8f4f 	dsb	sy
 800e05c:	613b      	str	r3, [r7, #16]
}
 800e05e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e060:	4b15      	ldr	r3, [pc, #84]	; (800e0b8 <vTaskStartScheduler+0xcc>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	3354      	adds	r3, #84	; 0x54
 800e066:	4a15      	ldr	r2, [pc, #84]	; (800e0bc <vTaskStartScheduler+0xd0>)
 800e068:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e06a:	4b15      	ldr	r3, [pc, #84]	; (800e0c0 <vTaskStartScheduler+0xd4>)
 800e06c:	f04f 32ff 	mov.w	r2, #4294967295
 800e070:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e072:	4b14      	ldr	r3, [pc, #80]	; (800e0c4 <vTaskStartScheduler+0xd8>)
 800e074:	2201      	movs	r2, #1
 800e076:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e078:	4b13      	ldr	r3, [pc, #76]	; (800e0c8 <vTaskStartScheduler+0xdc>)
 800e07a:	2200      	movs	r2, #0
 800e07c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e07e:	f001 f9d7 	bl	800f430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e082:	e00e      	b.n	800e0a2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e08a:	d10a      	bne.n	800e0a2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800e08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e090:	f383 8811 	msr	BASEPRI, r3
 800e094:	f3bf 8f6f 	isb	sy
 800e098:	f3bf 8f4f 	dsb	sy
 800e09c:	60fb      	str	r3, [r7, #12]
}
 800e09e:	bf00      	nop
 800e0a0:	e7fe      	b.n	800e0a0 <vTaskStartScheduler+0xb4>
}
 800e0a2:	bf00      	nop
 800e0a4:	3718      	adds	r7, #24
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}
 800e0aa:	bf00      	nop
 800e0ac:	08010bf0 	.word	0x08010bf0
 800e0b0:	0800e6f1 	.word	0x0800e6f1
 800e0b4:	200015bc 	.word	0x200015bc
 800e0b8:	200010c4 	.word	0x200010c4
 800e0bc:	20000138 	.word	0x20000138
 800e0c0:	200015b8 	.word	0x200015b8
 800e0c4:	200015a4 	.word	0x200015a4
 800e0c8:	2000159c 	.word	0x2000159c

0800e0cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e0d0:	4b04      	ldr	r3, [pc, #16]	; (800e0e4 <vTaskSuspendAll+0x18>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	4a03      	ldr	r2, [pc, #12]	; (800e0e4 <vTaskSuspendAll+0x18>)
 800e0d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e0da:	bf00      	nop
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e2:	4770      	bx	lr
 800e0e4:	200015c0 	.word	0x200015c0

0800e0e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b084      	sub	sp, #16
 800e0ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e0f6:	4b42      	ldr	r3, [pc, #264]	; (800e200 <xTaskResumeAll+0x118>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d10a      	bne.n	800e114 <xTaskResumeAll+0x2c>
	__asm volatile
 800e0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e102:	f383 8811 	msr	BASEPRI, r3
 800e106:	f3bf 8f6f 	isb	sy
 800e10a:	f3bf 8f4f 	dsb	sy
 800e10e:	603b      	str	r3, [r7, #0]
}
 800e110:	bf00      	nop
 800e112:	e7fe      	b.n	800e112 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e114:	f001 fa2e 	bl	800f574 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e118:	4b39      	ldr	r3, [pc, #228]	; (800e200 <xTaskResumeAll+0x118>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	3b01      	subs	r3, #1
 800e11e:	4a38      	ldr	r2, [pc, #224]	; (800e200 <xTaskResumeAll+0x118>)
 800e120:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e122:	4b37      	ldr	r3, [pc, #220]	; (800e200 <xTaskResumeAll+0x118>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d162      	bne.n	800e1f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e12a:	4b36      	ldr	r3, [pc, #216]	; (800e204 <xTaskResumeAll+0x11c>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d05e      	beq.n	800e1f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e132:	e02f      	b.n	800e194 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e134:	4b34      	ldr	r3, [pc, #208]	; (800e208 <xTaskResumeAll+0x120>)
 800e136:	68db      	ldr	r3, [r3, #12]
 800e138:	68db      	ldr	r3, [r3, #12]
 800e13a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	3318      	adds	r3, #24
 800e140:	4618      	mov	r0, r3
 800e142:	f7fe fe3d 	bl	800cdc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	3304      	adds	r3, #4
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7fe fe38 	bl	800cdc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e154:	4b2d      	ldr	r3, [pc, #180]	; (800e20c <xTaskResumeAll+0x124>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	429a      	cmp	r2, r3
 800e15a:	d903      	bls.n	800e164 <xTaskResumeAll+0x7c>
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e160:	4a2a      	ldr	r2, [pc, #168]	; (800e20c <xTaskResumeAll+0x124>)
 800e162:	6013      	str	r3, [r2, #0]
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e168:	4613      	mov	r3, r2
 800e16a:	009b      	lsls	r3, r3, #2
 800e16c:	4413      	add	r3, r2
 800e16e:	009b      	lsls	r3, r3, #2
 800e170:	4a27      	ldr	r2, [pc, #156]	; (800e210 <xTaskResumeAll+0x128>)
 800e172:	441a      	add	r2, r3
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	3304      	adds	r3, #4
 800e178:	4619      	mov	r1, r3
 800e17a:	4610      	mov	r0, r2
 800e17c:	f7fe fdc3 	bl	800cd06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e184:	4b23      	ldr	r3, [pc, #140]	; (800e214 <xTaskResumeAll+0x12c>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e18a:	429a      	cmp	r2, r3
 800e18c:	d302      	bcc.n	800e194 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e18e:	4b22      	ldr	r3, [pc, #136]	; (800e218 <xTaskResumeAll+0x130>)
 800e190:	2201      	movs	r2, #1
 800e192:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e194:	4b1c      	ldr	r3, [pc, #112]	; (800e208 <xTaskResumeAll+0x120>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d1cb      	bne.n	800e134 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d001      	beq.n	800e1a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e1a2:	f000 fb5f 	bl	800e864 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e1a6:	4b1d      	ldr	r3, [pc, #116]	; (800e21c <xTaskResumeAll+0x134>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d010      	beq.n	800e1d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e1b2:	f000 f847 	bl	800e244 <xTaskIncrementTick>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d002      	beq.n	800e1c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e1bc:	4b16      	ldr	r3, [pc, #88]	; (800e218 <xTaskResumeAll+0x130>)
 800e1be:	2201      	movs	r2, #1
 800e1c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	3b01      	subs	r3, #1
 800e1c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d1f1      	bne.n	800e1b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e1ce:	4b13      	ldr	r3, [pc, #76]	; (800e21c <xTaskResumeAll+0x134>)
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e1d4:	4b10      	ldr	r3, [pc, #64]	; (800e218 <xTaskResumeAll+0x130>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d009      	beq.n	800e1f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e1dc:	2301      	movs	r3, #1
 800e1de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e1e0:	4b0f      	ldr	r3, [pc, #60]	; (800e220 <xTaskResumeAll+0x138>)
 800e1e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1e6:	601a      	str	r2, [r3, #0]
 800e1e8:	f3bf 8f4f 	dsb	sy
 800e1ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e1f0:	f001 f9f0 	bl	800f5d4 <vPortExitCritical>

	return xAlreadyYielded;
 800e1f4:	68bb      	ldr	r3, [r7, #8]
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3710      	adds	r7, #16
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
 800e1fe:	bf00      	nop
 800e200:	200015c0 	.word	0x200015c0
 800e204:	20001598 	.word	0x20001598
 800e208:	20001558 	.word	0x20001558
 800e20c:	200015a0 	.word	0x200015a0
 800e210:	200010c8 	.word	0x200010c8
 800e214:	200010c4 	.word	0x200010c4
 800e218:	200015ac 	.word	0x200015ac
 800e21c:	200015a8 	.word	0x200015a8
 800e220:	e000ed04 	.word	0xe000ed04

0800e224 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e22a:	4b05      	ldr	r3, [pc, #20]	; (800e240 <xTaskGetTickCount+0x1c>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e230:	687b      	ldr	r3, [r7, #4]
}
 800e232:	4618      	mov	r0, r3
 800e234:	370c      	adds	r7, #12
 800e236:	46bd      	mov	sp, r7
 800e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23c:	4770      	bx	lr
 800e23e:	bf00      	nop
 800e240:	2000159c 	.word	0x2000159c

0800e244 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b086      	sub	sp, #24
 800e248:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e24a:	2300      	movs	r3, #0
 800e24c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e24e:	4b4f      	ldr	r3, [pc, #316]	; (800e38c <xTaskIncrementTick+0x148>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	2b00      	cmp	r3, #0
 800e254:	f040 808f 	bne.w	800e376 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e258:	4b4d      	ldr	r3, [pc, #308]	; (800e390 <xTaskIncrementTick+0x14c>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	3301      	adds	r3, #1
 800e25e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e260:	4a4b      	ldr	r2, [pc, #300]	; (800e390 <xTaskIncrementTick+0x14c>)
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d120      	bne.n	800e2ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e26c:	4b49      	ldr	r3, [pc, #292]	; (800e394 <xTaskIncrementTick+0x150>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d00a      	beq.n	800e28c <xTaskIncrementTick+0x48>
	__asm volatile
 800e276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e27a:	f383 8811 	msr	BASEPRI, r3
 800e27e:	f3bf 8f6f 	isb	sy
 800e282:	f3bf 8f4f 	dsb	sy
 800e286:	603b      	str	r3, [r7, #0]
}
 800e288:	bf00      	nop
 800e28a:	e7fe      	b.n	800e28a <xTaskIncrementTick+0x46>
 800e28c:	4b41      	ldr	r3, [pc, #260]	; (800e394 <xTaskIncrementTick+0x150>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	60fb      	str	r3, [r7, #12]
 800e292:	4b41      	ldr	r3, [pc, #260]	; (800e398 <xTaskIncrementTick+0x154>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	4a3f      	ldr	r2, [pc, #252]	; (800e394 <xTaskIncrementTick+0x150>)
 800e298:	6013      	str	r3, [r2, #0]
 800e29a:	4a3f      	ldr	r2, [pc, #252]	; (800e398 <xTaskIncrementTick+0x154>)
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	6013      	str	r3, [r2, #0]
 800e2a0:	4b3e      	ldr	r3, [pc, #248]	; (800e39c <xTaskIncrementTick+0x158>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	4a3d      	ldr	r2, [pc, #244]	; (800e39c <xTaskIncrementTick+0x158>)
 800e2a8:	6013      	str	r3, [r2, #0]
 800e2aa:	f000 fadb 	bl	800e864 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e2ae:	4b3c      	ldr	r3, [pc, #240]	; (800e3a0 <xTaskIncrementTick+0x15c>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	693a      	ldr	r2, [r7, #16]
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d349      	bcc.n	800e34c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e2b8:	4b36      	ldr	r3, [pc, #216]	; (800e394 <xTaskIncrementTick+0x150>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d104      	bne.n	800e2cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2c2:	4b37      	ldr	r3, [pc, #220]	; (800e3a0 <xTaskIncrementTick+0x15c>)
 800e2c4:	f04f 32ff 	mov.w	r2, #4294967295
 800e2c8:	601a      	str	r2, [r3, #0]
					break;
 800e2ca:	e03f      	b.n	800e34c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2cc:	4b31      	ldr	r3, [pc, #196]	; (800e394 <xTaskIncrementTick+0x150>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	68db      	ldr	r3, [r3, #12]
 800e2d2:	68db      	ldr	r3, [r3, #12]
 800e2d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e2dc:	693a      	ldr	r2, [r7, #16]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d203      	bcs.n	800e2ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e2e4:	4a2e      	ldr	r2, [pc, #184]	; (800e3a0 <xTaskIncrementTick+0x15c>)
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e2ea:	e02f      	b.n	800e34c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	3304      	adds	r3, #4
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f7fe fd65 	bl	800cdc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d004      	beq.n	800e308 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	3318      	adds	r3, #24
 800e302:	4618      	mov	r0, r3
 800e304:	f7fe fd5c 	bl	800cdc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e30c:	4b25      	ldr	r3, [pc, #148]	; (800e3a4 <xTaskIncrementTick+0x160>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	429a      	cmp	r2, r3
 800e312:	d903      	bls.n	800e31c <xTaskIncrementTick+0xd8>
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e318:	4a22      	ldr	r2, [pc, #136]	; (800e3a4 <xTaskIncrementTick+0x160>)
 800e31a:	6013      	str	r3, [r2, #0]
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e320:	4613      	mov	r3, r2
 800e322:	009b      	lsls	r3, r3, #2
 800e324:	4413      	add	r3, r2
 800e326:	009b      	lsls	r3, r3, #2
 800e328:	4a1f      	ldr	r2, [pc, #124]	; (800e3a8 <xTaskIncrementTick+0x164>)
 800e32a:	441a      	add	r2, r3
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	3304      	adds	r3, #4
 800e330:	4619      	mov	r1, r3
 800e332:	4610      	mov	r0, r2
 800e334:	f7fe fce7 	bl	800cd06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e33c:	4b1b      	ldr	r3, [pc, #108]	; (800e3ac <xTaskIncrementTick+0x168>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e342:	429a      	cmp	r2, r3
 800e344:	d3b8      	bcc.n	800e2b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e346:	2301      	movs	r3, #1
 800e348:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e34a:	e7b5      	b.n	800e2b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e34c:	4b17      	ldr	r3, [pc, #92]	; (800e3ac <xTaskIncrementTick+0x168>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e352:	4915      	ldr	r1, [pc, #84]	; (800e3a8 <xTaskIncrementTick+0x164>)
 800e354:	4613      	mov	r3, r2
 800e356:	009b      	lsls	r3, r3, #2
 800e358:	4413      	add	r3, r2
 800e35a:	009b      	lsls	r3, r3, #2
 800e35c:	440b      	add	r3, r1
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2b01      	cmp	r3, #1
 800e362:	d901      	bls.n	800e368 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e364:	2301      	movs	r3, #1
 800e366:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e368:	4b11      	ldr	r3, [pc, #68]	; (800e3b0 <xTaskIncrementTick+0x16c>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d007      	beq.n	800e380 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e370:	2301      	movs	r3, #1
 800e372:	617b      	str	r3, [r7, #20]
 800e374:	e004      	b.n	800e380 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e376:	4b0f      	ldr	r3, [pc, #60]	; (800e3b4 <xTaskIncrementTick+0x170>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	3301      	adds	r3, #1
 800e37c:	4a0d      	ldr	r2, [pc, #52]	; (800e3b4 <xTaskIncrementTick+0x170>)
 800e37e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e380:	697b      	ldr	r3, [r7, #20]
}
 800e382:	4618      	mov	r0, r3
 800e384:	3718      	adds	r7, #24
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}
 800e38a:	bf00      	nop
 800e38c:	200015c0 	.word	0x200015c0
 800e390:	2000159c 	.word	0x2000159c
 800e394:	20001550 	.word	0x20001550
 800e398:	20001554 	.word	0x20001554
 800e39c:	200015b0 	.word	0x200015b0
 800e3a0:	200015b8 	.word	0x200015b8
 800e3a4:	200015a0 	.word	0x200015a0
 800e3a8:	200010c8 	.word	0x200010c8
 800e3ac:	200010c4 	.word	0x200010c4
 800e3b0:	200015ac 	.word	0x200015ac
 800e3b4:	200015a8 	.word	0x200015a8

0800e3b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b085      	sub	sp, #20
 800e3bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e3be:	4b2a      	ldr	r3, [pc, #168]	; (800e468 <vTaskSwitchContext+0xb0>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d003      	beq.n	800e3ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e3c6:	4b29      	ldr	r3, [pc, #164]	; (800e46c <vTaskSwitchContext+0xb4>)
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e3cc:	e046      	b.n	800e45c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e3ce:	4b27      	ldr	r3, [pc, #156]	; (800e46c <vTaskSwitchContext+0xb4>)
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3d4:	4b26      	ldr	r3, [pc, #152]	; (800e470 <vTaskSwitchContext+0xb8>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	60fb      	str	r3, [r7, #12]
 800e3da:	e010      	b.n	800e3fe <vTaskSwitchContext+0x46>
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d10a      	bne.n	800e3f8 <vTaskSwitchContext+0x40>
	__asm volatile
 800e3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e6:	f383 8811 	msr	BASEPRI, r3
 800e3ea:	f3bf 8f6f 	isb	sy
 800e3ee:	f3bf 8f4f 	dsb	sy
 800e3f2:	607b      	str	r3, [r7, #4]
}
 800e3f4:	bf00      	nop
 800e3f6:	e7fe      	b.n	800e3f6 <vTaskSwitchContext+0x3e>
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	3b01      	subs	r3, #1
 800e3fc:	60fb      	str	r3, [r7, #12]
 800e3fe:	491d      	ldr	r1, [pc, #116]	; (800e474 <vTaskSwitchContext+0xbc>)
 800e400:	68fa      	ldr	r2, [r7, #12]
 800e402:	4613      	mov	r3, r2
 800e404:	009b      	lsls	r3, r3, #2
 800e406:	4413      	add	r3, r2
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	440b      	add	r3, r1
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d0e4      	beq.n	800e3dc <vTaskSwitchContext+0x24>
 800e412:	68fa      	ldr	r2, [r7, #12]
 800e414:	4613      	mov	r3, r2
 800e416:	009b      	lsls	r3, r3, #2
 800e418:	4413      	add	r3, r2
 800e41a:	009b      	lsls	r3, r3, #2
 800e41c:	4a15      	ldr	r2, [pc, #84]	; (800e474 <vTaskSwitchContext+0xbc>)
 800e41e:	4413      	add	r3, r2
 800e420:	60bb      	str	r3, [r7, #8]
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	685b      	ldr	r3, [r3, #4]
 800e426:	685a      	ldr	r2, [r3, #4]
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	605a      	str	r2, [r3, #4]
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	685a      	ldr	r2, [r3, #4]
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	3308      	adds	r3, #8
 800e434:	429a      	cmp	r2, r3
 800e436:	d104      	bne.n	800e442 <vTaskSwitchContext+0x8a>
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	685b      	ldr	r3, [r3, #4]
 800e43c:	685a      	ldr	r2, [r3, #4]
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	605a      	str	r2, [r3, #4]
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	685b      	ldr	r3, [r3, #4]
 800e446:	68db      	ldr	r3, [r3, #12]
 800e448:	4a0b      	ldr	r2, [pc, #44]	; (800e478 <vTaskSwitchContext+0xc0>)
 800e44a:	6013      	str	r3, [r2, #0]
 800e44c:	4a08      	ldr	r2, [pc, #32]	; (800e470 <vTaskSwitchContext+0xb8>)
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e452:	4b09      	ldr	r3, [pc, #36]	; (800e478 <vTaskSwitchContext+0xc0>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	3354      	adds	r3, #84	; 0x54
 800e458:	4a08      	ldr	r2, [pc, #32]	; (800e47c <vTaskSwitchContext+0xc4>)
 800e45a:	6013      	str	r3, [r2, #0]
}
 800e45c:	bf00      	nop
 800e45e:	3714      	adds	r7, #20
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr
 800e468:	200015c0 	.word	0x200015c0
 800e46c:	200015ac 	.word	0x200015ac
 800e470:	200015a0 	.word	0x200015a0
 800e474:	200010c8 	.word	0x200010c8
 800e478:	200010c4 	.word	0x200010c4
 800e47c:	20000138 	.word	0x20000138

0800e480 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b084      	sub	sp, #16
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d10a      	bne.n	800e4a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e494:	f383 8811 	msr	BASEPRI, r3
 800e498:	f3bf 8f6f 	isb	sy
 800e49c:	f3bf 8f4f 	dsb	sy
 800e4a0:	60fb      	str	r3, [r7, #12]
}
 800e4a2:	bf00      	nop
 800e4a4:	e7fe      	b.n	800e4a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e4a6:	4b07      	ldr	r3, [pc, #28]	; (800e4c4 <vTaskPlaceOnEventList+0x44>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	3318      	adds	r3, #24
 800e4ac:	4619      	mov	r1, r3
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f7fe fc4d 	bl	800cd4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e4b4:	2101      	movs	r1, #1
 800e4b6:	6838      	ldr	r0, [r7, #0]
 800e4b8:	f000 fb8e 	bl	800ebd8 <prvAddCurrentTaskToDelayedList>
}
 800e4bc:	bf00      	nop
 800e4be:	3710      	adds	r7, #16
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}
 800e4c4:	200010c4 	.word	0x200010c4

0800e4c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b086      	sub	sp, #24
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	60f8      	str	r0, [r7, #12]
 800e4d0:	60b9      	str	r1, [r7, #8]
 800e4d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d10a      	bne.n	800e4f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4de:	f383 8811 	msr	BASEPRI, r3
 800e4e2:	f3bf 8f6f 	isb	sy
 800e4e6:	f3bf 8f4f 	dsb	sy
 800e4ea:	617b      	str	r3, [r7, #20]
}
 800e4ec:	bf00      	nop
 800e4ee:	e7fe      	b.n	800e4ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e4f0:	4b0a      	ldr	r3, [pc, #40]	; (800e51c <vTaskPlaceOnEventListRestricted+0x54>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	3318      	adds	r3, #24
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	68f8      	ldr	r0, [r7, #12]
 800e4fa:	f7fe fc04 	bl	800cd06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d002      	beq.n	800e50a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e504:	f04f 33ff 	mov.w	r3, #4294967295
 800e508:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e50a:	6879      	ldr	r1, [r7, #4]
 800e50c:	68b8      	ldr	r0, [r7, #8]
 800e50e:	f000 fb63 	bl	800ebd8 <prvAddCurrentTaskToDelayedList>
	}
 800e512:	bf00      	nop
 800e514:	3718      	adds	r7, #24
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}
 800e51a:	bf00      	nop
 800e51c:	200010c4 	.word	0x200010c4

0800e520 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b086      	sub	sp, #24
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	68db      	ldr	r3, [r3, #12]
 800e52c:	68db      	ldr	r3, [r3, #12]
 800e52e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d10a      	bne.n	800e54c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e53a:	f383 8811 	msr	BASEPRI, r3
 800e53e:	f3bf 8f6f 	isb	sy
 800e542:	f3bf 8f4f 	dsb	sy
 800e546:	60fb      	str	r3, [r7, #12]
}
 800e548:	bf00      	nop
 800e54a:	e7fe      	b.n	800e54a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	3318      	adds	r3, #24
 800e550:	4618      	mov	r0, r3
 800e552:	f7fe fc35 	bl	800cdc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e556:	4b1e      	ldr	r3, [pc, #120]	; (800e5d0 <xTaskRemoveFromEventList+0xb0>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d11d      	bne.n	800e59a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e55e:	693b      	ldr	r3, [r7, #16]
 800e560:	3304      	adds	r3, #4
 800e562:	4618      	mov	r0, r3
 800e564:	f7fe fc2c 	bl	800cdc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e568:	693b      	ldr	r3, [r7, #16]
 800e56a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e56c:	4b19      	ldr	r3, [pc, #100]	; (800e5d4 <xTaskRemoveFromEventList+0xb4>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	429a      	cmp	r2, r3
 800e572:	d903      	bls.n	800e57c <xTaskRemoveFromEventList+0x5c>
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e578:	4a16      	ldr	r2, [pc, #88]	; (800e5d4 <xTaskRemoveFromEventList+0xb4>)
 800e57a:	6013      	str	r3, [r2, #0]
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e580:	4613      	mov	r3, r2
 800e582:	009b      	lsls	r3, r3, #2
 800e584:	4413      	add	r3, r2
 800e586:	009b      	lsls	r3, r3, #2
 800e588:	4a13      	ldr	r2, [pc, #76]	; (800e5d8 <xTaskRemoveFromEventList+0xb8>)
 800e58a:	441a      	add	r2, r3
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	3304      	adds	r3, #4
 800e590:	4619      	mov	r1, r3
 800e592:	4610      	mov	r0, r2
 800e594:	f7fe fbb7 	bl	800cd06 <vListInsertEnd>
 800e598:	e005      	b.n	800e5a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e59a:	693b      	ldr	r3, [r7, #16]
 800e59c:	3318      	adds	r3, #24
 800e59e:	4619      	mov	r1, r3
 800e5a0:	480e      	ldr	r0, [pc, #56]	; (800e5dc <xTaskRemoveFromEventList+0xbc>)
 800e5a2:	f7fe fbb0 	bl	800cd06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e5a6:	693b      	ldr	r3, [r7, #16]
 800e5a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5aa:	4b0d      	ldr	r3, [pc, #52]	; (800e5e0 <xTaskRemoveFromEventList+0xc0>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d905      	bls.n	800e5c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e5b8:	4b0a      	ldr	r3, [pc, #40]	; (800e5e4 <xTaskRemoveFromEventList+0xc4>)
 800e5ba:	2201      	movs	r2, #1
 800e5bc:	601a      	str	r2, [r3, #0]
 800e5be:	e001      	b.n	800e5c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e5c4:	697b      	ldr	r3, [r7, #20]
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3718      	adds	r7, #24
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
 800e5ce:	bf00      	nop
 800e5d0:	200015c0 	.word	0x200015c0
 800e5d4:	200015a0 	.word	0x200015a0
 800e5d8:	200010c8 	.word	0x200010c8
 800e5dc:	20001558 	.word	0x20001558
 800e5e0:	200010c4 	.word	0x200010c4
 800e5e4:	200015ac 	.word	0x200015ac

0800e5e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b083      	sub	sp, #12
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e5f0:	4b06      	ldr	r3, [pc, #24]	; (800e60c <vTaskInternalSetTimeOutState+0x24>)
 800e5f2:	681a      	ldr	r2, [r3, #0]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e5f8:	4b05      	ldr	r3, [pc, #20]	; (800e610 <vTaskInternalSetTimeOutState+0x28>)
 800e5fa:	681a      	ldr	r2, [r3, #0]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	605a      	str	r2, [r3, #4]
}
 800e600:	bf00      	nop
 800e602:	370c      	adds	r7, #12
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr
 800e60c:	200015b0 	.word	0x200015b0
 800e610:	2000159c 	.word	0x2000159c

0800e614 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b088      	sub	sp, #32
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d10a      	bne.n	800e63a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e628:	f383 8811 	msr	BASEPRI, r3
 800e62c:	f3bf 8f6f 	isb	sy
 800e630:	f3bf 8f4f 	dsb	sy
 800e634:	613b      	str	r3, [r7, #16]
}
 800e636:	bf00      	nop
 800e638:	e7fe      	b.n	800e638 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d10a      	bne.n	800e656 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e644:	f383 8811 	msr	BASEPRI, r3
 800e648:	f3bf 8f6f 	isb	sy
 800e64c:	f3bf 8f4f 	dsb	sy
 800e650:	60fb      	str	r3, [r7, #12]
}
 800e652:	bf00      	nop
 800e654:	e7fe      	b.n	800e654 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e656:	f000 ff8d 	bl	800f574 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e65a:	4b1d      	ldr	r3, [pc, #116]	; (800e6d0 <xTaskCheckForTimeOut+0xbc>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	69ba      	ldr	r2, [r7, #24]
 800e666:	1ad3      	subs	r3, r2, r3
 800e668:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e672:	d102      	bne.n	800e67a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e674:	2300      	movs	r3, #0
 800e676:	61fb      	str	r3, [r7, #28]
 800e678:	e023      	b.n	800e6c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681a      	ldr	r2, [r3, #0]
 800e67e:	4b15      	ldr	r3, [pc, #84]	; (800e6d4 <xTaskCheckForTimeOut+0xc0>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	429a      	cmp	r2, r3
 800e684:	d007      	beq.n	800e696 <xTaskCheckForTimeOut+0x82>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	685b      	ldr	r3, [r3, #4]
 800e68a:	69ba      	ldr	r2, [r7, #24]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d302      	bcc.n	800e696 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e690:	2301      	movs	r3, #1
 800e692:	61fb      	str	r3, [r7, #28]
 800e694:	e015      	b.n	800e6c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	697a      	ldr	r2, [r7, #20]
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d20b      	bcs.n	800e6b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	681a      	ldr	r2, [r3, #0]
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	1ad2      	subs	r2, r2, r3
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f7ff ff9b 	bl	800e5e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	61fb      	str	r3, [r7, #28]
 800e6b6:	e004      	b.n	800e6c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e6be:	2301      	movs	r3, #1
 800e6c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e6c2:	f000 ff87 	bl	800f5d4 <vPortExitCritical>

	return xReturn;
 800e6c6:	69fb      	ldr	r3, [r7, #28]
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3720      	adds	r7, #32
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	2000159c 	.word	0x2000159c
 800e6d4:	200015b0 	.word	0x200015b0

0800e6d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e6d8:	b480      	push	{r7}
 800e6da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e6dc:	4b03      	ldr	r3, [pc, #12]	; (800e6ec <vTaskMissedYield+0x14>)
 800e6de:	2201      	movs	r2, #1
 800e6e0:	601a      	str	r2, [r3, #0]
}
 800e6e2:	bf00      	nop
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr
 800e6ec:	200015ac 	.word	0x200015ac

0800e6f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b082      	sub	sp, #8
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e6f8:	f000 f852 	bl	800e7a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e6fc:	4b06      	ldr	r3, [pc, #24]	; (800e718 <prvIdleTask+0x28>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	2b01      	cmp	r3, #1
 800e702:	d9f9      	bls.n	800e6f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e704:	4b05      	ldr	r3, [pc, #20]	; (800e71c <prvIdleTask+0x2c>)
 800e706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e70a:	601a      	str	r2, [r3, #0]
 800e70c:	f3bf 8f4f 	dsb	sy
 800e710:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e714:	e7f0      	b.n	800e6f8 <prvIdleTask+0x8>
 800e716:	bf00      	nop
 800e718:	200010c8 	.word	0x200010c8
 800e71c:	e000ed04 	.word	0xe000ed04

0800e720 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b082      	sub	sp, #8
 800e724:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e726:	2300      	movs	r3, #0
 800e728:	607b      	str	r3, [r7, #4]
 800e72a:	e00c      	b.n	800e746 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	4613      	mov	r3, r2
 800e730:	009b      	lsls	r3, r3, #2
 800e732:	4413      	add	r3, r2
 800e734:	009b      	lsls	r3, r3, #2
 800e736:	4a12      	ldr	r2, [pc, #72]	; (800e780 <prvInitialiseTaskLists+0x60>)
 800e738:	4413      	add	r3, r2
 800e73a:	4618      	mov	r0, r3
 800e73c:	f7fe fab6 	bl	800ccac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	3301      	adds	r3, #1
 800e744:	607b      	str	r3, [r7, #4]
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2b37      	cmp	r3, #55	; 0x37
 800e74a:	d9ef      	bls.n	800e72c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e74c:	480d      	ldr	r0, [pc, #52]	; (800e784 <prvInitialiseTaskLists+0x64>)
 800e74e:	f7fe faad 	bl	800ccac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e752:	480d      	ldr	r0, [pc, #52]	; (800e788 <prvInitialiseTaskLists+0x68>)
 800e754:	f7fe faaa 	bl	800ccac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e758:	480c      	ldr	r0, [pc, #48]	; (800e78c <prvInitialiseTaskLists+0x6c>)
 800e75a:	f7fe faa7 	bl	800ccac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e75e:	480c      	ldr	r0, [pc, #48]	; (800e790 <prvInitialiseTaskLists+0x70>)
 800e760:	f7fe faa4 	bl	800ccac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e764:	480b      	ldr	r0, [pc, #44]	; (800e794 <prvInitialiseTaskLists+0x74>)
 800e766:	f7fe faa1 	bl	800ccac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e76a:	4b0b      	ldr	r3, [pc, #44]	; (800e798 <prvInitialiseTaskLists+0x78>)
 800e76c:	4a05      	ldr	r2, [pc, #20]	; (800e784 <prvInitialiseTaskLists+0x64>)
 800e76e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e770:	4b0a      	ldr	r3, [pc, #40]	; (800e79c <prvInitialiseTaskLists+0x7c>)
 800e772:	4a05      	ldr	r2, [pc, #20]	; (800e788 <prvInitialiseTaskLists+0x68>)
 800e774:	601a      	str	r2, [r3, #0]
}
 800e776:	bf00      	nop
 800e778:	3708      	adds	r7, #8
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}
 800e77e:	bf00      	nop
 800e780:	200010c8 	.word	0x200010c8
 800e784:	20001528 	.word	0x20001528
 800e788:	2000153c 	.word	0x2000153c
 800e78c:	20001558 	.word	0x20001558
 800e790:	2000156c 	.word	0x2000156c
 800e794:	20001584 	.word	0x20001584
 800e798:	20001550 	.word	0x20001550
 800e79c:	20001554 	.word	0x20001554

0800e7a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b082      	sub	sp, #8
 800e7a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e7a6:	e019      	b.n	800e7dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e7a8:	f000 fee4 	bl	800f574 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7ac:	4b10      	ldr	r3, [pc, #64]	; (800e7f0 <prvCheckTasksWaitingTermination+0x50>)
 800e7ae:	68db      	ldr	r3, [r3, #12]
 800e7b0:	68db      	ldr	r3, [r3, #12]
 800e7b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	3304      	adds	r3, #4
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f7fe fb01 	bl	800cdc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e7be:	4b0d      	ldr	r3, [pc, #52]	; (800e7f4 <prvCheckTasksWaitingTermination+0x54>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	3b01      	subs	r3, #1
 800e7c4:	4a0b      	ldr	r2, [pc, #44]	; (800e7f4 <prvCheckTasksWaitingTermination+0x54>)
 800e7c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e7c8:	4b0b      	ldr	r3, [pc, #44]	; (800e7f8 <prvCheckTasksWaitingTermination+0x58>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	3b01      	subs	r3, #1
 800e7ce:	4a0a      	ldr	r2, [pc, #40]	; (800e7f8 <prvCheckTasksWaitingTermination+0x58>)
 800e7d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e7d2:	f000 feff 	bl	800f5d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f000 f810 	bl	800e7fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e7dc:	4b06      	ldr	r3, [pc, #24]	; (800e7f8 <prvCheckTasksWaitingTermination+0x58>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d1e1      	bne.n	800e7a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e7e4:	bf00      	nop
 800e7e6:	bf00      	nop
 800e7e8:	3708      	adds	r7, #8
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}
 800e7ee:	bf00      	nop
 800e7f0:	2000156c 	.word	0x2000156c
 800e7f4:	20001598 	.word	0x20001598
 800e7f8:	20001580 	.word	0x20001580

0800e7fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b084      	sub	sp, #16
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	3354      	adds	r3, #84	; 0x54
 800e808:	4618      	mov	r0, r3
 800e80a:	f002 f823 	bl	8010854 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e814:	2b00      	cmp	r3, #0
 800e816:	d108      	bne.n	800e82a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e81c:	4618      	mov	r0, r3
 800e81e:	f001 f897 	bl	800f950 <vPortFree>
				vPortFree( pxTCB );
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f001 f894 	bl	800f950 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e828:	e018      	b.n	800e85c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e830:	2b01      	cmp	r3, #1
 800e832:	d103      	bne.n	800e83c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f001 f88b 	bl	800f950 <vPortFree>
	}
 800e83a:	e00f      	b.n	800e85c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e842:	2b02      	cmp	r3, #2
 800e844:	d00a      	beq.n	800e85c <prvDeleteTCB+0x60>
	__asm volatile
 800e846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e84a:	f383 8811 	msr	BASEPRI, r3
 800e84e:	f3bf 8f6f 	isb	sy
 800e852:	f3bf 8f4f 	dsb	sy
 800e856:	60fb      	str	r3, [r7, #12]
}
 800e858:	bf00      	nop
 800e85a:	e7fe      	b.n	800e85a <prvDeleteTCB+0x5e>
	}
 800e85c:	bf00      	nop
 800e85e:	3710      	adds	r7, #16
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}

0800e864 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e864:	b480      	push	{r7}
 800e866:	b083      	sub	sp, #12
 800e868:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e86a:	4b0c      	ldr	r3, [pc, #48]	; (800e89c <prvResetNextTaskUnblockTime+0x38>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d104      	bne.n	800e87e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e874:	4b0a      	ldr	r3, [pc, #40]	; (800e8a0 <prvResetNextTaskUnblockTime+0x3c>)
 800e876:	f04f 32ff 	mov.w	r2, #4294967295
 800e87a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e87c:	e008      	b.n	800e890 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e87e:	4b07      	ldr	r3, [pc, #28]	; (800e89c <prvResetNextTaskUnblockTime+0x38>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	68db      	ldr	r3, [r3, #12]
 800e884:	68db      	ldr	r3, [r3, #12]
 800e886:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	685b      	ldr	r3, [r3, #4]
 800e88c:	4a04      	ldr	r2, [pc, #16]	; (800e8a0 <prvResetNextTaskUnblockTime+0x3c>)
 800e88e:	6013      	str	r3, [r2, #0]
}
 800e890:	bf00      	nop
 800e892:	370c      	adds	r7, #12
 800e894:	46bd      	mov	sp, r7
 800e896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89a:	4770      	bx	lr
 800e89c:	20001550 	.word	0x20001550
 800e8a0:	200015b8 	.word	0x200015b8

0800e8a4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b083      	sub	sp, #12
 800e8a8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e8aa:	4b05      	ldr	r3, [pc, #20]	; (800e8c0 <xTaskGetCurrentTaskHandle+0x1c>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e8b0:	687b      	ldr	r3, [r7, #4]
	}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	370c      	adds	r7, #12
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8bc:	4770      	bx	lr
 800e8be:	bf00      	nop
 800e8c0:	200010c4 	.word	0x200010c4

0800e8c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b083      	sub	sp, #12
 800e8c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e8ca:	4b0b      	ldr	r3, [pc, #44]	; (800e8f8 <xTaskGetSchedulerState+0x34>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d102      	bne.n	800e8d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	607b      	str	r3, [r7, #4]
 800e8d6:	e008      	b.n	800e8ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8d8:	4b08      	ldr	r3, [pc, #32]	; (800e8fc <xTaskGetSchedulerState+0x38>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d102      	bne.n	800e8e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e8e0:	2302      	movs	r3, #2
 800e8e2:	607b      	str	r3, [r7, #4]
 800e8e4:	e001      	b.n	800e8ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e8ea:	687b      	ldr	r3, [r7, #4]
	}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	370c      	adds	r7, #12
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr
 800e8f8:	200015a4 	.word	0x200015a4
 800e8fc:	200015c0 	.word	0x200015c0

0800e900 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e900:	b580      	push	{r7, lr}
 800e902:	b084      	sub	sp, #16
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e90c:	2300      	movs	r3, #0
 800e90e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d051      	beq.n	800e9ba <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e91a:	4b2a      	ldr	r3, [pc, #168]	; (800e9c4 <xTaskPriorityInherit+0xc4>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e920:	429a      	cmp	r2, r3
 800e922:	d241      	bcs.n	800e9a8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	699b      	ldr	r3, [r3, #24]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	db06      	blt.n	800e93a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e92c:	4b25      	ldr	r3, [pc, #148]	; (800e9c4 <xTaskPriorityInherit+0xc4>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e932:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	6959      	ldr	r1, [r3, #20]
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e942:	4613      	mov	r3, r2
 800e944:	009b      	lsls	r3, r3, #2
 800e946:	4413      	add	r3, r2
 800e948:	009b      	lsls	r3, r3, #2
 800e94a:	4a1f      	ldr	r2, [pc, #124]	; (800e9c8 <xTaskPriorityInherit+0xc8>)
 800e94c:	4413      	add	r3, r2
 800e94e:	4299      	cmp	r1, r3
 800e950:	d122      	bne.n	800e998 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	3304      	adds	r3, #4
 800e956:	4618      	mov	r0, r3
 800e958:	f7fe fa32 	bl	800cdc0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e95c:	4b19      	ldr	r3, [pc, #100]	; (800e9c4 <xTaskPriorityInherit+0xc4>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e966:	68bb      	ldr	r3, [r7, #8]
 800e968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e96a:	4b18      	ldr	r3, [pc, #96]	; (800e9cc <xTaskPriorityInherit+0xcc>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	429a      	cmp	r2, r3
 800e970:	d903      	bls.n	800e97a <xTaskPriorityInherit+0x7a>
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e976:	4a15      	ldr	r2, [pc, #84]	; (800e9cc <xTaskPriorityInherit+0xcc>)
 800e978:	6013      	str	r3, [r2, #0]
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e97e:	4613      	mov	r3, r2
 800e980:	009b      	lsls	r3, r3, #2
 800e982:	4413      	add	r3, r2
 800e984:	009b      	lsls	r3, r3, #2
 800e986:	4a10      	ldr	r2, [pc, #64]	; (800e9c8 <xTaskPriorityInherit+0xc8>)
 800e988:	441a      	add	r2, r3
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	3304      	adds	r3, #4
 800e98e:	4619      	mov	r1, r3
 800e990:	4610      	mov	r0, r2
 800e992:	f7fe f9b8 	bl	800cd06 <vListInsertEnd>
 800e996:	e004      	b.n	800e9a2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e998:	4b0a      	ldr	r3, [pc, #40]	; (800e9c4 <xTaskPriorityInherit+0xc4>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	60fb      	str	r3, [r7, #12]
 800e9a6:	e008      	b.n	800e9ba <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e9ac:	4b05      	ldr	r3, [pc, #20]	; (800e9c4 <xTaskPriorityInherit+0xc4>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9b2:	429a      	cmp	r2, r3
 800e9b4:	d201      	bcs.n	800e9ba <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
	}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3710      	adds	r7, #16
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}
 800e9c4:	200010c4 	.word	0x200010c4
 800e9c8:	200010c8 	.word	0x200010c8
 800e9cc:	200015a0 	.word	0x200015a0

0800e9d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b086      	sub	sp, #24
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d056      	beq.n	800ea94 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e9e6:	4b2e      	ldr	r3, [pc, #184]	; (800eaa0 <xTaskPriorityDisinherit+0xd0>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	693a      	ldr	r2, [r7, #16]
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d00a      	beq.n	800ea06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f4:	f383 8811 	msr	BASEPRI, r3
 800e9f8:	f3bf 8f6f 	isb	sy
 800e9fc:	f3bf 8f4f 	dsb	sy
 800ea00:	60fb      	str	r3, [r7, #12]
}
 800ea02:	bf00      	nop
 800ea04:	e7fe      	b.n	800ea04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d10a      	bne.n	800ea24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ea0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea12:	f383 8811 	msr	BASEPRI, r3
 800ea16:	f3bf 8f6f 	isb	sy
 800ea1a:	f3bf 8f4f 	dsb	sy
 800ea1e:	60bb      	str	r3, [r7, #8]
}
 800ea20:	bf00      	nop
 800ea22:	e7fe      	b.n	800ea22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ea24:	693b      	ldr	r3, [r7, #16]
 800ea26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea28:	1e5a      	subs	r2, r3, #1
 800ea2a:	693b      	ldr	r3, [r7, #16]
 800ea2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea32:	693b      	ldr	r3, [r7, #16]
 800ea34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d02c      	beq.n	800ea94 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ea3a:	693b      	ldr	r3, [r7, #16]
 800ea3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d128      	bne.n	800ea94 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	3304      	adds	r3, #4
 800ea46:	4618      	mov	r0, r3
 800ea48:	f7fe f9ba 	bl	800cdc0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ea50:	693b      	ldr	r3, [r7, #16]
 800ea52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea54:	693b      	ldr	r3, [r7, #16]
 800ea56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ea5c:	693b      	ldr	r3, [r7, #16]
 800ea5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ea60:	693b      	ldr	r3, [r7, #16]
 800ea62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea64:	4b0f      	ldr	r3, [pc, #60]	; (800eaa4 <xTaskPriorityDisinherit+0xd4>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	d903      	bls.n	800ea74 <xTaskPriorityDisinherit+0xa4>
 800ea6c:	693b      	ldr	r3, [r7, #16]
 800ea6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea70:	4a0c      	ldr	r2, [pc, #48]	; (800eaa4 <xTaskPriorityDisinherit+0xd4>)
 800ea72:	6013      	str	r3, [r2, #0]
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea78:	4613      	mov	r3, r2
 800ea7a:	009b      	lsls	r3, r3, #2
 800ea7c:	4413      	add	r3, r2
 800ea7e:	009b      	lsls	r3, r3, #2
 800ea80:	4a09      	ldr	r2, [pc, #36]	; (800eaa8 <xTaskPriorityDisinherit+0xd8>)
 800ea82:	441a      	add	r2, r3
 800ea84:	693b      	ldr	r3, [r7, #16]
 800ea86:	3304      	adds	r3, #4
 800ea88:	4619      	mov	r1, r3
 800ea8a:	4610      	mov	r0, r2
 800ea8c:	f7fe f93b 	bl	800cd06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ea90:	2301      	movs	r3, #1
 800ea92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ea94:	697b      	ldr	r3, [r7, #20]
	}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3718      	adds	r7, #24
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
 800ea9e:	bf00      	nop
 800eaa0:	200010c4 	.word	0x200010c4
 800eaa4:	200015a0 	.word	0x200015a0
 800eaa8:	200010c8 	.word	0x200010c8

0800eaac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b088      	sub	sp, #32
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800eaba:	2301      	movs	r3, #1
 800eabc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d06a      	beq.n	800eb9a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800eac4:	69bb      	ldr	r3, [r7, #24]
 800eac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d10a      	bne.n	800eae2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800eacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead0:	f383 8811 	msr	BASEPRI, r3
 800ead4:	f3bf 8f6f 	isb	sy
 800ead8:	f3bf 8f4f 	dsb	sy
 800eadc:	60fb      	str	r3, [r7, #12]
}
 800eade:	bf00      	nop
 800eae0:	e7fe      	b.n	800eae0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800eae2:	69bb      	ldr	r3, [r7, #24]
 800eae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eae6:	683a      	ldr	r2, [r7, #0]
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d902      	bls.n	800eaf2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	61fb      	str	r3, [r7, #28]
 800eaf0:	e002      	b.n	800eaf8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800eaf2:	69bb      	ldr	r3, [r7, #24]
 800eaf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eaf6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800eaf8:	69bb      	ldr	r3, [r7, #24]
 800eafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eafc:	69fa      	ldr	r2, [r7, #28]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d04b      	beq.n	800eb9a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800eb02:	69bb      	ldr	r3, [r7, #24]
 800eb04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb06:	697a      	ldr	r2, [r7, #20]
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d146      	bne.n	800eb9a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800eb0c:	4b25      	ldr	r3, [pc, #148]	; (800eba4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	69ba      	ldr	r2, [r7, #24]
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d10a      	bne.n	800eb2c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800eb16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb1a:	f383 8811 	msr	BASEPRI, r3
 800eb1e:	f3bf 8f6f 	isb	sy
 800eb22:	f3bf 8f4f 	dsb	sy
 800eb26:	60bb      	str	r3, [r7, #8]
}
 800eb28:	bf00      	nop
 800eb2a:	e7fe      	b.n	800eb2a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800eb2c:	69bb      	ldr	r3, [r7, #24]
 800eb2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb30:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800eb32:	69bb      	ldr	r3, [r7, #24]
 800eb34:	69fa      	ldr	r2, [r7, #28]
 800eb36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eb38:	69bb      	ldr	r3, [r7, #24]
 800eb3a:	699b      	ldr	r3, [r3, #24]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	db04      	blt.n	800eb4a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb40:	69fb      	ldr	r3, [r7, #28]
 800eb42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eb46:	69bb      	ldr	r3, [r7, #24]
 800eb48:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800eb4a:	69bb      	ldr	r3, [r7, #24]
 800eb4c:	6959      	ldr	r1, [r3, #20]
 800eb4e:	693a      	ldr	r2, [r7, #16]
 800eb50:	4613      	mov	r3, r2
 800eb52:	009b      	lsls	r3, r3, #2
 800eb54:	4413      	add	r3, r2
 800eb56:	009b      	lsls	r3, r3, #2
 800eb58:	4a13      	ldr	r2, [pc, #76]	; (800eba8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800eb5a:	4413      	add	r3, r2
 800eb5c:	4299      	cmp	r1, r3
 800eb5e:	d11c      	bne.n	800eb9a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb60:	69bb      	ldr	r3, [r7, #24]
 800eb62:	3304      	adds	r3, #4
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7fe f92b 	bl	800cdc0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800eb6a:	69bb      	ldr	r3, [r7, #24]
 800eb6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb6e:	4b0f      	ldr	r3, [pc, #60]	; (800ebac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	429a      	cmp	r2, r3
 800eb74:	d903      	bls.n	800eb7e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800eb76:	69bb      	ldr	r3, [r7, #24]
 800eb78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb7a:	4a0c      	ldr	r2, [pc, #48]	; (800ebac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800eb7c:	6013      	str	r3, [r2, #0]
 800eb7e:	69bb      	ldr	r3, [r7, #24]
 800eb80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb82:	4613      	mov	r3, r2
 800eb84:	009b      	lsls	r3, r3, #2
 800eb86:	4413      	add	r3, r2
 800eb88:	009b      	lsls	r3, r3, #2
 800eb8a:	4a07      	ldr	r2, [pc, #28]	; (800eba8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800eb8c:	441a      	add	r2, r3
 800eb8e:	69bb      	ldr	r3, [r7, #24]
 800eb90:	3304      	adds	r3, #4
 800eb92:	4619      	mov	r1, r3
 800eb94:	4610      	mov	r0, r2
 800eb96:	f7fe f8b6 	bl	800cd06 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eb9a:	bf00      	nop
 800eb9c:	3720      	adds	r7, #32
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}
 800eba2:	bf00      	nop
 800eba4:	200010c4 	.word	0x200010c4
 800eba8:	200010c8 	.word	0x200010c8
 800ebac:	200015a0 	.word	0x200015a0

0800ebb0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ebb0:	b480      	push	{r7}
 800ebb2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ebb4:	4b07      	ldr	r3, [pc, #28]	; (800ebd4 <pvTaskIncrementMutexHeldCount+0x24>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d004      	beq.n	800ebc6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ebbc:	4b05      	ldr	r3, [pc, #20]	; (800ebd4 <pvTaskIncrementMutexHeldCount+0x24>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ebc2:	3201      	adds	r2, #1
 800ebc4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ebc6:	4b03      	ldr	r3, [pc, #12]	; (800ebd4 <pvTaskIncrementMutexHeldCount+0x24>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
	}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr
 800ebd4:	200010c4 	.word	0x200010c4

0800ebd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b084      	sub	sp, #16
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ebe2:	4b21      	ldr	r3, [pc, #132]	; (800ec68 <prvAddCurrentTaskToDelayedList+0x90>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebe8:	4b20      	ldr	r3, [pc, #128]	; (800ec6c <prvAddCurrentTaskToDelayedList+0x94>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	3304      	adds	r3, #4
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7fe f8e6 	bl	800cdc0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebfa:	d10a      	bne.n	800ec12 <prvAddCurrentTaskToDelayedList+0x3a>
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d007      	beq.n	800ec12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec02:	4b1a      	ldr	r3, [pc, #104]	; (800ec6c <prvAddCurrentTaskToDelayedList+0x94>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	3304      	adds	r3, #4
 800ec08:	4619      	mov	r1, r3
 800ec0a:	4819      	ldr	r0, [pc, #100]	; (800ec70 <prvAddCurrentTaskToDelayedList+0x98>)
 800ec0c:	f7fe f87b 	bl	800cd06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ec10:	e026      	b.n	800ec60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ec12:	68fa      	ldr	r2, [r7, #12]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	4413      	add	r3, r2
 800ec18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ec1a:	4b14      	ldr	r3, [pc, #80]	; (800ec6c <prvAddCurrentTaskToDelayedList+0x94>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	68ba      	ldr	r2, [r7, #8]
 800ec20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ec22:	68ba      	ldr	r2, [r7, #8]
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d209      	bcs.n	800ec3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec2a:	4b12      	ldr	r3, [pc, #72]	; (800ec74 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ec2c:	681a      	ldr	r2, [r3, #0]
 800ec2e:	4b0f      	ldr	r3, [pc, #60]	; (800ec6c <prvAddCurrentTaskToDelayedList+0x94>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	3304      	adds	r3, #4
 800ec34:	4619      	mov	r1, r3
 800ec36:	4610      	mov	r0, r2
 800ec38:	f7fe f889 	bl	800cd4e <vListInsert>
}
 800ec3c:	e010      	b.n	800ec60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec3e:	4b0e      	ldr	r3, [pc, #56]	; (800ec78 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ec40:	681a      	ldr	r2, [r3, #0]
 800ec42:	4b0a      	ldr	r3, [pc, #40]	; (800ec6c <prvAddCurrentTaskToDelayedList+0x94>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	3304      	adds	r3, #4
 800ec48:	4619      	mov	r1, r3
 800ec4a:	4610      	mov	r0, r2
 800ec4c:	f7fe f87f 	bl	800cd4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ec50:	4b0a      	ldr	r3, [pc, #40]	; (800ec7c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	68ba      	ldr	r2, [r7, #8]
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d202      	bcs.n	800ec60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ec5a:	4a08      	ldr	r2, [pc, #32]	; (800ec7c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	6013      	str	r3, [r2, #0]
}
 800ec60:	bf00      	nop
 800ec62:	3710      	adds	r7, #16
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}
 800ec68:	2000159c 	.word	0x2000159c
 800ec6c:	200010c4 	.word	0x200010c4
 800ec70:	20001584 	.word	0x20001584
 800ec74:	20001554 	.word	0x20001554
 800ec78:	20001550 	.word	0x20001550
 800ec7c:	200015b8 	.word	0x200015b8

0800ec80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b08a      	sub	sp, #40	; 0x28
 800ec84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ec86:	2300      	movs	r3, #0
 800ec88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ec8a:	f000 fb07 	bl	800f29c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ec8e:	4b1c      	ldr	r3, [pc, #112]	; (800ed00 <xTimerCreateTimerTask+0x80>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d021      	beq.n	800ecda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ec96:	2300      	movs	r3, #0
 800ec98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ec9e:	1d3a      	adds	r2, r7, #4
 800eca0:	f107 0108 	add.w	r1, r7, #8
 800eca4:	f107 030c 	add.w	r3, r7, #12
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f7fd ffe5 	bl	800cc78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ecae:	6879      	ldr	r1, [r7, #4]
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	68fa      	ldr	r2, [r7, #12]
 800ecb4:	9202      	str	r2, [sp, #8]
 800ecb6:	9301      	str	r3, [sp, #4]
 800ecb8:	2302      	movs	r3, #2
 800ecba:	9300      	str	r3, [sp, #0]
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	460a      	mov	r2, r1
 800ecc0:	4910      	ldr	r1, [pc, #64]	; (800ed04 <xTimerCreateTimerTask+0x84>)
 800ecc2:	4811      	ldr	r0, [pc, #68]	; (800ed08 <xTimerCreateTimerTask+0x88>)
 800ecc4:	f7fe ffa6 	bl	800dc14 <xTaskCreateStatic>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	4a10      	ldr	r2, [pc, #64]	; (800ed0c <xTimerCreateTimerTask+0x8c>)
 800eccc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ecce:	4b0f      	ldr	r3, [pc, #60]	; (800ed0c <xTimerCreateTimerTask+0x8c>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d001      	beq.n	800ecda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d10a      	bne.n	800ecf6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ece0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ece4:	f383 8811 	msr	BASEPRI, r3
 800ece8:	f3bf 8f6f 	isb	sy
 800ecec:	f3bf 8f4f 	dsb	sy
 800ecf0:	613b      	str	r3, [r7, #16]
}
 800ecf2:	bf00      	nop
 800ecf4:	e7fe      	b.n	800ecf4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ecf6:	697b      	ldr	r3, [r7, #20]
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3718      	adds	r7, #24
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}
 800ed00:	200015f4 	.word	0x200015f4
 800ed04:	08010bf8 	.word	0x08010bf8
 800ed08:	0800ee45 	.word	0x0800ee45
 800ed0c:	200015f8 	.word	0x200015f8

0800ed10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b08a      	sub	sp, #40	; 0x28
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	60f8      	str	r0, [r7, #12]
 800ed18:	60b9      	str	r1, [r7, #8]
 800ed1a:	607a      	str	r2, [r7, #4]
 800ed1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d10a      	bne.n	800ed3e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ed28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed2c:	f383 8811 	msr	BASEPRI, r3
 800ed30:	f3bf 8f6f 	isb	sy
 800ed34:	f3bf 8f4f 	dsb	sy
 800ed38:	623b      	str	r3, [r7, #32]
}
 800ed3a:	bf00      	nop
 800ed3c:	e7fe      	b.n	800ed3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ed3e:	4b1a      	ldr	r3, [pc, #104]	; (800eda8 <xTimerGenericCommand+0x98>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d02a      	beq.n	800ed9c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	2b05      	cmp	r3, #5
 800ed56:	dc18      	bgt.n	800ed8a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ed58:	f7ff fdb4 	bl	800e8c4 <xTaskGetSchedulerState>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	2b02      	cmp	r3, #2
 800ed60:	d109      	bne.n	800ed76 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ed62:	4b11      	ldr	r3, [pc, #68]	; (800eda8 <xTimerGenericCommand+0x98>)
 800ed64:	6818      	ldr	r0, [r3, #0]
 800ed66:	f107 0110 	add.w	r1, r7, #16
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed6e:	f7fe fa45 	bl	800d1fc <xQueueGenericSend>
 800ed72:	6278      	str	r0, [r7, #36]	; 0x24
 800ed74:	e012      	b.n	800ed9c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ed76:	4b0c      	ldr	r3, [pc, #48]	; (800eda8 <xTimerGenericCommand+0x98>)
 800ed78:	6818      	ldr	r0, [r3, #0]
 800ed7a:	f107 0110 	add.w	r1, r7, #16
 800ed7e:	2300      	movs	r3, #0
 800ed80:	2200      	movs	r2, #0
 800ed82:	f7fe fa3b 	bl	800d1fc <xQueueGenericSend>
 800ed86:	6278      	str	r0, [r7, #36]	; 0x24
 800ed88:	e008      	b.n	800ed9c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ed8a:	4b07      	ldr	r3, [pc, #28]	; (800eda8 <xTimerGenericCommand+0x98>)
 800ed8c:	6818      	ldr	r0, [r3, #0]
 800ed8e:	f107 0110 	add.w	r1, r7, #16
 800ed92:	2300      	movs	r3, #0
 800ed94:	683a      	ldr	r2, [r7, #0]
 800ed96:	f7fe fb2f 	bl	800d3f8 <xQueueGenericSendFromISR>
 800ed9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ed9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3728      	adds	r7, #40	; 0x28
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	200015f4 	.word	0x200015f4

0800edac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b088      	sub	sp, #32
 800edb0:	af02      	add	r7, sp, #8
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edb6:	4b22      	ldr	r3, [pc, #136]	; (800ee40 <prvProcessExpiredTimer+0x94>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	68db      	ldr	r3, [r3, #12]
 800edbc:	68db      	ldr	r3, [r3, #12]
 800edbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	3304      	adds	r3, #4
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7fd fffb 	bl	800cdc0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edd0:	f003 0304 	and.w	r3, r3, #4
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d022      	beq.n	800ee1e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	699a      	ldr	r2, [r3, #24]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	18d1      	adds	r1, r2, r3
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	683a      	ldr	r2, [r7, #0]
 800ede4:	6978      	ldr	r0, [r7, #20]
 800ede6:	f000 f8d1 	bl	800ef8c <prvInsertTimerInActiveList>
 800edea:	4603      	mov	r3, r0
 800edec:	2b00      	cmp	r3, #0
 800edee:	d01f      	beq.n	800ee30 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800edf0:	2300      	movs	r3, #0
 800edf2:	9300      	str	r3, [sp, #0]
 800edf4:	2300      	movs	r3, #0
 800edf6:	687a      	ldr	r2, [r7, #4]
 800edf8:	2100      	movs	r1, #0
 800edfa:	6978      	ldr	r0, [r7, #20]
 800edfc:	f7ff ff88 	bl	800ed10 <xTimerGenericCommand>
 800ee00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d113      	bne.n	800ee30 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ee08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee0c:	f383 8811 	msr	BASEPRI, r3
 800ee10:	f3bf 8f6f 	isb	sy
 800ee14:	f3bf 8f4f 	dsb	sy
 800ee18:	60fb      	str	r3, [r7, #12]
}
 800ee1a:	bf00      	nop
 800ee1c:	e7fe      	b.n	800ee1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee24:	f023 0301 	bic.w	r3, r3, #1
 800ee28:	b2da      	uxtb	r2, r3
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	6a1b      	ldr	r3, [r3, #32]
 800ee34:	6978      	ldr	r0, [r7, #20]
 800ee36:	4798      	blx	r3
}
 800ee38:	bf00      	nop
 800ee3a:	3718      	adds	r7, #24
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}
 800ee40:	200015ec 	.word	0x200015ec

0800ee44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b084      	sub	sp, #16
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ee4c:	f107 0308 	add.w	r3, r7, #8
 800ee50:	4618      	mov	r0, r3
 800ee52:	f000 f857 	bl	800ef04 <prvGetNextExpireTime>
 800ee56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	4619      	mov	r1, r3
 800ee5c:	68f8      	ldr	r0, [r7, #12]
 800ee5e:	f000 f803 	bl	800ee68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ee62:	f000 f8d5 	bl	800f010 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ee66:	e7f1      	b.n	800ee4c <prvTimerTask+0x8>

0800ee68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b084      	sub	sp, #16
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ee72:	f7ff f92b 	bl	800e0cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee76:	f107 0308 	add.w	r3, r7, #8
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f000 f866 	bl	800ef4c <prvSampleTimeNow>
 800ee80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d130      	bne.n	800eeea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d10a      	bne.n	800eea4 <prvProcessTimerOrBlockTask+0x3c>
 800ee8e:	687a      	ldr	r2, [r7, #4]
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d806      	bhi.n	800eea4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ee96:	f7ff f927 	bl	800e0e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ee9a:	68f9      	ldr	r1, [r7, #12]
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f7ff ff85 	bl	800edac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800eea2:	e024      	b.n	800eeee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d008      	beq.n	800eebc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eeaa:	4b13      	ldr	r3, [pc, #76]	; (800eef8 <prvProcessTimerOrBlockTask+0x90>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d101      	bne.n	800eeb8 <prvProcessTimerOrBlockTask+0x50>
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	e000      	b.n	800eeba <prvProcessTimerOrBlockTask+0x52>
 800eeb8:	2300      	movs	r3, #0
 800eeba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eebc:	4b0f      	ldr	r3, [pc, #60]	; (800eefc <prvProcessTimerOrBlockTask+0x94>)
 800eebe:	6818      	ldr	r0, [r3, #0]
 800eec0:	687a      	ldr	r2, [r7, #4]
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	1ad3      	subs	r3, r2, r3
 800eec6:	683a      	ldr	r2, [r7, #0]
 800eec8:	4619      	mov	r1, r3
 800eeca:	f7fe fe6f 	bl	800dbac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eece:	f7ff f90b 	bl	800e0e8 <xTaskResumeAll>
 800eed2:	4603      	mov	r3, r0
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d10a      	bne.n	800eeee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eed8:	4b09      	ldr	r3, [pc, #36]	; (800ef00 <prvProcessTimerOrBlockTask+0x98>)
 800eeda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eede:	601a      	str	r2, [r3, #0]
 800eee0:	f3bf 8f4f 	dsb	sy
 800eee4:	f3bf 8f6f 	isb	sy
}
 800eee8:	e001      	b.n	800eeee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eeea:	f7ff f8fd 	bl	800e0e8 <xTaskResumeAll>
}
 800eeee:	bf00      	nop
 800eef0:	3710      	adds	r7, #16
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}
 800eef6:	bf00      	nop
 800eef8:	200015f0 	.word	0x200015f0
 800eefc:	200015f4 	.word	0x200015f4
 800ef00:	e000ed04 	.word	0xe000ed04

0800ef04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ef04:	b480      	push	{r7}
 800ef06:	b085      	sub	sp, #20
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ef0c:	4b0e      	ldr	r3, [pc, #56]	; (800ef48 <prvGetNextExpireTime+0x44>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d101      	bne.n	800ef1a <prvGetNextExpireTime+0x16>
 800ef16:	2201      	movs	r2, #1
 800ef18:	e000      	b.n	800ef1c <prvGetNextExpireTime+0x18>
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d105      	bne.n	800ef34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef28:	4b07      	ldr	r3, [pc, #28]	; (800ef48 <prvGetNextExpireTime+0x44>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	68db      	ldr	r3, [r3, #12]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	60fb      	str	r3, [r7, #12]
 800ef32:	e001      	b.n	800ef38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ef34:	2300      	movs	r3, #0
 800ef36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ef38:	68fb      	ldr	r3, [r7, #12]
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	3714      	adds	r7, #20
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef44:	4770      	bx	lr
 800ef46:	bf00      	nop
 800ef48:	200015ec 	.word	0x200015ec

0800ef4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b084      	sub	sp, #16
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ef54:	f7ff f966 	bl	800e224 <xTaskGetTickCount>
 800ef58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ef5a:	4b0b      	ldr	r3, [pc, #44]	; (800ef88 <prvSampleTimeNow+0x3c>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	68fa      	ldr	r2, [r7, #12]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d205      	bcs.n	800ef70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ef64:	f000 f936 	bl	800f1d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2201      	movs	r2, #1
 800ef6c:	601a      	str	r2, [r3, #0]
 800ef6e:	e002      	b.n	800ef76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2200      	movs	r2, #0
 800ef74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ef76:	4a04      	ldr	r2, [pc, #16]	; (800ef88 <prvSampleTimeNow+0x3c>)
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3710      	adds	r7, #16
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
 800ef86:	bf00      	nop
 800ef88:	200015fc 	.word	0x200015fc

0800ef8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b086      	sub	sp, #24
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	60f8      	str	r0, [r7, #12]
 800ef94:	60b9      	str	r1, [r7, #8]
 800ef96:	607a      	str	r2, [r7, #4]
 800ef98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	68ba      	ldr	r2, [r7, #8]
 800efa2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	68fa      	ldr	r2, [r7, #12]
 800efa8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800efaa:	68ba      	ldr	r2, [r7, #8]
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	429a      	cmp	r2, r3
 800efb0:	d812      	bhi.n	800efd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efb2:	687a      	ldr	r2, [r7, #4]
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	1ad2      	subs	r2, r2, r3
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	699b      	ldr	r3, [r3, #24]
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d302      	bcc.n	800efc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800efc0:	2301      	movs	r3, #1
 800efc2:	617b      	str	r3, [r7, #20]
 800efc4:	e01b      	b.n	800effe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800efc6:	4b10      	ldr	r3, [pc, #64]	; (800f008 <prvInsertTimerInActiveList+0x7c>)
 800efc8:	681a      	ldr	r2, [r3, #0]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	3304      	adds	r3, #4
 800efce:	4619      	mov	r1, r3
 800efd0:	4610      	mov	r0, r2
 800efd2:	f7fd febc 	bl	800cd4e <vListInsert>
 800efd6:	e012      	b.n	800effe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800efd8:	687a      	ldr	r2, [r7, #4]
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	429a      	cmp	r2, r3
 800efde:	d206      	bcs.n	800efee <prvInsertTimerInActiveList+0x62>
 800efe0:	68ba      	ldr	r2, [r7, #8]
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d302      	bcc.n	800efee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800efe8:	2301      	movs	r3, #1
 800efea:	617b      	str	r3, [r7, #20]
 800efec:	e007      	b.n	800effe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800efee:	4b07      	ldr	r3, [pc, #28]	; (800f00c <prvInsertTimerInActiveList+0x80>)
 800eff0:	681a      	ldr	r2, [r3, #0]
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	3304      	adds	r3, #4
 800eff6:	4619      	mov	r1, r3
 800eff8:	4610      	mov	r0, r2
 800effa:	f7fd fea8 	bl	800cd4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800effe:	697b      	ldr	r3, [r7, #20]
}
 800f000:	4618      	mov	r0, r3
 800f002:	3718      	adds	r7, #24
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}
 800f008:	200015f0 	.word	0x200015f0
 800f00c:	200015ec 	.word	0x200015ec

0800f010 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b08e      	sub	sp, #56	; 0x38
 800f014:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f016:	e0ca      	b.n	800f1ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	da18      	bge.n	800f050 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f01e:	1d3b      	adds	r3, r7, #4
 800f020:	3304      	adds	r3, #4
 800f022:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f026:	2b00      	cmp	r3, #0
 800f028:	d10a      	bne.n	800f040 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f02e:	f383 8811 	msr	BASEPRI, r3
 800f032:	f3bf 8f6f 	isb	sy
 800f036:	f3bf 8f4f 	dsb	sy
 800f03a:	61fb      	str	r3, [r7, #28]
}
 800f03c:	bf00      	nop
 800f03e:	e7fe      	b.n	800f03e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f046:	6850      	ldr	r0, [r2, #4]
 800f048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f04a:	6892      	ldr	r2, [r2, #8]
 800f04c:	4611      	mov	r1, r2
 800f04e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2b00      	cmp	r3, #0
 800f054:	f2c0 80aa 	blt.w	800f1ac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f05e:	695b      	ldr	r3, [r3, #20]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d004      	beq.n	800f06e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f066:	3304      	adds	r3, #4
 800f068:	4618      	mov	r0, r3
 800f06a:	f7fd fea9 	bl	800cdc0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f06e:	463b      	mov	r3, r7
 800f070:	4618      	mov	r0, r3
 800f072:	f7ff ff6b 	bl	800ef4c <prvSampleTimeNow>
 800f076:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2b09      	cmp	r3, #9
 800f07c:	f200 8097 	bhi.w	800f1ae <prvProcessReceivedCommands+0x19e>
 800f080:	a201      	add	r2, pc, #4	; (adr r2, 800f088 <prvProcessReceivedCommands+0x78>)
 800f082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f086:	bf00      	nop
 800f088:	0800f0b1 	.word	0x0800f0b1
 800f08c:	0800f0b1 	.word	0x0800f0b1
 800f090:	0800f0b1 	.word	0x0800f0b1
 800f094:	0800f125 	.word	0x0800f125
 800f098:	0800f139 	.word	0x0800f139
 800f09c:	0800f183 	.word	0x0800f183
 800f0a0:	0800f0b1 	.word	0x0800f0b1
 800f0a4:	0800f0b1 	.word	0x0800f0b1
 800f0a8:	0800f125 	.word	0x0800f125
 800f0ac:	0800f139 	.word	0x0800f139
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f0b6:	f043 0301 	orr.w	r3, r3, #1
 800f0ba:	b2da      	uxtb	r2, r3
 800f0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f0c2:	68ba      	ldr	r2, [r7, #8]
 800f0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c6:	699b      	ldr	r3, [r3, #24]
 800f0c8:	18d1      	adds	r1, r2, r3
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0d0:	f7ff ff5c 	bl	800ef8c <prvInsertTimerInActiveList>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d069      	beq.n	800f1ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0dc:	6a1b      	ldr	r3, [r3, #32]
 800f0de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f0e8:	f003 0304 	and.w	r3, r3, #4
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d05e      	beq.n	800f1ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f0f0:	68ba      	ldr	r2, [r7, #8]
 800f0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f4:	699b      	ldr	r3, [r3, #24]
 800f0f6:	441a      	add	r2, r3
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	9300      	str	r3, [sp, #0]
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	2100      	movs	r1, #0
 800f100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f102:	f7ff fe05 	bl	800ed10 <xTimerGenericCommand>
 800f106:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f108:	6a3b      	ldr	r3, [r7, #32]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d14f      	bne.n	800f1ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f112:	f383 8811 	msr	BASEPRI, r3
 800f116:	f3bf 8f6f 	isb	sy
 800f11a:	f3bf 8f4f 	dsb	sy
 800f11e:	61bb      	str	r3, [r7, #24]
}
 800f120:	bf00      	nop
 800f122:	e7fe      	b.n	800f122 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f126:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f12a:	f023 0301 	bic.w	r3, r3, #1
 800f12e:	b2da      	uxtb	r2, r3
 800f130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f132:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f136:	e03a      	b.n	800f1ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f13e:	f043 0301 	orr.w	r3, r3, #1
 800f142:	b2da      	uxtb	r2, r3
 800f144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f146:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f14a:	68ba      	ldr	r2, [r7, #8]
 800f14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f14e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f152:	699b      	ldr	r3, [r3, #24]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d10a      	bne.n	800f16e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f15c:	f383 8811 	msr	BASEPRI, r3
 800f160:	f3bf 8f6f 	isb	sy
 800f164:	f3bf 8f4f 	dsb	sy
 800f168:	617b      	str	r3, [r7, #20]
}
 800f16a:	bf00      	nop
 800f16c:	e7fe      	b.n	800f16c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f170:	699a      	ldr	r2, [r3, #24]
 800f172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f174:	18d1      	adds	r1, r2, r3
 800f176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f17a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f17c:	f7ff ff06 	bl	800ef8c <prvInsertTimerInActiveList>
					break;
 800f180:	e015      	b.n	800f1ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f188:	f003 0302 	and.w	r3, r3, #2
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d103      	bne.n	800f198 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f192:	f000 fbdd 	bl	800f950 <vPortFree>
 800f196:	e00a      	b.n	800f1ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f19a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f19e:	f023 0301 	bic.w	r3, r3, #1
 800f1a2:	b2da      	uxtb	r2, r3
 800f1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f1aa:	e000      	b.n	800f1ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f1ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f1ae:	4b08      	ldr	r3, [pc, #32]	; (800f1d0 <prvProcessReceivedCommands+0x1c0>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	1d39      	adds	r1, r7, #4
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f7fe f9ba 	bl	800d530 <xQueueReceive>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	f47f af2a 	bne.w	800f018 <prvProcessReceivedCommands+0x8>
	}
}
 800f1c4:	bf00      	nop
 800f1c6:	bf00      	nop
 800f1c8:	3730      	adds	r7, #48	; 0x30
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}
 800f1ce:	bf00      	nop
 800f1d0:	200015f4 	.word	0x200015f4

0800f1d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b088      	sub	sp, #32
 800f1d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f1da:	e048      	b.n	800f26e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f1dc:	4b2d      	ldr	r3, [pc, #180]	; (800f294 <prvSwitchTimerLists+0xc0>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	68db      	ldr	r3, [r3, #12]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1e6:	4b2b      	ldr	r3, [pc, #172]	; (800f294 <prvSwitchTimerLists+0xc0>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	68db      	ldr	r3, [r3, #12]
 800f1ec:	68db      	ldr	r3, [r3, #12]
 800f1ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	3304      	adds	r3, #4
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f7fd fde3 	bl	800cdc0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	6a1b      	ldr	r3, [r3, #32]
 800f1fe:	68f8      	ldr	r0, [r7, #12]
 800f200:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f208:	f003 0304 	and.w	r3, r3, #4
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d02e      	beq.n	800f26e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	699b      	ldr	r3, [r3, #24]
 800f214:	693a      	ldr	r2, [r7, #16]
 800f216:	4413      	add	r3, r2
 800f218:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f21a:	68ba      	ldr	r2, [r7, #8]
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	429a      	cmp	r2, r3
 800f220:	d90e      	bls.n	800f240 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	68ba      	ldr	r2, [r7, #8]
 800f226:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	68fa      	ldr	r2, [r7, #12]
 800f22c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f22e:	4b19      	ldr	r3, [pc, #100]	; (800f294 <prvSwitchTimerLists+0xc0>)
 800f230:	681a      	ldr	r2, [r3, #0]
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	3304      	adds	r3, #4
 800f236:	4619      	mov	r1, r3
 800f238:	4610      	mov	r0, r2
 800f23a:	f7fd fd88 	bl	800cd4e <vListInsert>
 800f23e:	e016      	b.n	800f26e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f240:	2300      	movs	r3, #0
 800f242:	9300      	str	r3, [sp, #0]
 800f244:	2300      	movs	r3, #0
 800f246:	693a      	ldr	r2, [r7, #16]
 800f248:	2100      	movs	r1, #0
 800f24a:	68f8      	ldr	r0, [r7, #12]
 800f24c:	f7ff fd60 	bl	800ed10 <xTimerGenericCommand>
 800f250:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d10a      	bne.n	800f26e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f25c:	f383 8811 	msr	BASEPRI, r3
 800f260:	f3bf 8f6f 	isb	sy
 800f264:	f3bf 8f4f 	dsb	sy
 800f268:	603b      	str	r3, [r7, #0]
}
 800f26a:	bf00      	nop
 800f26c:	e7fe      	b.n	800f26c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f26e:	4b09      	ldr	r3, [pc, #36]	; (800f294 <prvSwitchTimerLists+0xc0>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d1b1      	bne.n	800f1dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f278:	4b06      	ldr	r3, [pc, #24]	; (800f294 <prvSwitchTimerLists+0xc0>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f27e:	4b06      	ldr	r3, [pc, #24]	; (800f298 <prvSwitchTimerLists+0xc4>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	4a04      	ldr	r2, [pc, #16]	; (800f294 <prvSwitchTimerLists+0xc0>)
 800f284:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f286:	4a04      	ldr	r2, [pc, #16]	; (800f298 <prvSwitchTimerLists+0xc4>)
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	6013      	str	r3, [r2, #0]
}
 800f28c:	bf00      	nop
 800f28e:	3718      	adds	r7, #24
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}
 800f294:	200015ec 	.word	0x200015ec
 800f298:	200015f0 	.word	0x200015f0

0800f29c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b082      	sub	sp, #8
 800f2a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f2a2:	f000 f967 	bl	800f574 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f2a6:	4b15      	ldr	r3, [pc, #84]	; (800f2fc <prvCheckForValidListAndQueue+0x60>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d120      	bne.n	800f2f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f2ae:	4814      	ldr	r0, [pc, #80]	; (800f300 <prvCheckForValidListAndQueue+0x64>)
 800f2b0:	f7fd fcfc 	bl	800ccac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f2b4:	4813      	ldr	r0, [pc, #76]	; (800f304 <prvCheckForValidListAndQueue+0x68>)
 800f2b6:	f7fd fcf9 	bl	800ccac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f2ba:	4b13      	ldr	r3, [pc, #76]	; (800f308 <prvCheckForValidListAndQueue+0x6c>)
 800f2bc:	4a10      	ldr	r2, [pc, #64]	; (800f300 <prvCheckForValidListAndQueue+0x64>)
 800f2be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f2c0:	4b12      	ldr	r3, [pc, #72]	; (800f30c <prvCheckForValidListAndQueue+0x70>)
 800f2c2:	4a10      	ldr	r2, [pc, #64]	; (800f304 <prvCheckForValidListAndQueue+0x68>)
 800f2c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	9300      	str	r3, [sp, #0]
 800f2ca:	4b11      	ldr	r3, [pc, #68]	; (800f310 <prvCheckForValidListAndQueue+0x74>)
 800f2cc:	4a11      	ldr	r2, [pc, #68]	; (800f314 <prvCheckForValidListAndQueue+0x78>)
 800f2ce:	2110      	movs	r1, #16
 800f2d0:	200a      	movs	r0, #10
 800f2d2:	f7fd fe07 	bl	800cee4 <xQueueGenericCreateStatic>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	4a08      	ldr	r2, [pc, #32]	; (800f2fc <prvCheckForValidListAndQueue+0x60>)
 800f2da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f2dc:	4b07      	ldr	r3, [pc, #28]	; (800f2fc <prvCheckForValidListAndQueue+0x60>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d005      	beq.n	800f2f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f2e4:	4b05      	ldr	r3, [pc, #20]	; (800f2fc <prvCheckForValidListAndQueue+0x60>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	490b      	ldr	r1, [pc, #44]	; (800f318 <prvCheckForValidListAndQueue+0x7c>)
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7fe fc34 	bl	800db58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f2f0:	f000 f970 	bl	800f5d4 <vPortExitCritical>
}
 800f2f4:	bf00      	nop
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}
 800f2fa:	bf00      	nop
 800f2fc:	200015f4 	.word	0x200015f4
 800f300:	200015c4 	.word	0x200015c4
 800f304:	200015d8 	.word	0x200015d8
 800f308:	200015ec 	.word	0x200015ec
 800f30c:	200015f0 	.word	0x200015f0
 800f310:	200016a0 	.word	0x200016a0
 800f314:	20001600 	.word	0x20001600
 800f318:	08010c00 	.word	0x08010c00

0800f31c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f31c:	b480      	push	{r7}
 800f31e:	b085      	sub	sp, #20
 800f320:	af00      	add	r7, sp, #0
 800f322:	60f8      	str	r0, [r7, #12]
 800f324:	60b9      	str	r1, [r7, #8]
 800f326:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	3b04      	subs	r3, #4
 800f32c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f334:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	3b04      	subs	r3, #4
 800f33a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	f023 0201 	bic.w	r2, r3, #1
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	3b04      	subs	r3, #4
 800f34a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f34c:	4a0c      	ldr	r2, [pc, #48]	; (800f380 <pxPortInitialiseStack+0x64>)
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	3b14      	subs	r3, #20
 800f356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f358:	687a      	ldr	r2, [r7, #4]
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	3b04      	subs	r3, #4
 800f362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	f06f 0202 	mvn.w	r2, #2
 800f36a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	3b20      	subs	r3, #32
 800f370:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f372:	68fb      	ldr	r3, [r7, #12]
}
 800f374:	4618      	mov	r0, r3
 800f376:	3714      	adds	r7, #20
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr
 800f380:	0800f385 	.word	0x0800f385

0800f384 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f384:	b480      	push	{r7}
 800f386:	b085      	sub	sp, #20
 800f388:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f38a:	2300      	movs	r3, #0
 800f38c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f38e:	4b12      	ldr	r3, [pc, #72]	; (800f3d8 <prvTaskExitError+0x54>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f396:	d00a      	beq.n	800f3ae <prvTaskExitError+0x2a>
	__asm volatile
 800f398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f39c:	f383 8811 	msr	BASEPRI, r3
 800f3a0:	f3bf 8f6f 	isb	sy
 800f3a4:	f3bf 8f4f 	dsb	sy
 800f3a8:	60fb      	str	r3, [r7, #12]
}
 800f3aa:	bf00      	nop
 800f3ac:	e7fe      	b.n	800f3ac <prvTaskExitError+0x28>
	__asm volatile
 800f3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3b2:	f383 8811 	msr	BASEPRI, r3
 800f3b6:	f3bf 8f6f 	isb	sy
 800f3ba:	f3bf 8f4f 	dsb	sy
 800f3be:	60bb      	str	r3, [r7, #8]
}
 800f3c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f3c2:	bf00      	nop
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d0fc      	beq.n	800f3c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f3ca:	bf00      	nop
 800f3cc:	bf00      	nop
 800f3ce:	3714      	adds	r7, #20
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d6:	4770      	bx	lr
 800f3d8:	200000d0 	.word	0x200000d0
 800f3dc:	00000000 	.word	0x00000000

0800f3e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f3e0:	4b07      	ldr	r3, [pc, #28]	; (800f400 <pxCurrentTCBConst2>)
 800f3e2:	6819      	ldr	r1, [r3, #0]
 800f3e4:	6808      	ldr	r0, [r1, #0]
 800f3e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3ea:	f380 8809 	msr	PSP, r0
 800f3ee:	f3bf 8f6f 	isb	sy
 800f3f2:	f04f 0000 	mov.w	r0, #0
 800f3f6:	f380 8811 	msr	BASEPRI, r0
 800f3fa:	4770      	bx	lr
 800f3fc:	f3af 8000 	nop.w

0800f400 <pxCurrentTCBConst2>:
 800f400:	200010c4 	.word	0x200010c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f404:	bf00      	nop
 800f406:	bf00      	nop

0800f408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f408:	4808      	ldr	r0, [pc, #32]	; (800f42c <prvPortStartFirstTask+0x24>)
 800f40a:	6800      	ldr	r0, [r0, #0]
 800f40c:	6800      	ldr	r0, [r0, #0]
 800f40e:	f380 8808 	msr	MSP, r0
 800f412:	f04f 0000 	mov.w	r0, #0
 800f416:	f380 8814 	msr	CONTROL, r0
 800f41a:	b662      	cpsie	i
 800f41c:	b661      	cpsie	f
 800f41e:	f3bf 8f4f 	dsb	sy
 800f422:	f3bf 8f6f 	isb	sy
 800f426:	df00      	svc	0
 800f428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f42a:	bf00      	nop
 800f42c:	e000ed08 	.word	0xe000ed08

0800f430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b086      	sub	sp, #24
 800f434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f436:	4b46      	ldr	r3, [pc, #280]	; (800f550 <xPortStartScheduler+0x120>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	4a46      	ldr	r2, [pc, #280]	; (800f554 <xPortStartScheduler+0x124>)
 800f43c:	4293      	cmp	r3, r2
 800f43e:	d10a      	bne.n	800f456 <xPortStartScheduler+0x26>
	__asm volatile
 800f440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f444:	f383 8811 	msr	BASEPRI, r3
 800f448:	f3bf 8f6f 	isb	sy
 800f44c:	f3bf 8f4f 	dsb	sy
 800f450:	613b      	str	r3, [r7, #16]
}
 800f452:	bf00      	nop
 800f454:	e7fe      	b.n	800f454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f456:	4b3e      	ldr	r3, [pc, #248]	; (800f550 <xPortStartScheduler+0x120>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	4a3f      	ldr	r2, [pc, #252]	; (800f558 <xPortStartScheduler+0x128>)
 800f45c:	4293      	cmp	r3, r2
 800f45e:	d10a      	bne.n	800f476 <xPortStartScheduler+0x46>
	__asm volatile
 800f460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f464:	f383 8811 	msr	BASEPRI, r3
 800f468:	f3bf 8f6f 	isb	sy
 800f46c:	f3bf 8f4f 	dsb	sy
 800f470:	60fb      	str	r3, [r7, #12]
}
 800f472:	bf00      	nop
 800f474:	e7fe      	b.n	800f474 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f476:	4b39      	ldr	r3, [pc, #228]	; (800f55c <xPortStartScheduler+0x12c>)
 800f478:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f47a:	697b      	ldr	r3, [r7, #20]
 800f47c:	781b      	ldrb	r3, [r3, #0]
 800f47e:	b2db      	uxtb	r3, r3
 800f480:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	22ff      	movs	r2, #255	; 0xff
 800f486:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	b2db      	uxtb	r3, r3
 800f48e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f490:	78fb      	ldrb	r3, [r7, #3]
 800f492:	b2db      	uxtb	r3, r3
 800f494:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f498:	b2da      	uxtb	r2, r3
 800f49a:	4b31      	ldr	r3, [pc, #196]	; (800f560 <xPortStartScheduler+0x130>)
 800f49c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f49e:	4b31      	ldr	r3, [pc, #196]	; (800f564 <xPortStartScheduler+0x134>)
 800f4a0:	2207      	movs	r2, #7
 800f4a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f4a4:	e009      	b.n	800f4ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f4a6:	4b2f      	ldr	r3, [pc, #188]	; (800f564 <xPortStartScheduler+0x134>)
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	3b01      	subs	r3, #1
 800f4ac:	4a2d      	ldr	r2, [pc, #180]	; (800f564 <xPortStartScheduler+0x134>)
 800f4ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f4b0:	78fb      	ldrb	r3, [r7, #3]
 800f4b2:	b2db      	uxtb	r3, r3
 800f4b4:	005b      	lsls	r3, r3, #1
 800f4b6:	b2db      	uxtb	r3, r3
 800f4b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f4ba:	78fb      	ldrb	r3, [r7, #3]
 800f4bc:	b2db      	uxtb	r3, r3
 800f4be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4c2:	2b80      	cmp	r3, #128	; 0x80
 800f4c4:	d0ef      	beq.n	800f4a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f4c6:	4b27      	ldr	r3, [pc, #156]	; (800f564 <xPortStartScheduler+0x134>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	f1c3 0307 	rsb	r3, r3, #7
 800f4ce:	2b04      	cmp	r3, #4
 800f4d0:	d00a      	beq.n	800f4e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4d6:	f383 8811 	msr	BASEPRI, r3
 800f4da:	f3bf 8f6f 	isb	sy
 800f4de:	f3bf 8f4f 	dsb	sy
 800f4e2:	60bb      	str	r3, [r7, #8]
}
 800f4e4:	bf00      	nop
 800f4e6:	e7fe      	b.n	800f4e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f4e8:	4b1e      	ldr	r3, [pc, #120]	; (800f564 <xPortStartScheduler+0x134>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	021b      	lsls	r3, r3, #8
 800f4ee:	4a1d      	ldr	r2, [pc, #116]	; (800f564 <xPortStartScheduler+0x134>)
 800f4f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f4f2:	4b1c      	ldr	r3, [pc, #112]	; (800f564 <xPortStartScheduler+0x134>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f4fa:	4a1a      	ldr	r2, [pc, #104]	; (800f564 <xPortStartScheduler+0x134>)
 800f4fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	b2da      	uxtb	r2, r3
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f506:	4b18      	ldr	r3, [pc, #96]	; (800f568 <xPortStartScheduler+0x138>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	4a17      	ldr	r2, [pc, #92]	; (800f568 <xPortStartScheduler+0x138>)
 800f50c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f510:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f512:	4b15      	ldr	r3, [pc, #84]	; (800f568 <xPortStartScheduler+0x138>)
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	4a14      	ldr	r2, [pc, #80]	; (800f568 <xPortStartScheduler+0x138>)
 800f518:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f51c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f51e:	f000 f8dd 	bl	800f6dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f522:	4b12      	ldr	r3, [pc, #72]	; (800f56c <xPortStartScheduler+0x13c>)
 800f524:	2200      	movs	r2, #0
 800f526:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f528:	f000 f8fc 	bl	800f724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f52c:	4b10      	ldr	r3, [pc, #64]	; (800f570 <xPortStartScheduler+0x140>)
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	4a0f      	ldr	r2, [pc, #60]	; (800f570 <xPortStartScheduler+0x140>)
 800f532:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f536:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f538:	f7ff ff66 	bl	800f408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f53c:	f7fe ff3c 	bl	800e3b8 <vTaskSwitchContext>
	prvTaskExitError();
 800f540:	f7ff ff20 	bl	800f384 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f544:	2300      	movs	r3, #0
}
 800f546:	4618      	mov	r0, r3
 800f548:	3718      	adds	r7, #24
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}
 800f54e:	bf00      	nop
 800f550:	e000ed00 	.word	0xe000ed00
 800f554:	410fc271 	.word	0x410fc271
 800f558:	410fc270 	.word	0x410fc270
 800f55c:	e000e400 	.word	0xe000e400
 800f560:	200016f0 	.word	0x200016f0
 800f564:	200016f4 	.word	0x200016f4
 800f568:	e000ed20 	.word	0xe000ed20
 800f56c:	200000d0 	.word	0x200000d0
 800f570:	e000ef34 	.word	0xe000ef34

0800f574 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f574:	b480      	push	{r7}
 800f576:	b083      	sub	sp, #12
 800f578:	af00      	add	r7, sp, #0
	__asm volatile
 800f57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f57e:	f383 8811 	msr	BASEPRI, r3
 800f582:	f3bf 8f6f 	isb	sy
 800f586:	f3bf 8f4f 	dsb	sy
 800f58a:	607b      	str	r3, [r7, #4]
}
 800f58c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f58e:	4b0f      	ldr	r3, [pc, #60]	; (800f5cc <vPortEnterCritical+0x58>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	3301      	adds	r3, #1
 800f594:	4a0d      	ldr	r2, [pc, #52]	; (800f5cc <vPortEnterCritical+0x58>)
 800f596:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f598:	4b0c      	ldr	r3, [pc, #48]	; (800f5cc <vPortEnterCritical+0x58>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	2b01      	cmp	r3, #1
 800f59e:	d10f      	bne.n	800f5c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f5a0:	4b0b      	ldr	r3, [pc, #44]	; (800f5d0 <vPortEnterCritical+0x5c>)
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	b2db      	uxtb	r3, r3
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d00a      	beq.n	800f5c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ae:	f383 8811 	msr	BASEPRI, r3
 800f5b2:	f3bf 8f6f 	isb	sy
 800f5b6:	f3bf 8f4f 	dsb	sy
 800f5ba:	603b      	str	r3, [r7, #0]
}
 800f5bc:	bf00      	nop
 800f5be:	e7fe      	b.n	800f5be <vPortEnterCritical+0x4a>
	}
}
 800f5c0:	bf00      	nop
 800f5c2:	370c      	adds	r7, #12
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ca:	4770      	bx	lr
 800f5cc:	200000d0 	.word	0x200000d0
 800f5d0:	e000ed04 	.word	0xe000ed04

0800f5d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b083      	sub	sp, #12
 800f5d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f5da:	4b12      	ldr	r3, [pc, #72]	; (800f624 <vPortExitCritical+0x50>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d10a      	bne.n	800f5f8 <vPortExitCritical+0x24>
	__asm volatile
 800f5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e6:	f383 8811 	msr	BASEPRI, r3
 800f5ea:	f3bf 8f6f 	isb	sy
 800f5ee:	f3bf 8f4f 	dsb	sy
 800f5f2:	607b      	str	r3, [r7, #4]
}
 800f5f4:	bf00      	nop
 800f5f6:	e7fe      	b.n	800f5f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f5f8:	4b0a      	ldr	r3, [pc, #40]	; (800f624 <vPortExitCritical+0x50>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	3b01      	subs	r3, #1
 800f5fe:	4a09      	ldr	r2, [pc, #36]	; (800f624 <vPortExitCritical+0x50>)
 800f600:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f602:	4b08      	ldr	r3, [pc, #32]	; (800f624 <vPortExitCritical+0x50>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d105      	bne.n	800f616 <vPortExitCritical+0x42>
 800f60a:	2300      	movs	r3, #0
 800f60c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	f383 8811 	msr	BASEPRI, r3
}
 800f614:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f616:	bf00      	nop
 800f618:	370c      	adds	r7, #12
 800f61a:	46bd      	mov	sp, r7
 800f61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f620:	4770      	bx	lr
 800f622:	bf00      	nop
 800f624:	200000d0 	.word	0x200000d0
	...

0800f630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f630:	f3ef 8009 	mrs	r0, PSP
 800f634:	f3bf 8f6f 	isb	sy
 800f638:	4b15      	ldr	r3, [pc, #84]	; (800f690 <pxCurrentTCBConst>)
 800f63a:	681a      	ldr	r2, [r3, #0]
 800f63c:	f01e 0f10 	tst.w	lr, #16
 800f640:	bf08      	it	eq
 800f642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f64a:	6010      	str	r0, [r2, #0]
 800f64c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f650:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f654:	f380 8811 	msr	BASEPRI, r0
 800f658:	f3bf 8f4f 	dsb	sy
 800f65c:	f3bf 8f6f 	isb	sy
 800f660:	f7fe feaa 	bl	800e3b8 <vTaskSwitchContext>
 800f664:	f04f 0000 	mov.w	r0, #0
 800f668:	f380 8811 	msr	BASEPRI, r0
 800f66c:	bc09      	pop	{r0, r3}
 800f66e:	6819      	ldr	r1, [r3, #0]
 800f670:	6808      	ldr	r0, [r1, #0]
 800f672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f676:	f01e 0f10 	tst.w	lr, #16
 800f67a:	bf08      	it	eq
 800f67c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f680:	f380 8809 	msr	PSP, r0
 800f684:	f3bf 8f6f 	isb	sy
 800f688:	4770      	bx	lr
 800f68a:	bf00      	nop
 800f68c:	f3af 8000 	nop.w

0800f690 <pxCurrentTCBConst>:
 800f690:	200010c4 	.word	0x200010c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f694:	bf00      	nop
 800f696:	bf00      	nop

0800f698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b082      	sub	sp, #8
 800f69c:	af00      	add	r7, sp, #0
	__asm volatile
 800f69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6a2:	f383 8811 	msr	BASEPRI, r3
 800f6a6:	f3bf 8f6f 	isb	sy
 800f6aa:	f3bf 8f4f 	dsb	sy
 800f6ae:	607b      	str	r3, [r7, #4]
}
 800f6b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f6b2:	f7fe fdc7 	bl	800e244 <xTaskIncrementTick>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d003      	beq.n	800f6c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f6bc:	4b06      	ldr	r3, [pc, #24]	; (800f6d8 <xPortSysTickHandler+0x40>)
 800f6be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6c2:	601a      	str	r2, [r3, #0]
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	f383 8811 	msr	BASEPRI, r3
}
 800f6ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f6d0:	bf00      	nop
 800f6d2:	3708      	adds	r7, #8
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd80      	pop	{r7, pc}
 800f6d8:	e000ed04 	.word	0xe000ed04

0800f6dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f6dc:	b480      	push	{r7}
 800f6de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f6e0:	4b0b      	ldr	r3, [pc, #44]	; (800f710 <vPortSetupTimerInterrupt+0x34>)
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f6e6:	4b0b      	ldr	r3, [pc, #44]	; (800f714 <vPortSetupTimerInterrupt+0x38>)
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f6ec:	4b0a      	ldr	r3, [pc, #40]	; (800f718 <vPortSetupTimerInterrupt+0x3c>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	4a0a      	ldr	r2, [pc, #40]	; (800f71c <vPortSetupTimerInterrupt+0x40>)
 800f6f2:	fba2 2303 	umull	r2, r3, r2, r3
 800f6f6:	099b      	lsrs	r3, r3, #6
 800f6f8:	4a09      	ldr	r2, [pc, #36]	; (800f720 <vPortSetupTimerInterrupt+0x44>)
 800f6fa:	3b01      	subs	r3, #1
 800f6fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f6fe:	4b04      	ldr	r3, [pc, #16]	; (800f710 <vPortSetupTimerInterrupt+0x34>)
 800f700:	2207      	movs	r2, #7
 800f702:	601a      	str	r2, [r3, #0]
}
 800f704:	bf00      	nop
 800f706:	46bd      	mov	sp, r7
 800f708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70c:	4770      	bx	lr
 800f70e:	bf00      	nop
 800f710:	e000e010 	.word	0xe000e010
 800f714:	e000e018 	.word	0xe000e018
 800f718:	20000038 	.word	0x20000038
 800f71c:	10624dd3 	.word	0x10624dd3
 800f720:	e000e014 	.word	0xe000e014

0800f724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f724:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f734 <vPortEnableVFP+0x10>
 800f728:	6801      	ldr	r1, [r0, #0]
 800f72a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f72e:	6001      	str	r1, [r0, #0]
 800f730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f732:	bf00      	nop
 800f734:	e000ed88 	.word	0xe000ed88

0800f738 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f738:	b480      	push	{r7}
 800f73a:	b085      	sub	sp, #20
 800f73c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f73e:	f3ef 8305 	mrs	r3, IPSR
 800f742:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	2b0f      	cmp	r3, #15
 800f748:	d914      	bls.n	800f774 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f74a:	4a17      	ldr	r2, [pc, #92]	; (800f7a8 <vPortValidateInterruptPriority+0x70>)
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	4413      	add	r3, r2
 800f750:	781b      	ldrb	r3, [r3, #0]
 800f752:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f754:	4b15      	ldr	r3, [pc, #84]	; (800f7ac <vPortValidateInterruptPriority+0x74>)
 800f756:	781b      	ldrb	r3, [r3, #0]
 800f758:	7afa      	ldrb	r2, [r7, #11]
 800f75a:	429a      	cmp	r2, r3
 800f75c:	d20a      	bcs.n	800f774 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f762:	f383 8811 	msr	BASEPRI, r3
 800f766:	f3bf 8f6f 	isb	sy
 800f76a:	f3bf 8f4f 	dsb	sy
 800f76e:	607b      	str	r3, [r7, #4]
}
 800f770:	bf00      	nop
 800f772:	e7fe      	b.n	800f772 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f774:	4b0e      	ldr	r3, [pc, #56]	; (800f7b0 <vPortValidateInterruptPriority+0x78>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f77c:	4b0d      	ldr	r3, [pc, #52]	; (800f7b4 <vPortValidateInterruptPriority+0x7c>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	429a      	cmp	r2, r3
 800f782:	d90a      	bls.n	800f79a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f788:	f383 8811 	msr	BASEPRI, r3
 800f78c:	f3bf 8f6f 	isb	sy
 800f790:	f3bf 8f4f 	dsb	sy
 800f794:	603b      	str	r3, [r7, #0]
}
 800f796:	bf00      	nop
 800f798:	e7fe      	b.n	800f798 <vPortValidateInterruptPriority+0x60>
	}
 800f79a:	bf00      	nop
 800f79c:	3714      	adds	r7, #20
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a4:	4770      	bx	lr
 800f7a6:	bf00      	nop
 800f7a8:	e000e3f0 	.word	0xe000e3f0
 800f7ac:	200016f0 	.word	0x200016f0
 800f7b0:	e000ed0c 	.word	0xe000ed0c
 800f7b4:	200016f4 	.word	0x200016f4

0800f7b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b08a      	sub	sp, #40	; 0x28
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f7c4:	f7fe fc82 	bl	800e0cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f7c8:	4b5b      	ldr	r3, [pc, #364]	; (800f938 <pvPortMalloc+0x180>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d101      	bne.n	800f7d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f7d0:	f000 f920 	bl	800fa14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f7d4:	4b59      	ldr	r3, [pc, #356]	; (800f93c <pvPortMalloc+0x184>)
 800f7d6:	681a      	ldr	r2, [r3, #0]
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	4013      	ands	r3, r2
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	f040 8093 	bne.w	800f908 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d01d      	beq.n	800f824 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f7e8:	2208      	movs	r2, #8
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	4413      	add	r3, r2
 800f7ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f003 0307 	and.w	r3, r3, #7
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d014      	beq.n	800f824 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f023 0307 	bic.w	r3, r3, #7
 800f800:	3308      	adds	r3, #8
 800f802:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f003 0307 	and.w	r3, r3, #7
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d00a      	beq.n	800f824 <pvPortMalloc+0x6c>
	__asm volatile
 800f80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f812:	f383 8811 	msr	BASEPRI, r3
 800f816:	f3bf 8f6f 	isb	sy
 800f81a:	f3bf 8f4f 	dsb	sy
 800f81e:	617b      	str	r3, [r7, #20]
}
 800f820:	bf00      	nop
 800f822:	e7fe      	b.n	800f822 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d06e      	beq.n	800f908 <pvPortMalloc+0x150>
 800f82a:	4b45      	ldr	r3, [pc, #276]	; (800f940 <pvPortMalloc+0x188>)
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	687a      	ldr	r2, [r7, #4]
 800f830:	429a      	cmp	r2, r3
 800f832:	d869      	bhi.n	800f908 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f834:	4b43      	ldr	r3, [pc, #268]	; (800f944 <pvPortMalloc+0x18c>)
 800f836:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f838:	4b42      	ldr	r3, [pc, #264]	; (800f944 <pvPortMalloc+0x18c>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f83e:	e004      	b.n	800f84a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f842:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f84c:	685b      	ldr	r3, [r3, #4]
 800f84e:	687a      	ldr	r2, [r7, #4]
 800f850:	429a      	cmp	r2, r3
 800f852:	d903      	bls.n	800f85c <pvPortMalloc+0xa4>
 800f854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d1f1      	bne.n	800f840 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f85c:	4b36      	ldr	r3, [pc, #216]	; (800f938 <pvPortMalloc+0x180>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f862:	429a      	cmp	r2, r3
 800f864:	d050      	beq.n	800f908 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f866:	6a3b      	ldr	r3, [r7, #32]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	2208      	movs	r2, #8
 800f86c:	4413      	add	r3, r2
 800f86e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f872:	681a      	ldr	r2, [r3, #0]
 800f874:	6a3b      	ldr	r3, [r7, #32]
 800f876:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f87a:	685a      	ldr	r2, [r3, #4]
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	1ad2      	subs	r2, r2, r3
 800f880:	2308      	movs	r3, #8
 800f882:	005b      	lsls	r3, r3, #1
 800f884:	429a      	cmp	r2, r3
 800f886:	d91f      	bls.n	800f8c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	4413      	add	r3, r2
 800f88e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f890:	69bb      	ldr	r3, [r7, #24]
 800f892:	f003 0307 	and.w	r3, r3, #7
 800f896:	2b00      	cmp	r3, #0
 800f898:	d00a      	beq.n	800f8b0 <pvPortMalloc+0xf8>
	__asm volatile
 800f89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f89e:	f383 8811 	msr	BASEPRI, r3
 800f8a2:	f3bf 8f6f 	isb	sy
 800f8a6:	f3bf 8f4f 	dsb	sy
 800f8aa:	613b      	str	r3, [r7, #16]
}
 800f8ac:	bf00      	nop
 800f8ae:	e7fe      	b.n	800f8ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b2:	685a      	ldr	r2, [r3, #4]
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	1ad2      	subs	r2, r2, r3
 800f8b8:	69bb      	ldr	r3, [r7, #24]
 800f8ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8be:	687a      	ldr	r2, [r7, #4]
 800f8c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f8c2:	69b8      	ldr	r0, [r7, #24]
 800f8c4:	f000 f908 	bl	800fad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f8c8:	4b1d      	ldr	r3, [pc, #116]	; (800f940 <pvPortMalloc+0x188>)
 800f8ca:	681a      	ldr	r2, [r3, #0]
 800f8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ce:	685b      	ldr	r3, [r3, #4]
 800f8d0:	1ad3      	subs	r3, r2, r3
 800f8d2:	4a1b      	ldr	r2, [pc, #108]	; (800f940 <pvPortMalloc+0x188>)
 800f8d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f8d6:	4b1a      	ldr	r3, [pc, #104]	; (800f940 <pvPortMalloc+0x188>)
 800f8d8:	681a      	ldr	r2, [r3, #0]
 800f8da:	4b1b      	ldr	r3, [pc, #108]	; (800f948 <pvPortMalloc+0x190>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	429a      	cmp	r2, r3
 800f8e0:	d203      	bcs.n	800f8ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f8e2:	4b17      	ldr	r3, [pc, #92]	; (800f940 <pvPortMalloc+0x188>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	4a18      	ldr	r2, [pc, #96]	; (800f948 <pvPortMalloc+0x190>)
 800f8e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ec:	685a      	ldr	r2, [r3, #4]
 800f8ee:	4b13      	ldr	r3, [pc, #76]	; (800f93c <pvPortMalloc+0x184>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	431a      	orrs	r2, r3
 800f8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f8fe:	4b13      	ldr	r3, [pc, #76]	; (800f94c <pvPortMalloc+0x194>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	3301      	adds	r3, #1
 800f904:	4a11      	ldr	r2, [pc, #68]	; (800f94c <pvPortMalloc+0x194>)
 800f906:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f908:	f7fe fbee 	bl	800e0e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f90c:	69fb      	ldr	r3, [r7, #28]
 800f90e:	f003 0307 	and.w	r3, r3, #7
 800f912:	2b00      	cmp	r3, #0
 800f914:	d00a      	beq.n	800f92c <pvPortMalloc+0x174>
	__asm volatile
 800f916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f91a:	f383 8811 	msr	BASEPRI, r3
 800f91e:	f3bf 8f6f 	isb	sy
 800f922:	f3bf 8f4f 	dsb	sy
 800f926:	60fb      	str	r3, [r7, #12]
}
 800f928:	bf00      	nop
 800f92a:	e7fe      	b.n	800f92a <pvPortMalloc+0x172>
	return pvReturn;
 800f92c:	69fb      	ldr	r3, [r7, #28]
}
 800f92e:	4618      	mov	r0, r3
 800f930:	3728      	adds	r7, #40	; 0x28
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}
 800f936:	bf00      	nop
 800f938:	20005300 	.word	0x20005300
 800f93c:	20005314 	.word	0x20005314
 800f940:	20005304 	.word	0x20005304
 800f944:	200052f8 	.word	0x200052f8
 800f948:	20005308 	.word	0x20005308
 800f94c:	2000530c 	.word	0x2000530c

0800f950 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b086      	sub	sp, #24
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d04d      	beq.n	800f9fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f962:	2308      	movs	r3, #8
 800f964:	425b      	negs	r3, r3
 800f966:	697a      	ldr	r2, [r7, #20]
 800f968:	4413      	add	r3, r2
 800f96a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	685a      	ldr	r2, [r3, #4]
 800f974:	4b24      	ldr	r3, [pc, #144]	; (800fa08 <vPortFree+0xb8>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	4013      	ands	r3, r2
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d10a      	bne.n	800f994 <vPortFree+0x44>
	__asm volatile
 800f97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f982:	f383 8811 	msr	BASEPRI, r3
 800f986:	f3bf 8f6f 	isb	sy
 800f98a:	f3bf 8f4f 	dsb	sy
 800f98e:	60fb      	str	r3, [r7, #12]
}
 800f990:	bf00      	nop
 800f992:	e7fe      	b.n	800f992 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f994:	693b      	ldr	r3, [r7, #16]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d00a      	beq.n	800f9b2 <vPortFree+0x62>
	__asm volatile
 800f99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9a0:	f383 8811 	msr	BASEPRI, r3
 800f9a4:	f3bf 8f6f 	isb	sy
 800f9a8:	f3bf 8f4f 	dsb	sy
 800f9ac:	60bb      	str	r3, [r7, #8]
}
 800f9ae:	bf00      	nop
 800f9b0:	e7fe      	b.n	800f9b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	685a      	ldr	r2, [r3, #4]
 800f9b6:	4b14      	ldr	r3, [pc, #80]	; (800fa08 <vPortFree+0xb8>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	4013      	ands	r3, r2
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d01e      	beq.n	800f9fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f9c0:	693b      	ldr	r3, [r7, #16]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d11a      	bne.n	800f9fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f9c8:	693b      	ldr	r3, [r7, #16]
 800f9ca:	685a      	ldr	r2, [r3, #4]
 800f9cc:	4b0e      	ldr	r3, [pc, #56]	; (800fa08 <vPortFree+0xb8>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	43db      	mvns	r3, r3
 800f9d2:	401a      	ands	r2, r3
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f9d8:	f7fe fb78 	bl	800e0cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f9dc:	693b      	ldr	r3, [r7, #16]
 800f9de:	685a      	ldr	r2, [r3, #4]
 800f9e0:	4b0a      	ldr	r3, [pc, #40]	; (800fa0c <vPortFree+0xbc>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	4413      	add	r3, r2
 800f9e6:	4a09      	ldr	r2, [pc, #36]	; (800fa0c <vPortFree+0xbc>)
 800f9e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f9ea:	6938      	ldr	r0, [r7, #16]
 800f9ec:	f000 f874 	bl	800fad8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f9f0:	4b07      	ldr	r3, [pc, #28]	; (800fa10 <vPortFree+0xc0>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	3301      	adds	r3, #1
 800f9f6:	4a06      	ldr	r2, [pc, #24]	; (800fa10 <vPortFree+0xc0>)
 800f9f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f9fa:	f7fe fb75 	bl	800e0e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f9fe:	bf00      	nop
 800fa00:	3718      	adds	r7, #24
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}
 800fa06:	bf00      	nop
 800fa08:	20005314 	.word	0x20005314
 800fa0c:	20005304 	.word	0x20005304
 800fa10:	20005310 	.word	0x20005310

0800fa14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fa14:	b480      	push	{r7}
 800fa16:	b085      	sub	sp, #20
 800fa18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fa1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fa1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fa20:	4b27      	ldr	r3, [pc, #156]	; (800fac0 <prvHeapInit+0xac>)
 800fa22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	f003 0307 	and.w	r3, r3, #7
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d00c      	beq.n	800fa48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	3307      	adds	r3, #7
 800fa32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	f023 0307 	bic.w	r3, r3, #7
 800fa3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fa3c:	68ba      	ldr	r2, [r7, #8]
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	1ad3      	subs	r3, r2, r3
 800fa42:	4a1f      	ldr	r2, [pc, #124]	; (800fac0 <prvHeapInit+0xac>)
 800fa44:	4413      	add	r3, r2
 800fa46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fa4c:	4a1d      	ldr	r2, [pc, #116]	; (800fac4 <prvHeapInit+0xb0>)
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fa52:	4b1c      	ldr	r3, [pc, #112]	; (800fac4 <prvHeapInit+0xb0>)
 800fa54:	2200      	movs	r2, #0
 800fa56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	68ba      	ldr	r2, [r7, #8]
 800fa5c:	4413      	add	r3, r2
 800fa5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fa60:	2208      	movs	r2, #8
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	1a9b      	subs	r3, r3, r2
 800fa66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	f023 0307 	bic.w	r3, r3, #7
 800fa6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	4a15      	ldr	r2, [pc, #84]	; (800fac8 <prvHeapInit+0xb4>)
 800fa74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fa76:	4b14      	ldr	r3, [pc, #80]	; (800fac8 <prvHeapInit+0xb4>)
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fa7e:	4b12      	ldr	r3, [pc, #72]	; (800fac8 <prvHeapInit+0xb4>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	2200      	movs	r2, #0
 800fa84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	68fa      	ldr	r2, [r7, #12]
 800fa8e:	1ad2      	subs	r2, r2, r3
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fa94:	4b0c      	ldr	r3, [pc, #48]	; (800fac8 <prvHeapInit+0xb4>)
 800fa96:	681a      	ldr	r2, [r3, #0]
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	685b      	ldr	r3, [r3, #4]
 800faa0:	4a0a      	ldr	r2, [pc, #40]	; (800facc <prvHeapInit+0xb8>)
 800faa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800faa4:	683b      	ldr	r3, [r7, #0]
 800faa6:	685b      	ldr	r3, [r3, #4]
 800faa8:	4a09      	ldr	r2, [pc, #36]	; (800fad0 <prvHeapInit+0xbc>)
 800faaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800faac:	4b09      	ldr	r3, [pc, #36]	; (800fad4 <prvHeapInit+0xc0>)
 800faae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fab2:	601a      	str	r2, [r3, #0]
}
 800fab4:	bf00      	nop
 800fab6:	3714      	adds	r7, #20
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr
 800fac0:	200016f8 	.word	0x200016f8
 800fac4:	200052f8 	.word	0x200052f8
 800fac8:	20005300 	.word	0x20005300
 800facc:	20005308 	.word	0x20005308
 800fad0:	20005304 	.word	0x20005304
 800fad4:	20005314 	.word	0x20005314

0800fad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fad8:	b480      	push	{r7}
 800fada:	b085      	sub	sp, #20
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fae0:	4b28      	ldr	r3, [pc, #160]	; (800fb84 <prvInsertBlockIntoFreeList+0xac>)
 800fae2:	60fb      	str	r3, [r7, #12]
 800fae4:	e002      	b.n	800faec <prvInsertBlockIntoFreeList+0x14>
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	60fb      	str	r3, [r7, #12]
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	687a      	ldr	r2, [r7, #4]
 800faf2:	429a      	cmp	r2, r3
 800faf4:	d8f7      	bhi.n	800fae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	685b      	ldr	r3, [r3, #4]
 800fafe:	68ba      	ldr	r2, [r7, #8]
 800fb00:	4413      	add	r3, r2
 800fb02:	687a      	ldr	r2, [r7, #4]
 800fb04:	429a      	cmp	r2, r3
 800fb06:	d108      	bne.n	800fb1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	685a      	ldr	r2, [r3, #4]
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	685b      	ldr	r3, [r3, #4]
 800fb10:	441a      	add	r2, r3
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	685b      	ldr	r3, [r3, #4]
 800fb22:	68ba      	ldr	r2, [r7, #8]
 800fb24:	441a      	add	r2, r3
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d118      	bne.n	800fb60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681a      	ldr	r2, [r3, #0]
 800fb32:	4b15      	ldr	r3, [pc, #84]	; (800fb88 <prvInsertBlockIntoFreeList+0xb0>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d00d      	beq.n	800fb56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	685a      	ldr	r2, [r3, #4]
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	685b      	ldr	r3, [r3, #4]
 800fb44:	441a      	add	r2, r3
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	681a      	ldr	r2, [r3, #0]
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	601a      	str	r2, [r3, #0]
 800fb54:	e008      	b.n	800fb68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fb56:	4b0c      	ldr	r3, [pc, #48]	; (800fb88 <prvInsertBlockIntoFreeList+0xb0>)
 800fb58:	681a      	ldr	r2, [r3, #0]
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	601a      	str	r2, [r3, #0]
 800fb5e:	e003      	b.n	800fb68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	681a      	ldr	r2, [r3, #0]
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fb68:	68fa      	ldr	r2, [r7, #12]
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	d002      	beq.n	800fb76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	687a      	ldr	r2, [r7, #4]
 800fb74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fb76:	bf00      	nop
 800fb78:	3714      	adds	r7, #20
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb80:	4770      	bx	lr
 800fb82:	bf00      	nop
 800fb84:	200052f8 	.word	0x200052f8
 800fb88:	20005300 	.word	0x20005300

0800fb8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fb90:	2200      	movs	r2, #0
 800fb92:	4912      	ldr	r1, [pc, #72]	; (800fbdc <MX_USB_DEVICE_Init+0x50>)
 800fb94:	4812      	ldr	r0, [pc, #72]	; (800fbe0 <MX_USB_DEVICE_Init+0x54>)
 800fb96:	f7fb fb19 	bl	800b1cc <USBD_Init>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d001      	beq.n	800fba4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fba0:	f7f3 f8b0 	bl	8002d04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fba4:	490f      	ldr	r1, [pc, #60]	; (800fbe4 <MX_USB_DEVICE_Init+0x58>)
 800fba6:	480e      	ldr	r0, [pc, #56]	; (800fbe0 <MX_USB_DEVICE_Init+0x54>)
 800fba8:	f7fb fb40 	bl	800b22c <USBD_RegisterClass>
 800fbac:	4603      	mov	r3, r0
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d001      	beq.n	800fbb6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fbb2:	f7f3 f8a7 	bl	8002d04 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fbb6:	490c      	ldr	r1, [pc, #48]	; (800fbe8 <MX_USB_DEVICE_Init+0x5c>)
 800fbb8:	4809      	ldr	r0, [pc, #36]	; (800fbe0 <MX_USB_DEVICE_Init+0x54>)
 800fbba:	f7fb fa31 	bl	800b020 <USBD_CDC_RegisterInterface>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d001      	beq.n	800fbc8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fbc4:	f7f3 f89e 	bl	8002d04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fbc8:	4805      	ldr	r0, [pc, #20]	; (800fbe0 <MX_USB_DEVICE_Init+0x54>)
 800fbca:	f7fb fb65 	bl	800b298 <USBD_Start>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d001      	beq.n	800fbd8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fbd4:	f7f3 f896 	bl	8002d04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fbd8:	bf00      	nop
 800fbda:	bd80      	pop	{r7, pc}
 800fbdc:	200000e8 	.word	0x200000e8
 800fbe0:	20005318 	.word	0x20005318
 800fbe4:	20000050 	.word	0x20000050
 800fbe8:	200000d4 	.word	0x200000d4

0800fbec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	4905      	ldr	r1, [pc, #20]	; (800fc08 <CDC_Init_FS+0x1c>)
 800fbf4:	4805      	ldr	r0, [pc, #20]	; (800fc0c <CDC_Init_FS+0x20>)
 800fbf6:	f7fb fa2d 	bl	800b054 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fbfa:	4905      	ldr	r1, [pc, #20]	; (800fc10 <CDC_Init_FS+0x24>)
 800fbfc:	4803      	ldr	r0, [pc, #12]	; (800fc0c <CDC_Init_FS+0x20>)
 800fbfe:	f7fb fa4b 	bl	800b098 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fc02:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fc04:	4618      	mov	r0, r3
 800fc06:	bd80      	pop	{r7, pc}
 800fc08:	20005df4 	.word	0x20005df4
 800fc0c:	20005318 	.word	0x20005318
 800fc10:	200055f4 	.word	0x200055f4

0800fc14 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fc14:	b480      	push	{r7}
 800fc16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fc18:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc22:	4770      	bx	lr

0800fc24 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fc24:	b480      	push	{r7}
 800fc26:	b083      	sub	sp, #12
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	6039      	str	r1, [r7, #0]
 800fc2e:	71fb      	strb	r3, [r7, #7]
 800fc30:	4613      	mov	r3, r2
 800fc32:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fc34:	79fb      	ldrb	r3, [r7, #7]
 800fc36:	2b23      	cmp	r3, #35	; 0x23
 800fc38:	d84a      	bhi.n	800fcd0 <CDC_Control_FS+0xac>
 800fc3a:	a201      	add	r2, pc, #4	; (adr r2, 800fc40 <CDC_Control_FS+0x1c>)
 800fc3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc40:	0800fcd1 	.word	0x0800fcd1
 800fc44:	0800fcd1 	.word	0x0800fcd1
 800fc48:	0800fcd1 	.word	0x0800fcd1
 800fc4c:	0800fcd1 	.word	0x0800fcd1
 800fc50:	0800fcd1 	.word	0x0800fcd1
 800fc54:	0800fcd1 	.word	0x0800fcd1
 800fc58:	0800fcd1 	.word	0x0800fcd1
 800fc5c:	0800fcd1 	.word	0x0800fcd1
 800fc60:	0800fcd1 	.word	0x0800fcd1
 800fc64:	0800fcd1 	.word	0x0800fcd1
 800fc68:	0800fcd1 	.word	0x0800fcd1
 800fc6c:	0800fcd1 	.word	0x0800fcd1
 800fc70:	0800fcd1 	.word	0x0800fcd1
 800fc74:	0800fcd1 	.word	0x0800fcd1
 800fc78:	0800fcd1 	.word	0x0800fcd1
 800fc7c:	0800fcd1 	.word	0x0800fcd1
 800fc80:	0800fcd1 	.word	0x0800fcd1
 800fc84:	0800fcd1 	.word	0x0800fcd1
 800fc88:	0800fcd1 	.word	0x0800fcd1
 800fc8c:	0800fcd1 	.word	0x0800fcd1
 800fc90:	0800fcd1 	.word	0x0800fcd1
 800fc94:	0800fcd1 	.word	0x0800fcd1
 800fc98:	0800fcd1 	.word	0x0800fcd1
 800fc9c:	0800fcd1 	.word	0x0800fcd1
 800fca0:	0800fcd1 	.word	0x0800fcd1
 800fca4:	0800fcd1 	.word	0x0800fcd1
 800fca8:	0800fcd1 	.word	0x0800fcd1
 800fcac:	0800fcd1 	.word	0x0800fcd1
 800fcb0:	0800fcd1 	.word	0x0800fcd1
 800fcb4:	0800fcd1 	.word	0x0800fcd1
 800fcb8:	0800fcd1 	.word	0x0800fcd1
 800fcbc:	0800fcd1 	.word	0x0800fcd1
 800fcc0:	0800fcd1 	.word	0x0800fcd1
 800fcc4:	0800fcd1 	.word	0x0800fcd1
 800fcc8:	0800fcd1 	.word	0x0800fcd1
 800fccc:	0800fcd1 	.word	0x0800fcd1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fcd0:	bf00      	nop
  }

  return (USBD_OK);
 800fcd2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	370c      	adds	r7, #12
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcde:	4770      	bx	lr

0800fce0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b082      	sub	sp, #8
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 command_CMD[0] = Buf[0];
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	781a      	ldrb	r2, [r3, #0]
 800fcee:	4b05      	ldr	r3, [pc, #20]	; (800fd04 <CDC_Receive_FS+0x24>)
 800fcf0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fcf2:	4805      	ldr	r0, [pc, #20]	; (800fd08 <CDC_Receive_FS+0x28>)
 800fcf4:	f7fb fa34 	bl	800b160 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fcf8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	3708      	adds	r7, #8
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}
 800fd02:	bf00      	nop
 800fd04:	20000894 	.word	0x20000894
 800fd08:	20005318 	.word	0x20005318

0800fd0c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b084      	sub	sp, #16
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	460b      	mov	r3, r1
 800fd16:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fd18:	2300      	movs	r3, #0
 800fd1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fd1c:	4b0d      	ldr	r3, [pc, #52]	; (800fd54 <CDC_Transmit_FS+0x48>)
 800fd1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fd22:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d001      	beq.n	800fd32 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fd2e:	2301      	movs	r3, #1
 800fd30:	e00b      	b.n	800fd4a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fd32:	887b      	ldrh	r3, [r7, #2]
 800fd34:	461a      	mov	r2, r3
 800fd36:	6879      	ldr	r1, [r7, #4]
 800fd38:	4806      	ldr	r0, [pc, #24]	; (800fd54 <CDC_Transmit_FS+0x48>)
 800fd3a:	f7fb f98b 	bl	800b054 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fd3e:	4805      	ldr	r0, [pc, #20]	; (800fd54 <CDC_Transmit_FS+0x48>)
 800fd40:	f7fb f9c8 	bl	800b0d4 <USBD_CDC_TransmitPacket>
 800fd44:	4603      	mov	r3, r0
 800fd46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fd48:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	3710      	adds	r7, #16
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd80      	pop	{r7, pc}
 800fd52:	bf00      	nop
 800fd54:	20005318 	.word	0x20005318

0800fd58 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b087      	sub	sp, #28
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	60f8      	str	r0, [r7, #12]
 800fd60:	60b9      	str	r1, [r7, #8]
 800fd62:	4613      	mov	r3, r2
 800fd64:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fd66:	2300      	movs	r3, #0
 800fd68:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fd6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	371c      	adds	r7, #28
 800fd72:	46bd      	mov	sp, r7
 800fd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd78:	4770      	bx	lr
	...

0800fd7c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	b083      	sub	sp, #12
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	4603      	mov	r3, r0
 800fd84:	6039      	str	r1, [r7, #0]
 800fd86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	2212      	movs	r2, #18
 800fd8c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fd8e:	4b03      	ldr	r3, [pc, #12]	; (800fd9c <USBD_FS_DeviceDescriptor+0x20>)
}
 800fd90:	4618      	mov	r0, r3
 800fd92:	370c      	adds	r7, #12
 800fd94:	46bd      	mov	sp, r7
 800fd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9a:	4770      	bx	lr
 800fd9c:	20000104 	.word	0x20000104

0800fda0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fda0:	b480      	push	{r7}
 800fda2:	b083      	sub	sp, #12
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	4603      	mov	r3, r0
 800fda8:	6039      	str	r1, [r7, #0]
 800fdaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	2204      	movs	r2, #4
 800fdb0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fdb2:	4b03      	ldr	r3, [pc, #12]	; (800fdc0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	370c      	adds	r7, #12
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbe:	4770      	bx	lr
 800fdc0:	20000118 	.word	0x20000118

0800fdc4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b082      	sub	sp, #8
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	4603      	mov	r3, r0
 800fdcc:	6039      	str	r1, [r7, #0]
 800fdce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fdd0:	79fb      	ldrb	r3, [r7, #7]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d105      	bne.n	800fde2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fdd6:	683a      	ldr	r2, [r7, #0]
 800fdd8:	4907      	ldr	r1, [pc, #28]	; (800fdf8 <USBD_FS_ProductStrDescriptor+0x34>)
 800fdda:	4808      	ldr	r0, [pc, #32]	; (800fdfc <USBD_FS_ProductStrDescriptor+0x38>)
 800fddc:	f7fc fc08 	bl	800c5f0 <USBD_GetString>
 800fde0:	e004      	b.n	800fdec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fde2:	683a      	ldr	r2, [r7, #0]
 800fde4:	4904      	ldr	r1, [pc, #16]	; (800fdf8 <USBD_FS_ProductStrDescriptor+0x34>)
 800fde6:	4805      	ldr	r0, [pc, #20]	; (800fdfc <USBD_FS_ProductStrDescriptor+0x38>)
 800fde8:	f7fc fc02 	bl	800c5f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fdec:	4b02      	ldr	r3, [pc, #8]	; (800fdf8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	3708      	adds	r7, #8
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}
 800fdf6:	bf00      	nop
 800fdf8:	200065b4 	.word	0x200065b4
 800fdfc:	08010c08 	.word	0x08010c08

0800fe00 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b082      	sub	sp, #8
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	4603      	mov	r3, r0
 800fe08:	6039      	str	r1, [r7, #0]
 800fe0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fe0c:	683a      	ldr	r2, [r7, #0]
 800fe0e:	4904      	ldr	r1, [pc, #16]	; (800fe20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fe10:	4804      	ldr	r0, [pc, #16]	; (800fe24 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fe12:	f7fc fbed 	bl	800c5f0 <USBD_GetString>
  return USBD_StrDesc;
 800fe16:	4b02      	ldr	r3, [pc, #8]	; (800fe20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3708      	adds	r7, #8
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}
 800fe20:	200065b4 	.word	0x200065b4
 800fe24:	08010c20 	.word	0x08010c20

0800fe28 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b082      	sub	sp, #8
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	4603      	mov	r3, r0
 800fe30:	6039      	str	r1, [r7, #0]
 800fe32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	221a      	movs	r2, #26
 800fe38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fe3a:	f000 f843 	bl	800fec4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fe3e:	4b02      	ldr	r3, [pc, #8]	; (800fe48 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fe40:	4618      	mov	r0, r3
 800fe42:	3708      	adds	r7, #8
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}
 800fe48:	2000011c 	.word	0x2000011c

0800fe4c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b082      	sub	sp, #8
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	4603      	mov	r3, r0
 800fe54:	6039      	str	r1, [r7, #0]
 800fe56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fe58:	79fb      	ldrb	r3, [r7, #7]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d105      	bne.n	800fe6a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fe5e:	683a      	ldr	r2, [r7, #0]
 800fe60:	4907      	ldr	r1, [pc, #28]	; (800fe80 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fe62:	4808      	ldr	r0, [pc, #32]	; (800fe84 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fe64:	f7fc fbc4 	bl	800c5f0 <USBD_GetString>
 800fe68:	e004      	b.n	800fe74 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fe6a:	683a      	ldr	r2, [r7, #0]
 800fe6c:	4904      	ldr	r1, [pc, #16]	; (800fe80 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fe6e:	4805      	ldr	r0, [pc, #20]	; (800fe84 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fe70:	f7fc fbbe 	bl	800c5f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fe74:	4b02      	ldr	r3, [pc, #8]	; (800fe80 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fe76:	4618      	mov	r0, r3
 800fe78:	3708      	adds	r7, #8
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}
 800fe7e:	bf00      	nop
 800fe80:	200065b4 	.word	0x200065b4
 800fe84:	08010c34 	.word	0x08010c34

0800fe88 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b082      	sub	sp, #8
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	4603      	mov	r3, r0
 800fe90:	6039      	str	r1, [r7, #0]
 800fe92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fe94:	79fb      	ldrb	r3, [r7, #7]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d105      	bne.n	800fea6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fe9a:	683a      	ldr	r2, [r7, #0]
 800fe9c:	4907      	ldr	r1, [pc, #28]	; (800febc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fe9e:	4808      	ldr	r0, [pc, #32]	; (800fec0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fea0:	f7fc fba6 	bl	800c5f0 <USBD_GetString>
 800fea4:	e004      	b.n	800feb0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fea6:	683a      	ldr	r2, [r7, #0]
 800fea8:	4904      	ldr	r1, [pc, #16]	; (800febc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800feaa:	4805      	ldr	r0, [pc, #20]	; (800fec0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800feac:	f7fc fba0 	bl	800c5f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800feb0:	4b02      	ldr	r3, [pc, #8]	; (800febc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3708      	adds	r7, #8
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}
 800feba:	bf00      	nop
 800febc:	200065b4 	.word	0x200065b4
 800fec0:	08010c40 	.word	0x08010c40

0800fec4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b084      	sub	sp, #16
 800fec8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800feca:	4b0f      	ldr	r3, [pc, #60]	; (800ff08 <Get_SerialNum+0x44>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fed0:	4b0e      	ldr	r3, [pc, #56]	; (800ff0c <Get_SerialNum+0x48>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fed6:	4b0e      	ldr	r3, [pc, #56]	; (800ff10 <Get_SerialNum+0x4c>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fedc:	68fa      	ldr	r2, [r7, #12]
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	4413      	add	r3, r2
 800fee2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d009      	beq.n	800fefe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800feea:	2208      	movs	r2, #8
 800feec:	4909      	ldr	r1, [pc, #36]	; (800ff14 <Get_SerialNum+0x50>)
 800feee:	68f8      	ldr	r0, [r7, #12]
 800fef0:	f000 f814 	bl	800ff1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fef4:	2204      	movs	r2, #4
 800fef6:	4908      	ldr	r1, [pc, #32]	; (800ff18 <Get_SerialNum+0x54>)
 800fef8:	68b8      	ldr	r0, [r7, #8]
 800fefa:	f000 f80f 	bl	800ff1c <IntToUnicode>
  }
}
 800fefe:	bf00      	nop
 800ff00:	3710      	adds	r7, #16
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}
 800ff06:	bf00      	nop
 800ff08:	1fff7a10 	.word	0x1fff7a10
 800ff0c:	1fff7a14 	.word	0x1fff7a14
 800ff10:	1fff7a18 	.word	0x1fff7a18
 800ff14:	2000011e 	.word	0x2000011e
 800ff18:	2000012e 	.word	0x2000012e

0800ff1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ff1c:	b480      	push	{r7}
 800ff1e:	b087      	sub	sp, #28
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	60f8      	str	r0, [r7, #12]
 800ff24:	60b9      	str	r1, [r7, #8]
 800ff26:	4613      	mov	r3, r2
 800ff28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ff2e:	2300      	movs	r3, #0
 800ff30:	75fb      	strb	r3, [r7, #23]
 800ff32:	e027      	b.n	800ff84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	0f1b      	lsrs	r3, r3, #28
 800ff38:	2b09      	cmp	r3, #9
 800ff3a:	d80b      	bhi.n	800ff54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	0f1b      	lsrs	r3, r3, #28
 800ff40:	b2da      	uxtb	r2, r3
 800ff42:	7dfb      	ldrb	r3, [r7, #23]
 800ff44:	005b      	lsls	r3, r3, #1
 800ff46:	4619      	mov	r1, r3
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	440b      	add	r3, r1
 800ff4c:	3230      	adds	r2, #48	; 0x30
 800ff4e:	b2d2      	uxtb	r2, r2
 800ff50:	701a      	strb	r2, [r3, #0]
 800ff52:	e00a      	b.n	800ff6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	0f1b      	lsrs	r3, r3, #28
 800ff58:	b2da      	uxtb	r2, r3
 800ff5a:	7dfb      	ldrb	r3, [r7, #23]
 800ff5c:	005b      	lsls	r3, r3, #1
 800ff5e:	4619      	mov	r1, r3
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	440b      	add	r3, r1
 800ff64:	3237      	adds	r2, #55	; 0x37
 800ff66:	b2d2      	uxtb	r2, r2
 800ff68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	011b      	lsls	r3, r3, #4
 800ff6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ff70:	7dfb      	ldrb	r3, [r7, #23]
 800ff72:	005b      	lsls	r3, r3, #1
 800ff74:	3301      	adds	r3, #1
 800ff76:	68ba      	ldr	r2, [r7, #8]
 800ff78:	4413      	add	r3, r2
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ff7e:	7dfb      	ldrb	r3, [r7, #23]
 800ff80:	3301      	adds	r3, #1
 800ff82:	75fb      	strb	r3, [r7, #23]
 800ff84:	7dfa      	ldrb	r2, [r7, #23]
 800ff86:	79fb      	ldrb	r3, [r7, #7]
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d3d3      	bcc.n	800ff34 <IntToUnicode+0x18>
  }
}
 800ff8c:	bf00      	nop
 800ff8e:	bf00      	nop
 800ff90:	371c      	adds	r7, #28
 800ff92:	46bd      	mov	sp, r7
 800ff94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff98:	4770      	bx	lr
	...

0800ff9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b08a      	sub	sp, #40	; 0x28
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ffa4:	f107 0314 	add.w	r3, r7, #20
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	601a      	str	r2, [r3, #0]
 800ffac:	605a      	str	r2, [r3, #4]
 800ffae:	609a      	str	r2, [r3, #8]
 800ffb0:	60da      	str	r2, [r3, #12]
 800ffb2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ffbc:	d13a      	bne.n	8010034 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	613b      	str	r3, [r7, #16]
 800ffc2:	4b1e      	ldr	r3, [pc, #120]	; (801003c <HAL_PCD_MspInit+0xa0>)
 800ffc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffc6:	4a1d      	ldr	r2, [pc, #116]	; (801003c <HAL_PCD_MspInit+0xa0>)
 800ffc8:	f043 0301 	orr.w	r3, r3, #1
 800ffcc:	6313      	str	r3, [r2, #48]	; 0x30
 800ffce:	4b1b      	ldr	r3, [pc, #108]	; (801003c <HAL_PCD_MspInit+0xa0>)
 800ffd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffd2:	f003 0301 	and.w	r3, r3, #1
 800ffd6:	613b      	str	r3, [r7, #16]
 800ffd8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ffda:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ffde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ffe0:	2302      	movs	r3, #2
 800ffe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ffe8:	2303      	movs	r3, #3
 800ffea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ffec:	230a      	movs	r3, #10
 800ffee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fff0:	f107 0314 	add.w	r3, r7, #20
 800fff4:	4619      	mov	r1, r3
 800fff6:	4812      	ldr	r0, [pc, #72]	; (8010040 <HAL_PCD_MspInit+0xa4>)
 800fff8:	f7f4 f9a0 	bl	800433c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fffc:	4b0f      	ldr	r3, [pc, #60]	; (801003c <HAL_PCD_MspInit+0xa0>)
 800fffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010000:	4a0e      	ldr	r2, [pc, #56]	; (801003c <HAL_PCD_MspInit+0xa0>)
 8010002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010006:	6353      	str	r3, [r2, #52]	; 0x34
 8010008:	2300      	movs	r3, #0
 801000a:	60fb      	str	r3, [r7, #12]
 801000c:	4b0b      	ldr	r3, [pc, #44]	; (801003c <HAL_PCD_MspInit+0xa0>)
 801000e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010010:	4a0a      	ldr	r2, [pc, #40]	; (801003c <HAL_PCD_MspInit+0xa0>)
 8010012:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010016:	6453      	str	r3, [r2, #68]	; 0x44
 8010018:	4b08      	ldr	r3, [pc, #32]	; (801003c <HAL_PCD_MspInit+0xa0>)
 801001a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801001c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010020:	60fb      	str	r3, [r7, #12]
 8010022:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010024:	2200      	movs	r2, #0
 8010026:	2105      	movs	r1, #5
 8010028:	2043      	movs	r0, #67	; 0x43
 801002a:	f7f3 fdcb 	bl	8003bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801002e:	2043      	movs	r0, #67	; 0x43
 8010030:	f7f3 fde4 	bl	8003bfc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010034:	bf00      	nop
 8010036:	3728      	adds	r7, #40	; 0x28
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}
 801003c:	40023800 	.word	0x40023800
 8010040:	40020000 	.word	0x40020000

08010044 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b082      	sub	sp, #8
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010058:	4619      	mov	r1, r3
 801005a:	4610      	mov	r0, r2
 801005c:	f7fb f969 	bl	800b332 <USBD_LL_SetupStage>
}
 8010060:	bf00      	nop
 8010062:	3708      	adds	r7, #8
 8010064:	46bd      	mov	sp, r7
 8010066:	bd80      	pop	{r7, pc}

08010068 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b082      	sub	sp, #8
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
 8010070:	460b      	mov	r3, r1
 8010072:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801007a:	78fa      	ldrb	r2, [r7, #3]
 801007c:	6879      	ldr	r1, [r7, #4]
 801007e:	4613      	mov	r3, r2
 8010080:	00db      	lsls	r3, r3, #3
 8010082:	4413      	add	r3, r2
 8010084:	009b      	lsls	r3, r3, #2
 8010086:	440b      	add	r3, r1
 8010088:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801008c:	681a      	ldr	r2, [r3, #0]
 801008e:	78fb      	ldrb	r3, [r7, #3]
 8010090:	4619      	mov	r1, r3
 8010092:	f7fb f9a3 	bl	800b3dc <USBD_LL_DataOutStage>
}
 8010096:	bf00      	nop
 8010098:	3708      	adds	r7, #8
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}

0801009e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801009e:	b580      	push	{r7, lr}
 80100a0:	b082      	sub	sp, #8
 80100a2:	af00      	add	r7, sp, #0
 80100a4:	6078      	str	r0, [r7, #4]
 80100a6:	460b      	mov	r3, r1
 80100a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80100b0:	78fa      	ldrb	r2, [r7, #3]
 80100b2:	6879      	ldr	r1, [r7, #4]
 80100b4:	4613      	mov	r3, r2
 80100b6:	00db      	lsls	r3, r3, #3
 80100b8:	4413      	add	r3, r2
 80100ba:	009b      	lsls	r3, r3, #2
 80100bc:	440b      	add	r3, r1
 80100be:	334c      	adds	r3, #76	; 0x4c
 80100c0:	681a      	ldr	r2, [r3, #0]
 80100c2:	78fb      	ldrb	r3, [r7, #3]
 80100c4:	4619      	mov	r1, r3
 80100c6:	f7fb fa3c 	bl	800b542 <USBD_LL_DataInStage>
}
 80100ca:	bf00      	nop
 80100cc:	3708      	adds	r7, #8
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}

080100d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100d2:	b580      	push	{r7, lr}
 80100d4:	b082      	sub	sp, #8
 80100d6:	af00      	add	r7, sp, #0
 80100d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80100e0:	4618      	mov	r0, r3
 80100e2:	f7fb fb70 	bl	800b7c6 <USBD_LL_SOF>
}
 80100e6:	bf00      	nop
 80100e8:	3708      	adds	r7, #8
 80100ea:	46bd      	mov	sp, r7
 80100ec:	bd80      	pop	{r7, pc}

080100ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100ee:	b580      	push	{r7, lr}
 80100f0:	b084      	sub	sp, #16
 80100f2:	af00      	add	r7, sp, #0
 80100f4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80100f6:	2301      	movs	r3, #1
 80100f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	68db      	ldr	r3, [r3, #12]
 80100fe:	2b02      	cmp	r3, #2
 8010100:	d001      	beq.n	8010106 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010102:	f7f2 fdff 	bl	8002d04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801010c:	7bfa      	ldrb	r2, [r7, #15]
 801010e:	4611      	mov	r1, r2
 8010110:	4618      	mov	r0, r3
 8010112:	f7fb fb1a 	bl	800b74a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801011c:	4618      	mov	r0, r3
 801011e:	f7fb fac2 	bl	800b6a6 <USBD_LL_Reset>
}
 8010122:	bf00      	nop
 8010124:	3710      	adds	r7, #16
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}
	...

0801012c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b082      	sub	sp, #8
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801013a:	4618      	mov	r0, r3
 801013c:	f7fb fb15 	bl	800b76a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	687a      	ldr	r2, [r7, #4]
 801014c:	6812      	ldr	r2, [r2, #0]
 801014e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010152:	f043 0301 	orr.w	r3, r3, #1
 8010156:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	6a1b      	ldr	r3, [r3, #32]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d005      	beq.n	801016c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010160:	4b04      	ldr	r3, [pc, #16]	; (8010174 <HAL_PCD_SuspendCallback+0x48>)
 8010162:	691b      	ldr	r3, [r3, #16]
 8010164:	4a03      	ldr	r2, [pc, #12]	; (8010174 <HAL_PCD_SuspendCallback+0x48>)
 8010166:	f043 0306 	orr.w	r3, r3, #6
 801016a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801016c:	bf00      	nop
 801016e:	3708      	adds	r7, #8
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}
 8010174:	e000ed00 	.word	0xe000ed00

08010178 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b082      	sub	sp, #8
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010186:	4618      	mov	r0, r3
 8010188:	f7fb fb05 	bl	800b796 <USBD_LL_Resume>
}
 801018c:	bf00      	nop
 801018e:	3708      	adds	r7, #8
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}

08010194 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b082      	sub	sp, #8
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	460b      	mov	r3, r1
 801019e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80101a6:	78fa      	ldrb	r2, [r7, #3]
 80101a8:	4611      	mov	r1, r2
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7fb fb5d 	bl	800b86a <USBD_LL_IsoOUTIncomplete>
}
 80101b0:	bf00      	nop
 80101b2:	3708      	adds	r7, #8
 80101b4:	46bd      	mov	sp, r7
 80101b6:	bd80      	pop	{r7, pc}

080101b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b082      	sub	sp, #8
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
 80101c0:	460b      	mov	r3, r1
 80101c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80101ca:	78fa      	ldrb	r2, [r7, #3]
 80101cc:	4611      	mov	r1, r2
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7fb fb19 	bl	800b806 <USBD_LL_IsoINIncomplete>
}
 80101d4:	bf00      	nop
 80101d6:	3708      	adds	r7, #8
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}

080101dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b082      	sub	sp, #8
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7fb fb6f 	bl	800b8ce <USBD_LL_DevConnected>
}
 80101f0:	bf00      	nop
 80101f2:	3708      	adds	r7, #8
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}

080101f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b082      	sub	sp, #8
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010206:	4618      	mov	r0, r3
 8010208:	f7fb fb6c 	bl	800b8e4 <USBD_LL_DevDisconnected>
}
 801020c:	bf00      	nop
 801020e:	3708      	adds	r7, #8
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}

08010214 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	781b      	ldrb	r3, [r3, #0]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d13c      	bne.n	801029e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010224:	4a20      	ldr	r2, [pc, #128]	; (80102a8 <USBD_LL_Init+0x94>)
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	4a1e      	ldr	r2, [pc, #120]	; (80102a8 <USBD_LL_Init+0x94>)
 8010230:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010234:	4b1c      	ldr	r3, [pc, #112]	; (80102a8 <USBD_LL_Init+0x94>)
 8010236:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801023a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801023c:	4b1a      	ldr	r3, [pc, #104]	; (80102a8 <USBD_LL_Init+0x94>)
 801023e:	2204      	movs	r2, #4
 8010240:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010242:	4b19      	ldr	r3, [pc, #100]	; (80102a8 <USBD_LL_Init+0x94>)
 8010244:	2202      	movs	r2, #2
 8010246:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010248:	4b17      	ldr	r3, [pc, #92]	; (80102a8 <USBD_LL_Init+0x94>)
 801024a:	2200      	movs	r2, #0
 801024c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801024e:	4b16      	ldr	r3, [pc, #88]	; (80102a8 <USBD_LL_Init+0x94>)
 8010250:	2202      	movs	r2, #2
 8010252:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010254:	4b14      	ldr	r3, [pc, #80]	; (80102a8 <USBD_LL_Init+0x94>)
 8010256:	2200      	movs	r2, #0
 8010258:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801025a:	4b13      	ldr	r3, [pc, #76]	; (80102a8 <USBD_LL_Init+0x94>)
 801025c:	2200      	movs	r2, #0
 801025e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010260:	4b11      	ldr	r3, [pc, #68]	; (80102a8 <USBD_LL_Init+0x94>)
 8010262:	2200      	movs	r2, #0
 8010264:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010266:	4b10      	ldr	r3, [pc, #64]	; (80102a8 <USBD_LL_Init+0x94>)
 8010268:	2200      	movs	r2, #0
 801026a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801026c:	4b0e      	ldr	r3, [pc, #56]	; (80102a8 <USBD_LL_Init+0x94>)
 801026e:	2200      	movs	r2, #0
 8010270:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010272:	480d      	ldr	r0, [pc, #52]	; (80102a8 <USBD_LL_Init+0x94>)
 8010274:	f7f5 ff91 	bl	800619a <HAL_PCD_Init>
 8010278:	4603      	mov	r3, r0
 801027a:	2b00      	cmp	r3, #0
 801027c:	d001      	beq.n	8010282 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801027e:	f7f2 fd41 	bl	8002d04 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010282:	2180      	movs	r1, #128	; 0x80
 8010284:	4808      	ldr	r0, [pc, #32]	; (80102a8 <USBD_LL_Init+0x94>)
 8010286:	f7f7 f9e8 	bl	800765a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801028a:	2240      	movs	r2, #64	; 0x40
 801028c:	2100      	movs	r1, #0
 801028e:	4806      	ldr	r0, [pc, #24]	; (80102a8 <USBD_LL_Init+0x94>)
 8010290:	f7f7 f99c 	bl	80075cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010294:	2280      	movs	r2, #128	; 0x80
 8010296:	2101      	movs	r1, #1
 8010298:	4803      	ldr	r0, [pc, #12]	; (80102a8 <USBD_LL_Init+0x94>)
 801029a:	f7f7 f997 	bl	80075cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801029e:	2300      	movs	r3, #0
}
 80102a0:	4618      	mov	r0, r3
 80102a2:	3708      	adds	r7, #8
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}
 80102a8:	200067b4 	.word	0x200067b4

080102ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b084      	sub	sp, #16
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102b4:	2300      	movs	r3, #0
 80102b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102b8:	2300      	movs	r3, #0
 80102ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80102c2:	4618      	mov	r0, r3
 80102c4:	f7f6 f886 	bl	80063d4 <HAL_PCD_Start>
 80102c8:	4603      	mov	r3, r0
 80102ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80102cc:	7bfb      	ldrb	r3, [r7, #15]
 80102ce:	4618      	mov	r0, r3
 80102d0:	f000 f942 	bl	8010558 <USBD_Get_USB_Status>
 80102d4:	4603      	mov	r3, r0
 80102d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80102d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80102da:	4618      	mov	r0, r3
 80102dc:	3710      	adds	r7, #16
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}

080102e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80102e2:	b580      	push	{r7, lr}
 80102e4:	b084      	sub	sp, #16
 80102e6:	af00      	add	r7, sp, #0
 80102e8:	6078      	str	r0, [r7, #4]
 80102ea:	4608      	mov	r0, r1
 80102ec:	4611      	mov	r1, r2
 80102ee:	461a      	mov	r2, r3
 80102f0:	4603      	mov	r3, r0
 80102f2:	70fb      	strb	r3, [r7, #3]
 80102f4:	460b      	mov	r3, r1
 80102f6:	70bb      	strb	r3, [r7, #2]
 80102f8:	4613      	mov	r3, r2
 80102fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102fc:	2300      	movs	r3, #0
 80102fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010300:	2300      	movs	r3, #0
 8010302:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801030a:	78bb      	ldrb	r3, [r7, #2]
 801030c:	883a      	ldrh	r2, [r7, #0]
 801030e:	78f9      	ldrb	r1, [r7, #3]
 8010310:	f7f6 fd57 	bl	8006dc2 <HAL_PCD_EP_Open>
 8010314:	4603      	mov	r3, r0
 8010316:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010318:	7bfb      	ldrb	r3, [r7, #15]
 801031a:	4618      	mov	r0, r3
 801031c:	f000 f91c 	bl	8010558 <USBD_Get_USB_Status>
 8010320:	4603      	mov	r3, r0
 8010322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010324:	7bbb      	ldrb	r3, [r7, #14]
}
 8010326:	4618      	mov	r0, r3
 8010328:	3710      	adds	r7, #16
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}

0801032e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801032e:	b580      	push	{r7, lr}
 8010330:	b084      	sub	sp, #16
 8010332:	af00      	add	r7, sp, #0
 8010334:	6078      	str	r0, [r7, #4]
 8010336:	460b      	mov	r3, r1
 8010338:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801033a:	2300      	movs	r3, #0
 801033c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801033e:	2300      	movs	r3, #0
 8010340:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010348:	78fa      	ldrb	r2, [r7, #3]
 801034a:	4611      	mov	r1, r2
 801034c:	4618      	mov	r0, r3
 801034e:	f7f6 fda0 	bl	8006e92 <HAL_PCD_EP_Close>
 8010352:	4603      	mov	r3, r0
 8010354:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010356:	7bfb      	ldrb	r3, [r7, #15]
 8010358:	4618      	mov	r0, r3
 801035a:	f000 f8fd 	bl	8010558 <USBD_Get_USB_Status>
 801035e:	4603      	mov	r3, r0
 8010360:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010362:	7bbb      	ldrb	r3, [r7, #14]
}
 8010364:	4618      	mov	r0, r3
 8010366:	3710      	adds	r7, #16
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}

0801036c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b084      	sub	sp, #16
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
 8010374:	460b      	mov	r3, r1
 8010376:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010378:	2300      	movs	r3, #0
 801037a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801037c:	2300      	movs	r3, #0
 801037e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010386:	78fa      	ldrb	r2, [r7, #3]
 8010388:	4611      	mov	r1, r2
 801038a:	4618      	mov	r0, r3
 801038c:	f7f6 fe78 	bl	8007080 <HAL_PCD_EP_SetStall>
 8010390:	4603      	mov	r3, r0
 8010392:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010394:	7bfb      	ldrb	r3, [r7, #15]
 8010396:	4618      	mov	r0, r3
 8010398:	f000 f8de 	bl	8010558 <USBD_Get_USB_Status>
 801039c:	4603      	mov	r3, r0
 801039e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80103a2:	4618      	mov	r0, r3
 80103a4:	3710      	adds	r7, #16
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}

080103aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80103aa:	b580      	push	{r7, lr}
 80103ac:	b084      	sub	sp, #16
 80103ae:	af00      	add	r7, sp, #0
 80103b0:	6078      	str	r0, [r7, #4]
 80103b2:	460b      	mov	r3, r1
 80103b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103b6:	2300      	movs	r3, #0
 80103b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103ba:	2300      	movs	r3, #0
 80103bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80103c4:	78fa      	ldrb	r2, [r7, #3]
 80103c6:	4611      	mov	r1, r2
 80103c8:	4618      	mov	r0, r3
 80103ca:	f7f6 febd 	bl	8007148 <HAL_PCD_EP_ClrStall>
 80103ce:	4603      	mov	r3, r0
 80103d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103d2:	7bfb      	ldrb	r3, [r7, #15]
 80103d4:	4618      	mov	r0, r3
 80103d6:	f000 f8bf 	bl	8010558 <USBD_Get_USB_Status>
 80103da:	4603      	mov	r3, r0
 80103dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103de:	7bbb      	ldrb	r3, [r7, #14]
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3710      	adds	r7, #16
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}

080103e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80103e8:	b480      	push	{r7}
 80103ea:	b085      	sub	sp, #20
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	460b      	mov	r3, r1
 80103f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80103fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80103fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010400:	2b00      	cmp	r3, #0
 8010402:	da0b      	bge.n	801041c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010404:	78fb      	ldrb	r3, [r7, #3]
 8010406:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801040a:	68f9      	ldr	r1, [r7, #12]
 801040c:	4613      	mov	r3, r2
 801040e:	00db      	lsls	r3, r3, #3
 8010410:	4413      	add	r3, r2
 8010412:	009b      	lsls	r3, r3, #2
 8010414:	440b      	add	r3, r1
 8010416:	333e      	adds	r3, #62	; 0x3e
 8010418:	781b      	ldrb	r3, [r3, #0]
 801041a:	e00b      	b.n	8010434 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801041c:	78fb      	ldrb	r3, [r7, #3]
 801041e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010422:	68f9      	ldr	r1, [r7, #12]
 8010424:	4613      	mov	r3, r2
 8010426:	00db      	lsls	r3, r3, #3
 8010428:	4413      	add	r3, r2
 801042a:	009b      	lsls	r3, r3, #2
 801042c:	440b      	add	r3, r1
 801042e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010432:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010434:	4618      	mov	r0, r3
 8010436:	3714      	adds	r7, #20
 8010438:	46bd      	mov	sp, r7
 801043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043e:	4770      	bx	lr

08010440 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b084      	sub	sp, #16
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	460b      	mov	r3, r1
 801044a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801044c:	2300      	movs	r3, #0
 801044e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010450:	2300      	movs	r3, #0
 8010452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801045a:	78fa      	ldrb	r2, [r7, #3]
 801045c:	4611      	mov	r1, r2
 801045e:	4618      	mov	r0, r3
 8010460:	f7f6 fc8a 	bl	8006d78 <HAL_PCD_SetAddress>
 8010464:	4603      	mov	r3, r0
 8010466:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010468:	7bfb      	ldrb	r3, [r7, #15]
 801046a:	4618      	mov	r0, r3
 801046c:	f000 f874 	bl	8010558 <USBD_Get_USB_Status>
 8010470:	4603      	mov	r3, r0
 8010472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010474:	7bbb      	ldrb	r3, [r7, #14]
}
 8010476:	4618      	mov	r0, r3
 8010478:	3710      	adds	r7, #16
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}

0801047e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801047e:	b580      	push	{r7, lr}
 8010480:	b086      	sub	sp, #24
 8010482:	af00      	add	r7, sp, #0
 8010484:	60f8      	str	r0, [r7, #12]
 8010486:	607a      	str	r2, [r7, #4]
 8010488:	603b      	str	r3, [r7, #0]
 801048a:	460b      	mov	r3, r1
 801048c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801048e:	2300      	movs	r3, #0
 8010490:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010492:	2300      	movs	r3, #0
 8010494:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801049c:	7af9      	ldrb	r1, [r7, #11]
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	687a      	ldr	r2, [r7, #4]
 80104a2:	f7f6 fda3 	bl	8006fec <HAL_PCD_EP_Transmit>
 80104a6:	4603      	mov	r3, r0
 80104a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104aa:	7dfb      	ldrb	r3, [r7, #23]
 80104ac:	4618      	mov	r0, r3
 80104ae:	f000 f853 	bl	8010558 <USBD_Get_USB_Status>
 80104b2:	4603      	mov	r3, r0
 80104b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80104b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	3718      	adds	r7, #24
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}

080104c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b086      	sub	sp, #24
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	60f8      	str	r0, [r7, #12]
 80104c8:	607a      	str	r2, [r7, #4]
 80104ca:	603b      	str	r3, [r7, #0]
 80104cc:	460b      	mov	r3, r1
 80104ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104d0:	2300      	movs	r3, #0
 80104d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104d4:	2300      	movs	r3, #0
 80104d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80104de:	7af9      	ldrb	r1, [r7, #11]
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	687a      	ldr	r2, [r7, #4]
 80104e4:	f7f6 fd1f 	bl	8006f26 <HAL_PCD_EP_Receive>
 80104e8:	4603      	mov	r3, r0
 80104ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104ec:	7dfb      	ldrb	r3, [r7, #23]
 80104ee:	4618      	mov	r0, r3
 80104f0:	f000 f832 	bl	8010558 <USBD_Get_USB_Status>
 80104f4:	4603      	mov	r3, r0
 80104f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80104f8:	7dbb      	ldrb	r3, [r7, #22]
}
 80104fa:	4618      	mov	r0, r3
 80104fc:	3718      	adds	r7, #24
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}

08010502 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010502:	b580      	push	{r7, lr}
 8010504:	b082      	sub	sp, #8
 8010506:	af00      	add	r7, sp, #0
 8010508:	6078      	str	r0, [r7, #4]
 801050a:	460b      	mov	r3, r1
 801050c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010514:	78fa      	ldrb	r2, [r7, #3]
 8010516:	4611      	mov	r1, r2
 8010518:	4618      	mov	r0, r3
 801051a:	f7f6 fd4f 	bl	8006fbc <HAL_PCD_EP_GetRxCount>
 801051e:	4603      	mov	r3, r0
}
 8010520:	4618      	mov	r0, r3
 8010522:	3708      	adds	r7, #8
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}

08010528 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010528:	b480      	push	{r7}
 801052a:	b083      	sub	sp, #12
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010530:	4b03      	ldr	r3, [pc, #12]	; (8010540 <USBD_static_malloc+0x18>)
}
 8010532:	4618      	mov	r0, r3
 8010534:	370c      	adds	r7, #12
 8010536:	46bd      	mov	sp, r7
 8010538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053c:	4770      	bx	lr
 801053e:	bf00      	nop
 8010540:	20006cc0 	.word	0x20006cc0

08010544 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010544:	b480      	push	{r7}
 8010546:	b083      	sub	sp, #12
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]

}
 801054c:	bf00      	nop
 801054e:	370c      	adds	r7, #12
 8010550:	46bd      	mov	sp, r7
 8010552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010556:	4770      	bx	lr

08010558 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010558:	b480      	push	{r7}
 801055a:	b085      	sub	sp, #20
 801055c:	af00      	add	r7, sp, #0
 801055e:	4603      	mov	r3, r0
 8010560:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010562:	2300      	movs	r3, #0
 8010564:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010566:	79fb      	ldrb	r3, [r7, #7]
 8010568:	2b03      	cmp	r3, #3
 801056a:	d817      	bhi.n	801059c <USBD_Get_USB_Status+0x44>
 801056c:	a201      	add	r2, pc, #4	; (adr r2, 8010574 <USBD_Get_USB_Status+0x1c>)
 801056e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010572:	bf00      	nop
 8010574:	08010585 	.word	0x08010585
 8010578:	0801058b 	.word	0x0801058b
 801057c:	08010591 	.word	0x08010591
 8010580:	08010597 	.word	0x08010597
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010584:	2300      	movs	r3, #0
 8010586:	73fb      	strb	r3, [r7, #15]
    break;
 8010588:	e00b      	b.n	80105a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801058a:	2303      	movs	r3, #3
 801058c:	73fb      	strb	r3, [r7, #15]
    break;
 801058e:	e008      	b.n	80105a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010590:	2301      	movs	r3, #1
 8010592:	73fb      	strb	r3, [r7, #15]
    break;
 8010594:	e005      	b.n	80105a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010596:	2303      	movs	r3, #3
 8010598:	73fb      	strb	r3, [r7, #15]
    break;
 801059a:	e002      	b.n	80105a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801059c:	2303      	movs	r3, #3
 801059e:	73fb      	strb	r3, [r7, #15]
    break;
 80105a0:	bf00      	nop
  }
  return usb_status;
 80105a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80105a4:	4618      	mov	r0, r3
 80105a6:	3714      	adds	r7, #20
 80105a8:	46bd      	mov	sp, r7
 80105aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ae:	4770      	bx	lr

080105b0 <__errno>:
 80105b0:	4b01      	ldr	r3, [pc, #4]	; (80105b8 <__errno+0x8>)
 80105b2:	6818      	ldr	r0, [r3, #0]
 80105b4:	4770      	bx	lr
 80105b6:	bf00      	nop
 80105b8:	20000138 	.word	0x20000138

080105bc <__libc_init_array>:
 80105bc:	b570      	push	{r4, r5, r6, lr}
 80105be:	4d0d      	ldr	r5, [pc, #52]	; (80105f4 <__libc_init_array+0x38>)
 80105c0:	4c0d      	ldr	r4, [pc, #52]	; (80105f8 <__libc_init_array+0x3c>)
 80105c2:	1b64      	subs	r4, r4, r5
 80105c4:	10a4      	asrs	r4, r4, #2
 80105c6:	2600      	movs	r6, #0
 80105c8:	42a6      	cmp	r6, r4
 80105ca:	d109      	bne.n	80105e0 <__libc_init_array+0x24>
 80105cc:	4d0b      	ldr	r5, [pc, #44]	; (80105fc <__libc_init_array+0x40>)
 80105ce:	4c0c      	ldr	r4, [pc, #48]	; (8010600 <__libc_init_array+0x44>)
 80105d0:	f000 f9fa 	bl	80109c8 <_init>
 80105d4:	1b64      	subs	r4, r4, r5
 80105d6:	10a4      	asrs	r4, r4, #2
 80105d8:	2600      	movs	r6, #0
 80105da:	42a6      	cmp	r6, r4
 80105dc:	d105      	bne.n	80105ea <__libc_init_array+0x2e>
 80105de:	bd70      	pop	{r4, r5, r6, pc}
 80105e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80105e4:	4798      	blx	r3
 80105e6:	3601      	adds	r6, #1
 80105e8:	e7ee      	b.n	80105c8 <__libc_init_array+0xc>
 80105ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80105ee:	4798      	blx	r3
 80105f0:	3601      	adds	r6, #1
 80105f2:	e7f2      	b.n	80105da <__libc_init_array+0x1e>
 80105f4:	08011afc 	.word	0x08011afc
 80105f8:	08011afc 	.word	0x08011afc
 80105fc:	08011afc 	.word	0x08011afc
 8010600:	08011b00 	.word	0x08011b00

08010604 <__itoa>:
 8010604:	1e93      	subs	r3, r2, #2
 8010606:	2b22      	cmp	r3, #34	; 0x22
 8010608:	b510      	push	{r4, lr}
 801060a:	460c      	mov	r4, r1
 801060c:	d904      	bls.n	8010618 <__itoa+0x14>
 801060e:	2300      	movs	r3, #0
 8010610:	700b      	strb	r3, [r1, #0]
 8010612:	461c      	mov	r4, r3
 8010614:	4620      	mov	r0, r4
 8010616:	bd10      	pop	{r4, pc}
 8010618:	2a0a      	cmp	r2, #10
 801061a:	d109      	bne.n	8010630 <__itoa+0x2c>
 801061c:	2800      	cmp	r0, #0
 801061e:	da07      	bge.n	8010630 <__itoa+0x2c>
 8010620:	232d      	movs	r3, #45	; 0x2d
 8010622:	700b      	strb	r3, [r1, #0]
 8010624:	4240      	negs	r0, r0
 8010626:	2101      	movs	r1, #1
 8010628:	4421      	add	r1, r4
 801062a:	f000 f97f 	bl	801092c <__utoa>
 801062e:	e7f1      	b.n	8010614 <__itoa+0x10>
 8010630:	2100      	movs	r1, #0
 8010632:	e7f9      	b.n	8010628 <__itoa+0x24>

08010634 <itoa>:
 8010634:	f7ff bfe6 	b.w	8010604 <__itoa>

08010638 <__retarget_lock_acquire_recursive>:
 8010638:	4770      	bx	lr

0801063a <__retarget_lock_release_recursive>:
 801063a:	4770      	bx	lr

0801063c <malloc>:
 801063c:	4b02      	ldr	r3, [pc, #8]	; (8010648 <malloc+0xc>)
 801063e:	4601      	mov	r1, r0
 8010640:	6818      	ldr	r0, [r3, #0]
 8010642:	f000 b885 	b.w	8010750 <_malloc_r>
 8010646:	bf00      	nop
 8010648:	20000138 	.word	0x20000138

0801064c <memcpy>:
 801064c:	440a      	add	r2, r1
 801064e:	4291      	cmp	r1, r2
 8010650:	f100 33ff 	add.w	r3, r0, #4294967295
 8010654:	d100      	bne.n	8010658 <memcpy+0xc>
 8010656:	4770      	bx	lr
 8010658:	b510      	push	{r4, lr}
 801065a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801065e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010662:	4291      	cmp	r1, r2
 8010664:	d1f9      	bne.n	801065a <memcpy+0xe>
 8010666:	bd10      	pop	{r4, pc}

08010668 <memset>:
 8010668:	4402      	add	r2, r0
 801066a:	4603      	mov	r3, r0
 801066c:	4293      	cmp	r3, r2
 801066e:	d100      	bne.n	8010672 <memset+0xa>
 8010670:	4770      	bx	lr
 8010672:	f803 1b01 	strb.w	r1, [r3], #1
 8010676:	e7f9      	b.n	801066c <memset+0x4>

08010678 <_free_r>:
 8010678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801067a:	2900      	cmp	r1, #0
 801067c:	d044      	beq.n	8010708 <_free_r+0x90>
 801067e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010682:	9001      	str	r0, [sp, #4]
 8010684:	2b00      	cmp	r3, #0
 8010686:	f1a1 0404 	sub.w	r4, r1, #4
 801068a:	bfb8      	it	lt
 801068c:	18e4      	addlt	r4, r4, r3
 801068e:	f000 f98f 	bl	80109b0 <__malloc_lock>
 8010692:	4a1e      	ldr	r2, [pc, #120]	; (801070c <_free_r+0x94>)
 8010694:	9801      	ldr	r0, [sp, #4]
 8010696:	6813      	ldr	r3, [r2, #0]
 8010698:	b933      	cbnz	r3, 80106a8 <_free_r+0x30>
 801069a:	6063      	str	r3, [r4, #4]
 801069c:	6014      	str	r4, [r2, #0]
 801069e:	b003      	add	sp, #12
 80106a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80106a4:	f000 b98a 	b.w	80109bc <__malloc_unlock>
 80106a8:	42a3      	cmp	r3, r4
 80106aa:	d908      	bls.n	80106be <_free_r+0x46>
 80106ac:	6825      	ldr	r5, [r4, #0]
 80106ae:	1961      	adds	r1, r4, r5
 80106b0:	428b      	cmp	r3, r1
 80106b2:	bf01      	itttt	eq
 80106b4:	6819      	ldreq	r1, [r3, #0]
 80106b6:	685b      	ldreq	r3, [r3, #4]
 80106b8:	1949      	addeq	r1, r1, r5
 80106ba:	6021      	streq	r1, [r4, #0]
 80106bc:	e7ed      	b.n	801069a <_free_r+0x22>
 80106be:	461a      	mov	r2, r3
 80106c0:	685b      	ldr	r3, [r3, #4]
 80106c2:	b10b      	cbz	r3, 80106c8 <_free_r+0x50>
 80106c4:	42a3      	cmp	r3, r4
 80106c6:	d9fa      	bls.n	80106be <_free_r+0x46>
 80106c8:	6811      	ldr	r1, [r2, #0]
 80106ca:	1855      	adds	r5, r2, r1
 80106cc:	42a5      	cmp	r5, r4
 80106ce:	d10b      	bne.n	80106e8 <_free_r+0x70>
 80106d0:	6824      	ldr	r4, [r4, #0]
 80106d2:	4421      	add	r1, r4
 80106d4:	1854      	adds	r4, r2, r1
 80106d6:	42a3      	cmp	r3, r4
 80106d8:	6011      	str	r1, [r2, #0]
 80106da:	d1e0      	bne.n	801069e <_free_r+0x26>
 80106dc:	681c      	ldr	r4, [r3, #0]
 80106de:	685b      	ldr	r3, [r3, #4]
 80106e0:	6053      	str	r3, [r2, #4]
 80106e2:	4421      	add	r1, r4
 80106e4:	6011      	str	r1, [r2, #0]
 80106e6:	e7da      	b.n	801069e <_free_r+0x26>
 80106e8:	d902      	bls.n	80106f0 <_free_r+0x78>
 80106ea:	230c      	movs	r3, #12
 80106ec:	6003      	str	r3, [r0, #0]
 80106ee:	e7d6      	b.n	801069e <_free_r+0x26>
 80106f0:	6825      	ldr	r5, [r4, #0]
 80106f2:	1961      	adds	r1, r4, r5
 80106f4:	428b      	cmp	r3, r1
 80106f6:	bf04      	itt	eq
 80106f8:	6819      	ldreq	r1, [r3, #0]
 80106fa:	685b      	ldreq	r3, [r3, #4]
 80106fc:	6063      	str	r3, [r4, #4]
 80106fe:	bf04      	itt	eq
 8010700:	1949      	addeq	r1, r1, r5
 8010702:	6021      	streq	r1, [r4, #0]
 8010704:	6054      	str	r4, [r2, #4]
 8010706:	e7ca      	b.n	801069e <_free_r+0x26>
 8010708:	b003      	add	sp, #12
 801070a:	bd30      	pop	{r4, r5, pc}
 801070c:	20006ee4 	.word	0x20006ee4

08010710 <sbrk_aligned>:
 8010710:	b570      	push	{r4, r5, r6, lr}
 8010712:	4e0e      	ldr	r6, [pc, #56]	; (801074c <sbrk_aligned+0x3c>)
 8010714:	460c      	mov	r4, r1
 8010716:	6831      	ldr	r1, [r6, #0]
 8010718:	4605      	mov	r5, r0
 801071a:	b911      	cbnz	r1, 8010722 <sbrk_aligned+0x12>
 801071c:	f000 f8f6 	bl	801090c <_sbrk_r>
 8010720:	6030      	str	r0, [r6, #0]
 8010722:	4621      	mov	r1, r4
 8010724:	4628      	mov	r0, r5
 8010726:	f000 f8f1 	bl	801090c <_sbrk_r>
 801072a:	1c43      	adds	r3, r0, #1
 801072c:	d00a      	beq.n	8010744 <sbrk_aligned+0x34>
 801072e:	1cc4      	adds	r4, r0, #3
 8010730:	f024 0403 	bic.w	r4, r4, #3
 8010734:	42a0      	cmp	r0, r4
 8010736:	d007      	beq.n	8010748 <sbrk_aligned+0x38>
 8010738:	1a21      	subs	r1, r4, r0
 801073a:	4628      	mov	r0, r5
 801073c:	f000 f8e6 	bl	801090c <_sbrk_r>
 8010740:	3001      	adds	r0, #1
 8010742:	d101      	bne.n	8010748 <sbrk_aligned+0x38>
 8010744:	f04f 34ff 	mov.w	r4, #4294967295
 8010748:	4620      	mov	r0, r4
 801074a:	bd70      	pop	{r4, r5, r6, pc}
 801074c:	20006ee8 	.word	0x20006ee8

08010750 <_malloc_r>:
 8010750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010754:	1ccd      	adds	r5, r1, #3
 8010756:	f025 0503 	bic.w	r5, r5, #3
 801075a:	3508      	adds	r5, #8
 801075c:	2d0c      	cmp	r5, #12
 801075e:	bf38      	it	cc
 8010760:	250c      	movcc	r5, #12
 8010762:	2d00      	cmp	r5, #0
 8010764:	4607      	mov	r7, r0
 8010766:	db01      	blt.n	801076c <_malloc_r+0x1c>
 8010768:	42a9      	cmp	r1, r5
 801076a:	d905      	bls.n	8010778 <_malloc_r+0x28>
 801076c:	230c      	movs	r3, #12
 801076e:	603b      	str	r3, [r7, #0]
 8010770:	2600      	movs	r6, #0
 8010772:	4630      	mov	r0, r6
 8010774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010778:	4e2e      	ldr	r6, [pc, #184]	; (8010834 <_malloc_r+0xe4>)
 801077a:	f000 f919 	bl	80109b0 <__malloc_lock>
 801077e:	6833      	ldr	r3, [r6, #0]
 8010780:	461c      	mov	r4, r3
 8010782:	bb34      	cbnz	r4, 80107d2 <_malloc_r+0x82>
 8010784:	4629      	mov	r1, r5
 8010786:	4638      	mov	r0, r7
 8010788:	f7ff ffc2 	bl	8010710 <sbrk_aligned>
 801078c:	1c43      	adds	r3, r0, #1
 801078e:	4604      	mov	r4, r0
 8010790:	d14d      	bne.n	801082e <_malloc_r+0xde>
 8010792:	6834      	ldr	r4, [r6, #0]
 8010794:	4626      	mov	r6, r4
 8010796:	2e00      	cmp	r6, #0
 8010798:	d140      	bne.n	801081c <_malloc_r+0xcc>
 801079a:	6823      	ldr	r3, [r4, #0]
 801079c:	4631      	mov	r1, r6
 801079e:	4638      	mov	r0, r7
 80107a0:	eb04 0803 	add.w	r8, r4, r3
 80107a4:	f000 f8b2 	bl	801090c <_sbrk_r>
 80107a8:	4580      	cmp	r8, r0
 80107aa:	d13a      	bne.n	8010822 <_malloc_r+0xd2>
 80107ac:	6821      	ldr	r1, [r4, #0]
 80107ae:	3503      	adds	r5, #3
 80107b0:	1a6d      	subs	r5, r5, r1
 80107b2:	f025 0503 	bic.w	r5, r5, #3
 80107b6:	3508      	adds	r5, #8
 80107b8:	2d0c      	cmp	r5, #12
 80107ba:	bf38      	it	cc
 80107bc:	250c      	movcc	r5, #12
 80107be:	4629      	mov	r1, r5
 80107c0:	4638      	mov	r0, r7
 80107c2:	f7ff ffa5 	bl	8010710 <sbrk_aligned>
 80107c6:	3001      	adds	r0, #1
 80107c8:	d02b      	beq.n	8010822 <_malloc_r+0xd2>
 80107ca:	6823      	ldr	r3, [r4, #0]
 80107cc:	442b      	add	r3, r5
 80107ce:	6023      	str	r3, [r4, #0]
 80107d0:	e00e      	b.n	80107f0 <_malloc_r+0xa0>
 80107d2:	6822      	ldr	r2, [r4, #0]
 80107d4:	1b52      	subs	r2, r2, r5
 80107d6:	d41e      	bmi.n	8010816 <_malloc_r+0xc6>
 80107d8:	2a0b      	cmp	r2, #11
 80107da:	d916      	bls.n	801080a <_malloc_r+0xba>
 80107dc:	1961      	adds	r1, r4, r5
 80107de:	42a3      	cmp	r3, r4
 80107e0:	6025      	str	r5, [r4, #0]
 80107e2:	bf18      	it	ne
 80107e4:	6059      	strne	r1, [r3, #4]
 80107e6:	6863      	ldr	r3, [r4, #4]
 80107e8:	bf08      	it	eq
 80107ea:	6031      	streq	r1, [r6, #0]
 80107ec:	5162      	str	r2, [r4, r5]
 80107ee:	604b      	str	r3, [r1, #4]
 80107f0:	4638      	mov	r0, r7
 80107f2:	f104 060b 	add.w	r6, r4, #11
 80107f6:	f000 f8e1 	bl	80109bc <__malloc_unlock>
 80107fa:	f026 0607 	bic.w	r6, r6, #7
 80107fe:	1d23      	adds	r3, r4, #4
 8010800:	1af2      	subs	r2, r6, r3
 8010802:	d0b6      	beq.n	8010772 <_malloc_r+0x22>
 8010804:	1b9b      	subs	r3, r3, r6
 8010806:	50a3      	str	r3, [r4, r2]
 8010808:	e7b3      	b.n	8010772 <_malloc_r+0x22>
 801080a:	6862      	ldr	r2, [r4, #4]
 801080c:	42a3      	cmp	r3, r4
 801080e:	bf0c      	ite	eq
 8010810:	6032      	streq	r2, [r6, #0]
 8010812:	605a      	strne	r2, [r3, #4]
 8010814:	e7ec      	b.n	80107f0 <_malloc_r+0xa0>
 8010816:	4623      	mov	r3, r4
 8010818:	6864      	ldr	r4, [r4, #4]
 801081a:	e7b2      	b.n	8010782 <_malloc_r+0x32>
 801081c:	4634      	mov	r4, r6
 801081e:	6876      	ldr	r6, [r6, #4]
 8010820:	e7b9      	b.n	8010796 <_malloc_r+0x46>
 8010822:	230c      	movs	r3, #12
 8010824:	603b      	str	r3, [r7, #0]
 8010826:	4638      	mov	r0, r7
 8010828:	f000 f8c8 	bl	80109bc <__malloc_unlock>
 801082c:	e7a1      	b.n	8010772 <_malloc_r+0x22>
 801082e:	6025      	str	r5, [r4, #0]
 8010830:	e7de      	b.n	80107f0 <_malloc_r+0xa0>
 8010832:	bf00      	nop
 8010834:	20006ee4 	.word	0x20006ee4

08010838 <cleanup_glue>:
 8010838:	b538      	push	{r3, r4, r5, lr}
 801083a:	460c      	mov	r4, r1
 801083c:	6809      	ldr	r1, [r1, #0]
 801083e:	4605      	mov	r5, r0
 8010840:	b109      	cbz	r1, 8010846 <cleanup_glue+0xe>
 8010842:	f7ff fff9 	bl	8010838 <cleanup_glue>
 8010846:	4621      	mov	r1, r4
 8010848:	4628      	mov	r0, r5
 801084a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801084e:	f7ff bf13 	b.w	8010678 <_free_r>
	...

08010854 <_reclaim_reent>:
 8010854:	4b2c      	ldr	r3, [pc, #176]	; (8010908 <_reclaim_reent+0xb4>)
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	4283      	cmp	r3, r0
 801085a:	b570      	push	{r4, r5, r6, lr}
 801085c:	4604      	mov	r4, r0
 801085e:	d051      	beq.n	8010904 <_reclaim_reent+0xb0>
 8010860:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010862:	b143      	cbz	r3, 8010876 <_reclaim_reent+0x22>
 8010864:	68db      	ldr	r3, [r3, #12]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d14a      	bne.n	8010900 <_reclaim_reent+0xac>
 801086a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801086c:	6819      	ldr	r1, [r3, #0]
 801086e:	b111      	cbz	r1, 8010876 <_reclaim_reent+0x22>
 8010870:	4620      	mov	r0, r4
 8010872:	f7ff ff01 	bl	8010678 <_free_r>
 8010876:	6961      	ldr	r1, [r4, #20]
 8010878:	b111      	cbz	r1, 8010880 <_reclaim_reent+0x2c>
 801087a:	4620      	mov	r0, r4
 801087c:	f7ff fefc 	bl	8010678 <_free_r>
 8010880:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010882:	b111      	cbz	r1, 801088a <_reclaim_reent+0x36>
 8010884:	4620      	mov	r0, r4
 8010886:	f7ff fef7 	bl	8010678 <_free_r>
 801088a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801088c:	b111      	cbz	r1, 8010894 <_reclaim_reent+0x40>
 801088e:	4620      	mov	r0, r4
 8010890:	f7ff fef2 	bl	8010678 <_free_r>
 8010894:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010896:	b111      	cbz	r1, 801089e <_reclaim_reent+0x4a>
 8010898:	4620      	mov	r0, r4
 801089a:	f7ff feed 	bl	8010678 <_free_r>
 801089e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80108a0:	b111      	cbz	r1, 80108a8 <_reclaim_reent+0x54>
 80108a2:	4620      	mov	r0, r4
 80108a4:	f7ff fee8 	bl	8010678 <_free_r>
 80108a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80108aa:	b111      	cbz	r1, 80108b2 <_reclaim_reent+0x5e>
 80108ac:	4620      	mov	r0, r4
 80108ae:	f7ff fee3 	bl	8010678 <_free_r>
 80108b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80108b4:	b111      	cbz	r1, 80108bc <_reclaim_reent+0x68>
 80108b6:	4620      	mov	r0, r4
 80108b8:	f7ff fede 	bl	8010678 <_free_r>
 80108bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80108be:	b111      	cbz	r1, 80108c6 <_reclaim_reent+0x72>
 80108c0:	4620      	mov	r0, r4
 80108c2:	f7ff fed9 	bl	8010678 <_free_r>
 80108c6:	69a3      	ldr	r3, [r4, #24]
 80108c8:	b1e3      	cbz	r3, 8010904 <_reclaim_reent+0xb0>
 80108ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80108cc:	4620      	mov	r0, r4
 80108ce:	4798      	blx	r3
 80108d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80108d2:	b1b9      	cbz	r1, 8010904 <_reclaim_reent+0xb0>
 80108d4:	4620      	mov	r0, r4
 80108d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80108da:	f7ff bfad 	b.w	8010838 <cleanup_glue>
 80108de:	5949      	ldr	r1, [r1, r5]
 80108e0:	b941      	cbnz	r1, 80108f4 <_reclaim_reent+0xa0>
 80108e2:	3504      	adds	r5, #4
 80108e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80108e6:	2d80      	cmp	r5, #128	; 0x80
 80108e8:	68d9      	ldr	r1, [r3, #12]
 80108ea:	d1f8      	bne.n	80108de <_reclaim_reent+0x8a>
 80108ec:	4620      	mov	r0, r4
 80108ee:	f7ff fec3 	bl	8010678 <_free_r>
 80108f2:	e7ba      	b.n	801086a <_reclaim_reent+0x16>
 80108f4:	680e      	ldr	r6, [r1, #0]
 80108f6:	4620      	mov	r0, r4
 80108f8:	f7ff febe 	bl	8010678 <_free_r>
 80108fc:	4631      	mov	r1, r6
 80108fe:	e7ef      	b.n	80108e0 <_reclaim_reent+0x8c>
 8010900:	2500      	movs	r5, #0
 8010902:	e7ef      	b.n	80108e4 <_reclaim_reent+0x90>
 8010904:	bd70      	pop	{r4, r5, r6, pc}
 8010906:	bf00      	nop
 8010908:	20000138 	.word	0x20000138

0801090c <_sbrk_r>:
 801090c:	b538      	push	{r3, r4, r5, lr}
 801090e:	4d06      	ldr	r5, [pc, #24]	; (8010928 <_sbrk_r+0x1c>)
 8010910:	2300      	movs	r3, #0
 8010912:	4604      	mov	r4, r0
 8010914:	4608      	mov	r0, r1
 8010916:	602b      	str	r3, [r5, #0]
 8010918:	f7f2 fbfc 	bl	8003114 <_sbrk>
 801091c:	1c43      	adds	r3, r0, #1
 801091e:	d102      	bne.n	8010926 <_sbrk_r+0x1a>
 8010920:	682b      	ldr	r3, [r5, #0]
 8010922:	b103      	cbz	r3, 8010926 <_sbrk_r+0x1a>
 8010924:	6023      	str	r3, [r4, #0]
 8010926:	bd38      	pop	{r3, r4, r5, pc}
 8010928:	20006eec 	.word	0x20006eec

0801092c <__utoa>:
 801092c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801092e:	4c1f      	ldr	r4, [pc, #124]	; (80109ac <__utoa+0x80>)
 8010930:	b08b      	sub	sp, #44	; 0x2c
 8010932:	4605      	mov	r5, r0
 8010934:	460b      	mov	r3, r1
 8010936:	466e      	mov	r6, sp
 8010938:	f104 0c20 	add.w	ip, r4, #32
 801093c:	6820      	ldr	r0, [r4, #0]
 801093e:	6861      	ldr	r1, [r4, #4]
 8010940:	4637      	mov	r7, r6
 8010942:	c703      	stmia	r7!, {r0, r1}
 8010944:	3408      	adds	r4, #8
 8010946:	4564      	cmp	r4, ip
 8010948:	463e      	mov	r6, r7
 801094a:	d1f7      	bne.n	801093c <__utoa+0x10>
 801094c:	7921      	ldrb	r1, [r4, #4]
 801094e:	7139      	strb	r1, [r7, #4]
 8010950:	1e91      	subs	r1, r2, #2
 8010952:	6820      	ldr	r0, [r4, #0]
 8010954:	6038      	str	r0, [r7, #0]
 8010956:	2922      	cmp	r1, #34	; 0x22
 8010958:	f04f 0100 	mov.w	r1, #0
 801095c:	d904      	bls.n	8010968 <__utoa+0x3c>
 801095e:	7019      	strb	r1, [r3, #0]
 8010960:	460b      	mov	r3, r1
 8010962:	4618      	mov	r0, r3
 8010964:	b00b      	add	sp, #44	; 0x2c
 8010966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010968:	1e58      	subs	r0, r3, #1
 801096a:	4684      	mov	ip, r0
 801096c:	fbb5 f7f2 	udiv	r7, r5, r2
 8010970:	fb02 5617 	mls	r6, r2, r7, r5
 8010974:	3628      	adds	r6, #40	; 0x28
 8010976:	446e      	add	r6, sp
 8010978:	460c      	mov	r4, r1
 801097a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 801097e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8010982:	462e      	mov	r6, r5
 8010984:	42b2      	cmp	r2, r6
 8010986:	f101 0101 	add.w	r1, r1, #1
 801098a:	463d      	mov	r5, r7
 801098c:	d9ee      	bls.n	801096c <__utoa+0x40>
 801098e:	2200      	movs	r2, #0
 8010990:	545a      	strb	r2, [r3, r1]
 8010992:	1919      	adds	r1, r3, r4
 8010994:	1aa5      	subs	r5, r4, r2
 8010996:	42aa      	cmp	r2, r5
 8010998:	dae3      	bge.n	8010962 <__utoa+0x36>
 801099a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 801099e:	780e      	ldrb	r6, [r1, #0]
 80109a0:	7006      	strb	r6, [r0, #0]
 80109a2:	3201      	adds	r2, #1
 80109a4:	f801 5901 	strb.w	r5, [r1], #-1
 80109a8:	e7f4      	b.n	8010994 <__utoa+0x68>
 80109aa:	bf00      	nop
 80109ac:	08011acc 	.word	0x08011acc

080109b0 <__malloc_lock>:
 80109b0:	4801      	ldr	r0, [pc, #4]	; (80109b8 <__malloc_lock+0x8>)
 80109b2:	f7ff be41 	b.w	8010638 <__retarget_lock_acquire_recursive>
 80109b6:	bf00      	nop
 80109b8:	20006ee0 	.word	0x20006ee0

080109bc <__malloc_unlock>:
 80109bc:	4801      	ldr	r0, [pc, #4]	; (80109c4 <__malloc_unlock+0x8>)
 80109be:	f7ff be3c 	b.w	801063a <__retarget_lock_release_recursive>
 80109c2:	bf00      	nop
 80109c4:	20006ee0 	.word	0x20006ee0

080109c8 <_init>:
 80109c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ca:	bf00      	nop
 80109cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109ce:	bc08      	pop	{r3}
 80109d0:	469e      	mov	lr, r3
 80109d2:	4770      	bx	lr

080109d4 <_fini>:
 80109d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109d6:	bf00      	nop
 80109d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109da:	bc08      	pop	{r3}
 80109dc:	469e      	mov	lr, r3
 80109de:	4770      	bx	lr
