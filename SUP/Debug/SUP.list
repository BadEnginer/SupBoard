
SUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e38  08006de8  08006de8  00016de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c20  08007c20  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007c20  08007c20  00017c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c28  08007c28  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c28  08007c28  00017c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c2c  08007c2c  00017c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b40  2000007c  08007cac  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20000bbc  08007cac  00020bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a438  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003696  00000000  00000000  0003a4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001658  00000000  00000000  0003db80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f0  00000000  00000000  0003f1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cf9  00000000  00000000  000406c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d8e  00000000  00000000  000593c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b7d9  00000000  00000000  0007314f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e928  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000639c  00000000  00000000  0010e978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006dd0 	.word	0x08006dd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08006dd0 	.word	0x08006dd0

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <ADS1115_init>:
	ADS1115_Config_t 	config;
};

static void prepareConfigFrame(uint8_t *pOutFrame, ADS1115_Config_t config);

ADS1115_Handle_t* ADS1115_init(I2C_HandleTypeDef *hi2c, uint16_t Addr, ADS1115_Config_t config){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	4608      	mov	r0, r1
 8000d6a:	4639      	mov	r1, r7
 8000d6c:	e881 000c 	stmia.w	r1, {r2, r3}
 8000d70:	4603      	mov	r3, r0
 8000d72:	817b      	strh	r3, [r7, #10]
	ADS1115_Handle_t *pConfig = malloc(sizeof(ADS1115_Handle_t));
 8000d74:	2010      	movs	r0, #16
 8000d76:	f005 fee7 	bl	8006b48 <malloc>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	617b      	str	r3, [r7, #20]
	pConfig->hi2c = hi2c;
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	601a      	str	r2, [r3, #0]
	pConfig->address = Addr;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	897a      	ldrh	r2, [r7, #10]
 8000d88:	809a      	strh	r2, [r3, #4]
	pConfig->config = config;
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	1d9a      	adds	r2, r3, #6
 8000d8e:	463b      	mov	r3, r7
 8000d90:	cb03      	ldmia	r3!, {r0, r1}
 8000d92:	6010      	str	r0, [r2, #0]
 8000d94:	6051      	str	r1, [r2, #4]
	return pConfig;
 8000d96:	697b      	ldr	r3, [r7, #20]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <ADS1115_updateConfig>:

void ADS1115_deinit(ADS1115_Handle_t* pConfig){
	free(pConfig);
}

void ADS1115_updateConfig(ADS1115_Handle_t *pConfig, ADS1115_Config_t config){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af02      	add	r7, sp, #8
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	e883 0006 	stmia.w	r3, {r1, r2}
	pConfig->config = config;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	1d9a      	adds	r2, r3, #6
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	cb03      	ldmia	r3!, {r0, r1}
 8000db6:	6010      	str	r0, [r2, #0]
 8000db8:	6051      	str	r1, [r2, #4]

	uint8_t bytes[3] = {0};
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <ADS1115_updateConfig+0x60>)
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	82bb      	strh	r3, [r7, #20]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	75bb      	strb	r3, [r7, #22]
	prepareConfigFrame(bytes, pConfig->config);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f107 0014 	add.w	r0, r7, #20
 8000dca:	f8d3 1006 	ldr.w	r1, [r3, #6]
 8000dce:	460a      	mov	r2, r1
 8000dd0:	f8d3 100a 	ldr.w	r1, [r3, #10]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	461a      	mov	r2, r3
 8000dda:	f000 f87d 	bl	8000ed8 <prepareConfigFrame>

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	6818      	ldr	r0, [r3, #0]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	889b      	ldrh	r3, [r3, #4]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	b299      	uxth	r1, r3
 8000dea:	f107 0214 	add.w	r2, r7, #20
 8000dee:	2364      	movs	r3, #100	; 0x64
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2303      	movs	r3, #3
 8000df4:	f002 feae 	bl	8003b54 <HAL_I2C_Master_Transmit>
}
 8000df8:	bf00      	nop
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	08006de8 	.word	0x08006de8

08000e04 <ADS1115_getData>:
	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);

	return ADS1115_getData(pConfig);
}

int16_t ADS1115_getData(ADS1115_Handle_t *pConfig){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af02      	add	r7, sp, #8
 8000e0a:	6078      	str	r0, [r7, #4]
	uint8_t bytes[2] = {0};
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	81bb      	strh	r3, [r7, #12]
	bytes[0] = 0x00;
 8000e10:	2300      	movs	r3, #0
 8000e12:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 1, 50);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6818      	ldr	r0, [r3, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	889b      	ldrh	r3, [r3, #4]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	b299      	uxth	r1, r3
 8000e20:	f107 020c 	add.w	r2, r7, #12
 8000e24:	2332      	movs	r3, #50	; 0x32
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	2301      	movs	r3, #1
 8000e2a:	f002 fe93 	bl	8003b54 <HAL_I2C_Master_Transmit>

	if(HAL_I2C_Master_Receive(pConfig->hi2c, (pConfig->address << 1), bytes, 2, 50) != HAL_OK)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6818      	ldr	r0, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	889b      	ldrh	r3, [r3, #4]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	b299      	uxth	r1, r3
 8000e3a:	f107 020c 	add.w	r2, r7, #12
 8000e3e:	2332      	movs	r3, #50	; 0x32
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	2302      	movs	r3, #2
 8000e44:	f002 ff84 	bl	8003d50 <HAL_I2C_Master_Receive>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <ADS1115_getData+0x4e>
		return 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e010      	b.n	8000e74 <ADS1115_getData+0x70>

	int16_t readValue = ((bytes[0] << 8) | bytes[1]);
 8000e52:	7b3b      	ldrb	r3, [r7, #12]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	7b7b      	ldrb	r3, [r7, #13]
 8000e5a:	b21b      	sxth	r3, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	81fb      	strh	r3, [r7, #14]
	if(readValue < 0)
 8000e60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	da03      	bge.n	8000e70 <ADS1115_getData+0x6c>
		readValue *=-1;
 8000e68:	89fb      	ldrh	r3, [r7, #14]
 8000e6a:	425b      	negs	r3, r3
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	81fb      	strh	r3, [r7, #14]

	return readValue;
 8000e70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <ADS1115_startContinousMode>:

void ADS1115_setConversionReadyPin(ADS1115_Handle_t* pConfig){
	ADS1115_setThresholds(pConfig, 0x0000, 0xFFFF);
}

void ADS1115_startContinousMode(ADS1115_Handle_t* pConfig){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af02      	add	r7, sp, #8
 8000e82:	6078      	str	r0, [r7, #4]
	uint8_t bytes[3] = {0};
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <ADS1115_startContinousMode+0x58>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	82bb      	strh	r3, [r7, #20]
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	75bb      	strb	r3, [r7, #22]

	ADS1115_Config_t configReg = pConfig->config;
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	3206      	adds	r2, #6
 8000e96:	6810      	ldr	r0, [r2, #0]
 8000e98:	6851      	ldr	r1, [r2, #4]
 8000e9a:	c303      	stmia	r3!, {r0, r1}
	configReg.operatingMode = MODE_CONTINOUS;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	73bb      	strb	r3, [r7, #14]
	prepareConfigFrame(bytes, configReg);
 8000ea0:	f107 0014 	add.w	r0, r7, #20
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000eac:	f000 f814 	bl	8000ed8 <prepareConfigFrame>

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6818      	ldr	r0, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	889b      	ldrh	r3, [r3, #4]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	b299      	uxth	r1, r3
 8000ebc:	f107 0214 	add.w	r2, r7, #20
 8000ec0:	2364      	movs	r3, #100	; 0x64
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	f002 fe45 	bl	8003b54 <HAL_I2C_Master_Transmit>
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	08006de8 	.word	0x08006de8

08000ed8 <prepareConfigFrame>:
	prepareConfigFrame(bytes, configReg);

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
}

static void prepareConfigFrame(uint8_t *pOutFrame, ADS1115_Config_t config){
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	e883 0006 	stmia.w	r3, {r1, r2}
	pOutFrame[0] = 0x01;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	701a      	strb	r2, [r3, #0]
	pOutFrame[1] |= (config.channel << 6) | (config.pgaConfig << 3)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b25a      	sxtb	r2, r3
 8000ef4:	793b      	ldrb	r3, [r7, #4]
 8000ef6:	019b      	lsls	r3, r3, #6
 8000ef8:	b259      	sxtb	r1, r3
 8000efa:	797b      	ldrb	r3, [r7, #5]
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	b25b      	sxtb	r3, r3
 8000f00:	430b      	orrs	r3, r1
 8000f02:	b259      	sxtb	r1, r3
					| (config.operatingMode << 0);
 8000f04:	79bb      	ldrb	r3, [r7, #6]
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	430b      	orrs	r3, r1
 8000f0a:	b25b      	sxtb	r3, r3
	pOutFrame[1] |= (config.channel << 6) | (config.pgaConfig << 3)
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	b25a      	sxtb	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	3301      	adds	r3, #1
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	701a      	strb	r2, [r3, #0]
	pOutFrame[2] |= (config.dataRate << 5) | (config.compareMode << 4) | (config.polarityMode << 3)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b25a      	sxtb	r2, r3
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	015b      	lsls	r3, r3, #5
 8000f24:	b259      	sxtb	r1, r3
 8000f26:	7a3b      	ldrb	r3, [r7, #8]
 8000f28:	011b      	lsls	r3, r3, #4
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	430b      	orrs	r3, r1
 8000f2e:	b259      	sxtb	r1, r3
 8000f30:	7a7b      	ldrb	r3, [r7, #9]
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	430b      	orrs	r3, r1
 8000f38:	b259      	sxtb	r1, r3
					| (config.latchingMode << 2) | (config.queueComparator << 1);
 8000f3a:	7abb      	ldrb	r3, [r7, #10]
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	b25b      	sxtb	r3, r3
 8000f40:	430b      	orrs	r3, r1
 8000f42:	b259      	sxtb	r1, r3
 8000f44:	7afb      	ldrb	r3, [r7, #11]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	430b      	orrs	r3, r1
 8000f4c:	b25b      	sxtb	r3, r3
	pOutFrame[2] |= (config.dataRate << 5) | (config.compareMode << 4) | (config.polarityMode << 3)
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b25a      	sxtb	r2, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	3302      	adds	r3, #2
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	701a      	strb	r2, [r3, #0]
}
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af04      	add	r7, sp, #16
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	9302      	str	r3, [sp, #8]
 8000f84:	2301      	movs	r3, #1
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	1dfb      	adds	r3, r7, #7
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2178      	movs	r1, #120	; 0x78
 8000f92:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <ssd1306_WriteCommand+0x2c>)
 8000f94:	f003 f902 	bl	800419c <HAL_I2C_Mem_Write>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000057c 	.word	0x2000057c

08000fa4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af04      	add	r7, sp, #16
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb6:	9202      	str	r2, [sp, #8]
 8000fb8:	9301      	str	r3, [sp, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	2240      	movs	r2, #64	; 0x40
 8000fc2:	2178      	movs	r1, #120	; 0x78
 8000fc4:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <ssd1306_WriteData+0x30>)
 8000fc6:	f003 f8e9 	bl	800419c <HAL_I2C_Mem_Write>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2000057c 	.word	0x2000057c

08000fd8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000fdc:	f7ff ffc3 	bl	8000f66 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000fe0:	2064      	movs	r0, #100	; 0x64
 8000fe2:	f001 fe3d 	bl	8002c60 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 f9da 	bl	80013a0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000fec:	2020      	movs	r0, #32
 8000fee:	f7ff ffc1 	bl	8000f74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f7ff ffbe 	bl	8000f74 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000ff8:	20b0      	movs	r0, #176	; 0xb0
 8000ffa:	f7ff ffbb 	bl	8000f74 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000ffe:	20c8      	movs	r0, #200	; 0xc8
 8001000:	f7ff ffb8 	bl	8000f74 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001004:	2000      	movs	r0, #0
 8001006:	f7ff ffb5 	bl	8000f74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800100a:	2010      	movs	r0, #16
 800100c:	f7ff ffb2 	bl	8000f74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001010:	2040      	movs	r0, #64	; 0x40
 8001012:	f7ff ffaf 	bl	8000f74 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001016:	20ff      	movs	r0, #255	; 0xff
 8001018:	f000 f9ae 	bl	8001378 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800101c:	20a1      	movs	r0, #161	; 0xa1
 800101e:	f7ff ffa9 	bl	8000f74 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001022:	20a6      	movs	r0, #166	; 0xa6
 8001024:	f7ff ffa6 	bl	8000f74 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001028:	20a8      	movs	r0, #168	; 0xa8
 800102a:	f7ff ffa3 	bl	8000f74 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800102e:	203f      	movs	r0, #63	; 0x3f
 8001030:	f7ff ffa0 	bl	8000f74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001034:	20a4      	movs	r0, #164	; 0xa4
 8001036:	f7ff ff9d 	bl	8000f74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800103a:	20d3      	movs	r0, #211	; 0xd3
 800103c:	f7ff ff9a 	bl	8000f74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001040:	2000      	movs	r0, #0
 8001042:	f7ff ff97 	bl	8000f74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001046:	20d5      	movs	r0, #213	; 0xd5
 8001048:	f7ff ff94 	bl	8000f74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800104c:	20f0      	movs	r0, #240	; 0xf0
 800104e:	f7ff ff91 	bl	8000f74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001052:	20d9      	movs	r0, #217	; 0xd9
 8001054:	f7ff ff8e 	bl	8000f74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001058:	2022      	movs	r0, #34	; 0x22
 800105a:	f7ff ff8b 	bl	8000f74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800105e:	20da      	movs	r0, #218	; 0xda
 8001060:	f7ff ff88 	bl	8000f74 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001064:	2012      	movs	r0, #18
 8001066:	f7ff ff85 	bl	8000f74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800106a:	20db      	movs	r0, #219	; 0xdb
 800106c:	f7ff ff82 	bl	8000f74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001070:	2020      	movs	r0, #32
 8001072:	f7ff ff7f 	bl	8000f74 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001076:	208d      	movs	r0, #141	; 0x8d
 8001078:	f7ff ff7c 	bl	8000f74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800107c:	2014      	movs	r0, #20
 800107e:	f7ff ff79 	bl	8000f74 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001082:	2001      	movs	r0, #1
 8001084:	f000 f98c 	bl	80013a0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001088:	2000      	movs	r0, #0
 800108a:	f000 f80f 	bl	80010ac <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800108e:	f000 f831 	bl	80010f4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <ssd1306_Init+0xd0>)
 8001094:	2200      	movs	r2, #0
 8001096:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <ssd1306_Init+0xd0>)
 800109a:	2200      	movs	r2, #0
 800109c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800109e:	4b02      	ldr	r3, [pc, #8]	; (80010a8 <ssd1306_Init+0xd0>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	711a      	strb	r2, [r3, #4]
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000498 	.word	0x20000498

080010ac <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	e00d      	b.n	80010d8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <ssd1306_Fill+0x1a>
 80010c2:	2100      	movs	r1, #0
 80010c4:	e000      	b.n	80010c8 <ssd1306_Fill+0x1c>
 80010c6:	21ff      	movs	r1, #255	; 0xff
 80010c8:	4a09      	ldr	r2, [pc, #36]	; (80010f0 <ssd1306_Fill+0x44>)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4413      	add	r3, r2
 80010ce:	460a      	mov	r2, r1
 80010d0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3301      	adds	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010de:	d3ed      	bcc.n	80010bc <ssd1306_Fill+0x10>
    }
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000098 	.word	0x20000098

080010f4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80010fa:	2300      	movs	r3, #0
 80010fc:	71fb      	strb	r3, [r7, #7]
 80010fe:	e016      	b.n	800112e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	3b50      	subs	r3, #80	; 0x50
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff34 	bl	8000f74 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff ff31 	bl	8000f74 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001112:	2010      	movs	r0, #16
 8001114:	f7ff ff2e 	bl	8000f74 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	01db      	lsls	r3, r3, #7
 800111c:	4a08      	ldr	r2, [pc, #32]	; (8001140 <ssd1306_UpdateScreen+0x4c>)
 800111e:	4413      	add	r3, r2
 8001120:	2180      	movs	r1, #128	; 0x80
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff3e 	bl	8000fa4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	3301      	adds	r3, #1
 800112c:	71fb      	strb	r3, [r7, #7]
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2b07      	cmp	r3, #7
 8001132:	d9e5      	bls.n	8001100 <ssd1306_UpdateScreen+0xc>
    }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000098 	.word	0x20000098

08001144 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
 800114e:	460b      	mov	r3, r1
 8001150:	71bb      	strb	r3, [r7, #6]
 8001152:	4613      	mov	r3, r2
 8001154:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	2b00      	cmp	r3, #0
 800115c:	db3d      	blt.n	80011da <ssd1306_DrawPixel+0x96>
 800115e:	79bb      	ldrb	r3, [r7, #6]
 8001160:	2b3f      	cmp	r3, #63	; 0x3f
 8001162:	d83a      	bhi.n	80011da <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001164:	797b      	ldrb	r3, [r7, #5]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d11a      	bne.n	80011a0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800116a:	79fa      	ldrb	r2, [r7, #7]
 800116c:	79bb      	ldrb	r3, [r7, #6]
 800116e:	08db      	lsrs	r3, r3, #3
 8001170:	b2d8      	uxtb	r0, r3
 8001172:	4603      	mov	r3, r0
 8001174:	01db      	lsls	r3, r3, #7
 8001176:	4413      	add	r3, r2
 8001178:	4a1b      	ldr	r2, [pc, #108]	; (80011e8 <ssd1306_DrawPixel+0xa4>)
 800117a:	5cd3      	ldrb	r3, [r2, r3]
 800117c:	b25a      	sxtb	r2, r3
 800117e:	79bb      	ldrb	r3, [r7, #6]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	2101      	movs	r1, #1
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	b25b      	sxtb	r3, r3
 800118c:	4313      	orrs	r3, r2
 800118e:	b259      	sxtb	r1, r3
 8001190:	79fa      	ldrb	r2, [r7, #7]
 8001192:	4603      	mov	r3, r0
 8001194:	01db      	lsls	r3, r3, #7
 8001196:	4413      	add	r3, r2
 8001198:	b2c9      	uxtb	r1, r1
 800119a:	4a13      	ldr	r2, [pc, #76]	; (80011e8 <ssd1306_DrawPixel+0xa4>)
 800119c:	54d1      	strb	r1, [r2, r3]
 800119e:	e01d      	b.n	80011dc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80011a0:	79fa      	ldrb	r2, [r7, #7]
 80011a2:	79bb      	ldrb	r3, [r7, #6]
 80011a4:	08db      	lsrs	r3, r3, #3
 80011a6:	b2d8      	uxtb	r0, r3
 80011a8:	4603      	mov	r3, r0
 80011aa:	01db      	lsls	r3, r3, #7
 80011ac:	4413      	add	r3, r2
 80011ae:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <ssd1306_DrawPixel+0xa4>)
 80011b0:	5cd3      	ldrb	r3, [r2, r3]
 80011b2:	b25a      	sxtb	r2, r3
 80011b4:	79bb      	ldrb	r3, [r7, #6]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	2101      	movs	r1, #1
 80011bc:	fa01 f303 	lsl.w	r3, r1, r3
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	4013      	ands	r3, r2
 80011c8:	b259      	sxtb	r1, r3
 80011ca:	79fa      	ldrb	r2, [r7, #7]
 80011cc:	4603      	mov	r3, r0
 80011ce:	01db      	lsls	r3, r3, #7
 80011d0:	4413      	add	r3, r2
 80011d2:	b2c9      	uxtb	r1, r1
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <ssd1306_DrawPixel+0xa4>)
 80011d6:	54d1      	strb	r1, [r2, r3]
 80011d8:	e000      	b.n	80011dc <ssd1306_DrawPixel+0x98>
        return;
 80011da:	bf00      	nop
    }
}
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000098 	.word	0x20000098

080011ec <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4604      	mov	r4, r0
 80011f4:	1d38      	adds	r0, r7, #4
 80011f6:	e880 0006 	stmia.w	r0, {r1, r2}
 80011fa:	461a      	mov	r2, r3
 80011fc:	4623      	mov	r3, r4
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	4613      	mov	r3, r2
 8001202:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	2b1f      	cmp	r3, #31
 8001208:	d902      	bls.n	8001210 <ssd1306_WriteChar+0x24>
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	2b7e      	cmp	r3, #126	; 0x7e
 800120e:	d901      	bls.n	8001214 <ssd1306_WriteChar+0x28>
        return 0;
 8001210:	2300      	movs	r3, #0
 8001212:	e06d      	b.n	80012f0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001214:	4b38      	ldr	r3, [pc, #224]	; (80012f8 <ssd1306_WriteChar+0x10c>)
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	793b      	ldrb	r3, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	2b80      	cmp	r3, #128	; 0x80
 8001220:	dc06      	bgt.n	8001230 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001222:	4b35      	ldr	r3, [pc, #212]	; (80012f8 <ssd1306_WriteChar+0x10c>)
 8001224:	885b      	ldrh	r3, [r3, #2]
 8001226:	461a      	mov	r2, r3
 8001228:	797b      	ldrb	r3, [r7, #5]
 800122a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800122c:	2b40      	cmp	r3, #64	; 0x40
 800122e:	dd01      	ble.n	8001234 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001230:	2300      	movs	r3, #0
 8001232:	e05d      	b.n	80012f0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
 8001238:	e04c      	b.n	80012d4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	3b20      	subs	r3, #32
 8001240:	7979      	ldrb	r1, [r7, #5]
 8001242:	fb01 f303 	mul.w	r3, r1, r3
 8001246:	4619      	mov	r1, r3
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	440b      	add	r3, r1
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001254:	2300      	movs	r3, #0
 8001256:	61bb      	str	r3, [r7, #24]
 8001258:	e034      	b.n	80012c4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d012      	beq.n	8001290 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800126a:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <ssd1306_WriteChar+0x10c>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	b2da      	uxtb	r2, r3
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4413      	add	r3, r2
 8001276:	b2d8      	uxtb	r0, r3
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <ssd1306_WriteChar+0x10c>)
 800127a:	885b      	ldrh	r3, [r3, #2]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4413      	add	r3, r2
 8001284:	b2db      	uxtb	r3, r3
 8001286:	7bba      	ldrb	r2, [r7, #14]
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff ff5b 	bl	8001144 <ssd1306_DrawPixel>
 800128e:	e016      	b.n	80012be <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <ssd1306_WriteChar+0x10c>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	4413      	add	r3, r2
 800129c:	b2d8      	uxtb	r0, r3
 800129e:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <ssd1306_WriteChar+0x10c>)
 80012a0:	885b      	ldrh	r3, [r3, #2]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4413      	add	r3, r2
 80012aa:	b2d9      	uxtb	r1, r3
 80012ac:	7bbb      	ldrb	r3, [r7, #14]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	bf0c      	ite	eq
 80012b2:	2301      	moveq	r3, #1
 80012b4:	2300      	movne	r3, #0
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	461a      	mov	r2, r3
 80012ba:	f7ff ff43 	bl	8001144 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	3301      	adds	r3, #1
 80012c2:	61bb      	str	r3, [r7, #24]
 80012c4:	793b      	ldrb	r3, [r7, #4]
 80012c6:	461a      	mov	r2, r3
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d3c5      	bcc.n	800125a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3301      	adds	r3, #1
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	797b      	ldrb	r3, [r7, #5]
 80012d6:	461a      	mov	r2, r3
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	4293      	cmp	r3, r2
 80012dc:	d3ad      	bcc.n	800123a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <ssd1306_WriteChar+0x10c>)
 80012e0:	881a      	ldrh	r2, [r3, #0]
 80012e2:	793b      	ldrb	r3, [r7, #4]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	4413      	add	r3, r2
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <ssd1306_WriteChar+0x10c>)
 80012ec:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3724      	adds	r7, #36	; 0x24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd90      	pop	{r4, r7, pc}
 80012f8:	20000498 	.word	0x20000498

080012fc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	1d38      	adds	r0, r7, #4
 8001306:	e880 0006 	stmia.w	r0, {r1, r2}
 800130a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800130c:	e012      	b.n	8001334 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	7818      	ldrb	r0, [r3, #0]
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	1d3a      	adds	r2, r7, #4
 8001316:	ca06      	ldmia	r2, {r1, r2}
 8001318:	f7ff ff68 	bl	80011ec <ssd1306_WriteChar>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	d002      	beq.n	800132e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	e008      	b.n	8001340 <ssd1306_WriteString+0x44>
        }
        str++;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	3301      	adds	r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1e8      	bne.n	800130e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	781b      	ldrb	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	460a      	mov	r2, r1
 8001352:	71fb      	strb	r3, [r7, #7]
 8001354:	4613      	mov	r3, r2
 8001356:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	b29a      	uxth	r2, r3
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <ssd1306_SetCursor+0x2c>)
 800135e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001360:	79bb      	ldrb	r3, [r7, #6]
 8001362:	b29a      	uxth	r2, r3
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <ssd1306_SetCursor+0x2c>)
 8001366:	805a      	strh	r2, [r3, #2]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	20000498 	.word	0x20000498

08001378 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001382:	2381      	movs	r3, #129	; 0x81
 8001384:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fdf3 	bl	8000f74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fdef 	bl	8000f74 <ssd1306_WriteCommand>
}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d005      	beq.n	80013bc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80013b0:	23af      	movs	r3, #175	; 0xaf
 80013b2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <ssd1306_SetDisplayOn+0x38>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	715a      	strb	r2, [r3, #5]
 80013ba:	e004      	b.n	80013c6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80013bc:	23ae      	movs	r3, #174	; 0xae
 80013be:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <ssd1306_SetDisplayOn+0x38>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fdd3 	bl	8000f74 <ssd1306_WriteCommand>
}
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000498 	.word	0x20000498
 80013dc:	00000000 	.word	0x00000000

080013e0 <ARGB_Init>:

/**
 * @brief Init timer & prescalers
 * @param none
 */
void ARGB_Init(void) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
#endif
#ifdef APB2
    APBfq = HAL_RCC_GetPCLK2Freq();
 80013e6:	f004 f909 	bl	80055fc <HAL_RCC_GetPCLK2Freq>
 80013ea:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
 80013ec:	4b32      	ldr	r3, [pc, #200]	; (80014b8 <ARGB_Init+0xd8>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <ARGB_Init+0x1c>
 80013f8:	2301      	movs	r3, #1
 80013fa:	e000      	b.n	80013fe <ARGB_Init+0x1e>
 80013fc:	2302      	movs	r3, #2
 80013fe:	461a      	mov	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	607b      	str	r3, [r7, #4]
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	0a1b      	lsrs	r3, r3, #8
 800140c:	4a2b      	ldr	r2, [pc, #172]	; (80014bc <ARGB_Init+0xdc>)
 800140e:	fba2 2303 	umull	r2, r3, r2, r3
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	607b      	str	r3, [r7, #4]
#endif
    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8001416:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <ARGB_Init+0xe0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2200      	movs	r2, #0
 800141c:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	b29b      	uxth	r3, r3
 8001422:	3b01      	subs	r3, #1
 8001424:	b29a      	uxth	r2, r3
 8001426:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <ARGB_Init+0xe0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 800142c:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <ARGB_Init+0xe0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2201      	movs	r2, #1
 8001432:	615a      	str	r2, [r3, #20]
#if defined(WS2811F) || defined(WS2811S)
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us/1.2us
    PWM_LO = (u8_t) (APBfq * 0.20) - 1;     // Log.0 - 20% - 0.25us/0.5us
#endif
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff f815 	bl	8000464 <__aeabi_ui2d>
 800143a:	a31b      	add	r3, pc, #108	; (adr r3, 80014a8 <ARGB_Init+0xc8>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	f7ff f88a 	bl	8000558 <__aeabi_dmul>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4610      	mov	r0, r2
 800144a:	4619      	mov	r1, r3
 800144c:	f7ff fa96 	bl	800097c <__aeabi_d2uiz>
 8001450:	4603      	mov	r3, r0
 8001452:	b2db      	uxtb	r3, r3
 8001454:	3b01      	subs	r3, #1
 8001456:	b2da      	uxtb	r2, r3
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <ARGB_Init+0xe4>)
 800145a:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff f801 	bl	8000464 <__aeabi_ui2d>
 8001462:	a313      	add	r3, pc, #76	; (adr r3, 80014b0 <ARGB_Init+0xd0>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7ff f876 	bl	8000558 <__aeabi_dmul>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	f7ff fa82 	bl	800097c <__aeabi_d2uiz>
 8001478:	4603      	mov	r3, r0
 800147a:	b2db      	uxtb	r3, r3
 800147c:	3b01      	subs	r3, #1
 800147e:	b2da      	uxtb	r2, r3
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <ARGB_Init+0xe8>)
 8001482:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <ARGB_Init+0xec>)
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <ARGB_Init+0xe0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2201      	movs	r2, #1
 8001490:	2104      	movs	r1, #4
 8001492:	4618      	mov	r0, r3
 8001494:	f005 f83e 	bl	8006514 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8001498:	2001      	movs	r0, #1
 800149a:	f001 fbe1 	bl	8002c60 <HAL_Delay>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	1eb851ec 	.word	0x1eb851ec
 80014ac:	3fe1eb85 	.word	0x3fe1eb85
 80014b0:	1eb851ec 	.word	0x1eb851ec
 80014b4:	3fd1eb85 	.word	0x3fd1eb85
 80014b8:	40023800 	.word	0x40023800
 80014bc:	014f8b59 	.word	0x014f8b59
 80014c0:	20000628 	.word	0x20000628
 80014c4:	2000049e 	.word	0x2000049e
 80014c8:	2000049f 	.word	0x2000049f
 80014cc:	2000057a 	.word	0x2000057a

080014d0 <ARGB_Clear>:
/**
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 */
void ARGB_Clear(void) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
    ARGB_FillRGB(0, 0, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	2000      	movs	r0, #0
 80014da:	f000 f8ac 	bl	8001636 <ARGB_FillRGB>
#ifdef SK6812
    ARGB_FillWhite(0);
#endif
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <ARGB_SetBrightness>:

/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 */
void ARGB_SetBrightness(u8_t br) {
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 80014ee:	4a04      	ldr	r2, [pc, #16]	; (8001500 <ARGB_SetBrightness+0x1c>)
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	7013      	strb	r3, [r2, #0]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	20000008 	.word	0x20000008

08001504 <ARGB_SetRGB>:
 * @param[in] i LED position
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	4604      	mov	r4, r0
 800150c:	4608      	mov	r0, r1
 800150e:	4611      	mov	r1, r2
 8001510:	461a      	mov	r2, r3
 8001512:	4623      	mov	r3, r4
 8001514:	80fb      	strh	r3, [r7, #6]
 8001516:	4603      	mov	r3, r0
 8001518:	717b      	strb	r3, [r7, #5]
 800151a:	460b      	mov	r3, r1
 800151c:	713b      	strb	r3, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	2b07      	cmp	r3, #7
 8001526:	d908      	bls.n	800153a <ARGB_SetRGB+0x36>
        u16_t _i = i / NUM_PIXELS;
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	08db      	lsrs	r3, r3, #3
 800152c:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 800152e:	89fb      	ldrh	r3, [r7, #14]
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	b29b      	uxth	r3, r3
 8001534:	88fa      	ldrh	r2, [r7, #6]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 800153a:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <ARGB_SetRGB+0xdc>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	3301      	adds	r3, #1
 8001542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001546:	fb92 f3f3 	sdiv	r3, r2, r3
 800154a:	797a      	ldrb	r2, [r7, #5]
 800154c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001550:	717b      	strb	r3, [r7, #5]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 8001552:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <ARGB_SetRGB+0xdc>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	3301      	adds	r3, #1
 800155a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800155e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001562:	793a      	ldrb	r2, [r7, #4]
 8001564:	fb92 f3f3 	sdiv	r3, r2, r3
 8001568:	713b      	strb	r3, [r7, #4]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 800156a:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <ARGB_SetRGB+0xdc>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	3301      	adds	r3, #1
 8001572:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001576:	fb92 f3f3 	sdiv	r3, r2, r3
 800157a:	78fa      	ldrb	r2, [r7, #3]
 800157c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001580:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8001582:	793b      	ldrb	r3, [r7, #4]
 8001584:	21b0      	movs	r1, #176	; 0xb0
 8001586:	4618      	mov	r0, r3
 8001588:	f000 f9f0 	bl	800196c <scale8>
 800158c:	4603      	mov	r3, r0
 800158e:	713b      	strb	r3, [r7, #4]
    b = scale8(b, 0xF0);
 8001590:	78fb      	ldrb	r3, [r7, #3]
 8001592:	21f0      	movs	r1, #240	; 0xf0
 8001594:	4618      	mov	r0, r3
 8001596:	f000 f9e9 	bl	800196c <scale8>
 800159a:	4603      	mov	r3, r0
 800159c:	70fb      	strb	r3, [r7, #3]
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
    const u8_t subp2 = g;
    const u8_t subp3 = b;
#else
    const u8_t subp1 = g;
 800159e:	793b      	ldrb	r3, [r7, #4]
 80015a0:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = r;
 80015a2:	797b      	ldrb	r3, [r7, #5]
 80015a4:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 80015a6:	78fb      	ldrb	r3, [r7, #3]
 80015a8:	72fb      	strb	r3, [r7, #11]
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
 80015aa:	88fa      	ldrh	r2, [r7, #6]
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	490c      	ldr	r1, [pc, #48]	; (80015e4 <ARGB_SetRGB+0xe0>)
 80015b4:	7b7a      	ldrb	r2, [r7, #13]
 80015b6:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
 80015b8:	88fa      	ldrh	r2, [r7, #6]
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	3301      	adds	r3, #1
 80015c2:	4908      	ldr	r1, [pc, #32]	; (80015e4 <ARGB_SetRGB+0xe0>)
 80015c4:	7b3a      	ldrb	r2, [r7, #12]
 80015c6:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
 80015c8:	88fa      	ldrh	r2, [r7, #6]
 80015ca:	4613      	mov	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	3302      	adds	r3, #2
 80015d2:	4904      	ldr	r1, [pc, #16]	; (80015e4 <ARGB_SetRGB+0xe0>)
 80015d4:	7afa      	ldrb	r2, [r7, #11]
 80015d6:	54ca      	strb	r2, [r1, r3]
#endif
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd90      	pop	{r4, r7, pc}
 80015e0:	20000008 	.word	0x20000008
 80015e4:	200004a0 	.word	0x200004a0

080015e8 <ARGB_SetHSV>:
 * @param[in] i LED position
 * @param[in] hue HUE (color) [0..255]
 * @param[in] sat Saturation  [0..255]
 * @param[in] val Value (brightness) [0..255]
 */
void ARGB_SetHSV(u16_t i, u8_t hue, u8_t sat, u8_t val) {
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b087      	sub	sp, #28
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	4604      	mov	r4, r0
 80015f0:	4608      	mov	r0, r1
 80015f2:	4611      	mov	r1, r2
 80015f4:	461a      	mov	r2, r3
 80015f6:	4623      	mov	r3, r4
 80015f8:	80fb      	strh	r3, [r7, #6]
 80015fa:	4603      	mov	r3, r0
 80015fc:	717b      	strb	r3, [r7, #5]
 80015fe:	460b      	mov	r3, r1
 8001600:	713b      	strb	r3, [r7, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	70fb      	strb	r3, [r7, #3]
    uint8_t _r, _g, _b;                    // init buffer color
    HSV2RGB(hue, sat, val, &_r, &_g, &_b); // get RGB color
 8001606:	f107 040f 	add.w	r4, r7, #15
 800160a:	78fa      	ldrb	r2, [r7, #3]
 800160c:	7939      	ldrb	r1, [r7, #4]
 800160e:	7978      	ldrb	r0, [r7, #5]
 8001610:	f107 030d 	add.w	r3, r7, #13
 8001614:	9301      	str	r3, [sp, #4]
 8001616:	f107 030e 	add.w	r3, r7, #14
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	4623      	mov	r3, r4
 800161e:	f000 f9bb 	bl	8001998 <HSV2RGB>
    ARGB_SetRGB(i, _r, _g, _b);     // set color
 8001622:	7bf9      	ldrb	r1, [r7, #15]
 8001624:	7bba      	ldrb	r2, [r7, #14]
 8001626:	7b7b      	ldrb	r3, [r7, #13]
 8001628:	88f8      	ldrh	r0, [r7, #6]
 800162a:	f7ff ff6b 	bl	8001504 <ARGB_SetRGB>
}
 800162e:	bf00      	nop
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bd90      	pop	{r4, r7, pc}

08001636 <ARGB_FillRGB>:
 * @brief Fill ALL LEDs with RGB color
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	71fb      	strb	r3, [r7, #7]
 8001640:	460b      	mov	r3, r1
 8001642:	71bb      	strb	r3, [r7, #6]
 8001644:	4613      	mov	r3, r2
 8001646:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8001648:	2300      	movs	r3, #0
 800164a:	81fb      	strh	r3, [r7, #14]
 800164c:	e00b      	b.n	8001666 <ARGB_FillRGB+0x30>
        ARGB_SetRGB(i, r, g, b);
 800164e:	89fb      	ldrh	r3, [r7, #14]
 8001650:	b298      	uxth	r0, r3
 8001652:	797b      	ldrb	r3, [r7, #5]
 8001654:	79ba      	ldrb	r2, [r7, #6]
 8001656:	79f9      	ldrb	r1, [r7, #7]
 8001658:	f7ff ff54 	bl	8001504 <ARGB_SetRGB>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800165c:	89fb      	ldrh	r3, [r7, #14]
 800165e:	b29b      	uxth	r3, r3
 8001660:	3301      	adds	r3, #1
 8001662:	b29b      	uxth	r3, r3
 8001664:	81fb      	strh	r3, [r7, #14]
 8001666:	89fb      	ldrh	r3, [r7, #14]
 8001668:	b29b      	uxth	r3, r3
 800166a:	2b07      	cmp	r3, #7
 800166c:	d9ef      	bls.n	800164e <ARGB_FillRGB+0x18>
}
 800166e:	bf00      	nop
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <ARGB_Show>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show(void) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
    ARGB_LOC_ST = ARGB_BUSY;
 800167e:	4b9d      	ldr	r3, [pc, #628]	; (80018f4 <ARGB_Show+0x27c>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 8001684:	4b9c      	ldr	r3, [pc, #624]	; (80018f8 <ARGB_Show+0x280>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	b29b      	uxth	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d105      	bne.n	800169a <ARGB_Show+0x22>
 800168e:	4b9b      	ldr	r3, [pc, #620]	; (80018fc <ARGB_Show+0x284>)
 8001690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b01      	cmp	r3, #1
 8001698:	d001      	beq.n	800169e <ARGB_Show+0x26>
        return ARGB_BUSY;
 800169a:	2300      	movs	r3, #0
 800169c:	e15e      	b.n	800195c <ARGB_Show+0x2e4>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 800169e:	2300      	movs	r3, #0
 80016a0:	71fb      	strb	r3, [r7, #7]
 80016a2:	e0a6      	b.n	80017f2 <ARGB_Show+0x17a>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80016a4:	4b96      	ldr	r3, [pc, #600]	; (8001900 <ARGB_Show+0x288>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	461a      	mov	r2, r3
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	dd04      	ble.n	80016c6 <ARGB_Show+0x4e>
 80016bc:	4b91      	ldr	r3, [pc, #580]	; (8001904 <ARGB_Show+0x28c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	e003      	b.n	80016ce <ARGB_Show+0x56>
 80016c6:	4b90      	ldr	r3, [pc, #576]	; (8001908 <ARGB_Show+0x290>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	461a      	mov	r2, r3
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	4619      	mov	r1, r3
 80016d4:	4b8d      	ldr	r3, [pc, #564]	; (800190c <ARGB_Show+0x294>)
 80016d6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80016da:	4b89      	ldr	r3, [pc, #548]	; (8001900 <ARGB_Show+0x288>)
 80016dc:	785b      	ldrb	r3, [r3, #1]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	461a      	mov	r2, r3
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	dd04      	ble.n	80016fc <ARGB_Show+0x84>
 80016f2:	4b84      	ldr	r3, [pc, #528]	; (8001904 <ARGB_Show+0x28c>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	4619      	mov	r1, r3
 80016fa:	e003      	b.n	8001704 <ARGB_Show+0x8c>
 80016fc:	4b82      	ldr	r3, [pc, #520]	; (8001908 <ARGB_Show+0x290>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	4619      	mov	r1, r3
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	3308      	adds	r3, #8
 800170a:	4a80      	ldr	r2, [pc, #512]	; (800190c <ARGB_Show+0x294>)
 800170c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001710:	4b7b      	ldr	r3, [pc, #492]	; (8001900 <ARGB_Show+0x288>)
 8001712:	789b      	ldrb	r3, [r3, #2]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	461a      	mov	r2, r3
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001724:	2b00      	cmp	r3, #0
 8001726:	dd04      	ble.n	8001732 <ARGB_Show+0xba>
 8001728:	4b76      	ldr	r3, [pc, #472]	; (8001904 <ARGB_Show+0x28c>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	4619      	mov	r1, r3
 8001730:	e003      	b.n	800173a <ARGB_Show+0xc2>
 8001732:	4b75      	ldr	r3, [pc, #468]	; (8001908 <ARGB_Show+0x290>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	4619      	mov	r1, r3
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	3310      	adds	r3, #16
 8001740:	4a72      	ldr	r2, [pc, #456]	; (800190c <ARGB_Show+0x294>)
 8001742:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001746:	4b6e      	ldr	r3, [pc, #440]	; (8001900 <ARGB_Show+0x288>)
 8001748:	78db      	ldrb	r3, [r3, #3]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175a:	2b00      	cmp	r3, #0
 800175c:	dd04      	ble.n	8001768 <ARGB_Show+0xf0>
 800175e:	4b69      	ldr	r3, [pc, #420]	; (8001904 <ARGB_Show+0x28c>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	4619      	mov	r1, r3
 8001766:	e003      	b.n	8001770 <ARGB_Show+0xf8>
 8001768:	4b67      	ldr	r3, [pc, #412]	; (8001908 <ARGB_Show+0x290>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	4619      	mov	r1, r3
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	3318      	adds	r3, #24
 8001776:	4a65      	ldr	r2, [pc, #404]	; (800190c <ARGB_Show+0x294>)
 8001778:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800177c:	4b60      	ldr	r3, [pc, #384]	; (8001900 <ARGB_Show+0x288>)
 800177e:	791b      	ldrb	r3, [r3, #4]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	461a      	mov	r2, r3
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001790:	2b00      	cmp	r3, #0
 8001792:	dd04      	ble.n	800179e <ARGB_Show+0x126>
 8001794:	4b5b      	ldr	r3, [pc, #364]	; (8001904 <ARGB_Show+0x28c>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	4619      	mov	r1, r3
 800179c:	e003      	b.n	80017a6 <ARGB_Show+0x12e>
 800179e:	4b5a      	ldr	r3, [pc, #360]	; (8001908 <ARGB_Show+0x290>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	4619      	mov	r1, r3
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	3320      	adds	r3, #32
 80017ac:	4a57      	ldr	r2, [pc, #348]	; (800190c <ARGB_Show+0x294>)
 80017ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80017b2:	4b53      	ldr	r3, [pc, #332]	; (8001900 <ARGB_Show+0x288>)
 80017b4:	795b      	ldrb	r3, [r3, #5]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	461a      	mov	r2, r3
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	dd04      	ble.n	80017d4 <ARGB_Show+0x15c>
 80017ca:	4b4e      	ldr	r3, [pc, #312]	; (8001904 <ARGB_Show+0x28c>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	4619      	mov	r1, r3
 80017d2:	e003      	b.n	80017dc <ARGB_Show+0x164>
 80017d4:	4b4c      	ldr	r3, [pc, #304]	; (8001908 <ARGB_Show+0x290>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	4619      	mov	r1, r3
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	3328      	adds	r3, #40	; 0x28
 80017e2:	4a4a      	ldr	r2, [pc, #296]	; (800190c <ARGB_Show+0x294>)
 80017e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	3301      	adds	r3, #1
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	71fb      	strb	r3, [r7, #7]
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b07      	cmp	r3, #7
 80017f8:	f67f af54 	bls.w	80016a4 <ARGB_Show+0x2c>
#ifdef SK6812
            PWM_BUF[i + 48] = (((RGB_BUF[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001800:	e0a4      	b.n	800194c <ARGB_Show+0x2d4>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8001802:	4b43      	ldr	r3, [pc, #268]	; (8001910 <ARGB_Show+0x298>)
 8001804:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d102      	bne.n	8001814 <ARGB_Show+0x19c>
                DMA_Send_Stat = HAL_BUSY;
 800180e:	2302      	movs	r3, #2
 8001810:	73fb      	strb	r3, [r7, #15]
                continue;
 8001812:	e09b      	b.n	800194c <ARGB_Show+0x2d4>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 8001814:	4b3e      	ldr	r3, [pc, #248]	; (8001910 <ARGB_Show+0x298>)
 8001816:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b01      	cmp	r3, #1
 800181e:	d11d      	bne.n	800185c <ARGB_Show+0x1e4>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 8001820:	4b3b      	ldr	r3, [pc, #236]	; (8001910 <ARGB_Show+0x298>)
 8001822:	2202      	movs	r2, #2
 8001824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
#elif TIM_CH == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 8001828:	4b39      	ldr	r3, [pc, #228]	; (8001910 <ARGB_Show+0x298>)
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	4a39      	ldr	r2, [pc, #228]	; (8001914 <ARGB_Show+0x29c>)
 800182e:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 8001830:	4b37      	ldr	r3, [pc, #220]	; (8001910 <ARGB_Show+0x298>)
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	4a38      	ldr	r2, [pc, #224]	; (8001918 <ARGB_Show+0x2a0>)
 8001836:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8001838:	4b35      	ldr	r3, [pc, #212]	; (8001910 <ARGB_Show+0x298>)
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	4a37      	ldr	r2, [pc, #220]	; (800191c <ARGB_Show+0x2a4>)
 800183e:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8001840:	4b33      	ldr	r3, [pc, #204]	; (8001910 <ARGB_Show+0x298>)
 8001842:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001844:	4931      	ldr	r1, [pc, #196]	; (800190c <ARGB_Show+0x294>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 8001846:	4b32      	ldr	r3, [pc, #200]	; (8001910 <ARGB_Show+0x298>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	3338      	adds	r3, #56	; 0x38
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 800184c:	461a      	mov	r2, r3
 800184e:	2330      	movs	r3, #48	; 0x30
 8001850:	f001 fbba 	bl	8002fc8 <HAL_DMA_Start_IT>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d006      	beq.n	8001868 <ARGB_Show+0x1f0>
 800185a:	e002      	b.n	8001862 <ARGB_Show+0x1ea>
                DMA_Send_Stat = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
                continue;
 8001860:	e074      	b.n	800194c <ARGB_Show+0x2d4>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	73fb      	strb	r3, [r7, #15]
                continue;
 8001866:	e071      	b.n	800194c <ARGB_Show+0x2d4>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 8001868:	4b29      	ldr	r3, [pc, #164]	; (8001910 <ARGB_Show+0x298>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	4b28      	ldr	r3, [pc, #160]	; (8001910 <ARGB_Show+0x298>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001876:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8001878:	4b25      	ldr	r3, [pc, #148]	; (8001910 <ARGB_Show+0x298>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a28      	ldr	r2, [pc, #160]	; (8001920 <ARGB_Show+0x2a8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d107      	bne.n	8001892 <ARGB_Show+0x21a>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8001882:	4b23      	ldr	r3, [pc, #140]	; (8001910 <ARGB_Show+0x298>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001888:	4b21      	ldr	r3, [pc, #132]	; (8001910 <ARGB_Show+0x298>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001890:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001892:	4b1f      	ldr	r3, [pc, #124]	; (8001910 <ARGB_Show+0x298>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a22      	ldr	r2, [pc, #136]	; (8001920 <ARGB_Show+0x2a8>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d018      	beq.n	80018ce <ARGB_Show+0x256>
 800189c:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <ARGB_Show+0x298>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018a4:	d013      	beq.n	80018ce <ARGB_Show+0x256>
 80018a6:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <ARGB_Show+0x298>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a1e      	ldr	r2, [pc, #120]	; (8001924 <ARGB_Show+0x2ac>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d00e      	beq.n	80018ce <ARGB_Show+0x256>
 80018b0:	4b17      	ldr	r3, [pc, #92]	; (8001910 <ARGB_Show+0x298>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <ARGB_Show+0x2b0>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d009      	beq.n	80018ce <ARGB_Show+0x256>
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <ARGB_Show+0x298>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a1b      	ldr	r2, [pc, #108]	; (800192c <ARGB_Show+0x2b4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d004      	beq.n	80018ce <ARGB_Show+0x256>
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <ARGB_Show+0x298>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a19      	ldr	r2, [pc, #100]	; (8001930 <ARGB_Show+0x2b8>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d132      	bne.n	8001934 <ARGB_Show+0x2bc>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <ARGB_Show+0x298>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	2b06      	cmp	r3, #6
 80018de:	d032      	beq.n	8001946 <ARGB_Show+0x2ce>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <ARGB_Show+0x298>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <ARGB_Show+0x298>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0201 	orr.w	r2, r2, #1
 80018ee:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 80018f0:	e029      	b.n	8001946 <ARGB_Show+0x2ce>
 80018f2:	bf00      	nop
 80018f4:	2000057a 	.word	0x2000057a
 80018f8:	20000578 	.word	0x20000578
 80018fc:	20000670 	.word	0x20000670
 8001900:	200004a0 	.word	0x200004a0
 8001904:	2000049e 	.word	0x2000049e
 8001908:	2000049f 	.word	0x2000049f
 800190c:	200004b8 	.word	0x200004b8
 8001910:	20000628 	.word	0x20000628
 8001914:	08001bd1 	.word	0x08001bd1
 8001918:	08001e81 	.word	0x08001e81
 800191c:	08005f37 	.word	0x08005f37
 8001920:	40010000 	.word	0x40010000
 8001924:	40000400 	.word	0x40000400
 8001928:	40000800 	.word	0x40000800
 800192c:	40000c00 	.word	0x40000c00
 8001930:	40014000 	.word	0x40014000
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <ARGB_Show+0x2ec>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <ARGB_Show+0x2ec>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0201 	orr.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	e000      	b.n	8001948 <ARGB_Show+0x2d0>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001946:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	2b00      	cmp	r3, #0
 8001950:	f47f af57 	bne.w	8001802 <ARGB_Show+0x18a>
        }
        BUF_COUNTER = 2;
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <ARGB_Show+0x2f0>)
 8001956:	2202      	movs	r2, #2
 8001958:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 800195a:	2302      	movs	r3, #2
    }
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000628 	.word	0x20000628
 8001968:	20000578 	.word	0x20000578

0800196c <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	460a      	mov	r2, r1
 8001976:	71fb      	strb	r3, [r7, #7]
 8001978:	4613      	mov	r3, r2
 800197a:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	79ba      	ldrb	r2, [r7, #6]
 8001980:	fb02 f303 	mul.w	r3, r2, r3
 8001984:	121b      	asrs	r3, r3, #8
 8001986:	b2db      	uxtb	r3, r3
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	0000      	movs	r0, r0
	...

08001998 <HSV2RGB>:
 * @param[in] val Value (brightness) [0..255]
 * @param[out] _r Pointer to RED component value
 * @param[out] _g Pointer to GREEN component value
 * @param[out] _b Pointer to BLUE component value
 */
static void HSV2RGB(u8_t hue, u8_t sat, u8_t val, u8_t *_r, u8_t *_g, u8_t *_b) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af00      	add	r7, sp, #0
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]
 80019a4:	460b      	mov	r3, r1
 80019a6:	71bb      	strb	r3, [r7, #6]
 80019a8:	4613      	mov	r3, r2
 80019aa:	717b      	strb	r3, [r7, #5]
    if (sat == 0) { // if white color
 80019ac:	79bb      	ldrb	r3, [r7, #6]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10b      	bne.n	80019ca <HSV2RGB+0x32>
        *_r = *_g = *_b = val;
 80019b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b4:	797a      	ldrb	r2, [r7, #5]
 80019b6:	701a      	strb	r2, [r3, #0]
 80019b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ba:	781a      	ldrb	r2, [r3, #0]
 80019bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019be:	701a      	strb	r2, [r3, #0]
 80019c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c2:	781a      	ldrb	r2, [r3, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	701a      	strb	r2, [r3, #0]
        return;
 80019c8:	e0f4      	b.n	8001bb4 <HSV2RGB+0x21c>
    }
    // Float is smoother but check for FPU (Floating point unit) in your MCU
    // Otherwise it will take longer time in the code
    // FPU is in: F3/L3 and greater
    // Src: https://github.com/Inseckto/HSV-to-RGB
    float h = (float)hue / 255;
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019d4:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8001bc8 <HSV2RGB+0x230>
 80019d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019dc:	edc7 7a07 	vstr	s15, [r7, #28]
    float s = (float)sat / 255;
 80019e0:	79bb      	ldrb	r3, [r7, #6]
 80019e2:	ee07 3a90 	vmov	s15, r3
 80019e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019ea:	eddf 6a77 	vldr	s13, [pc, #476]	; 8001bc8 <HSV2RGB+0x230>
 80019ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019f2:	edc7 7a06 	vstr	s15, [r7, #24]
    float v = (float)val / 255;
 80019f6:	797b      	ldrb	r3, [r7, #5]
 80019f8:	ee07 3a90 	vmov	s15, r3
 80019fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a00:	eddf 6a71 	vldr	s13, [pc, #452]	; 8001bc8 <HSV2RGB+0x230>
 8001a04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a08:	edc7 7a05 	vstr	s15, [r7, #20]

    int i = (int)floorf(h * 6);
 8001a0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a10:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001a14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a18:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1c:	f005 f996 	bl	8006d4c <floorf>
 8001a20:	eef0 7a40 	vmov.f32	s15, s0
 8001a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a28:	ee17 3a90 	vmov	r3, s15
 8001a2c:	613b      	str	r3, [r7, #16]
    float f = h * 6 - (float)i;
 8001a2e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a32:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001a36:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	ee07 3a90 	vmov	s15, r3
 8001a40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a48:	edc7 7a03 	vstr	s15, [r7, #12]
    u8_t p = (u8_t)(v * (1 - s) * 255.0);
 8001a4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a50:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a58:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a60:	ee17 0a90 	vmov	r0, s15
 8001a64:	f7fe fd20 	bl	80004a8 <__aeabi_f2d>
 8001a68:	a355      	add	r3, pc, #340	; (adr r3, 8001bc0 <HSV2RGB+0x228>)
 8001a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6e:	f7fe fd73 	bl	8000558 <__aeabi_dmul>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f7fe ff7f 	bl	800097c <__aeabi_d2uiz>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	72fb      	strb	r3, [r7, #11]
    u8_t q = (u8_t)(v * (1 - f * s) * 255.0);
 8001a82:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a86:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a96:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a9e:	ee17 0a90 	vmov	r0, s15
 8001aa2:	f7fe fd01 	bl	80004a8 <__aeabi_f2d>
 8001aa6:	a346      	add	r3, pc, #280	; (adr r3, 8001bc0 <HSV2RGB+0x228>)
 8001aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aac:	f7fe fd54 	bl	8000558 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7fe ff60 	bl	800097c <__aeabi_d2uiz>
 8001abc:	4603      	mov	r3, r0
 8001abe:	72bb      	strb	r3, [r7, #10]
    u8_t t = (u8_t)(v * (1 - (1 - f) * s)*255.0);
 8001ac0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ac4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ac8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001acc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ad8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001adc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae4:	ee17 0a90 	vmov	r0, s15
 8001ae8:	f7fe fcde 	bl	80004a8 <__aeabi_f2d>
 8001aec:	a334      	add	r3, pc, #208	; (adr r3, 8001bc0 <HSV2RGB+0x228>)
 8001aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af2:	f7fe fd31 	bl	8000558 <__aeabi_dmul>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	f7fe ff3d 	bl	800097c <__aeabi_d2uiz>
 8001b02:	4603      	mov	r3, r0
 8001b04:	727b      	strb	r3, [r7, #9]

    switch (i % 6) {
 8001b06:	6939      	ldr	r1, [r7, #16]
 8001b08:	4b30      	ldr	r3, [pc, #192]	; (8001bcc <HSV2RGB+0x234>)
 8001b0a:	fb83 3201 	smull	r3, r2, r3, r1
 8001b0e:	17cb      	asrs	r3, r1, #31
 8001b10:	1ad2      	subs	r2, r2, r3
 8001b12:	4613      	mov	r3, r2
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4413      	add	r3, r2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	1aca      	subs	r2, r1, r3
 8001b1c:	2a04      	cmp	r2, #4
 8001b1e:	d83f      	bhi.n	8001ba0 <HSV2RGB+0x208>
 8001b20:	a301      	add	r3, pc, #4	; (adr r3, 8001b28 <HSV2RGB+0x190>)
 8001b22:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001b26:	bf00      	nop
 8001b28:	08001b3d 	.word	0x08001b3d
 8001b2c:	08001b51 	.word	0x08001b51
 8001b30:	08001b65 	.word	0x08001b65
 8001b34:	08001b79 	.word	0x08001b79
 8001b38:	08001b8d 	.word	0x08001b8d
//    uint8_t rem = (hue - (reg * 43)) * 6;
//    uint8_t p = (val * (255 - sat)) >> 8;
//    uint8_t q = (val * (255 - ((sat * rem) >> 8))) >> 8;
//    uint8_t t = (val * (255 - ((sat * (255 - rem)) >> 8))) >> 8;
//    switch (reg) {
        case 0: *_r = val, *_g = t, *_b = p; break;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	797a      	ldrb	r2, [r7, #5]
 8001b40:	701a      	strb	r2, [r3, #0]
 8001b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b44:	7a7a      	ldrb	r2, [r7, #9]
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4a:	7afa      	ldrb	r2, [r7, #11]
 8001b4c:	701a      	strb	r2, [r3, #0]
 8001b4e:	e031      	b.n	8001bb4 <HSV2RGB+0x21c>
        case 1: *_r = q, *_g = val, *_b = p; break;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	7aba      	ldrb	r2, [r7, #10]
 8001b54:	701a      	strb	r2, [r3, #0]
 8001b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b58:	797a      	ldrb	r2, [r7, #5]
 8001b5a:	701a      	strb	r2, [r3, #0]
 8001b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5e:	7afa      	ldrb	r2, [r7, #11]
 8001b60:	701a      	strb	r2, [r3, #0]
 8001b62:	e027      	b.n	8001bb4 <HSV2RGB+0x21c>
        case 2: *_r = p, *_g = val, *_b = t; break;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	7afa      	ldrb	r2, [r7, #11]
 8001b68:	701a      	strb	r2, [r3, #0]
 8001b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6c:	797a      	ldrb	r2, [r7, #5]
 8001b6e:	701a      	strb	r2, [r3, #0]
 8001b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b72:	7a7a      	ldrb	r2, [r7, #9]
 8001b74:	701a      	strb	r2, [r3, #0]
 8001b76:	e01d      	b.n	8001bb4 <HSV2RGB+0x21c>
        case 3: *_r = p, *_g = q, *_b = val; break;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	7afa      	ldrb	r2, [r7, #11]
 8001b7c:	701a      	strb	r2, [r3, #0]
 8001b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b80:	7aba      	ldrb	r2, [r7, #10]
 8001b82:	701a      	strb	r2, [r3, #0]
 8001b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b86:	797a      	ldrb	r2, [r7, #5]
 8001b88:	701a      	strb	r2, [r3, #0]
 8001b8a:	e013      	b.n	8001bb4 <HSV2RGB+0x21c>
        case 4: *_r = t, *_g = p, *_b = val; break;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	7a7a      	ldrb	r2, [r7, #9]
 8001b90:	701a      	strb	r2, [r3, #0]
 8001b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b94:	7afa      	ldrb	r2, [r7, #11]
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9a:	797a      	ldrb	r2, [r7, #5]
 8001b9c:	701a      	strb	r2, [r3, #0]
 8001b9e:	e009      	b.n	8001bb4 <HSV2RGB+0x21c>
        default: *_r = val, *_g = p, *_b = q; break;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	797a      	ldrb	r2, [r7, #5]
 8001ba4:	701a      	strb	r2, [r3, #0]
 8001ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba8:	7afa      	ldrb	r2, [r7, #11]
 8001baa:	701a      	strb	r2, [r3, #0]
 8001bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bae:	7aba      	ldrb	r2, [r7, #10]
 8001bb0:	701a      	strb	r2, [r3, #0]
 8001bb2:	bf00      	nop
    }
}
 8001bb4:	3720      	adds	r7, #32
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	f3af 8000 	nop.w
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	406fe000 	.word	0x406fe000
 8001bc8:	437f0000 	.word	0x437f0000
 8001bcc:	2aaaaaab 	.word	0x2aaaaaab

08001bd0 <ARGB_TIM_DMADelayPulseCplt>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bdc:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a9d      	ldr	r2, [pc, #628]	; (8001e58 <ARGB_TIM_DMADelayPulseCplt+0x288>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	f040 8131 	bne.w	8001e4a <ARGB_TIM_DMADelayPulseCplt+0x27a>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4a9c      	ldr	r2, [pc, #624]	; (8001e5c <ARGB_TIM_DMADelayPulseCplt+0x28c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	f040 812c 	bne.w	8001e4a <ARGB_TIM_DMADelayPulseCplt+0x27a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001bf2:	4b9b      	ldr	r3, [pc, #620]	; (8001e60 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 8128 	beq.w	8001e4e <ARGB_TIM_DMADelayPulseCplt+0x27e>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d10b      	bne.n	8001c20 <ARGB_TIM_DMADelayPulseCplt+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d136      	bne.n	8001c84 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c1e:	e031      	b.n	8001c84 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d10b      	bne.n	8001c42 <ARGB_TIM_DMADelayPulseCplt+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d125      	bne.n	8001c84 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c40:	e020      	b.n	8001c84 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d10b      	bne.n	8001c64 <ARGB_TIM_DMADelayPulseCplt+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2204      	movs	r2, #4
 8001c50:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d114      	bne.n	8001c84 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c62:	e00f      	b.n	8001c84 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d10a      	bne.n	8001c84 <ARGB_TIM_DMADelayPulseCplt+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2208      	movs	r2, #8
 8001c72:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d103      	bne.n	8001c84 <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8001c84:	4b76      	ldr	r3, [pc, #472]	; (8001e60 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	2b07      	cmp	r3, #7
 8001c8c:	d87b      	bhi.n	8001d86 <ARGB_TIM_DMADelayPulseCplt+0x1b6>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001c8e:	2300      	movs	r3, #0
 8001c90:	72fb      	strb	r3, [r7, #11]
 8001c92:	e06c      	b.n	8001d6e <ARGB_TIM_DMADelayPulseCplt+0x19e>
            PWM_BUF[i + 32] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 40] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 48] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#else
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001c94:	4b72      	ldr	r3, [pc, #456]	; (8001e60 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a70      	ldr	r2, [pc, #448]	; (8001e64 <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001ca4:	5cd3      	ldrb	r3, [r2, r3]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	7afb      	ldrb	r3, [r7, #11]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	dd04      	ble.n	8001cc4 <ARGB_TIM_DMADelayPulseCplt+0xf4>
 8001cba:	4b6b      	ldr	r3, [pc, #428]	; (8001e68 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	e003      	b.n	8001ccc <ARGB_TIM_DMADelayPulseCplt+0xfc>
 8001cc4:	4b69      	ldr	r3, [pc, #420]	; (8001e6c <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	4619      	mov	r1, r3
 8001ccc:	7afb      	ldrb	r3, [r7, #11]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	3318      	adds	r3, #24
 8001cd2:	4a67      	ldr	r2, [pc, #412]	; (8001e70 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001cd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001cd8:	4b61      	ldr	r3, [pc, #388]	; (8001e60 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	4a5e      	ldr	r2, [pc, #376]	; (8001e64 <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001cea:	5cd3      	ldrb	r3, [r2, r3]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	7afb      	ldrb	r3, [r7, #11]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	dd04      	ble.n	8001d0a <ARGB_TIM_DMADelayPulseCplt+0x13a>
 8001d00:	4b59      	ldr	r3, [pc, #356]	; (8001e68 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	4619      	mov	r1, r3
 8001d08:	e003      	b.n	8001d12 <ARGB_TIM_DMADelayPulseCplt+0x142>
 8001d0a:	4b58      	ldr	r3, [pc, #352]	; (8001e6c <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	4619      	mov	r1, r3
 8001d12:	7afb      	ldrb	r3, [r7, #11]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	3320      	adds	r3, #32
 8001d18:	4a55      	ldr	r2, [pc, #340]	; (8001e70 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001d1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001d1e:	4b50      	ldr	r3, [pc, #320]	; (8001e60 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	4613      	mov	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	4a4d      	ldr	r2, [pc, #308]	; (8001e64 <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001d30:	5cd3      	ldrb	r3, [r2, r3]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	7afb      	ldrb	r3, [r7, #11]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	dd04      	ble.n	8001d50 <ARGB_TIM_DMADelayPulseCplt+0x180>
 8001d46:	4b48      	ldr	r3, [pc, #288]	; (8001e68 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	e003      	b.n	8001d58 <ARGB_TIM_DMADelayPulseCplt+0x188>
 8001d50:	4b46      	ldr	r3, [pc, #280]	; (8001e6c <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	4619      	mov	r1, r3
 8001d58:	7afb      	ldrb	r3, [r7, #11]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	3328      	adds	r3, #40	; 0x28
 8001d5e:	4a44      	ldr	r2, [pc, #272]	; (8001e70 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001d60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001d64:	7afb      	ldrb	r3, [r7, #11]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	3301      	adds	r3, #1
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	72fb      	strb	r3, [r7, #11]
 8001d6e:	7afb      	ldrb	r3, [r7, #11]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b07      	cmp	r3, #7
 8001d74:	d98e      	bls.n	8001c94 <ARGB_TIM_DMADelayPulseCplt+0xc4>
#endif
        }
        BUF_COUNTER++;
 8001d76:	4b3a      	ldr	r3, [pc, #232]	; (8001e60 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	4b37      	ldr	r3, [pc, #220]	; (8001e60 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d82:	801a      	strh	r2, [r3, #0]
 8001d84:	e05d      	b.n	8001e42 <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 8001d86:	4b36      	ldr	r3, [pc, #216]	; (8001e60 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	2b09      	cmp	r3, #9
 8001d8e:	d80c      	bhi.n	8001daa <ARGB_TIM_DMADelayPulseCplt+0x1da>
        memset((dma_siz *) &PWM_BUF[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 8001d90:	2260      	movs	r2, #96	; 0x60
 8001d92:	2100      	movs	r1, #0
 8001d94:	4837      	ldr	r0, [pc, #220]	; (8001e74 <ARGB_TIM_DMADelayPulseCplt+0x2a4>)
 8001d96:	f004 fedf 	bl	8006b58 <memset>
        BUF_COUNTER++;
 8001d9a:	4b31      	ldr	r3, [pc, #196]	; (8001e60 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	3301      	adds	r3, #1
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	4b2e      	ldr	r3, [pc, #184]	; (8001e60 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001da6:	801a      	strh	r2, [r3, #0]
 8001da8:	e04b      	b.n	8001e42 <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else { // if END of transfer
        BUF_COUNTER = 0;
 8001daa:	4b2d      	ldr	r3, [pc, #180]	; (8001e60 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	801a      	strh	r2, [r3, #0]
#if TIM_CH == TIM_CHANNEL_1
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
#endif
#if TIM_CH == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dbe:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f001 f957 	bl	8003078 <HAL_DMA_Abort_IT>
#endif
#if TIM_CH == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a2a      	ldr	r2, [pc, #168]	; (8001e78 <ARGB_TIM_DMADelayPulseCplt+0x2a8>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d117      	bne.n	8001e04 <ARGB_TIM_DMADelayPulseCplt+0x234>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6a1a      	ldr	r2, [r3, #32]
 8001dda:	f241 1311 	movw	r3, #4369	; 0x1111
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10f      	bne.n	8001e04 <ARGB_TIM_DMADelayPulseCplt+0x234>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6a1a      	ldr	r2, [r3, #32]
 8001dea:	f240 4344 	movw	r3, #1092	; 0x444
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d107      	bne.n	8001e04 <ARGB_TIM_DMADelayPulseCplt+0x234>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e02:	645a      	str	r2, [r3, #68]	; 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6a1a      	ldr	r2, [r3, #32]
 8001e0a:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10f      	bne.n	8001e34 <ARGB_TIM_DMADelayPulseCplt+0x264>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6a1a      	ldr	r2, [r3, #32]
 8001e1a:	f240 4344 	movw	r3, #1092	; 0x444
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d107      	bne.n	8001e34 <ARGB_TIM_DMADelayPulseCplt+0x264>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0201 	bic.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        ARGB_LOC_ST = ARGB_READY;
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <ARGB_TIM_DMADelayPulseCplt+0x2ac>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	771a      	strb	r2, [r3, #28]
 8001e48:	e002      	b.n	8001e50 <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001e4a:	bf00      	nop
 8001e4c:	e000      	b.n	8001e50 <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001e4e:	bf00      	nop
}
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000670 	.word	0x20000670
 8001e5c:	20000628 	.word	0x20000628
 8001e60:	20000578 	.word	0x20000578
 8001e64:	200004a0 	.word	0x200004a0
 8001e68:	2000049e 	.word	0x2000049e
 8001e6c:	2000049f 	.word	0x2000049f
 8001e70:	200004b8 	.word	0x200004b8
 8001e74:	20000518 	.word	0x20000518
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	2000057a 	.word	0x2000057a

08001e80 <ARGB_TIM_DMADelayPulseHalfCplt>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8c:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a53      	ldr	r2, [pc, #332]	; (8001fe0 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	f040 809e 	bne.w	8001fd4 <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4a52      	ldr	r2, [pc, #328]	; (8001fe4 <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	f040 8099 	bne.w	8001fd4 <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001ea2:	4b51      	ldr	r3, [pc, #324]	; (8001fe8 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 8095 	beq.w	8001fd8 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>
    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8001eae:	4b4e      	ldr	r3, [pc, #312]	; (8001fe8 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	2b07      	cmp	r3, #7
 8001eb6:	d87b      	bhi.n	8001fb0 <ARGB_TIM_DMADelayPulseHalfCplt+0x130>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001eb8:	2300      	movs	r3, #0
 8001eba:	72fb      	strb	r3, [r7, #11]
 8001ebc:	e06c      	b.n	8001f98 <ARGB_TIM_DMADelayPulseHalfCplt+0x118>
            PWM_BUF[i] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 8] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 16] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 24] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
#else
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001ebe:	4b4a      	ldr	r3, [pc, #296]	; (8001fe8 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	4a47      	ldr	r2, [pc, #284]	; (8001fec <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8001ece:	5cd3      	ldrb	r3, [r2, r3]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	7afb      	ldrb	r3, [r7, #11]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	dd04      	ble.n	8001eee <ARGB_TIM_DMADelayPulseHalfCplt+0x6e>
 8001ee4:	4b42      	ldr	r3, [pc, #264]	; (8001ff0 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	e003      	b.n	8001ef6 <ARGB_TIM_DMADelayPulseHalfCplt+0x76>
 8001eee:	4b41      	ldr	r3, [pc, #260]	; (8001ff4 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	7afb      	ldrb	r3, [r7, #11]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	4619      	mov	r1, r3
 8001efc:	4b3e      	ldr	r3, [pc, #248]	; (8001ff8 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8001efe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001f02:	4b39      	ldr	r3, [pc, #228]	; (8001fe8 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	3301      	adds	r3, #1
 8001f12:	4a36      	ldr	r2, [pc, #216]	; (8001fec <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8001f14:	5cd3      	ldrb	r3, [r2, r3]
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	7afb      	ldrb	r3, [r7, #11]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	dd04      	ble.n	8001f34 <ARGB_TIM_DMADelayPulseHalfCplt+0xb4>
 8001f2a:	4b31      	ldr	r3, [pc, #196]	; (8001ff0 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	4619      	mov	r1, r3
 8001f32:	e003      	b.n	8001f3c <ARGB_TIM_DMADelayPulseHalfCplt+0xbc>
 8001f34:	4b2f      	ldr	r3, [pc, #188]	; (8001ff4 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	7afb      	ldrb	r3, [r7, #11]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	3308      	adds	r3, #8
 8001f42:	4a2d      	ldr	r2, [pc, #180]	; (8001ff8 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8001f44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001f48:	4b27      	ldr	r3, [pc, #156]	; (8001fe8 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	3302      	adds	r3, #2
 8001f58:	4a24      	ldr	r2, [pc, #144]	; (8001fec <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8001f5a:	5cd3      	ldrb	r3, [r2, r3]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	7afb      	ldrb	r3, [r7, #11]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	dd04      	ble.n	8001f7a <ARGB_TIM_DMADelayPulseHalfCplt+0xfa>
 8001f70:	4b1f      	ldr	r3, [pc, #124]	; (8001ff0 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	4619      	mov	r1, r3
 8001f78:	e003      	b.n	8001f82 <ARGB_TIM_DMADelayPulseHalfCplt+0x102>
 8001f7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ff4 <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	4619      	mov	r1, r3
 8001f82:	7afb      	ldrb	r3, [r7, #11]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	3310      	adds	r3, #16
 8001f88:	4a1b      	ldr	r2, [pc, #108]	; (8001ff8 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8001f8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001f8e:	7afb      	ldrb	r3, [r7, #11]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	3301      	adds	r3, #1
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	72fb      	strb	r3, [r7, #11]
 8001f98:	7afb      	ldrb	r3, [r7, #11]
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b07      	cmp	r3, #7
 8001f9e:	d98e      	bls.n	8001ebe <ARGB_TIM_DMADelayPulseHalfCplt+0x3e>
#endif
        }
        BUF_COUNTER++;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001fac:	801a      	strh	r2, [r3, #0]
 8001fae:	e014      	b.n	8001fda <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 8001fb0:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	2b09      	cmp	r3, #9
 8001fb8:	d80f      	bhi.n	8001fda <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
        memset((dma_siz *) &PWM_BUF[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 8001fba:	2260      	movs	r2, #96	; 0x60
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	480e      	ldr	r0, [pc, #56]	; (8001ff8 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8001fc0:	f004 fdca 	bl	8006b58 <memset>
        BUF_COUNTER++;
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	3301      	adds	r3, #1
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001fd0:	801a      	strh	r2, [r3, #0]
 8001fd2:	e002      	b.n	8001fda <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001fd4:	bf00      	nop
 8001fd6:	e000      	b.n	8001fda <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001fd8:	bf00      	nop
    }
}
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000670 	.word	0x20000670
 8001fe4:	20000628 	.word	0x20000628
 8001fe8:	20000578 	.word	0x20000578
 8001fec:	200004a0 	.word	0x200004a0
 8001ff0:	2000049e 	.word	0x2000049e
 8001ff4:	2000049f 	.word	0x2000049f
 8001ff8:	200004b8 	.word	0x200004b8
 8001ffc:	00000000 	.word	0x00000000

08002000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08e      	sub	sp, #56	; 0x38
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002006:	f000 fde9 	bl	8002bdc <HAL_Init>
  //MCP4725 myMCP4725;
  //MCP4725_setValue(&myMCP4725, 2048, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800200a:	f000 f9af 	bl	800236c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800200e:	f000 fb0d 	bl	800262c <MX_GPIO_Init>
  MX_DMA_Init();
 8002012:	f000 faeb 	bl	80025ec <MX_DMA_Init>
  MX_I2C1_Init();
 8002016:	f000 fa11 	bl	800243c <MX_I2C1_Init>
  MX_SPI1_Init();
 800201a:	f000 fa3d 	bl	8002498 <MX_SPI1_Init>
  MX_TIM2_Init();
 800201e:	f000 fa71 	bl	8002504 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t num[10] ={0};
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
 8002026:	f107 0320 	add.w	r3, r7, #32
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	809a      	strh	r2, [r3, #4]
  uint8_t coutn = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  HAL_StatusTypeDef type;
  for(uint8_t i = 1; i < 127 ; i++){
 8002036:	2301      	movs	r3, #1
 8002038:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800203c:	e020      	b.n	8002080 <main+0x80>
	  type = HAL_I2C_IsDeviceReady(&hi2c1, (i << 1), 2, 10);
 800203e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002042:	b29b      	uxth	r3, r3
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	b299      	uxth	r1, r3
 8002048:	230a      	movs	r3, #10
 800204a:	2202      	movs	r2, #2
 800204c:	48c0      	ldr	r0, [pc, #768]	; (8002350 <main+0x350>)
 800204e:	f002 f99f 	bl	8004390 <HAL_I2C_IsDeviceReady>
 8002052:	4603      	mov	r3, r0
 8002054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  if(type == HAL_OK){
 8002058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10a      	bne.n	8002076 <main+0x76>
		  num[coutn++] = i;
 8002060:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 800206a:	3338      	adds	r3, #56	; 0x38
 800206c:	443b      	add	r3, r7
 800206e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002072:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for(uint8_t i = 1; i < 127 ; i++){
 8002076:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800207a:	3301      	adds	r3, #1
 800207c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002080:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002084:	2b7e      	cmp	r3, #126	; 0x7e
 8002086:	d9da      	bls.n	800203e <main+0x3e>
	  }
  }
  ARGB_Init();  // Initialization
 8002088:	f7ff f9aa 	bl	80013e0 <ARGB_Init>
  //ARGB_STATE ARGB_GetState;
  ARGB_Clear();
 800208c:	f7ff fa20 	bl	80014d0 <ARGB_Clear>
  while (ARGB_Show() != ARGB_OK);
 8002090:	bf00      	nop
 8002092:	f7ff faf1 	bl	8001678 <ARGB_Show>
 8002096:	4603      	mov	r3, r0
 8002098:	2b02      	cmp	r3, #2
 800209a:	d1fa      	bne.n	8002092 <main+0x92>
  ARGB_SetBrightness(80);
 800209c:	2050      	movs	r0, #80	; 0x50
 800209e:	f7ff fa21 	bl	80014e4 <ARGB_SetBrightness>
 // ARGB_SetRGB(0, 255, 0, 128);

  // Update - Option 1
  //extern  unsigned char *gImage_BW;
  //extern  unsigned char *gImage_R;
  ssd1306_Init();
 80020a2:	f7fe ff99 	bl	8000fd8 <ssd1306_Init>
  ssd1306_Fill(Black);
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7ff f800 	bl	80010ac <ssd1306_Fill>
  ssd1306_SetCursor(5, 10);
 80020ac:	210a      	movs	r1, #10
 80020ae:	2005      	movs	r0, #5
 80020b0:	f7ff f94a 	bl	8001348 <ssd1306_SetCursor>
  ssd1306_WriteString("JetPro,Bro!", Font_11x18, White);
 80020b4:	4aa7      	ldr	r2, [pc, #668]	; (8002354 <main+0x354>)
 80020b6:	2301      	movs	r3, #1
 80020b8:	ca06      	ldmia	r2, {r1, r2}
 80020ba:	48a7      	ldr	r0, [pc, #668]	; (8002358 <main+0x358>)
 80020bc:	f7ff f91e 	bl	80012fc <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80020c0:	f7ff f818 	bl	80010f4 <ssd1306_UpdateScreen>
  HAL_Delay(1000);
 80020c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020c8:	f000 fdca 	bl	8002c60 <HAL_Delay>
  ssd1306_Fill(Black);
 80020cc:	2000      	movs	r0, #0
 80020ce:	f7fe ffed 	bl	80010ac <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80020d2:	f7ff f80f 	bl	80010f4 <ssd1306_UpdateScreen>

  ssd1306_SetCursor(0, 0);
 80020d6:	2100      	movs	r1, #0
 80020d8:	2000      	movs	r0, #0
 80020da:	f7ff f935 	bl	8001348 <ssd1306_SetCursor>
    ssd1306_WriteString("TOK - ", Font_11x18, White);
 80020de:	4a9d      	ldr	r2, [pc, #628]	; (8002354 <main+0x354>)
 80020e0:	2301      	movs	r3, #1
 80020e2:	ca06      	ldmia	r2, {r1, r2}
 80020e4:	489d      	ldr	r0, [pc, #628]	; (800235c <main+0x35c>)
 80020e6:	f7ff f909 	bl	80012fc <ssd1306_WriteString>
    ssd1306_SetCursor(100, 0);
 80020ea:	2100      	movs	r1, #0
 80020ec:	2064      	movs	r0, #100	; 0x64
 80020ee:	f7ff f92b 	bl	8001348 <ssd1306_SetCursor>
                   ssd1306_WriteString("A", Font_11x18, White);
 80020f2:	4a98      	ldr	r2, [pc, #608]	; (8002354 <main+0x354>)
 80020f4:	2301      	movs	r3, #1
 80020f6:	ca06      	ldmia	r2, {r1, r2}
 80020f8:	4899      	ldr	r0, [pc, #612]	; (8002360 <main+0x360>)
 80020fa:	f7ff f8ff 	bl	80012fc <ssd1306_WriteString>
    ssd1306_SetCursor(0, 19);
 80020fe:	2113      	movs	r1, #19
 8002100:	2000      	movs	r0, #0
 8002102:	f7ff f921 	bl	8001348 <ssd1306_SetCursor>
      ssd1306_WriteString("BAT - ", Font_11x18, White);
 8002106:	4a93      	ldr	r2, [pc, #588]	; (8002354 <main+0x354>)
 8002108:	2301      	movs	r3, #1
 800210a:	ca06      	ldmia	r2, {r1, r2}
 800210c:	4895      	ldr	r0, [pc, #596]	; (8002364 <main+0x364>)
 800210e:	f7ff f8f5 	bl	80012fc <ssd1306_WriteString>
      ssd1306_SetCursor(100, 19);
 8002112:	2113      	movs	r1, #19
 8002114:	2064      	movs	r0, #100	; 0x64
 8002116:	f7ff f917 	bl	8001348 <ssd1306_SetCursor>
            ssd1306_WriteString("%", Font_11x18, White);
 800211a:	4a8e      	ldr	r2, [pc, #568]	; (8002354 <main+0x354>)
 800211c:	2301      	movs	r3, #1
 800211e:	ca06      	ldmia	r2, {r1, r2}
 8002120:	4891      	ldr	r0, [pc, #580]	; (8002368 <main+0x368>)
 8002122:	f7ff f8eb 	bl	80012fc <ssd1306_WriteString>
  //EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
  //driver_delay_xms(5000);
  ADS1115_Config_t configReg;
  ADS1115_Handle_t *pADS;
	#define ADS1115_ADR 72
  configReg.channel = CHANNEL_AIN0_GND;
 8002126:	2304      	movs	r3, #4
 8002128:	753b      	strb	r3, [r7, #20]
  configReg.pgaConfig = PGA_6_144;
 800212a:	2300      	movs	r3, #0
 800212c:	757b      	strb	r3, [r7, #21]
  configReg.operatingMode = MODE_CONTINOUS;
 800212e:	2300      	movs	r3, #0
 8002130:	75bb      	strb	r3, [r7, #22]
  configReg.dataRate = DRATE_250;
 8002132:	2305      	movs	r3, #5
 8002134:	75fb      	strb	r3, [r7, #23]
  configReg.compareMode = COMP_WINDOW;
 8002136:	2301      	movs	r3, #1
 8002138:	763b      	strb	r3, [r7, #24]
  configReg.polarityMode = POLARITY_ACTIVE_LOW;
 800213a:	2300      	movs	r3, #0
 800213c:	767b      	strb	r3, [r7, #25]
  configReg.latchingMode = LATCHING_NONE;
 800213e:	2300      	movs	r3, #0
 8002140:	76bb      	strb	r3, [r7, #26]
  configReg.queueComparator = QUEUE_ONE;
 8002142:	2300      	movs	r3, #0
 8002144:	76fb      	strb	r3, [r7, #27]
  pADS = ADS1115_init(&hi2c1, ADS1115_ADR, configReg);
 8002146:	f107 0314 	add.w	r3, r7, #20
 800214a:	cb0c      	ldmia	r3, {r2, r3}
 800214c:	2148      	movs	r1, #72	; 0x48
 800214e:	4880      	ldr	r0, [pc, #512]	; (8002350 <main+0x350>)
 8002150:	f7fe fe06 	bl	8000d60 <ADS1115_init>
 8002154:	62f8      	str	r0, [r7, #44]	; 0x2c
  ADS1115_updateConfig(pADS, configReg);
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800215e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002160:	f7fe fe1e 	bl	8000da0 <ADS1115_updateConfig>
  ADS1115_startContinousMode(pADS);
 8002164:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002166:	f7fe fe89 	bl	8000e7c <ADS1115_startContinousMode>
  //ADS1115_setConversionReadyPin(pADS);
  float data_from_adc_0 = 0;
 800216a:	f04f 0300 	mov.w	r3, #0
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
  for(uint8_t temp = 0; temp < 80; temp++){
 8002170:	2300      	movs	r3, #0
 8002172:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002176:	e020      	b.n	80021ba <main+0x1ba>
	  HAL_Delay(50);
 8002178:	2032      	movs	r0, #50	; 0x32
 800217a:	f000 fd71 	bl	8002c60 <HAL_Delay>
	  data_from_adc_0 = (ADS1115_getData(pADS)/2666.7);
 800217e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002180:	f7fe fe40 	bl	8000e04 <ADS1115_getData>
 8002184:	4603      	mov	r3, r0
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe f97c 	bl	8000484 <__aeabi_i2d>
 800218c:	a36e      	add	r3, pc, #440	; (adr r3, 8002348 <main+0x348>)
 800218e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002192:	f7fe fb0b 	bl	80007ac <__aeabi_ddiv>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4610      	mov	r0, r2
 800219c:	4619      	mov	r1, r3
 800219e:	f7fe fc0d 	bl	80009bc <__aeabi_d2f>
 80021a2:	4603      	mov	r3, r0
 80021a4:	62bb      	str	r3, [r7, #40]	; 0x28
	  temp++;
 80021a6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021aa:	3301      	adds	r3, #1
 80021ac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  for(uint8_t temp = 0; temp < 80; temp++){
 80021b0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021b4:	3301      	adds	r3, #1
 80021b6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80021ba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021be:	2b4f      	cmp	r3, #79	; 0x4f
 80021c0:	d9da      	bls.n	8002178 <main+0x178>
  }
  configReg.channel = CHANNEL_AIN1_GND;
 80021c2:	2305      	movs	r3, #5
 80021c4:	753b      	strb	r3, [r7, #20]
  ADS1115_updateConfig(pADS, configReg);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 80021ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021d0:	f7fe fde6 	bl	8000da0 <ADS1115_updateConfig>
  for(uint8_t temp = 0; temp < 80; temp++){
 80021d4:	2300      	movs	r3, #0
 80021d6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80021da:	e020      	b.n	800221e <main+0x21e>
	  HAL_Delay(50);
 80021dc:	2032      	movs	r0, #50	; 0x32
 80021de:	f000 fd3f 	bl	8002c60 <HAL_Delay>
	  data_from_adc_0 = (ADS1115_getData(pADS)/2666.7);
 80021e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021e4:	f7fe fe0e 	bl	8000e04 <ADS1115_getData>
 80021e8:	4603      	mov	r3, r0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe f94a 	bl	8000484 <__aeabi_i2d>
 80021f0:	a355      	add	r3, pc, #340	; (adr r3, 8002348 <main+0x348>)
 80021f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f6:	f7fe fad9 	bl	80007ac <__aeabi_ddiv>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4610      	mov	r0, r2
 8002200:	4619      	mov	r1, r3
 8002202:	f7fe fbdb 	bl	80009bc <__aeabi_d2f>
 8002206:	4603      	mov	r3, r0
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
	  temp++;
 800220a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800220e:	3301      	adds	r3, #1
 8002210:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  for(uint8_t temp = 0; temp < 80; temp++){
 8002214:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002218:	3301      	adds	r3, #1
 800221a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800221e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002222:	2b4f      	cmp	r3, #79	; 0x4f
 8002224:	d9da      	bls.n	80021dc <main+0x1dc>
  }
  uint8_t color = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
while(1){
	for(uint8_t i = 0 ; i < 11; i++){
 800222c:	2300      	movs	r3, #0
 800222e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8002232:	e048      	b.n	80022c6 <main+0x2c6>
		  char sym[3];
		  char car[3];
		  itoa(i,sym,10);
 8002234:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002238:	f107 0110 	add.w	r1, r7, #16
 800223c:	220a      	movs	r2, #10
 800223e:	4618      	mov	r0, r3
 8002240:	f004 fc7e 	bl	8006b40 <itoa>
		  itoa(i*10,car,10);
 8002244:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4618      	mov	r0, r3
 8002252:	f107 030c 	add.w	r3, r7, #12
 8002256:	220a      	movs	r2, #10
 8002258:	4619      	mov	r1, r3
 800225a:	f004 fc71 	bl	8006b40 <itoa>
		  	  ssd1306_SetCursor(67, 0);
 800225e:	2100      	movs	r1, #0
 8002260:	2043      	movs	r0, #67	; 0x43
 8002262:	f7ff f871 	bl	8001348 <ssd1306_SetCursor>
		      ssd1306_WriteString(sym, Font_11x18, White);
 8002266:	4a3b      	ldr	r2, [pc, #236]	; (8002354 <main+0x354>)
 8002268:	f107 0010 	add.w	r0, r7, #16
 800226c:	2301      	movs	r3, #1
 800226e:	ca06      	ldmia	r2, {r1, r2}
 8002270:	f7ff f844 	bl	80012fc <ssd1306_WriteString>
		      ssd1306_SetCursor(67, 19);
 8002274:	2113      	movs	r1, #19
 8002276:	2043      	movs	r0, #67	; 0x43
 8002278:	f7ff f866 	bl	8001348 <ssd1306_SetCursor>
		      ssd1306_WriteString(car, Font_11x18, White);
 800227c:	4a35      	ldr	r2, [pc, #212]	; (8002354 <main+0x354>)
 800227e:	f107 000c 	add.w	r0, r7, #12
 8002282:	2301      	movs	r3, #1
 8002284:	ca06      	ldmia	r2, {r1, r2}
 8002286:	f7ff f839 	bl	80012fc <ssd1306_WriteString>
		      ssd1306_UpdateScreen();
 800228a:	f7fe ff33 	bl	80010f4 <ssd1306_UpdateScreen>
		      HAL_Delay(200);
 800228e:	20c8      	movs	r0, #200	; 0xc8
 8002290:	f000 fce6 	bl	8002c60 <HAL_Delay>
			  ARGB_SetHSV(i, color, 250	, 250);
 8002294:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002298:	b298      	uxth	r0, r3
 800229a:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 800229e:	23fa      	movs	r3, #250	; 0xfa
 80022a0:	22fa      	movs	r2, #250	; 0xfa
 80022a2:	f7ff f9a1 	bl	80015e8 <ARGB_SetHSV>
			  color+=10;
 80022a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022aa:	330a      	adds	r3, #10
 80022ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			  while (ARGB_Show() != ARGB_OK);
 80022b0:	bf00      	nop
 80022b2:	f7ff f9e1 	bl	8001678 <ARGB_Show>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d1fa      	bne.n	80022b2 <main+0x2b2>
	for(uint8_t i = 0 ; i < 11; i++){
 80022bc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80022c0:	3301      	adds	r3, #1
 80022c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80022c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80022ca:	2b0a      	cmp	r3, #10
 80022cc:	d9b2      	bls.n	8002234 <main+0x234>
	 }

	 for(uint8_t i = 10 ; i < 1; i--){
 80022ce:	230a      	movs	r3, #10
 80022d0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80022d4:	e032      	b.n	800233c <main+0x33c>
		  char sym[3];
		  char car[3];
		  itoa(i,sym,10);
 80022d6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80022da:	f107 0108 	add.w	r1, r7, #8
 80022de:	220a      	movs	r2, #10
 80022e0:	4618      	mov	r0, r3
 80022e2:	f004 fc2d 	bl	8006b40 <itoa>
		  itoa(i*10,car,10);
 80022e6:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4618      	mov	r0, r3
 80022f4:	1d3b      	adds	r3, r7, #4
 80022f6:	220a      	movs	r2, #10
 80022f8:	4619      	mov	r1, r3
 80022fa:	f004 fc21 	bl	8006b40 <itoa>
		  	  ssd1306_SetCursor(67, 0);
 80022fe:	2100      	movs	r1, #0
 8002300:	2043      	movs	r0, #67	; 0x43
 8002302:	f7ff f821 	bl	8001348 <ssd1306_SetCursor>
		      ssd1306_WriteString(sym, Font_11x18, White);
 8002306:	4a13      	ldr	r2, [pc, #76]	; (8002354 <main+0x354>)
 8002308:	f107 0008 	add.w	r0, r7, #8
 800230c:	2301      	movs	r3, #1
 800230e:	ca06      	ldmia	r2, {r1, r2}
 8002310:	f7fe fff4 	bl	80012fc <ssd1306_WriteString>
		      ssd1306_SetCursor(67, 19);
 8002314:	2113      	movs	r1, #19
 8002316:	2043      	movs	r0, #67	; 0x43
 8002318:	f7ff f816 	bl	8001348 <ssd1306_SetCursor>
		      ssd1306_WriteString(car, Font_11x18, White);
 800231c:	4a0d      	ldr	r2, [pc, #52]	; (8002354 <main+0x354>)
 800231e:	1d38      	adds	r0, r7, #4
 8002320:	2301      	movs	r3, #1
 8002322:	ca06      	ldmia	r2, {r1, r2}
 8002324:	f7fe ffea 	bl	80012fc <ssd1306_WriteString>
		      ssd1306_UpdateScreen();
 8002328:	f7fe fee4 	bl	80010f4 <ssd1306_UpdateScreen>
		      HAL_Delay(200);
 800232c:	20c8      	movs	r0, #200	; 0xc8
 800232e:	f000 fc97 	bl	8002c60 <HAL_Delay>
	 for(uint8_t i = 10 ; i < 1; i--){
 8002332:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002336:	3b01      	subs	r3, #1
 8002338:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800233c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0c8      	beq.n	80022d6 <main+0x2d6>
	for(uint8_t i = 0 ; i < 11; i++){
 8002344:	e772      	b.n	800222c <main+0x22c>
 8002346:	bf00      	nop
 8002348:	66666666 	.word	0x66666666
 800234c:	40a4d566 	.word	0x40a4d566
 8002350:	2000057c 	.word	0x2000057c
 8002354:	20000000 	.word	0x20000000
 8002358:	08006df8 	.word	0x08006df8
 800235c:	08006e04 	.word	0x08006e04
 8002360:	08006e0c 	.word	0x08006e0c
 8002364:	08006e10 	.word	0x08006e10
 8002368:	08006e18 	.word	0x08006e18

0800236c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b094      	sub	sp, #80	; 0x50
 8002370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002372:	f107 0320 	add.w	r3, r7, #32
 8002376:	2230      	movs	r2, #48	; 0x30
 8002378:	2100      	movs	r1, #0
 800237a:	4618      	mov	r0, r3
 800237c:	f004 fbec 	bl	8006b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002380:	f107 030c 	add.w	r3, r7, #12
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002390:	2300      	movs	r3, #0
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	4b27      	ldr	r3, [pc, #156]	; (8002434 <SystemClock_Config+0xc8>)
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	4a26      	ldr	r2, [pc, #152]	; (8002434 <SystemClock_Config+0xc8>)
 800239a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239e:	6413      	str	r3, [r2, #64]	; 0x40
 80023a0:	4b24      	ldr	r3, [pc, #144]	; (8002434 <SystemClock_Config+0xc8>)
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ac:	2300      	movs	r3, #0
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	4b21      	ldr	r3, [pc, #132]	; (8002438 <SystemClock_Config+0xcc>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a20      	ldr	r2, [pc, #128]	; (8002438 <SystemClock_Config+0xcc>)
 80023b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <SystemClock_Config+0xcc>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023c8:	2301      	movs	r3, #1
 80023ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023d2:	2302      	movs	r3, #2
 80023d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80023dc:	2319      	movs	r3, #25
 80023de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80023e0:	2390      	movs	r3, #144	; 0x90
 80023e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023e4:	2302      	movs	r3, #2
 80023e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023e8:	2304      	movs	r3, #4
 80023ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023ec:	f107 0320 	add.w	r3, r7, #32
 80023f0:	4618      	mov	r0, r3
 80023f2:	f002 fcbf 	bl	8004d74 <HAL_RCC_OscConfig>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80023fc:	f000 f986 	bl	800270c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002400:	230f      	movs	r3, #15
 8002402:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002404:	2302      	movs	r3, #2
 8002406:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800240c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002410:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002416:	f107 030c 	add.w	r3, r7, #12
 800241a:	2102      	movs	r1, #2
 800241c:	4618      	mov	r0, r3
 800241e:	f002 ff21 	bl	8005264 <HAL_RCC_ClockConfig>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002428:	f000 f970 	bl	800270c <Error_Handler>
  }
}
 800242c:	bf00      	nop
 800242e:	3750      	adds	r7, #80	; 0x50
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40023800 	.word	0x40023800
 8002438:	40007000 	.word	0x40007000

0800243c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <MX_I2C1_Init+0x50>)
 8002442:	4a13      	ldr	r2, [pc, #76]	; (8002490 <MX_I2C1_Init+0x54>)
 8002444:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <MX_I2C1_Init+0x50>)
 8002448:	4a12      	ldr	r2, [pc, #72]	; (8002494 <MX_I2C1_Init+0x58>)
 800244a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800244c:	4b0f      	ldr	r3, [pc, #60]	; (800248c <MX_I2C1_Init+0x50>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <MX_I2C1_Init+0x50>)
 8002454:	2200      	movs	r2, #0
 8002456:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <MX_I2C1_Init+0x50>)
 800245a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800245e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002460:	4b0a      	ldr	r3, [pc, #40]	; (800248c <MX_I2C1_Init+0x50>)
 8002462:	2200      	movs	r2, #0
 8002464:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <MX_I2C1_Init+0x50>)
 8002468:	2200      	movs	r2, #0
 800246a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800246c:	4b07      	ldr	r3, [pc, #28]	; (800248c <MX_I2C1_Init+0x50>)
 800246e:	2200      	movs	r2, #0
 8002470:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <MX_I2C1_Init+0x50>)
 8002474:	2200      	movs	r2, #0
 8002476:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002478:	4804      	ldr	r0, [pc, #16]	; (800248c <MX_I2C1_Init+0x50>)
 800247a:	f001 fa27 	bl	80038cc <HAL_I2C_Init>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002484:	f000 f942 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}
 800248c:	2000057c 	.word	0x2000057c
 8002490:	40005400 	.word	0x40005400
 8002494:	000186a0 	.word	0x000186a0

08002498 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800249c:	4b17      	ldr	r3, [pc, #92]	; (80024fc <MX_SPI1_Init+0x64>)
 800249e:	4a18      	ldr	r2, [pc, #96]	; (8002500 <MX_SPI1_Init+0x68>)
 80024a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024a2:	4b16      	ldr	r3, [pc, #88]	; (80024fc <MX_SPI1_Init+0x64>)
 80024a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024aa:	4b14      	ldr	r3, [pc, #80]	; (80024fc <MX_SPI1_Init+0x64>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024b0:	4b12      	ldr	r3, [pc, #72]	; (80024fc <MX_SPI1_Init+0x64>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024b6:	4b11      	ldr	r3, [pc, #68]	; (80024fc <MX_SPI1_Init+0x64>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024bc:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <MX_SPI1_Init+0x64>)
 80024be:	2200      	movs	r2, #0
 80024c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024c2:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <MX_SPI1_Init+0x64>)
 80024c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80024ca:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <MX_SPI1_Init+0x64>)
 80024cc:	2230      	movs	r2, #48	; 0x30
 80024ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024d0:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <MX_SPI1_Init+0x64>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <MX_SPI1_Init+0x64>)
 80024d8:	2200      	movs	r2, #0
 80024da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024dc:	4b07      	ldr	r3, [pc, #28]	; (80024fc <MX_SPI1_Init+0x64>)
 80024de:	2200      	movs	r2, #0
 80024e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <MX_SPI1_Init+0x64>)
 80024e4:	220a      	movs	r2, #10
 80024e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024e8:	4804      	ldr	r0, [pc, #16]	; (80024fc <MX_SPI1_Init+0x64>)
 80024ea:	f003 f8cd 	bl	8005688 <HAL_SPI_Init>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80024f4:	f000 f90a 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	200005d0 	.word	0x200005d0
 8002500:	40013000 	.word	0x40013000

08002504 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08e      	sub	sp, #56	; 0x38
 8002508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800250a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002518:	f107 0320 	add.w	r3, r7, #32
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
 8002530:	615a      	str	r2, [r3, #20]
 8002532:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002534:	4b2c      	ldr	r3, [pc, #176]	; (80025e8 <MX_TIM2_Init+0xe4>)
 8002536:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800253a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800253c:	4b2a      	ldr	r3, [pc, #168]	; (80025e8 <MX_TIM2_Init+0xe4>)
 800253e:	2200      	movs	r2, #0
 8002540:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002542:	4b29      	ldr	r3, [pc, #164]	; (80025e8 <MX_TIM2_Init+0xe4>)
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 8002548:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <MX_TIM2_Init+0xe4>)
 800254a:	2259      	movs	r2, #89	; 0x59
 800254c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800254e:	4b26      	ldr	r3, [pc, #152]	; (80025e8 <MX_TIM2_Init+0xe4>)
 8002550:	2200      	movs	r2, #0
 8002552:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002554:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <MX_TIM2_Init+0xe4>)
 8002556:	2200      	movs	r2, #0
 8002558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800255a:	4823      	ldr	r0, [pc, #140]	; (80025e8 <MX_TIM2_Init+0xe4>)
 800255c:	f003 f91d 	bl	800579a <HAL_TIM_Base_Init>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002566:	f000 f8d1 	bl	800270c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800256a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800256e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002570:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002574:	4619      	mov	r1, r3
 8002576:	481c      	ldr	r0, [pc, #112]	; (80025e8 <MX_TIM2_Init+0xe4>)
 8002578:	f003 fbe4 	bl	8005d44 <HAL_TIM_ConfigClockSource>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002582:	f000 f8c3 	bl	800270c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002586:	4818      	ldr	r0, [pc, #96]	; (80025e8 <MX_TIM2_Init+0xe4>)
 8002588:	f003 f9b8 	bl	80058fc <HAL_TIM_PWM_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002592:	f000 f8bb 	bl	800270c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800259e:	f107 0320 	add.w	r3, r7, #32
 80025a2:	4619      	mov	r1, r3
 80025a4:	4810      	ldr	r0, [pc, #64]	; (80025e8 <MX_TIM2_Init+0xe4>)
 80025a6:	f003 ffdb 	bl	8006560 <HAL_TIMEx_MasterConfigSynchronization>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80025b0:	f000 f8ac 	bl	800270c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025b4:	2360      	movs	r3, #96	; 0x60
 80025b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	2204      	movs	r2, #4
 80025c8:	4619      	mov	r1, r3
 80025ca:	4807      	ldr	r0, [pc, #28]	; (80025e8 <MX_TIM2_Init+0xe4>)
 80025cc:	f003 faf8 	bl	8005bc0 <HAL_TIM_PWM_ConfigChannel>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80025d6:	f000 f899 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80025da:	4803      	ldr	r0, [pc, #12]	; (80025e8 <MX_TIM2_Init+0xe4>)
 80025dc:	f000 f9b8 	bl	8002950 <HAL_TIM_MspPostInit>

}
 80025e0:	bf00      	nop
 80025e2:	3738      	adds	r7, #56	; 0x38
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000628 	.word	0x20000628

080025ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <MX_DMA_Init+0x3c>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	4a0b      	ldr	r2, [pc, #44]	; (8002628 <MX_DMA_Init+0x3c>)
 80025fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002600:	6313      	str	r3, [r2, #48]	; 0x30
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <MX_DMA_Init+0x3c>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800260a:	607b      	str	r3, [r7, #4]
 800260c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800260e:	2200      	movs	r2, #0
 8002610:	2105      	movs	r1, #5
 8002612:	2011      	movs	r0, #17
 8002614:	f000 fc00 	bl	8002e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002618:	2011      	movs	r0, #17
 800261a:	f000 fc19 	bl	8002e50 <HAL_NVIC_EnableIRQ>

}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800

0800262c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002632:	f107 030c 	add.w	r3, r7, #12
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	605a      	str	r2, [r3, #4]
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	60da      	str	r2, [r3, #12]
 8002640:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <MX_GPIO_Init+0xb4>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	4a25      	ldr	r2, [pc, #148]	; (80026e0 <MX_GPIO_Init+0xb4>)
 800264c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002650:	6313      	str	r3, [r2, #48]	; 0x30
 8002652:	4b23      	ldr	r3, [pc, #140]	; (80026e0 <MX_GPIO_Init+0xb4>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	607b      	str	r3, [r7, #4]
 8002662:	4b1f      	ldr	r3, [pc, #124]	; (80026e0 <MX_GPIO_Init+0xb4>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	4a1e      	ldr	r2, [pc, #120]	; (80026e0 <MX_GPIO_Init+0xb4>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6313      	str	r3, [r2, #48]	; 0x30
 800266e:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <MX_GPIO_Init+0xb4>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	603b      	str	r3, [r7, #0]
 800267e:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <MX_GPIO_Init+0xb4>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	4a17      	ldr	r2, [pc, #92]	; (80026e0 <MX_GPIO_Init+0xb4>)
 8002684:	f043 0302 	orr.w	r3, r3, #2
 8002688:	6313      	str	r3, [r2, #48]	; 0x30
 800268a:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <MX_GPIO_Init+0xb4>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin, GPIO_PIN_RESET);
 8002696:	2200      	movs	r2, #0
 8002698:	2107      	movs	r1, #7
 800269a:	4812      	ldr	r0, [pc, #72]	; (80026e4 <MX_GPIO_Init+0xb8>)
 800269c:	f001 f8fc 	bl	8003898 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_CS_Pin EPD_Reset_Pin EPD_Data_Control_Pin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin;
 80026a0:	2307      	movs	r3, #7
 80026a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a4:	2301      	movs	r3, #1
 80026a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b0:	f107 030c 	add.w	r3, r7, #12
 80026b4:	4619      	mov	r1, r3
 80026b6:	480b      	ldr	r0, [pc, #44]	; (80026e4 <MX_GPIO_Init+0xb8>)
 80026b8:	f000 ff6a 	bl	8003590 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_Busy_Pin */
  GPIO_InitStruct.Pin = EPD_Busy_Pin;
 80026bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026c6:	2302      	movs	r3, #2
 80026c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EPD_Busy_GPIO_Port, &GPIO_InitStruct);
 80026ca:	f107 030c 	add.w	r3, r7, #12
 80026ce:	4619      	mov	r1, r3
 80026d0:	4804      	ldr	r0, [pc, #16]	; (80026e4 <MX_GPIO_Init+0xb8>)
 80026d2:	f000 ff5d 	bl	8003590 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026d6:	bf00      	nop
 80026d8:	3720      	adds	r7, #32
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40020400 	.word	0x40020400

080026e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a04      	ldr	r2, [pc, #16]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d101      	bne.n	80026fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80026fa:	f000 fa91 	bl	8002c20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40014000 	.word	0x40014000

0800270c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002710:	b672      	cpsid	i
}
 8002712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002714:	e7fe      	b.n	8002714 <Error_Handler+0x8>
	...

08002718 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	4b12      	ldr	r3, [pc, #72]	; (800276c <HAL_MspInit+0x54>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	4a11      	ldr	r2, [pc, #68]	; (800276c <HAL_MspInit+0x54>)
 8002728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800272c:	6453      	str	r3, [r2, #68]	; 0x44
 800272e:	4b0f      	ldr	r3, [pc, #60]	; (800276c <HAL_MspInit+0x54>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	603b      	str	r3, [r7, #0]
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_MspInit+0x54>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	4a0a      	ldr	r2, [pc, #40]	; (800276c <HAL_MspInit+0x54>)
 8002744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002748:	6413      	str	r3, [r2, #64]	; 0x40
 800274a:	4b08      	ldr	r3, [pc, #32]	; (800276c <HAL_MspInit+0x54>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002756:	2200      	movs	r2, #0
 8002758:	210f      	movs	r1, #15
 800275a:	f06f 0001 	mvn.w	r0, #1
 800275e:	f000 fb5b 	bl	8002e18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800

08002770 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	; 0x28
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a19      	ldr	r2, [pc, #100]	; (80027f4 <HAL_I2C_MspInit+0x84>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d12b      	bne.n	80027ea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	4b18      	ldr	r3, [pc, #96]	; (80027f8 <HAL_I2C_MspInit+0x88>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a17      	ldr	r2, [pc, #92]	; (80027f8 <HAL_I2C_MspInit+0x88>)
 800279c:	f043 0302 	orr.w	r3, r3, #2
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <HAL_I2C_MspInit+0x88>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027ae:	23c0      	movs	r3, #192	; 0xc0
 80027b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027b2:	2312      	movs	r3, #18
 80027b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ba:	2303      	movs	r3, #3
 80027bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027be:	2304      	movs	r3, #4
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c2:	f107 0314 	add.w	r3, r7, #20
 80027c6:	4619      	mov	r1, r3
 80027c8:	480c      	ldr	r0, [pc, #48]	; (80027fc <HAL_I2C_MspInit+0x8c>)
 80027ca:	f000 fee1 	bl	8003590 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_I2C_MspInit+0x88>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a08      	ldr	r2, [pc, #32]	; (80027f8 <HAL_I2C_MspInit+0x88>)
 80027d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_I2C_MspInit+0x88>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027ea:	bf00      	nop
 80027ec:	3728      	adds	r7, #40	; 0x28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40005400 	.word	0x40005400
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40020400 	.word	0x40020400

08002800 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08a      	sub	sp, #40	; 0x28
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002808:	f107 0314 	add.w	r3, r7, #20
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a19      	ldr	r2, [pc, #100]	; (8002884 <HAL_SPI_MspInit+0x84>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d12b      	bne.n	800287a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	4b18      	ldr	r3, [pc, #96]	; (8002888 <HAL_SPI_MspInit+0x88>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	4a17      	ldr	r2, [pc, #92]	; (8002888 <HAL_SPI_MspInit+0x88>)
 800282c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002830:	6453      	str	r3, [r2, #68]	; 0x44
 8002832:	4b15      	ldr	r3, [pc, #84]	; (8002888 <HAL_SPI_MspInit+0x88>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	4b11      	ldr	r3, [pc, #68]	; (8002888 <HAL_SPI_MspInit+0x88>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	4a10      	ldr	r2, [pc, #64]	; (8002888 <HAL_SPI_MspInit+0x88>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	6313      	str	r3, [r2, #48]	; 0x30
 800284e:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <HAL_SPI_MspInit+0x88>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800285a:	23a0      	movs	r3, #160	; 0xa0
 800285c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285e:	2302      	movs	r3, #2
 8002860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	2300      	movs	r3, #0
 8002864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002866:	2303      	movs	r3, #3
 8002868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800286a:	2305      	movs	r3, #5
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286e:	f107 0314 	add.w	r3, r7, #20
 8002872:	4619      	mov	r1, r3
 8002874:	4805      	ldr	r0, [pc, #20]	; (800288c <HAL_SPI_MspInit+0x8c>)
 8002876:	f000 fe8b 	bl	8003590 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800287a:	bf00      	nop
 800287c:	3728      	adds	r7, #40	; 0x28
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40013000 	.word	0x40013000
 8002888:	40023800 	.word	0x40023800
 800288c:	40020000 	.word	0x40020000

08002890 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a0:	d14c      	bne.n	800293c <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	4b27      	ldr	r3, [pc, #156]	; (8002944 <HAL_TIM_Base_MspInit+0xb4>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	4a26      	ldr	r2, [pc, #152]	; (8002944 <HAL_TIM_Base_MspInit+0xb4>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6413      	str	r3, [r2, #64]	; 0x40
 80028b2:	4b24      	ldr	r3, [pc, #144]	; (8002944 <HAL_TIM_Base_MspInit+0xb4>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 80028be:	4b22      	ldr	r3, [pc, #136]	; (8002948 <HAL_TIM_Base_MspInit+0xb8>)
 80028c0:	4a22      	ldr	r2, [pc, #136]	; (800294c <HAL_TIM_Base_MspInit+0xbc>)
 80028c2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 80028c4:	4b20      	ldr	r3, [pc, #128]	; (8002948 <HAL_TIM_Base_MspInit+0xb8>)
 80028c6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80028ca:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028cc:	4b1e      	ldr	r3, [pc, #120]	; (8002948 <HAL_TIM_Base_MspInit+0xb8>)
 80028ce:	2240      	movs	r2, #64	; 0x40
 80028d0:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80028d2:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <HAL_TIM_Base_MspInit+0xb8>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80028d8:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <HAL_TIM_Base_MspInit+0xb8>)
 80028da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028de:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028e0:	4b19      	ldr	r3, [pc, #100]	; (8002948 <HAL_TIM_Base_MspInit+0xb8>)
 80028e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028e6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028e8:	4b17      	ldr	r3, [pc, #92]	; (8002948 <HAL_TIM_Base_MspInit+0xb8>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 80028ee:	4b16      	ldr	r3, [pc, #88]	; (8002948 <HAL_TIM_Base_MspInit+0xb8>)
 80028f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028f4:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80028f6:	4b14      	ldr	r3, [pc, #80]	; (8002948 <HAL_TIM_Base_MspInit+0xb8>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80028fc:	4b12      	ldr	r3, [pc, #72]	; (8002948 <HAL_TIM_Base_MspInit+0xb8>)
 80028fe:	2204      	movs	r2, #4
 8002900:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch2_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002902:	4b11      	ldr	r3, [pc, #68]	; (8002948 <HAL_TIM_Base_MspInit+0xb8>)
 8002904:	2203      	movs	r2, #3
 8002906:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch2_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 8002908:	4b0f      	ldr	r3, [pc, #60]	; (8002948 <HAL_TIM_Base_MspInit+0xb8>)
 800290a:	2200      	movs	r2, #0
 800290c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch2_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800290e:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <HAL_TIM_Base_MspInit+0xb8>)
 8002910:	2200      	movs	r2, #0
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8002914:	480c      	ldr	r0, [pc, #48]	; (8002948 <HAL_TIM_Base_MspInit+0xb8>)
 8002916:	f000 faa9 	bl	8002e6c <HAL_DMA_Init>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <HAL_TIM_Base_MspInit+0x94>
    {
      Error_Handler();
 8002920:	f7ff fef4 	bl	800270c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a08      	ldr	r2, [pc, #32]	; (8002948 <HAL_TIM_Base_MspInit+0xb8>)
 8002928:	629a      	str	r2, [r3, #40]	; 0x28
 800292a:	4a07      	ldr	r2, [pc, #28]	; (8002948 <HAL_TIM_Base_MspInit+0xb8>)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a05      	ldr	r2, [pc, #20]	; (8002948 <HAL_TIM_Base_MspInit+0xb8>)
 8002934:	631a      	str	r2, [r3, #48]	; 0x30
 8002936:	4a04      	ldr	r2, [pc, #16]	; (8002948 <HAL_TIM_Base_MspInit+0xb8>)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800293c:	bf00      	nop
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40023800 	.word	0x40023800
 8002948:	20000670 	.word	0x20000670
 800294c:	400260a0 	.word	0x400260a0

08002950 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 030c 	add.w	r3, r7, #12
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002970:	d11d      	bne.n	80029ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <HAL_TIM_MspPostInit+0x68>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4a0f      	ldr	r2, [pc, #60]	; (80029b8 <HAL_TIM_MspPostInit+0x68>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <HAL_TIM_MspPostInit+0x68>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800298e:	2302      	movs	r3, #2
 8002990:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002992:	2302      	movs	r3, #2
 8002994:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800299a:	2302      	movs	r3, #2
 800299c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800299e:	2301      	movs	r3, #1
 80029a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a2:	f107 030c 	add.w	r3, r7, #12
 80029a6:	4619      	mov	r1, r3
 80029a8:	4804      	ldr	r0, [pc, #16]	; (80029bc <HAL_TIM_MspPostInit+0x6c>)
 80029aa:	f000 fdf1 	bl	8003590 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80029ae:	bf00      	nop
 80029b0:	3720      	adds	r7, #32
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40020000 	.word	0x40020000

080029c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08c      	sub	sp, #48	; 0x30
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80029d0:	2300      	movs	r3, #0
 80029d2:	60bb      	str	r3, [r7, #8]
 80029d4:	4b2e      	ldr	r3, [pc, #184]	; (8002a90 <HAL_InitTick+0xd0>)
 80029d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d8:	4a2d      	ldr	r2, [pc, #180]	; (8002a90 <HAL_InitTick+0xd0>)
 80029da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029de:	6453      	str	r3, [r2, #68]	; 0x44
 80029e0:	4b2b      	ldr	r3, [pc, #172]	; (8002a90 <HAL_InitTick+0xd0>)
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029ec:	f107 020c 	add.w	r2, r7, #12
 80029f0:	f107 0310 	add.w	r3, r7, #16
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f002 fe14 	bl	8005624 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80029fc:	f002 fdfe 	bl	80055fc <HAL_RCC_GetPCLK2Freq>
 8002a00:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a04:	4a23      	ldr	r2, [pc, #140]	; (8002a94 <HAL_InitTick+0xd4>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	0c9b      	lsrs	r3, r3, #18
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8002a10:	4b21      	ldr	r3, [pc, #132]	; (8002a98 <HAL_InitTick+0xd8>)
 8002a12:	4a22      	ldr	r2, [pc, #136]	; (8002a9c <HAL_InitTick+0xdc>)
 8002a14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8002a16:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <HAL_InitTick+0xd8>)
 8002a18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a1c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8002a1e:	4a1e      	ldr	r2, [pc, #120]	; (8002a98 <HAL_InitTick+0xd8>)
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8002a24:	4b1c      	ldr	r3, [pc, #112]	; (8002a98 <HAL_InitTick+0xd8>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a2a:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <HAL_InitTick+0xd8>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a30:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_InitTick+0xd8>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8002a36:	4818      	ldr	r0, [pc, #96]	; (8002a98 <HAL_InitTick+0xd8>)
 8002a38:	f002 feaf 	bl	800579a <HAL_TIM_Base_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002a42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d11b      	bne.n	8002a82 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8002a4a:	4813      	ldr	r0, [pc, #76]	; (8002a98 <HAL_InitTick+0xd8>)
 8002a4c:	f002 fef4 	bl	8005838 <HAL_TIM_Base_Start_IT>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002a56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d111      	bne.n	8002a82 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002a5e:	2018      	movs	r0, #24
 8002a60:	f000 f9f6 	bl	8002e50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b0f      	cmp	r3, #15
 8002a68:	d808      	bhi.n	8002a7c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	2018      	movs	r0, #24
 8002a70:	f000 f9d2 	bl	8002e18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a74:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <HAL_InitTick+0xe0>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	e002      	b.n	8002a82 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002a82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3730      	adds	r7, #48	; 0x30
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800
 8002a94:	431bde83 	.word	0x431bde83
 8002a98:	200006d0 	.word	0x200006d0
 8002a9c:	40014000 	.word	0x40014000
 8002aa0:	20000010 	.word	0x20000010

08002aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002aa8:	e7fe      	b.n	8002aa8 <NMI_Handler+0x4>

08002aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aae:	e7fe      	b.n	8002aae <HardFault_Handler+0x4>

08002ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ab4:	e7fe      	b.n	8002ab4 <MemManage_Handler+0x4>

08002ab6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aba:	e7fe      	b.n	8002aba <BusFault_Handler+0x4>

08002abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ac0:	e7fe      	b.n	8002ac0 <UsageFault_Handler+0x4>

08002ac2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8002ad4:	4802      	ldr	r0, [pc, #8]	; (8002ae0 <DMA1_Stream6_IRQHandler+0x10>)
 8002ad6:	f000 faf1 	bl	80030bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000670 	.word	0x20000670

08002ae4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002ae8:	4802      	ldr	r0, [pc, #8]	; (8002af4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002aea:	f002 ff60 	bl	80059ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	200006d0 	.word	0x200006d0

08002af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b00:	4a14      	ldr	r2, [pc, #80]	; (8002b54 <_sbrk+0x5c>)
 8002b02:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <_sbrk+0x60>)
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b0c:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <_sbrk+0x64>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d102      	bne.n	8002b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b14:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <_sbrk+0x64>)
 8002b16:	4a12      	ldr	r2, [pc, #72]	; (8002b60 <_sbrk+0x68>)
 8002b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b1a:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <_sbrk+0x64>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4413      	add	r3, r2
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d207      	bcs.n	8002b38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b28:	f003 ffc8 	bl	8006abc <__errno>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	220c      	movs	r2, #12
 8002b30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295
 8002b36:	e009      	b.n	8002b4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b38:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <_sbrk+0x64>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b3e:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <_sbrk+0x64>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	4a05      	ldr	r2, [pc, #20]	; (8002b5c <_sbrk+0x64>)
 8002b48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20020000 	.word	0x20020000
 8002b58:	00004000 	.word	0x00004000
 8002b5c:	20000718 	.word	0x20000718
 8002b60:	20000bc0 	.word	0x20000bc0

08002b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b68:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <SystemInit+0x20>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6e:	4a05      	ldr	r2, [pc, #20]	; (8002b84 <SystemInit+0x20>)
 8002b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b8c:	480d      	ldr	r0, [pc, #52]	; (8002bc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b8e:	490e      	ldr	r1, [pc, #56]	; (8002bc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b90:	4a0e      	ldr	r2, [pc, #56]	; (8002bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b94:	e002      	b.n	8002b9c <LoopCopyDataInit>

08002b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b9a:	3304      	adds	r3, #4

08002b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ba0:	d3f9      	bcc.n	8002b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ba2:	4a0b      	ldr	r2, [pc, #44]	; (8002bd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ba4:	4c0b      	ldr	r4, [pc, #44]	; (8002bd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ba8:	e001      	b.n	8002bae <LoopFillZerobss>

08002baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bac:	3204      	adds	r2, #4

08002bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bb0:	d3fb      	bcc.n	8002baa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bb2:	f7ff ffd7 	bl	8002b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bb6:	f003 ff87 	bl	8006ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bba:	f7ff fa21 	bl	8002000 <main>
  bx  lr    
 8002bbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bc8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002bcc:	08007c30 	.word	0x08007c30
  ldr r2, =_sbss
 8002bd0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002bd4:	20000bbc 	.word	0x20000bbc

08002bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bd8:	e7fe      	b.n	8002bd8 <ADC_IRQHandler>
	...

08002bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002be0:	4b0e      	ldr	r3, [pc, #56]	; (8002c1c <HAL_Init+0x40>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0d      	ldr	r2, [pc, #52]	; (8002c1c <HAL_Init+0x40>)
 8002be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_Init+0x40>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <HAL_Init+0x40>)
 8002bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bf8:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <HAL_Init+0x40>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a07      	ldr	r2, [pc, #28]	; (8002c1c <HAL_Init+0x40>)
 8002bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c04:	2003      	movs	r0, #3
 8002c06:	f000 f8fc 	bl	8002e02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f7ff fed8 	bl	80029c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c10:	f7ff fd82 	bl	8002718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40023c00 	.word	0x40023c00

08002c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_IncTick+0x20>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_IncTick+0x24>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4413      	add	r3, r2
 8002c30:	4a04      	ldr	r2, [pc, #16]	; (8002c44 <HAL_IncTick+0x24>)
 8002c32:	6013      	str	r3, [r2, #0]
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20000014 	.word	0x20000014
 8002c44:	2000071c 	.word	0x2000071c

08002c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <HAL_GetTick+0x14>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	2000071c 	.word	0x2000071c

08002c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c68:	f7ff ffee 	bl	8002c48 <HAL_GetTick>
 8002c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d005      	beq.n	8002c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_Delay+0x44>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4413      	add	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c86:	bf00      	nop
 8002c88:	f7ff ffde 	bl	8002c48 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d8f7      	bhi.n	8002c88 <HAL_Delay+0x28>
  {
  }
}
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000014 	.word	0x20000014

08002ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb8:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <__NVIC_SetPriorityGrouping+0x44>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cda:	4a04      	ldr	r2, [pc, #16]	; (8002cec <__NVIC_SetPriorityGrouping+0x44>)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	60d3      	str	r3, [r2, #12]
}
 8002ce0:	bf00      	nop
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <__NVIC_GetPriorityGrouping+0x18>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	0a1b      	lsrs	r3, r3, #8
 8002cfa:	f003 0307 	and.w	r3, r3, #7
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	db0b      	blt.n	8002d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	f003 021f 	and.w	r2, r3, #31
 8002d24:	4907      	ldr	r1, [pc, #28]	; (8002d44 <__NVIC_EnableIRQ+0x38>)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	e000e100 	.word	0xe000e100

08002d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	6039      	str	r1, [r7, #0]
 8002d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	db0a      	blt.n	8002d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	490c      	ldr	r1, [pc, #48]	; (8002d94 <__NVIC_SetPriority+0x4c>)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	0112      	lsls	r2, r2, #4
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d70:	e00a      	b.n	8002d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	4908      	ldr	r1, [pc, #32]	; (8002d98 <__NVIC_SetPriority+0x50>)
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	3b04      	subs	r3, #4
 8002d80:	0112      	lsls	r2, r2, #4
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	440b      	add	r3, r1
 8002d86:	761a      	strb	r2, [r3, #24]
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	e000e100 	.word	0xe000e100
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b089      	sub	sp, #36	; 0x24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f1c3 0307 	rsb	r3, r3, #7
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	bf28      	it	cs
 8002dba:	2304      	movcs	r3, #4
 8002dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d902      	bls.n	8002dcc <NVIC_EncodePriority+0x30>
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	3b03      	subs	r3, #3
 8002dca:	e000      	b.n	8002dce <NVIC_EncodePriority+0x32>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43da      	mvns	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	401a      	ands	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de4:	f04f 31ff 	mov.w	r1, #4294967295
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	43d9      	mvns	r1, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df4:	4313      	orrs	r3, r2
         );
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3724      	adds	r7, #36	; 0x24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff ff4c 	bl	8002ca8 <__NVIC_SetPriorityGrouping>
}
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e2a:	f7ff ff61 	bl	8002cf0 <__NVIC_GetPriorityGrouping>
 8002e2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	68b9      	ldr	r1, [r7, #8]
 8002e34:	6978      	ldr	r0, [r7, #20]
 8002e36:	f7ff ffb1 	bl	8002d9c <NVIC_EncodePriority>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e40:	4611      	mov	r1, r2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff ff80 	bl	8002d48 <__NVIC_SetPriority>
}
 8002e48:	bf00      	nop
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff ff54 	bl	8002d0c <__NVIC_EnableIRQ>
}
 8002e64:	bf00      	nop
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e78:	f7ff fee6 	bl	8002c48 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e099      	b.n	8002fbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0201 	bic.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ea8:	e00f      	b.n	8002eca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eaa:	f7ff fecd 	bl	8002c48 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d908      	bls.n	8002eca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e078      	b.n	8002fbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1e8      	bne.n	8002eaa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	4b38      	ldr	r3, [pc, #224]	; (8002fc4 <HAL_DMA_Init+0x158>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d107      	bne.n	8002f34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f023 0307 	bic.w	r3, r3, #7
 8002f4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d117      	bne.n	8002f8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00e      	beq.n	8002f8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 fa91 	bl	8003498 <DMA_CheckFifoParam>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2240      	movs	r2, #64	; 0x40
 8002f80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e016      	b.n	8002fbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fa48 	bl	800342c <DMA_CalcBaseAndBitshift>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa4:	223f      	movs	r2, #63	; 0x3f
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	f010803f 	.word	0xf010803f

08002fc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fde:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_DMA_Start_IT+0x26>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e040      	b.n	8003070 <HAL_DMA_Start_IT+0xa8>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d12f      	bne.n	8003062 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2202      	movs	r2, #2
 8003006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	68b9      	ldr	r1, [r7, #8]
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f9da 	bl	80033d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003020:	223f      	movs	r2, #63	; 0x3f
 8003022:	409a      	lsls	r2, r3
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0216 	orr.w	r2, r2, #22
 8003036:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	2b00      	cmp	r3, #0
 800303e:	d007      	beq.n	8003050 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0208 	orr.w	r2, r2, #8
 800304e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	e005      	b.n	800306e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800306a:	2302      	movs	r3, #2
 800306c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800306e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d004      	beq.n	8003096 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2280      	movs	r2, #128	; 0x80
 8003090:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e00c      	b.n	80030b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2205      	movs	r2, #5
 800309a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0201 	bic.w	r2, r2, #1
 80030ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030c8:	4b8e      	ldr	r3, [pc, #568]	; (8003304 <HAL_DMA_IRQHandler+0x248>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a8e      	ldr	r2, [pc, #568]	; (8003308 <HAL_DMA_IRQHandler+0x24c>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	0a9b      	lsrs	r3, r3, #10
 80030d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e6:	2208      	movs	r2, #8
 80030e8:	409a      	lsls	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d01a      	beq.n	8003128 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d013      	beq.n	8003128 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0204 	bic.w	r2, r2, #4
 800310e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003114:	2208      	movs	r2, #8
 8003116:	409a      	lsls	r2, r3
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003120:	f043 0201 	orr.w	r2, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312c:	2201      	movs	r2, #1
 800312e:	409a      	lsls	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4013      	ands	r3, r2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d012      	beq.n	800315e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00b      	beq.n	800315e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314a:	2201      	movs	r2, #1
 800314c:	409a      	lsls	r2, r3
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003156:	f043 0202 	orr.w	r2, r3, #2
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003162:	2204      	movs	r2, #4
 8003164:	409a      	lsls	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4013      	ands	r3, r2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d012      	beq.n	8003194 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00b      	beq.n	8003194 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003180:	2204      	movs	r2, #4
 8003182:	409a      	lsls	r2, r3
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318c:	f043 0204 	orr.w	r2, r3, #4
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003198:	2210      	movs	r2, #16
 800319a:	409a      	lsls	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d043      	beq.n	800322c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d03c      	beq.n	800322c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b6:	2210      	movs	r2, #16
 80031b8:	409a      	lsls	r2, r3
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d018      	beq.n	80031fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d108      	bne.n	80031ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d024      	beq.n	800322c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	4798      	blx	r3
 80031ea:	e01f      	b.n	800322c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d01b      	beq.n	800322c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	4798      	blx	r3
 80031fc:	e016      	b.n	800322c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	d107      	bne.n	800321c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0208 	bic.w	r2, r2, #8
 800321a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003230:	2220      	movs	r2, #32
 8003232:	409a      	lsls	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 808f 	beq.w	800335c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0310 	and.w	r3, r3, #16
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 8087 	beq.w	800335c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003252:	2220      	movs	r2, #32
 8003254:	409a      	lsls	r2, r3
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b05      	cmp	r3, #5
 8003264:	d136      	bne.n	80032d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0216 	bic.w	r2, r2, #22
 8003274:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695a      	ldr	r2, [r3, #20]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003284:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	d103      	bne.n	8003296 <HAL_DMA_IRQHandler+0x1da>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003292:	2b00      	cmp	r3, #0
 8003294:	d007      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0208 	bic.w	r2, r2, #8
 80032a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032aa:	223f      	movs	r2, #63	; 0x3f
 80032ac:	409a      	lsls	r2, r3
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d07e      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	4798      	blx	r3
        }
        return;
 80032d2:	e079      	b.n	80033c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d01d      	beq.n	800331e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10d      	bne.n	800330c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d031      	beq.n	800335c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	4798      	blx	r3
 8003300:	e02c      	b.n	800335c <HAL_DMA_IRQHandler+0x2a0>
 8003302:	bf00      	nop
 8003304:	2000000c 	.word	0x2000000c
 8003308:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003310:	2b00      	cmp	r3, #0
 8003312:	d023      	beq.n	800335c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	4798      	blx	r3
 800331c:	e01e      	b.n	800335c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10f      	bne.n	800334c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0210 	bic.w	r2, r2, #16
 800333a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003360:	2b00      	cmp	r3, #0
 8003362:	d032      	beq.n	80033ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d022      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2205      	movs	r2, #5
 8003374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0201 	bic.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	3301      	adds	r3, #1
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	429a      	cmp	r2, r3
 8003392:	d307      	bcc.n	80033a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f2      	bne.n	8003388 <HAL_DMA_IRQHandler+0x2cc>
 80033a2:	e000      	b.n	80033a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d005      	beq.n	80033ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	4798      	blx	r3
 80033c6:	e000      	b.n	80033ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80033c8:	bf00      	nop
    }
  }
}
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
 80033dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	2b40      	cmp	r3, #64	; 0x40
 80033fc:	d108      	bne.n	8003410 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800340e:	e007      	b.n	8003420 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	60da      	str	r2, [r3, #12]
}
 8003420:	bf00      	nop
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	3b10      	subs	r3, #16
 800343c:	4a14      	ldr	r2, [pc, #80]	; (8003490 <DMA_CalcBaseAndBitshift+0x64>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	091b      	lsrs	r3, r3, #4
 8003444:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003446:	4a13      	ldr	r2, [pc, #76]	; (8003494 <DMA_CalcBaseAndBitshift+0x68>)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4413      	add	r3, r2
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2b03      	cmp	r3, #3
 8003458:	d909      	bls.n	800346e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003462:	f023 0303 	bic.w	r3, r3, #3
 8003466:	1d1a      	adds	r2, r3, #4
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	659a      	str	r2, [r3, #88]	; 0x58
 800346c:	e007      	b.n	800347e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003476:	f023 0303 	bic.w	r3, r3, #3
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003482:	4618      	mov	r0, r3
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	aaaaaaab 	.word	0xaaaaaaab
 8003494:	08007b90 	.word	0x08007b90

08003498 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a0:	2300      	movs	r3, #0
 80034a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d11f      	bne.n	80034f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d856      	bhi.n	8003566 <DMA_CheckFifoParam+0xce>
 80034b8:	a201      	add	r2, pc, #4	; (adr r2, 80034c0 <DMA_CheckFifoParam+0x28>)
 80034ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034be:	bf00      	nop
 80034c0:	080034d1 	.word	0x080034d1
 80034c4:	080034e3 	.word	0x080034e3
 80034c8:	080034d1 	.word	0x080034d1
 80034cc:	08003567 	.word	0x08003567
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d046      	beq.n	800356a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e0:	e043      	b.n	800356a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034ea:	d140      	bne.n	800356e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034f0:	e03d      	b.n	800356e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034fa:	d121      	bne.n	8003540 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b03      	cmp	r3, #3
 8003500:	d837      	bhi.n	8003572 <DMA_CheckFifoParam+0xda>
 8003502:	a201      	add	r2, pc, #4	; (adr r2, 8003508 <DMA_CheckFifoParam+0x70>)
 8003504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003508:	08003519 	.word	0x08003519
 800350c:	0800351f 	.word	0x0800351f
 8003510:	08003519 	.word	0x08003519
 8003514:	08003531 	.word	0x08003531
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
      break;
 800351c:	e030      	b.n	8003580 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d025      	beq.n	8003576 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800352e:	e022      	b.n	8003576 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003538:	d11f      	bne.n	800357a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800353e:	e01c      	b.n	800357a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d903      	bls.n	800354e <DMA_CheckFifoParam+0xb6>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b03      	cmp	r3, #3
 800354a:	d003      	beq.n	8003554 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800354c:	e018      	b.n	8003580 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	73fb      	strb	r3, [r7, #15]
      break;
 8003552:	e015      	b.n	8003580 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003558:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00e      	beq.n	800357e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
      break;
 8003564:	e00b      	b.n	800357e <DMA_CheckFifoParam+0xe6>
      break;
 8003566:	bf00      	nop
 8003568:	e00a      	b.n	8003580 <DMA_CheckFifoParam+0xe8>
      break;
 800356a:	bf00      	nop
 800356c:	e008      	b.n	8003580 <DMA_CheckFifoParam+0xe8>
      break;
 800356e:	bf00      	nop
 8003570:	e006      	b.n	8003580 <DMA_CheckFifoParam+0xe8>
      break;
 8003572:	bf00      	nop
 8003574:	e004      	b.n	8003580 <DMA_CheckFifoParam+0xe8>
      break;
 8003576:	bf00      	nop
 8003578:	e002      	b.n	8003580 <DMA_CheckFifoParam+0xe8>
      break;   
 800357a:	bf00      	nop
 800357c:	e000      	b.n	8003580 <DMA_CheckFifoParam+0xe8>
      break;
 800357e:	bf00      	nop
    }
  } 
  
  return status; 
 8003580:	7bfb      	ldrb	r3, [r7, #15]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop

08003590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003590:	b480      	push	{r7}
 8003592:	b089      	sub	sp, #36	; 0x24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800359e:	2300      	movs	r3, #0
 80035a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
 80035aa:	e159      	b.n	8003860 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035ac:	2201      	movs	r2, #1
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4013      	ands	r3, r2
 80035be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	f040 8148 	bne.w	800385a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d005      	beq.n	80035e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d130      	bne.n	8003644 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	2203      	movs	r2, #3
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4013      	ands	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4313      	orrs	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003618:	2201      	movs	r2, #1
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	43db      	mvns	r3, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4013      	ands	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	f003 0201 	and.w	r2, r3, #1
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4313      	orrs	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f003 0303 	and.w	r3, r3, #3
 800364c:	2b03      	cmp	r3, #3
 800364e:	d017      	beq.n	8003680 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	2203      	movs	r2, #3
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	43db      	mvns	r3, r3
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4013      	ands	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4313      	orrs	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f003 0303 	and.w	r3, r3, #3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d123      	bne.n	80036d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	08da      	lsrs	r2, r3, #3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3208      	adds	r2, #8
 8003694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003698:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	220f      	movs	r2, #15
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	43db      	mvns	r3, r3
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4013      	ands	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	08da      	lsrs	r2, r3, #3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3208      	adds	r2, #8
 80036ce:	69b9      	ldr	r1, [r7, #24]
 80036d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	2203      	movs	r2, #3
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	43db      	mvns	r3, r3
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4013      	ands	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 0203 	and.w	r2, r3, #3
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4313      	orrs	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80a2 	beq.w	800385a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003716:	2300      	movs	r3, #0
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	4b57      	ldr	r3, [pc, #348]	; (8003878 <HAL_GPIO_Init+0x2e8>)
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	4a56      	ldr	r2, [pc, #344]	; (8003878 <HAL_GPIO_Init+0x2e8>)
 8003720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003724:	6453      	str	r3, [r2, #68]	; 0x44
 8003726:	4b54      	ldr	r3, [pc, #336]	; (8003878 <HAL_GPIO_Init+0x2e8>)
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003732:	4a52      	ldr	r2, [pc, #328]	; (800387c <HAL_GPIO_Init+0x2ec>)
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	089b      	lsrs	r3, r3, #2
 8003738:	3302      	adds	r3, #2
 800373a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800373e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	220f      	movs	r2, #15
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	43db      	mvns	r3, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4013      	ands	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a49      	ldr	r2, [pc, #292]	; (8003880 <HAL_GPIO_Init+0x2f0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d019      	beq.n	8003792 <HAL_GPIO_Init+0x202>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a48      	ldr	r2, [pc, #288]	; (8003884 <HAL_GPIO_Init+0x2f4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d013      	beq.n	800378e <HAL_GPIO_Init+0x1fe>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a47      	ldr	r2, [pc, #284]	; (8003888 <HAL_GPIO_Init+0x2f8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00d      	beq.n	800378a <HAL_GPIO_Init+0x1fa>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a46      	ldr	r2, [pc, #280]	; (800388c <HAL_GPIO_Init+0x2fc>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d007      	beq.n	8003786 <HAL_GPIO_Init+0x1f6>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a45      	ldr	r2, [pc, #276]	; (8003890 <HAL_GPIO_Init+0x300>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d101      	bne.n	8003782 <HAL_GPIO_Init+0x1f2>
 800377e:	2304      	movs	r3, #4
 8003780:	e008      	b.n	8003794 <HAL_GPIO_Init+0x204>
 8003782:	2307      	movs	r3, #7
 8003784:	e006      	b.n	8003794 <HAL_GPIO_Init+0x204>
 8003786:	2303      	movs	r3, #3
 8003788:	e004      	b.n	8003794 <HAL_GPIO_Init+0x204>
 800378a:	2302      	movs	r3, #2
 800378c:	e002      	b.n	8003794 <HAL_GPIO_Init+0x204>
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <HAL_GPIO_Init+0x204>
 8003792:	2300      	movs	r3, #0
 8003794:	69fa      	ldr	r2, [r7, #28]
 8003796:	f002 0203 	and.w	r2, r2, #3
 800379a:	0092      	lsls	r2, r2, #2
 800379c:	4093      	lsls	r3, r2
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037a4:	4935      	ldr	r1, [pc, #212]	; (800387c <HAL_GPIO_Init+0x2ec>)
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	089b      	lsrs	r3, r3, #2
 80037aa:	3302      	adds	r3, #2
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037b2:	4b38      	ldr	r3, [pc, #224]	; (8003894 <HAL_GPIO_Init+0x304>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	43db      	mvns	r3, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4013      	ands	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037d6:	4a2f      	ldr	r2, [pc, #188]	; (8003894 <HAL_GPIO_Init+0x304>)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037dc:	4b2d      	ldr	r3, [pc, #180]	; (8003894 <HAL_GPIO_Init+0x304>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	43db      	mvns	r3, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4013      	ands	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003800:	4a24      	ldr	r2, [pc, #144]	; (8003894 <HAL_GPIO_Init+0x304>)
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003806:	4b23      	ldr	r3, [pc, #140]	; (8003894 <HAL_GPIO_Init+0x304>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	43db      	mvns	r3, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4013      	ands	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800382a:	4a1a      	ldr	r2, [pc, #104]	; (8003894 <HAL_GPIO_Init+0x304>)
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003830:	4b18      	ldr	r3, [pc, #96]	; (8003894 <HAL_GPIO_Init+0x304>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	43db      	mvns	r3, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4013      	ands	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003854:	4a0f      	ldr	r2, [pc, #60]	; (8003894 <HAL_GPIO_Init+0x304>)
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	3301      	adds	r3, #1
 800385e:	61fb      	str	r3, [r7, #28]
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	2b0f      	cmp	r3, #15
 8003864:	f67f aea2 	bls.w	80035ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003868:	bf00      	nop
 800386a:	bf00      	nop
 800386c:	3724      	adds	r7, #36	; 0x24
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40023800 	.word	0x40023800
 800387c:	40013800 	.word	0x40013800
 8003880:	40020000 	.word	0x40020000
 8003884:	40020400 	.word	0x40020400
 8003888:	40020800 	.word	0x40020800
 800388c:	40020c00 	.word	0x40020c00
 8003890:	40021000 	.word	0x40021000
 8003894:	40013c00 	.word	0x40013c00

08003898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	807b      	strh	r3, [r7, #2]
 80038a4:	4613      	mov	r3, r2
 80038a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038a8:	787b      	ldrb	r3, [r7, #1]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ae:	887a      	ldrh	r2, [r7, #2]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038b4:	e003      	b.n	80038be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038b6:	887b      	ldrh	r3, [r7, #2]
 80038b8:	041a      	lsls	r2, r3, #16
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	619a      	str	r2, [r3, #24]
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
	...

080038cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e12b      	b.n	8003b36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fe ff3c 	bl	8002770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2224      	movs	r2, #36	; 0x24
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800391e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800392e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003930:	f001 fe50 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 8003934:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4a81      	ldr	r2, [pc, #516]	; (8003b40 <HAL_I2C_Init+0x274>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d807      	bhi.n	8003950 <HAL_I2C_Init+0x84>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4a80      	ldr	r2, [pc, #512]	; (8003b44 <HAL_I2C_Init+0x278>)
 8003944:	4293      	cmp	r3, r2
 8003946:	bf94      	ite	ls
 8003948:	2301      	movls	r3, #1
 800394a:	2300      	movhi	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	e006      	b.n	800395e <HAL_I2C_Init+0x92>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4a7d      	ldr	r2, [pc, #500]	; (8003b48 <HAL_I2C_Init+0x27c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	bf94      	ite	ls
 8003958:	2301      	movls	r3, #1
 800395a:	2300      	movhi	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e0e7      	b.n	8003b36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a78      	ldr	r2, [pc, #480]	; (8003b4c <HAL_I2C_Init+0x280>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	0c9b      	lsrs	r3, r3, #18
 8003970:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	430a      	orrs	r2, r1
 8003984:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	4a6a      	ldr	r2, [pc, #424]	; (8003b40 <HAL_I2C_Init+0x274>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d802      	bhi.n	80039a0 <HAL_I2C_Init+0xd4>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	3301      	adds	r3, #1
 800399e:	e009      	b.n	80039b4 <HAL_I2C_Init+0xe8>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039a6:	fb02 f303 	mul.w	r3, r2, r3
 80039aa:	4a69      	ldr	r2, [pc, #420]	; (8003b50 <HAL_I2C_Init+0x284>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	099b      	lsrs	r3, r3, #6
 80039b2:	3301      	adds	r3, #1
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6812      	ldr	r2, [r2, #0]
 80039b8:	430b      	orrs	r3, r1
 80039ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	495c      	ldr	r1, [pc, #368]	; (8003b40 <HAL_I2C_Init+0x274>)
 80039d0:	428b      	cmp	r3, r1
 80039d2:	d819      	bhi.n	8003a08 <HAL_I2C_Init+0x13c>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1e59      	subs	r1, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	fbb1 f3f3 	udiv	r3, r1, r3
 80039e2:	1c59      	adds	r1, r3, #1
 80039e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039e8:	400b      	ands	r3, r1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <HAL_I2C_Init+0x138>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1e59      	subs	r1, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80039fc:	3301      	adds	r3, #1
 80039fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a02:	e051      	b.n	8003aa8 <HAL_I2C_Init+0x1dc>
 8003a04:	2304      	movs	r3, #4
 8003a06:	e04f      	b.n	8003aa8 <HAL_I2C_Init+0x1dc>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d111      	bne.n	8003a34 <HAL_I2C_Init+0x168>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	1e58      	subs	r0, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6859      	ldr	r1, [r3, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	440b      	add	r3, r1
 8003a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a22:	3301      	adds	r3, #1
 8003a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bf0c      	ite	eq
 8003a2c:	2301      	moveq	r3, #1
 8003a2e:	2300      	movne	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	e012      	b.n	8003a5a <HAL_I2C_Init+0x18e>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1e58      	subs	r0, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6859      	ldr	r1, [r3, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	0099      	lsls	r1, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	bf0c      	ite	eq
 8003a54:	2301      	moveq	r3, #1
 8003a56:	2300      	movne	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_I2C_Init+0x196>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e022      	b.n	8003aa8 <HAL_I2C_Init+0x1dc>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10e      	bne.n	8003a88 <HAL_I2C_Init+0x1bc>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1e58      	subs	r0, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6859      	ldr	r1, [r3, #4]
 8003a72:	460b      	mov	r3, r1
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	440b      	add	r3, r1
 8003a78:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a86:	e00f      	b.n	8003aa8 <HAL_I2C_Init+0x1dc>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	1e58      	subs	r0, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6859      	ldr	r1, [r3, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	0099      	lsls	r1, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	6809      	ldr	r1, [r1, #0]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69da      	ldr	r2, [r3, #28]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ad6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6911      	ldr	r1, [r2, #16]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68d2      	ldr	r2, [r2, #12]
 8003ae2:	4311      	orrs	r1, r2
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695a      	ldr	r2, [r3, #20]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	000186a0 	.word	0x000186a0
 8003b44:	001e847f 	.word	0x001e847f
 8003b48:	003d08ff 	.word	0x003d08ff
 8003b4c:	431bde83 	.word	0x431bde83
 8003b50:	10624dd3 	.word	0x10624dd3

08003b54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	607a      	str	r2, [r7, #4]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	460b      	mov	r3, r1
 8003b62:	817b      	strh	r3, [r7, #10]
 8003b64:	4613      	mov	r3, r2
 8003b66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b68:	f7ff f86e 	bl	8002c48 <HAL_GetTick>
 8003b6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b20      	cmp	r3, #32
 8003b78:	f040 80e0 	bne.w	8003d3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	2319      	movs	r3, #25
 8003b82:	2201      	movs	r2, #1
 8003b84:	4970      	ldr	r1, [pc, #448]	; (8003d48 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 ff16 	bl	80049b8 <I2C_WaitOnFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b92:	2302      	movs	r3, #2
 8003b94:	e0d3      	b.n	8003d3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_I2C_Master_Transmit+0x50>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e0cc      	b.n	8003d3e <HAL_I2C_Master_Transmit+0x1ea>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d007      	beq.n	8003bca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 0201 	orr.w	r2, r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2221      	movs	r2, #33	; 0x21
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2210      	movs	r2, #16
 8003be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	893a      	ldrh	r2, [r7, #8]
 8003bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4a50      	ldr	r2, [pc, #320]	; (8003d4c <HAL_I2C_Master_Transmit+0x1f8>)
 8003c0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c0c:	8979      	ldrh	r1, [r7, #10]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	6a3a      	ldr	r2, [r7, #32]
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 fcea 	bl	80045ec <I2C_MasterRequestWrite>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e08d      	b.n	8003d3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c22:	2300      	movs	r3, #0
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c38:	e066      	b.n	8003d08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	6a39      	ldr	r1, [r7, #32]
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 ff90 	bl	8004b64 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00d      	beq.n	8003c66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d107      	bne.n	8003c62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e06b      	b.n	8003d3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	781a      	ldrb	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d11b      	bne.n	8003cdc <HAL_I2C_Master_Transmit+0x188>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d017      	beq.n	8003cdc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	781a      	ldrb	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	6a39      	ldr	r1, [r7, #32]
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 ff80 	bl	8004be6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00d      	beq.n	8003d08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d107      	bne.n	8003d04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e01a      	b.n	8003d3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d194      	bne.n	8003c3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e000      	b.n	8003d3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d3c:	2302      	movs	r3, #2
  }
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	00100002 	.word	0x00100002
 8003d4c:	ffff0000 	.word	0xffff0000

08003d50 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08c      	sub	sp, #48	; 0x30
 8003d54:	af02      	add	r7, sp, #8
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	607a      	str	r2, [r7, #4]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	817b      	strh	r3, [r7, #10]
 8003d60:	4613      	mov	r3, r2
 8003d62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d64:	f7fe ff70 	bl	8002c48 <HAL_GetTick>
 8003d68:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b20      	cmp	r3, #32
 8003d74:	f040 820b 	bne.w	800418e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	2319      	movs	r3, #25
 8003d7e:	2201      	movs	r2, #1
 8003d80:	497c      	ldr	r1, [pc, #496]	; (8003f74 <HAL_I2C_Master_Receive+0x224>)
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 fe18 	bl	80049b8 <I2C_WaitOnFlagUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e1fe      	b.n	8004190 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_I2C_Master_Receive+0x50>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e1f7      	b.n	8004190 <HAL_I2C_Master_Receive+0x440>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d007      	beq.n	8003dc6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0201 	orr.w	r2, r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2222      	movs	r2, #34	; 0x22
 8003dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2210      	movs	r2, #16
 8003de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	893a      	ldrh	r2, [r7, #8]
 8003df6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4a5c      	ldr	r2, [pc, #368]	; (8003f78 <HAL_I2C_Master_Receive+0x228>)
 8003e06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e08:	8979      	ldrh	r1, [r7, #10]
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 fc6e 	bl	80046f0 <I2C_MasterRequestRead>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e1b8      	b.n	8004190 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d113      	bne.n	8003e4e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e26:	2300      	movs	r3, #0
 8003e28:	623b      	str	r3, [r7, #32]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	623b      	str	r3, [r7, #32]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	623b      	str	r3, [r7, #32]
 8003e3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	e18c      	b.n	8004168 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d11b      	bne.n	8003e8e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	61fb      	str	r3, [r7, #28]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	61fb      	str	r3, [r7, #28]
 8003e7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	e16c      	b.n	8004168 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d11b      	bne.n	8003ece <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61bb      	str	r3, [r7, #24]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	61bb      	str	r3, [r7, #24]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	61bb      	str	r3, [r7, #24]
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	e14c      	b.n	8004168 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003edc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ede:	2300      	movs	r3, #0
 8003ee0:	617b      	str	r3, [r7, #20]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ef4:	e138      	b.n	8004168 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	f200 80f1 	bhi.w	80040e2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d123      	bne.n	8003f50 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 feab 	bl	8004c68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e139      	b.n	8004190 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f4e:	e10b      	b.n	8004168 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d14e      	bne.n	8003ff6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5e:	2200      	movs	r2, #0
 8003f60:	4906      	ldr	r1, [pc, #24]	; (8003f7c <HAL_I2C_Master_Receive+0x22c>)
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 fd28 	bl	80049b8 <I2C_WaitOnFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d008      	beq.n	8003f80 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e10e      	b.n	8004190 <HAL_I2C_Master_Receive+0x440>
 8003f72:	bf00      	nop
 8003f74:	00100002 	.word	0x00100002
 8003f78:	ffff0000 	.word	0xffff0000
 8003f7c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ff4:	e0b8      	b.n	8004168 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	4966      	ldr	r1, [pc, #408]	; (8004198 <HAL_I2C_Master_Receive+0x448>)
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 fcd9 	bl	80049b8 <I2C_WaitOnFlagUntilTimeout>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e0bf      	b.n	8004190 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800401e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691a      	ldr	r2, [r3, #16]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	2200      	movs	r2, #0
 800405a:	494f      	ldr	r1, [pc, #316]	; (8004198 <HAL_I2C_Master_Receive+0x448>)
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 fcab 	bl	80049b8 <I2C_WaitOnFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e091      	b.n	8004190 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800407a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691a      	ldr	r2, [r3, #16]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040e0:	e042      	b.n	8004168 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fdbe 	bl	8004c68 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e04c      	b.n	8004190 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b04      	cmp	r3, #4
 8004134:	d118      	bne.n	8004168 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004152:	3b01      	subs	r3, #1
 8004154:	b29a      	uxth	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416c:	2b00      	cmp	r3, #0
 800416e:	f47f aec2 	bne.w	8003ef6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2220      	movs	r2, #32
 8004176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	e000      	b.n	8004190 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800418e:	2302      	movs	r3, #2
  }
}
 8004190:	4618      	mov	r0, r3
 8004192:	3728      	adds	r7, #40	; 0x28
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	00010004 	.word	0x00010004

0800419c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	4608      	mov	r0, r1
 80041a6:	4611      	mov	r1, r2
 80041a8:	461a      	mov	r2, r3
 80041aa:	4603      	mov	r3, r0
 80041ac:	817b      	strh	r3, [r7, #10]
 80041ae:	460b      	mov	r3, r1
 80041b0:	813b      	strh	r3, [r7, #8]
 80041b2:	4613      	mov	r3, r2
 80041b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041b6:	f7fe fd47 	bl	8002c48 <HAL_GetTick>
 80041ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b20      	cmp	r3, #32
 80041c6:	f040 80d9 	bne.w	800437c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	2319      	movs	r3, #25
 80041d0:	2201      	movs	r2, #1
 80041d2:	496d      	ldr	r1, [pc, #436]	; (8004388 <HAL_I2C_Mem_Write+0x1ec>)
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 fbef 	bl	80049b8 <I2C_WaitOnFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80041e0:	2302      	movs	r3, #2
 80041e2:	e0cc      	b.n	800437e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <HAL_I2C_Mem_Write+0x56>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e0c5      	b.n	800437e <HAL_I2C_Mem_Write+0x1e2>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b01      	cmp	r3, #1
 8004206:	d007      	beq.n	8004218 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004226:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2221      	movs	r2, #33	; 0x21
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2240      	movs	r2, #64	; 0x40
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a3a      	ldr	r2, [r7, #32]
 8004242:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004248:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4a4d      	ldr	r2, [pc, #308]	; (800438c <HAL_I2C_Mem_Write+0x1f0>)
 8004258:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800425a:	88f8      	ldrh	r0, [r7, #6]
 800425c:	893a      	ldrh	r2, [r7, #8]
 800425e:	8979      	ldrh	r1, [r7, #10]
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	9301      	str	r3, [sp, #4]
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	4603      	mov	r3, r0
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 fb0e 	bl	800488c <I2C_RequestMemoryWrite>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d052      	beq.n	800431c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e081      	b.n	800437e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 fc70 	bl	8004b64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00d      	beq.n	80042a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	2b04      	cmp	r3, #4
 8004290:	d107      	bne.n	80042a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e06b      	b.n	800437e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	781a      	ldrb	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d11b      	bne.n	800431c <HAL_I2C_Mem_Write+0x180>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d017      	beq.n	800431c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	781a      	ldrb	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1aa      	bne.n	800427a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 fc5c 	bl	8004be6 <I2C_WaitOnBTFFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00d      	beq.n	8004350 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	2b04      	cmp	r3, #4
 800433a:	d107      	bne.n	800434c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e016      	b.n	800437e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800435e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	e000      	b.n	800437e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800437c:	2302      	movs	r3, #2
  }
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	00100002 	.word	0x00100002
 800438c:	ffff0000 	.word	0xffff0000

08004390 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08a      	sub	sp, #40	; 0x28
 8004394:	af02      	add	r7, sp, #8
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	607a      	str	r2, [r7, #4]
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	460b      	mov	r3, r1
 800439e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80043a0:	f7fe fc52 	bl	8002c48 <HAL_GetTick>
 80043a4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b20      	cmp	r3, #32
 80043b4:	f040 8111 	bne.w	80045da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	2319      	movs	r3, #25
 80043be:	2201      	movs	r2, #1
 80043c0:	4988      	ldr	r1, [pc, #544]	; (80045e4 <HAL_I2C_IsDeviceReady+0x254>)
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 faf8 	bl	80049b8 <I2C_WaitOnFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80043ce:	2302      	movs	r3, #2
 80043d0:	e104      	b.n	80045dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <HAL_I2C_IsDeviceReady+0x50>
 80043dc:	2302      	movs	r3, #2
 80043de:	e0fd      	b.n	80045dc <HAL_I2C_IsDeviceReady+0x24c>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d007      	beq.n	8004406 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f042 0201 	orr.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004414:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2224      	movs	r2, #36	; 0x24
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4a70      	ldr	r2, [pc, #448]	; (80045e8 <HAL_I2C_IsDeviceReady+0x258>)
 8004428:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004438:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2200      	movs	r2, #0
 8004442:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 fab6 	bl	80049b8 <I2C_WaitOnFlagUntilTimeout>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00d      	beq.n	800446e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004460:	d103      	bne.n	800446a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004468:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e0b6      	b.n	80045dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800446e:	897b      	ldrh	r3, [r7, #10]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800447c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800447e:	f7fe fbe3 	bl	8002c48 <HAL_GetTick>
 8004482:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b02      	cmp	r3, #2
 8004490:	bf0c      	ite	eq
 8004492:	2301      	moveq	r3, #1
 8004494:	2300      	movne	r3, #0
 8004496:	b2db      	uxtb	r3, r3
 8004498:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a8:	bf0c      	ite	eq
 80044aa:	2301      	moveq	r3, #1
 80044ac:	2300      	movne	r3, #0
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80044b2:	e025      	b.n	8004500 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044b4:	f7fe fbc8 	bl	8002c48 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d302      	bcc.n	80044ca <HAL_I2C_IsDeviceReady+0x13a>
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d103      	bne.n	80044d2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	22a0      	movs	r2, #160	; 0xa0
 80044ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b02      	cmp	r3, #2
 80044de:	bf0c      	ite	eq
 80044e0:	2301      	moveq	r3, #1
 80044e2:	2300      	movne	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f6:	bf0c      	ite	eq
 80044f8:	2301      	moveq	r3, #1
 80044fa:	2300      	movne	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2ba0      	cmp	r3, #160	; 0xa0
 800450a:	d005      	beq.n	8004518 <HAL_I2C_IsDeviceReady+0x188>
 800450c:	7dfb      	ldrb	r3, [r7, #23]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d102      	bne.n	8004518 <HAL_I2C_IsDeviceReady+0x188>
 8004512:	7dbb      	ldrb	r3, [r7, #22]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0cd      	beq.n	80044b4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b02      	cmp	r3, #2
 800452c:	d129      	bne.n	8004582 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800453e:	2300      	movs	r3, #0
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	613b      	str	r3, [r7, #16]
 8004552:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	2319      	movs	r3, #25
 800455a:	2201      	movs	r2, #1
 800455c:	4921      	ldr	r1, [pc, #132]	; (80045e4 <HAL_I2C_IsDeviceReady+0x254>)
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 fa2a 	bl	80049b8 <I2C_WaitOnFlagUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e036      	b.n	80045dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	e02c      	b.n	80045dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004590:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800459a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	2319      	movs	r3, #25
 80045a2:	2201      	movs	r2, #1
 80045a4:	490f      	ldr	r1, [pc, #60]	; (80045e4 <HAL_I2C_IsDeviceReady+0x254>)
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 fa06 	bl	80049b8 <I2C_WaitOnFlagUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e012      	b.n	80045dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	3301      	adds	r3, #1
 80045ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	f4ff af32 	bcc.w	800442a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e000      	b.n	80045dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80045da:	2302      	movs	r3, #2
  }
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3720      	adds	r7, #32
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	00100002 	.word	0x00100002
 80045e8:	ffff0000 	.word	0xffff0000

080045ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	607a      	str	r2, [r7, #4]
 80045f6:	603b      	str	r3, [r7, #0]
 80045f8:	460b      	mov	r3, r1
 80045fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2b08      	cmp	r3, #8
 8004606:	d006      	beq.n	8004616 <I2C_MasterRequestWrite+0x2a>
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d003      	beq.n	8004616 <I2C_MasterRequestWrite+0x2a>
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004614:	d108      	bne.n	8004628 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	e00b      	b.n	8004640 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	2b12      	cmp	r3, #18
 800462e:	d107      	bne.n	8004640 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800463e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f9b3 	bl	80049b8 <I2C_WaitOnFlagUntilTimeout>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00d      	beq.n	8004674 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004666:	d103      	bne.n	8004670 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800466e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e035      	b.n	80046e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800467c:	d108      	bne.n	8004690 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800467e:	897b      	ldrh	r3, [r7, #10]
 8004680:	b2db      	uxtb	r3, r3
 8004682:	461a      	mov	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800468c:	611a      	str	r2, [r3, #16]
 800468e:	e01b      	b.n	80046c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004690:	897b      	ldrh	r3, [r7, #10]
 8004692:	11db      	asrs	r3, r3, #7
 8004694:	b2db      	uxtb	r3, r3
 8004696:	f003 0306 	and.w	r3, r3, #6
 800469a:	b2db      	uxtb	r3, r3
 800469c:	f063 030f 	orn	r3, r3, #15
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	490e      	ldr	r1, [pc, #56]	; (80046e8 <I2C_MasterRequestWrite+0xfc>)
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 f9d9 	bl	8004a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e010      	b.n	80046e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80046be:	897b      	ldrh	r3, [r7, #10]
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	4907      	ldr	r1, [pc, #28]	; (80046ec <I2C_MasterRequestWrite+0x100>)
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f9c9 	bl	8004a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	00010008 	.word	0x00010008
 80046ec:	00010002 	.word	0x00010002

080046f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	607a      	str	r2, [r7, #4]
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	460b      	mov	r3, r1
 80046fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004704:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004714:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b08      	cmp	r3, #8
 800471a:	d006      	beq.n	800472a <I2C_MasterRequestRead+0x3a>
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d003      	beq.n	800472a <I2C_MasterRequestRead+0x3a>
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004728:	d108      	bne.n	800473c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	e00b      	b.n	8004754 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	2b11      	cmp	r3, #17
 8004742:	d107      	bne.n	8004754 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004752:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f929 	bl	80049b8 <I2C_WaitOnFlagUntilTimeout>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00d      	beq.n	8004788 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800477a:	d103      	bne.n	8004784 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004782:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e079      	b.n	800487c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004790:	d108      	bne.n	80047a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004792:	897b      	ldrh	r3, [r7, #10]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	b2da      	uxtb	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	611a      	str	r2, [r3, #16]
 80047a2:	e05f      	b.n	8004864 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047a4:	897b      	ldrh	r3, [r7, #10]
 80047a6:	11db      	asrs	r3, r3, #7
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	f003 0306 	and.w	r3, r3, #6
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	f063 030f 	orn	r3, r3, #15
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	4930      	ldr	r1, [pc, #192]	; (8004884 <I2C_MasterRequestRead+0x194>)
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f94f 	bl	8004a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e054      	b.n	800487c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047d2:	897b      	ldrh	r3, [r7, #10]
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	4929      	ldr	r1, [pc, #164]	; (8004888 <I2C_MasterRequestRead+0x198>)
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 f93f 	bl	8004a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e044      	b.n	800487c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047f2:	2300      	movs	r3, #0
 80047f4:	613b      	str	r3, [r7, #16]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	613b      	str	r3, [r7, #16]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004816:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 f8c7 	bl	80049b8 <I2C_WaitOnFlagUntilTimeout>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00d      	beq.n	800484c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800483e:	d103      	bne.n	8004848 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004846:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e017      	b.n	800487c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800484c:	897b      	ldrh	r3, [r7, #10]
 800484e:	11db      	asrs	r3, r3, #7
 8004850:	b2db      	uxtb	r3, r3
 8004852:	f003 0306 	and.w	r3, r3, #6
 8004856:	b2db      	uxtb	r3, r3
 8004858:	f063 030e 	orn	r3, r3, #14
 800485c:	b2da      	uxtb	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	4907      	ldr	r1, [pc, #28]	; (8004888 <I2C_MasterRequestRead+0x198>)
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 f8fb 	bl	8004a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	00010008 	.word	0x00010008
 8004888:	00010002 	.word	0x00010002

0800488c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af02      	add	r7, sp, #8
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	4608      	mov	r0, r1
 8004896:	4611      	mov	r1, r2
 8004898:	461a      	mov	r2, r3
 800489a:	4603      	mov	r3, r0
 800489c:	817b      	strh	r3, [r7, #10]
 800489e:	460b      	mov	r3, r1
 80048a0:	813b      	strh	r3, [r7, #8]
 80048a2:	4613      	mov	r3, r2
 80048a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	2200      	movs	r2, #0
 80048be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f878 	bl	80049b8 <I2C_WaitOnFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00d      	beq.n	80048ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048dc:	d103      	bne.n	80048e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e05f      	b.n	80049aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048ea:	897b      	ldrh	r3, [r7, #10]
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	461a      	mov	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	6a3a      	ldr	r2, [r7, #32]
 80048fe:	492d      	ldr	r1, [pc, #180]	; (80049b4 <I2C_RequestMemoryWrite+0x128>)
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 f8b0 	bl	8004a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e04c      	b.n	80049aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004910:	2300      	movs	r3, #0
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004928:	6a39      	ldr	r1, [r7, #32]
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 f91a 	bl	8004b64 <I2C_WaitOnTXEFlagUntilTimeout>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00d      	beq.n	8004952 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	2b04      	cmp	r3, #4
 800493c:	d107      	bne.n	800494e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800494c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e02b      	b.n	80049aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004952:	88fb      	ldrh	r3, [r7, #6]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d105      	bne.n	8004964 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004958:	893b      	ldrh	r3, [r7, #8]
 800495a:	b2da      	uxtb	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	611a      	str	r2, [r3, #16]
 8004962:	e021      	b.n	80049a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004964:	893b      	ldrh	r3, [r7, #8]
 8004966:	0a1b      	lsrs	r3, r3, #8
 8004968:	b29b      	uxth	r3, r3
 800496a:	b2da      	uxtb	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004974:	6a39      	ldr	r1, [r7, #32]
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 f8f4 	bl	8004b64 <I2C_WaitOnTXEFlagUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00d      	beq.n	800499e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	2b04      	cmp	r3, #4
 8004988:	d107      	bne.n	800499a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004998:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e005      	b.n	80049aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800499e:	893b      	ldrh	r3, [r7, #8]
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	00010002 	.word	0x00010002

080049b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	4613      	mov	r3, r2
 80049c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049c8:	e025      	b.n	8004a16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d0:	d021      	beq.n	8004a16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d2:	f7fe f939 	bl	8002c48 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d302      	bcc.n	80049e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d116      	bne.n	8004a16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	f043 0220 	orr.w	r2, r3, #32
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e023      	b.n	8004a5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	0c1b      	lsrs	r3, r3, #16
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d10d      	bne.n	8004a3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	43da      	mvns	r2, r3
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	bf0c      	ite	eq
 8004a32:	2301      	moveq	r3, #1
 8004a34:	2300      	movne	r3, #0
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	461a      	mov	r2, r3
 8004a3a:	e00c      	b.n	8004a56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	43da      	mvns	r2, r3
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	4013      	ands	r3, r2
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	bf0c      	ite	eq
 8004a4e:	2301      	moveq	r3, #1
 8004a50:	2300      	movne	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	461a      	mov	r2, r3
 8004a56:	79fb      	ldrb	r3, [r7, #7]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d0b6      	beq.n	80049ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b084      	sub	sp, #16
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	607a      	str	r2, [r7, #4]
 8004a72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a74:	e051      	b.n	8004b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a84:	d123      	bne.n	8004ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	f043 0204 	orr.w	r2, r3, #4
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e046      	b.n	8004b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad4:	d021      	beq.n	8004b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad6:	f7fe f8b7 	bl	8002c48 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d302      	bcc.n	8004aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d116      	bne.n	8004b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f043 0220 	orr.w	r2, r3, #32
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e020      	b.n	8004b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	0c1b      	lsrs	r3, r3, #16
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d10c      	bne.n	8004b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	43da      	mvns	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	bf14      	ite	ne
 8004b36:	2301      	movne	r3, #1
 8004b38:	2300      	moveq	r3, #0
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	e00b      	b.n	8004b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	43da      	mvns	r2, r3
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	bf14      	ite	ne
 8004b50:	2301      	movne	r3, #1
 8004b52:	2300      	moveq	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d18d      	bne.n	8004a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b70:	e02d      	b.n	8004bce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f000 f8ce 	bl	8004d14 <I2C_IsAcknowledgeFailed>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e02d      	b.n	8004bde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b88:	d021      	beq.n	8004bce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b8a:	f7fe f85d 	bl	8002c48 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d302      	bcc.n	8004ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d116      	bne.n	8004bce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	f043 0220 	orr.w	r2, r3, #32
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e007      	b.n	8004bde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd8:	2b80      	cmp	r3, #128	; 0x80
 8004bda:	d1ca      	bne.n	8004b72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bf2:	e02d      	b.n	8004c50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 f88d 	bl	8004d14 <I2C_IsAcknowledgeFailed>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e02d      	b.n	8004c60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0a:	d021      	beq.n	8004c50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0c:	f7fe f81c 	bl	8002c48 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d302      	bcc.n	8004c22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d116      	bne.n	8004c50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3c:	f043 0220 	orr.w	r2, r3, #32
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e007      	b.n	8004c60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d1ca      	bne.n	8004bf4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c74:	e042      	b.n	8004cfc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	2b10      	cmp	r3, #16
 8004c82:	d119      	bne.n	8004cb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f06f 0210 	mvn.w	r2, #16
 8004c8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2220      	movs	r2, #32
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e029      	b.n	8004d0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb8:	f7fd ffc6 	bl	8002c48 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d302      	bcc.n	8004cce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d116      	bne.n	8004cfc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce8:	f043 0220 	orr.w	r2, r3, #32
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e007      	b.n	8004d0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d06:	2b40      	cmp	r3, #64	; 0x40
 8004d08:	d1b5      	bne.n	8004c76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d2a:	d11b      	bne.n	8004d64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	f043 0204 	orr.w	r2, r3, #4
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e000      	b.n	8004d66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
	...

08004d74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e267      	b.n	8005256 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d075      	beq.n	8004e7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d92:	4b88      	ldr	r3, [pc, #544]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 030c 	and.w	r3, r3, #12
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d00c      	beq.n	8004db8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d9e:	4b85      	ldr	r3, [pc, #532]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	d112      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004daa:	4b82      	ldr	r3, [pc, #520]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004db2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004db6:	d10b      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db8:	4b7e      	ldr	r3, [pc, #504]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d05b      	beq.n	8004e7c <HAL_RCC_OscConfig+0x108>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d157      	bne.n	8004e7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e242      	b.n	8005256 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd8:	d106      	bne.n	8004de8 <HAL_RCC_OscConfig+0x74>
 8004dda:	4b76      	ldr	r3, [pc, #472]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a75      	ldr	r2, [pc, #468]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	e01d      	b.n	8004e24 <HAL_RCC_OscConfig+0xb0>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004df0:	d10c      	bne.n	8004e0c <HAL_RCC_OscConfig+0x98>
 8004df2:	4b70      	ldr	r3, [pc, #448]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a6f      	ldr	r2, [pc, #444]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	4b6d      	ldr	r3, [pc, #436]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a6c      	ldr	r2, [pc, #432]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e08:	6013      	str	r3, [r2, #0]
 8004e0a:	e00b      	b.n	8004e24 <HAL_RCC_OscConfig+0xb0>
 8004e0c:	4b69      	ldr	r3, [pc, #420]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a68      	ldr	r2, [pc, #416]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	4b66      	ldr	r3, [pc, #408]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a65      	ldr	r2, [pc, #404]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d013      	beq.n	8004e54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2c:	f7fd ff0c 	bl	8002c48 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e34:	f7fd ff08 	bl	8002c48 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b64      	cmp	r3, #100	; 0x64
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e207      	b.n	8005256 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e46:	4b5b      	ldr	r3, [pc, #364]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f0      	beq.n	8004e34 <HAL_RCC_OscConfig+0xc0>
 8004e52:	e014      	b.n	8004e7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e54:	f7fd fef8 	bl	8002c48 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e5c:	f7fd fef4 	bl	8002c48 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b64      	cmp	r3, #100	; 0x64
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e1f3      	b.n	8005256 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e6e:	4b51      	ldr	r3, [pc, #324]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f0      	bne.n	8004e5c <HAL_RCC_OscConfig+0xe8>
 8004e7a:	e000      	b.n	8004e7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d063      	beq.n	8004f52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e8a:	4b4a      	ldr	r3, [pc, #296]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00b      	beq.n	8004eae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e96:	4b47      	ldr	r3, [pc, #284]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e9e:	2b08      	cmp	r3, #8
 8004ea0:	d11c      	bne.n	8004edc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ea2:	4b44      	ldr	r3, [pc, #272]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d116      	bne.n	8004edc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eae:	4b41      	ldr	r3, [pc, #260]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d005      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x152>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d001      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e1c7      	b.n	8005256 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec6:	4b3b      	ldr	r3, [pc, #236]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	4937      	ldr	r1, [pc, #220]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eda:	e03a      	b.n	8004f52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d020      	beq.n	8004f26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ee4:	4b34      	ldr	r3, [pc, #208]	; (8004fb8 <HAL_RCC_OscConfig+0x244>)
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eea:	f7fd fead 	bl	8002c48 <HAL_GetTick>
 8004eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ef0:	e008      	b.n	8004f04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ef2:	f7fd fea9 	bl	8002c48 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e1a8      	b.n	8005256 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f04:	4b2b      	ldr	r3, [pc, #172]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0f0      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f10:	4b28      	ldr	r3, [pc, #160]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	4925      	ldr	r1, [pc, #148]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	600b      	str	r3, [r1, #0]
 8004f24:	e015      	b.n	8004f52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f26:	4b24      	ldr	r3, [pc, #144]	; (8004fb8 <HAL_RCC_OscConfig+0x244>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2c:	f7fd fe8c 	bl	8002c48 <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f34:	f7fd fe88 	bl	8002c48 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e187      	b.n	8005256 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f46:	4b1b      	ldr	r3, [pc, #108]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f0      	bne.n	8004f34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d036      	beq.n	8004fcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d016      	beq.n	8004f94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f66:	4b15      	ldr	r3, [pc, #84]	; (8004fbc <HAL_RCC_OscConfig+0x248>)
 8004f68:	2201      	movs	r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f6c:	f7fd fe6c 	bl	8002c48 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f74:	f7fd fe68 	bl	8002c48 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e167      	b.n	8005256 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f86:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <HAL_RCC_OscConfig+0x240>)
 8004f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0f0      	beq.n	8004f74 <HAL_RCC_OscConfig+0x200>
 8004f92:	e01b      	b.n	8004fcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f94:	4b09      	ldr	r3, [pc, #36]	; (8004fbc <HAL_RCC_OscConfig+0x248>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f9a:	f7fd fe55 	bl	8002c48 <HAL_GetTick>
 8004f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fa0:	e00e      	b.n	8004fc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fa2:	f7fd fe51 	bl	8002c48 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d907      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e150      	b.n	8005256 <HAL_RCC_OscConfig+0x4e2>
 8004fb4:	40023800 	.word	0x40023800
 8004fb8:	42470000 	.word	0x42470000
 8004fbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc0:	4b88      	ldr	r3, [pc, #544]	; (80051e4 <HAL_RCC_OscConfig+0x470>)
 8004fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1ea      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 8097 	beq.w	8005108 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fde:	4b81      	ldr	r3, [pc, #516]	; (80051e4 <HAL_RCC_OscConfig+0x470>)
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10f      	bne.n	800500a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fea:	2300      	movs	r3, #0
 8004fec:	60bb      	str	r3, [r7, #8]
 8004fee:	4b7d      	ldr	r3, [pc, #500]	; (80051e4 <HAL_RCC_OscConfig+0x470>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	4a7c      	ldr	r2, [pc, #496]	; (80051e4 <HAL_RCC_OscConfig+0x470>)
 8004ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8004ffa:	4b7a      	ldr	r3, [pc, #488]	; (80051e4 <HAL_RCC_OscConfig+0x470>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005002:	60bb      	str	r3, [r7, #8]
 8005004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005006:	2301      	movs	r3, #1
 8005008:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800500a:	4b77      	ldr	r3, [pc, #476]	; (80051e8 <HAL_RCC_OscConfig+0x474>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005012:	2b00      	cmp	r3, #0
 8005014:	d118      	bne.n	8005048 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005016:	4b74      	ldr	r3, [pc, #464]	; (80051e8 <HAL_RCC_OscConfig+0x474>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a73      	ldr	r2, [pc, #460]	; (80051e8 <HAL_RCC_OscConfig+0x474>)
 800501c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005022:	f7fd fe11 	bl	8002c48 <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005028:	e008      	b.n	800503c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800502a:	f7fd fe0d 	bl	8002c48 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e10c      	b.n	8005256 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800503c:	4b6a      	ldr	r3, [pc, #424]	; (80051e8 <HAL_RCC_OscConfig+0x474>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0f0      	beq.n	800502a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d106      	bne.n	800505e <HAL_RCC_OscConfig+0x2ea>
 8005050:	4b64      	ldr	r3, [pc, #400]	; (80051e4 <HAL_RCC_OscConfig+0x470>)
 8005052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005054:	4a63      	ldr	r2, [pc, #396]	; (80051e4 <HAL_RCC_OscConfig+0x470>)
 8005056:	f043 0301 	orr.w	r3, r3, #1
 800505a:	6713      	str	r3, [r2, #112]	; 0x70
 800505c:	e01c      	b.n	8005098 <HAL_RCC_OscConfig+0x324>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	2b05      	cmp	r3, #5
 8005064:	d10c      	bne.n	8005080 <HAL_RCC_OscConfig+0x30c>
 8005066:	4b5f      	ldr	r3, [pc, #380]	; (80051e4 <HAL_RCC_OscConfig+0x470>)
 8005068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506a:	4a5e      	ldr	r2, [pc, #376]	; (80051e4 <HAL_RCC_OscConfig+0x470>)
 800506c:	f043 0304 	orr.w	r3, r3, #4
 8005070:	6713      	str	r3, [r2, #112]	; 0x70
 8005072:	4b5c      	ldr	r3, [pc, #368]	; (80051e4 <HAL_RCC_OscConfig+0x470>)
 8005074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005076:	4a5b      	ldr	r2, [pc, #364]	; (80051e4 <HAL_RCC_OscConfig+0x470>)
 8005078:	f043 0301 	orr.w	r3, r3, #1
 800507c:	6713      	str	r3, [r2, #112]	; 0x70
 800507e:	e00b      	b.n	8005098 <HAL_RCC_OscConfig+0x324>
 8005080:	4b58      	ldr	r3, [pc, #352]	; (80051e4 <HAL_RCC_OscConfig+0x470>)
 8005082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005084:	4a57      	ldr	r2, [pc, #348]	; (80051e4 <HAL_RCC_OscConfig+0x470>)
 8005086:	f023 0301 	bic.w	r3, r3, #1
 800508a:	6713      	str	r3, [r2, #112]	; 0x70
 800508c:	4b55      	ldr	r3, [pc, #340]	; (80051e4 <HAL_RCC_OscConfig+0x470>)
 800508e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005090:	4a54      	ldr	r2, [pc, #336]	; (80051e4 <HAL_RCC_OscConfig+0x470>)
 8005092:	f023 0304 	bic.w	r3, r3, #4
 8005096:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d015      	beq.n	80050cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a0:	f7fd fdd2 	bl	8002c48 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a6:	e00a      	b.n	80050be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050a8:	f7fd fdce 	bl	8002c48 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e0cb      	b.n	8005256 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050be:	4b49      	ldr	r3, [pc, #292]	; (80051e4 <HAL_RCC_OscConfig+0x470>)
 80050c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0ee      	beq.n	80050a8 <HAL_RCC_OscConfig+0x334>
 80050ca:	e014      	b.n	80050f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050cc:	f7fd fdbc 	bl	8002c48 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050d2:	e00a      	b.n	80050ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050d4:	f7fd fdb8 	bl	8002c48 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e0b5      	b.n	8005256 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ea:	4b3e      	ldr	r3, [pc, #248]	; (80051e4 <HAL_RCC_OscConfig+0x470>)
 80050ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1ee      	bne.n	80050d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d105      	bne.n	8005108 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050fc:	4b39      	ldr	r3, [pc, #228]	; (80051e4 <HAL_RCC_OscConfig+0x470>)
 80050fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005100:	4a38      	ldr	r2, [pc, #224]	; (80051e4 <HAL_RCC_OscConfig+0x470>)
 8005102:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005106:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 80a1 	beq.w	8005254 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005112:	4b34      	ldr	r3, [pc, #208]	; (80051e4 <HAL_RCC_OscConfig+0x470>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 030c 	and.w	r3, r3, #12
 800511a:	2b08      	cmp	r3, #8
 800511c:	d05c      	beq.n	80051d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	2b02      	cmp	r3, #2
 8005124:	d141      	bne.n	80051aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005126:	4b31      	ldr	r3, [pc, #196]	; (80051ec <HAL_RCC_OscConfig+0x478>)
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800512c:	f7fd fd8c 	bl	8002c48 <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005132:	e008      	b.n	8005146 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005134:	f7fd fd88 	bl	8002c48 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e087      	b.n	8005256 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005146:	4b27      	ldr	r3, [pc, #156]	; (80051e4 <HAL_RCC_OscConfig+0x470>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1f0      	bne.n	8005134 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69da      	ldr	r2, [r3, #28]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	019b      	lsls	r3, r3, #6
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005168:	085b      	lsrs	r3, r3, #1
 800516a:	3b01      	subs	r3, #1
 800516c:	041b      	lsls	r3, r3, #16
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	061b      	lsls	r3, r3, #24
 8005176:	491b      	ldr	r1, [pc, #108]	; (80051e4 <HAL_RCC_OscConfig+0x470>)
 8005178:	4313      	orrs	r3, r2
 800517a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800517c:	4b1b      	ldr	r3, [pc, #108]	; (80051ec <HAL_RCC_OscConfig+0x478>)
 800517e:	2201      	movs	r2, #1
 8005180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005182:	f7fd fd61 	bl	8002c48 <HAL_GetTick>
 8005186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005188:	e008      	b.n	800519c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800518a:	f7fd fd5d 	bl	8002c48 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d901      	bls.n	800519c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e05c      	b.n	8005256 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800519c:	4b11      	ldr	r3, [pc, #68]	; (80051e4 <HAL_RCC_OscConfig+0x470>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0f0      	beq.n	800518a <HAL_RCC_OscConfig+0x416>
 80051a8:	e054      	b.n	8005254 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051aa:	4b10      	ldr	r3, [pc, #64]	; (80051ec <HAL_RCC_OscConfig+0x478>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b0:	f7fd fd4a 	bl	8002c48 <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051b8:	f7fd fd46 	bl	8002c48 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e045      	b.n	8005256 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ca:	4b06      	ldr	r3, [pc, #24]	; (80051e4 <HAL_RCC_OscConfig+0x470>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1f0      	bne.n	80051b8 <HAL_RCC_OscConfig+0x444>
 80051d6:	e03d      	b.n	8005254 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d107      	bne.n	80051f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e038      	b.n	8005256 <HAL_RCC_OscConfig+0x4e2>
 80051e4:	40023800 	.word	0x40023800
 80051e8:	40007000 	.word	0x40007000
 80051ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051f0:	4b1b      	ldr	r3, [pc, #108]	; (8005260 <HAL_RCC_OscConfig+0x4ec>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d028      	beq.n	8005250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005208:	429a      	cmp	r2, r3
 800520a:	d121      	bne.n	8005250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005216:	429a      	cmp	r2, r3
 8005218:	d11a      	bne.n	8005250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005220:	4013      	ands	r3, r2
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005226:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005228:	4293      	cmp	r3, r2
 800522a:	d111      	bne.n	8005250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005236:	085b      	lsrs	r3, r3, #1
 8005238:	3b01      	subs	r3, #1
 800523a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800523c:	429a      	cmp	r2, r3
 800523e:	d107      	bne.n	8005250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800524c:	429a      	cmp	r2, r3
 800524e:	d001      	beq.n	8005254 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e000      	b.n	8005256 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3718      	adds	r7, #24
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	40023800 	.word	0x40023800

08005264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0cc      	b.n	8005412 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005278:	4b68      	ldr	r3, [pc, #416]	; (800541c <HAL_RCC_ClockConfig+0x1b8>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	429a      	cmp	r2, r3
 8005284:	d90c      	bls.n	80052a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005286:	4b65      	ldr	r3, [pc, #404]	; (800541c <HAL_RCC_ClockConfig+0x1b8>)
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	b2d2      	uxtb	r2, r2
 800528c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800528e:	4b63      	ldr	r3, [pc, #396]	; (800541c <HAL_RCC_ClockConfig+0x1b8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	429a      	cmp	r2, r3
 800529a:	d001      	beq.n	80052a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e0b8      	b.n	8005412 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d020      	beq.n	80052ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052b8:	4b59      	ldr	r3, [pc, #356]	; (8005420 <HAL_RCC_ClockConfig+0x1bc>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	4a58      	ldr	r2, [pc, #352]	; (8005420 <HAL_RCC_ClockConfig+0x1bc>)
 80052be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d005      	beq.n	80052dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052d0:	4b53      	ldr	r3, [pc, #332]	; (8005420 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	4a52      	ldr	r2, [pc, #328]	; (8005420 <HAL_RCC_ClockConfig+0x1bc>)
 80052d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052dc:	4b50      	ldr	r3, [pc, #320]	; (8005420 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	494d      	ldr	r1, [pc, #308]	; (8005420 <HAL_RCC_ClockConfig+0x1bc>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d044      	beq.n	8005384 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d107      	bne.n	8005312 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005302:	4b47      	ldr	r3, [pc, #284]	; (8005420 <HAL_RCC_ClockConfig+0x1bc>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d119      	bne.n	8005342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e07f      	b.n	8005412 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2b02      	cmp	r3, #2
 8005318:	d003      	beq.n	8005322 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800531e:	2b03      	cmp	r3, #3
 8005320:	d107      	bne.n	8005332 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005322:	4b3f      	ldr	r3, [pc, #252]	; (8005420 <HAL_RCC_ClockConfig+0x1bc>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d109      	bne.n	8005342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e06f      	b.n	8005412 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005332:	4b3b      	ldr	r3, [pc, #236]	; (8005420 <HAL_RCC_ClockConfig+0x1bc>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e067      	b.n	8005412 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005342:	4b37      	ldr	r3, [pc, #220]	; (8005420 <HAL_RCC_ClockConfig+0x1bc>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f023 0203 	bic.w	r2, r3, #3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	4934      	ldr	r1, [pc, #208]	; (8005420 <HAL_RCC_ClockConfig+0x1bc>)
 8005350:	4313      	orrs	r3, r2
 8005352:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005354:	f7fd fc78 	bl	8002c48 <HAL_GetTick>
 8005358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800535a:	e00a      	b.n	8005372 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800535c:	f7fd fc74 	bl	8002c48 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	f241 3288 	movw	r2, #5000	; 0x1388
 800536a:	4293      	cmp	r3, r2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e04f      	b.n	8005412 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005372:	4b2b      	ldr	r3, [pc, #172]	; (8005420 <HAL_RCC_ClockConfig+0x1bc>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f003 020c 	and.w	r2, r3, #12
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	429a      	cmp	r2, r3
 8005382:	d1eb      	bne.n	800535c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005384:	4b25      	ldr	r3, [pc, #148]	; (800541c <HAL_RCC_ClockConfig+0x1b8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d20c      	bcs.n	80053ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005392:	4b22      	ldr	r3, [pc, #136]	; (800541c <HAL_RCC_ClockConfig+0x1b8>)
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800539a:	4b20      	ldr	r3, [pc, #128]	; (800541c <HAL_RCC_ClockConfig+0x1b8>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d001      	beq.n	80053ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e032      	b.n	8005412 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d008      	beq.n	80053ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053b8:	4b19      	ldr	r3, [pc, #100]	; (8005420 <HAL_RCC_ClockConfig+0x1bc>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	4916      	ldr	r1, [pc, #88]	; (8005420 <HAL_RCC_ClockConfig+0x1bc>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d009      	beq.n	80053ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053d6:	4b12      	ldr	r3, [pc, #72]	; (8005420 <HAL_RCC_ClockConfig+0x1bc>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	490e      	ldr	r1, [pc, #56]	; (8005420 <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053ea:	f000 f821 	bl	8005430 <HAL_RCC_GetSysClockFreq>
 80053ee:	4602      	mov	r2, r0
 80053f0:	4b0b      	ldr	r3, [pc, #44]	; (8005420 <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	091b      	lsrs	r3, r3, #4
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	490a      	ldr	r1, [pc, #40]	; (8005424 <HAL_RCC_ClockConfig+0x1c0>)
 80053fc:	5ccb      	ldrb	r3, [r1, r3]
 80053fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005402:	4a09      	ldr	r2, [pc, #36]	; (8005428 <HAL_RCC_ClockConfig+0x1c4>)
 8005404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005406:	4b09      	ldr	r3, [pc, #36]	; (800542c <HAL_RCC_ClockConfig+0x1c8>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4618      	mov	r0, r3
 800540c:	f7fd fad8 	bl	80029c0 <HAL_InitTick>

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	40023c00 	.word	0x40023c00
 8005420:	40023800 	.word	0x40023800
 8005424:	08007b78 	.word	0x08007b78
 8005428:	2000000c 	.word	0x2000000c
 800542c:	20000010 	.word	0x20000010

08005430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005434:	b090      	sub	sp, #64	; 0x40
 8005436:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	637b      	str	r3, [r7, #52]	; 0x34
 800543c:	2300      	movs	r3, #0
 800543e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005440:	2300      	movs	r3, #0
 8005442:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005448:	4b59      	ldr	r3, [pc, #356]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f003 030c 	and.w	r3, r3, #12
 8005450:	2b08      	cmp	r3, #8
 8005452:	d00d      	beq.n	8005470 <HAL_RCC_GetSysClockFreq+0x40>
 8005454:	2b08      	cmp	r3, #8
 8005456:	f200 80a1 	bhi.w	800559c <HAL_RCC_GetSysClockFreq+0x16c>
 800545a:	2b00      	cmp	r3, #0
 800545c:	d002      	beq.n	8005464 <HAL_RCC_GetSysClockFreq+0x34>
 800545e:	2b04      	cmp	r3, #4
 8005460:	d003      	beq.n	800546a <HAL_RCC_GetSysClockFreq+0x3a>
 8005462:	e09b      	b.n	800559c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005464:	4b53      	ldr	r3, [pc, #332]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005466:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005468:	e09b      	b.n	80055a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800546a:	4b53      	ldr	r3, [pc, #332]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800546c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800546e:	e098      	b.n	80055a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005470:	4b4f      	ldr	r3, [pc, #316]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005478:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800547a:	4b4d      	ldr	r3, [pc, #308]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d028      	beq.n	80054d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005486:	4b4a      	ldr	r3, [pc, #296]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	099b      	lsrs	r3, r3, #6
 800548c:	2200      	movs	r2, #0
 800548e:	623b      	str	r3, [r7, #32]
 8005490:	627a      	str	r2, [r7, #36]	; 0x24
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005498:	2100      	movs	r1, #0
 800549a:	4b47      	ldr	r3, [pc, #284]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800549c:	fb03 f201 	mul.w	r2, r3, r1
 80054a0:	2300      	movs	r3, #0
 80054a2:	fb00 f303 	mul.w	r3, r0, r3
 80054a6:	4413      	add	r3, r2
 80054a8:	4a43      	ldr	r2, [pc, #268]	; (80055b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80054aa:	fba0 1202 	umull	r1, r2, r0, r2
 80054ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054b0:	460a      	mov	r2, r1
 80054b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80054b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054b6:	4413      	add	r3, r2
 80054b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054bc:	2200      	movs	r2, #0
 80054be:	61bb      	str	r3, [r7, #24]
 80054c0:	61fa      	str	r2, [r7, #28]
 80054c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80054ca:	f7fb fac7 	bl	8000a5c <__aeabi_uldivmod>
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	4613      	mov	r3, r2
 80054d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054d6:	e053      	b.n	8005580 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054d8:	4b35      	ldr	r3, [pc, #212]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	099b      	lsrs	r3, r3, #6
 80054de:	2200      	movs	r2, #0
 80054e0:	613b      	str	r3, [r7, #16]
 80054e2:	617a      	str	r2, [r7, #20]
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80054ea:	f04f 0b00 	mov.w	fp, #0
 80054ee:	4652      	mov	r2, sl
 80054f0:	465b      	mov	r3, fp
 80054f2:	f04f 0000 	mov.w	r0, #0
 80054f6:	f04f 0100 	mov.w	r1, #0
 80054fa:	0159      	lsls	r1, r3, #5
 80054fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005500:	0150      	lsls	r0, r2, #5
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	ebb2 080a 	subs.w	r8, r2, sl
 800550a:	eb63 090b 	sbc.w	r9, r3, fp
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	f04f 0300 	mov.w	r3, #0
 8005516:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800551a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800551e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005522:	ebb2 0408 	subs.w	r4, r2, r8
 8005526:	eb63 0509 	sbc.w	r5, r3, r9
 800552a:	f04f 0200 	mov.w	r2, #0
 800552e:	f04f 0300 	mov.w	r3, #0
 8005532:	00eb      	lsls	r3, r5, #3
 8005534:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005538:	00e2      	lsls	r2, r4, #3
 800553a:	4614      	mov	r4, r2
 800553c:	461d      	mov	r5, r3
 800553e:	eb14 030a 	adds.w	r3, r4, sl
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	eb45 030b 	adc.w	r3, r5, fp
 8005548:	607b      	str	r3, [r7, #4]
 800554a:	f04f 0200 	mov.w	r2, #0
 800554e:	f04f 0300 	mov.w	r3, #0
 8005552:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005556:	4629      	mov	r1, r5
 8005558:	028b      	lsls	r3, r1, #10
 800555a:	4621      	mov	r1, r4
 800555c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005560:	4621      	mov	r1, r4
 8005562:	028a      	lsls	r2, r1, #10
 8005564:	4610      	mov	r0, r2
 8005566:	4619      	mov	r1, r3
 8005568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556a:	2200      	movs	r2, #0
 800556c:	60bb      	str	r3, [r7, #8]
 800556e:	60fa      	str	r2, [r7, #12]
 8005570:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005574:	f7fb fa72 	bl	8000a5c <__aeabi_uldivmod>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4613      	mov	r3, r2
 800557e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005580:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	0c1b      	lsrs	r3, r3, #16
 8005586:	f003 0303 	and.w	r3, r3, #3
 800558a:	3301      	adds	r3, #1
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005590:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	fbb2 f3f3 	udiv	r3, r2, r3
 8005598:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800559a:	e002      	b.n	80055a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800559c:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800559e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80055a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3740      	adds	r7, #64	; 0x40
 80055a8:	46bd      	mov	sp, r7
 80055aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055ae:	bf00      	nop
 80055b0:	40023800 	.word	0x40023800
 80055b4:	00f42400 	.word	0x00f42400
 80055b8:	017d7840 	.word	0x017d7840

080055bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055c0:	4b03      	ldr	r3, [pc, #12]	; (80055d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80055c2:	681b      	ldr	r3, [r3, #0]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	2000000c 	.word	0x2000000c

080055d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055d8:	f7ff fff0 	bl	80055bc <HAL_RCC_GetHCLKFreq>
 80055dc:	4602      	mov	r2, r0
 80055de:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	0a9b      	lsrs	r3, r3, #10
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	4903      	ldr	r1, [pc, #12]	; (80055f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055ea:	5ccb      	ldrb	r3, [r1, r3]
 80055ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	40023800 	.word	0x40023800
 80055f8:	08007b88 	.word	0x08007b88

080055fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005600:	f7ff ffdc 	bl	80055bc <HAL_RCC_GetHCLKFreq>
 8005604:	4602      	mov	r2, r0
 8005606:	4b05      	ldr	r3, [pc, #20]	; (800561c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	0b5b      	lsrs	r3, r3, #13
 800560c:	f003 0307 	and.w	r3, r3, #7
 8005610:	4903      	ldr	r1, [pc, #12]	; (8005620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005612:	5ccb      	ldrb	r3, [r1, r3]
 8005614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005618:	4618      	mov	r0, r3
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40023800 	.word	0x40023800
 8005620:	08007b88 	.word	0x08007b88

08005624 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	220f      	movs	r2, #15
 8005632:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005634:	4b12      	ldr	r3, [pc, #72]	; (8005680 <HAL_RCC_GetClockConfig+0x5c>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f003 0203 	and.w	r2, r3, #3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005640:	4b0f      	ldr	r3, [pc, #60]	; (8005680 <HAL_RCC_GetClockConfig+0x5c>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800564c:	4b0c      	ldr	r3, [pc, #48]	; (8005680 <HAL_RCC_GetClockConfig+0x5c>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005658:	4b09      	ldr	r3, [pc, #36]	; (8005680 <HAL_RCC_GetClockConfig+0x5c>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	08db      	lsrs	r3, r3, #3
 800565e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005666:	4b07      	ldr	r3, [pc, #28]	; (8005684 <HAL_RCC_GetClockConfig+0x60>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0207 	and.w	r2, r3, #7
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	601a      	str	r2, [r3, #0]
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40023800 	.word	0x40023800
 8005684:	40023c00 	.word	0x40023c00

08005688 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e07b      	b.n	8005792 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d108      	bne.n	80056b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056aa:	d009      	beq.n	80056c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	61da      	str	r2, [r3, #28]
 80056b2:	e005      	b.n	80056c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d106      	bne.n	80056e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7fd f890 	bl	8002800 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005712:	431a      	orrs	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	431a      	orrs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005730:	431a      	orrs	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005744:	ea42 0103 	orr.w	r1, r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	0c1b      	lsrs	r3, r3, #16
 800575e:	f003 0104 	and.w	r1, r3, #4
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	f003 0210 	and.w	r2, r3, #16
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69da      	ldr	r2, [r3, #28]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005780:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b082      	sub	sp, #8
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e041      	b.n	8005830 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d106      	bne.n	80057c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7fd f865 	bl	8002890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2202      	movs	r2, #2
 80057ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	3304      	adds	r3, #4
 80057d6:	4619      	mov	r1, r3
 80057d8:	4610      	mov	r0, r2
 80057da:	f000 fbf5 	bl	8005fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b01      	cmp	r3, #1
 800584a:	d001      	beq.n	8005850 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e044      	b.n	80058da <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68da      	ldr	r2, [r3, #12]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0201 	orr.w	r2, r2, #1
 8005866:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a1e      	ldr	r2, [pc, #120]	; (80058e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d018      	beq.n	80058a4 <HAL_TIM_Base_Start_IT+0x6c>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800587a:	d013      	beq.n	80058a4 <HAL_TIM_Base_Start_IT+0x6c>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a1a      	ldr	r2, [pc, #104]	; (80058ec <HAL_TIM_Base_Start_IT+0xb4>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d00e      	beq.n	80058a4 <HAL_TIM_Base_Start_IT+0x6c>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a19      	ldr	r2, [pc, #100]	; (80058f0 <HAL_TIM_Base_Start_IT+0xb8>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d009      	beq.n	80058a4 <HAL_TIM_Base_Start_IT+0x6c>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a17      	ldr	r2, [pc, #92]	; (80058f4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d004      	beq.n	80058a4 <HAL_TIM_Base_Start_IT+0x6c>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a16      	ldr	r2, [pc, #88]	; (80058f8 <HAL_TIM_Base_Start_IT+0xc0>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d111      	bne.n	80058c8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 0307 	and.w	r3, r3, #7
 80058ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2b06      	cmp	r3, #6
 80058b4:	d010      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f042 0201 	orr.w	r2, r2, #1
 80058c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c6:	e007      	b.n	80058d8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	40010000 	.word	0x40010000
 80058ec:	40000400 	.word	0x40000400
 80058f0:	40000800 	.word	0x40000800
 80058f4:	40000c00 	.word	0x40000c00
 80058f8:	40014000 	.word	0x40014000

080058fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e041      	b.n	8005992 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f839 	bl	800599a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3304      	adds	r3, #4
 8005938:	4619      	mov	r1, r3
 800593a:	4610      	mov	r0, r2
 800593c:	f000 fb44 	bl	8005fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b082      	sub	sp, #8
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d122      	bne.n	8005a0a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d11b      	bne.n	8005a0a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f06f 0202 	mvn.w	r2, #2
 80059da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	f003 0303 	and.w	r3, r3, #3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fa78 	bl	8005ee6 <HAL_TIM_IC_CaptureCallback>
 80059f6:	e005      	b.n	8005a04 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fa6a 	bl	8005ed2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fa7b 	bl	8005efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	f003 0304 	and.w	r3, r3, #4
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d122      	bne.n	8005a5e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	f003 0304 	and.w	r3, r3, #4
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d11b      	bne.n	8005a5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f06f 0204 	mvn.w	r2, #4
 8005a2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 fa4e 	bl	8005ee6 <HAL_TIM_IC_CaptureCallback>
 8005a4a:	e005      	b.n	8005a58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fa40 	bl	8005ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fa51 	bl	8005efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	f003 0308 	and.w	r3, r3, #8
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d122      	bne.n	8005ab2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	f003 0308 	and.w	r3, r3, #8
 8005a76:	2b08      	cmp	r3, #8
 8005a78:	d11b      	bne.n	8005ab2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f06f 0208 	mvn.w	r2, #8
 8005a82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2204      	movs	r2, #4
 8005a88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	69db      	ldr	r3, [r3, #28]
 8005a90:	f003 0303 	and.w	r3, r3, #3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 fa24 	bl	8005ee6 <HAL_TIM_IC_CaptureCallback>
 8005a9e:	e005      	b.n	8005aac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fa16 	bl	8005ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fa27 	bl	8005efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	2b10      	cmp	r3, #16
 8005abe:	d122      	bne.n	8005b06 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f003 0310 	and.w	r3, r3, #16
 8005aca:	2b10      	cmp	r3, #16
 8005acc:	d11b      	bne.n	8005b06 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f06f 0210 	mvn.w	r2, #16
 8005ad6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2208      	movs	r2, #8
 8005adc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69db      	ldr	r3, [r3, #28]
 8005ae4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f9fa 	bl	8005ee6 <HAL_TIM_IC_CaptureCallback>
 8005af2:	e005      	b.n	8005b00 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f9ec 	bl	8005ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f9fd 	bl	8005efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d10e      	bne.n	8005b32 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d107      	bne.n	8005b32 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f06f 0201 	mvn.w	r2, #1
 8005b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7fc fddb 	bl	80026e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3c:	2b80      	cmp	r3, #128	; 0x80
 8005b3e:	d10e      	bne.n	8005b5e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b4a:	2b80      	cmp	r3, #128	; 0x80
 8005b4c:	d107      	bne.n	8005b5e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fd79 	bl	8006650 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b68:	2b40      	cmp	r3, #64	; 0x40
 8005b6a:	d10e      	bne.n	8005b8a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b76:	2b40      	cmp	r3, #64	; 0x40
 8005b78:	d107      	bne.n	8005b8a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 f9c2 	bl	8005f0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	f003 0320 	and.w	r3, r3, #32
 8005b94:	2b20      	cmp	r3, #32
 8005b96:	d10e      	bne.n	8005bb6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f003 0320 	and.w	r3, r3, #32
 8005ba2:	2b20      	cmp	r3, #32
 8005ba4:	d107      	bne.n	8005bb6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f06f 0220 	mvn.w	r2, #32
 8005bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 fd43 	bl	800663c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bb6:	bf00      	nop
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
	...

08005bc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d101      	bne.n	8005bde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bda:	2302      	movs	r3, #2
 8005bdc:	e0ae      	b.n	8005d3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b0c      	cmp	r3, #12
 8005bea:	f200 809f 	bhi.w	8005d2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005bee:	a201      	add	r2, pc, #4	; (adr r2, 8005bf4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf4:	08005c29 	.word	0x08005c29
 8005bf8:	08005d2d 	.word	0x08005d2d
 8005bfc:	08005d2d 	.word	0x08005d2d
 8005c00:	08005d2d 	.word	0x08005d2d
 8005c04:	08005c69 	.word	0x08005c69
 8005c08:	08005d2d 	.word	0x08005d2d
 8005c0c:	08005d2d 	.word	0x08005d2d
 8005c10:	08005d2d 	.word	0x08005d2d
 8005c14:	08005cab 	.word	0x08005cab
 8005c18:	08005d2d 	.word	0x08005d2d
 8005c1c:	08005d2d 	.word	0x08005d2d
 8005c20:	08005d2d 	.word	0x08005d2d
 8005c24:	08005ceb 	.word	0x08005ceb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68b9      	ldr	r1, [r7, #8]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 fa4a 	bl	80060c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699a      	ldr	r2, [r3, #24]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f042 0208 	orr.w	r2, r2, #8
 8005c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	699a      	ldr	r2, [r3, #24]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0204 	bic.w	r2, r2, #4
 8005c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6999      	ldr	r1, [r3, #24]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	691a      	ldr	r2, [r3, #16]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	619a      	str	r2, [r3, #24]
      break;
 8005c66:	e064      	b.n	8005d32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68b9      	ldr	r1, [r7, #8]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 fa90 	bl	8006194 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	699a      	ldr	r2, [r3, #24]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	699a      	ldr	r2, [r3, #24]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6999      	ldr	r1, [r3, #24]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	021a      	lsls	r2, r3, #8
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	619a      	str	r2, [r3, #24]
      break;
 8005ca8:	e043      	b.n	8005d32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68b9      	ldr	r1, [r7, #8]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 fadb 	bl	800626c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69da      	ldr	r2, [r3, #28]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f042 0208 	orr.w	r2, r2, #8
 8005cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69da      	ldr	r2, [r3, #28]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0204 	bic.w	r2, r2, #4
 8005cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69d9      	ldr	r1, [r3, #28]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	691a      	ldr	r2, [r3, #16]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	61da      	str	r2, [r3, #28]
      break;
 8005ce8:	e023      	b.n	8005d32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68b9      	ldr	r1, [r7, #8]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 fb25 	bl	8006340 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69da      	ldr	r2, [r3, #28]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69da      	ldr	r2, [r3, #28]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69d9      	ldr	r1, [r3, #28]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	021a      	lsls	r2, r3, #8
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	61da      	str	r2, [r3, #28]
      break;
 8005d2a:	e002      	b.n	8005d32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <HAL_TIM_ConfigClockSource+0x1c>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e0b4      	b.n	8005eca <HAL_TIM_ConfigClockSource+0x186>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d98:	d03e      	beq.n	8005e18 <HAL_TIM_ConfigClockSource+0xd4>
 8005d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d9e:	f200 8087 	bhi.w	8005eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8005da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da6:	f000 8086 	beq.w	8005eb6 <HAL_TIM_ConfigClockSource+0x172>
 8005daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dae:	d87f      	bhi.n	8005eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8005db0:	2b70      	cmp	r3, #112	; 0x70
 8005db2:	d01a      	beq.n	8005dea <HAL_TIM_ConfigClockSource+0xa6>
 8005db4:	2b70      	cmp	r3, #112	; 0x70
 8005db6:	d87b      	bhi.n	8005eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8005db8:	2b60      	cmp	r3, #96	; 0x60
 8005dba:	d050      	beq.n	8005e5e <HAL_TIM_ConfigClockSource+0x11a>
 8005dbc:	2b60      	cmp	r3, #96	; 0x60
 8005dbe:	d877      	bhi.n	8005eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc0:	2b50      	cmp	r3, #80	; 0x50
 8005dc2:	d03c      	beq.n	8005e3e <HAL_TIM_ConfigClockSource+0xfa>
 8005dc4:	2b50      	cmp	r3, #80	; 0x50
 8005dc6:	d873      	bhi.n	8005eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc8:	2b40      	cmp	r3, #64	; 0x40
 8005dca:	d058      	beq.n	8005e7e <HAL_TIM_ConfigClockSource+0x13a>
 8005dcc:	2b40      	cmp	r3, #64	; 0x40
 8005dce:	d86f      	bhi.n	8005eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd0:	2b30      	cmp	r3, #48	; 0x30
 8005dd2:	d064      	beq.n	8005e9e <HAL_TIM_ConfigClockSource+0x15a>
 8005dd4:	2b30      	cmp	r3, #48	; 0x30
 8005dd6:	d86b      	bhi.n	8005eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd8:	2b20      	cmp	r3, #32
 8005dda:	d060      	beq.n	8005e9e <HAL_TIM_ConfigClockSource+0x15a>
 8005ddc:	2b20      	cmp	r3, #32
 8005dde:	d867      	bhi.n	8005eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d05c      	beq.n	8005e9e <HAL_TIM_ConfigClockSource+0x15a>
 8005de4:	2b10      	cmp	r3, #16
 8005de6:	d05a      	beq.n	8005e9e <HAL_TIM_ConfigClockSource+0x15a>
 8005de8:	e062      	b.n	8005eb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6818      	ldr	r0, [r3, #0]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	6899      	ldr	r1, [r3, #8]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	f000 fb6b 	bl	80064d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	609a      	str	r2, [r3, #8]
      break;
 8005e16:	e04f      	b.n	8005eb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6818      	ldr	r0, [r3, #0]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	6899      	ldr	r1, [r3, #8]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f000 fb54 	bl	80064d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e3a:	609a      	str	r2, [r3, #8]
      break;
 8005e3c:	e03c      	b.n	8005eb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6818      	ldr	r0, [r3, #0]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	6859      	ldr	r1, [r3, #4]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	f000 fac8 	bl	80063e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2150      	movs	r1, #80	; 0x50
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 fb21 	bl	800649e <TIM_ITRx_SetConfig>
      break;
 8005e5c:	e02c      	b.n	8005eb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6818      	ldr	r0, [r3, #0]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	6859      	ldr	r1, [r3, #4]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f000 fae7 	bl	800643e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2160      	movs	r1, #96	; 0x60
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 fb11 	bl	800649e <TIM_ITRx_SetConfig>
      break;
 8005e7c:	e01c      	b.n	8005eb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6818      	ldr	r0, [r3, #0]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	6859      	ldr	r1, [r3, #4]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	f000 faa8 	bl	80063e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2140      	movs	r1, #64	; 0x40
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 fb01 	bl	800649e <TIM_ITRx_SetConfig>
      break;
 8005e9c:	e00c      	b.n	8005eb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	4610      	mov	r0, r2
 8005eaa:	f000 faf8 	bl	800649e <TIM_ITRx_SetConfig>
      break;
 8005eae:	e003      	b.n	8005eb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8005eb4:	e000      	b.n	8005eb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005eb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b083      	sub	sp, #12
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f02:	bf00      	nop
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005f2a:	bf00      	nop
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b084      	sub	sp, #16
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f42:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d107      	bne.n	8005f5e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f5c:	e02a      	b.n	8005fb4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d107      	bne.n	8005f78 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f76:	e01d      	b.n	8005fb4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d107      	bne.n	8005f92 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2204      	movs	r2, #4
 8005f86:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f90:	e010      	b.n	8005fb4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d107      	bne.n	8005fac <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2208      	movs	r2, #8
 8005fa0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005faa:	e003      	b.n	8005fb4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f7ff ffb4 	bl	8005f22 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	771a      	strb	r2, [r3, #28]
}
 8005fc0:	bf00      	nop
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a34      	ldr	r2, [pc, #208]	; (80060ac <TIM_Base_SetConfig+0xe4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d00f      	beq.n	8006000 <TIM_Base_SetConfig+0x38>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fe6:	d00b      	beq.n	8006000 <TIM_Base_SetConfig+0x38>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a31      	ldr	r2, [pc, #196]	; (80060b0 <TIM_Base_SetConfig+0xe8>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d007      	beq.n	8006000 <TIM_Base_SetConfig+0x38>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a30      	ldr	r2, [pc, #192]	; (80060b4 <TIM_Base_SetConfig+0xec>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d003      	beq.n	8006000 <TIM_Base_SetConfig+0x38>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a2f      	ldr	r2, [pc, #188]	; (80060b8 <TIM_Base_SetConfig+0xf0>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d108      	bne.n	8006012 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a25      	ldr	r2, [pc, #148]	; (80060ac <TIM_Base_SetConfig+0xe4>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d01b      	beq.n	8006052 <TIM_Base_SetConfig+0x8a>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006020:	d017      	beq.n	8006052 <TIM_Base_SetConfig+0x8a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a22      	ldr	r2, [pc, #136]	; (80060b0 <TIM_Base_SetConfig+0xe8>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d013      	beq.n	8006052 <TIM_Base_SetConfig+0x8a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a21      	ldr	r2, [pc, #132]	; (80060b4 <TIM_Base_SetConfig+0xec>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d00f      	beq.n	8006052 <TIM_Base_SetConfig+0x8a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a20      	ldr	r2, [pc, #128]	; (80060b8 <TIM_Base_SetConfig+0xf0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00b      	beq.n	8006052 <TIM_Base_SetConfig+0x8a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a1f      	ldr	r2, [pc, #124]	; (80060bc <TIM_Base_SetConfig+0xf4>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d007      	beq.n	8006052 <TIM_Base_SetConfig+0x8a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a1e      	ldr	r2, [pc, #120]	; (80060c0 <TIM_Base_SetConfig+0xf8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d003      	beq.n	8006052 <TIM_Base_SetConfig+0x8a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a1d      	ldr	r2, [pc, #116]	; (80060c4 <TIM_Base_SetConfig+0xfc>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d108      	bne.n	8006064 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a08      	ldr	r2, [pc, #32]	; (80060ac <TIM_Base_SetConfig+0xe4>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d103      	bne.n	8006098 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	691a      	ldr	r2, [r3, #16]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	615a      	str	r2, [r3, #20]
}
 800609e:	bf00      	nop
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	40010000 	.word	0x40010000
 80060b0:	40000400 	.word	0x40000400
 80060b4:	40000800 	.word	0x40000800
 80060b8:	40000c00 	.word	0x40000c00
 80060bc:	40014000 	.word	0x40014000
 80060c0:	40014400 	.word	0x40014400
 80060c4:	40014800 	.word	0x40014800

080060c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	f023 0201 	bic.w	r2, r3, #1
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 0303 	bic.w	r3, r3, #3
 80060fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	4313      	orrs	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f023 0302 	bic.w	r3, r3, #2
 8006110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	4313      	orrs	r3, r2
 800611a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a1c      	ldr	r2, [pc, #112]	; (8006190 <TIM_OC1_SetConfig+0xc8>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d10c      	bne.n	800613e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f023 0308 	bic.w	r3, r3, #8
 800612a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	4313      	orrs	r3, r2
 8006134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f023 0304 	bic.w	r3, r3, #4
 800613c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a13      	ldr	r2, [pc, #76]	; (8006190 <TIM_OC1_SetConfig+0xc8>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d111      	bne.n	800616a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800614c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4313      	orrs	r3, r2
 800615e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	621a      	str	r2, [r3, #32]
}
 8006184:	bf00      	nop
 8006186:	371c      	adds	r7, #28
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	40010000 	.word	0x40010000

08006194 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	f023 0210 	bic.w	r2, r3, #16
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	021b      	lsls	r3, r3, #8
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f023 0320 	bic.w	r3, r3, #32
 80061de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	011b      	lsls	r3, r3, #4
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a1e      	ldr	r2, [pc, #120]	; (8006268 <TIM_OC2_SetConfig+0xd4>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d10d      	bne.n	8006210 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800620e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a15      	ldr	r2, [pc, #84]	; (8006268 <TIM_OC2_SetConfig+0xd4>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d113      	bne.n	8006240 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800621e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006226:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	4313      	orrs	r3, r2
 800623e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	621a      	str	r2, [r3, #32]
}
 800625a:	bf00      	nop
 800625c:	371c      	adds	r7, #28
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	40010000 	.word	0x40010000

0800626c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0303 	bic.w	r3, r3, #3
 80062a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	021b      	lsls	r3, r3, #8
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	4313      	orrs	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a1d      	ldr	r2, [pc, #116]	; (800633c <TIM_OC3_SetConfig+0xd0>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d10d      	bne.n	80062e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	021b      	lsls	r3, r3, #8
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	4313      	orrs	r3, r2
 80062dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a14      	ldr	r2, [pc, #80]	; (800633c <TIM_OC3_SetConfig+0xd0>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d113      	bne.n	8006316 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	4313      	orrs	r3, r2
 8006308:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	011b      	lsls	r3, r3, #4
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	4313      	orrs	r3, r2
 8006314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	621a      	str	r2, [r3, #32]
}
 8006330:	bf00      	nop
 8006332:	371c      	adds	r7, #28
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	40010000 	.word	0x40010000

08006340 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800636e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	021b      	lsls	r3, r3, #8
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	4313      	orrs	r3, r2
 8006382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800638a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	031b      	lsls	r3, r3, #12
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	4313      	orrs	r3, r2
 8006396:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a10      	ldr	r2, [pc, #64]	; (80063dc <TIM_OC4_SetConfig+0x9c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d109      	bne.n	80063b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	019b      	lsls	r3, r3, #6
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	621a      	str	r2, [r3, #32]
}
 80063ce:	bf00      	nop
 80063d0:	371c      	adds	r7, #28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	40010000 	.word	0x40010000

080063e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	f023 0201 	bic.w	r2, r3, #1
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800640a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	011b      	lsls	r3, r3, #4
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	4313      	orrs	r3, r2
 8006414:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f023 030a 	bic.w	r3, r3, #10
 800641c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	4313      	orrs	r3, r2
 8006424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	621a      	str	r2, [r3, #32]
}
 8006432:	bf00      	nop
 8006434:	371c      	adds	r7, #28
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800643e:	b480      	push	{r7}
 8006440:	b087      	sub	sp, #28
 8006442:	af00      	add	r7, sp, #0
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	f023 0210 	bic.w	r2, r3, #16
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006468:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	031b      	lsls	r3, r3, #12
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	4313      	orrs	r3, r2
 8006472:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800647a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	011b      	lsls	r3, r3, #4
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	4313      	orrs	r3, r2
 8006484:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	621a      	str	r2, [r3, #32]
}
 8006492:	bf00      	nop
 8006494:	371c      	adds	r7, #28
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800649e:	b480      	push	{r7}
 80064a0:	b085      	sub	sp, #20
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	f043 0307 	orr.w	r3, r3, #7
 80064c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	609a      	str	r2, [r3, #8]
}
 80064c8:	bf00      	nop
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
 80064e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	021a      	lsls	r2, r3, #8
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	431a      	orrs	r2, r3
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	4313      	orrs	r3, r2
 8006500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	609a      	str	r2, [r3, #8]
}
 8006508:	bf00      	nop
 800650a:	371c      	adds	r7, #28
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f003 031f 	and.w	r3, r3, #31
 8006526:	2201      	movs	r2, #1
 8006528:	fa02 f303 	lsl.w	r3, r2, r3
 800652c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6a1a      	ldr	r2, [r3, #32]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	43db      	mvns	r3, r3
 8006536:	401a      	ands	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6a1a      	ldr	r2, [r3, #32]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	f003 031f 	and.w	r3, r3, #31
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	fa01 f303 	lsl.w	r3, r1, r3
 800654c:	431a      	orrs	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	621a      	str	r2, [r3, #32]
}
 8006552:	bf00      	nop
 8006554:	371c      	adds	r7, #28
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
	...

08006560 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006570:	2b01      	cmp	r3, #1
 8006572:	d101      	bne.n	8006578 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006574:	2302      	movs	r3, #2
 8006576:	e050      	b.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a1c      	ldr	r2, [pc, #112]	; (8006628 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d018      	beq.n	80065ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c4:	d013      	beq.n	80065ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a18      	ldr	r2, [pc, #96]	; (800662c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00e      	beq.n	80065ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a16      	ldr	r2, [pc, #88]	; (8006630 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d009      	beq.n	80065ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a15      	ldr	r2, [pc, #84]	; (8006634 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d004      	beq.n	80065ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a13      	ldr	r2, [pc, #76]	; (8006638 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d10c      	bne.n	8006608 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	40010000 	.word	0x40010000
 800662c:	40000400 	.word	0x40000400
 8006630:	40000800 	.word	0x40000800
 8006634:	40000c00 	.word	0x40000c00
 8006638:	40014000 	.word	0x40014000

0800663c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006664:	b580      	push	{r7, lr}
 8006666:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006668:	4b05      	ldr	r3, [pc, #20]	; (8006680 <SysTick_Handler+0x1c>)
 800666a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800666c:	f000 f996 	bl	800699c <xTaskGetSchedulerState>
 8006670:	4603      	mov	r3, r0
 8006672:	2b01      	cmp	r3, #1
 8006674:	d001      	beq.n	800667a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006676:	f000 f9ff 	bl	8006a78 <xPortSysTickHandler>
  }
}
 800667a:	bf00      	nop
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	e000e010 	.word	0xe000e010

08006684 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	689a      	ldr	r2, [r3, #8]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	601a      	str	r2, [r3, #0]
}
 80066c0:	bf00      	nop
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	6892      	ldr	r2, [r2, #8]
 80066e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	6852      	ldr	r2, [r2, #4]
 80066ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d103      	bne.n	8006700 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	1e5a      	subs	r2, r3, #1
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006726:	2300      	movs	r3, #0
 8006728:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800672a:	4b4f      	ldr	r3, [pc, #316]	; (8006868 <xTaskIncrementTick+0x148>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	f040 808f 	bne.w	8006852 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006734:	4b4d      	ldr	r3, [pc, #308]	; (800686c <xTaskIncrementTick+0x14c>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3301      	adds	r3, #1
 800673a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800673c:	4a4b      	ldr	r2, [pc, #300]	; (800686c <xTaskIncrementTick+0x14c>)
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d120      	bne.n	800678a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006748:	4b49      	ldr	r3, [pc, #292]	; (8006870 <xTaskIncrementTick+0x150>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00a      	beq.n	8006768 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006764:	bf00      	nop
 8006766:	e7fe      	b.n	8006766 <xTaskIncrementTick+0x46>
 8006768:	4b41      	ldr	r3, [pc, #260]	; (8006870 <xTaskIncrementTick+0x150>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	4b41      	ldr	r3, [pc, #260]	; (8006874 <xTaskIncrementTick+0x154>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a3f      	ldr	r2, [pc, #252]	; (8006870 <xTaskIncrementTick+0x150>)
 8006774:	6013      	str	r3, [r2, #0]
 8006776:	4a3f      	ldr	r2, [pc, #252]	; (8006874 <xTaskIncrementTick+0x154>)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	4b3e      	ldr	r3, [pc, #248]	; (8006878 <xTaskIncrementTick+0x158>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3301      	adds	r3, #1
 8006782:	4a3d      	ldr	r2, [pc, #244]	; (8006878 <xTaskIncrementTick+0x158>)
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	f000 f8e9 	bl	800695c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800678a:	4b3c      	ldr	r3, [pc, #240]	; (800687c <xTaskIncrementTick+0x15c>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	429a      	cmp	r2, r3
 8006792:	d349      	bcc.n	8006828 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006794:	4b36      	ldr	r3, [pc, #216]	; (8006870 <xTaskIncrementTick+0x150>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d104      	bne.n	80067a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800679e:	4b37      	ldr	r3, [pc, #220]	; (800687c <xTaskIncrementTick+0x15c>)
 80067a0:	f04f 32ff 	mov.w	r2, #4294967295
 80067a4:	601a      	str	r2, [r3, #0]
					break;
 80067a6:	e03f      	b.n	8006828 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067a8:	4b31      	ldr	r3, [pc, #196]	; (8006870 <xTaskIncrementTick+0x150>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d203      	bcs.n	80067c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067c0:	4a2e      	ldr	r2, [pc, #184]	; (800687c <xTaskIncrementTick+0x15c>)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067c6:	e02f      	b.n	8006828 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	3304      	adds	r3, #4
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7ff ff7d 	bl	80066cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d004      	beq.n	80067e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	3318      	adds	r3, #24
 80067de:	4618      	mov	r0, r3
 80067e0:	f7ff ff74 	bl	80066cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e8:	4b25      	ldr	r3, [pc, #148]	; (8006880 <xTaskIncrementTick+0x160>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d903      	bls.n	80067f8 <xTaskIncrementTick+0xd8>
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f4:	4a22      	ldr	r2, [pc, #136]	; (8006880 <xTaskIncrementTick+0x160>)
 80067f6:	6013      	str	r3, [r2, #0]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067fc:	4613      	mov	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4a1f      	ldr	r2, [pc, #124]	; (8006884 <xTaskIncrementTick+0x164>)
 8006806:	441a      	add	r2, r3
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	3304      	adds	r3, #4
 800680c:	4619      	mov	r1, r3
 800680e:	4610      	mov	r0, r2
 8006810:	f7ff ff38 	bl	8006684 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006818:	4b1b      	ldr	r3, [pc, #108]	; (8006888 <xTaskIncrementTick+0x168>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681e:	429a      	cmp	r2, r3
 8006820:	d3b8      	bcc.n	8006794 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006822:	2301      	movs	r3, #1
 8006824:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006826:	e7b5      	b.n	8006794 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006828:	4b17      	ldr	r3, [pc, #92]	; (8006888 <xTaskIncrementTick+0x168>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800682e:	4915      	ldr	r1, [pc, #84]	; (8006884 <xTaskIncrementTick+0x164>)
 8006830:	4613      	mov	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	440b      	add	r3, r1
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d901      	bls.n	8006844 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006840:	2301      	movs	r3, #1
 8006842:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006844:	4b11      	ldr	r3, [pc, #68]	; (800688c <xTaskIncrementTick+0x16c>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d007      	beq.n	800685c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800684c:	2301      	movs	r3, #1
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	e004      	b.n	800685c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006852:	4b0f      	ldr	r3, [pc, #60]	; (8006890 <xTaskIncrementTick+0x170>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3301      	adds	r3, #1
 8006858:	4a0d      	ldr	r2, [pc, #52]	; (8006890 <xTaskIncrementTick+0x170>)
 800685a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800685c:	697b      	ldr	r3, [r7, #20]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	20000ba8 	.word	0x20000ba8
 800686c:	20000b8c 	.word	0x20000b8c
 8006870:	20000b84 	.word	0x20000b84
 8006874:	20000b88 	.word	0x20000b88
 8006878:	20000ba0 	.word	0x20000ba0
 800687c:	20000ba4 	.word	0x20000ba4
 8006880:	20000b90 	.word	0x20000b90
 8006884:	20000724 	.word	0x20000724
 8006888:	20000720 	.word	0x20000720
 800688c:	20000b9c 	.word	0x20000b9c
 8006890:	20000b98 	.word	0x20000b98

08006894 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800689a:	4b2a      	ldr	r3, [pc, #168]	; (8006944 <vTaskSwitchContext+0xb0>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068a2:	4b29      	ldr	r3, [pc, #164]	; (8006948 <vTaskSwitchContext+0xb4>)
 80068a4:	2201      	movs	r2, #1
 80068a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068a8:	e046      	b.n	8006938 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80068aa:	4b27      	ldr	r3, [pc, #156]	; (8006948 <vTaskSwitchContext+0xb4>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068b0:	4b26      	ldr	r3, [pc, #152]	; (800694c <vTaskSwitchContext+0xb8>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	60fb      	str	r3, [r7, #12]
 80068b6:	e010      	b.n	80068da <vTaskSwitchContext+0x46>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10a      	bne.n	80068d4 <vTaskSwitchContext+0x40>
	__asm volatile
 80068be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	607b      	str	r3, [r7, #4]
}
 80068d0:	bf00      	nop
 80068d2:	e7fe      	b.n	80068d2 <vTaskSwitchContext+0x3e>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	491d      	ldr	r1, [pc, #116]	; (8006950 <vTaskSwitchContext+0xbc>)
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	4613      	mov	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4413      	add	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	440b      	add	r3, r1
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d0e4      	beq.n	80068b8 <vTaskSwitchContext+0x24>
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	4613      	mov	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4a15      	ldr	r2, [pc, #84]	; (8006950 <vTaskSwitchContext+0xbc>)
 80068fa:	4413      	add	r3, r2
 80068fc:	60bb      	str	r3, [r7, #8]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	605a      	str	r2, [r3, #4]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	3308      	adds	r3, #8
 8006910:	429a      	cmp	r2, r3
 8006912:	d104      	bne.n	800691e <vTaskSwitchContext+0x8a>
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	605a      	str	r2, [r3, #4]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	4a0b      	ldr	r2, [pc, #44]	; (8006954 <vTaskSwitchContext+0xc0>)
 8006926:	6013      	str	r3, [r2, #0]
 8006928:	4a08      	ldr	r2, [pc, #32]	; (800694c <vTaskSwitchContext+0xb8>)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800692e:	4b09      	ldr	r3, [pc, #36]	; (8006954 <vTaskSwitchContext+0xc0>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3354      	adds	r3, #84	; 0x54
 8006934:	4a08      	ldr	r2, [pc, #32]	; (8006958 <vTaskSwitchContext+0xc4>)
 8006936:	6013      	str	r3, [r2, #0]
}
 8006938:	bf00      	nop
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	20000ba8 	.word	0x20000ba8
 8006948:	20000b9c 	.word	0x20000b9c
 800694c:	20000b90 	.word	0x20000b90
 8006950:	20000724 	.word	0x20000724
 8006954:	20000720 	.word	0x20000720
 8006958:	20000018 	.word	0x20000018

0800695c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006962:	4b0c      	ldr	r3, [pc, #48]	; (8006994 <prvResetNextTaskUnblockTime+0x38>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d104      	bne.n	8006976 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800696c:	4b0a      	ldr	r3, [pc, #40]	; (8006998 <prvResetNextTaskUnblockTime+0x3c>)
 800696e:	f04f 32ff 	mov.w	r2, #4294967295
 8006972:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006974:	e008      	b.n	8006988 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006976:	4b07      	ldr	r3, [pc, #28]	; (8006994 <prvResetNextTaskUnblockTime+0x38>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	4a04      	ldr	r2, [pc, #16]	; (8006998 <prvResetNextTaskUnblockTime+0x3c>)
 8006986:	6013      	str	r3, [r2, #0]
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	20000b84 	.word	0x20000b84
 8006998:	20000ba4 	.word	0x20000ba4

0800699c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069a2:	4b0b      	ldr	r3, [pc, #44]	; (80069d0 <xTaskGetSchedulerState+0x34>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d102      	bne.n	80069b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069aa:	2301      	movs	r3, #1
 80069ac:	607b      	str	r3, [r7, #4]
 80069ae:	e008      	b.n	80069c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069b0:	4b08      	ldr	r3, [pc, #32]	; (80069d4 <xTaskGetSchedulerState+0x38>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d102      	bne.n	80069be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069b8:	2302      	movs	r3, #2
 80069ba:	607b      	str	r3, [r7, #4]
 80069bc:	e001      	b.n	80069c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069be:	2300      	movs	r3, #0
 80069c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069c2:	687b      	ldr	r3, [r7, #4]
	}
 80069c4:	4618      	mov	r0, r3
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	20000b94 	.word	0x20000b94
 80069d4:	20000ba8 	.word	0x20000ba8
	...

080069e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80069e0:	4b07      	ldr	r3, [pc, #28]	; (8006a00 <pxCurrentTCBConst2>)
 80069e2:	6819      	ldr	r1, [r3, #0]
 80069e4:	6808      	ldr	r0, [r1, #0]
 80069e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ea:	f380 8809 	msr	PSP, r0
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f04f 0000 	mov.w	r0, #0
 80069f6:	f380 8811 	msr	BASEPRI, r0
 80069fa:	4770      	bx	lr
 80069fc:	f3af 8000 	nop.w

08006a00 <pxCurrentTCBConst2>:
 8006a00:	20000720 	.word	0x20000720
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a04:	bf00      	nop
 8006a06:	bf00      	nop
	...

08006a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a10:	f3ef 8009 	mrs	r0, PSP
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	4b15      	ldr	r3, [pc, #84]	; (8006a70 <pxCurrentTCBConst>)
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	f01e 0f10 	tst.w	lr, #16
 8006a20:	bf08      	it	eq
 8006a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2a:	6010      	str	r0, [r2, #0]
 8006a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a34:	f380 8811 	msr	BASEPRI, r0
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f7ff ff28 	bl	8006894 <vTaskSwitchContext>
 8006a44:	f04f 0000 	mov.w	r0, #0
 8006a48:	f380 8811 	msr	BASEPRI, r0
 8006a4c:	bc09      	pop	{r0, r3}
 8006a4e:	6819      	ldr	r1, [r3, #0]
 8006a50:	6808      	ldr	r0, [r1, #0]
 8006a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a56:	f01e 0f10 	tst.w	lr, #16
 8006a5a:	bf08      	it	eq
 8006a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a60:	f380 8809 	msr	PSP, r0
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	f3af 8000 	nop.w

08006a70 <pxCurrentTCBConst>:
 8006a70:	20000720 	.word	0x20000720
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a74:	bf00      	nop
 8006a76:	bf00      	nop

08006a78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	607b      	str	r3, [r7, #4]
}
 8006a90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a92:	f7ff fe45 	bl	8006720 <xTaskIncrementTick>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a9c:	4b06      	ldr	r3, [pc, #24]	; (8006ab8 <xPortSysTickHandler+0x40>)
 8006a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006aae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ab0:	bf00      	nop
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	e000ed04 	.word	0xe000ed04

08006abc <__errno>:
 8006abc:	4b01      	ldr	r3, [pc, #4]	; (8006ac4 <__errno+0x8>)
 8006abe:	6818      	ldr	r0, [r3, #0]
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	20000018 	.word	0x20000018

08006ac8 <__libc_init_array>:
 8006ac8:	b570      	push	{r4, r5, r6, lr}
 8006aca:	4d0d      	ldr	r5, [pc, #52]	; (8006b00 <__libc_init_array+0x38>)
 8006acc:	4c0d      	ldr	r4, [pc, #52]	; (8006b04 <__libc_init_array+0x3c>)
 8006ace:	1b64      	subs	r4, r4, r5
 8006ad0:	10a4      	asrs	r4, r4, #2
 8006ad2:	2600      	movs	r6, #0
 8006ad4:	42a6      	cmp	r6, r4
 8006ad6:	d109      	bne.n	8006aec <__libc_init_array+0x24>
 8006ad8:	4d0b      	ldr	r5, [pc, #44]	; (8006b08 <__libc_init_array+0x40>)
 8006ada:	4c0c      	ldr	r4, [pc, #48]	; (8006b0c <__libc_init_array+0x44>)
 8006adc:	f000 f978 	bl	8006dd0 <_init>
 8006ae0:	1b64      	subs	r4, r4, r5
 8006ae2:	10a4      	asrs	r4, r4, #2
 8006ae4:	2600      	movs	r6, #0
 8006ae6:	42a6      	cmp	r6, r4
 8006ae8:	d105      	bne.n	8006af6 <__libc_init_array+0x2e>
 8006aea:	bd70      	pop	{r4, r5, r6, pc}
 8006aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af0:	4798      	blx	r3
 8006af2:	3601      	adds	r6, #1
 8006af4:	e7ee      	b.n	8006ad4 <__libc_init_array+0xc>
 8006af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006afa:	4798      	blx	r3
 8006afc:	3601      	adds	r6, #1
 8006afe:	e7f2      	b.n	8006ae6 <__libc_init_array+0x1e>
 8006b00:	08007c28 	.word	0x08007c28
 8006b04:	08007c28 	.word	0x08007c28
 8006b08:	08007c28 	.word	0x08007c28
 8006b0c:	08007c2c 	.word	0x08007c2c

08006b10 <__itoa>:
 8006b10:	1e93      	subs	r3, r2, #2
 8006b12:	2b22      	cmp	r3, #34	; 0x22
 8006b14:	b510      	push	{r4, lr}
 8006b16:	460c      	mov	r4, r1
 8006b18:	d904      	bls.n	8006b24 <__itoa+0x14>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	700b      	strb	r3, [r1, #0]
 8006b1e:	461c      	mov	r4, r3
 8006b20:	4620      	mov	r0, r4
 8006b22:	bd10      	pop	{r4, pc}
 8006b24:	2a0a      	cmp	r2, #10
 8006b26:	d109      	bne.n	8006b3c <__itoa+0x2c>
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	da07      	bge.n	8006b3c <__itoa+0x2c>
 8006b2c:	232d      	movs	r3, #45	; 0x2d
 8006b2e:	700b      	strb	r3, [r1, #0]
 8006b30:	4240      	negs	r0, r0
 8006b32:	2101      	movs	r1, #1
 8006b34:	4421      	add	r1, r4
 8006b36:	f000 f8bb 	bl	8006cb0 <__utoa>
 8006b3a:	e7f1      	b.n	8006b20 <__itoa+0x10>
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	e7f9      	b.n	8006b34 <__itoa+0x24>

08006b40 <itoa>:
 8006b40:	f7ff bfe6 	b.w	8006b10 <__itoa>

08006b44 <__retarget_lock_acquire_recursive>:
 8006b44:	4770      	bx	lr

08006b46 <__retarget_lock_release_recursive>:
 8006b46:	4770      	bx	lr

08006b48 <malloc>:
 8006b48:	4b02      	ldr	r3, [pc, #8]	; (8006b54 <malloc+0xc>)
 8006b4a:	4601      	mov	r1, r0
 8006b4c:	6818      	ldr	r0, [r3, #0]
 8006b4e:	f000 b82b 	b.w	8006ba8 <_malloc_r>
 8006b52:	bf00      	nop
 8006b54:	20000018 	.word	0x20000018

08006b58 <memset>:
 8006b58:	4402      	add	r2, r0
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d100      	bne.n	8006b62 <memset+0xa>
 8006b60:	4770      	bx	lr
 8006b62:	f803 1b01 	strb.w	r1, [r3], #1
 8006b66:	e7f9      	b.n	8006b5c <memset+0x4>

08006b68 <sbrk_aligned>:
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	4e0e      	ldr	r6, [pc, #56]	; (8006ba4 <sbrk_aligned+0x3c>)
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	6831      	ldr	r1, [r6, #0]
 8006b70:	4605      	mov	r5, r0
 8006b72:	b911      	cbnz	r1, 8006b7a <sbrk_aligned+0x12>
 8006b74:	f000 f88c 	bl	8006c90 <_sbrk_r>
 8006b78:	6030      	str	r0, [r6, #0]
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	f000 f887 	bl	8006c90 <_sbrk_r>
 8006b82:	1c43      	adds	r3, r0, #1
 8006b84:	d00a      	beq.n	8006b9c <sbrk_aligned+0x34>
 8006b86:	1cc4      	adds	r4, r0, #3
 8006b88:	f024 0403 	bic.w	r4, r4, #3
 8006b8c:	42a0      	cmp	r0, r4
 8006b8e:	d007      	beq.n	8006ba0 <sbrk_aligned+0x38>
 8006b90:	1a21      	subs	r1, r4, r0
 8006b92:	4628      	mov	r0, r5
 8006b94:	f000 f87c 	bl	8006c90 <_sbrk_r>
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d101      	bne.n	8006ba0 <sbrk_aligned+0x38>
 8006b9c:	f04f 34ff 	mov.w	r4, #4294967295
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	bd70      	pop	{r4, r5, r6, pc}
 8006ba4:	20000bb4 	.word	0x20000bb4

08006ba8 <_malloc_r>:
 8006ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bac:	1ccd      	adds	r5, r1, #3
 8006bae:	f025 0503 	bic.w	r5, r5, #3
 8006bb2:	3508      	adds	r5, #8
 8006bb4:	2d0c      	cmp	r5, #12
 8006bb6:	bf38      	it	cc
 8006bb8:	250c      	movcc	r5, #12
 8006bba:	2d00      	cmp	r5, #0
 8006bbc:	4607      	mov	r7, r0
 8006bbe:	db01      	blt.n	8006bc4 <_malloc_r+0x1c>
 8006bc0:	42a9      	cmp	r1, r5
 8006bc2:	d905      	bls.n	8006bd0 <_malloc_r+0x28>
 8006bc4:	230c      	movs	r3, #12
 8006bc6:	603b      	str	r3, [r7, #0]
 8006bc8:	2600      	movs	r6, #0
 8006bca:	4630      	mov	r0, r6
 8006bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bd0:	4e2e      	ldr	r6, [pc, #184]	; (8006c8c <_malloc_r+0xe4>)
 8006bd2:	f000 f8af 	bl	8006d34 <__malloc_lock>
 8006bd6:	6833      	ldr	r3, [r6, #0]
 8006bd8:	461c      	mov	r4, r3
 8006bda:	bb34      	cbnz	r4, 8006c2a <_malloc_r+0x82>
 8006bdc:	4629      	mov	r1, r5
 8006bde:	4638      	mov	r0, r7
 8006be0:	f7ff ffc2 	bl	8006b68 <sbrk_aligned>
 8006be4:	1c43      	adds	r3, r0, #1
 8006be6:	4604      	mov	r4, r0
 8006be8:	d14d      	bne.n	8006c86 <_malloc_r+0xde>
 8006bea:	6834      	ldr	r4, [r6, #0]
 8006bec:	4626      	mov	r6, r4
 8006bee:	2e00      	cmp	r6, #0
 8006bf0:	d140      	bne.n	8006c74 <_malloc_r+0xcc>
 8006bf2:	6823      	ldr	r3, [r4, #0]
 8006bf4:	4631      	mov	r1, r6
 8006bf6:	4638      	mov	r0, r7
 8006bf8:	eb04 0803 	add.w	r8, r4, r3
 8006bfc:	f000 f848 	bl	8006c90 <_sbrk_r>
 8006c00:	4580      	cmp	r8, r0
 8006c02:	d13a      	bne.n	8006c7a <_malloc_r+0xd2>
 8006c04:	6821      	ldr	r1, [r4, #0]
 8006c06:	3503      	adds	r5, #3
 8006c08:	1a6d      	subs	r5, r5, r1
 8006c0a:	f025 0503 	bic.w	r5, r5, #3
 8006c0e:	3508      	adds	r5, #8
 8006c10:	2d0c      	cmp	r5, #12
 8006c12:	bf38      	it	cc
 8006c14:	250c      	movcc	r5, #12
 8006c16:	4629      	mov	r1, r5
 8006c18:	4638      	mov	r0, r7
 8006c1a:	f7ff ffa5 	bl	8006b68 <sbrk_aligned>
 8006c1e:	3001      	adds	r0, #1
 8006c20:	d02b      	beq.n	8006c7a <_malloc_r+0xd2>
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	442b      	add	r3, r5
 8006c26:	6023      	str	r3, [r4, #0]
 8006c28:	e00e      	b.n	8006c48 <_malloc_r+0xa0>
 8006c2a:	6822      	ldr	r2, [r4, #0]
 8006c2c:	1b52      	subs	r2, r2, r5
 8006c2e:	d41e      	bmi.n	8006c6e <_malloc_r+0xc6>
 8006c30:	2a0b      	cmp	r2, #11
 8006c32:	d916      	bls.n	8006c62 <_malloc_r+0xba>
 8006c34:	1961      	adds	r1, r4, r5
 8006c36:	42a3      	cmp	r3, r4
 8006c38:	6025      	str	r5, [r4, #0]
 8006c3a:	bf18      	it	ne
 8006c3c:	6059      	strne	r1, [r3, #4]
 8006c3e:	6863      	ldr	r3, [r4, #4]
 8006c40:	bf08      	it	eq
 8006c42:	6031      	streq	r1, [r6, #0]
 8006c44:	5162      	str	r2, [r4, r5]
 8006c46:	604b      	str	r3, [r1, #4]
 8006c48:	4638      	mov	r0, r7
 8006c4a:	f104 060b 	add.w	r6, r4, #11
 8006c4e:	f000 f877 	bl	8006d40 <__malloc_unlock>
 8006c52:	f026 0607 	bic.w	r6, r6, #7
 8006c56:	1d23      	adds	r3, r4, #4
 8006c58:	1af2      	subs	r2, r6, r3
 8006c5a:	d0b6      	beq.n	8006bca <_malloc_r+0x22>
 8006c5c:	1b9b      	subs	r3, r3, r6
 8006c5e:	50a3      	str	r3, [r4, r2]
 8006c60:	e7b3      	b.n	8006bca <_malloc_r+0x22>
 8006c62:	6862      	ldr	r2, [r4, #4]
 8006c64:	42a3      	cmp	r3, r4
 8006c66:	bf0c      	ite	eq
 8006c68:	6032      	streq	r2, [r6, #0]
 8006c6a:	605a      	strne	r2, [r3, #4]
 8006c6c:	e7ec      	b.n	8006c48 <_malloc_r+0xa0>
 8006c6e:	4623      	mov	r3, r4
 8006c70:	6864      	ldr	r4, [r4, #4]
 8006c72:	e7b2      	b.n	8006bda <_malloc_r+0x32>
 8006c74:	4634      	mov	r4, r6
 8006c76:	6876      	ldr	r6, [r6, #4]
 8006c78:	e7b9      	b.n	8006bee <_malloc_r+0x46>
 8006c7a:	230c      	movs	r3, #12
 8006c7c:	603b      	str	r3, [r7, #0]
 8006c7e:	4638      	mov	r0, r7
 8006c80:	f000 f85e 	bl	8006d40 <__malloc_unlock>
 8006c84:	e7a1      	b.n	8006bca <_malloc_r+0x22>
 8006c86:	6025      	str	r5, [r4, #0]
 8006c88:	e7de      	b.n	8006c48 <_malloc_r+0xa0>
 8006c8a:	bf00      	nop
 8006c8c:	20000bb0 	.word	0x20000bb0

08006c90 <_sbrk_r>:
 8006c90:	b538      	push	{r3, r4, r5, lr}
 8006c92:	4d06      	ldr	r5, [pc, #24]	; (8006cac <_sbrk_r+0x1c>)
 8006c94:	2300      	movs	r3, #0
 8006c96:	4604      	mov	r4, r0
 8006c98:	4608      	mov	r0, r1
 8006c9a:	602b      	str	r3, [r5, #0]
 8006c9c:	f7fb ff2c 	bl	8002af8 <_sbrk>
 8006ca0:	1c43      	adds	r3, r0, #1
 8006ca2:	d102      	bne.n	8006caa <_sbrk_r+0x1a>
 8006ca4:	682b      	ldr	r3, [r5, #0]
 8006ca6:	b103      	cbz	r3, 8006caa <_sbrk_r+0x1a>
 8006ca8:	6023      	str	r3, [r4, #0]
 8006caa:	bd38      	pop	{r3, r4, r5, pc}
 8006cac:	20000bb8 	.word	0x20000bb8

08006cb0 <__utoa>:
 8006cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cb2:	4c1f      	ldr	r4, [pc, #124]	; (8006d30 <__utoa+0x80>)
 8006cb4:	b08b      	sub	sp, #44	; 0x2c
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	466e      	mov	r6, sp
 8006cbc:	f104 0c20 	add.w	ip, r4, #32
 8006cc0:	6820      	ldr	r0, [r4, #0]
 8006cc2:	6861      	ldr	r1, [r4, #4]
 8006cc4:	4637      	mov	r7, r6
 8006cc6:	c703      	stmia	r7!, {r0, r1}
 8006cc8:	3408      	adds	r4, #8
 8006cca:	4564      	cmp	r4, ip
 8006ccc:	463e      	mov	r6, r7
 8006cce:	d1f7      	bne.n	8006cc0 <__utoa+0x10>
 8006cd0:	7921      	ldrb	r1, [r4, #4]
 8006cd2:	7139      	strb	r1, [r7, #4]
 8006cd4:	1e91      	subs	r1, r2, #2
 8006cd6:	6820      	ldr	r0, [r4, #0]
 8006cd8:	6038      	str	r0, [r7, #0]
 8006cda:	2922      	cmp	r1, #34	; 0x22
 8006cdc:	f04f 0100 	mov.w	r1, #0
 8006ce0:	d904      	bls.n	8006cec <__utoa+0x3c>
 8006ce2:	7019      	strb	r1, [r3, #0]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	b00b      	add	sp, #44	; 0x2c
 8006cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cec:	1e58      	subs	r0, r3, #1
 8006cee:	4684      	mov	ip, r0
 8006cf0:	fbb5 f7f2 	udiv	r7, r5, r2
 8006cf4:	fb02 5617 	mls	r6, r2, r7, r5
 8006cf8:	3628      	adds	r6, #40	; 0x28
 8006cfa:	446e      	add	r6, sp
 8006cfc:	460c      	mov	r4, r1
 8006cfe:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006d02:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006d06:	462e      	mov	r6, r5
 8006d08:	42b2      	cmp	r2, r6
 8006d0a:	f101 0101 	add.w	r1, r1, #1
 8006d0e:	463d      	mov	r5, r7
 8006d10:	d9ee      	bls.n	8006cf0 <__utoa+0x40>
 8006d12:	2200      	movs	r2, #0
 8006d14:	545a      	strb	r2, [r3, r1]
 8006d16:	1919      	adds	r1, r3, r4
 8006d18:	1aa5      	subs	r5, r4, r2
 8006d1a:	42aa      	cmp	r2, r5
 8006d1c:	dae3      	bge.n	8006ce6 <__utoa+0x36>
 8006d1e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006d22:	780e      	ldrb	r6, [r1, #0]
 8006d24:	7006      	strb	r6, [r0, #0]
 8006d26:	3201      	adds	r2, #1
 8006d28:	f801 5901 	strb.w	r5, [r1], #-1
 8006d2c:	e7f4      	b.n	8006d18 <__utoa+0x68>
 8006d2e:	bf00      	nop
 8006d30:	08007bf8 	.word	0x08007bf8

08006d34 <__malloc_lock>:
 8006d34:	4801      	ldr	r0, [pc, #4]	; (8006d3c <__malloc_lock+0x8>)
 8006d36:	f7ff bf05 	b.w	8006b44 <__retarget_lock_acquire_recursive>
 8006d3a:	bf00      	nop
 8006d3c:	20000bac 	.word	0x20000bac

08006d40 <__malloc_unlock>:
 8006d40:	4801      	ldr	r0, [pc, #4]	; (8006d48 <__malloc_unlock+0x8>)
 8006d42:	f7ff bf00 	b.w	8006b46 <__retarget_lock_release_recursive>
 8006d46:	bf00      	nop
 8006d48:	20000bac 	.word	0x20000bac

08006d4c <floorf>:
 8006d4c:	ee10 3a10 	vmov	r3, s0
 8006d50:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006d54:	3a7f      	subs	r2, #127	; 0x7f
 8006d56:	2a16      	cmp	r2, #22
 8006d58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006d5c:	dc2a      	bgt.n	8006db4 <floorf+0x68>
 8006d5e:	2a00      	cmp	r2, #0
 8006d60:	da11      	bge.n	8006d86 <floorf+0x3a>
 8006d62:	eddf 7a18 	vldr	s15, [pc, #96]	; 8006dc4 <floorf+0x78>
 8006d66:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006d6a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d72:	dd05      	ble.n	8006d80 <floorf+0x34>
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	da23      	bge.n	8006dc0 <floorf+0x74>
 8006d78:	4a13      	ldr	r2, [pc, #76]	; (8006dc8 <floorf+0x7c>)
 8006d7a:	2900      	cmp	r1, #0
 8006d7c:	bf18      	it	ne
 8006d7e:	4613      	movne	r3, r2
 8006d80:	ee00 3a10 	vmov	s0, r3
 8006d84:	4770      	bx	lr
 8006d86:	4911      	ldr	r1, [pc, #68]	; (8006dcc <floorf+0x80>)
 8006d88:	4111      	asrs	r1, r2
 8006d8a:	420b      	tst	r3, r1
 8006d8c:	d0fa      	beq.n	8006d84 <floorf+0x38>
 8006d8e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006dc4 <floorf+0x78>
 8006d92:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006d96:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d9e:	ddef      	ble.n	8006d80 <floorf+0x34>
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	bfbe      	ittt	lt
 8006da4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8006da8:	fa40 f202 	asrlt.w	r2, r0, r2
 8006dac:	189b      	addlt	r3, r3, r2
 8006dae:	ea23 0301 	bic.w	r3, r3, r1
 8006db2:	e7e5      	b.n	8006d80 <floorf+0x34>
 8006db4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006db8:	d3e4      	bcc.n	8006d84 <floorf+0x38>
 8006dba:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006dbe:	4770      	bx	lr
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	e7dd      	b.n	8006d80 <floorf+0x34>
 8006dc4:	7149f2ca 	.word	0x7149f2ca
 8006dc8:	bf800000 	.word	0xbf800000
 8006dcc:	007fffff 	.word	0x007fffff

08006dd0 <_init>:
 8006dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd2:	bf00      	nop
 8006dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dd6:	bc08      	pop	{r3}
 8006dd8:	469e      	mov	lr, r3
 8006dda:	4770      	bx	lr

08006ddc <_fini>:
 8006ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dde:	bf00      	nop
 8006de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de2:	bc08      	pop	{r3}
 8006de4:	469e      	mov	lr, r3
 8006de6:	4770      	bx	lr
