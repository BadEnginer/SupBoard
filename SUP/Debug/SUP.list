
SUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ee8  08009d8c  08009d8c  00019d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac74  0800ac74  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac74  0800ac74  0001ac74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac7c  0800ac7c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac7c  0800ac7c  0001ac7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac80  0800ac80  0001ac80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800ac84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000050d8  20000080  0800ad04  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20005158  0800ad04  00025158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ff01  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000465e  00000000  00000000  0003ffb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a60  00000000  00000000  00044610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001878  00000000  00000000  00046070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b5b6  00000000  00000000  000478e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f47b  00000000  00000000  00062e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cfbc  00000000  00000000  00082319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f2d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007358  00000000  00000000  0011f328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009d74 	.word	0x08009d74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08009d74 	.word	0x08009d74

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b974 	b.w	8000cbc <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	4604      	mov	r4, r0
 80009f4:	468e      	mov	lr, r1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d14d      	bne.n	8000a96 <__udivmoddi4+0xaa>
 80009fa:	428a      	cmp	r2, r1
 80009fc:	4694      	mov	ip, r2
 80009fe:	d969      	bls.n	8000ad4 <__udivmoddi4+0xe8>
 8000a00:	fab2 f282 	clz	r2, r2
 8000a04:	b152      	cbz	r2, 8000a1c <__udivmoddi4+0x30>
 8000a06:	fa01 f302 	lsl.w	r3, r1, r2
 8000a0a:	f1c2 0120 	rsb	r1, r2, #32
 8000a0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a16:	ea41 0e03 	orr.w	lr, r1, r3
 8000a1a:	4094      	lsls	r4, r2
 8000a1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a20:	0c21      	lsrs	r1, r4, #16
 8000a22:	fbbe f6f8 	udiv	r6, lr, r8
 8000a26:	fa1f f78c 	uxth.w	r7, ip
 8000a2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a32:	fb06 f107 	mul.w	r1, r6, r7
 8000a36:	4299      	cmp	r1, r3
 8000a38:	d90a      	bls.n	8000a50 <__udivmoddi4+0x64>
 8000a3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a42:	f080 811f 	bcs.w	8000c84 <__udivmoddi4+0x298>
 8000a46:	4299      	cmp	r1, r3
 8000a48:	f240 811c 	bls.w	8000c84 <__udivmoddi4+0x298>
 8000a4c:	3e02      	subs	r6, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a5b      	subs	r3, r3, r1
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a58:	fb08 3310 	mls	r3, r8, r0, r3
 8000a5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a60:	fb00 f707 	mul.w	r7, r0, r7
 8000a64:	42a7      	cmp	r7, r4
 8000a66:	d90a      	bls.n	8000a7e <__udivmoddi4+0x92>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a70:	f080 810a 	bcs.w	8000c88 <__udivmoddi4+0x29c>
 8000a74:	42a7      	cmp	r7, r4
 8000a76:	f240 8107 	bls.w	8000c88 <__udivmoddi4+0x29c>
 8000a7a:	4464      	add	r4, ip
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a82:	1be4      	subs	r4, r4, r7
 8000a84:	2600      	movs	r6, #0
 8000a86:	b11d      	cbz	r5, 8000a90 <__udivmoddi4+0xa4>
 8000a88:	40d4      	lsrs	r4, r2
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d909      	bls.n	8000aae <__udivmoddi4+0xc2>
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	f000 80ef 	beq.w	8000c7e <__udivmoddi4+0x292>
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa6:	4630      	mov	r0, r6
 8000aa8:	4631      	mov	r1, r6
 8000aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aae:	fab3 f683 	clz	r6, r3
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d14a      	bne.n	8000b4c <__udivmoddi4+0x160>
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d302      	bcc.n	8000ac0 <__udivmoddi4+0xd4>
 8000aba:	4282      	cmp	r2, r0
 8000abc:	f200 80f9 	bhi.w	8000cb2 <__udivmoddi4+0x2c6>
 8000ac0:	1a84      	subs	r4, r0, r2
 8000ac2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	469e      	mov	lr, r3
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d0e0      	beq.n	8000a90 <__udivmoddi4+0xa4>
 8000ace:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ad2:	e7dd      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000ad4:	b902      	cbnz	r2, 8000ad8 <__udivmoddi4+0xec>
 8000ad6:	deff      	udf	#255	; 0xff
 8000ad8:	fab2 f282 	clz	r2, r2
 8000adc:	2a00      	cmp	r2, #0
 8000ade:	f040 8092 	bne.w	8000c06 <__udivmoddi4+0x21a>
 8000ae2:	eba1 010c 	sub.w	r1, r1, ip
 8000ae6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aea:	fa1f fe8c 	uxth.w	lr, ip
 8000aee:	2601      	movs	r6, #1
 8000af0:	0c20      	lsrs	r0, r4, #16
 8000af2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000af6:	fb07 1113 	mls	r1, r7, r3, r1
 8000afa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000afe:	fb0e f003 	mul.w	r0, lr, r3
 8000b02:	4288      	cmp	r0, r1
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x12c>
 8000b06:	eb1c 0101 	adds.w	r1, ip, r1
 8000b0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x12a>
 8000b10:	4288      	cmp	r0, r1
 8000b12:	f200 80cb 	bhi.w	8000cac <__udivmoddi4+0x2c0>
 8000b16:	4643      	mov	r3, r8
 8000b18:	1a09      	subs	r1, r1, r0
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b20:	fb07 1110 	mls	r1, r7, r0, r1
 8000b24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b28:	fb0e fe00 	mul.w	lr, lr, r0
 8000b2c:	45a6      	cmp	lr, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x156>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x154>
 8000b3a:	45a6      	cmp	lr, r4
 8000b3c:	f200 80bb 	bhi.w	8000cb6 <__udivmoddi4+0x2ca>
 8000b40:	4608      	mov	r0, r1
 8000b42:	eba4 040e 	sub.w	r4, r4, lr
 8000b46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b4a:	e79c      	b.n	8000a86 <__udivmoddi4+0x9a>
 8000b4c:	f1c6 0720 	rsb	r7, r6, #32
 8000b50:	40b3      	lsls	r3, r6
 8000b52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b62:	431c      	orrs	r4, r3
 8000b64:	40f9      	lsrs	r1, r7
 8000b66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b72:	0c20      	lsrs	r0, r4, #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fb09 1118 	mls	r1, r9, r8, r1
 8000b7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b80:	fb08 f00e 	mul.w	r0, r8, lr
 8000b84:	4288      	cmp	r0, r1
 8000b86:	fa02 f206 	lsl.w	r2, r2, r6
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b8>
 8000b8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b94:	f080 8088 	bcs.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f240 8085 	bls.w	8000ca8 <__udivmoddi4+0x2bc>
 8000b9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1a09      	subs	r1, r1, r0
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bac:	fb09 1110 	mls	r1, r9, r0, r1
 8000bb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb8:	458e      	cmp	lr, r1
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1e2>
 8000bbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc4:	d26c      	bcs.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bc6:	458e      	cmp	lr, r1
 8000bc8:	d96a      	bls.n	8000ca0 <__udivmoddi4+0x2b4>
 8000bca:	3802      	subs	r0, #2
 8000bcc:	4461      	add	r1, ip
 8000bce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000bd6:	eba1 010e 	sub.w	r1, r1, lr
 8000bda:	42a1      	cmp	r1, r4
 8000bdc:	46c8      	mov	r8, r9
 8000bde:	46a6      	mov	lr, r4
 8000be0:	d356      	bcc.n	8000c90 <__udivmoddi4+0x2a4>
 8000be2:	d053      	beq.n	8000c8c <__udivmoddi4+0x2a0>
 8000be4:	b15d      	cbz	r5, 8000bfe <__udivmoddi4+0x212>
 8000be6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bea:	eb61 010e 	sbc.w	r1, r1, lr
 8000bee:	fa01 f707 	lsl.w	r7, r1, r7
 8000bf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000bf6:	40f1      	lsrs	r1, r6
 8000bf8:	431f      	orrs	r7, r3
 8000bfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000bfe:	2600      	movs	r6, #0
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	40d8      	lsrs	r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	fa21 f303 	lsr.w	r3, r1, r3
 8000c14:	4091      	lsls	r1, r2
 8000c16:	4301      	orrs	r1, r0
 8000c18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1c:	fa1f fe8c 	uxth.w	lr, ip
 8000c20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c24:	fb07 3610 	mls	r6, r7, r0, r3
 8000c28:	0c0b      	lsrs	r3, r1, #16
 8000c2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c32:	429e      	cmp	r6, r3
 8000c34:	fa04 f402 	lsl.w	r4, r4, r2
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x260>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c42:	d22f      	bcs.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c44:	429e      	cmp	r6, r3
 8000c46:	d92d      	bls.n	8000ca4 <__udivmoddi4+0x2b8>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1b9b      	subs	r3, r3, r6
 8000c4e:	b289      	uxth	r1, r1
 8000c50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c54:	fb07 3316 	mls	r3, r7, r6, r3
 8000c58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c60:	428b      	cmp	r3, r1
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x28a>
 8000c64:	eb1c 0101 	adds.w	r1, ip, r1
 8000c68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c6c:	d216      	bcs.n	8000c9c <__udivmoddi4+0x2b0>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d914      	bls.n	8000c9c <__udivmoddi4+0x2b0>
 8000c72:	3e02      	subs	r6, #2
 8000c74:	4461      	add	r1, ip
 8000c76:	1ac9      	subs	r1, r1, r3
 8000c78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c7c:	e738      	b.n	8000af0 <__udivmoddi4+0x104>
 8000c7e:	462e      	mov	r6, r5
 8000c80:	4628      	mov	r0, r5
 8000c82:	e705      	b.n	8000a90 <__udivmoddi4+0xa4>
 8000c84:	4606      	mov	r6, r0
 8000c86:	e6e3      	b.n	8000a50 <__udivmoddi4+0x64>
 8000c88:	4618      	mov	r0, r3
 8000c8a:	e6f8      	b.n	8000a7e <__udivmoddi4+0x92>
 8000c8c:	454b      	cmp	r3, r9
 8000c8e:	d2a9      	bcs.n	8000be4 <__udivmoddi4+0x1f8>
 8000c90:	ebb9 0802 	subs.w	r8, r9, r2
 8000c94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c98:	3801      	subs	r0, #1
 8000c9a:	e7a3      	b.n	8000be4 <__udivmoddi4+0x1f8>
 8000c9c:	4646      	mov	r6, r8
 8000c9e:	e7ea      	b.n	8000c76 <__udivmoddi4+0x28a>
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	e794      	b.n	8000bce <__udivmoddi4+0x1e2>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	e7d1      	b.n	8000c4c <__udivmoddi4+0x260>
 8000ca8:	46d0      	mov	r8, sl
 8000caa:	e77b      	b.n	8000ba4 <__udivmoddi4+0x1b8>
 8000cac:	3b02      	subs	r3, #2
 8000cae:	4461      	add	r1, ip
 8000cb0:	e732      	b.n	8000b18 <__udivmoddi4+0x12c>
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	e709      	b.n	8000aca <__udivmoddi4+0xde>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	e742      	b.n	8000b42 <__udivmoddi4+0x156>

08000cbc <__aeabi_idiv0>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <ADS1115_init>:
	ADS1115_Config_t 	config;
};

//static void prepareConfigFrame(uint8_t *pOutFrame, ADS1115_Config_t config);

ADS1115_Handle_t* ADS1115_init(I2C_HandleTypeDef *hi2c, uint16_t Addr, ADS1115_Config_t config){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	4608      	mov	r0, r1
 8000cca:	4639      	mov	r1, r7
 8000ccc:	e881 000c 	stmia.w	r1, {r2, r3}
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	817b      	strh	r3, [r7, #10]
	ADS1115_Handle_t *pConfig = malloc(sizeof(ADS1115_Handle_t));
 8000cd4:	2010      	movs	r0, #16
 8000cd6:	f008 fe87 	bl	80099e8 <malloc>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	617b      	str	r3, [r7, #20]
	pConfig->hi2c = hi2c;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	601a      	str	r2, [r3, #0]
	pConfig->address = Addr;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	897a      	ldrh	r2, [r7, #10]
 8000ce8:	809a      	strh	r2, [r3, #4]
	pConfig->config = config;
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	1d9a      	adds	r2, r3, #6
 8000cee:	463b      	mov	r3, r7
 8000cf0:	cb03      	ldmia	r3!, {r0, r1}
 8000cf2:	6010      	str	r0, [r2, #0]
 8000cf4:	6051      	str	r1, [r2, #4]
	return pConfig;
 8000cf6:	697b      	ldr	r3, [r7, #20]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <ADS1115_updateConfig>:

void ADS1115_deinit(ADS1115_Handle_t* pConfig){
	free(pConfig);
}

void ADS1115_updateConfig(ADS1115_Handle_t *pConfig, ADS1115_Config_t config){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af02      	add	r7, sp, #8
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	e883 0006 	stmia.w	r3, {r1, r2}
	pConfig->config = config;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	1d9a      	adds	r2, r3, #6
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	cb03      	ldmia	r3!, {r0, r1}
 8000d16:	6010      	str	r0, [r2, #0]
 8000d18:	6051      	str	r1, [r2, #4]

	uint8_t bytes[3] = {0};
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <ADS1115_updateConfig+0x60>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	82bb      	strh	r3, [r7, #20]
 8000d20:	2300      	movs	r3, #0
 8000d22:	75bb      	strb	r3, [r7, #22]
	prepareConfigFrame(bytes, pConfig->config);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f107 0014 	add.w	r0, r7, #20
 8000d2a:	f8d3 1006 	ldr.w	r1, [r3, #6]
 8000d2e:	460a      	mov	r2, r1
 8000d30:	f8d3 100a 	ldr.w	r1, [r3, #10]
 8000d34:	460b      	mov	r3, r1
 8000d36:	4611      	mov	r1, r2
 8000d38:	461a      	mov	r2, r3
 8000d3a:	f000 f875 	bl	8000e28 <prepareConfigFrame>

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	6818      	ldr	r0, [r3, #0]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	889b      	ldrh	r3, [r3, #4]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	b299      	uxth	r1, r3
 8000d4a:	f107 0214 	add.w	r2, r7, #20
 8000d4e:	2364      	movs	r3, #100	; 0x64
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	2303      	movs	r3, #3
 8000d54:	f002 ffaa 	bl	8003cac <HAL_I2C_Master_Transmit>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	08009d8c 	.word	0x08009d8c

08000d64 <ADS1115_getData>:
	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);

	return ADS1115_getData(pConfig);
}

int16_t ADS1115_getData(ADS1115_Handle_t *pConfig){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af02      	add	r7, sp, #8
 8000d6a:	6078      	str	r0, [r7, #4]
	uint8_t bytes[2] = {0};
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	81bb      	strh	r3, [r7, #12]
	bytes[0] = 0x00;
 8000d70:	2300      	movs	r3, #0
 8000d72:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 1, 50);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6818      	ldr	r0, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	889b      	ldrh	r3, [r3, #4]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	b299      	uxth	r1, r3
 8000d80:	f107 020c 	add.w	r2, r7, #12
 8000d84:	2332      	movs	r3, #50	; 0x32
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	f002 ff8f 	bl	8003cac <HAL_I2C_Master_Transmit>

	if(HAL_I2C_Master_Receive(pConfig->hi2c, (pConfig->address << 1), bytes, 2, 50) != HAL_OK)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6818      	ldr	r0, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	889b      	ldrh	r3, [r3, #4]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	b299      	uxth	r1, r3
 8000d9a:	f107 020c 	add.w	r2, r7, #12
 8000d9e:	2332      	movs	r3, #50	; 0x32
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2302      	movs	r3, #2
 8000da4:	f003 f880 	bl	8003ea8 <HAL_I2C_Master_Receive>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <ADS1115_getData+0x4e>
		return 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e008      	b.n	8000dc4 <ADS1115_getData+0x60>

	int16_t readValue = ((bytes[0] << 8) | bytes[1]);
 8000db2:	7b3b      	ldrb	r3, [r7, #12]
 8000db4:	021b      	lsls	r3, r3, #8
 8000db6:	b21a      	sxth	r2, r3
 8000db8:	7b7b      	ldrb	r3, [r7, #13]
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	81fb      	strh	r3, [r7, #14]

	return readValue;
 8000dc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <ADS1115_startContinousMode>:

void ADS1115_setConversionReadyPin(ADS1115_Handle_t* pConfig){
	ADS1115_setThresholds(pConfig, 0x0000, 0xFFFF);
}

void ADS1115_startContinousMode(ADS1115_Handle_t* pConfig){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af02      	add	r7, sp, #8
 8000dd2:	6078      	str	r0, [r7, #4]
	uint8_t bytes[3] = {0};
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <ADS1115_startContinousMode+0x58>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	82bb      	strh	r3, [r7, #20]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	75bb      	strb	r3, [r7, #22]

	ADS1115_Config_t configReg = pConfig->config;
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	3206      	adds	r2, #6
 8000de6:	6810      	ldr	r0, [r2, #0]
 8000de8:	6851      	ldr	r1, [r2, #4]
 8000dea:	c303      	stmia	r3!, {r0, r1}
	configReg.operatingMode = MODE_CONTINOUS;
 8000dec:	2300      	movs	r3, #0
 8000dee:	73bb      	strb	r3, [r7, #14]
	prepareConfigFrame(bytes, configReg);
 8000df0:	f107 0014 	add.w	r0, r7, #20
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000dfc:	f000 f814 	bl	8000e28 <prepareConfigFrame>

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6818      	ldr	r0, [r3, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	889b      	ldrh	r3, [r3, #4]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	b299      	uxth	r1, r3
 8000e0c:	f107 0214 	add.w	r2, r7, #20
 8000e10:	2364      	movs	r3, #100	; 0x64
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	2303      	movs	r3, #3
 8000e16:	f002 ff49 	bl	8003cac <HAL_I2C_Master_Transmit>
}
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	08009d8c 	.word	0x08009d8c

08000e28 <prepareConfigFrame>:
	prepareConfigFrame(bytes, configReg);

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
}

void prepareConfigFrame(uint8_t *pOutFrame, ADS1115_Config_t config){
 8000e28:	b480      	push	{r7}
 8000e2a:	b087      	sub	sp, #28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t temp[3] = {0};
 8000e36:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <prepareConfigFrame+0xac>)
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	82bb      	strh	r3, [r7, #20]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	75bb      	strb	r3, [r7, #22]
	pOutFrame[0] = 0x01;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2201      	movs	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
	pOutFrame[1] |= (config.channel << 4) | (config.pgaConfig << 1)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	b25a      	sxtb	r2, r3
 8000e4e:	793b      	ldrb	r3, [r7, #4]
 8000e50:	011b      	lsls	r3, r3, #4
 8000e52:	b259      	sxtb	r1, r3
 8000e54:	797b      	ldrb	r3, [r7, #5]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	430b      	orrs	r3, r1
 8000e5c:	b259      	sxtb	r1, r3
					| (config.operatingMode << 0);
 8000e5e:	79bb      	ldrb	r3, [r7, #6]
 8000e60:	b25b      	sxtb	r3, r3
 8000e62:	430b      	orrs	r3, r1
 8000e64:	b25b      	sxtb	r3, r3
	pOutFrame[1] |= (config.channel << 4) | (config.pgaConfig << 1)
 8000e66:	4313      	orrs	r3, r2
 8000e68:	b25a      	sxtb	r2, r3
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	701a      	strb	r2, [r3, #0]
	pOutFrame[2] |= (config.dataRate << 5) | (config.compareMode << 4) | (config.polarityMode << 3)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	3302      	adds	r3, #2
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b25a      	sxtb	r2, r3
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	015b      	lsls	r3, r3, #5
 8000e7e:	b259      	sxtb	r1, r3
 8000e80:	7a3b      	ldrb	r3, [r7, #8]
 8000e82:	011b      	lsls	r3, r3, #4
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	430b      	orrs	r3, r1
 8000e88:	b259      	sxtb	r1, r3
 8000e8a:	7a7b      	ldrb	r3, [r7, #9]
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	430b      	orrs	r3, r1
 8000e92:	b259      	sxtb	r1, r3
					| (config.latchingMode << 2) | (config.queueComparator << 1);
 8000e94:	7abb      	ldrb	r3, [r7, #10]
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	430b      	orrs	r3, r1
 8000e9c:	b259      	sxtb	r1, r3
 8000e9e:	7afb      	ldrb	r3, [r7, #11]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	b25b      	sxtb	r3, r3
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	b25b      	sxtb	r3, r3
	pOutFrame[2] |= (config.dataRate << 5) | (config.compareMode << 4) | (config.polarityMode << 3)
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b25a      	sxtb	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	3302      	adds	r3, #2
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	701a      	strb	r2, [r3, #0]
	temp[0] = pOutFrame[0];
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	753b      	strb	r3, [r7, #20]
	temp[1] = pOutFrame[1];
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	785b      	ldrb	r3, [r3, #1]
 8000ebe:	757b      	strb	r3, [r7, #21]
	temp[2] = pOutFrame[2];
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	789b      	ldrb	r3, [r3, #2]
 8000ec4:	75bb      	strb	r3, [r7, #22]
}
 8000ec6:	bf00      	nop
 8000ec8:	371c      	adds	r7, #28
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	08009d8c 	.word	0x08009d8c

08000ed8 <MCP4725_init>:

    Constructor
*/
/**************************************************************************/ 
MCP4725 MCP4725_init(I2C_HandleTypeDef* hi2c, MCP4725Ax_ADDRESS addr, float refV)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	ed87 0a00 	vstr	s0, [r7]
 8000ee8:	71fb      	strb	r3, [r7, #7]
	MCP4725 _MCP4725;

	_MCP4725._i2cAddress = (uint16_t)(addr<<1);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	753b      	strb	r3, [r7, #20]
	_MCP4725.hi2c = hi2c;
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	613b      	str	r3, [r7, #16]

	MCP4725_setReferenceVoltage(&_MCP4725, refV); //set _refVoltage & _bitsPerVolt variables
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	ed97 0a00 	vldr	s0, [r7]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f822 	bl	8000f48 <MCP4725_setReferenceVoltage>

	return _MCP4725;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	461c      	mov	r4, r3
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd90      	pop	{r4, r7, pc}

08000f1a <MCP4725_isConnected>:

    Check the connection 
*/
/**************************************************************************/ 
uint8_t MCP4725_isConnected(MCP4725* _MCP4725)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
	return HAL_I2C_IsDeviceReady(_MCP4725->hi2c, _MCP4725->_i2cAddress, 2, 100) == HAL_OK;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6818      	ldr	r0, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	791b      	ldrb	r3, [r3, #4]
 8000f2a:	b299      	uxth	r1, r3
 8000f2c:	2364      	movs	r3, #100	; 0x64
 8000f2e:	2202      	movs	r2, #2
 8000f30:	f003 fd00 	bl	8004934 <HAL_I2C_IsDeviceReady>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	bf0c      	ite	eq
 8000f3a:	2301      	moveq	r3, #1
 8000f3c:	2300      	movne	r3, #0
 8000f3e:	b2db      	uxtb	r3, r3
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <MCP4725_setReferenceVoltage>:

    Set reference voltage
*/
/**************************************************************************/
void MCP4725_setReferenceVoltage(MCP4725* _MCP4725, float value)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	ed87 0a00 	vstr	s0, [r7]
   if   (value == 0) _MCP4725->_refVoltage = MCP4725_REFERENCE_VOLTAGE; //sanity check, avoid division by zero
 8000f54:	edd7 7a00 	vldr	s15, [r7]
 8000f58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f60:	d103      	bne.n	8000f6a <MCP4725_setReferenceVoltage+0x22>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a0c      	ldr	r2, [pc, #48]	; (8000f98 <MCP4725_setReferenceVoltage+0x50>)
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	e002      	b.n	8000f70 <MCP4725_setReferenceVoltage+0x28>
   else              _MCP4725->_refVoltage = value;    
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	609a      	str	r2, [r3, #8]

   _MCP4725->_bitsPerVolt = (float)MCP4725_STEPS / _MCP4725->_refVoltage;         //TODO: check accuracy with +0.5
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f76:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000f9c <MCP4725_setReferenceVoltage+0x54>
 8000f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f82:	ee17 3a90 	vmov	r3, s15
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	819a      	strh	r2, [r3, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	40533333 	.word	0x40533333
 8000f9c:	45800000 	.word	0x45800000

08000fa0 <MCP4725_setValue>:
      - "MCP4725_POWER_DOWN_100KOHM"..power down on with 100 kOhm to ground
      - "MCP4725_POWER_DOWN_500KOHM"..power down on with 500kOhm to ground
*/
/**************************************************************************/ 
uint8_t MCP4725_setValue(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	4608      	mov	r0, r1
 8000faa:	4611      	mov	r1, r2
 8000fac:	461a      	mov	r2, r3
 8000fae:	4603      	mov	r3, r0
 8000fb0:	807b      	strh	r3, [r7, #2]
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	707b      	strb	r3, [r7, #1]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	703b      	strb	r3, [r7, #0]
  #ifndef MCP4725_DISABLE_SANITY_CHECK
  if (value > MCP4725_MAX_VALUE) value = MCP4725_MAX_VALUE; //make sure value never exceeds threshold
  #endif

  return MCP4725_writeComand(_MCP4725, value, mode, powerType);
 8000fba:	783b      	ldrb	r3, [r7, #0]
 8000fbc:	787a      	ldrb	r2, [r7, #1]
 8000fbe:	8879      	ldrh	r1, [r7, #2]
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 f822 	bl	800100a <MCP4725_writeComand>
 8000fc6:	4603      	mov	r3, r0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <MCP4725_getEepromBusyFlag>:
      is ignored
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint8_t MCP4725_getEepromBusyFlag(MCP4725* _MCP4725)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint16_t value = MCP4725_readRegister(_MCP4725, MCP4725_READ_SETTINGS); //BSY,POR,xx,xx,xx,PD1,PD0,xx
 8000fd8:	2101      	movs	r1, #1
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 f895 	bl	800110a <MCP4725_readRegister>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	81fb      	strh	r3, [r7, #14]

  if (value != MCP4725_ERROR) return (value & 0x80)==0x80;		//1 - completed, 0 - incompleted
 8000fe4:	89fb      	ldrh	r3, [r7, #14]
 8000fe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d008      	beq.n	8001000 <MCP4725_getEepromBusyFlag+0x30>
 8000fee:	89fb      	ldrh	r3, [r7, #14]
 8000ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	bf14      	ite	ne
 8000ff8:	2301      	movne	r3, #1
 8000ffa:	2300      	moveq	r3, #0
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	e000      	b.n	8001002 <MCP4725_getEepromBusyFlag+0x32>
                              return 0;										//collision on i2c bus
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <MCP4725_writeComand>:
    - "MCP4725_POWER_DOWN_500KOHM"
      1,  1
*/
/**************************************************************************/ 
uint8_t	MCP4725_writeComand(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af02      	add	r7, sp, #8
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	4608      	mov	r0, r1
 8001014:	4611      	mov	r1, r2
 8001016:	461a      	mov	r2, r3
 8001018:	4603      	mov	r3, r0
 800101a:	807b      	strh	r3, [r7, #2]
 800101c:	460b      	mov	r3, r1
 800101e:	707b      	strb	r3, [r7, #1]
 8001020:	4613      	mov	r3, r2
 8001022:	703b      	strb	r3, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef I2C_Stat;
  //Wire.beginTransmission(_i2cAddress);

  switch (mode)
 8001024:	787b      	ldrb	r3, [r7, #1]
 8001026:	2b60      	cmp	r3, #96	; 0x60
 8001028:	d028      	beq.n	800107c <MCP4725_writeComand+0x72>
 800102a:	2b60      	cmp	r3, #96	; 0x60
 800102c:	dc4a      	bgt.n	80010c4 <MCP4725_writeComand+0xba>
 800102e:	2b00      	cmp	r3, #0
 8001030:	d002      	beq.n	8001038 <MCP4725_writeComand+0x2e>
 8001032:	2b40      	cmp	r3, #64	; 0x40
 8001034:	d022      	beq.n	800107c <MCP4725_writeComand+0x72>
 8001036:	e045      	b.n	80010c4 <MCP4725_writeComand+0xba>
    case MCP4725_FAST_MODE:                                            //see MCP4725 datasheet on p.18
		
      //Wire.send(mode | (powerType << 4)  | highByte(value));
      //Wire.send(lowByte(value));
		
			buffer[0] = mode | (powerType << 4)  | highByte(value);
 8001038:	783b      	ldrb	r3, [r7, #0]
 800103a:	011b      	lsls	r3, r3, #4
 800103c:	b25a      	sxtb	r2, r3
 800103e:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001042:	4313      	orrs	r3, r2
 8001044:	b25a      	sxtb	r2, r3
 8001046:	887b      	ldrh	r3, [r7, #2]
 8001048:	0a1b      	lsrs	r3, r3, #8
 800104a:	b29b      	uxth	r3, r3
 800104c:	b25b      	sxtb	r3, r3
 800104e:	4313      	orrs	r3, r2
 8001050:	b25b      	sxtb	r3, r3
 8001052:	b2db      	uxtb	r3, r3
 8001054:	733b      	strb	r3, [r7, #12]
			buffer[1] = lowByte(value);
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	737b      	strb	r3, [r7, #13]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 2, 1000);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	791b      	ldrb	r3, [r3, #4]
 8001064:	b299      	uxth	r1, r3
 8001066:	f107 020c 	add.w	r2, r7, #12
 800106a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2302      	movs	r3, #2
 8001072:	f002 fe1b 	bl	8003cac <HAL_I2C_Master_Transmit>
 8001076:	4603      	mov	r3, r0
 8001078:	73fb      	strb	r3, [r7, #15]
		
      break;
 800107a:	e023      	b.n	80010c4 <MCP4725_writeComand+0xba>

    case MCP4725_REGISTER_MODE: case MCP4725_EEPROM_MODE:              //see MCP4725 datasheet on p.19
      value = value << 4;                                              //D11,D10,D9,D8,D7,D6,D5,D4,  D3,D2,D1,D0,xx,xx,xx,xx
 800107c:	887b      	ldrh	r3, [r7, #2]
 800107e:	011b      	lsls	r3, r3, #4
 8001080:	807b      	strh	r3, [r7, #2]
      //Wire.send(mode  | (powerType << 1));
      //Wire.send(highByte(value));
      //Wire.send(lowByte(value));
      
			buffer[0] = mode  | (powerType << 1);
 8001082:	783b      	ldrb	r3, [r7, #0]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	b25a      	sxtb	r2, r3
 8001088:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800108c:	4313      	orrs	r3, r2
 800108e:	b25b      	sxtb	r3, r3
 8001090:	b2db      	uxtb	r3, r3
 8001092:	733b      	strb	r3, [r7, #12]
			buffer[1] = highByte(value);
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	0a1b      	lsrs	r3, r3, #8
 8001098:	b29b      	uxth	r3, r3
 800109a:	b2db      	uxtb	r3, r3
 800109c:	737b      	strb	r3, [r7, #13]
			buffer[2] = lowByte(value);
 800109e:	887b      	ldrh	r3, [r7, #2]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	73bb      	strb	r3, [r7, #14]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 3, 1000);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	791b      	ldrb	r3, [r3, #4]
 80010ac:	b299      	uxth	r1, r3
 80010ae:	f107 020c 	add.w	r2, r7, #12
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	2303      	movs	r3, #3
 80010ba:	f002 fdf7 	bl	8003cac <HAL_I2C_Master_Transmit>
 80010be:	4603      	mov	r3, r0
 80010c0:	73fb      	strb	r3, [r7, #15]
		
			break;
 80010c2:	bf00      	nop
  }

  if (I2C_Stat != HAL_OK) return 0;                   //send data over i2c & check for collision on i2c bus
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MCP4725_writeComand+0xc4>
 80010ca:	2300      	movs	r3, #0
 80010cc:	e019      	b.n	8001102 <MCP4725_writeComand+0xf8>

  if (mode == MCP4725_EEPROM_MODE)
 80010ce:	787b      	ldrb	r3, [r7, #1]
 80010d0:	2b60      	cmp	r3, #96	; 0x60
 80010d2:	d115      	bne.n	8001100 <MCP4725_writeComand+0xf6>
  {
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff7b 	bl	8000fd0 <MCP4725_getEepromBusyFlag>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d101      	bne.n	80010e4 <MCP4725_writeComand+0xda>
 80010e0:	2301      	movs	r3, #1
 80010e2:	e00e      	b.n	8001102 <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //typical EEPROM write time 25 msec
 80010e4:	2019      	movs	r0, #25
 80010e6:	f001 fe4f 	bl	8002d88 <HAL_Delay>
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ff70 	bl	8000fd0 <MCP4725_getEepromBusyFlag>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d101      	bne.n	80010fa <MCP4725_writeComand+0xf0>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e003      	b.n	8001102 <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //maximum EEPROM write time 25 + 25 = 50 msec
 80010fa:	2019      	movs	r0, #25
 80010fc:	f001 fe44 	bl	8002d88 <HAL_Delay>
  }

  return 1;                                                         //success!!!
 8001100:	2301      	movs	r3, #1
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <MCP4725_readRegister>:
      ------ Settings data ------  ---------------- DAC register data ---------------  ------------------- EEPROM data --------------------
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint16_t MCP4725_readRegister(MCP4725* _MCP4725, MCP4725_READ_TYPE dataType)
{
 800110a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af02      	add	r7, sp, #8
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
 8001118:	466b      	mov	r3, sp
 800111a:	461e      	mov	r6, r3
  uint16_t value = dataType;                             //convert enum to integer to avoid compiler warnings                                    
 800111c:	78fb      	ldrb	r3, [r7, #3]
 800111e:	82bb      	strh	r3, [r7, #20]
	uint16_t ret_val = 0 ;
 8001120:	2300      	movs	r3, #0
 8001122:	82fb      	strh	r3, [r7, #22]
	uint8_t buffer[dataType];
 8001124:	78f9      	ldrb	r1, [r7, #3]
 8001126:	460b      	mov	r3, r1
 8001128:	3b01      	subs	r3, #1
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	b2cb      	uxtb	r3, r1
 800112e:	2200      	movs	r2, #0
 8001130:	4698      	mov	r8, r3
 8001132:	4691      	mov	r9, r2
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	f04f 0300 	mov.w	r3, #0
 800113c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001140:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001144:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001148:	b2cb      	uxtb	r3, r1
 800114a:	2200      	movs	r2, #0
 800114c:	461c      	mov	r4, r3
 800114e:	4615      	mov	r5, r2
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	f04f 0300 	mov.w	r3, #0
 8001158:	00eb      	lsls	r3, r5, #3
 800115a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800115e:	00e2      	lsls	r2, r4, #3
 8001160:	460b      	mov	r3, r1
 8001162:	3307      	adds	r3, #7
 8001164:	08db      	lsrs	r3, r3, #3
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	ebad 0d03 	sub.w	sp, sp, r3
 800116c:	ab02      	add	r3, sp, #8
 800116e:	3300      	adds	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef I2C_Stat;
	
	I2C_Stat = HAL_I2C_Master_Receive(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, dataType, 1000);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6818      	ldr	r0, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	791b      	ldrb	r3, [r3, #4]
 800117a:	b299      	uxth	r1, r3
 800117c:	78fb      	ldrb	r3, [r7, #3]
 800117e:	b29b      	uxth	r3, r3
 8001180:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001184:	9200      	str	r2, [sp, #0]
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	f002 fe8e 	bl	8003ea8 <HAL_I2C_Master_Receive>
 800118c:	4603      	mov	r3, r0
 800118e:	72fb      	strb	r3, [r7, #11]

  if (I2C_Stat != HAL_OK) return MCP4725_ERROR;
 8001190:	7afb      	ldrb	r3, [r7, #11]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d002      	beq.n	800119c <MCP4725_readRegister+0x92>
 8001196:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800119a:	e01f      	b.n	80011dc <MCP4725_readRegister+0xd2>


  /* read data from buffer */
  switch (dataType)
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	2b05      	cmp	r3, #5
 80011a0:	d00a      	beq.n	80011b8 <MCP4725_readRegister+0xae>
 80011a2:	2b05      	cmp	r3, #5
 80011a4:	dc19      	bgt.n	80011da <MCP4725_readRegister+0xd0>
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d002      	beq.n	80011b0 <MCP4725_readRegister+0xa6>
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d004      	beq.n	80011b8 <MCP4725_readRegister+0xae>
 80011ae:	e014      	b.n	80011da <MCP4725_readRegister+0xd0>
  {
    case MCP4725_READ_SETTINGS:
      ret_val = buffer[0];
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	82fb      	strh	r3, [r7, #22]

      break;
 80011b6:	e010      	b.n	80011da <MCP4725_readRegister+0xd0>

    case MCP4725_READ_DAC_REG: case MCP4725_READ_EEPROM:

      ret_val = buffer[value-2];
 80011b8:	8abb      	ldrh	r3, [r7, #20]
 80011ba:	3b02      	subs	r3, #2
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	5cd3      	ldrb	r3, [r2, r3]
 80011c0:	82fb      	strh	r3, [r7, #22]
      ret_val = (ret_val << 8) | buffer[value-1];
 80011c2:	8afb      	ldrh	r3, [r7, #22]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	8abb      	ldrh	r3, [r7, #20]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	68f9      	ldr	r1, [r7, #12]
 80011ce:	5ccb      	ldrb	r3, [r1, r3]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	82fb      	strh	r3, [r7, #22]
      break;
 80011d8:	bf00      	nop
  }

  return ret_val;
 80011da:	8afb      	ldrh	r3, [r7, #22]
 80011dc:	46b5      	mov	sp, r6
}
 80011de:	4618      	mov	r0, r3
 80011e0:	371c      	adds	r7, #28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080011e8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af04      	add	r7, sp, #16
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	9302      	str	r3, [sp, #8]
 8001208:	2301      	movs	r3, #1
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	1dfb      	adds	r3, r7, #7
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2301      	movs	r3, #1
 8001212:	2200      	movs	r2, #0
 8001214:	2178      	movs	r1, #120	; 0x78
 8001216:	4803      	ldr	r0, [pc, #12]	; (8001224 <ssd1306_WriteCommand+0x2c>)
 8001218:	f003 f86c 	bl	80042f4 <HAL_I2C_Mem_Write>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000580 	.word	0x20000580

08001228 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af04      	add	r7, sp, #16
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b29b      	uxth	r3, r3
 8001236:	f04f 32ff 	mov.w	r2, #4294967295
 800123a:	9202      	str	r2, [sp, #8]
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	2240      	movs	r2, #64	; 0x40
 8001246:	2178      	movs	r1, #120	; 0x78
 8001248:	4803      	ldr	r0, [pc, #12]	; (8001258 <ssd1306_WriteData+0x30>)
 800124a:	f003 f853 	bl	80042f4 <HAL_I2C_Mem_Write>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000580 	.word	0x20000580

0800125c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001260:	f7ff ffc2 	bl	80011e8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001264:	2064      	movs	r0, #100	; 0x64
 8001266:	f001 fd8f 	bl	8002d88 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800126a:	2000      	movs	r0, #0
 800126c:	f000 f9da 	bl	8001624 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001270:	2020      	movs	r0, #32
 8001272:	f7ff ffc1 	bl	80011f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff ffbe 	bl	80011f8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800127c:	20b0      	movs	r0, #176	; 0xb0
 800127e:	f7ff ffbb 	bl	80011f8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001282:	20c8      	movs	r0, #200	; 0xc8
 8001284:	f7ff ffb8 	bl	80011f8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff ffb5 	bl	80011f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800128e:	2010      	movs	r0, #16
 8001290:	f7ff ffb2 	bl	80011f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001294:	2040      	movs	r0, #64	; 0x40
 8001296:	f7ff ffaf 	bl	80011f8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800129a:	20ff      	movs	r0, #255	; 0xff
 800129c:	f000 f9ae 	bl	80015fc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80012a0:	20a1      	movs	r0, #161	; 0xa1
 80012a2:	f7ff ffa9 	bl	80011f8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80012a6:	20a6      	movs	r0, #166	; 0xa6
 80012a8:	f7ff ffa6 	bl	80011f8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80012ac:	20a8      	movs	r0, #168	; 0xa8
 80012ae:	f7ff ffa3 	bl	80011f8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80012b2:	203f      	movs	r0, #63	; 0x3f
 80012b4:	f7ff ffa0 	bl	80011f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80012b8:	20a4      	movs	r0, #164	; 0xa4
 80012ba:	f7ff ff9d 	bl	80011f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80012be:	20d3      	movs	r0, #211	; 0xd3
 80012c0:	f7ff ff9a 	bl	80011f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff ff97 	bl	80011f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80012ca:	20d5      	movs	r0, #213	; 0xd5
 80012cc:	f7ff ff94 	bl	80011f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80012d0:	20f0      	movs	r0, #240	; 0xf0
 80012d2:	f7ff ff91 	bl	80011f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80012d6:	20d9      	movs	r0, #217	; 0xd9
 80012d8:	f7ff ff8e 	bl	80011f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80012dc:	2022      	movs	r0, #34	; 0x22
 80012de:	f7ff ff8b 	bl	80011f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80012e2:	20da      	movs	r0, #218	; 0xda
 80012e4:	f7ff ff88 	bl	80011f8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80012e8:	2012      	movs	r0, #18
 80012ea:	f7ff ff85 	bl	80011f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80012ee:	20db      	movs	r0, #219	; 0xdb
 80012f0:	f7ff ff82 	bl	80011f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80012f4:	2020      	movs	r0, #32
 80012f6:	f7ff ff7f 	bl	80011f8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80012fa:	208d      	movs	r0, #141	; 0x8d
 80012fc:	f7ff ff7c 	bl	80011f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001300:	2014      	movs	r0, #20
 8001302:	f7ff ff79 	bl	80011f8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001306:	2001      	movs	r0, #1
 8001308:	f000 f98c 	bl	8001624 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800130c:	2000      	movs	r0, #0
 800130e:	f000 f80f 	bl	8001330 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001312:	f000 f831 	bl	8001378 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <ssd1306_Init+0xd0>)
 8001318:	2200      	movs	r2, #0
 800131a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <ssd1306_Init+0xd0>)
 800131e:	2200      	movs	r2, #0
 8001320:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001322:	4b02      	ldr	r3, [pc, #8]	; (800132c <ssd1306_Init+0xd0>)
 8001324:	2201      	movs	r2, #1
 8001326:	711a      	strb	r2, [r3, #4]
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	2000049c 	.word	0x2000049c

08001330 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	e00d      	b.n	800135c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <ssd1306_Fill+0x1a>
 8001346:	2100      	movs	r1, #0
 8001348:	e000      	b.n	800134c <ssd1306_Fill+0x1c>
 800134a:	21ff      	movs	r1, #255	; 0xff
 800134c:	4a09      	ldr	r2, [pc, #36]	; (8001374 <ssd1306_Fill+0x44>)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4413      	add	r3, r2
 8001352:	460a      	mov	r2, r1
 8001354:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	3301      	adds	r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001362:	d3ed      	bcc.n	8001340 <ssd1306_Fill+0x10>
    }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	2000009c 	.word	0x2000009c

08001378 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800137e:	2300      	movs	r3, #0
 8001380:	71fb      	strb	r3, [r7, #7]
 8001382:	e016      	b.n	80013b2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	3b50      	subs	r3, #80	; 0x50
 8001388:	b2db      	uxtb	r3, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ff34 	bl	80011f8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001390:	2000      	movs	r0, #0
 8001392:	f7ff ff31 	bl	80011f8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001396:	2010      	movs	r0, #16
 8001398:	f7ff ff2e 	bl	80011f8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	01db      	lsls	r3, r3, #7
 80013a0:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <ssd1306_UpdateScreen+0x4c>)
 80013a2:	4413      	add	r3, r2
 80013a4:	2180      	movs	r1, #128	; 0x80
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff ff3e 	bl	8001228 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	3301      	adds	r3, #1
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2b07      	cmp	r3, #7
 80013b6:	d9e5      	bls.n	8001384 <ssd1306_UpdateScreen+0xc>
    }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	2000009c 	.word	0x2000009c

080013c8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
 80013d2:	460b      	mov	r3, r1
 80013d4:	71bb      	strb	r3, [r7, #6]
 80013d6:	4613      	mov	r3, r2
 80013d8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	db3d      	blt.n	800145e <ssd1306_DrawPixel+0x96>
 80013e2:	79bb      	ldrb	r3, [r7, #6]
 80013e4:	2b3f      	cmp	r3, #63	; 0x3f
 80013e6:	d83a      	bhi.n	800145e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80013e8:	797b      	ldrb	r3, [r7, #5]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d11a      	bne.n	8001424 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80013ee:	79fa      	ldrb	r2, [r7, #7]
 80013f0:	79bb      	ldrb	r3, [r7, #6]
 80013f2:	08db      	lsrs	r3, r3, #3
 80013f4:	b2d8      	uxtb	r0, r3
 80013f6:	4603      	mov	r3, r0
 80013f8:	01db      	lsls	r3, r3, #7
 80013fa:	4413      	add	r3, r2
 80013fc:	4a1b      	ldr	r2, [pc, #108]	; (800146c <ssd1306_DrawPixel+0xa4>)
 80013fe:	5cd3      	ldrb	r3, [r2, r3]
 8001400:	b25a      	sxtb	r2, r3
 8001402:	79bb      	ldrb	r3, [r7, #6]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	2101      	movs	r1, #1
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	b25b      	sxtb	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b259      	sxtb	r1, r3
 8001414:	79fa      	ldrb	r2, [r7, #7]
 8001416:	4603      	mov	r3, r0
 8001418:	01db      	lsls	r3, r3, #7
 800141a:	4413      	add	r3, r2
 800141c:	b2c9      	uxtb	r1, r1
 800141e:	4a13      	ldr	r2, [pc, #76]	; (800146c <ssd1306_DrawPixel+0xa4>)
 8001420:	54d1      	strb	r1, [r2, r3]
 8001422:	e01d      	b.n	8001460 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001424:	79fa      	ldrb	r2, [r7, #7]
 8001426:	79bb      	ldrb	r3, [r7, #6]
 8001428:	08db      	lsrs	r3, r3, #3
 800142a:	b2d8      	uxtb	r0, r3
 800142c:	4603      	mov	r3, r0
 800142e:	01db      	lsls	r3, r3, #7
 8001430:	4413      	add	r3, r2
 8001432:	4a0e      	ldr	r2, [pc, #56]	; (800146c <ssd1306_DrawPixel+0xa4>)
 8001434:	5cd3      	ldrb	r3, [r2, r3]
 8001436:	b25a      	sxtb	r2, r3
 8001438:	79bb      	ldrb	r3, [r7, #6]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	2101      	movs	r1, #1
 8001440:	fa01 f303 	lsl.w	r3, r1, r3
 8001444:	b25b      	sxtb	r3, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	b25b      	sxtb	r3, r3
 800144a:	4013      	ands	r3, r2
 800144c:	b259      	sxtb	r1, r3
 800144e:	79fa      	ldrb	r2, [r7, #7]
 8001450:	4603      	mov	r3, r0
 8001452:	01db      	lsls	r3, r3, #7
 8001454:	4413      	add	r3, r2
 8001456:	b2c9      	uxtb	r1, r1
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <ssd1306_DrawPixel+0xa4>)
 800145a:	54d1      	strb	r1, [r2, r3]
 800145c:	e000      	b.n	8001460 <ssd1306_DrawPixel+0x98>
        return;
 800145e:	bf00      	nop
    }
}
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	2000009c 	.word	0x2000009c

08001470 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b089      	sub	sp, #36	; 0x24
 8001474:	af00      	add	r7, sp, #0
 8001476:	4604      	mov	r4, r0
 8001478:	1d38      	adds	r0, r7, #4
 800147a:	e880 0006 	stmia.w	r0, {r1, r2}
 800147e:	461a      	mov	r2, r3
 8001480:	4623      	mov	r3, r4
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	4613      	mov	r3, r2
 8001486:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	2b1f      	cmp	r3, #31
 800148c:	d902      	bls.n	8001494 <ssd1306_WriteChar+0x24>
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	2b7e      	cmp	r3, #126	; 0x7e
 8001492:	d901      	bls.n	8001498 <ssd1306_WriteChar+0x28>
        return 0;
 8001494:	2300      	movs	r3, #0
 8001496:	e06d      	b.n	8001574 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001498:	4b38      	ldr	r3, [pc, #224]	; (800157c <ssd1306_WriteChar+0x10c>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	793b      	ldrb	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	2b80      	cmp	r3, #128	; 0x80
 80014a4:	dc06      	bgt.n	80014b4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80014a6:	4b35      	ldr	r3, [pc, #212]	; (800157c <ssd1306_WriteChar+0x10c>)
 80014a8:	885b      	ldrh	r3, [r3, #2]
 80014aa:	461a      	mov	r2, r3
 80014ac:	797b      	ldrb	r3, [r7, #5]
 80014ae:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80014b0:	2b40      	cmp	r3, #64	; 0x40
 80014b2:	dd01      	ble.n	80014b8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	e05d      	b.n	8001574 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	e04c      	b.n	8001558 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	3b20      	subs	r3, #32
 80014c4:	7979      	ldrb	r1, [r7, #5]
 80014c6:	fb01 f303 	mul.w	r3, r1, r3
 80014ca:	4619      	mov	r1, r3
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	440b      	add	r3, r1
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4413      	add	r3, r2
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80014d8:	2300      	movs	r3, #0
 80014da:	61bb      	str	r3, [r7, #24]
 80014dc:	e034      	b.n	8001548 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d012      	beq.n	8001514 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80014ee:	4b23      	ldr	r3, [pc, #140]	; (800157c <ssd1306_WriteChar+0x10c>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	4413      	add	r3, r2
 80014fa:	b2d8      	uxtb	r0, r3
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <ssd1306_WriteChar+0x10c>)
 80014fe:	885b      	ldrh	r3, [r3, #2]
 8001500:	b2da      	uxtb	r2, r3
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	4413      	add	r3, r2
 8001508:	b2db      	uxtb	r3, r3
 800150a:	7bba      	ldrb	r2, [r7, #14]
 800150c:	4619      	mov	r1, r3
 800150e:	f7ff ff5b 	bl	80013c8 <ssd1306_DrawPixel>
 8001512:	e016      	b.n	8001542 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <ssd1306_WriteChar+0x10c>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	4413      	add	r3, r2
 8001520:	b2d8      	uxtb	r0, r3
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <ssd1306_WriteChar+0x10c>)
 8001524:	885b      	ldrh	r3, [r3, #2]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	4413      	add	r3, r2
 800152e:	b2d9      	uxtb	r1, r3
 8001530:	7bbb      	ldrb	r3, [r7, #14]
 8001532:	2b00      	cmp	r3, #0
 8001534:	bf0c      	ite	eq
 8001536:	2301      	moveq	r3, #1
 8001538:	2300      	movne	r3, #0
 800153a:	b2db      	uxtb	r3, r3
 800153c:	461a      	mov	r2, r3
 800153e:	f7ff ff43 	bl	80013c8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	3301      	adds	r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	793b      	ldrb	r3, [r7, #4]
 800154a:	461a      	mov	r2, r3
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	4293      	cmp	r3, r2
 8001550:	d3c5      	bcc.n	80014de <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3301      	adds	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	797b      	ldrb	r3, [r7, #5]
 800155a:	461a      	mov	r2, r3
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	4293      	cmp	r3, r2
 8001560:	d3ad      	bcc.n	80014be <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <ssd1306_WriteChar+0x10c>)
 8001564:	881a      	ldrh	r2, [r3, #0]
 8001566:	793b      	ldrb	r3, [r7, #4]
 8001568:	b29b      	uxth	r3, r3
 800156a:	4413      	add	r3, r2
 800156c:	b29a      	uxth	r2, r3
 800156e:	4b03      	ldr	r3, [pc, #12]	; (800157c <ssd1306_WriteChar+0x10c>)
 8001570:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001572:	7bfb      	ldrb	r3, [r7, #15]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3724      	adds	r7, #36	; 0x24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd90      	pop	{r4, r7, pc}
 800157c:	2000049c 	.word	0x2000049c

08001580 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	1d38      	adds	r0, r7, #4
 800158a:	e880 0006 	stmia.w	r0, {r1, r2}
 800158e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001590:	e012      	b.n	80015b8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	7818      	ldrb	r0, [r3, #0]
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	1d3a      	adds	r2, r7, #4
 800159a:	ca06      	ldmia	r2, {r1, r2}
 800159c:	f7ff ff68 	bl	8001470 <ssd1306_WriteChar>
 80015a0:	4603      	mov	r3, r0
 80015a2:	461a      	mov	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d002      	beq.n	80015b2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	e008      	b.n	80015c4 <ssd1306_WriteString+0x44>
        }
        str++;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	3301      	adds	r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1e8      	bne.n	8001592 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	781b      	ldrb	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	460a      	mov	r2, r1
 80015d6:	71fb      	strb	r3, [r7, #7]
 80015d8:	4613      	mov	r3, r2
 80015da:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	b29a      	uxth	r2, r3
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <ssd1306_SetCursor+0x2c>)
 80015e2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80015e4:	79bb      	ldrb	r3, [r7, #6]
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <ssd1306_SetCursor+0x2c>)
 80015ea:	805a      	strh	r2, [r3, #2]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	2000049c 	.word	0x2000049c

080015fc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001606:	2381      	movs	r3, #129	; 0x81
 8001608:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fdf3 	bl	80011f8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fdef 	bl	80011f8 <ssd1306_WriteCommand>
}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001634:	23af      	movs	r3, #175	; 0xaf
 8001636:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <ssd1306_SetDisplayOn+0x38>)
 800163a:	2201      	movs	r2, #1
 800163c:	715a      	strb	r2, [r3, #5]
 800163e:	e004      	b.n	800164a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001640:	23ae      	movs	r3, #174	; 0xae
 8001642:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <ssd1306_SetDisplayOn+0x38>)
 8001646:	2200      	movs	r2, #0
 8001648:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fdd3 	bl	80011f8 <ssd1306_WriteCommand>
}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000049c 	.word	0x2000049c

08001660 <ARGB_Init>:

/**
 * @brief Init timer & prescalers
 * @param none
 */
void ARGB_Init(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
#endif
#ifdef APB2
    APBfq = HAL_RCC_GetPCLK2Freq();
 8001666:	f004 fb83 	bl	8005d70 <HAL_RCC_GetPCLK2Freq>
 800166a:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
 800166c:	4b32      	ldr	r3, [pc, #200]	; (8001738 <ARGB_Init+0xd8>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <ARGB_Init+0x1c>
 8001678:	2301      	movs	r3, #1
 800167a:	e000      	b.n	800167e <ARGB_Init+0x1e>
 800167c:	2302      	movs	r3, #2
 800167e:	461a      	mov	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	fb02 f303 	mul.w	r3, r2, r3
 8001686:	607b      	str	r3, [r7, #4]
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	4a2b      	ldr	r2, [pc, #172]	; (800173c <ARGB_Init+0xdc>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	091b      	lsrs	r3, r3, #4
 8001694:	607b      	str	r3, [r7, #4]
#endif
    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8001696:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <ARGB_Init+0xe0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2200      	movs	r2, #0
 800169c:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <ARGB_Init+0xe0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 80016ac:	4b24      	ldr	r3, [pc, #144]	; (8001740 <ARGB_Init+0xe0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2201      	movs	r2, #1
 80016b2:	615a      	str	r2, [r3, #20]
#if defined(WS2811F) || defined(WS2811S)
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us/1.2us
    PWM_LO = (u8_t) (APBfq * 0.20) - 1;     // Log.0 - 20% - 0.25us/0.5us
#endif
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7fe fed5 	bl	8000464 <__aeabi_ui2d>
 80016ba:	a31b      	add	r3, pc, #108	; (adr r3, 8001728 <ARGB_Init+0xc8>)
 80016bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c0:	f7fe ff4a 	bl	8000558 <__aeabi_dmul>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	f7ff f956 	bl	800097c <__aeabi_d2uiz>
 80016d0:	4603      	mov	r3, r0
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	3b01      	subs	r3, #1
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <ARGB_Init+0xe4>)
 80016da:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7fe fec1 	bl	8000464 <__aeabi_ui2d>
 80016e2:	a313      	add	r3, pc, #76	; (adr r3, 8001730 <ARGB_Init+0xd0>)
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	f7fe ff36 	bl	8000558 <__aeabi_dmul>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff f942 	bl	800097c <__aeabi_d2uiz>
 80016f8:	4603      	mov	r3, r0
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	3b01      	subs	r3, #1
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <ARGB_Init+0xe8>)
 8001702:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <ARGB_Init+0xec>)
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 800170a:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <ARGB_Init+0xe0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2201      	movs	r2, #1
 8001710:	2104      	movs	r1, #4
 8001712:	4618      	mov	r0, r3
 8001714:	f005 fab8 	bl	8006c88 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8001718:	2001      	movs	r0, #1
 800171a:	f001 fb35 	bl	8002d88 <HAL_Delay>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	1eb851ec 	.word	0x1eb851ec
 800172c:	3fe1eb85 	.word	0x3fe1eb85
 8001730:	1eb851ec 	.word	0x1eb851ec
 8001734:	3fd1eb85 	.word	0x3fd1eb85
 8001738:	40023800 	.word	0x40023800
 800173c:	014f8b59 	.word	0x014f8b59
 8001740:	2000062c 	.word	0x2000062c
 8001744:	200004a2 	.word	0x200004a2
 8001748:	200004a3 	.word	0x200004a3
 800174c:	2000057e 	.word	0x2000057e

08001750 <ARGB_Clear>:
/**
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 */
void ARGB_Clear(void) {
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
    ARGB_FillRGB(0, 0, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2100      	movs	r1, #0
 8001758:	2000      	movs	r0, #0
 800175a:	f000 f885 	bl	8001868 <ARGB_FillRGB>
#ifdef SK6812
    ARGB_FillWhite(0);
#endif
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <ARGB_SetBrightness>:

/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 */
void ARGB_SetBrightness(u8_t br) {
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 800176e:	4a04      	ldr	r2, [pc, #16]	; (8001780 <ARGB_SetBrightness+0x1c>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	7013      	strb	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	20000008 	.word	0x20000008

08001784 <ARGB_SetRGB>:
 * @param[in] i LED position
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	4604      	mov	r4, r0
 800178c:	4608      	mov	r0, r1
 800178e:	4611      	mov	r1, r2
 8001790:	461a      	mov	r2, r3
 8001792:	4623      	mov	r3, r4
 8001794:	80fb      	strh	r3, [r7, #6]
 8001796:	4603      	mov	r3, r0
 8001798:	717b      	strb	r3, [r7, #5]
 800179a:	460b      	mov	r3, r1
 800179c:	713b      	strb	r3, [r7, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	2b07      	cmp	r3, #7
 80017a6:	d908      	bls.n	80017ba <ARGB_SetRGB+0x36>
        u16_t _i = i / NUM_PIXELS;
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	08db      	lsrs	r3, r3, #3
 80017ac:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 80017ae:	89fb      	ldrh	r3, [r7, #14]
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	88fa      	ldrh	r2, [r7, #6]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 80017ba:	4b29      	ldr	r3, [pc, #164]	; (8001860 <ARGB_SetRGB+0xdc>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	3301      	adds	r3, #1
 80017c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80017ca:	797a      	ldrb	r2, [r7, #5]
 80017cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80017d0:	717b      	strb	r3, [r7, #5]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 80017d2:	4b23      	ldr	r3, [pc, #140]	; (8001860 <ARGB_SetRGB+0xdc>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	3301      	adds	r3, #1
 80017da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017de:	fb92 f3f3 	sdiv	r3, r2, r3
 80017e2:	793a      	ldrb	r2, [r7, #4]
 80017e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80017e8:	713b      	strb	r3, [r7, #4]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <ARGB_SetRGB+0xdc>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	3301      	adds	r3, #1
 80017f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80017fa:	78fa      	ldrb	r2, [r7, #3]
 80017fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001800:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8001802:	793b      	ldrb	r3, [r7, #4]
 8001804:	21b0      	movs	r1, #176	; 0xb0
 8001806:	4618      	mov	r0, r3
 8001808:	f000 f9ca 	bl	8001ba0 <scale8>
 800180c:	4603      	mov	r3, r0
 800180e:	713b      	strb	r3, [r7, #4]
    b = scale8(b, 0xF0);
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	21f0      	movs	r1, #240	; 0xf0
 8001814:	4618      	mov	r0, r3
 8001816:	f000 f9c3 	bl	8001ba0 <scale8>
 800181a:	4603      	mov	r3, r0
 800181c:	70fb      	strb	r3, [r7, #3]
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
    const u8_t subp2 = g;
    const u8_t subp3 = b;
#else
    const u8_t subp1 = g;
 800181e:	793b      	ldrb	r3, [r7, #4]
 8001820:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = r;
 8001822:	797b      	ldrb	r3, [r7, #5]
 8001824:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8001826:	78fb      	ldrb	r3, [r7, #3]
 8001828:	72fb      	strb	r3, [r7, #11]
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
 800182a:	88fa      	ldrh	r2, [r7, #6]
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	490c      	ldr	r1, [pc, #48]	; (8001864 <ARGB_SetRGB+0xe0>)
 8001834:	7b7a      	ldrb	r2, [r7, #13]
 8001836:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
 8001838:	88fa      	ldrh	r2, [r7, #6]
 800183a:	4613      	mov	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	3301      	adds	r3, #1
 8001842:	4908      	ldr	r1, [pc, #32]	; (8001864 <ARGB_SetRGB+0xe0>)
 8001844:	7b3a      	ldrb	r2, [r7, #12]
 8001846:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
 8001848:	88fa      	ldrh	r2, [r7, #6]
 800184a:	4613      	mov	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	3302      	adds	r3, #2
 8001852:	4904      	ldr	r1, [pc, #16]	; (8001864 <ARGB_SetRGB+0xe0>)
 8001854:	7afa      	ldrb	r2, [r7, #11]
 8001856:	54ca      	strb	r2, [r1, r3]
#endif
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	bd90      	pop	{r4, r7, pc}
 8001860:	20000008 	.word	0x20000008
 8001864:	200004a4 	.word	0x200004a4

08001868 <ARGB_FillRGB>:
 * @brief Fill ALL LEDs with RGB color
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
 8001872:	460b      	mov	r3, r1
 8001874:	71bb      	strb	r3, [r7, #6]
 8001876:	4613      	mov	r3, r2
 8001878:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800187a:	2300      	movs	r3, #0
 800187c:	81fb      	strh	r3, [r7, #14]
 800187e:	e00b      	b.n	8001898 <ARGB_FillRGB+0x30>
        ARGB_SetRGB(i, r, g, b);
 8001880:	89fb      	ldrh	r3, [r7, #14]
 8001882:	b298      	uxth	r0, r3
 8001884:	797b      	ldrb	r3, [r7, #5]
 8001886:	79ba      	ldrb	r2, [r7, #6]
 8001888:	79f9      	ldrb	r1, [r7, #7]
 800188a:	f7ff ff7b 	bl	8001784 <ARGB_SetRGB>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800188e:	89fb      	ldrh	r3, [r7, #14]
 8001890:	b29b      	uxth	r3, r3
 8001892:	3301      	adds	r3, #1
 8001894:	b29b      	uxth	r3, r3
 8001896:	81fb      	strh	r3, [r7, #14]
 8001898:	89fb      	ldrh	r3, [r7, #14]
 800189a:	b29b      	uxth	r3, r3
 800189c:	2b07      	cmp	r3, #7
 800189e:	d9ef      	bls.n	8001880 <ARGB_FillRGB+0x18>
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <ARGB_Show>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show(void) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
    ARGB_LOC_ST = ARGB_BUSY;
 80018b2:	4b9d      	ldr	r3, [pc, #628]	; (8001b28 <ARGB_Show+0x27c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER != 0 || DMA_HANDLE.State != HAL_DMA_STATE_READY) {
 80018b8:	4b9c      	ldr	r3, [pc, #624]	; (8001b2c <ARGB_Show+0x280>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d105      	bne.n	80018ce <ARGB_Show+0x22>
 80018c2:	4b9b      	ldr	r3, [pc, #620]	; (8001b30 <ARGB_Show+0x284>)
 80018c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d001      	beq.n	80018d2 <ARGB_Show+0x26>
        return ARGB_BUSY;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e15e      	b.n	8001b90 <ARGB_Show+0x2e4>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 80018d2:	2300      	movs	r3, #0
 80018d4:	71fb      	strb	r3, [r7, #7]
 80018d6:	e0a6      	b.n	8001a26 <ARGB_Show+0x17a>
            // set first transfer from first values
            PWM_BUF[i] = (((RGB_BUF[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80018d8:	4b96      	ldr	r3, [pc, #600]	; (8001b34 <ARGB_Show+0x288>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	dd04      	ble.n	80018fa <ARGB_Show+0x4e>
 80018f0:	4b91      	ldr	r3, [pc, #580]	; (8001b38 <ARGB_Show+0x28c>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	e003      	b.n	8001902 <ARGB_Show+0x56>
 80018fa:	4b90      	ldr	r3, [pc, #576]	; (8001b3c <ARGB_Show+0x290>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	4619      	mov	r1, r3
 8001908:	4b8d      	ldr	r3, [pc, #564]	; (8001b40 <ARGB_Show+0x294>)
 800190a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800190e:	4b89      	ldr	r3, [pc, #548]	; (8001b34 <ARGB_Show+0x288>)
 8001910:	785b      	ldrb	r3, [r3, #1]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001922:	2b00      	cmp	r3, #0
 8001924:	dd04      	ble.n	8001930 <ARGB_Show+0x84>
 8001926:	4b84      	ldr	r3, [pc, #528]	; (8001b38 <ARGB_Show+0x28c>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4619      	mov	r1, r3
 800192e:	e003      	b.n	8001938 <ARGB_Show+0x8c>
 8001930:	4b82      	ldr	r3, [pc, #520]	; (8001b3c <ARGB_Show+0x290>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	4619      	mov	r1, r3
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	3308      	adds	r3, #8
 800193e:	4a80      	ldr	r2, [pc, #512]	; (8001b40 <ARGB_Show+0x294>)
 8001940:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001944:	4b7b      	ldr	r3, [pc, #492]	; (8001b34 <ARGB_Show+0x288>)
 8001946:	789b      	ldrb	r3, [r3, #2]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	461a      	mov	r2, r3
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001958:	2b00      	cmp	r3, #0
 800195a:	dd04      	ble.n	8001966 <ARGB_Show+0xba>
 800195c:	4b76      	ldr	r3, [pc, #472]	; (8001b38 <ARGB_Show+0x28c>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	4619      	mov	r1, r3
 8001964:	e003      	b.n	800196e <ARGB_Show+0xc2>
 8001966:	4b75      	ldr	r3, [pc, #468]	; (8001b3c <ARGB_Show+0x290>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	4619      	mov	r1, r3
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	3310      	adds	r3, #16
 8001974:	4a72      	ldr	r2, [pc, #456]	; (8001b40 <ARGB_Show+0x294>)
 8001976:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 24] = (((RGB_BUF[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800197a:	4b6e      	ldr	r3, [pc, #440]	; (8001b34 <ARGB_Show+0x288>)
 800197c:	78db      	ldrb	r3, [r3, #3]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	461a      	mov	r2, r3
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198e:	2b00      	cmp	r3, #0
 8001990:	dd04      	ble.n	800199c <ARGB_Show+0xf0>
 8001992:	4b69      	ldr	r3, [pc, #420]	; (8001b38 <ARGB_Show+0x28c>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	4619      	mov	r1, r3
 800199a:	e003      	b.n	80019a4 <ARGB_Show+0xf8>
 800199c:	4b67      	ldr	r3, [pc, #412]	; (8001b3c <ARGB_Show+0x290>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4619      	mov	r1, r3
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	3318      	adds	r3, #24
 80019aa:	4a65      	ldr	r2, [pc, #404]	; (8001b40 <ARGB_Show+0x294>)
 80019ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80019b0:	4b60      	ldr	r3, [pc, #384]	; (8001b34 <ARGB_Show+0x288>)
 80019b2:	791b      	ldrb	r3, [r3, #4]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	461a      	mov	r2, r3
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	dd04      	ble.n	80019d2 <ARGB_Show+0x126>
 80019c8:	4b5b      	ldr	r3, [pc, #364]	; (8001b38 <ARGB_Show+0x28c>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	4619      	mov	r1, r3
 80019d0:	e003      	b.n	80019da <ARGB_Show+0x12e>
 80019d2:	4b5a      	ldr	r3, [pc, #360]	; (8001b3c <ARGB_Show+0x290>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	4619      	mov	r1, r3
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	3320      	adds	r3, #32
 80019e0:	4a57      	ldr	r2, [pc, #348]	; (8001b40 <ARGB_Show+0x294>)
 80019e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80019e6:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <ARGB_Show+0x288>)
 80019e8:	795b      	ldrb	r3, [r3, #5]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	461a      	mov	r2, r3
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	dd04      	ble.n	8001a08 <ARGB_Show+0x15c>
 80019fe:	4b4e      	ldr	r3, [pc, #312]	; (8001b38 <ARGB_Show+0x28c>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	4619      	mov	r1, r3
 8001a06:	e003      	b.n	8001a10 <ARGB_Show+0x164>
 8001a08:	4b4c      	ldr	r3, [pc, #304]	; (8001b3c <ARGB_Show+0x290>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	4619      	mov	r1, r3
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	3328      	adds	r3, #40	; 0x28
 8001a16:	4a4a      	ldr	r2, [pc, #296]	; (8001b40 <ARGB_Show+0x294>)
 8001a18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	3301      	adds	r3, #1
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	71fb      	strb	r3, [r7, #7]
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b07      	cmp	r3, #7
 8001a2c:	f67f af54 	bls.w	80018d8 <ARGB_Show+0x2c>
#ifdef SK6812
            PWM_BUF[i + 48] = (((RGB_BUF[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001a34:	e0a4      	b.n	8001b80 <ARGB_Show+0x2d4>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8001a36:	4b43      	ldr	r3, [pc, #268]	; (8001b44 <ARGB_Show+0x298>)
 8001a38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d102      	bne.n	8001a48 <ARGB_Show+0x19c>
                DMA_Send_Stat = HAL_BUSY;
 8001a42:	2302      	movs	r3, #2
 8001a44:	73fb      	strb	r3, [r7, #15]
                continue;
 8001a46:	e09b      	b.n	8001b80 <ARGB_Show+0x2d4>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH) == HAL_TIM_CHANNEL_STATE_READY) {
 8001a48:	4b3e      	ldr	r3, [pc, #248]	; (8001b44 <ARGB_Show+0x298>)
 8001a4a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d11d      	bne.n	8001a90 <ARGB_Show+0x1e4>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a54:	4b3b      	ldr	r3, [pc, #236]	; (8001b44 <ARGB_Show+0x298>)
 8001a56:	2202      	movs	r2, #2
 8001a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
#elif TIM_CH == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt;
 8001a5c:	4b39      	ldr	r3, [pc, #228]	; (8001b44 <ARGB_Show+0x298>)
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a60:	4a39      	ldr	r2, [pc, #228]	; (8001b48 <ARGB_Show+0x29c>)
 8001a62:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt;
 8001a64:	4b37      	ldr	r3, [pc, #220]	; (8001b44 <ARGB_Show+0x298>)
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	4a38      	ldr	r2, [pc, #224]	; (8001b4c <ARGB_Show+0x2a0>)
 8001a6a:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8001a6c:	4b35      	ldr	r3, [pc, #212]	; (8001b44 <ARGB_Show+0x298>)
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a70:	4a37      	ldr	r2, [pc, #220]	; (8001b50 <ARGB_Show+0x2a4>)
 8001a72:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8001a74:	4b33      	ldr	r3, [pc, #204]	; (8001b44 <ARGB_Show+0x298>)
 8001a76:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001a78:	4931      	ldr	r1, [pc, #196]	; (8001b40 <ARGB_Show+0x294>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 8001a7a:	4b32      	ldr	r3, [pc, #200]	; (8001b44 <ARGB_Show+0x298>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	3338      	adds	r3, #56	; 0x38
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF,
 8001a80:	461a      	mov	r2, r3
 8001a82:	2330      	movs	r3, #48	; 0x30
 8001a84:	f001 fb34 	bl	80030f0 <HAL_DMA_Start_IT>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d006      	beq.n	8001a9c <ARGB_Show+0x1f0>
 8001a8e:	e002      	b.n	8001a96 <ARGB_Show+0x1ea>
                DMA_Send_Stat = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
                continue;
 8001a94:	e074      	b.n	8001b80 <ARGB_Show+0x2d4>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	73fb      	strb	r3, [r7, #15]
                continue;
 8001a9a:	e071      	b.n	8001b80 <ARGB_Show+0x2d4>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 8001a9c:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <ARGB_Show+0x298>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	4b28      	ldr	r3, [pc, #160]	; (8001b44 <ARGB_Show+0x298>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001aaa:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8001aac:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <ARGB_Show+0x298>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a28      	ldr	r2, [pc, #160]	; (8001b54 <ARGB_Show+0x2a8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d107      	bne.n	8001ac6 <ARGB_Show+0x21a>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8001ab6:	4b23      	ldr	r3, [pc, #140]	; (8001b44 <ARGB_Show+0x298>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001abc:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <ARGB_Show+0x298>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ac4:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001ac6:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <ARGB_Show+0x298>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a22      	ldr	r2, [pc, #136]	; (8001b54 <ARGB_Show+0x2a8>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d018      	beq.n	8001b02 <ARGB_Show+0x256>
 8001ad0:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <ARGB_Show+0x298>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad8:	d013      	beq.n	8001b02 <ARGB_Show+0x256>
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <ARGB_Show+0x298>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1e      	ldr	r2, [pc, #120]	; (8001b58 <ARGB_Show+0x2ac>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00e      	beq.n	8001b02 <ARGB_Show+0x256>
 8001ae4:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <ARGB_Show+0x298>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1c      	ldr	r2, [pc, #112]	; (8001b5c <ARGB_Show+0x2b0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d009      	beq.n	8001b02 <ARGB_Show+0x256>
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <ARGB_Show+0x298>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <ARGB_Show+0x2b4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d004      	beq.n	8001b02 <ARGB_Show+0x256>
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <ARGB_Show+0x298>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a19      	ldr	r2, [pc, #100]	; (8001b64 <ARGB_Show+0x2b8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d132      	bne.n	8001b68 <ARGB_Show+0x2bc>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <ARGB_Show+0x298>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	2b06      	cmp	r3, #6
 8001b12:	d032      	beq.n	8001b7a <ARGB_Show+0x2ce>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <ARGB_Show+0x298>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <ARGB_Show+0x298>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001b24:	e029      	b.n	8001b7a <ARGB_Show+0x2ce>
 8001b26:	bf00      	nop
 8001b28:	2000057e 	.word	0x2000057e
 8001b2c:	2000057c 	.word	0x2000057c
 8001b30:	20000674 	.word	0x20000674
 8001b34:	200004a4 	.word	0x200004a4
 8001b38:	200004a2 	.word	0x200004a2
 8001b3c:	200004a3 	.word	0x200004a3
 8001b40:	200004bc 	.word	0x200004bc
 8001b44:	2000062c 	.word	0x2000062c
 8001b48:	08001bc9 	.word	0x08001bc9
 8001b4c:	08001e79 	.word	0x08001e79
 8001b50:	080066ab 	.word	0x080066ab
 8001b54:	40010000 	.word	0x40010000
 8001b58:	40000400 	.word	0x40000400
 8001b5c:	40000800 	.word	0x40000800
 8001b60:	40000c00 	.word	0x40000c00
 8001b64:	40014000 	.word	0x40014000
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <ARGB_Show+0x2ec>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <ARGB_Show+0x2ec>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	e000      	b.n	8001b7c <ARGB_Show+0x2d0>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001b7a:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f47f af57 	bne.w	8001a36 <ARGB_Show+0x18a>
        }
        BUF_COUNTER = 2;
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <ARGB_Show+0x2f0>)
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 8001b8e:	2302      	movs	r3, #2
    }
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	2000062c 	.word	0x2000062c
 8001b9c:	2000057c 	.word	0x2000057c

08001ba0 <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	460a      	mov	r2, r1
 8001baa:	71fb      	strb	r3, [r7, #7]
 8001bac:	4613      	mov	r3, r2
 8001bae:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	79ba      	ldrb	r2, [r7, #6]
 8001bb4:	fb02 f303 	mul.w	r3, r2, r3
 8001bb8:	121b      	asrs	r3, r3, #8
 8001bba:	b2db      	uxtb	r3, r3
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <ARGB_TIM_DMADelayPulseCplt>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd4:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a9d      	ldr	r2, [pc, #628]	; (8001e50 <ARGB_TIM_DMADelayPulseCplt+0x288>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	f040 8131 	bne.w	8001e42 <ARGB_TIM_DMADelayPulseCplt+0x27a>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4a9c      	ldr	r2, [pc, #624]	; (8001e54 <ARGB_TIM_DMADelayPulseCplt+0x28c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	f040 812c 	bne.w	8001e42 <ARGB_TIM_DMADelayPulseCplt+0x27a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001bea:	4b9b      	ldr	r3, [pc, #620]	; (8001e58 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 8128 	beq.w	8001e46 <ARGB_TIM_DMADelayPulseCplt+0x27e>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d10b      	bne.n	8001c18 <ARGB_TIM_DMADelayPulseCplt+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2201      	movs	r2, #1
 8001c04:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d136      	bne.n	8001c7c <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c16:	e031      	b.n	8001c7c <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d10b      	bne.n	8001c3a <ARGB_TIM_DMADelayPulseCplt+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2202      	movs	r2, #2
 8001c26:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d125      	bne.n	8001c7c <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c38:	e020      	b.n	8001c7c <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d10b      	bne.n	8001c5c <ARGB_TIM_DMADelayPulseCplt+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2204      	movs	r2, #4
 8001c48:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d114      	bne.n	8001c7c <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c5a:	e00f      	b.n	8001c7c <ARGB_TIM_DMADelayPulseCplt+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d10a      	bne.n	8001c7c <ARGB_TIM_DMADelayPulseCplt+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2208      	movs	r2, #8
 8001c6a:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d103      	bne.n	8001c7c <ARGB_TIM_DMADelayPulseCplt+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8001c7c:	4b76      	ldr	r3, [pc, #472]	; (8001e58 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	2b07      	cmp	r3, #7
 8001c84:	d87b      	bhi.n	8001d7e <ARGB_TIM_DMADelayPulseCplt+0x1b6>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001c86:	2300      	movs	r3, #0
 8001c88:	72fb      	strb	r3, [r7, #11]
 8001c8a:	e06c      	b.n	8001d66 <ARGB_TIM_DMADelayPulseCplt+0x19e>
            PWM_BUF[i + 32] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 40] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 48] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 56] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#else
            PWM_BUF[i + 24] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001c8c:	4b72      	ldr	r3, [pc, #456]	; (8001e58 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a70      	ldr	r2, [pc, #448]	; (8001e5c <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001c9c:	5cd3      	ldrb	r3, [r2, r3]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	7afb      	ldrb	r3, [r7, #11]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	dd04      	ble.n	8001cbc <ARGB_TIM_DMADelayPulseCplt+0xf4>
 8001cb2:	4b6b      	ldr	r3, [pc, #428]	; (8001e60 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	4619      	mov	r1, r3
 8001cba:	e003      	b.n	8001cc4 <ARGB_TIM_DMADelayPulseCplt+0xfc>
 8001cbc:	4b69      	ldr	r3, [pc, #420]	; (8001e64 <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	7afb      	ldrb	r3, [r7, #11]
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	3318      	adds	r3, #24
 8001cca:	4a67      	ldr	r2, [pc, #412]	; (8001e68 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001ccc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 32] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001cd0:	4b61      	ldr	r3, [pc, #388]	; (8001e58 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4613      	mov	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4413      	add	r3, r2
 8001cde:	3301      	adds	r3, #1
 8001ce0:	4a5e      	ldr	r2, [pc, #376]	; (8001e5c <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001ce2:	5cd3      	ldrb	r3, [r2, r3]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	7afb      	ldrb	r3, [r7, #11]
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	dd04      	ble.n	8001d02 <ARGB_TIM_DMADelayPulseCplt+0x13a>
 8001cf8:	4b59      	ldr	r3, [pc, #356]	; (8001e60 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	4619      	mov	r1, r3
 8001d00:	e003      	b.n	8001d0a <ARGB_TIM_DMADelayPulseCplt+0x142>
 8001d02:	4b58      	ldr	r3, [pc, #352]	; (8001e64 <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	4619      	mov	r1, r3
 8001d0a:	7afb      	ldrb	r3, [r7, #11]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	3320      	adds	r3, #32
 8001d10:	4a55      	ldr	r2, [pc, #340]	; (8001e68 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001d12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 40] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001d16:	4b50      	ldr	r3, [pc, #320]	; (8001e58 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4613      	mov	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4413      	add	r3, r2
 8001d24:	3302      	adds	r3, #2
 8001d26:	4a4d      	ldr	r2, [pc, #308]	; (8001e5c <ARGB_TIM_DMADelayPulseCplt+0x294>)
 8001d28:	5cd3      	ldrb	r3, [r2, r3]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	7afb      	ldrb	r3, [r7, #11]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	dd04      	ble.n	8001d48 <ARGB_TIM_DMADelayPulseCplt+0x180>
 8001d3e:	4b48      	ldr	r3, [pc, #288]	; (8001e60 <ARGB_TIM_DMADelayPulseCplt+0x298>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	4619      	mov	r1, r3
 8001d46:	e003      	b.n	8001d50 <ARGB_TIM_DMADelayPulseCplt+0x188>
 8001d48:	4b46      	ldr	r3, [pc, #280]	; (8001e64 <ARGB_TIM_DMADelayPulseCplt+0x29c>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	4619      	mov	r1, r3
 8001d50:	7afb      	ldrb	r3, [r7, #11]
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	3328      	adds	r3, #40	; 0x28
 8001d56:	4a44      	ldr	r2, [pc, #272]	; (8001e68 <ARGB_TIM_DMADelayPulseCplt+0x2a0>)
 8001d58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001d5c:	7afb      	ldrb	r3, [r7, #11]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	3301      	adds	r3, #1
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	72fb      	strb	r3, [r7, #11]
 8001d66:	7afb      	ldrb	r3, [r7, #11]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b07      	cmp	r3, #7
 8001d6c:	d98e      	bls.n	8001c8c <ARGB_TIM_DMADelayPulseCplt+0xc4>
#endif
        }
        BUF_COUNTER++;
 8001d6e:	4b3a      	ldr	r3, [pc, #232]	; (8001e58 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3301      	adds	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	4b37      	ldr	r3, [pc, #220]	; (8001e58 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d7a:	801a      	strh	r2, [r3, #0]
 8001d7c:	e05d      	b.n	8001e3a <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 8001d7e:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	2b09      	cmp	r3, #9
 8001d86:	d80c      	bhi.n	8001da2 <ARGB_TIM_DMADelayPulseCplt+0x1da>
        memset((dma_siz *) &PWM_BUF[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 8001d88:	2260      	movs	r2, #96	; 0x60
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4837      	ldr	r0, [pc, #220]	; (8001e6c <ARGB_TIM_DMADelayPulseCplt+0x2a4>)
 8001d8e:	f007 fe41 	bl	8009a14 <memset>
        BUF_COUNTER++;
 8001d92:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	3301      	adds	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001d9e:	801a      	strh	r2, [r3, #0]
 8001da0:	e04b      	b.n	8001e3a <ARGB_TIM_DMADelayPulseCplt+0x272>
    } else { // if END of transfer
        BUF_COUNTER = 0;
 8001da2:	4b2d      	ldr	r3, [pc, #180]	; (8001e58 <ARGB_TIM_DMADelayPulseCplt+0x290>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	801a      	strh	r2, [r3, #0]
#if TIM_CH == TIM_CHANNEL_1
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
#endif
#if TIM_CH == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001db6:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f001 f9ef 	bl	80031a0 <HAL_DMA_Abort_IT>
#endif
#if TIM_CH == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a2a      	ldr	r2, [pc, #168]	; (8001e70 <ARGB_TIM_DMADelayPulseCplt+0x2a8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d117      	bne.n	8001dfc <ARGB_TIM_DMADelayPulseCplt+0x234>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6a1a      	ldr	r2, [r3, #32]
 8001dd2:	f241 1311 	movw	r3, #4369	; 0x1111
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10f      	bne.n	8001dfc <ARGB_TIM_DMADelayPulseCplt+0x234>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6a1a      	ldr	r2, [r3, #32]
 8001de2:	f240 4344 	movw	r3, #1092	; 0x444
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d107      	bne.n	8001dfc <ARGB_TIM_DMADelayPulseCplt+0x234>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dfa:	645a      	str	r2, [r3, #68]	; 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6a1a      	ldr	r2, [r3, #32]
 8001e02:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10f      	bne.n	8001e2c <ARGB_TIM_DMADelayPulseCplt+0x264>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6a1a      	ldr	r2, [r3, #32]
 8001e12:	f240 4344 	movw	r3, #1092	; 0x444
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d107      	bne.n	8001e2c <ARGB_TIM_DMADelayPulseCplt+0x264>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0201 	bic.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH, HAL_TIM_CHANNEL_STATE_READY);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        ARGB_LOC_ST = ARGB_READY;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <ARGB_TIM_DMADelayPulseCplt+0x2ac>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	771a      	strb	r2, [r3, #28]
 8001e40:	e002      	b.n	8001e48 <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001e42:	bf00      	nop
 8001e44:	e000      	b.n	8001e48 <ARGB_TIM_DMADelayPulseCplt+0x280>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001e46:	bf00      	nop
}
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000674 	.word	0x20000674
 8001e54:	2000062c 	.word	0x2000062c
 8001e58:	2000057c 	.word	0x2000057c
 8001e5c:	200004a4 	.word	0x200004a4
 8001e60:	200004a2 	.word	0x200004a2
 8001e64:	200004a3 	.word	0x200004a3
 8001e68:	200004bc 	.word	0x200004bc
 8001e6c:	2000051c 	.word	0x2000051c
 8001e70:	40010000 	.word	0x40010000
 8001e74:	2000057e 	.word	0x2000057e

08001e78 <ARGB_TIM_DMADelayPulseHalfCplt>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e84:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a53      	ldr	r2, [pc, #332]	; (8001fd8 <ARGB_TIM_DMADelayPulseHalfCplt+0x160>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	f040 809e 	bne.w	8001fcc <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4a52      	ldr	r2, [pc, #328]	; (8001fdc <ARGB_TIM_DMADelayPulseHalfCplt+0x164>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	f040 8099 	bne.w	8001fcc <ARGB_TIM_DMADelayPulseHalfCplt+0x154>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001e9a:	4b51      	ldr	r3, [pc, #324]	; (8001fe0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 8095 	beq.w	8001fd0 <ARGB_TIM_DMADelayPulseHalfCplt+0x158>
    // if data transfer
    if (BUF_COUNTER < NUM_PIXELS) {
 8001ea6:	4b4e      	ldr	r3, [pc, #312]	; (8001fe0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	2b07      	cmp	r3, #7
 8001eae:	d87b      	bhi.n	8001fa8 <ARGB_TIM_DMADelayPulseHalfCplt+0x130>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	72fb      	strb	r3, [r7, #11]
 8001eb4:	e06c      	b.n	8001f90 <ARGB_TIM_DMADelayPulseHalfCplt+0x118>
            PWM_BUF[i] = (((RGB_BUF[4 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 8] = (((RGB_BUF[4 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 16] = (((RGB_BUF[4 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
            PWM_BUF[i + 24] = (((RGB_BUF[4 * BUF_COUNTER + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
#else
            PWM_BUF[i] = (((RGB_BUF[3 * BUF_COUNTER] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001eb6:	4b4a      	ldr	r3, [pc, #296]	; (8001fe0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	4a47      	ldr	r2, [pc, #284]	; (8001fe4 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8001ec6:	5cd3      	ldrb	r3, [r2, r3]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	461a      	mov	r2, r3
 8001ecc:	7afb      	ldrb	r3, [r7, #11]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	dd04      	ble.n	8001ee6 <ARGB_TIM_DMADelayPulseHalfCplt+0x6e>
 8001edc:	4b42      	ldr	r3, [pc, #264]	; (8001fe8 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	e003      	b.n	8001eee <ARGB_TIM_DMADelayPulseHalfCplt+0x76>
 8001ee6:	4b41      	ldr	r3, [pc, #260]	; (8001fec <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	7afb      	ldrb	r3, [r7, #11]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4b3e      	ldr	r3, [pc, #248]	; (8001ff0 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8001ef6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            PWM_BUF[i + 8] = (((RGB_BUF[3 * BUF_COUNTER + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001efa:	4b39      	ldr	r3, [pc, #228]	; (8001fe0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	3301      	adds	r3, #1
 8001f0a:	4a36      	ldr	r2, [pc, #216]	; (8001fe4 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8001f0c:	5cd3      	ldrb	r3, [r2, r3]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	461a      	mov	r2, r3
 8001f12:	7afb      	ldrb	r3, [r7, #11]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	dd04      	ble.n	8001f2c <ARGB_TIM_DMADelayPulseHalfCplt+0xb4>
 8001f22:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	4619      	mov	r1, r3
 8001f2a:	e003      	b.n	8001f34 <ARGB_TIM_DMADelayPulseHalfCplt+0xbc>
 8001f2c:	4b2f      	ldr	r3, [pc, #188]	; (8001fec <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	4619      	mov	r1, r3
 8001f34:	7afb      	ldrb	r3, [r7, #11]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	3308      	adds	r3, #8
 8001f3a:	4a2d      	ldr	r2, [pc, #180]	; (8001ff0 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8001f3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            PWM_BUF[i + 16] = (((RGB_BUF[3 * BUF_COUNTER + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001f40:	4b27      	ldr	r3, [pc, #156]	; (8001fe0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	461a      	mov	r2, r3
 8001f48:	4613      	mov	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3302      	adds	r3, #2
 8001f50:	4a24      	ldr	r2, [pc, #144]	; (8001fe4 <ARGB_TIM_DMADelayPulseHalfCplt+0x16c>)
 8001f52:	5cd3      	ldrb	r3, [r2, r3]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	7afb      	ldrb	r3, [r7, #11]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	dd04      	ble.n	8001f72 <ARGB_TIM_DMADelayPulseHalfCplt+0xfa>
 8001f68:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <ARGB_TIM_DMADelayPulseHalfCplt+0x170>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	4619      	mov	r1, r3
 8001f70:	e003      	b.n	8001f7a <ARGB_TIM_DMADelayPulseHalfCplt+0x102>
 8001f72:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <ARGB_TIM_DMADelayPulseHalfCplt+0x174>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	4619      	mov	r1, r3
 8001f7a:	7afb      	ldrb	r3, [r7, #11]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	3310      	adds	r3, #16
 8001f80:	4a1b      	ldr	r2, [pc, #108]	; (8001ff0 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8001f82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001f86:	7afb      	ldrb	r3, [r7, #11]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	72fb      	strb	r3, [r7, #11]
 8001f90:	7afb      	ldrb	r3, [r7, #11]
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b07      	cmp	r3, #7
 8001f96:	d98e      	bls.n	8001eb6 <ARGB_TIM_DMADelayPulseHalfCplt+0x3e>
#endif
        }
        BUF_COUNTER++;
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001fa4:	801a      	strh	r2, [r3, #0]
 8001fa6:	e014      	b.n	8001fd2 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    } else if (BUF_COUNTER < NUM_PIXELS + 2) { // if RET transfer
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	2b09      	cmp	r3, #9
 8001fb0:	d80f      	bhi.n	8001fd2 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
        memset((dma_siz *) &PWM_BUF[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 8001fb2:	2260      	movs	r2, #96	; 0x60
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	480e      	ldr	r0, [pc, #56]	; (8001ff0 <ARGB_TIM_DMADelayPulseHalfCplt+0x178>)
 8001fb8:	f007 fd2c 	bl	8009a14 <memset>
        BUF_COUNTER++;
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <ARGB_TIM_DMADelayPulseHalfCplt+0x168>)
 8001fc8:	801a      	strh	r2, [r3, #0]
 8001fca:	e002      	b.n	8001fd2 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (hdma != &DMA_HANDLE || htim != &TIM_HANDLE) return;
 8001fcc:	bf00      	nop
 8001fce:	e000      	b.n	8001fd2 <ARGB_TIM_DMADelayPulseHalfCplt+0x15a>
    if (BUF_COUNTER == 0) return; // if no data to transmit - return
 8001fd0:	bf00      	nop
    }
}
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000674 	.word	0x20000674
 8001fdc:	2000062c 	.word	0x2000062c
 8001fe0:	2000057c 	.word	0x2000057c
 8001fe4:	200004a4 	.word	0x200004a4
 8001fe8:	200004a2 	.word	0x200004a2
 8001fec:	200004a3 	.word	0x200004a3
 8001ff0:	200004bc 	.word	0x200004bc

08001ff4 <AS5600_ReadReg>:
	HAL_I2C_Master_Transmit(&hi2c1,AS5600_ADDR,&Data,1,10);	
	HAL_I2C_Mem_Write(&hi2c1,(AS5600_ADDR << 1),Reg,1,&Data,1,100);
}

uint8_t AS5600_ReadReg(uint8_t Reg)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af04      	add	r7, sp, #16
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
	uint8_t DataRead=0;	
 8001ffe:	2300      	movs	r3, #0
 8002000:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c1,(AS5600_ADDR << 1),Reg,1,&DataRead,1,100);
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	b29a      	uxth	r2, r3
 8002006:	2364      	movs	r3, #100	; 0x64
 8002008:	9302      	str	r3, [sp, #8]
 800200a:	2301      	movs	r3, #1
 800200c:	9301      	str	r3, [sp, #4]
 800200e:	f107 030f 	add.w	r3, r7, #15
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2301      	movs	r3, #1
 8002016:	216c      	movs	r1, #108	; 0x6c
 8002018:	4803      	ldr	r0, [pc, #12]	; (8002028 <AS5600_ReadReg+0x34>)
 800201a:	f002 fa65 	bl	80044e8 <HAL_I2C_Mem_Read>
	
	
	return DataRead;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000580 	.word	0x20000580

0800202c <AS5600_GetAngle>:

uint16_t AS5600_GetAngle()
{
 800202c:	b598      	push	{r3, r4, r7, lr}
 800202e:	af00      	add	r7, sp, #0
	return (int)((float)(AS5600_ReadReg(ANGLE_L) + (AS5600_ReadReg(ANGLE_H) << 8))/4096*360);	
 8002030:	200f      	movs	r0, #15
 8002032:	f7ff ffdf 	bl	8001ff4 <AS5600_ReadReg>
 8002036:	4603      	mov	r3, r0
 8002038:	461c      	mov	r4, r3
 800203a:	200e      	movs	r0, #14
 800203c:	f7ff ffda 	bl	8001ff4 <AS5600_ReadReg>
 8002040:	4603      	mov	r3, r0
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	4423      	add	r3, r4
 8002046:	ee07 3a90 	vmov	s15, r3
 800204a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800204e:	eddf 6a07 	vldr	s13, [pc, #28]	; 800206c <AS5600_GetAngle+0x40>
 8002052:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002056:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002070 <AS5600_GetAngle+0x44>
 800205a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800205e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002062:	ee17 3a90 	vmov	r3, s15
 8002066:	b29b      	uxth	r3, r3
}
 8002068:	4618      	mov	r0, r3
 800206a:	bd98      	pop	{r3, r4, r7, pc}
 800206c:	45800000 	.word	0x45800000
 8002070:	43b40000 	.word	0x43b40000

08002074 <AS5600_GetRawAngle>:


uint16_t AS5600_GetRawAngle()
{
 8002074:	b590      	push	{r4, r7, lr}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
	uint16_t AngleVal=AS5600_ReadReg(RAWANG_L) + (AS5600_ReadReg(RAWANG_H) << 8);
 800207a:	200d      	movs	r0, #13
 800207c:	f7ff ffba 	bl	8001ff4 <AS5600_ReadReg>
 8002080:	4603      	mov	r3, r0
 8002082:	b29c      	uxth	r4, r3
 8002084:	200c      	movs	r0, #12
 8002086:	f7ff ffb5 	bl	8001ff4 <AS5600_ReadReg>
 800208a:	4603      	mov	r3, r0
 800208c:	b29b      	uxth	r3, r3
 800208e:	021b      	lsls	r3, r3, #8
 8002090:	b29b      	uxth	r3, r3
 8002092:	4423      	add	r3, r4
 8002094:	80fb      	strh	r3, [r7, #6]
	return AngleVal;	
 8002096:	88fb      	ldrh	r3, [r7, #6]
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	bd90      	pop	{r4, r7, pc}

080020a0 <AS5600_GetStatus>:

uint8_t AS5600_GetStatus()
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
	return AS5600_ReadReg(STATUS) & 0x38;	
 80020a4:	200b      	movs	r0, #11
 80020a6:	f7ff ffa5 	bl	8001ff4 <AS5600_ReadReg>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020b0:	b2db      	uxtb	r3, r3
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b092      	sub	sp, #72	; 0x48
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020be:	f000 fe21 	bl	8002d04 <HAL_Init>
  //MCP4725 myMCP4725;
  //MCP4725_setValue(&myMCP4725, 2048, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020c2:	f000 f97d 	bl	80023c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020c6:	f000 fadb 	bl	8002680 <MX_GPIO_Init>
  MX_DMA_Init();
 80020ca:	f000 fab9 	bl	8002640 <MX_DMA_Init>
  MX_I2C1_Init();
 80020ce:	f000 f9df 	bl	8002490 <MX_I2C1_Init>
  MX_SPI1_Init();
 80020d2:	f000 fa0b 	bl	80024ec <MX_SPI1_Init>
  MX_TIM2_Init();
 80020d6:	f000 fa3f 	bl	8002558 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t num[10] ={0};
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
 80020de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	809a      	strh	r2, [r3, #4]
  uint8_t coutn = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  HAL_StatusTypeDef type;
  // Подсчёт устройств в сети I2C 60-display, 72-ацп, 54-encoder, 96 -dac/
  for(uint8_t i = 1; i < 127 ; i++){
 80020ee:	2301      	movs	r3, #1
 80020f0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80020f4:	e020      	b.n	8002138 <main+0x80>
	  type = HAL_I2C_IsDeviceReady(&hi2c1, (i << 1), 2, 10);
 80020f6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	b299      	uxth	r1, r3
 8002100:	230a      	movs	r3, #10
 8002102:	2202      	movs	r2, #2
 8002104:	48a0      	ldr	r0, [pc, #640]	; (8002388 <main+0x2d0>)
 8002106:	f002 fc15 	bl	8004934 <HAL_I2C_IsDeviceReady>
 800210a:	4603      	mov	r3, r0
 800210c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	  if(type == HAL_OK){
 8002110:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10a      	bne.n	800212e <main+0x76>
		  num[coutn++] = i;
 8002118:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8002122:	3348      	adds	r3, #72	; 0x48
 8002124:	443b      	add	r3, r7
 8002126:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800212a:	f803 2c24 	strb.w	r2, [r3, #-36]
  for(uint8_t i = 1; i < 127 ; i++){
 800212e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002132:	3301      	adds	r3, #1
 8002134:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002138:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800213c:	2b7e      	cmp	r3, #126	; 0x7e
 800213e:	d9da      	bls.n	80020f6 <main+0x3e>
	  }
  }
  ARGB_Init();  // Initialization
 8002140:	f7ff fa8e 	bl	8001660 <ARGB_Init>
  //ARGB_STATE ARGB_GetState;
  ARGB_Clear();
 8002144:	f7ff fb04 	bl	8001750 <ARGB_Clear>
  while (ARGB_Show() != ARGB_OK);
 8002148:	bf00      	nop
 800214a:	f7ff fbaf 	bl	80018ac <ARGB_Show>
 800214e:	4603      	mov	r3, r0
 8002150:	2b02      	cmp	r3, #2
 8002152:	d1fa      	bne.n	800214a <main+0x92>
  ARGB_SetBrightness(80);
 8002154:	2050      	movs	r0, #80	; 0x50
 8002156:	f7ff fb05 	bl	8001764 <ARGB_SetBrightness>
 // ARGB_SetRGB(0, 255, 0, 128);

  // Update - Option 1
  //extern  unsigned char *gImage_BW;
  //extern  unsigned char *gImage_R;
  ssd1306_Init();
 800215a:	f7ff f87f 	bl	800125c <ssd1306_Init>
  ssd1306_Fill(Black);
 800215e:	2000      	movs	r0, #0
 8002160:	f7ff f8e6 	bl	8001330 <ssd1306_Fill>
  ssd1306_SetCursor(5, 10);
 8002164:	210a      	movs	r1, #10
 8002166:	2005      	movs	r0, #5
 8002168:	f7ff fa30 	bl	80015cc <ssd1306_SetCursor>
  ssd1306_WriteString("JetPro,Bro!", Font_11x18, White);
 800216c:	4a87      	ldr	r2, [pc, #540]	; (800238c <main+0x2d4>)
 800216e:	2301      	movs	r3, #1
 8002170:	ca06      	ldmia	r2, {r1, r2}
 8002172:	4887      	ldr	r0, [pc, #540]	; (8002390 <main+0x2d8>)
 8002174:	f7ff fa04 	bl	8001580 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8002178:	f7ff f8fe 	bl	8001378 <ssd1306_UpdateScreen>
  HAL_Delay(1000);
 800217c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002180:	f000 fe02 	bl	8002d88 <HAL_Delay>
  ssd1306_Fill(Black);
 8002184:	2000      	movs	r0, #0
 8002186:	f7ff f8d3 	bl	8001330 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 800218a:	f7ff f8f5 	bl	8001378 <ssd1306_UpdateScreen>

  ssd1306_SetCursor(0, 0);
 800218e:	2100      	movs	r1, #0
 8002190:	2000      	movs	r0, #0
 8002192:	f7ff fa1b 	bl	80015cc <ssd1306_SetCursor>
    ssd1306_WriteString("ANG - ", Font_11x18, White);
 8002196:	4a7d      	ldr	r2, [pc, #500]	; (800238c <main+0x2d4>)
 8002198:	2301      	movs	r3, #1
 800219a:	ca06      	ldmia	r2, {r1, r2}
 800219c:	487d      	ldr	r0, [pc, #500]	; (8002394 <main+0x2dc>)
 800219e:	f7ff f9ef 	bl	8001580 <ssd1306_WriteString>
    ssd1306_SetCursor(100, 0);
 80021a2:	2100      	movs	r1, #0
 80021a4:	2064      	movs	r0, #100	; 0x64
 80021a6:	f7ff fa11 	bl	80015cc <ssd1306_SetCursor>
                   ssd1306_WriteString("°", Font_11x18, White);
 80021aa:	4a78      	ldr	r2, [pc, #480]	; (800238c <main+0x2d4>)
 80021ac:	2301      	movs	r3, #1
 80021ae:	ca06      	ldmia	r2, {r1, r2}
 80021b0:	4879      	ldr	r0, [pc, #484]	; (8002398 <main+0x2e0>)
 80021b2:	f7ff f9e5 	bl	8001580 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 19);
 80021b6:	2113      	movs	r1, #19
 80021b8:	2000      	movs	r0, #0
 80021ba:	f7ff fa07 	bl	80015cc <ssd1306_SetCursor>
      ssd1306_WriteString("BAT - ", Font_11x18, White);
 80021be:	4a73      	ldr	r2, [pc, #460]	; (800238c <main+0x2d4>)
 80021c0:	2301      	movs	r3, #1
 80021c2:	ca06      	ldmia	r2, {r1, r2}
 80021c4:	4875      	ldr	r0, [pc, #468]	; (800239c <main+0x2e4>)
 80021c6:	f7ff f9db 	bl	8001580 <ssd1306_WriteString>
      ssd1306_SetCursor(100, 19);
 80021ca:	2113      	movs	r1, #19
 80021cc:	2064      	movs	r0, #100	; 0x64
 80021ce:	f7ff f9fd 	bl	80015cc <ssd1306_SetCursor>
            ssd1306_WriteString("%", Font_11x18, White);
 80021d2:	4a6e      	ldr	r2, [pc, #440]	; (800238c <main+0x2d4>)
 80021d4:	2301      	movs	r3, #1
 80021d6:	ca06      	ldmia	r2, {r1, r2}
 80021d8:	4871      	ldr	r0, [pc, #452]	; (80023a0 <main+0x2e8>)
 80021da:	f7ff f9d1 	bl	8001580 <ssd1306_WriteString>
  //EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
  //driver_delay_xms(5000);
  ADS1115_Config_t configReg;
  ADS1115_Handle_t *pADS;
	#define ADS1115_ADR 72
  configReg.channel = CHANNEL_AIN1_GND;
 80021de:	2305      	movs	r3, #5
 80021e0:	773b      	strb	r3, [r7, #28]
  configReg.pgaConfig = PGA_4_096;
 80021e2:	2301      	movs	r3, #1
 80021e4:	777b      	strb	r3, [r7, #29]
  configReg.operatingMode = MODE_CONTINOUS;
 80021e6:	2300      	movs	r3, #0
 80021e8:	77bb      	strb	r3, [r7, #30]
  configReg.dataRate = DRATE_250;
 80021ea:	2305      	movs	r3, #5
 80021ec:	77fb      	strb	r3, [r7, #31]
  configReg.compareMode = COMP_HYSTERESIS;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f887 3020 	strb.w	r3, [r7, #32]
  configReg.polarityMode = POLARITY_ACTIVE_LOW;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  configReg.latchingMode = LATCHING_NONE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  configReg.queueComparator = QUEUE_ONE;
 8002200:	2300      	movs	r3, #0
 8002202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t bytes[3] = {0};
 8002206:	4b67      	ldr	r3, [pc, #412]	; (80023a4 <main+0x2ec>)
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	833b      	strh	r3, [r7, #24]
 800220c:	2300      	movs	r3, #0
 800220e:	76bb      	strb	r3, [r7, #26]
  pADS = ADS1115_init(&hi2c1, ADS1115_ADR, configReg);
 8002210:	f107 031c 	add.w	r3, r7, #28
 8002214:	cb0c      	ldmia	r3, {r2, r3}
 8002216:	2148      	movs	r1, #72	; 0x48
 8002218:	485b      	ldr	r0, [pc, #364]	; (8002388 <main+0x2d0>)
 800221a:	f7fe fd51 	bl	8000cc0 <ADS1115_init>
 800221e:	63f8      	str	r0, [r7, #60]	; 0x3c
  ADS1115_updateConfig(pADS, configReg);
 8002220:	f107 031c 	add.w	r3, r7, #28
 8002224:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002228:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800222a:	f7fe fd69 	bl	8000d00 <ADS1115_updateConfig>
  ADS1115_startContinousMode(pADS);
 800222e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002230:	f7fe fdcc 	bl	8000dcc <ADS1115_startContinousMode>
  //ADS1115_setConversionReadyPin(pADS);
  float data_from_adc_0 = 0;
 8002234:	f04f 0300 	mov.w	r3, #0
 8002238:	63bb      	str	r3, [r7, #56]	; 0x38
  MCP4725 myMCP4725 = MCP4725_init(&hi2c1, MCP4725A0_ADDR_A00, 3.30);
 800223a:	f107 0308 	add.w	r3, r7, #8
 800223e:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 80023a8 <main+0x2f0>
 8002242:	2260      	movs	r2, #96	; 0x60
 8002244:	4950      	ldr	r1, [pc, #320]	; (8002388 <main+0x2d0>)
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fe46 	bl	8000ed8 <MCP4725_init>
	// Check the connection:
	uint8_t state_dac = MCP4725_isConnected(&myMCP4725);
 800224c:	f107 0308 	add.w	r3, r7, #8
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe fe62 	bl	8000f1a <MCP4725_isConnected>
 8002256:	4603      	mov	r3, r0
 8002258:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint16_t v_out = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  for(uint8_t temp = 0; temp < 80; temp++){
 8002262:	2300      	movs	r3, #0
 8002264:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002268:	e027      	b.n	80022ba <main+0x202>
	  MCP4725_setValue(&myMCP4725, v_out, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 800226a:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 800226e:	f107 0008 	add.w	r0, r7, #8
 8002272:	2300      	movs	r3, #0
 8002274:	2200      	movs	r2, #0
 8002276:	f7fe fe93 	bl	8000fa0 <MCP4725_setValue>
	  HAL_Delay(50);
 800227a:	2032      	movs	r0, #50	; 0x32
 800227c:	f000 fd84 	bl	8002d88 <HAL_Delay>
	  data_from_adc_0 = (ADS1115_getData(pADS));
 8002280:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002282:	f7fe fd6f 	bl	8000d64 <ADS1115_getData>
 8002286:	4603      	mov	r3, r0
 8002288:	ee07 3a90 	vmov	s15, r3
 800228c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002290:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	  v_out+= 150;
 8002294:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002298:	3396      	adds	r3, #150	; 0x96
 800229a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	  if(v_out > 4060)
 800229e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80022a2:	f640 72dc 	movw	r2, #4060	; 0xfdc
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d902      	bls.n	80022b0 <main+0x1f8>
		  v_out = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  for(uint8_t temp = 0; temp < 80; temp++){
 80022b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80022b4:	3301      	adds	r3, #1
 80022b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80022ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80022be:	2b4f      	cmp	r3, #79	; 0x4f
 80022c0:	d9d3      	bls.n	800226a <main+0x1b2>
  }

  uint16_t angle = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	86bb      	strh	r3, [r7, #52]	; 0x34
  uint8_t staty_encoder = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  for(uint8_t test = 0; test < 50; test++){
 80022cc:	2300      	movs	r3, #0
 80022ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80022d2:	e011      	b.n	80022f8 <main+0x240>
	  angle = AS5600_GetAngle();
 80022d4:	f7ff feaa 	bl	800202c <AS5600_GetAngle>
 80022d8:	4603      	mov	r3, r0
 80022da:	86bb      	strh	r3, [r7, #52]	; 0x34
	  raw_angle = AS5600_GetRawAngle();
 80022dc:	f7ff feca 	bl	8002074 <AS5600_GetRawAngle>
 80022e0:	4603      	mov	r3, r0
 80022e2:	461a      	mov	r2, r3
 80022e4:	4b31      	ldr	r3, [pc, #196]	; (80023ac <main+0x2f4>)
 80022e6:	801a      	strh	r2, [r3, #0]

	  HAL_Delay(10);
 80022e8:	200a      	movs	r0, #10
 80022ea:	f000 fd4d 	bl	8002d88 <HAL_Delay>
  for(uint8_t test = 0; test < 50; test++){
 80022ee:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80022f2:	3301      	adds	r3, #1
 80022f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80022f8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80022fc:	2b31      	cmp	r3, #49	; 0x31
 80022fe:	d9e9      	bls.n	80022d4 <main+0x21c>
  }
  uint8_t color = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  		  magnituda.data = AS5600_GetStatus();
 8002306:	f7ff fecb 	bl	80020a0 <AS5600_GetStatus>
 800230a:	4603      	mov	r3, r0
 800230c:	461a      	mov	r2, r3
 800230e:	4b28      	ldr	r3, [pc, #160]	; (80023b0 <main+0x2f8>)
 8002310:	701a      	strb	r2, [r3, #0]
  		  raw_angle = AS5600_GetAngle();
 8002312:	f7ff fe8b 	bl	800202c <AS5600_GetAngle>
 8002316:	4603      	mov	r3, r0
 8002318:	461a      	mov	r2, r3
 800231a:	4b24      	ldr	r3, [pc, #144]	; (80023ac <main+0x2f4>)
 800231c:	801a      	strh	r2, [r3, #0]
  		  if(magnituda.state_magnit.MD != 1){
 800231e:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <main+0x2f8>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d102      	bne.n	8002332 <main+0x27a>
  			  raw_angle = 0;
 800232c:	4b1f      	ldr	r3, [pc, #124]	; (80023ac <main+0x2f4>)
 800232e:	2200      	movs	r2, #0
 8002330:	801a      	strh	r2, [r3, #0]
  		  }

		  char sym[3];
		  itoa(raw_angle,sym,10);
 8002332:	4b1e      	ldr	r3, [pc, #120]	; (80023ac <main+0x2f4>)
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	220a      	movs	r2, #10
 800233c:	4619      	mov	r1, r3
 800233e:	f007 fb4f 	bl	80099e0 <itoa>
		  	  ssd1306_SetCursor(67, 0);
 8002342:	2100      	movs	r1, #0
 8002344:	2043      	movs	r0, #67	; 0x43
 8002346:	f7ff f941 	bl	80015cc <ssd1306_SetCursor>
		      ssd1306_WriteString(sym, Font_11x18, White);
 800234a:	4a10      	ldr	r2, [pc, #64]	; (800238c <main+0x2d4>)
 800234c:	1d38      	adds	r0, r7, #4
 800234e:	2301      	movs	r3, #1
 8002350:	ca06      	ldmia	r2, {r1, r2}
 8002352:	f7ff f915 	bl	8001580 <ssd1306_WriteString>
		      ssd1306_SetCursor(67, 19);
 8002356:	2113      	movs	r1, #19
 8002358:	2043      	movs	r0, #67	; 0x43
 800235a:	f7ff f937 	bl	80015cc <ssd1306_SetCursor>
		      ssd1306_UpdateScreen();
 800235e:	f7ff f80b 	bl	8001378 <ssd1306_UpdateScreen>
		      HAL_Delay(40);
 8002362:	2028      	movs	r0, #40	; 0x28
 8002364:	f000 fd10 	bl	8002d88 <HAL_Delay>
  //EPD_WhiteScreen_ALL_Clean();
  //EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002368:	f004 fd7a 	bl	8006e60 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of EmptyTask */
  EmptyTaskHandle = osThreadNew(StartEmptyTask, NULL, &EmptyTask_attributes);
 800236c:	4a11      	ldr	r2, [pc, #68]	; (80023b4 <main+0x2fc>)
 800236e:	2100      	movs	r1, #0
 8002370:	4811      	ldr	r0, [pc, #68]	; (80023b8 <main+0x300>)
 8002372:	f004 fdbf 	bl	8006ef4 <osThreadNew>
 8002376:	4603      	mov	r3, r0
 8002378:	4a10      	ldr	r2, [pc, #64]	; (80023bc <main+0x304>)
 800237a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  initUserTasks();
 800237c:	f000 fc78 	bl	8002c70 <initUserTasks>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002380:	f004 fd92 	bl	8006ea8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002384:	e7fe      	b.n	8002384 <main+0x2cc>
 8002386:	bf00      	nop
 8002388:	20000580 	.word	0x20000580
 800238c:	20000000 	.word	0x20000000
 8002390:	08009d9c 	.word	0x08009d9c
 8002394:	08009da8 	.word	0x08009da8
 8002398:	08009db0 	.word	0x08009db0
 800239c:	08009db4 	.word	0x08009db4
 80023a0:	08009dbc 	.word	0x08009dbc
 80023a4:	08009dc0 	.word	0x08009dc0
 80023a8:	40533333 	.word	0x40533333
 80023ac:	200006d8 	.word	0x200006d8
 80023b0:	200006dc 	.word	0x200006dc
 80023b4:	0800ab60 	.word	0x0800ab60
 80023b8:	08002791 	.word	0x08002791
 80023bc:	200006d4 	.word	0x200006d4

080023c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b094      	sub	sp, #80	; 0x50
 80023c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023c6:	f107 0320 	add.w	r3, r7, #32
 80023ca:	2230      	movs	r2, #48	; 0x30
 80023cc:	2100      	movs	r1, #0
 80023ce:	4618      	mov	r0, r3
 80023d0:	f007 fb20 	bl	8009a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023d4:	f107 030c 	add.w	r3, r7, #12
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023e4:	2300      	movs	r3, #0
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	4b27      	ldr	r3, [pc, #156]	; (8002488 <SystemClock_Config+0xc8>)
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	4a26      	ldr	r2, [pc, #152]	; (8002488 <SystemClock_Config+0xc8>)
 80023ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f2:	6413      	str	r3, [r2, #64]	; 0x40
 80023f4:	4b24      	ldr	r3, [pc, #144]	; (8002488 <SystemClock_Config+0xc8>)
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002400:	2300      	movs	r3, #0
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	4b21      	ldr	r3, [pc, #132]	; (800248c <SystemClock_Config+0xcc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a20      	ldr	r2, [pc, #128]	; (800248c <SystemClock_Config+0xcc>)
 800240a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	4b1e      	ldr	r3, [pc, #120]	; (800248c <SystemClock_Config+0xcc>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002418:	607b      	str	r3, [r7, #4]
 800241a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800241c:	2301      	movs	r3, #1
 800241e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002420:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002426:	2302      	movs	r3, #2
 8002428:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800242a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800242e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002430:	2319      	movs	r3, #25
 8002432:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002434:	2390      	movs	r3, #144	; 0x90
 8002436:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002438:	2302      	movs	r3, #2
 800243a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800243c:	2304      	movs	r3, #4
 800243e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002440:	f107 0320 	add.w	r3, r7, #32
 8002444:	4618      	mov	r0, r3
 8002446:	f003 f84f 	bl	80054e8 <HAL_RCC_OscConfig>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002450:	f000 f9b8 	bl	80027c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002454:	230f      	movs	r3, #15
 8002456:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002458:	2302      	movs	r3, #2
 800245a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002464:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800246a:	f107 030c 	add.w	r3, r7, #12
 800246e:	2102      	movs	r1, #2
 8002470:	4618      	mov	r0, r3
 8002472:	f003 fab1 	bl	80059d8 <HAL_RCC_ClockConfig>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800247c:	f000 f9a2 	bl	80027c4 <Error_Handler>
  }
}
 8002480:	bf00      	nop
 8002482:	3750      	adds	r7, #80	; 0x50
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40023800 	.word	0x40023800
 800248c:	40007000 	.word	0x40007000

08002490 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002494:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <MX_I2C1_Init+0x50>)
 8002496:	4a13      	ldr	r2, [pc, #76]	; (80024e4 <MX_I2C1_Init+0x54>)
 8002498:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800249a:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <MX_I2C1_Init+0x50>)
 800249c:	4a12      	ldr	r2, [pc, #72]	; (80024e8 <MX_I2C1_Init+0x58>)
 800249e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024a0:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <MX_I2C1_Init+0x50>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024a6:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <MX_I2C1_Init+0x50>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <MX_I2C1_Init+0x50>)
 80024ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024b4:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <MX_I2C1_Init+0x50>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <MX_I2C1_Init+0x50>)
 80024bc:	2200      	movs	r2, #0
 80024be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024c0:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <MX_I2C1_Init+0x50>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <MX_I2C1_Init+0x50>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024cc:	4804      	ldr	r0, [pc, #16]	; (80024e0 <MX_I2C1_Init+0x50>)
 80024ce:	f001 faa9 	bl	8003a24 <HAL_I2C_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024d8:	f000 f974 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000580 	.word	0x20000580
 80024e4:	40005400 	.word	0x40005400
 80024e8:	00061a80 	.word	0x00061a80

080024ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024f0:	4b17      	ldr	r3, [pc, #92]	; (8002550 <MX_SPI1_Init+0x64>)
 80024f2:	4a18      	ldr	r2, [pc, #96]	; (8002554 <MX_SPI1_Init+0x68>)
 80024f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024f6:	4b16      	ldr	r3, [pc, #88]	; (8002550 <MX_SPI1_Init+0x64>)
 80024f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024fe:	4b14      	ldr	r3, [pc, #80]	; (8002550 <MX_SPI1_Init+0x64>)
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002504:	4b12      	ldr	r3, [pc, #72]	; (8002550 <MX_SPI1_Init+0x64>)
 8002506:	2200      	movs	r2, #0
 8002508:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800250a:	4b11      	ldr	r3, [pc, #68]	; (8002550 <MX_SPI1_Init+0x64>)
 800250c:	2200      	movs	r2, #0
 800250e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002510:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <MX_SPI1_Init+0x64>)
 8002512:	2200      	movs	r2, #0
 8002514:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002516:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <MX_SPI1_Init+0x64>)
 8002518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800251c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800251e:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <MX_SPI1_Init+0x64>)
 8002520:	2230      	movs	r2, #48	; 0x30
 8002522:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002524:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <MX_SPI1_Init+0x64>)
 8002526:	2200      	movs	r2, #0
 8002528:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <MX_SPI1_Init+0x64>)
 800252c:	2200      	movs	r2, #0
 800252e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002530:	4b07      	ldr	r3, [pc, #28]	; (8002550 <MX_SPI1_Init+0x64>)
 8002532:	2200      	movs	r2, #0
 8002534:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <MX_SPI1_Init+0x64>)
 8002538:	220a      	movs	r2, #10
 800253a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800253c:	4804      	ldr	r0, [pc, #16]	; (8002550 <MX_SPI1_Init+0x64>)
 800253e:	f003 fc5d 	bl	8005dfc <HAL_SPI_Init>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002548:	f000 f93c 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800254c:	bf00      	nop
 800254e:	bd80      	pop	{r7, pc}
 8002550:	200005d4 	.word	0x200005d4
 8002554:	40013000 	.word	0x40013000

08002558 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08e      	sub	sp, #56	; 0x38
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800255e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800256c:	f107 0320 	add.w	r3, r7, #32
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]
 8002584:	615a      	str	r2, [r3, #20]
 8002586:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002588:	4b2c      	ldr	r3, [pc, #176]	; (800263c <MX_TIM2_Init+0xe4>)
 800258a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800258e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002590:	4b2a      	ldr	r3, [pc, #168]	; (800263c <MX_TIM2_Init+0xe4>)
 8002592:	2200      	movs	r2, #0
 8002594:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002596:	4b29      	ldr	r3, [pc, #164]	; (800263c <MX_TIM2_Init+0xe4>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 800259c:	4b27      	ldr	r3, [pc, #156]	; (800263c <MX_TIM2_Init+0xe4>)
 800259e:	2259      	movs	r2, #89	; 0x59
 80025a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a2:	4b26      	ldr	r3, [pc, #152]	; (800263c <MX_TIM2_Init+0xe4>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a8:	4b24      	ldr	r3, [pc, #144]	; (800263c <MX_TIM2_Init+0xe4>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025ae:	4823      	ldr	r0, [pc, #140]	; (800263c <MX_TIM2_Init+0xe4>)
 80025b0:	f003 fcad 	bl	8005f0e <HAL_TIM_Base_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80025ba:	f000 f903 	bl	80027c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025c8:	4619      	mov	r1, r3
 80025ca:	481c      	ldr	r0, [pc, #112]	; (800263c <MX_TIM2_Init+0xe4>)
 80025cc:	f003 ff74 	bl	80064b8 <HAL_TIM_ConfigClockSource>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80025d6:	f000 f8f5 	bl	80027c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025da:	4818      	ldr	r0, [pc, #96]	; (800263c <MX_TIM2_Init+0xe4>)
 80025dc:	f003 fd48 	bl	8006070 <HAL_TIM_PWM_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80025e6:	f000 f8ed 	bl	80027c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025f2:	f107 0320 	add.w	r3, r7, #32
 80025f6:	4619      	mov	r1, r3
 80025f8:	4810      	ldr	r0, [pc, #64]	; (800263c <MX_TIM2_Init+0xe4>)
 80025fa:	f004 fb6b 	bl	8006cd4 <HAL_TIMEx_MasterConfigSynchronization>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002604:	f000 f8de 	bl	80027c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002608:	2360      	movs	r3, #96	; 0x60
 800260a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	2204      	movs	r2, #4
 800261c:	4619      	mov	r1, r3
 800261e:	4807      	ldr	r0, [pc, #28]	; (800263c <MX_TIM2_Init+0xe4>)
 8002620:	f003 fe88 	bl	8006334 <HAL_TIM_PWM_ConfigChannel>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800262a:	f000 f8cb 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800262e:	4803      	ldr	r0, [pc, #12]	; (800263c <MX_TIM2_Init+0xe4>)
 8002630:	f000 f9ea 	bl	8002a08 <HAL_TIM_MspPostInit>

}
 8002634:	bf00      	nop
 8002636:	3738      	adds	r7, #56	; 0x38
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	2000062c 	.word	0x2000062c

08002640 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	4b0c      	ldr	r3, [pc, #48]	; (800267c <MX_DMA_Init+0x3c>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a0b      	ldr	r2, [pc, #44]	; (800267c <MX_DMA_Init+0x3c>)
 8002650:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <MX_DMA_Init+0x3c>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002662:	2200      	movs	r2, #0
 8002664:	2105      	movs	r1, #5
 8002666:	2011      	movs	r0, #17
 8002668:	f000 fc6a 	bl	8002f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800266c:	2011      	movs	r0, #17
 800266e:	f000 fc83 	bl	8002f78 <HAL_NVIC_EnableIRQ>

}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40023800 	.word	0x40023800

08002680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b088      	sub	sp, #32
 8002684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002686:	f107 030c 	add.w	r3, r7, #12
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	609a      	str	r2, [r3, #8]
 8002692:	60da      	str	r2, [r3, #12]
 8002694:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	4b31      	ldr	r3, [pc, #196]	; (8002760 <MX_GPIO_Init+0xe0>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	4a30      	ldr	r2, [pc, #192]	; (8002760 <MX_GPIO_Init+0xe0>)
 80026a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026a4:	6313      	str	r3, [r2, #48]	; 0x30
 80026a6:	4b2e      	ldr	r3, [pc, #184]	; (8002760 <MX_GPIO_Init+0xe0>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	607b      	str	r3, [r7, #4]
 80026b6:	4b2a      	ldr	r3, [pc, #168]	; (8002760 <MX_GPIO_Init+0xe0>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	4a29      	ldr	r2, [pc, #164]	; (8002760 <MX_GPIO_Init+0xe0>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6313      	str	r3, [r2, #48]	; 0x30
 80026c2:	4b27      	ldr	r3, [pc, #156]	; (8002760 <MX_GPIO_Init+0xe0>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	607b      	str	r3, [r7, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	603b      	str	r3, [r7, #0]
 80026d2:	4b23      	ldr	r3, [pc, #140]	; (8002760 <MX_GPIO_Init+0xe0>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	4a22      	ldr	r2, [pc, #136]	; (8002760 <MX_GPIO_Init+0xe0>)
 80026d8:	f043 0302 	orr.w	r3, r3, #2
 80026dc:	6313      	str	r3, [r2, #48]	; 0x30
 80026de:	4b20      	ldr	r3, [pc, #128]	; (8002760 <MX_GPIO_Init+0xe0>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin, GPIO_PIN_RESET);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2107      	movs	r1, #7
 80026ee:	481d      	ldr	r0, [pc, #116]	; (8002764 <MX_GPIO_Init+0xe4>)
 80026f0:	f001 f966 	bl	80039c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_CS_Pin EPD_Reset_Pin EPD_Data_Control_Pin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin;
 80026f4:	2307      	movs	r3, #7
 80026f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f8:	2301      	movs	r3, #1
 80026fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002700:	2300      	movs	r3, #0
 8002702:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002704:	f107 030c 	add.w	r3, r7, #12
 8002708:	4619      	mov	r1, r3
 800270a:	4816      	ldr	r0, [pc, #88]	; (8002764 <MX_GPIO_Init+0xe4>)
 800270c:	f000 ffd4 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_Busy_Pin */
  GPIO_InitStruct.Pin = EPD_Busy_Pin;
 8002710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002714:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800271a:	2302      	movs	r3, #2
 800271c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EPD_Busy_GPIO_Port, &GPIO_InitStruct);
 800271e:	f107 030c 	add.w	r3, r7, #12
 8002722:	4619      	mov	r1, r3
 8002724:	480f      	ldr	r0, [pc, #60]	; (8002764 <MX_GPIO_Init+0xe4>)
 8002726:	f000 ffc7 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_button_on_Pin */
  GPIO_InitStruct.Pin = EXT_button_on_Pin;
 800272a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800272e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002730:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002734:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002736:	2301      	movs	r3, #1
 8002738:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EXT_button_on_GPIO_Port, &GPIO_InitStruct);
 800273a:	f107 030c 	add.w	r3, r7, #12
 800273e:	4619      	mov	r1, r3
 8002740:	4808      	ldr	r0, [pc, #32]	; (8002764 <MX_GPIO_Init+0xe4>)
 8002742:	f000 ffb9 	bl	80036b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002746:	2200      	movs	r2, #0
 8002748:	2105      	movs	r1, #5
 800274a:	2028      	movs	r0, #40	; 0x28
 800274c:	f000 fbf8 	bl	8002f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002750:	2028      	movs	r0, #40	; 0x28
 8002752:	f000 fc11 	bl	8002f78 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002756:	bf00      	nop
 8002758:	3720      	adds	r7, #32
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800
 8002764:	40020400 	.word	0x40020400

08002768 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
uint8_t X3 = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	80fb      	strh	r3, [r7, #6]
	X3++;
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_GPIO_EXTI_Callback+0x24>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	3301      	adds	r3, #1
 8002778:	b2da      	uxtb	r2, r3
 800277a:	4b04      	ldr	r3, [pc, #16]	; (800278c <HAL_GPIO_EXTI_Callback+0x24>)
 800277c:	701a      	strb	r2, [r3, #0]
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	200006dd 	.word	0x200006dd

08002790 <StartEmptyTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEmptyTask */
void StartEmptyTask(void *argument)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(1);
 8002798:	2001      	movs	r0, #1
 800279a:	f004 fc3d 	bl	8007018 <osDelay>
 800279e:	e7fb      	b.n	8002798 <StartEmptyTask+0x8>

080027a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d101      	bne.n	80027b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80027b2:	f000 fac9 	bl	8002d48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40014000 	.word	0x40014000

080027c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027c8:	b672      	cpsid	i
}
 80027ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027cc:	e7fe      	b.n	80027cc <Error_Handler+0x8>
	...

080027d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	607b      	str	r3, [r7, #4]
 80027da:	4b12      	ldr	r3, [pc, #72]	; (8002824 <HAL_MspInit+0x54>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	4a11      	ldr	r2, [pc, #68]	; (8002824 <HAL_MspInit+0x54>)
 80027e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e4:	6453      	str	r3, [r2, #68]	; 0x44
 80027e6:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <HAL_MspInit+0x54>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ee:	607b      	str	r3, [r7, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	603b      	str	r3, [r7, #0]
 80027f6:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_MspInit+0x54>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <HAL_MspInit+0x54>)
 80027fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002800:	6413      	str	r3, [r2, #64]	; 0x40
 8002802:	4b08      	ldr	r3, [pc, #32]	; (8002824 <HAL_MspInit+0x54>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280a:	603b      	str	r3, [r7, #0]
 800280c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800280e:	2200      	movs	r2, #0
 8002810:	210f      	movs	r1, #15
 8002812:	f06f 0001 	mvn.w	r0, #1
 8002816:	f000 fb93 	bl	8002f40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800

08002828 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	; 0x28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	f107 0314 	add.w	r3, r7, #20
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a19      	ldr	r2, [pc, #100]	; (80028ac <HAL_I2C_MspInit+0x84>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d12b      	bne.n	80028a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <HAL_I2C_MspInit+0x88>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	4a17      	ldr	r2, [pc, #92]	; (80028b0 <HAL_I2C_MspInit+0x88>)
 8002854:	f043 0302 	orr.w	r3, r3, #2
 8002858:	6313      	str	r3, [r2, #48]	; 0x30
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <HAL_I2C_MspInit+0x88>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002866:	23c0      	movs	r3, #192	; 0xc0
 8002868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800286a:	2312      	movs	r3, #18
 800286c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002872:	2303      	movs	r3, #3
 8002874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002876:	2304      	movs	r3, #4
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287a:	f107 0314 	add.w	r3, r7, #20
 800287e:	4619      	mov	r1, r3
 8002880:	480c      	ldr	r0, [pc, #48]	; (80028b4 <HAL_I2C_MspInit+0x8c>)
 8002882:	f000 ff19 	bl	80036b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <HAL_I2C_MspInit+0x88>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	4a08      	ldr	r2, [pc, #32]	; (80028b0 <HAL_I2C_MspInit+0x88>)
 8002890:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002894:	6413      	str	r3, [r2, #64]	; 0x40
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_I2C_MspInit+0x88>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028a2:	bf00      	nop
 80028a4:	3728      	adds	r7, #40	; 0x28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40005400 	.word	0x40005400
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40020400 	.word	0x40020400

080028b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08a      	sub	sp, #40	; 0x28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a19      	ldr	r2, [pc, #100]	; (800293c <HAL_SPI_MspInit+0x84>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d12b      	bne.n	8002932 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	4b18      	ldr	r3, [pc, #96]	; (8002940 <HAL_SPI_MspInit+0x88>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	4a17      	ldr	r2, [pc, #92]	; (8002940 <HAL_SPI_MspInit+0x88>)
 80028e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028e8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <HAL_SPI_MspInit+0x88>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	4b11      	ldr	r3, [pc, #68]	; (8002940 <HAL_SPI_MspInit+0x88>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a10      	ldr	r2, [pc, #64]	; (8002940 <HAL_SPI_MspInit+0x88>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <HAL_SPI_MspInit+0x88>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002912:	23a0      	movs	r3, #160	; 0xa0
 8002914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002916:	2302      	movs	r3, #2
 8002918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291e:	2303      	movs	r3, #3
 8002920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002922:	2305      	movs	r3, #5
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002926:	f107 0314 	add.w	r3, r7, #20
 800292a:	4619      	mov	r1, r3
 800292c:	4805      	ldr	r0, [pc, #20]	; (8002944 <HAL_SPI_MspInit+0x8c>)
 800292e:	f000 fec3 	bl	80036b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002932:	bf00      	nop
 8002934:	3728      	adds	r7, #40	; 0x28
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40013000 	.word	0x40013000
 8002940:	40023800 	.word	0x40023800
 8002944:	40020000 	.word	0x40020000

08002948 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002958:	d14c      	bne.n	80029f4 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	4b27      	ldr	r3, [pc, #156]	; (80029fc <HAL_TIM_Base_MspInit+0xb4>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	4a26      	ldr	r2, [pc, #152]	; (80029fc <HAL_TIM_Base_MspInit+0xb4>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6413      	str	r3, [r2, #64]	; 0x40
 800296a:	4b24      	ldr	r3, [pc, #144]	; (80029fc <HAL_TIM_Base_MspInit+0xb4>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 8002976:	4b22      	ldr	r3, [pc, #136]	; (8002a00 <HAL_TIM_Base_MspInit+0xb8>)
 8002978:	4a22      	ldr	r2, [pc, #136]	; (8002a04 <HAL_TIM_Base_MspInit+0xbc>)
 800297a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 800297c:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <HAL_TIM_Base_MspInit+0xb8>)
 800297e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002982:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002984:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <HAL_TIM_Base_MspInit+0xb8>)
 8002986:	2240      	movs	r2, #64	; 0x40
 8002988:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800298a:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <HAL_TIM_Base_MspInit+0xb8>)
 800298c:	2200      	movs	r2, #0
 800298e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <HAL_TIM_Base_MspInit+0xb8>)
 8002992:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002996:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002998:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <HAL_TIM_Base_MspInit+0xb8>)
 800299a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800299e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029a0:	4b17      	ldr	r3, [pc, #92]	; (8002a00 <HAL_TIM_Base_MspInit+0xb8>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 80029a6:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <HAL_TIM_Base_MspInit+0xb8>)
 80029a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029ac:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80029ae:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <HAL_TIM_Base_MspInit+0xb8>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <HAL_TIM_Base_MspInit+0xb8>)
 80029b6:	2204      	movs	r2, #4
 80029b8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch2_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80029ba:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <HAL_TIM_Base_MspInit+0xb8>)
 80029bc:	2203      	movs	r2, #3
 80029be:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch2_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 80029c0:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <HAL_TIM_Base_MspInit+0xb8>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch2_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80029c6:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <HAL_TIM_Base_MspInit+0xb8>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80029cc:	480c      	ldr	r0, [pc, #48]	; (8002a00 <HAL_TIM_Base_MspInit+0xb8>)
 80029ce:	f000 fae1 	bl	8002f94 <HAL_DMA_Init>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <HAL_TIM_Base_MspInit+0x94>
    {
      Error_Handler();
 80029d8:	f7ff fef4 	bl	80027c4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a08      	ldr	r2, [pc, #32]	; (8002a00 <HAL_TIM_Base_MspInit+0xb8>)
 80029e0:	629a      	str	r2, [r3, #40]	; 0x28
 80029e2:	4a07      	ldr	r2, [pc, #28]	; (8002a00 <HAL_TIM_Base_MspInit+0xb8>)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a05      	ldr	r2, [pc, #20]	; (8002a00 <HAL_TIM_Base_MspInit+0xb8>)
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30
 80029ee:	4a04      	ldr	r2, [pc, #16]	; (8002a00 <HAL_TIM_Base_MspInit+0xb8>)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80029f4:	bf00      	nop
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40023800 	.word	0x40023800
 8002a00:	20000674 	.word	0x20000674
 8002a04:	400260a0 	.word	0x400260a0

08002a08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	f107 030c 	add.w	r3, r7, #12
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a28:	d11d      	bne.n	8002a66 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <HAL_TIM_MspPostInit+0x68>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	4a0f      	ldr	r2, [pc, #60]	; (8002a70 <HAL_TIM_MspPostInit+0x68>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <HAL_TIM_MspPostInit+0x68>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a46:	2302      	movs	r3, #2
 8002a48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a52:	2302      	movs	r3, #2
 8002a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a56:	2301      	movs	r3, #1
 8002a58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5a:	f107 030c 	add.w	r3, r7, #12
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4804      	ldr	r0, [pc, #16]	; (8002a74 <HAL_TIM_MspPostInit+0x6c>)
 8002a62:	f000 fe29 	bl	80036b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a66:	bf00      	nop
 8002a68:	3720      	adds	r7, #32
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40020000 	.word	0x40020000

08002a78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08c      	sub	sp, #48	; 0x30
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	4b2e      	ldr	r3, [pc, #184]	; (8002b48 <HAL_InitTick+0xd0>)
 8002a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a90:	4a2d      	ldr	r2, [pc, #180]	; (8002b48 <HAL_InitTick+0xd0>)
 8002a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a96:	6453      	str	r3, [r2, #68]	; 0x44
 8002a98:	4b2b      	ldr	r3, [pc, #172]	; (8002b48 <HAL_InitTick+0xd0>)
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002aa4:	f107 020c 	add.w	r2, r7, #12
 8002aa8:	f107 0310 	add.w	r3, r7, #16
 8002aac:	4611      	mov	r1, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f003 f972 	bl	8005d98 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002ab4:	f003 f95c 	bl	8005d70 <HAL_RCC_GetPCLK2Freq>
 8002ab8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abc:	4a23      	ldr	r2, [pc, #140]	; (8002b4c <HAL_InitTick+0xd4>)
 8002abe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac2:	0c9b      	lsrs	r3, r3, #18
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8002ac8:	4b21      	ldr	r3, [pc, #132]	; (8002b50 <HAL_InitTick+0xd8>)
 8002aca:	4a22      	ldr	r2, [pc, #136]	; (8002b54 <HAL_InitTick+0xdc>)
 8002acc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8002ace:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <HAL_InitTick+0xd8>)
 8002ad0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ad4:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8002ad6:	4a1e      	ldr	r2, [pc, #120]	; (8002b50 <HAL_InitTick+0xd8>)
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8002adc:	4b1c      	ldr	r3, [pc, #112]	; (8002b50 <HAL_InitTick+0xd8>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae2:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <HAL_InitTick+0xd8>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_InitTick+0xd8>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8002aee:	4818      	ldr	r0, [pc, #96]	; (8002b50 <HAL_InitTick+0xd8>)
 8002af0:	f003 fa0d 	bl	8005f0e <HAL_TIM_Base_Init>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002afa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d11b      	bne.n	8002b3a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8002b02:	4813      	ldr	r0, [pc, #76]	; (8002b50 <HAL_InitTick+0xd8>)
 8002b04:	f003 fa52 	bl	8005fac <HAL_TIM_Base_Start_IT>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002b0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d111      	bne.n	8002b3a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002b16:	2018      	movs	r0, #24
 8002b18:	f000 fa2e 	bl	8002f78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b0f      	cmp	r3, #15
 8002b20:	d808      	bhi.n	8002b34 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8002b22:	2200      	movs	r2, #0
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	2018      	movs	r0, #24
 8002b28:	f000 fa0a 	bl	8002f40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b2c:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <HAL_InitTick+0xe0>)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	e002      	b.n	8002b3a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002b3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3730      	adds	r7, #48	; 0x30
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	431bde83 	.word	0x431bde83
 8002b50:	200006e0 	.word	0x200006e0
 8002b54:	40014000 	.word	0x40014000
 8002b58:	20000010 	.word	0x20000010

08002b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b60:	e7fe      	b.n	8002b60 <NMI_Handler+0x4>

08002b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b66:	e7fe      	b.n	8002b66 <HardFault_Handler+0x4>

08002b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b6c:	e7fe      	b.n	8002b6c <MemManage_Handler+0x4>

08002b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b72:	e7fe      	b.n	8002b72 <BusFault_Handler+0x4>

08002b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b78:	e7fe      	b.n	8002b78 <UsageFault_Handler+0x4>

08002b7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8002b8c:	4802      	ldr	r0, [pc, #8]	; (8002b98 <DMA1_Stream6_IRQHandler+0x10>)
 8002b8e:	f000 fb29 	bl	80031e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000674 	.word	0x20000674

08002b9c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002ba0:	4802      	ldr	r0, [pc, #8]	; (8002bac <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002ba2:	f003 fabe 	bl	8006122 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	200006e0 	.word	0x200006e0

08002bb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT_button_on_Pin);
 8002bb4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002bb8:	f000 ff1c 	bl	80039f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bbc:	bf00      	nop
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bc8:	4a14      	ldr	r2, [pc, #80]	; (8002c1c <_sbrk+0x5c>)
 8002bca:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <_sbrk+0x60>)
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bd4:	4b13      	ldr	r3, [pc, #76]	; (8002c24 <_sbrk+0x64>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d102      	bne.n	8002be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bdc:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <_sbrk+0x64>)
 8002bde:	4a12      	ldr	r2, [pc, #72]	; (8002c28 <_sbrk+0x68>)
 8002be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002be2:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <_sbrk+0x64>)
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4413      	add	r3, r2
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d207      	bcs.n	8002c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bf0:	f006 feb4 	bl	800995c <__errno>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	220c      	movs	r2, #12
 8002bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfe:	e009      	b.n	8002c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <_sbrk+0x64>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c06:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <_sbrk+0x64>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	4a05      	ldr	r2, [pc, #20]	; (8002c24 <_sbrk+0x64>)
 8002c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c12:	68fb      	ldr	r3, [r7, #12]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20020000 	.word	0x20020000
 8002c20:	00004000 	.word	0x00004000
 8002c24:	20000728 	.word	0x20000728
 8002c28:	20005158 	.word	0x20005158

08002c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c30:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <SystemInit+0x20>)
 8002c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c36:	4a05      	ldr	r2, [pc, #20]	; (8002c4c <SystemInit+0x20>)
 8002c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <StartOledMenuTask>:

#include "tasks/OledMenu.h"

void StartOledMenuTask(void *argument){
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	  for(;;)
	  {
	    osDelay(1);
 8002c58:	2001      	movs	r0, #1
 8002c5a:	f004 f9dd 	bl	8007018 <osDelay>
	  {
 8002c5e:	e7fb      	b.n	8002c58 <StartOledMenuTask+0x8>

08002c60 <StartSensOutTask>:
#include "tasks/SensOut.h"

void StartSensOutTask(void *argument){
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
	  for(;;)
	  {
	    osDelay(1);
 8002c68:	2001      	movs	r0, #1
 8002c6a:	f004 f9d5 	bl	8007018 <osDelay>
	  {
 8002c6e:	e7fb      	b.n	8002c68 <StartSensOutTask+0x8>

08002c70 <initUserTasks>:
  .name = "SensOutTask",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityBelowNormal,
};

void initUserTasks(){
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
	OledMenuTaskHandle = osThreadNew(StartOledMenuTask, NULL, &OledMenuTask_attributes);
 8002c74:	4a08      	ldr	r2, [pc, #32]	; (8002c98 <initUserTasks+0x28>)
 8002c76:	2100      	movs	r1, #0
 8002c78:	4808      	ldr	r0, [pc, #32]	; (8002c9c <initUserTasks+0x2c>)
 8002c7a:	f004 f93b 	bl	8006ef4 <osThreadNew>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	4a07      	ldr	r2, [pc, #28]	; (8002ca0 <initUserTasks+0x30>)
 8002c82:	6013      	str	r3, [r2, #0]
	//OledOutTaskHandle  = osThreadNew(StartOledOutTask,  NULL, &OledOutTask_attributes);
	SensOutTaskHandle  = osThreadNew(StartSensOutTask,  NULL, &SensOutTask_attributes);
 8002c84:	4a07      	ldr	r2, [pc, #28]	; (8002ca4 <initUserTasks+0x34>)
 8002c86:	2100      	movs	r1, #0
 8002c88:	4807      	ldr	r0, [pc, #28]	; (8002ca8 <initUserTasks+0x38>)
 8002c8a:	f004 f933 	bl	8006ef4 <osThreadNew>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	4a06      	ldr	r2, [pc, #24]	; (8002cac <initUserTasks+0x3c>)
 8002c92:	6013      	str	r3, [r2, #0]
};
 8002c94:	bf00      	nop
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	0800ab9c 	.word	0x0800ab9c
 8002c9c:	08002c51 	.word	0x08002c51
 8002ca0:	2000072c 	.word	0x2000072c
 8002ca4:	0800abc0 	.word	0x0800abc0
 8002ca8:	08002c61 	.word	0x08002c61
 8002cac:	20000730 	.word	0x20000730

08002cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ce8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cb4:	480d      	ldr	r0, [pc, #52]	; (8002cec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cb6:	490e      	ldr	r1, [pc, #56]	; (8002cf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cb8:	4a0e      	ldr	r2, [pc, #56]	; (8002cf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cbc:	e002      	b.n	8002cc4 <LoopCopyDataInit>

08002cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cc2:	3304      	adds	r3, #4

08002cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cc8:	d3f9      	bcc.n	8002cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cca:	4a0b      	ldr	r2, [pc, #44]	; (8002cf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ccc:	4c0b      	ldr	r4, [pc, #44]	; (8002cfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cd0:	e001      	b.n	8002cd6 <LoopFillZerobss>

08002cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd4:	3204      	adds	r2, #4

08002cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cd8:	d3fb      	bcc.n	8002cd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cda:	f7ff ffa7 	bl	8002c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cde:	f006 fe43 	bl	8009968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ce2:	f7ff f9e9 	bl	80020b8 <main>
  bx  lr    
 8002ce6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ce8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cf0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002cf4:	0800ac84 	.word	0x0800ac84
  ldr r2, =_sbss
 8002cf8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002cfc:	20005158 	.word	0x20005158

08002d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d00:	e7fe      	b.n	8002d00 <ADC_IRQHandler>
	...

08002d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d08:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <HAL_Init+0x40>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0d      	ldr	r2, [pc, #52]	; (8002d44 <HAL_Init+0x40>)
 8002d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d14:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <HAL_Init+0x40>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a0a      	ldr	r2, [pc, #40]	; (8002d44 <HAL_Init+0x40>)
 8002d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <HAL_Init+0x40>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a07      	ldr	r2, [pc, #28]	; (8002d44 <HAL_Init+0x40>)
 8002d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d2c:	2003      	movs	r0, #3
 8002d2e:	f000 f8fc 	bl	8002f2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d32:	2000      	movs	r0, #0
 8002d34:	f7ff fea0 	bl	8002a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d38:	f7ff fd4a 	bl	80027d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40023c00 	.word	0x40023c00

08002d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_IncTick+0x20>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	461a      	mov	r2, r3
 8002d52:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_IncTick+0x24>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4413      	add	r3, r2
 8002d58:	4a04      	ldr	r2, [pc, #16]	; (8002d6c <HAL_IncTick+0x24>)
 8002d5a:	6013      	str	r3, [r2, #0]
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	20000014 	.word	0x20000014
 8002d6c:	20000734 	.word	0x20000734

08002d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return uwTick;
 8002d74:	4b03      	ldr	r3, [pc, #12]	; (8002d84 <HAL_GetTick+0x14>)
 8002d76:	681b      	ldr	r3, [r3, #0]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000734 	.word	0x20000734

08002d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d90:	f7ff ffee 	bl	8002d70 <HAL_GetTick>
 8002d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da0:	d005      	beq.n	8002dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002da2:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <HAL_Delay+0x44>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4413      	add	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dae:	bf00      	nop
 8002db0:	f7ff ffde 	bl	8002d70 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d8f7      	bhi.n	8002db0 <HAL_Delay+0x28>
  {
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000014 	.word	0x20000014

08002dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002de0:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <__NVIC_SetPriorityGrouping+0x44>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dec:	4013      	ands	r3, r2
 8002dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e02:	4a04      	ldr	r2, [pc, #16]	; (8002e14 <__NVIC_SetPriorityGrouping+0x44>)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	60d3      	str	r3, [r2, #12]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e1c:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <__NVIC_GetPriorityGrouping+0x18>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	0a1b      	lsrs	r3, r3, #8
 8002e22:	f003 0307 	and.w	r3, r3, #7
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	e000ed00 	.word	0xe000ed00

08002e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	db0b      	blt.n	8002e5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	f003 021f 	and.w	r2, r3, #31
 8002e4c:	4907      	ldr	r1, [pc, #28]	; (8002e6c <__NVIC_EnableIRQ+0x38>)
 8002e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e52:	095b      	lsrs	r3, r3, #5
 8002e54:	2001      	movs	r0, #1
 8002e56:	fa00 f202 	lsl.w	r2, r0, r2
 8002e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	e000e100 	.word	0xe000e100

08002e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	6039      	str	r1, [r7, #0]
 8002e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	db0a      	blt.n	8002e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	490c      	ldr	r1, [pc, #48]	; (8002ebc <__NVIC_SetPriority+0x4c>)
 8002e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8e:	0112      	lsls	r2, r2, #4
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	440b      	add	r3, r1
 8002e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e98:	e00a      	b.n	8002eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	4908      	ldr	r1, [pc, #32]	; (8002ec0 <__NVIC_SetPriority+0x50>)
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	3b04      	subs	r3, #4
 8002ea8:	0112      	lsls	r2, r2, #4
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	440b      	add	r3, r1
 8002eae:	761a      	strb	r2, [r3, #24]
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	e000e100 	.word	0xe000e100
 8002ec0:	e000ed00 	.word	0xe000ed00

08002ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b089      	sub	sp, #36	; 0x24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f1c3 0307 	rsb	r3, r3, #7
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	bf28      	it	cs
 8002ee2:	2304      	movcs	r3, #4
 8002ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	2b06      	cmp	r3, #6
 8002eec:	d902      	bls.n	8002ef4 <NVIC_EncodePriority+0x30>
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3b03      	subs	r3, #3
 8002ef2:	e000      	b.n	8002ef6 <NVIC_EncodePriority+0x32>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43da      	mvns	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	401a      	ands	r2, r3
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	fa01 f303 	lsl.w	r3, r1, r3
 8002f16:	43d9      	mvns	r1, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f1c:	4313      	orrs	r3, r2
         );
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3724      	adds	r7, #36	; 0x24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff ff4c 	bl	8002dd0 <__NVIC_SetPriorityGrouping>
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f52:	f7ff ff61 	bl	8002e18 <__NVIC_GetPriorityGrouping>
 8002f56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	68b9      	ldr	r1, [r7, #8]
 8002f5c:	6978      	ldr	r0, [r7, #20]
 8002f5e:	f7ff ffb1 	bl	8002ec4 <NVIC_EncodePriority>
 8002f62:	4602      	mov	r2, r0
 8002f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f68:	4611      	mov	r1, r2
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff ff80 	bl	8002e70 <__NVIC_SetPriority>
}
 8002f70:	bf00      	nop
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff ff54 	bl	8002e34 <__NVIC_EnableIRQ>
}
 8002f8c:	bf00      	nop
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fa0:	f7ff fee6 	bl	8002d70 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e099      	b.n	80030e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fd0:	e00f      	b.n	8002ff2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fd2:	f7ff fecd 	bl	8002d70 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b05      	cmp	r3, #5
 8002fde:	d908      	bls.n	8002ff2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2203      	movs	r2, #3
 8002fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e078      	b.n	80030e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1e8      	bne.n	8002fd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	4b38      	ldr	r3, [pc, #224]	; (80030ec <HAL_DMA_Init+0x158>)
 800300c:	4013      	ands	r3, r2
 800300e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800301e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800302a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003036:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	2b04      	cmp	r3, #4
 800304a:	d107      	bne.n	800305c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003054:	4313      	orrs	r3, r2
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f023 0307 	bic.w	r3, r3, #7
 8003072:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4313      	orrs	r3, r2
 800307c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	2b04      	cmp	r3, #4
 8003084:	d117      	bne.n	80030b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	4313      	orrs	r3, r2
 800308e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00e      	beq.n	80030b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fa91 	bl	80035c0 <DMA_CheckFifoParam>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2240      	movs	r2, #64	; 0x40
 80030a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030b2:	2301      	movs	r3, #1
 80030b4:	e016      	b.n	80030e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fa48 	bl	8003554 <DMA_CalcBaseAndBitshift>
 80030c4:	4603      	mov	r3, r0
 80030c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030cc:	223f      	movs	r2, #63	; 0x3f
 80030ce:	409a      	lsls	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	f010803f 	.word	0xf010803f

080030f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003106:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_DMA_Start_IT+0x26>
 8003112:	2302      	movs	r3, #2
 8003114:	e040      	b.n	8003198 <HAL_DMA_Start_IT+0xa8>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b01      	cmp	r3, #1
 8003128:	d12f      	bne.n	800318a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2202      	movs	r2, #2
 800312e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f9da 	bl	80034f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003148:	223f      	movs	r2, #63	; 0x3f
 800314a:	409a      	lsls	r2, r3
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0216 	orr.w	r2, r2, #22
 800315e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	2b00      	cmp	r3, #0
 8003166:	d007      	beq.n	8003178 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0208 	orr.w	r2, r2, #8
 8003176:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	e005      	b.n	8003196 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003192:	2302      	movs	r3, #2
 8003194:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003196:	7dfb      	ldrb	r3, [r7, #23]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d004      	beq.n	80031be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2280      	movs	r2, #128	; 0x80
 80031b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e00c      	b.n	80031d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2205      	movs	r2, #5
 80031c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0201 	bic.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031f0:	4b8e      	ldr	r3, [pc, #568]	; (800342c <HAL_DMA_IRQHandler+0x248>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a8e      	ldr	r2, [pc, #568]	; (8003430 <HAL_DMA_IRQHandler+0x24c>)
 80031f6:	fba2 2303 	umull	r2, r3, r2, r3
 80031fa:	0a9b      	lsrs	r3, r3, #10
 80031fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003202:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320e:	2208      	movs	r2, #8
 8003210:	409a      	lsls	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4013      	ands	r3, r2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d01a      	beq.n	8003250 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d013      	beq.n	8003250 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0204 	bic.w	r2, r2, #4
 8003236:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323c:	2208      	movs	r2, #8
 800323e:	409a      	lsls	r2, r3
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003248:	f043 0201 	orr.w	r2, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	2201      	movs	r2, #1
 8003256:	409a      	lsls	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d012      	beq.n	8003286 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00b      	beq.n	8003286 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003272:	2201      	movs	r2, #1
 8003274:	409a      	lsls	r2, r3
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327e:	f043 0202 	orr.w	r2, r3, #2
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328a:	2204      	movs	r2, #4
 800328c:	409a      	lsls	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4013      	ands	r3, r2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d012      	beq.n	80032bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00b      	beq.n	80032bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a8:	2204      	movs	r2, #4
 80032aa:	409a      	lsls	r2, r3
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b4:	f043 0204 	orr.w	r2, r3, #4
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c0:	2210      	movs	r2, #16
 80032c2:	409a      	lsls	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d043      	beq.n	8003354 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d03c      	beq.n	8003354 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032de:	2210      	movs	r2, #16
 80032e0:	409a      	lsls	r2, r3
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d018      	beq.n	8003326 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d108      	bne.n	8003314 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	2b00      	cmp	r3, #0
 8003308:	d024      	beq.n	8003354 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	4798      	blx	r3
 8003312:	e01f      	b.n	8003354 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003318:	2b00      	cmp	r3, #0
 800331a:	d01b      	beq.n	8003354 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	4798      	blx	r3
 8003324:	e016      	b.n	8003354 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003330:	2b00      	cmp	r3, #0
 8003332:	d107      	bne.n	8003344 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0208 	bic.w	r2, r2, #8
 8003342:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003358:	2220      	movs	r2, #32
 800335a:	409a      	lsls	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4013      	ands	r3, r2
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 808f 	beq.w	8003484 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 8087 	beq.w	8003484 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337a:	2220      	movs	r2, #32
 800337c:	409a      	lsls	r2, r3
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b05      	cmp	r3, #5
 800338c:	d136      	bne.n	80033fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0216 	bic.w	r2, r2, #22
 800339c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d103      	bne.n	80033be <HAL_DMA_IRQHandler+0x1da>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d007      	beq.n	80033ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0208 	bic.w	r2, r2, #8
 80033cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d2:	223f      	movs	r2, #63	; 0x3f
 80033d4:	409a      	lsls	r2, r3
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d07e      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	4798      	blx	r3
        }
        return;
 80033fa:	e079      	b.n	80034f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d01d      	beq.n	8003446 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10d      	bne.n	8003434 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341c:	2b00      	cmp	r3, #0
 800341e:	d031      	beq.n	8003484 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	4798      	blx	r3
 8003428:	e02c      	b.n	8003484 <HAL_DMA_IRQHandler+0x2a0>
 800342a:	bf00      	nop
 800342c:	2000000c 	.word	0x2000000c
 8003430:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003438:	2b00      	cmp	r3, #0
 800343a:	d023      	beq.n	8003484 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	4798      	blx	r3
 8003444:	e01e      	b.n	8003484 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10f      	bne.n	8003474 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0210 	bic.w	r2, r2, #16
 8003462:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003488:	2b00      	cmp	r3, #0
 800348a:	d032      	beq.n	80034f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d022      	beq.n	80034de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2205      	movs	r2, #5
 800349c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0201 	bic.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	3301      	adds	r3, #1
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d307      	bcc.n	80034cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f2      	bne.n	80034b0 <HAL_DMA_IRQHandler+0x2cc>
 80034ca:	e000      	b.n	80034ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	4798      	blx	r3
 80034ee:	e000      	b.n	80034f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80034f0:	bf00      	nop
    }
  }
}
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
 8003504:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003514:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b40      	cmp	r3, #64	; 0x40
 8003524:	d108      	bne.n	8003538 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003536:	e007      	b.n	8003548 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	60da      	str	r2, [r3, #12]
}
 8003548:	bf00      	nop
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	b2db      	uxtb	r3, r3
 8003562:	3b10      	subs	r3, #16
 8003564:	4a14      	ldr	r2, [pc, #80]	; (80035b8 <DMA_CalcBaseAndBitshift+0x64>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	091b      	lsrs	r3, r3, #4
 800356c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800356e:	4a13      	ldr	r2, [pc, #76]	; (80035bc <DMA_CalcBaseAndBitshift+0x68>)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4413      	add	r3, r2
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b03      	cmp	r3, #3
 8003580:	d909      	bls.n	8003596 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800358a:	f023 0303 	bic.w	r3, r3, #3
 800358e:	1d1a      	adds	r2, r3, #4
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	659a      	str	r2, [r3, #88]	; 0x58
 8003594:	e007      	b.n	80035a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800359e:	f023 0303 	bic.w	r3, r3, #3
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	aaaaaaab 	.word	0xaaaaaaab
 80035bc:	0800abe4 	.word	0x0800abe4

080035c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d11f      	bne.n	800361a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d856      	bhi.n	800368e <DMA_CheckFifoParam+0xce>
 80035e0:	a201      	add	r2, pc, #4	; (adr r2, 80035e8 <DMA_CheckFifoParam+0x28>)
 80035e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e6:	bf00      	nop
 80035e8:	080035f9 	.word	0x080035f9
 80035ec:	0800360b 	.word	0x0800360b
 80035f0:	080035f9 	.word	0x080035f9
 80035f4:	0800368f 	.word	0x0800368f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d046      	beq.n	8003692 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003608:	e043      	b.n	8003692 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003612:	d140      	bne.n	8003696 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003618:	e03d      	b.n	8003696 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003622:	d121      	bne.n	8003668 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b03      	cmp	r3, #3
 8003628:	d837      	bhi.n	800369a <DMA_CheckFifoParam+0xda>
 800362a:	a201      	add	r2, pc, #4	; (adr r2, 8003630 <DMA_CheckFifoParam+0x70>)
 800362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003630:	08003641 	.word	0x08003641
 8003634:	08003647 	.word	0x08003647
 8003638:	08003641 	.word	0x08003641
 800363c:	08003659 	.word	0x08003659
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	73fb      	strb	r3, [r7, #15]
      break;
 8003644:	e030      	b.n	80036a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d025      	beq.n	800369e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003656:	e022      	b.n	800369e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003660:	d11f      	bne.n	80036a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003666:	e01c      	b.n	80036a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d903      	bls.n	8003676 <DMA_CheckFifoParam+0xb6>
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b03      	cmp	r3, #3
 8003672:	d003      	beq.n	800367c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003674:	e018      	b.n	80036a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	73fb      	strb	r3, [r7, #15]
      break;
 800367a:	e015      	b.n	80036a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00e      	beq.n	80036a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	73fb      	strb	r3, [r7, #15]
      break;
 800368c:	e00b      	b.n	80036a6 <DMA_CheckFifoParam+0xe6>
      break;
 800368e:	bf00      	nop
 8003690:	e00a      	b.n	80036a8 <DMA_CheckFifoParam+0xe8>
      break;
 8003692:	bf00      	nop
 8003694:	e008      	b.n	80036a8 <DMA_CheckFifoParam+0xe8>
      break;
 8003696:	bf00      	nop
 8003698:	e006      	b.n	80036a8 <DMA_CheckFifoParam+0xe8>
      break;
 800369a:	bf00      	nop
 800369c:	e004      	b.n	80036a8 <DMA_CheckFifoParam+0xe8>
      break;
 800369e:	bf00      	nop
 80036a0:	e002      	b.n	80036a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80036a2:	bf00      	nop
 80036a4:	e000      	b.n	80036a8 <DMA_CheckFifoParam+0xe8>
      break;
 80036a6:	bf00      	nop
    }
  } 
  
  return status; 
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop

080036b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b089      	sub	sp, #36	; 0x24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	e159      	b.n	8003988 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036d4:	2201      	movs	r2, #1
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4013      	ands	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	f040 8148 	bne.w	8003982 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d005      	beq.n	800370a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003706:	2b02      	cmp	r3, #2
 8003708:	d130      	bne.n	800376c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	2203      	movs	r2, #3
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43db      	mvns	r3, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4013      	ands	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	4313      	orrs	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003740:	2201      	movs	r2, #1
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4013      	ands	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	f003 0201 	and.w	r2, r3, #1
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4313      	orrs	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	2b03      	cmp	r3, #3
 8003776:	d017      	beq.n	80037a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	2203      	movs	r2, #3
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43db      	mvns	r3, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d123      	bne.n	80037fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	08da      	lsrs	r2, r3, #3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3208      	adds	r2, #8
 80037bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	220f      	movs	r2, #15
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4013      	ands	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	08da      	lsrs	r2, r3, #3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3208      	adds	r2, #8
 80037f6:	69b9      	ldr	r1, [r7, #24]
 80037f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	2203      	movs	r2, #3
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	43db      	mvns	r3, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4013      	ands	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 0203 	and.w	r2, r3, #3
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4313      	orrs	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80a2 	beq.w	8003982 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	4b57      	ldr	r3, [pc, #348]	; (80039a0 <HAL_GPIO_Init+0x2e8>)
 8003844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003846:	4a56      	ldr	r2, [pc, #344]	; (80039a0 <HAL_GPIO_Init+0x2e8>)
 8003848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800384c:	6453      	str	r3, [r2, #68]	; 0x44
 800384e:	4b54      	ldr	r3, [pc, #336]	; (80039a0 <HAL_GPIO_Init+0x2e8>)
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800385a:	4a52      	ldr	r2, [pc, #328]	; (80039a4 <HAL_GPIO_Init+0x2ec>)
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	089b      	lsrs	r3, r3, #2
 8003860:	3302      	adds	r3, #2
 8003862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	220f      	movs	r2, #15
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4013      	ands	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a49      	ldr	r2, [pc, #292]	; (80039a8 <HAL_GPIO_Init+0x2f0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d019      	beq.n	80038ba <HAL_GPIO_Init+0x202>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a48      	ldr	r2, [pc, #288]	; (80039ac <HAL_GPIO_Init+0x2f4>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d013      	beq.n	80038b6 <HAL_GPIO_Init+0x1fe>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a47      	ldr	r2, [pc, #284]	; (80039b0 <HAL_GPIO_Init+0x2f8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d00d      	beq.n	80038b2 <HAL_GPIO_Init+0x1fa>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a46      	ldr	r2, [pc, #280]	; (80039b4 <HAL_GPIO_Init+0x2fc>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d007      	beq.n	80038ae <HAL_GPIO_Init+0x1f6>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a45      	ldr	r2, [pc, #276]	; (80039b8 <HAL_GPIO_Init+0x300>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d101      	bne.n	80038aa <HAL_GPIO_Init+0x1f2>
 80038a6:	2304      	movs	r3, #4
 80038a8:	e008      	b.n	80038bc <HAL_GPIO_Init+0x204>
 80038aa:	2307      	movs	r3, #7
 80038ac:	e006      	b.n	80038bc <HAL_GPIO_Init+0x204>
 80038ae:	2303      	movs	r3, #3
 80038b0:	e004      	b.n	80038bc <HAL_GPIO_Init+0x204>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e002      	b.n	80038bc <HAL_GPIO_Init+0x204>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <HAL_GPIO_Init+0x204>
 80038ba:	2300      	movs	r3, #0
 80038bc:	69fa      	ldr	r2, [r7, #28]
 80038be:	f002 0203 	and.w	r2, r2, #3
 80038c2:	0092      	lsls	r2, r2, #2
 80038c4:	4093      	lsls	r3, r2
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038cc:	4935      	ldr	r1, [pc, #212]	; (80039a4 <HAL_GPIO_Init+0x2ec>)
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	089b      	lsrs	r3, r3, #2
 80038d2:	3302      	adds	r3, #2
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038da:	4b38      	ldr	r3, [pc, #224]	; (80039bc <HAL_GPIO_Init+0x304>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	43db      	mvns	r3, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4013      	ands	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038fe:	4a2f      	ldr	r2, [pc, #188]	; (80039bc <HAL_GPIO_Init+0x304>)
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003904:	4b2d      	ldr	r3, [pc, #180]	; (80039bc <HAL_GPIO_Init+0x304>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003928:	4a24      	ldr	r2, [pc, #144]	; (80039bc <HAL_GPIO_Init+0x304>)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800392e:	4b23      	ldr	r3, [pc, #140]	; (80039bc <HAL_GPIO_Init+0x304>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	43db      	mvns	r3, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4013      	ands	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003952:	4a1a      	ldr	r2, [pc, #104]	; (80039bc <HAL_GPIO_Init+0x304>)
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003958:	4b18      	ldr	r3, [pc, #96]	; (80039bc <HAL_GPIO_Init+0x304>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	43db      	mvns	r3, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4013      	ands	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800397c:	4a0f      	ldr	r2, [pc, #60]	; (80039bc <HAL_GPIO_Init+0x304>)
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	3301      	adds	r3, #1
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	2b0f      	cmp	r3, #15
 800398c:	f67f aea2 	bls.w	80036d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003990:	bf00      	nop
 8003992:	bf00      	nop
 8003994:	3724      	adds	r7, #36	; 0x24
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40023800 	.word	0x40023800
 80039a4:	40013800 	.word	0x40013800
 80039a8:	40020000 	.word	0x40020000
 80039ac:	40020400 	.word	0x40020400
 80039b0:	40020800 	.word	0x40020800
 80039b4:	40020c00 	.word	0x40020c00
 80039b8:	40021000 	.word	0x40021000
 80039bc:	40013c00 	.word	0x40013c00

080039c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	807b      	strh	r3, [r7, #2]
 80039cc:	4613      	mov	r3, r2
 80039ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039d0:	787b      	ldrb	r3, [r7, #1]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039d6:	887a      	ldrh	r2, [r7, #2]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039dc:	e003      	b.n	80039e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039de:	887b      	ldrh	r3, [r7, #2]
 80039e0:	041a      	lsls	r2, r3, #16
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	619a      	str	r2, [r3, #24]
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039fe:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	88fb      	ldrh	r3, [r7, #6]
 8003a04:	4013      	ands	r3, r2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d006      	beq.n	8003a18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a0a:	4a05      	ldr	r2, [pc, #20]	; (8003a20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a0c:	88fb      	ldrh	r3, [r7, #6]
 8003a0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a10:	88fb      	ldrh	r3, [r7, #6]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fe fea8 	bl	8002768 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a18:	bf00      	nop
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40013c00 	.word	0x40013c00

08003a24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e12b      	b.n	8003c8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fe feec 	bl	8002828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2224      	movs	r2, #36	; 0x24
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0201 	bic.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a88:	f002 f95e 	bl	8005d48 <HAL_RCC_GetPCLK1Freq>
 8003a8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	4a81      	ldr	r2, [pc, #516]	; (8003c98 <HAL_I2C_Init+0x274>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d807      	bhi.n	8003aa8 <HAL_I2C_Init+0x84>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4a80      	ldr	r2, [pc, #512]	; (8003c9c <HAL_I2C_Init+0x278>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	bf94      	ite	ls
 8003aa0:	2301      	movls	r3, #1
 8003aa2:	2300      	movhi	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	e006      	b.n	8003ab6 <HAL_I2C_Init+0x92>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4a7d      	ldr	r2, [pc, #500]	; (8003ca0 <HAL_I2C_Init+0x27c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	bf94      	ite	ls
 8003ab0:	2301      	movls	r3, #1
 8003ab2:	2300      	movhi	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e0e7      	b.n	8003c8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4a78      	ldr	r2, [pc, #480]	; (8003ca4 <HAL_I2C_Init+0x280>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	0c9b      	lsrs	r3, r3, #18
 8003ac8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	4a6a      	ldr	r2, [pc, #424]	; (8003c98 <HAL_I2C_Init+0x274>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d802      	bhi.n	8003af8 <HAL_I2C_Init+0xd4>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	3301      	adds	r3, #1
 8003af6:	e009      	b.n	8003b0c <HAL_I2C_Init+0xe8>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003afe:	fb02 f303 	mul.w	r3, r2, r3
 8003b02:	4a69      	ldr	r2, [pc, #420]	; (8003ca8 <HAL_I2C_Init+0x284>)
 8003b04:	fba2 2303 	umull	r2, r3, r2, r3
 8003b08:	099b      	lsrs	r3, r3, #6
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	430b      	orrs	r3, r1
 8003b12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	495c      	ldr	r1, [pc, #368]	; (8003c98 <HAL_I2C_Init+0x274>)
 8003b28:	428b      	cmp	r3, r1
 8003b2a:	d819      	bhi.n	8003b60 <HAL_I2C_Init+0x13c>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	1e59      	subs	r1, r3, #1
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b3a:	1c59      	adds	r1, r3, #1
 8003b3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b40:	400b      	ands	r3, r1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <HAL_I2C_Init+0x138>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	1e59      	subs	r1, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b54:	3301      	adds	r3, #1
 8003b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b5a:	e051      	b.n	8003c00 <HAL_I2C_Init+0x1dc>
 8003b5c:	2304      	movs	r3, #4
 8003b5e:	e04f      	b.n	8003c00 <HAL_I2C_Init+0x1dc>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d111      	bne.n	8003b8c <HAL_I2C_Init+0x168>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1e58      	subs	r0, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6859      	ldr	r1, [r3, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	440b      	add	r3, r1
 8003b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	bf0c      	ite	eq
 8003b84:	2301      	moveq	r3, #1
 8003b86:	2300      	movne	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	e012      	b.n	8003bb2 <HAL_I2C_Init+0x18e>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	1e58      	subs	r0, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6859      	ldr	r1, [r3, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	0099      	lsls	r1, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	bf0c      	ite	eq
 8003bac:	2301      	moveq	r3, #1
 8003bae:	2300      	movne	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_I2C_Init+0x196>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e022      	b.n	8003c00 <HAL_I2C_Init+0x1dc>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10e      	bne.n	8003be0 <HAL_I2C_Init+0x1bc>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	1e58      	subs	r0, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6859      	ldr	r1, [r3, #4]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	440b      	add	r3, r1
 8003bd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bde:	e00f      	b.n	8003c00 <HAL_I2C_Init+0x1dc>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1e58      	subs	r0, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6859      	ldr	r1, [r3, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	0099      	lsls	r1, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	6809      	ldr	r1, [r1, #0]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69da      	ldr	r2, [r3, #28]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6911      	ldr	r1, [r2, #16]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	68d2      	ldr	r2, [r2, #12]
 8003c3a:	4311      	orrs	r1, r2
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6812      	ldr	r2, [r2, #0]
 8003c40:	430b      	orrs	r3, r1
 8003c42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695a      	ldr	r2, [r3, #20]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	000186a0 	.word	0x000186a0
 8003c9c:	001e847f 	.word	0x001e847f
 8003ca0:	003d08ff 	.word	0x003d08ff
 8003ca4:	431bde83 	.word	0x431bde83
 8003ca8:	10624dd3 	.word	0x10624dd3

08003cac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af02      	add	r7, sp, #8
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	607a      	str	r2, [r7, #4]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	460b      	mov	r3, r1
 8003cba:	817b      	strh	r3, [r7, #10]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cc0:	f7ff f856 	bl	8002d70 <HAL_GetTick>
 8003cc4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b20      	cmp	r3, #32
 8003cd0:	f040 80e0 	bne.w	8003e94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	2319      	movs	r3, #25
 8003cda:	2201      	movs	r2, #1
 8003cdc:	4970      	ldr	r1, [pc, #448]	; (8003ea0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f001 fa24 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003cea:	2302      	movs	r3, #2
 8003cec:	e0d3      	b.n	8003e96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_I2C_Master_Transmit+0x50>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e0cc      	b.n	8003e96 <HAL_I2C_Master_Transmit+0x1ea>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d007      	beq.n	8003d22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0201 	orr.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2221      	movs	r2, #33	; 0x21
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2210      	movs	r2, #16
 8003d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	893a      	ldrh	r2, [r7, #8]
 8003d52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4a50      	ldr	r2, [pc, #320]	; (8003ea4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003d62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d64:	8979      	ldrh	r1, [r7, #10]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	6a3a      	ldr	r2, [r7, #32]
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 ff10 	bl	8004b90 <I2C_MasterRequestWrite>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e08d      	b.n	8003e96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d90:	e066      	b.n	8003e60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	6a39      	ldr	r1, [r7, #32]
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f001 fa9e 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00d      	beq.n	8003dbe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d107      	bne.n	8003dba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e06b      	b.n	8003e96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	781a      	ldrb	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d11b      	bne.n	8003e34 <HAL_I2C_Master_Transmit+0x188>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d017      	beq.n	8003e34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	781a      	ldrb	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	6a39      	ldr	r1, [r7, #32]
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f001 fa8e 	bl	800535a <I2C_WaitOnBTFFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00d      	beq.n	8003e60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d107      	bne.n	8003e5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e01a      	b.n	8003e96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d194      	bne.n	8003d92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	e000      	b.n	8003e96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e94:	2302      	movs	r3, #2
  }
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	00100002 	.word	0x00100002
 8003ea4:	ffff0000 	.word	0xffff0000

08003ea8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08c      	sub	sp, #48	; 0x30
 8003eac:	af02      	add	r7, sp, #8
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	607a      	str	r2, [r7, #4]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	817b      	strh	r3, [r7, #10]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ebc:	f7fe ff58 	bl	8002d70 <HAL_GetTick>
 8003ec0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b20      	cmp	r3, #32
 8003ecc:	f040 820b 	bne.w	80042e6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	2319      	movs	r3, #25
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	497c      	ldr	r1, [pc, #496]	; (80040cc <HAL_I2C_Master_Receive+0x224>)
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f001 f926 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e1fe      	b.n	80042e8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d101      	bne.n	8003ef8 <HAL_I2C_Master_Receive+0x50>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e1f7      	b.n	80042e8 <HAL_I2C_Master_Receive+0x440>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d007      	beq.n	8003f1e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0201 	orr.w	r2, r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2222      	movs	r2, #34	; 0x22
 8003f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2210      	movs	r2, #16
 8003f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	893a      	ldrh	r2, [r7, #8]
 8003f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4a5c      	ldr	r2, [pc, #368]	; (80040d0 <HAL_I2C_Master_Receive+0x228>)
 8003f5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f60:	8979      	ldrh	r1, [r7, #10]
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 fe94 	bl	8004c94 <I2C_MasterRequestRead>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e1b8      	b.n	80042e8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d113      	bne.n	8003fa6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7e:	2300      	movs	r3, #0
 8003f80:	623b      	str	r3, [r7, #32]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	623b      	str	r3, [r7, #32]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	623b      	str	r3, [r7, #32]
 8003f92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	e18c      	b.n	80042c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d11b      	bne.n	8003fe6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61fb      	str	r3, [r7, #28]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	e16c      	b.n	80042c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d11b      	bne.n	8004026 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ffc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800400c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800400e:	2300      	movs	r3, #0
 8004010:	61bb      	str	r3, [r7, #24]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	61bb      	str	r3, [r7, #24]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	e14c      	b.n	80042c0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004034:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800404c:	e138      	b.n	80042c0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004052:	2b03      	cmp	r3, #3
 8004054:	f200 80f1 	bhi.w	800423a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405c:	2b01      	cmp	r3, #1
 800405e:	d123      	bne.n	80040a8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004062:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f001 f9b9 	bl	80053dc <I2C_WaitOnRXNEFlagUntilTimeout>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e139      	b.n	80042e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040a6:	e10b      	b.n	80042c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d14e      	bne.n	800414e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b6:	2200      	movs	r2, #0
 80040b8:	4906      	ldr	r1, [pc, #24]	; (80040d4 <HAL_I2C_Master_Receive+0x22c>)
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f001 f836 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d008      	beq.n	80040d8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e10e      	b.n	80042e8 <HAL_I2C_Master_Receive+0x440>
 80040ca:	bf00      	nop
 80040cc:	00100002 	.word	0x00100002
 80040d0:	ffff0000 	.word	0xffff0000
 80040d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800414c:	e0b8      	b.n	80042c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004154:	2200      	movs	r2, #0
 8004156:	4966      	ldr	r1, [pc, #408]	; (80042f0 <HAL_I2C_Master_Receive+0x448>)
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 ffe7 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e0bf      	b.n	80042e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004176:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	691a      	ldr	r2, [r3, #16]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	2200      	movs	r2, #0
 80041b2:	494f      	ldr	r1, [pc, #316]	; (80042f0 <HAL_I2C_Master_Receive+0x448>)
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 ffb9 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e091      	b.n	80042e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691a      	ldr	r2, [r3, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29a      	uxth	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004238:	e042      	b.n	80042c0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800423a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800423c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f001 f8cc 	bl	80053dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e04c      	b.n	80042e8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691a      	ldr	r2, [r3, #16]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004276:	b29b      	uxth	r3, r3
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b04      	cmp	r3, #4
 800428c:	d118      	bne.n	80042c0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f47f aec2 	bne.w	800404e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	e000      	b.n	80042e8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80042e6:	2302      	movs	r3, #2
  }
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3728      	adds	r7, #40	; 0x28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	00010004 	.word	0x00010004

080042f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af02      	add	r7, sp, #8
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	4608      	mov	r0, r1
 80042fe:	4611      	mov	r1, r2
 8004300:	461a      	mov	r2, r3
 8004302:	4603      	mov	r3, r0
 8004304:	817b      	strh	r3, [r7, #10]
 8004306:	460b      	mov	r3, r1
 8004308:	813b      	strh	r3, [r7, #8]
 800430a:	4613      	mov	r3, r2
 800430c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800430e:	f7fe fd2f 	bl	8002d70 <HAL_GetTick>
 8004312:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b20      	cmp	r3, #32
 800431e:	f040 80d9 	bne.w	80044d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	2319      	movs	r3, #25
 8004328:	2201      	movs	r2, #1
 800432a:	496d      	ldr	r1, [pc, #436]	; (80044e0 <HAL_I2C_Mem_Write+0x1ec>)
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 fefd 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004338:	2302      	movs	r3, #2
 800433a:	e0cc      	b.n	80044d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004342:	2b01      	cmp	r3, #1
 8004344:	d101      	bne.n	800434a <HAL_I2C_Mem_Write+0x56>
 8004346:	2302      	movs	r3, #2
 8004348:	e0c5      	b.n	80044d6 <HAL_I2C_Mem_Write+0x1e2>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b01      	cmp	r3, #1
 800435e:	d007      	beq.n	8004370 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800437e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2221      	movs	r2, #33	; 0x21
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2240      	movs	r2, #64	; 0x40
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a3a      	ldr	r2, [r7, #32]
 800439a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80043a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4a4d      	ldr	r2, [pc, #308]	; (80044e4 <HAL_I2C_Mem_Write+0x1f0>)
 80043b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043b2:	88f8      	ldrh	r0, [r7, #6]
 80043b4:	893a      	ldrh	r2, [r7, #8]
 80043b6:	8979      	ldrh	r1, [r7, #10]
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	9301      	str	r3, [sp, #4]
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	4603      	mov	r3, r0
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 fd34 	bl	8004e30 <I2C_RequestMemoryWrite>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d052      	beq.n	8004474 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e081      	b.n	80044d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 ff7e 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00d      	beq.n	80043fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d107      	bne.n	80043fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e06b      	b.n	80044d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	781a      	ldrb	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004424:	b29b      	uxth	r3, r3
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b04      	cmp	r3, #4
 800443a:	d11b      	bne.n	8004474 <HAL_I2C_Mem_Write+0x180>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004440:	2b00      	cmp	r3, #0
 8004442:	d017      	beq.n	8004474 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	781a      	ldrb	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446a:	b29b      	uxth	r3, r3
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1aa      	bne.n	80043d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 ff6a 	bl	800535a <I2C_WaitOnBTFFlagUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00d      	beq.n	80044a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	2b04      	cmp	r3, #4
 8004492:	d107      	bne.n	80044a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e016      	b.n	80044d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	e000      	b.n	80044d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80044d4:	2302      	movs	r3, #2
  }
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	00100002 	.word	0x00100002
 80044e4:	ffff0000 	.word	0xffff0000

080044e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08c      	sub	sp, #48	; 0x30
 80044ec:	af02      	add	r7, sp, #8
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	4608      	mov	r0, r1
 80044f2:	4611      	mov	r1, r2
 80044f4:	461a      	mov	r2, r3
 80044f6:	4603      	mov	r3, r0
 80044f8:	817b      	strh	r3, [r7, #10]
 80044fa:	460b      	mov	r3, r1
 80044fc:	813b      	strh	r3, [r7, #8]
 80044fe:	4613      	mov	r3, r2
 8004500:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004502:	f7fe fc35 	bl	8002d70 <HAL_GetTick>
 8004506:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b20      	cmp	r3, #32
 8004512:	f040 8208 	bne.w	8004926 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	2319      	movs	r3, #25
 800451c:	2201      	movs	r2, #1
 800451e:	497b      	ldr	r1, [pc, #492]	; (800470c <HAL_I2C_Mem_Read+0x224>)
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 fe03 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800452c:	2302      	movs	r3, #2
 800452e:	e1fb      	b.n	8004928 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_I2C_Mem_Read+0x56>
 800453a:	2302      	movs	r3, #2
 800453c:	e1f4      	b.n	8004928 <HAL_I2C_Mem_Read+0x440>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b01      	cmp	r3, #1
 8004552:	d007      	beq.n	8004564 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004572:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2222      	movs	r2, #34	; 0x22
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2240      	movs	r2, #64	; 0x40
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800458e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004594:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4a5b      	ldr	r2, [pc, #364]	; (8004710 <HAL_I2C_Mem_Read+0x228>)
 80045a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045a6:	88f8      	ldrh	r0, [r7, #6]
 80045a8:	893a      	ldrh	r2, [r7, #8]
 80045aa:	8979      	ldrh	r1, [r7, #10]
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	9301      	str	r3, [sp, #4]
 80045b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	4603      	mov	r3, r0
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 fcd0 	bl	8004f5c <I2C_RequestMemoryRead>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e1b0      	b.n	8004928 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d113      	bne.n	80045f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ce:	2300      	movs	r3, #0
 80045d0:	623b      	str	r3, [r7, #32]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	623b      	str	r3, [r7, #32]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	623b      	str	r3, [r7, #32]
 80045e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	e184      	b.n	8004900 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d11b      	bne.n	8004636 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800460c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800460e:	2300      	movs	r3, #0
 8004610:	61fb      	str	r3, [r7, #28]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	61fb      	str	r3, [r7, #28]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	61fb      	str	r3, [r7, #28]
 8004622:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	e164      	b.n	8004900 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463a:	2b02      	cmp	r3, #2
 800463c:	d11b      	bne.n	8004676 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800465c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800465e:	2300      	movs	r3, #0
 8004660:	61bb      	str	r3, [r7, #24]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	61bb      	str	r3, [r7, #24]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	61bb      	str	r3, [r7, #24]
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	e144      	b.n	8004900 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	617b      	str	r3, [r7, #20]
 800468a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800468c:	e138      	b.n	8004900 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004692:	2b03      	cmp	r3, #3
 8004694:	f200 80f1 	bhi.w	800487a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469c:	2b01      	cmp	r3, #1
 800469e:	d123      	bne.n	80046e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 fe99 	bl	80053dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e139      	b.n	8004928 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691a      	ldr	r2, [r3, #16]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046e6:	e10b      	b.n	8004900 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d14e      	bne.n	800478e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f6:	2200      	movs	r2, #0
 80046f8:	4906      	ldr	r1, [pc, #24]	; (8004714 <HAL_I2C_Mem_Read+0x22c>)
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 fd16 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d008      	beq.n	8004718 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e10e      	b.n	8004928 <HAL_I2C_Mem_Read+0x440>
 800470a:	bf00      	nop
 800470c:	00100002 	.word	0x00100002
 8004710:	ffff0000 	.word	0xffff0000
 8004714:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004726:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691a      	ldr	r2, [r3, #16]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004750:	b29b      	uxth	r3, r3
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800478c:	e0b8      	b.n	8004900 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	2200      	movs	r2, #0
 8004796:	4966      	ldr	r1, [pc, #408]	; (8004930 <HAL_I2C_Mem_Read+0x448>)
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 fcc7 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0bf      	b.n	8004928 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f0:	2200      	movs	r2, #0
 80047f2:	494f      	ldr	r1, [pc, #316]	; (8004930 <HAL_I2C_Mem_Read+0x448>)
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 fc99 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e091      	b.n	8004928 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004812:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	1c5a      	adds	r2, r3, #1
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004862:	3b01      	subs	r3, #1
 8004864:	b29a      	uxth	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486e:	b29b      	uxth	r3, r3
 8004870:	3b01      	subs	r3, #1
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004878:	e042      	b.n	8004900 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800487a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800487c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 fdac 	bl	80053dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e04c      	b.n	8004928 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	f003 0304 	and.w	r3, r3, #4
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d118      	bne.n	8004900 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004904:	2b00      	cmp	r3, #0
 8004906:	f47f aec2 	bne.w	800468e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	e000      	b.n	8004928 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004926:	2302      	movs	r3, #2
  }
}
 8004928:	4618      	mov	r0, r3
 800492a:	3728      	adds	r7, #40	; 0x28
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	00010004 	.word	0x00010004

08004934 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b08a      	sub	sp, #40	; 0x28
 8004938:	af02      	add	r7, sp, #8
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	607a      	str	r2, [r7, #4]
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	460b      	mov	r3, r1
 8004942:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004944:	f7fe fa14 	bl	8002d70 <HAL_GetTick>
 8004948:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800494a:	2300      	movs	r3, #0
 800494c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b20      	cmp	r3, #32
 8004958:	f040 8111 	bne.w	8004b7e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	2319      	movs	r3, #25
 8004962:	2201      	movs	r2, #1
 8004964:	4988      	ldr	r1, [pc, #544]	; (8004b88 <HAL_I2C_IsDeviceReady+0x254>)
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 fbe0 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004972:	2302      	movs	r3, #2
 8004974:	e104      	b.n	8004b80 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800497c:	2b01      	cmp	r3, #1
 800497e:	d101      	bne.n	8004984 <HAL_I2C_IsDeviceReady+0x50>
 8004980:	2302      	movs	r3, #2
 8004982:	e0fd      	b.n	8004b80 <HAL_I2C_IsDeviceReady+0x24c>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b01      	cmp	r3, #1
 8004998:	d007      	beq.n	80049aa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0201 	orr.w	r2, r2, #1
 80049a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2224      	movs	r2, #36	; 0x24
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4a70      	ldr	r2, [pc, #448]	; (8004b8c <HAL_I2C_IsDeviceReady+0x258>)
 80049cc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049dc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 fb9e 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00d      	beq.n	8004a12 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a04:	d103      	bne.n	8004a0e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a0c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e0b6      	b.n	8004b80 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a12:	897b      	ldrh	r3, [r7, #10]
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	461a      	mov	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a20:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004a22:	f7fe f9a5 	bl	8002d70 <HAL_GetTick>
 8004a26:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	bf0c      	ite	eq
 8004a36:	2301      	moveq	r3, #1
 8004a38:	2300      	movne	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a4c:	bf0c      	ite	eq
 8004a4e:	2301      	moveq	r3, #1
 8004a50:	2300      	movne	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004a56:	e025      	b.n	8004aa4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a58:	f7fe f98a 	bl	8002d70 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d302      	bcc.n	8004a6e <HAL_I2C_IsDeviceReady+0x13a>
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d103      	bne.n	8004a76 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	22a0      	movs	r2, #160	; 0xa0
 8004a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	bf0c      	ite	eq
 8004a84:	2301      	moveq	r3, #1
 8004a86:	2300      	movne	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a9a:	bf0c      	ite	eq
 8004a9c:	2301      	moveq	r3, #1
 8004a9e:	2300      	movne	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2ba0      	cmp	r3, #160	; 0xa0
 8004aae:	d005      	beq.n	8004abc <HAL_I2C_IsDeviceReady+0x188>
 8004ab0:	7dfb      	ldrb	r3, [r7, #23]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d102      	bne.n	8004abc <HAL_I2C_IsDeviceReady+0x188>
 8004ab6:	7dbb      	ldrb	r3, [r7, #22]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0cd      	beq.n	8004a58 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d129      	bne.n	8004b26 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ae0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	613b      	str	r3, [r7, #16]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	613b      	str	r3, [r7, #16]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	2319      	movs	r3, #25
 8004afe:	2201      	movs	r2, #1
 8004b00:	4921      	ldr	r1, [pc, #132]	; (8004b88 <HAL_I2C_IsDeviceReady+0x254>)
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 fb12 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e036      	b.n	8004b80 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	e02c      	b.n	8004b80 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b34:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b3e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	2319      	movs	r3, #25
 8004b46:	2201      	movs	r2, #1
 8004b48:	490f      	ldr	r1, [pc, #60]	; (8004b88 <HAL_I2C_IsDeviceReady+0x254>)
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 faee 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e012      	b.n	8004b80 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	f4ff af32 	bcc.w	80049ce <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004b7e:	2302      	movs	r3, #2
  }
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3720      	adds	r7, #32
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	00100002 	.word	0x00100002
 8004b8c:	ffff0000 	.word	0xffff0000

08004b90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b088      	sub	sp, #32
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	607a      	str	r2, [r7, #4]
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d006      	beq.n	8004bba <I2C_MasterRequestWrite+0x2a>
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d003      	beq.n	8004bba <I2C_MasterRequestWrite+0x2a>
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bb8:	d108      	bne.n	8004bcc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	e00b      	b.n	8004be4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd0:	2b12      	cmp	r3, #18
 8004bd2:	d107      	bne.n	8004be4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004be2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 fa9b 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00d      	beq.n	8004c18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c0a:	d103      	bne.n	8004c14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e035      	b.n	8004c84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c20:	d108      	bne.n	8004c34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c22:	897b      	ldrh	r3, [r7, #10]
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	461a      	mov	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c30:	611a      	str	r2, [r3, #16]
 8004c32:	e01b      	b.n	8004c6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c34:	897b      	ldrh	r3, [r7, #10]
 8004c36:	11db      	asrs	r3, r3, #7
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	f003 0306 	and.w	r3, r3, #6
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	f063 030f 	orn	r3, r3, #15
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	490e      	ldr	r1, [pc, #56]	; (8004c8c <I2C_MasterRequestWrite+0xfc>)
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 fac1 	bl	80051da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e010      	b.n	8004c84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c62:	897b      	ldrh	r3, [r7, #10]
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	4907      	ldr	r1, [pc, #28]	; (8004c90 <I2C_MasterRequestWrite+0x100>)
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 fab1 	bl	80051da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	00010008 	.word	0x00010008
 8004c90:	00010002 	.word	0x00010002

08004c94 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b088      	sub	sp, #32
 8004c98:	af02      	add	r7, sp, #8
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	607a      	str	r2, [r7, #4]
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cb8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d006      	beq.n	8004cce <I2C_MasterRequestRead+0x3a>
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d003      	beq.n	8004cce <I2C_MasterRequestRead+0x3a>
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ccc:	d108      	bne.n	8004ce0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	e00b      	b.n	8004cf8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce4:	2b11      	cmp	r3, #17
 8004ce6:	d107      	bne.n	8004cf8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cf6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 fa11 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00d      	beq.n	8004d2c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d1e:	d103      	bne.n	8004d28 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e079      	b.n	8004e20 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d34:	d108      	bne.n	8004d48 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d36:	897b      	ldrh	r3, [r7, #10]
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	f043 0301 	orr.w	r3, r3, #1
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	611a      	str	r2, [r3, #16]
 8004d46:	e05f      	b.n	8004e08 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d48:	897b      	ldrh	r3, [r7, #10]
 8004d4a:	11db      	asrs	r3, r3, #7
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	f003 0306 	and.w	r3, r3, #6
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	f063 030f 	orn	r3, r3, #15
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	4930      	ldr	r1, [pc, #192]	; (8004e28 <I2C_MasterRequestRead+0x194>)
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 fa37 	bl	80051da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e054      	b.n	8004e20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d76:	897b      	ldrh	r3, [r7, #10]
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	4929      	ldr	r1, [pc, #164]	; (8004e2c <I2C_MasterRequestRead+0x198>)
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 fa27 	bl	80051da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e044      	b.n	8004e20 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d96:	2300      	movs	r3, #0
 8004d98:	613b      	str	r3, [r7, #16]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	613b      	str	r3, [r7, #16]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	613b      	str	r3, [r7, #16]
 8004daa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f000 f9af 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00d      	beq.n	8004df0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004de2:	d103      	bne.n	8004dec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e017      	b.n	8004e20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004df0:	897b      	ldrh	r3, [r7, #10]
 8004df2:	11db      	asrs	r3, r3, #7
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	f003 0306 	and.w	r3, r3, #6
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	f063 030e 	orn	r3, r3, #14
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	4907      	ldr	r1, [pc, #28]	; (8004e2c <I2C_MasterRequestRead+0x198>)
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 f9e3 	bl	80051da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	00010008 	.word	0x00010008
 8004e2c:	00010002 	.word	0x00010002

08004e30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af02      	add	r7, sp, #8
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	4608      	mov	r0, r1
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	4603      	mov	r3, r0
 8004e40:	817b      	strh	r3, [r7, #10]
 8004e42:	460b      	mov	r3, r1
 8004e44:	813b      	strh	r3, [r7, #8]
 8004e46:	4613      	mov	r3, r2
 8004e48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 f960 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00d      	beq.n	8004e8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e80:	d103      	bne.n	8004e8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e05f      	b.n	8004f4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e8e:	897b      	ldrh	r3, [r7, #10]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	461a      	mov	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	6a3a      	ldr	r2, [r7, #32]
 8004ea2:	492d      	ldr	r1, [pc, #180]	; (8004f58 <I2C_RequestMemoryWrite+0x128>)
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 f998 	bl	80051da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e04c      	b.n	8004f4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ecc:	6a39      	ldr	r1, [r7, #32]
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 fa02 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00d      	beq.n	8004ef6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d107      	bne.n	8004ef2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e02b      	b.n	8004f4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ef6:	88fb      	ldrh	r3, [r7, #6]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d105      	bne.n	8004f08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004efc:	893b      	ldrh	r3, [r7, #8]
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	611a      	str	r2, [r3, #16]
 8004f06:	e021      	b.n	8004f4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f08:	893b      	ldrh	r3, [r7, #8]
 8004f0a:	0a1b      	lsrs	r3, r3, #8
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f18:	6a39      	ldr	r1, [r7, #32]
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f9dc 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00d      	beq.n	8004f42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d107      	bne.n	8004f3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e005      	b.n	8004f4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f42:	893b      	ldrh	r3, [r7, #8]
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	00010002 	.word	0x00010002

08004f5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b088      	sub	sp, #32
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	4608      	mov	r0, r1
 8004f66:	4611      	mov	r1, r2
 8004f68:	461a      	mov	r2, r3
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	817b      	strh	r3, [r7, #10]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	813b      	strh	r3, [r7, #8]
 8004f72:	4613      	mov	r3, r2
 8004f74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 f8c2 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00d      	beq.n	8004fca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fbc:	d103      	bne.n	8004fc6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e0aa      	b.n	8005120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fca:	897b      	ldrh	r3, [r7, #10]
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	461a      	mov	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	6a3a      	ldr	r2, [r7, #32]
 8004fde:	4952      	ldr	r1, [pc, #328]	; (8005128 <I2C_RequestMemoryRead+0x1cc>)
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f8fa 	bl	80051da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e097      	b.n	8005120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005008:	6a39      	ldr	r1, [r7, #32]
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 f964 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00d      	beq.n	8005032 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	2b04      	cmp	r3, #4
 800501c:	d107      	bne.n	800502e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800502c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e076      	b.n	8005120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005032:	88fb      	ldrh	r3, [r7, #6]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d105      	bne.n	8005044 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005038:	893b      	ldrh	r3, [r7, #8]
 800503a:	b2da      	uxtb	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	611a      	str	r2, [r3, #16]
 8005042:	e021      	b.n	8005088 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005044:	893b      	ldrh	r3, [r7, #8]
 8005046:	0a1b      	lsrs	r3, r3, #8
 8005048:	b29b      	uxth	r3, r3
 800504a:	b2da      	uxtb	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005054:	6a39      	ldr	r1, [r7, #32]
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 f93e 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00d      	beq.n	800507e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	2b04      	cmp	r3, #4
 8005068:	d107      	bne.n	800507a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005078:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e050      	b.n	8005120 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800507e:	893b      	ldrh	r3, [r7, #8]
 8005080:	b2da      	uxtb	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508a:	6a39      	ldr	r1, [r7, #32]
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 f923 	bl	80052d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00d      	beq.n	80050b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	2b04      	cmp	r3, #4
 800509e:	d107      	bne.n	80050b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e035      	b.n	8005120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f82b 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00d      	beq.n	80050f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ea:	d103      	bne.n	80050f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e013      	b.n	8005120 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050f8:	897b      	ldrh	r3, [r7, #10]
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	f043 0301 	orr.w	r3, r3, #1
 8005100:	b2da      	uxtb	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	6a3a      	ldr	r2, [r7, #32]
 800510c:	4906      	ldr	r1, [pc, #24]	; (8005128 <I2C_RequestMemoryRead+0x1cc>)
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 f863 	bl	80051da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e000      	b.n	8005120 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	00010002 	.word	0x00010002

0800512c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	4613      	mov	r3, r2
 800513a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800513c:	e025      	b.n	800518a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005144:	d021      	beq.n	800518a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005146:	f7fd fe13 	bl	8002d70 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d302      	bcc.n	800515c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d116      	bne.n	800518a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2220      	movs	r2, #32
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f043 0220 	orr.w	r2, r3, #32
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e023      	b.n	80051d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	0c1b      	lsrs	r3, r3, #16
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b01      	cmp	r3, #1
 8005192:	d10d      	bne.n	80051b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	43da      	mvns	r2, r3
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	4013      	ands	r3, r2
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	bf0c      	ite	eq
 80051a6:	2301      	moveq	r3, #1
 80051a8:	2300      	movne	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	e00c      	b.n	80051ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	43da      	mvns	r2, r3
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4013      	ands	r3, r2
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	bf0c      	ite	eq
 80051c2:	2301      	moveq	r3, #1
 80051c4:	2300      	movne	r3, #0
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	461a      	mov	r2, r3
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d0b6      	beq.n	800513e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	607a      	str	r2, [r7, #4]
 80051e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051e8:	e051      	b.n	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f8:	d123      	bne.n	8005242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005208:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005212:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2220      	movs	r2, #32
 800521e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	f043 0204 	orr.w	r2, r3, #4
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e046      	b.n	80052d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005248:	d021      	beq.n	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524a:	f7fd fd91 	bl	8002d70 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	429a      	cmp	r2, r3
 8005258:	d302      	bcc.n	8005260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d116      	bne.n	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2220      	movs	r2, #32
 800526a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	f043 0220 	orr.w	r2, r3, #32
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e020      	b.n	80052d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	0c1b      	lsrs	r3, r3, #16
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b01      	cmp	r3, #1
 8005296:	d10c      	bne.n	80052b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	43da      	mvns	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4013      	ands	r3, r2
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	bf14      	ite	ne
 80052aa:	2301      	movne	r3, #1
 80052ac:	2300      	moveq	r3, #0
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	e00b      	b.n	80052ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	43da      	mvns	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	4013      	ands	r3, r2
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bf14      	ite	ne
 80052c4:	2301      	movne	r3, #1
 80052c6:	2300      	moveq	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d18d      	bne.n	80051ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052e4:	e02d      	b.n	8005342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 f8ce 	bl	8005488 <I2C_IsAcknowledgeFailed>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e02d      	b.n	8005352 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fc:	d021      	beq.n	8005342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052fe:	f7fd fd37 	bl	8002d70 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	429a      	cmp	r2, r3
 800530c:	d302      	bcc.n	8005314 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d116      	bne.n	8005342 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2220      	movs	r2, #32
 800531e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	f043 0220 	orr.w	r2, r3, #32
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e007      	b.n	8005352 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534c:	2b80      	cmp	r3, #128	; 0x80
 800534e:	d1ca      	bne.n	80052e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b084      	sub	sp, #16
 800535e:	af00      	add	r7, sp, #0
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005366:	e02d      	b.n	80053c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 f88d 	bl	8005488 <I2C_IsAcknowledgeFailed>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e02d      	b.n	80053d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537e:	d021      	beq.n	80053c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005380:	f7fd fcf6 	bl	8002d70 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	429a      	cmp	r2, r3
 800538e:	d302      	bcc.n	8005396 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d116      	bne.n	80053c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b0:	f043 0220 	orr.w	r2, r3, #32
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e007      	b.n	80053d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	f003 0304 	and.w	r3, r3, #4
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d1ca      	bne.n	8005368 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053e8:	e042      	b.n	8005470 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	2b10      	cmp	r3, #16
 80053f6:	d119      	bne.n	800542c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0210 	mvn.w	r2, #16
 8005400:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2220      	movs	r2, #32
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e029      	b.n	8005480 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800542c:	f7fd fca0 	bl	8002d70 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	429a      	cmp	r2, r3
 800543a:	d302      	bcc.n	8005442 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d116      	bne.n	8005470 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	f043 0220 	orr.w	r2, r3, #32
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e007      	b.n	8005480 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547a:	2b40      	cmp	r3, #64	; 0x40
 800547c:	d1b5      	bne.n	80053ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800549a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800549e:	d11b      	bne.n	80054d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	f043 0204 	orr.w	r2, r3, #4
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e000      	b.n	80054da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
	...

080054e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e267      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d075      	beq.n	80055f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005506:	4b88      	ldr	r3, [pc, #544]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 030c 	and.w	r3, r3, #12
 800550e:	2b04      	cmp	r3, #4
 8005510:	d00c      	beq.n	800552c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005512:	4b85      	ldr	r3, [pc, #532]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800551a:	2b08      	cmp	r3, #8
 800551c:	d112      	bne.n	8005544 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800551e:	4b82      	ldr	r3, [pc, #520]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800552a:	d10b      	bne.n	8005544 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800552c:	4b7e      	ldr	r3, [pc, #504]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d05b      	beq.n	80055f0 <HAL_RCC_OscConfig+0x108>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d157      	bne.n	80055f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e242      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800554c:	d106      	bne.n	800555c <HAL_RCC_OscConfig+0x74>
 800554e:	4b76      	ldr	r3, [pc, #472]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a75      	ldr	r2, [pc, #468]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005558:	6013      	str	r3, [r2, #0]
 800555a:	e01d      	b.n	8005598 <HAL_RCC_OscConfig+0xb0>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005564:	d10c      	bne.n	8005580 <HAL_RCC_OscConfig+0x98>
 8005566:	4b70      	ldr	r3, [pc, #448]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a6f      	ldr	r2, [pc, #444]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 800556c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	4b6d      	ldr	r3, [pc, #436]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a6c      	ldr	r2, [pc, #432]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	e00b      	b.n	8005598 <HAL_RCC_OscConfig+0xb0>
 8005580:	4b69      	ldr	r3, [pc, #420]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a68      	ldr	r2, [pc, #416]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800558a:	6013      	str	r3, [r2, #0]
 800558c:	4b66      	ldr	r3, [pc, #408]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a65      	ldr	r2, [pc, #404]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d013      	beq.n	80055c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a0:	f7fd fbe6 	bl	8002d70 <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055a8:	f7fd fbe2 	bl	8002d70 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b64      	cmp	r3, #100	; 0x64
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e207      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ba:	4b5b      	ldr	r3, [pc, #364]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0f0      	beq.n	80055a8 <HAL_RCC_OscConfig+0xc0>
 80055c6:	e014      	b.n	80055f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c8:	f7fd fbd2 	bl	8002d70 <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055d0:	f7fd fbce 	bl	8002d70 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b64      	cmp	r3, #100	; 0x64
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e1f3      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055e2:	4b51      	ldr	r3, [pc, #324]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1f0      	bne.n	80055d0 <HAL_RCC_OscConfig+0xe8>
 80055ee:	e000      	b.n	80055f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d063      	beq.n	80056c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055fe:	4b4a      	ldr	r3, [pc, #296]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f003 030c 	and.w	r3, r3, #12
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00b      	beq.n	8005622 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800560a:	4b47      	ldr	r3, [pc, #284]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005612:	2b08      	cmp	r3, #8
 8005614:	d11c      	bne.n	8005650 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005616:	4b44      	ldr	r3, [pc, #272]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d116      	bne.n	8005650 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005622:	4b41      	ldr	r3, [pc, #260]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d005      	beq.n	800563a <HAL_RCC_OscConfig+0x152>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d001      	beq.n	800563a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e1c7      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800563a:	4b3b      	ldr	r3, [pc, #236]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	4937      	ldr	r1, [pc, #220]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 800564a:	4313      	orrs	r3, r2
 800564c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800564e:	e03a      	b.n	80056c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d020      	beq.n	800569a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005658:	4b34      	ldr	r3, [pc, #208]	; (800572c <HAL_RCC_OscConfig+0x244>)
 800565a:	2201      	movs	r2, #1
 800565c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565e:	f7fd fb87 	bl	8002d70 <HAL_GetTick>
 8005662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005664:	e008      	b.n	8005678 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005666:	f7fd fb83 	bl	8002d70 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e1a8      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005678:	4b2b      	ldr	r3, [pc, #172]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0f0      	beq.n	8005666 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005684:	4b28      	ldr	r3, [pc, #160]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	4925      	ldr	r1, [pc, #148]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 8005694:	4313      	orrs	r3, r2
 8005696:	600b      	str	r3, [r1, #0]
 8005698:	e015      	b.n	80056c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800569a:	4b24      	ldr	r3, [pc, #144]	; (800572c <HAL_RCC_OscConfig+0x244>)
 800569c:	2200      	movs	r2, #0
 800569e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a0:	f7fd fb66 	bl	8002d70 <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056a8:	f7fd fb62 	bl	8002d70 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e187      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ba:	4b1b      	ldr	r3, [pc, #108]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1f0      	bne.n	80056a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d036      	beq.n	8005740 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d016      	beq.n	8005708 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056da:	4b15      	ldr	r3, [pc, #84]	; (8005730 <HAL_RCC_OscConfig+0x248>)
 80056dc:	2201      	movs	r2, #1
 80056de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e0:	f7fd fb46 	bl	8002d70 <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056e8:	f7fd fb42 	bl	8002d70 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e167      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056fa:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <HAL_RCC_OscConfig+0x240>)
 80056fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d0f0      	beq.n	80056e8 <HAL_RCC_OscConfig+0x200>
 8005706:	e01b      	b.n	8005740 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005708:	4b09      	ldr	r3, [pc, #36]	; (8005730 <HAL_RCC_OscConfig+0x248>)
 800570a:	2200      	movs	r2, #0
 800570c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800570e:	f7fd fb2f 	bl	8002d70 <HAL_GetTick>
 8005712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005714:	e00e      	b.n	8005734 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005716:	f7fd fb2b 	bl	8002d70 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d907      	bls.n	8005734 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e150      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
 8005728:	40023800 	.word	0x40023800
 800572c:	42470000 	.word	0x42470000
 8005730:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005734:	4b88      	ldr	r3, [pc, #544]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1ea      	bne.n	8005716 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 8097 	beq.w	800587c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800574e:	2300      	movs	r3, #0
 8005750:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005752:	4b81      	ldr	r3, [pc, #516]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10f      	bne.n	800577e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800575e:	2300      	movs	r3, #0
 8005760:	60bb      	str	r3, [r7, #8]
 8005762:	4b7d      	ldr	r3, [pc, #500]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	4a7c      	ldr	r2, [pc, #496]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800576c:	6413      	str	r3, [r2, #64]	; 0x40
 800576e:	4b7a      	ldr	r3, [pc, #488]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005776:	60bb      	str	r3, [r7, #8]
 8005778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800577a:	2301      	movs	r3, #1
 800577c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800577e:	4b77      	ldr	r3, [pc, #476]	; (800595c <HAL_RCC_OscConfig+0x474>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005786:	2b00      	cmp	r3, #0
 8005788:	d118      	bne.n	80057bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800578a:	4b74      	ldr	r3, [pc, #464]	; (800595c <HAL_RCC_OscConfig+0x474>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a73      	ldr	r2, [pc, #460]	; (800595c <HAL_RCC_OscConfig+0x474>)
 8005790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005796:	f7fd faeb 	bl	8002d70 <HAL_GetTick>
 800579a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800579c:	e008      	b.n	80057b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800579e:	f7fd fae7 	bl	8002d70 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d901      	bls.n	80057b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e10c      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057b0:	4b6a      	ldr	r3, [pc, #424]	; (800595c <HAL_RCC_OscConfig+0x474>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0f0      	beq.n	800579e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d106      	bne.n	80057d2 <HAL_RCC_OscConfig+0x2ea>
 80057c4:	4b64      	ldr	r3, [pc, #400]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80057c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c8:	4a63      	ldr	r2, [pc, #396]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80057ca:	f043 0301 	orr.w	r3, r3, #1
 80057ce:	6713      	str	r3, [r2, #112]	; 0x70
 80057d0:	e01c      	b.n	800580c <HAL_RCC_OscConfig+0x324>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	2b05      	cmp	r3, #5
 80057d8:	d10c      	bne.n	80057f4 <HAL_RCC_OscConfig+0x30c>
 80057da:	4b5f      	ldr	r3, [pc, #380]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80057dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057de:	4a5e      	ldr	r2, [pc, #376]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80057e0:	f043 0304 	orr.w	r3, r3, #4
 80057e4:	6713      	str	r3, [r2, #112]	; 0x70
 80057e6:	4b5c      	ldr	r3, [pc, #368]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80057e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ea:	4a5b      	ldr	r2, [pc, #364]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80057ec:	f043 0301 	orr.w	r3, r3, #1
 80057f0:	6713      	str	r3, [r2, #112]	; 0x70
 80057f2:	e00b      	b.n	800580c <HAL_RCC_OscConfig+0x324>
 80057f4:	4b58      	ldr	r3, [pc, #352]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80057f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f8:	4a57      	ldr	r2, [pc, #348]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80057fa:	f023 0301 	bic.w	r3, r3, #1
 80057fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005800:	4b55      	ldr	r3, [pc, #340]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005804:	4a54      	ldr	r2, [pc, #336]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005806:	f023 0304 	bic.w	r3, r3, #4
 800580a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d015      	beq.n	8005840 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005814:	f7fd faac 	bl	8002d70 <HAL_GetTick>
 8005818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800581a:	e00a      	b.n	8005832 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800581c:	f7fd faa8 	bl	8002d70 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	f241 3288 	movw	r2, #5000	; 0x1388
 800582a:	4293      	cmp	r3, r2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e0cb      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005832:	4b49      	ldr	r3, [pc, #292]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0ee      	beq.n	800581c <HAL_RCC_OscConfig+0x334>
 800583e:	e014      	b.n	800586a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005840:	f7fd fa96 	bl	8002d70 <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005846:	e00a      	b.n	800585e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005848:	f7fd fa92 	bl	8002d70 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	f241 3288 	movw	r2, #5000	; 0x1388
 8005856:	4293      	cmp	r3, r2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e0b5      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800585e:	4b3e      	ldr	r3, [pc, #248]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1ee      	bne.n	8005848 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800586a:	7dfb      	ldrb	r3, [r7, #23]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d105      	bne.n	800587c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005870:	4b39      	ldr	r3, [pc, #228]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	4a38      	ldr	r2, [pc, #224]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800587a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 80a1 	beq.w	80059c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005886:	4b34      	ldr	r3, [pc, #208]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f003 030c 	and.w	r3, r3, #12
 800588e:	2b08      	cmp	r3, #8
 8005890:	d05c      	beq.n	800594c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	2b02      	cmp	r3, #2
 8005898:	d141      	bne.n	800591e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800589a:	4b31      	ldr	r3, [pc, #196]	; (8005960 <HAL_RCC_OscConfig+0x478>)
 800589c:	2200      	movs	r2, #0
 800589e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a0:	f7fd fa66 	bl	8002d70 <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058a8:	f7fd fa62 	bl	8002d70 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e087      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ba:	4b27      	ldr	r3, [pc, #156]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1f0      	bne.n	80058a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	69da      	ldr	r2, [r3, #28]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	431a      	orrs	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	019b      	lsls	r3, r3, #6
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058dc:	085b      	lsrs	r3, r3, #1
 80058de:	3b01      	subs	r3, #1
 80058e0:	041b      	lsls	r3, r3, #16
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e8:	061b      	lsls	r3, r3, #24
 80058ea:	491b      	ldr	r1, [pc, #108]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058f0:	4b1b      	ldr	r3, [pc, #108]	; (8005960 <HAL_RCC_OscConfig+0x478>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f6:	f7fd fa3b 	bl	8002d70 <HAL_GetTick>
 80058fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058fc:	e008      	b.n	8005910 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058fe:	f7fd fa37 	bl	8002d70 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e05c      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005910:	4b11      	ldr	r3, [pc, #68]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0f0      	beq.n	80058fe <HAL_RCC_OscConfig+0x416>
 800591c:	e054      	b.n	80059c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800591e:	4b10      	ldr	r3, [pc, #64]	; (8005960 <HAL_RCC_OscConfig+0x478>)
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005924:	f7fd fa24 	bl	8002d70 <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800592c:	f7fd fa20 	bl	8002d70 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e045      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800593e:	4b06      	ldr	r3, [pc, #24]	; (8005958 <HAL_RCC_OscConfig+0x470>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1f0      	bne.n	800592c <HAL_RCC_OscConfig+0x444>
 800594a:	e03d      	b.n	80059c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d107      	bne.n	8005964 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e038      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
 8005958:	40023800 	.word	0x40023800
 800595c:	40007000 	.word	0x40007000
 8005960:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005964:	4b1b      	ldr	r3, [pc, #108]	; (80059d4 <HAL_RCC_OscConfig+0x4ec>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d028      	beq.n	80059c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800597c:	429a      	cmp	r2, r3
 800597e:	d121      	bne.n	80059c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800598a:	429a      	cmp	r2, r3
 800598c:	d11a      	bne.n	80059c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005994:	4013      	ands	r3, r2
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800599a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800599c:	4293      	cmp	r3, r2
 800599e:	d111      	bne.n	80059c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059aa:	085b      	lsrs	r3, r3, #1
 80059ac:	3b01      	subs	r3, #1
 80059ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d107      	bne.n	80059c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d001      	beq.n	80059c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e000      	b.n	80059ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	40023800 	.word	0x40023800

080059d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e0cc      	b.n	8005b86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059ec:	4b68      	ldr	r3, [pc, #416]	; (8005b90 <HAL_RCC_ClockConfig+0x1b8>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d90c      	bls.n	8005a14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059fa:	4b65      	ldr	r3, [pc, #404]	; (8005b90 <HAL_RCC_ClockConfig+0x1b8>)
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a02:	4b63      	ldr	r3, [pc, #396]	; (8005b90 <HAL_RCC_ClockConfig+0x1b8>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d001      	beq.n	8005a14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e0b8      	b.n	8005b86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d020      	beq.n	8005a62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a2c:	4b59      	ldr	r3, [pc, #356]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	4a58      	ldr	r2, [pc, #352]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d005      	beq.n	8005a50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a44:	4b53      	ldr	r3, [pc, #332]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	4a52      	ldr	r2, [pc, #328]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a50:	4b50      	ldr	r3, [pc, #320]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	494d      	ldr	r1, [pc, #308]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d044      	beq.n	8005af8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d107      	bne.n	8005a86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a76:	4b47      	ldr	r3, [pc, #284]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d119      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e07f      	b.n	8005b86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d003      	beq.n	8005a96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d107      	bne.n	8005aa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a96:	4b3f      	ldr	r3, [pc, #252]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d109      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e06f      	b.n	8005b86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa6:	4b3b      	ldr	r3, [pc, #236]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e067      	b.n	8005b86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ab6:	4b37      	ldr	r3, [pc, #220]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f023 0203 	bic.w	r2, r3, #3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	4934      	ldr	r1, [pc, #208]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ac8:	f7fd f952 	bl	8002d70 <HAL_GetTick>
 8005acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ace:	e00a      	b.n	8005ae6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ad0:	f7fd f94e 	bl	8002d70 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e04f      	b.n	8005b86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ae6:	4b2b      	ldr	r3, [pc, #172]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 020c 	and.w	r2, r3, #12
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d1eb      	bne.n	8005ad0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005af8:	4b25      	ldr	r3, [pc, #148]	; (8005b90 <HAL_RCC_ClockConfig+0x1b8>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d20c      	bcs.n	8005b20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b06:	4b22      	ldr	r3, [pc, #136]	; (8005b90 <HAL_RCC_ClockConfig+0x1b8>)
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	b2d2      	uxtb	r2, r2
 8005b0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0e:	4b20      	ldr	r3, [pc, #128]	; (8005b90 <HAL_RCC_ClockConfig+0x1b8>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d001      	beq.n	8005b20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e032      	b.n	8005b86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d008      	beq.n	8005b3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b2c:	4b19      	ldr	r3, [pc, #100]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	4916      	ldr	r1, [pc, #88]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0308 	and.w	r3, r3, #8
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d009      	beq.n	8005b5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b4a:	4b12      	ldr	r3, [pc, #72]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	490e      	ldr	r1, [pc, #56]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b5e:	f000 f821 	bl	8005ba4 <HAL_RCC_GetSysClockFreq>
 8005b62:	4602      	mov	r2, r0
 8005b64:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <HAL_RCC_ClockConfig+0x1bc>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	091b      	lsrs	r3, r3, #4
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	490a      	ldr	r1, [pc, #40]	; (8005b98 <HAL_RCC_ClockConfig+0x1c0>)
 8005b70:	5ccb      	ldrb	r3, [r1, r3]
 8005b72:	fa22 f303 	lsr.w	r3, r2, r3
 8005b76:	4a09      	ldr	r2, [pc, #36]	; (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b7a:	4b09      	ldr	r3, [pc, #36]	; (8005ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fc ff7a 	bl	8002a78 <HAL_InitTick>

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	40023c00 	.word	0x40023c00
 8005b94:	40023800 	.word	0x40023800
 8005b98:	0800ab84 	.word	0x0800ab84
 8005b9c:	2000000c 	.word	0x2000000c
 8005ba0:	20000010 	.word	0x20000010

08005ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ba8:	b090      	sub	sp, #64	; 0x40
 8005baa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	637b      	str	r3, [r7, #52]	; 0x34
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bbc:	4b59      	ldr	r3, [pc, #356]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 030c 	and.w	r3, r3, #12
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d00d      	beq.n	8005be4 <HAL_RCC_GetSysClockFreq+0x40>
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	f200 80a1 	bhi.w	8005d10 <HAL_RCC_GetSysClockFreq+0x16c>
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <HAL_RCC_GetSysClockFreq+0x34>
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	d003      	beq.n	8005bde <HAL_RCC_GetSysClockFreq+0x3a>
 8005bd6:	e09b      	b.n	8005d10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bd8:	4b53      	ldr	r3, [pc, #332]	; (8005d28 <HAL_RCC_GetSysClockFreq+0x184>)
 8005bda:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005bdc:	e09b      	b.n	8005d16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bde:	4b53      	ldr	r3, [pc, #332]	; (8005d2c <HAL_RCC_GetSysClockFreq+0x188>)
 8005be0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005be2:	e098      	b.n	8005d16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005be4:	4b4f      	ldr	r3, [pc, #316]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x180>)
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bee:	4b4d      	ldr	r3, [pc, #308]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d028      	beq.n	8005c4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bfa:	4b4a      	ldr	r3, [pc, #296]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	099b      	lsrs	r3, r3, #6
 8005c00:	2200      	movs	r2, #0
 8005c02:	623b      	str	r3, [r7, #32]
 8005c04:	627a      	str	r2, [r7, #36]	; 0x24
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	4b47      	ldr	r3, [pc, #284]	; (8005d2c <HAL_RCC_GetSysClockFreq+0x188>)
 8005c10:	fb03 f201 	mul.w	r2, r3, r1
 8005c14:	2300      	movs	r3, #0
 8005c16:	fb00 f303 	mul.w	r3, r0, r3
 8005c1a:	4413      	add	r3, r2
 8005c1c:	4a43      	ldr	r2, [pc, #268]	; (8005d2c <HAL_RCC_GetSysClockFreq+0x188>)
 8005c1e:	fba0 1202 	umull	r1, r2, r0, r2
 8005c22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c24:	460a      	mov	r2, r1
 8005c26:	62ba      	str	r2, [r7, #40]	; 0x28
 8005c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c2a:	4413      	add	r3, r2
 8005c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c30:	2200      	movs	r2, #0
 8005c32:	61bb      	str	r3, [r7, #24]
 8005c34:	61fa      	str	r2, [r7, #28]
 8005c36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005c3e:	f7fa febd 	bl	80009bc <__aeabi_uldivmod>
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	4613      	mov	r3, r2
 8005c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c4a:	e053      	b.n	8005cf4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c4c:	4b35      	ldr	r3, [pc, #212]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	099b      	lsrs	r3, r3, #6
 8005c52:	2200      	movs	r2, #0
 8005c54:	613b      	str	r3, [r7, #16]
 8005c56:	617a      	str	r2, [r7, #20]
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005c5e:	f04f 0b00 	mov.w	fp, #0
 8005c62:	4652      	mov	r2, sl
 8005c64:	465b      	mov	r3, fp
 8005c66:	f04f 0000 	mov.w	r0, #0
 8005c6a:	f04f 0100 	mov.w	r1, #0
 8005c6e:	0159      	lsls	r1, r3, #5
 8005c70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c74:	0150      	lsls	r0, r2, #5
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	ebb2 080a 	subs.w	r8, r2, sl
 8005c7e:	eb63 090b 	sbc.w	r9, r3, fp
 8005c82:	f04f 0200 	mov.w	r2, #0
 8005c86:	f04f 0300 	mov.w	r3, #0
 8005c8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005c8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005c92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005c96:	ebb2 0408 	subs.w	r4, r2, r8
 8005c9a:	eb63 0509 	sbc.w	r5, r3, r9
 8005c9e:	f04f 0200 	mov.w	r2, #0
 8005ca2:	f04f 0300 	mov.w	r3, #0
 8005ca6:	00eb      	lsls	r3, r5, #3
 8005ca8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cac:	00e2      	lsls	r2, r4, #3
 8005cae:	4614      	mov	r4, r2
 8005cb0:	461d      	mov	r5, r3
 8005cb2:	eb14 030a 	adds.w	r3, r4, sl
 8005cb6:	603b      	str	r3, [r7, #0]
 8005cb8:	eb45 030b 	adc.w	r3, r5, fp
 8005cbc:	607b      	str	r3, [r7, #4]
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	f04f 0300 	mov.w	r3, #0
 8005cc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cca:	4629      	mov	r1, r5
 8005ccc:	028b      	lsls	r3, r1, #10
 8005cce:	4621      	mov	r1, r4
 8005cd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	028a      	lsls	r2, r1, #10
 8005cd8:	4610      	mov	r0, r2
 8005cda:	4619      	mov	r1, r3
 8005cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cde:	2200      	movs	r2, #0
 8005ce0:	60bb      	str	r3, [r7, #8]
 8005ce2:	60fa      	str	r2, [r7, #12]
 8005ce4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ce8:	f7fa fe68 	bl	80009bc <__aeabi_uldivmod>
 8005cec:	4602      	mov	r2, r0
 8005cee:	460b      	mov	r3, r1
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005cf4:	4b0b      	ldr	r3, [pc, #44]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	0c1b      	lsrs	r3, r3, #16
 8005cfa:	f003 0303 	and.w	r3, r3, #3
 8005cfe:	3301      	adds	r3, #1
 8005d00:	005b      	lsls	r3, r3, #1
 8005d02:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005d04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d0e:	e002      	b.n	8005d16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d10:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <HAL_RCC_GetSysClockFreq+0x184>)
 8005d12:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3740      	adds	r7, #64	; 0x40
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d22:	bf00      	nop
 8005d24:	40023800 	.word	0x40023800
 8005d28:	00f42400 	.word	0x00f42400
 8005d2c:	017d7840 	.word	0x017d7840

08005d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d30:	b480      	push	{r7}
 8005d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d34:	4b03      	ldr	r3, [pc, #12]	; (8005d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d36:	681b      	ldr	r3, [r3, #0]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	2000000c 	.word	0x2000000c

08005d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d4c:	f7ff fff0 	bl	8005d30 <HAL_RCC_GetHCLKFreq>
 8005d50:	4602      	mov	r2, r0
 8005d52:	4b05      	ldr	r3, [pc, #20]	; (8005d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	0a9b      	lsrs	r3, r3, #10
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	4903      	ldr	r1, [pc, #12]	; (8005d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d5e:	5ccb      	ldrb	r3, [r1, r3]
 8005d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	40023800 	.word	0x40023800
 8005d6c:	0800ab94 	.word	0x0800ab94

08005d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d74:	f7ff ffdc 	bl	8005d30 <HAL_RCC_GetHCLKFreq>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	0b5b      	lsrs	r3, r3, #13
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	4903      	ldr	r1, [pc, #12]	; (8005d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d86:	5ccb      	ldrb	r3, [r1, r3]
 8005d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40023800 	.word	0x40023800
 8005d94:	0800ab94 	.word	0x0800ab94

08005d98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	220f      	movs	r2, #15
 8005da6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005da8:	4b12      	ldr	r3, [pc, #72]	; (8005df4 <HAL_RCC_GetClockConfig+0x5c>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 0203 	and.w	r2, r3, #3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005db4:	4b0f      	ldr	r3, [pc, #60]	; (8005df4 <HAL_RCC_GetClockConfig+0x5c>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005dc0:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <HAL_RCC_GetClockConfig+0x5c>)
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005dcc:	4b09      	ldr	r3, [pc, #36]	; (8005df4 <HAL_RCC_GetClockConfig+0x5c>)
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	08db      	lsrs	r3, r3, #3
 8005dd2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005dda:	4b07      	ldr	r3, [pc, #28]	; (8005df8 <HAL_RCC_GetClockConfig+0x60>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0207 	and.w	r2, r3, #7
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	601a      	str	r2, [r3, #0]
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40023800 	.word	0x40023800
 8005df8:	40023c00 	.word	0x40023c00

08005dfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e07b      	b.n	8005f06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d108      	bne.n	8005e28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e1e:	d009      	beq.n	8005e34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	61da      	str	r2, [r3, #28]
 8005e26:	e005      	b.n	8005e34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d106      	bne.n	8005e54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7fc fd32 	bl	80028b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e86:	431a      	orrs	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	431a      	orrs	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb8:	ea42 0103 	orr.w	r1, r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	0c1b      	lsrs	r3, r3, #16
 8005ed2:	f003 0104 	and.w	r1, r3, #4
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	f003 0210 	and.w	r2, r3, #16
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69da      	ldr	r2, [r3, #28]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ef4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b082      	sub	sp, #8
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e041      	b.n	8005fa4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d106      	bne.n	8005f3a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7fc fd07 	bl	8002948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	3304      	adds	r3, #4
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	f000 fbf5 	bl	800673c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d001      	beq.n	8005fc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e044      	b.n	800604e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68da      	ldr	r2, [r3, #12]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f042 0201 	orr.w	r2, r2, #1
 8005fda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a1e      	ldr	r2, [pc, #120]	; (800605c <HAL_TIM_Base_Start_IT+0xb0>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d018      	beq.n	8006018 <HAL_TIM_Base_Start_IT+0x6c>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fee:	d013      	beq.n	8006018 <HAL_TIM_Base_Start_IT+0x6c>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a1a      	ldr	r2, [pc, #104]	; (8006060 <HAL_TIM_Base_Start_IT+0xb4>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00e      	beq.n	8006018 <HAL_TIM_Base_Start_IT+0x6c>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a19      	ldr	r2, [pc, #100]	; (8006064 <HAL_TIM_Base_Start_IT+0xb8>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d009      	beq.n	8006018 <HAL_TIM_Base_Start_IT+0x6c>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a17      	ldr	r2, [pc, #92]	; (8006068 <HAL_TIM_Base_Start_IT+0xbc>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d004      	beq.n	8006018 <HAL_TIM_Base_Start_IT+0x6c>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a16      	ldr	r2, [pc, #88]	; (800606c <HAL_TIM_Base_Start_IT+0xc0>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d111      	bne.n	800603c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f003 0307 	and.w	r3, r3, #7
 8006022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2b06      	cmp	r3, #6
 8006028:	d010      	beq.n	800604c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f042 0201 	orr.w	r2, r2, #1
 8006038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603a:	e007      	b.n	800604c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 0201 	orr.w	r2, r2, #1
 800604a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	40010000 	.word	0x40010000
 8006060:	40000400 	.word	0x40000400
 8006064:	40000800 	.word	0x40000800
 8006068:	40000c00 	.word	0x40000c00
 800606c:	40014000 	.word	0x40014000

08006070 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e041      	b.n	8006106 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f839 	bl	800610e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3304      	adds	r3, #4
 80060ac:	4619      	mov	r1, r3
 80060ae:	4610      	mov	r0, r2
 80060b0:	f000 fb44 	bl	800673c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800610e:	b480      	push	{r7}
 8006110:	b083      	sub	sp, #12
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006116:	bf00      	nop
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b082      	sub	sp, #8
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b02      	cmp	r3, #2
 8006136:	d122      	bne.n	800617e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b02      	cmp	r3, #2
 8006144:	d11b      	bne.n	800617e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f06f 0202 	mvn.w	r2, #2
 800614e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	f003 0303 	and.w	r3, r3, #3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fa78 	bl	800665a <HAL_TIM_IC_CaptureCallback>
 800616a:	e005      	b.n	8006178 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 fa6a 	bl	8006646 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fa7b 	bl	800666e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b04      	cmp	r3, #4
 800618a:	d122      	bne.n	80061d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f003 0304 	and.w	r3, r3, #4
 8006196:	2b04      	cmp	r3, #4
 8006198:	d11b      	bne.n	80061d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f06f 0204 	mvn.w	r2, #4
 80061a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2202      	movs	r2, #2
 80061a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d003      	beq.n	80061c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 fa4e 	bl	800665a <HAL_TIM_IC_CaptureCallback>
 80061be:	e005      	b.n	80061cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fa40 	bl	8006646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fa51 	bl	800666e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	f003 0308 	and.w	r3, r3, #8
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d122      	bne.n	8006226 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f003 0308 	and.w	r3, r3, #8
 80061ea:	2b08      	cmp	r3, #8
 80061ec:	d11b      	bne.n	8006226 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f06f 0208 	mvn.w	r2, #8
 80061f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2204      	movs	r2, #4
 80061fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69db      	ldr	r3, [r3, #28]
 8006204:	f003 0303 	and.w	r3, r3, #3
 8006208:	2b00      	cmp	r3, #0
 800620a:	d003      	beq.n	8006214 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fa24 	bl	800665a <HAL_TIM_IC_CaptureCallback>
 8006212:	e005      	b.n	8006220 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fa16 	bl	8006646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fa27 	bl	800666e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	f003 0310 	and.w	r3, r3, #16
 8006230:	2b10      	cmp	r3, #16
 8006232:	d122      	bne.n	800627a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	f003 0310 	and.w	r3, r3, #16
 800623e:	2b10      	cmp	r3, #16
 8006240:	d11b      	bne.n	800627a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f06f 0210 	mvn.w	r2, #16
 800624a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2208      	movs	r2, #8
 8006250:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800625c:	2b00      	cmp	r3, #0
 800625e:	d003      	beq.n	8006268 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f9fa 	bl	800665a <HAL_TIM_IC_CaptureCallback>
 8006266:	e005      	b.n	8006274 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f9ec 	bl	8006646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f9fd 	bl	800666e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b01      	cmp	r3, #1
 8006286:	d10e      	bne.n	80062a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b01      	cmp	r3, #1
 8006294:	d107      	bne.n	80062a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f06f 0201 	mvn.w	r2, #1
 800629e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7fc fa7d 	bl	80027a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b0:	2b80      	cmp	r3, #128	; 0x80
 80062b2:	d10e      	bne.n	80062d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062be:	2b80      	cmp	r3, #128	; 0x80
 80062c0:	d107      	bne.n	80062d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fd79 	bl	8006dc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062dc:	2b40      	cmp	r3, #64	; 0x40
 80062de:	d10e      	bne.n	80062fe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ea:	2b40      	cmp	r3, #64	; 0x40
 80062ec:	d107      	bne.n	80062fe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f9c2 	bl	8006682 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	f003 0320 	and.w	r3, r3, #32
 8006308:	2b20      	cmp	r3, #32
 800630a:	d10e      	bne.n	800632a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	f003 0320 	and.w	r3, r3, #32
 8006316:	2b20      	cmp	r3, #32
 8006318:	d107      	bne.n	800632a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f06f 0220 	mvn.w	r2, #32
 8006322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fd43 	bl	8006db0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800632a:	bf00      	nop
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
	...

08006334 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006340:	2300      	movs	r3, #0
 8006342:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800634a:	2b01      	cmp	r3, #1
 800634c:	d101      	bne.n	8006352 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800634e:	2302      	movs	r3, #2
 8006350:	e0ae      	b.n	80064b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b0c      	cmp	r3, #12
 800635e:	f200 809f 	bhi.w	80064a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006362:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006368:	0800639d 	.word	0x0800639d
 800636c:	080064a1 	.word	0x080064a1
 8006370:	080064a1 	.word	0x080064a1
 8006374:	080064a1 	.word	0x080064a1
 8006378:	080063dd 	.word	0x080063dd
 800637c:	080064a1 	.word	0x080064a1
 8006380:	080064a1 	.word	0x080064a1
 8006384:	080064a1 	.word	0x080064a1
 8006388:	0800641f 	.word	0x0800641f
 800638c:	080064a1 	.word	0x080064a1
 8006390:	080064a1 	.word	0x080064a1
 8006394:	080064a1 	.word	0x080064a1
 8006398:	0800645f 	.word	0x0800645f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68b9      	ldr	r1, [r7, #8]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fa4a 	bl	800683c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699a      	ldr	r2, [r3, #24]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0208 	orr.w	r2, r2, #8
 80063b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	699a      	ldr	r2, [r3, #24]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 0204 	bic.w	r2, r2, #4
 80063c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6999      	ldr	r1, [r3, #24]
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	691a      	ldr	r2, [r3, #16]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	619a      	str	r2, [r3, #24]
      break;
 80063da:	e064      	b.n	80064a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68b9      	ldr	r1, [r7, #8]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fa90 	bl	8006908 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699a      	ldr	r2, [r3, #24]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699a      	ldr	r2, [r3, #24]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6999      	ldr	r1, [r3, #24]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	021a      	lsls	r2, r3, #8
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	430a      	orrs	r2, r1
 800641a:	619a      	str	r2, [r3, #24]
      break;
 800641c:	e043      	b.n	80064a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68b9      	ldr	r1, [r7, #8]
 8006424:	4618      	mov	r0, r3
 8006426:	f000 fadb 	bl	80069e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69da      	ldr	r2, [r3, #28]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f042 0208 	orr.w	r2, r2, #8
 8006438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69da      	ldr	r2, [r3, #28]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 0204 	bic.w	r2, r2, #4
 8006448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69d9      	ldr	r1, [r3, #28]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	61da      	str	r2, [r3, #28]
      break;
 800645c:	e023      	b.n	80064a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68b9      	ldr	r1, [r7, #8]
 8006464:	4618      	mov	r0, r3
 8006466:	f000 fb25 	bl	8006ab4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69da      	ldr	r2, [r3, #28]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69da      	ldr	r2, [r3, #28]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69d9      	ldr	r1, [r3, #28]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	021a      	lsls	r2, r3, #8
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	61da      	str	r2, [r3, #28]
      break;
 800649e:	e002      	b.n	80064a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	75fb      	strb	r3, [r7, #23]
      break;
 80064a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d101      	bne.n	80064d4 <HAL_TIM_ConfigClockSource+0x1c>
 80064d0:	2302      	movs	r3, #2
 80064d2:	e0b4      	b.n	800663e <HAL_TIM_ConfigClockSource+0x186>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800650c:	d03e      	beq.n	800658c <HAL_TIM_ConfigClockSource+0xd4>
 800650e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006512:	f200 8087 	bhi.w	8006624 <HAL_TIM_ConfigClockSource+0x16c>
 8006516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800651a:	f000 8086 	beq.w	800662a <HAL_TIM_ConfigClockSource+0x172>
 800651e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006522:	d87f      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x16c>
 8006524:	2b70      	cmp	r3, #112	; 0x70
 8006526:	d01a      	beq.n	800655e <HAL_TIM_ConfigClockSource+0xa6>
 8006528:	2b70      	cmp	r3, #112	; 0x70
 800652a:	d87b      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x16c>
 800652c:	2b60      	cmp	r3, #96	; 0x60
 800652e:	d050      	beq.n	80065d2 <HAL_TIM_ConfigClockSource+0x11a>
 8006530:	2b60      	cmp	r3, #96	; 0x60
 8006532:	d877      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x16c>
 8006534:	2b50      	cmp	r3, #80	; 0x50
 8006536:	d03c      	beq.n	80065b2 <HAL_TIM_ConfigClockSource+0xfa>
 8006538:	2b50      	cmp	r3, #80	; 0x50
 800653a:	d873      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x16c>
 800653c:	2b40      	cmp	r3, #64	; 0x40
 800653e:	d058      	beq.n	80065f2 <HAL_TIM_ConfigClockSource+0x13a>
 8006540:	2b40      	cmp	r3, #64	; 0x40
 8006542:	d86f      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x16c>
 8006544:	2b30      	cmp	r3, #48	; 0x30
 8006546:	d064      	beq.n	8006612 <HAL_TIM_ConfigClockSource+0x15a>
 8006548:	2b30      	cmp	r3, #48	; 0x30
 800654a:	d86b      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x16c>
 800654c:	2b20      	cmp	r3, #32
 800654e:	d060      	beq.n	8006612 <HAL_TIM_ConfigClockSource+0x15a>
 8006550:	2b20      	cmp	r3, #32
 8006552:	d867      	bhi.n	8006624 <HAL_TIM_ConfigClockSource+0x16c>
 8006554:	2b00      	cmp	r3, #0
 8006556:	d05c      	beq.n	8006612 <HAL_TIM_ConfigClockSource+0x15a>
 8006558:	2b10      	cmp	r3, #16
 800655a:	d05a      	beq.n	8006612 <HAL_TIM_ConfigClockSource+0x15a>
 800655c:	e062      	b.n	8006624 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6818      	ldr	r0, [r3, #0]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	6899      	ldr	r1, [r3, #8]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f000 fb6b 	bl	8006c48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006580:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	609a      	str	r2, [r3, #8]
      break;
 800658a:	e04f      	b.n	800662c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6818      	ldr	r0, [r3, #0]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	6899      	ldr	r1, [r3, #8]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	f000 fb54 	bl	8006c48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689a      	ldr	r2, [r3, #8]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065ae:	609a      	str	r2, [r3, #8]
      break;
 80065b0:	e03c      	b.n	800662c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6818      	ldr	r0, [r3, #0]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	6859      	ldr	r1, [r3, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	461a      	mov	r2, r3
 80065c0:	f000 fac8 	bl	8006b54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2150      	movs	r1, #80	; 0x50
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 fb21 	bl	8006c12 <TIM_ITRx_SetConfig>
      break;
 80065d0:	e02c      	b.n	800662c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6818      	ldr	r0, [r3, #0]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	6859      	ldr	r1, [r3, #4]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	461a      	mov	r2, r3
 80065e0:	f000 fae7 	bl	8006bb2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2160      	movs	r1, #96	; 0x60
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 fb11 	bl	8006c12 <TIM_ITRx_SetConfig>
      break;
 80065f0:	e01c      	b.n	800662c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6818      	ldr	r0, [r3, #0]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	6859      	ldr	r1, [r3, #4]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	461a      	mov	r2, r3
 8006600:	f000 faa8 	bl	8006b54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2140      	movs	r1, #64	; 0x40
 800660a:	4618      	mov	r0, r3
 800660c:	f000 fb01 	bl	8006c12 <TIM_ITRx_SetConfig>
      break;
 8006610:	e00c      	b.n	800662c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4619      	mov	r1, r3
 800661c:	4610      	mov	r0, r2
 800661e:	f000 faf8 	bl	8006c12 <TIM_ITRx_SetConfig>
      break;
 8006622:	e003      	b.n	800662c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	73fb      	strb	r3, [r7, #15]
      break;
 8006628:	e000      	b.n	800662c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800662a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800663c:	7bfb      	ldrb	r3, [r7, #15]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800664e:	bf00      	nop
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800665a:	b480      	push	{r7}
 800665c:	b083      	sub	sp, #12
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006662:	bf00      	nop
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800666e:	b480      	push	{r7}
 8006670:	b083      	sub	sp, #12
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006676:	bf00      	nop
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006682:	b480      	push	{r7}
 8006684:	b083      	sub	sp, #12
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800668a:	bf00      	nop
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800669e:	bf00      	nop
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b084      	sub	sp, #16
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d107      	bne.n	80066d2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2201      	movs	r2, #1
 80066c6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066d0:	e02a      	b.n	8006728 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d107      	bne.n	80066ec <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2202      	movs	r2, #2
 80066e0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066ea:	e01d      	b.n	8006728 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d107      	bne.n	8006706 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2204      	movs	r2, #4
 80066fa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006704:	e010      	b.n	8006728 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	429a      	cmp	r2, r3
 800670e:	d107      	bne.n	8006720 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2208      	movs	r2, #8
 8006714:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800671e:	e003      	b.n	8006728 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f7ff ffb4 	bl	8006696 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	771a      	strb	r2, [r3, #28]
}
 8006734:	bf00      	nop
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a34      	ldr	r2, [pc, #208]	; (8006820 <TIM_Base_SetConfig+0xe4>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d00f      	beq.n	8006774 <TIM_Base_SetConfig+0x38>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800675a:	d00b      	beq.n	8006774 <TIM_Base_SetConfig+0x38>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a31      	ldr	r2, [pc, #196]	; (8006824 <TIM_Base_SetConfig+0xe8>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d007      	beq.n	8006774 <TIM_Base_SetConfig+0x38>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a30      	ldr	r2, [pc, #192]	; (8006828 <TIM_Base_SetConfig+0xec>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d003      	beq.n	8006774 <TIM_Base_SetConfig+0x38>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a2f      	ldr	r2, [pc, #188]	; (800682c <TIM_Base_SetConfig+0xf0>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d108      	bne.n	8006786 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	4313      	orrs	r3, r2
 8006784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a25      	ldr	r2, [pc, #148]	; (8006820 <TIM_Base_SetConfig+0xe4>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d01b      	beq.n	80067c6 <TIM_Base_SetConfig+0x8a>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006794:	d017      	beq.n	80067c6 <TIM_Base_SetConfig+0x8a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a22      	ldr	r2, [pc, #136]	; (8006824 <TIM_Base_SetConfig+0xe8>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d013      	beq.n	80067c6 <TIM_Base_SetConfig+0x8a>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a21      	ldr	r2, [pc, #132]	; (8006828 <TIM_Base_SetConfig+0xec>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d00f      	beq.n	80067c6 <TIM_Base_SetConfig+0x8a>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a20      	ldr	r2, [pc, #128]	; (800682c <TIM_Base_SetConfig+0xf0>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d00b      	beq.n	80067c6 <TIM_Base_SetConfig+0x8a>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a1f      	ldr	r2, [pc, #124]	; (8006830 <TIM_Base_SetConfig+0xf4>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d007      	beq.n	80067c6 <TIM_Base_SetConfig+0x8a>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a1e      	ldr	r2, [pc, #120]	; (8006834 <TIM_Base_SetConfig+0xf8>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d003      	beq.n	80067c6 <TIM_Base_SetConfig+0x8a>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a1d      	ldr	r2, [pc, #116]	; (8006838 <TIM_Base_SetConfig+0xfc>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d108      	bne.n	80067d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a08      	ldr	r2, [pc, #32]	; (8006820 <TIM_Base_SetConfig+0xe4>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d103      	bne.n	800680c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	691a      	ldr	r2, [r3, #16]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	615a      	str	r2, [r3, #20]
}
 8006812:	bf00      	nop
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	40010000 	.word	0x40010000
 8006824:	40000400 	.word	0x40000400
 8006828:	40000800 	.word	0x40000800
 800682c:	40000c00 	.word	0x40000c00
 8006830:	40014000 	.word	0x40014000
 8006834:	40014400 	.word	0x40014400
 8006838:	40014800 	.word	0x40014800

0800683c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	f023 0201 	bic.w	r2, r3, #1
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f023 0303 	bic.w	r3, r3, #3
 8006872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	4313      	orrs	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f023 0302 	bic.w	r3, r3, #2
 8006884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	4313      	orrs	r3, r2
 800688e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a1c      	ldr	r2, [pc, #112]	; (8006904 <TIM_OC1_SetConfig+0xc8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d10c      	bne.n	80068b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f023 0308 	bic.w	r3, r3, #8
 800689e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f023 0304 	bic.w	r3, r3, #4
 80068b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a13      	ldr	r2, [pc, #76]	; (8006904 <TIM_OC1_SetConfig+0xc8>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d111      	bne.n	80068de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	4313      	orrs	r3, r2
 80068dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	621a      	str	r2, [r3, #32]
}
 80068f8:	bf00      	nop
 80068fa:	371c      	adds	r7, #28
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	40010000 	.word	0x40010000

08006908 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	f023 0210 	bic.w	r2, r3, #16
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800693e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	021b      	lsls	r3, r3, #8
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	4313      	orrs	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f023 0320 	bic.w	r3, r3, #32
 8006952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4313      	orrs	r3, r2
 800695e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a1e      	ldr	r2, [pc, #120]	; (80069dc <TIM_OC2_SetConfig+0xd4>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d10d      	bne.n	8006984 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800696e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	011b      	lsls	r3, r3, #4
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	4313      	orrs	r3, r2
 800697a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006982:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a15      	ldr	r2, [pc, #84]	; (80069dc <TIM_OC2_SetConfig+0xd4>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d113      	bne.n	80069b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006992:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800699a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	621a      	str	r2, [r3, #32]
}
 80069ce:	bf00      	nop
 80069d0:	371c      	adds	r7, #28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	40010000 	.word	0x40010000

080069e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b087      	sub	sp, #28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f023 0303 	bic.w	r3, r3, #3
 8006a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	021b      	lsls	r3, r3, #8
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a1d      	ldr	r2, [pc, #116]	; (8006ab0 <TIM_OC3_SetConfig+0xd0>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d10d      	bne.n	8006a5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	021b      	lsls	r3, r3, #8
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a14      	ldr	r2, [pc, #80]	; (8006ab0 <TIM_OC3_SetConfig+0xd0>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d113      	bne.n	8006a8a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	011b      	lsls	r3, r3, #4
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	011b      	lsls	r3, r3, #4
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685a      	ldr	r2, [r3, #4]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	621a      	str	r2, [r3, #32]
}
 8006aa4:	bf00      	nop
 8006aa6:	371c      	adds	r7, #28
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	40010000 	.word	0x40010000

08006ab4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	021b      	lsls	r3, r3, #8
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006afe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	031b      	lsls	r3, r3, #12
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a10      	ldr	r2, [pc, #64]	; (8006b50 <TIM_OC4_SetConfig+0x9c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d109      	bne.n	8006b28 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	019b      	lsls	r3, r3, #6
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	621a      	str	r2, [r3, #32]
}
 8006b42:	bf00      	nop
 8006b44:	371c      	adds	r7, #28
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	40010000 	.word	0x40010000

08006b54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	f023 0201 	bic.w	r2, r3, #1
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	011b      	lsls	r3, r3, #4
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f023 030a 	bic.w	r3, r3, #10
 8006b90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	621a      	str	r2, [r3, #32]
}
 8006ba6:	bf00      	nop
 8006ba8:	371c      	adds	r7, #28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b087      	sub	sp, #28
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	60f8      	str	r0, [r7, #12]
 8006bba:	60b9      	str	r1, [r7, #8]
 8006bbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	f023 0210 	bic.w	r2, r3, #16
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	031b      	lsls	r3, r3, #12
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	621a      	str	r2, [r3, #32]
}
 8006c06:	bf00      	nop
 8006c08:	371c      	adds	r7, #28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b085      	sub	sp, #20
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	f043 0307 	orr.w	r3, r3, #7
 8006c34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	609a      	str	r2, [r3, #8]
}
 8006c3c:	bf00      	nop
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
 8006c54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	021a      	lsls	r2, r3, #8
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	609a      	str	r2, [r3, #8]
}
 8006c7c:	bf00      	nop
 8006c7e:	371c      	adds	r7, #28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f003 031f 	and.w	r3, r3, #31
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6a1a      	ldr	r2, [r3, #32]
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	43db      	mvns	r3, r3
 8006caa:	401a      	ands	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6a1a      	ldr	r2, [r3, #32]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f003 031f 	and.w	r3, r3, #31
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	621a      	str	r2, [r3, #32]
}
 8006cc6:	bf00      	nop
 8006cc8:	371c      	adds	r7, #28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
	...

08006cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d101      	bne.n	8006cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	e050      	b.n	8006d8e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a1c      	ldr	r2, [pc, #112]	; (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d018      	beq.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d38:	d013      	beq.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a18      	ldr	r2, [pc, #96]	; (8006da0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d00e      	beq.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a16      	ldr	r2, [pc, #88]	; (8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d009      	beq.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a15      	ldr	r2, [pc, #84]	; (8006da8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d004      	beq.n	8006d62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a13      	ldr	r2, [pc, #76]	; (8006dac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d10c      	bne.n	8006d7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	40010000 	.word	0x40010000
 8006da0:	40000400 	.word	0x40000400
 8006da4:	40000800 	.word	0x40000800
 8006da8:	40000c00 	.word	0x40000c00
 8006dac:	40014000 	.word	0x40014000

08006db0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <__NVIC_SetPriority>:
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	4603      	mov	r3, r0
 8006de0:	6039      	str	r1, [r7, #0]
 8006de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	db0a      	blt.n	8006e02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	490c      	ldr	r1, [pc, #48]	; (8006e24 <__NVIC_SetPriority+0x4c>)
 8006df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006df6:	0112      	lsls	r2, r2, #4
 8006df8:	b2d2      	uxtb	r2, r2
 8006dfa:	440b      	add	r3, r1
 8006dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006e00:	e00a      	b.n	8006e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	4908      	ldr	r1, [pc, #32]	; (8006e28 <__NVIC_SetPriority+0x50>)
 8006e08:	79fb      	ldrb	r3, [r7, #7]
 8006e0a:	f003 030f 	and.w	r3, r3, #15
 8006e0e:	3b04      	subs	r3, #4
 8006e10:	0112      	lsls	r2, r2, #4
 8006e12:	b2d2      	uxtb	r2, r2
 8006e14:	440b      	add	r3, r1
 8006e16:	761a      	strb	r2, [r3, #24]
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	e000e100 	.word	0xe000e100
 8006e28:	e000ed00 	.word	0xe000ed00

08006e2c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006e30:	4b05      	ldr	r3, [pc, #20]	; (8006e48 <SysTick_Handler+0x1c>)
 8006e32:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006e34:	f001 fd28 	bl	8008888 <xTaskGetSchedulerState>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d001      	beq.n	8006e42 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006e3e:	f002 fb13 	bl	8009468 <xPortSysTickHandler>
  }
}
 8006e42:	bf00      	nop
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	e000e010 	.word	0xe000e010

08006e4c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006e50:	2100      	movs	r1, #0
 8006e52:	f06f 0004 	mvn.w	r0, #4
 8006e56:	f7ff ffbf 	bl	8006dd8 <__NVIC_SetPriority>
#endif
}
 8006e5a:	bf00      	nop
 8006e5c:	bd80      	pop	{r7, pc}
	...

08006e60 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e66:	f3ef 8305 	mrs	r3, IPSR
 8006e6a:	603b      	str	r3, [r7, #0]
  return(result);
 8006e6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d003      	beq.n	8006e7a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006e72:	f06f 0305 	mvn.w	r3, #5
 8006e76:	607b      	str	r3, [r7, #4]
 8006e78:	e00c      	b.n	8006e94 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006e7a:	4b0a      	ldr	r3, [pc, #40]	; (8006ea4 <osKernelInitialize+0x44>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d105      	bne.n	8006e8e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006e82:	4b08      	ldr	r3, [pc, #32]	; (8006ea4 <osKernelInitialize+0x44>)
 8006e84:	2201      	movs	r2, #1
 8006e86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	607b      	str	r3, [r7, #4]
 8006e8c:	e002      	b.n	8006e94 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e94:	687b      	ldr	r3, [r7, #4]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	20000738 	.word	0x20000738

08006ea8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006eae:	f3ef 8305 	mrs	r3, IPSR
 8006eb2:	603b      	str	r3, [r7, #0]
  return(result);
 8006eb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006eba:	f06f 0305 	mvn.w	r3, #5
 8006ebe:	607b      	str	r3, [r7, #4]
 8006ec0:	e010      	b.n	8006ee4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006ec2:	4b0b      	ldr	r3, [pc, #44]	; (8006ef0 <osKernelStart+0x48>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d109      	bne.n	8006ede <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006eca:	f7ff ffbf 	bl	8006e4c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006ece:	4b08      	ldr	r3, [pc, #32]	; (8006ef0 <osKernelStart+0x48>)
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006ed4:	f001 f87c 	bl	8007fd0 <vTaskStartScheduler>
      stat = osOK;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	607b      	str	r3, [r7, #4]
 8006edc:	e002      	b.n	8006ee4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006ede:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ee4:	687b      	ldr	r3, [r7, #4]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20000738 	.word	0x20000738

08006ef4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b08e      	sub	sp, #56	; 0x38
 8006ef8:	af04      	add	r7, sp, #16
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006f00:	2300      	movs	r3, #0
 8006f02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f04:	f3ef 8305 	mrs	r3, IPSR
 8006f08:	617b      	str	r3, [r7, #20]
  return(result);
 8006f0a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d17e      	bne.n	800700e <osThreadNew+0x11a>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d07b      	beq.n	800700e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006f16:	2380      	movs	r3, #128	; 0x80
 8006f18:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006f1a:	2318      	movs	r3, #24
 8006f1c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006f22:	f04f 33ff 	mov.w	r3, #4294967295
 8006f26:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d045      	beq.n	8006fba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <osThreadNew+0x48>
        name = attr->name;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d008      	beq.n	8006f62 <osThreadNew+0x6e>
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	2b38      	cmp	r3, #56	; 0x38
 8006f54:	d805      	bhi.n	8006f62 <osThreadNew+0x6e>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f003 0301 	and.w	r3, r3, #1
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <osThreadNew+0x72>
        return (NULL);
 8006f62:	2300      	movs	r3, #0
 8006f64:	e054      	b.n	8007010 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	089b      	lsrs	r3, r3, #2
 8006f74:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00e      	beq.n	8006f9c <osThreadNew+0xa8>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	2bbb      	cmp	r3, #187	; 0xbb
 8006f84:	d90a      	bls.n	8006f9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d006      	beq.n	8006f9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d002      	beq.n	8006f9c <osThreadNew+0xa8>
        mem = 1;
 8006f96:	2301      	movs	r3, #1
 8006f98:	61bb      	str	r3, [r7, #24]
 8006f9a:	e010      	b.n	8006fbe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10c      	bne.n	8006fbe <osThreadNew+0xca>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d108      	bne.n	8006fbe <osThreadNew+0xca>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d104      	bne.n	8006fbe <osThreadNew+0xca>
          mem = 0;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	61bb      	str	r3, [r7, #24]
 8006fb8:	e001      	b.n	8006fbe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d110      	bne.n	8006fe6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fcc:	9202      	str	r2, [sp, #8]
 8006fce:	9301      	str	r3, [sp, #4]
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	6a3a      	ldr	r2, [r7, #32]
 8006fd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 fe0c 	bl	8007bf8 <xTaskCreateStatic>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	613b      	str	r3, [r7, #16]
 8006fe4:	e013      	b.n	800700e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d110      	bne.n	800700e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006fec:	6a3b      	ldr	r3, [r7, #32]
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	f107 0310 	add.w	r3, r7, #16
 8006ff4:	9301      	str	r3, [sp, #4]
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 fe57 	bl	8007cb2 <xTaskCreate>
 8007004:	4603      	mov	r3, r0
 8007006:	2b01      	cmp	r3, #1
 8007008:	d001      	beq.n	800700e <osThreadNew+0x11a>
            hTask = NULL;
 800700a:	2300      	movs	r3, #0
 800700c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800700e:	693b      	ldr	r3, [r7, #16]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3728      	adds	r7, #40	; 0x28
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007020:	f3ef 8305 	mrs	r3, IPSR
 8007024:	60bb      	str	r3, [r7, #8]
  return(result);
 8007026:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007028:	2b00      	cmp	r3, #0
 800702a:	d003      	beq.n	8007034 <osDelay+0x1c>
    stat = osErrorISR;
 800702c:	f06f 0305 	mvn.w	r3, #5
 8007030:	60fb      	str	r3, [r7, #12]
 8007032:	e007      	b.n	8007044 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007034:	2300      	movs	r3, #0
 8007036:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <osDelay+0x2c>
      vTaskDelay(ticks);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 ff92 	bl	8007f68 <vTaskDelay>
    }
  }

  return (stat);
 8007044:	68fb      	ldr	r3, [r7, #12]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
	...

08007050 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4a07      	ldr	r2, [pc, #28]	; (800707c <vApplicationGetIdleTaskMemory+0x2c>)
 8007060:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	4a06      	ldr	r2, [pc, #24]	; (8007080 <vApplicationGetIdleTaskMemory+0x30>)
 8007066:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2280      	movs	r2, #128	; 0x80
 800706c:	601a      	str	r2, [r3, #0]
}
 800706e:	bf00      	nop
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	2000073c 	.word	0x2000073c
 8007080:	200007f8 	.word	0x200007f8

08007084 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4a07      	ldr	r2, [pc, #28]	; (80070b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8007094:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	4a06      	ldr	r2, [pc, #24]	; (80070b4 <vApplicationGetTimerTaskMemory+0x30>)
 800709a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070a2:	601a      	str	r2, [r3, #0]
}
 80070a4:	bf00      	nop
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	200009f8 	.word	0x200009f8
 80070b4:	20000ab4 	.word	0x20000ab4

080070b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f103 0208 	add.w	r2, r3, #8
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f04f 32ff 	mov.w	r2, #4294967295
 80070d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f103 0208 	add.w	r2, r3, #8
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f103 0208 	add.w	r2, r3, #8
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007106:	bf00      	nop
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007112:	b480      	push	{r7}
 8007114:	b085      	sub	sp, #20
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	1c5a      	adds	r2, r3, #1
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	601a      	str	r2, [r3, #0]
}
 800714e:	bf00      	nop
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800715a:	b480      	push	{r7}
 800715c:	b085      	sub	sp, #20
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007170:	d103      	bne.n	800717a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	e00c      	b.n	8007194 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	3308      	adds	r3, #8
 800717e:	60fb      	str	r3, [r7, #12]
 8007180:	e002      	b.n	8007188 <vListInsert+0x2e>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	429a      	cmp	r2, r3
 8007192:	d2f6      	bcs.n	8007182 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	1c5a      	adds	r2, r3, #1
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	601a      	str	r2, [r3, #0]
}
 80071c0:	bf00      	nop
 80071c2:	3714      	adds	r7, #20
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	6892      	ldr	r2, [r2, #8]
 80071e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	6852      	ldr	r2, [r2, #4]
 80071ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d103      	bne.n	8007200 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	689a      	ldr	r2, [r3, #8]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	1e5a      	subs	r2, r3, #1
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10a      	bne.n	800724a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007246:	bf00      	nop
 8007248:	e7fe      	b.n	8007248 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800724a:	f002 f87b 	bl	8009344 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007256:	68f9      	ldr	r1, [r7, #12]
 8007258:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800725a:	fb01 f303 	mul.w	r3, r1, r3
 800725e:	441a      	add	r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800727a:	3b01      	subs	r3, #1
 800727c:	68f9      	ldr	r1, [r7, #12]
 800727e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007280:	fb01 f303 	mul.w	r3, r1, r3
 8007284:	441a      	add	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	22ff      	movs	r2, #255	; 0xff
 800728e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	22ff      	movs	r2, #255	; 0xff
 8007296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d114      	bne.n	80072ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d01a      	beq.n	80072de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	3310      	adds	r3, #16
 80072ac:	4618      	mov	r0, r3
 80072ae:	f001 f929 	bl	8008504 <xTaskRemoveFromEventList>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d012      	beq.n	80072de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80072b8:	4b0c      	ldr	r3, [pc, #48]	; (80072ec <xQueueGenericReset+0xcc>)
 80072ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	e009      	b.n	80072de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	3310      	adds	r3, #16
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7ff fef2 	bl	80070b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3324      	adds	r3, #36	; 0x24
 80072d8:	4618      	mov	r0, r3
 80072da:	f7ff feed 	bl	80070b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80072de:	f002 f861 	bl	80093a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80072e2:	2301      	movs	r3, #1
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	e000ed04 	.word	0xe000ed04

080072f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08e      	sub	sp, #56	; 0x38
 80072f4:	af02      	add	r7, sp, #8
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
 80072fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10a      	bne.n	800731a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007316:	bf00      	nop
 8007318:	e7fe      	b.n	8007318 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10a      	bne.n	8007336 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007332:	bf00      	nop
 8007334:	e7fe      	b.n	8007334 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d002      	beq.n	8007342 <xQueueGenericCreateStatic+0x52>
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <xQueueGenericCreateStatic+0x56>
 8007342:	2301      	movs	r3, #1
 8007344:	e000      	b.n	8007348 <xQueueGenericCreateStatic+0x58>
 8007346:	2300      	movs	r3, #0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10a      	bne.n	8007362 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	623b      	str	r3, [r7, #32]
}
 800735e:	bf00      	nop
 8007360:	e7fe      	b.n	8007360 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d102      	bne.n	800736e <xQueueGenericCreateStatic+0x7e>
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <xQueueGenericCreateStatic+0x82>
 800736e:	2301      	movs	r3, #1
 8007370:	e000      	b.n	8007374 <xQueueGenericCreateStatic+0x84>
 8007372:	2300      	movs	r3, #0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10a      	bne.n	800738e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737c:	f383 8811 	msr	BASEPRI, r3
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	61fb      	str	r3, [r7, #28]
}
 800738a:	bf00      	nop
 800738c:	e7fe      	b.n	800738c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800738e:	2350      	movs	r3, #80	; 0x50
 8007390:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2b50      	cmp	r3, #80	; 0x50
 8007396:	d00a      	beq.n	80073ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	61bb      	str	r3, [r7, #24]
}
 80073aa:	bf00      	nop
 80073ac:	e7fe      	b.n	80073ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80073ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80073b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00d      	beq.n	80073d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80073ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80073c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	4613      	mov	r3, r2
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	68b9      	ldr	r1, [r7, #8]
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 f805 	bl	80073e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80073d8:	4618      	mov	r0, r3
 80073da:	3730      	adds	r7, #48	; 0x30
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
 80073ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d103      	bne.n	80073fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	69ba      	ldr	r2, [r7, #24]
 80073f8:	601a      	str	r2, [r3, #0]
 80073fa:	e002      	b.n	8007402 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800740e:	2101      	movs	r1, #1
 8007410:	69b8      	ldr	r0, [r7, #24]
 8007412:	f7ff ff05 	bl	8007220 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	78fa      	ldrb	r2, [r7, #3]
 800741a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800741e:	bf00      	nop
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
	...

08007428 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b08e      	sub	sp, #56	; 0x38
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
 8007434:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007436:	2300      	movs	r3, #0
 8007438:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10a      	bne.n	800745a <xQueueGenericSend+0x32>
	__asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007456:	bf00      	nop
 8007458:	e7fe      	b.n	8007458 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d103      	bne.n	8007468 <xQueueGenericSend+0x40>
 8007460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007464:	2b00      	cmp	r3, #0
 8007466:	d101      	bne.n	800746c <xQueueGenericSend+0x44>
 8007468:	2301      	movs	r3, #1
 800746a:	e000      	b.n	800746e <xQueueGenericSend+0x46>
 800746c:	2300      	movs	r3, #0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10a      	bne.n	8007488 <xQueueGenericSend+0x60>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007484:	bf00      	nop
 8007486:	e7fe      	b.n	8007486 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	2b02      	cmp	r3, #2
 800748c:	d103      	bne.n	8007496 <xQueueGenericSend+0x6e>
 800748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007492:	2b01      	cmp	r3, #1
 8007494:	d101      	bne.n	800749a <xQueueGenericSend+0x72>
 8007496:	2301      	movs	r3, #1
 8007498:	e000      	b.n	800749c <xQueueGenericSend+0x74>
 800749a:	2300      	movs	r3, #0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10a      	bne.n	80074b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	623b      	str	r3, [r7, #32]
}
 80074b2:	bf00      	nop
 80074b4:	e7fe      	b.n	80074b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074b6:	f001 f9e7 	bl	8008888 <xTaskGetSchedulerState>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d102      	bne.n	80074c6 <xQueueGenericSend+0x9e>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <xQueueGenericSend+0xa2>
 80074c6:	2301      	movs	r3, #1
 80074c8:	e000      	b.n	80074cc <xQueueGenericSend+0xa4>
 80074ca:	2300      	movs	r3, #0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10a      	bne.n	80074e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	61fb      	str	r3, [r7, #28]
}
 80074e2:	bf00      	nop
 80074e4:	e7fe      	b.n	80074e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074e6:	f001 ff2d 	bl	8009344 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d302      	bcc.n	80074fc <xQueueGenericSend+0xd4>
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d129      	bne.n	8007550 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	68b9      	ldr	r1, [r7, #8]
 8007500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007502:	f000 fa0b 	bl	800791c <prvCopyDataToQueue>
 8007506:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	2b00      	cmp	r3, #0
 800750e:	d010      	beq.n	8007532 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007512:	3324      	adds	r3, #36	; 0x24
 8007514:	4618      	mov	r0, r3
 8007516:	f000 fff5 	bl	8008504 <xTaskRemoveFromEventList>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d013      	beq.n	8007548 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007520:	4b3f      	ldr	r3, [pc, #252]	; (8007620 <xQueueGenericSend+0x1f8>)
 8007522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007526:	601a      	str	r2, [r3, #0]
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	e00a      	b.n	8007548 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007534:	2b00      	cmp	r3, #0
 8007536:	d007      	beq.n	8007548 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007538:	4b39      	ldr	r3, [pc, #228]	; (8007620 <xQueueGenericSend+0x1f8>)
 800753a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007548:	f001 ff2c 	bl	80093a4 <vPortExitCritical>
				return pdPASS;
 800754c:	2301      	movs	r3, #1
 800754e:	e063      	b.n	8007618 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d103      	bne.n	800755e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007556:	f001 ff25 	bl	80093a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800755a:	2300      	movs	r3, #0
 800755c:	e05c      	b.n	8007618 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800755e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007560:	2b00      	cmp	r3, #0
 8007562:	d106      	bne.n	8007572 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007564:	f107 0314 	add.w	r3, r7, #20
 8007568:	4618      	mov	r0, r3
 800756a:	f001 f82f 	bl	80085cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800756e:	2301      	movs	r3, #1
 8007570:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007572:	f001 ff17 	bl	80093a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007576:	f000 fd9b 	bl	80080b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800757a:	f001 fee3 	bl	8009344 <vPortEnterCritical>
 800757e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007580:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007584:	b25b      	sxtb	r3, r3
 8007586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758a:	d103      	bne.n	8007594 <xQueueGenericSend+0x16c>
 800758c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758e:	2200      	movs	r2, #0
 8007590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007596:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800759a:	b25b      	sxtb	r3, r3
 800759c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a0:	d103      	bne.n	80075aa <xQueueGenericSend+0x182>
 80075a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075aa:	f001 fefb 	bl	80093a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075ae:	1d3a      	adds	r2, r7, #4
 80075b0:	f107 0314 	add.w	r3, r7, #20
 80075b4:	4611      	mov	r1, r2
 80075b6:	4618      	mov	r0, r3
 80075b8:	f001 f81e 	bl	80085f8 <xTaskCheckForTimeOut>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d124      	bne.n	800760c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80075c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075c4:	f000 faa2 	bl	8007b0c <prvIsQueueFull>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d018      	beq.n	8007600 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d0:	3310      	adds	r3, #16
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	4611      	mov	r1, r2
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 ff44 	bl	8008464 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80075dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075de:	f000 fa2d 	bl	8007a3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80075e2:	f000 fd73 	bl	80080cc <xTaskResumeAll>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f47f af7c 	bne.w	80074e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80075ee:	4b0c      	ldr	r3, [pc, #48]	; (8007620 <xQueueGenericSend+0x1f8>)
 80075f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	e772      	b.n	80074e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007602:	f000 fa1b 	bl	8007a3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007606:	f000 fd61 	bl	80080cc <xTaskResumeAll>
 800760a:	e76c      	b.n	80074e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800760c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800760e:	f000 fa15 	bl	8007a3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007612:	f000 fd5b 	bl	80080cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007616:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007618:	4618      	mov	r0, r3
 800761a:	3738      	adds	r7, #56	; 0x38
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	e000ed04 	.word	0xe000ed04

08007624 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b090      	sub	sp, #64	; 0x40
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]
 8007630:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10a      	bne.n	8007652 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800763c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800764e:	bf00      	nop
 8007650:	e7fe      	b.n	8007650 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d103      	bne.n	8007660 <xQueueGenericSendFromISR+0x3c>
 8007658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <xQueueGenericSendFromISR+0x40>
 8007660:	2301      	movs	r3, #1
 8007662:	e000      	b.n	8007666 <xQueueGenericSendFromISR+0x42>
 8007664:	2300      	movs	r3, #0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10a      	bne.n	8007680 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800767c:	bf00      	nop
 800767e:	e7fe      	b.n	800767e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	2b02      	cmp	r3, #2
 8007684:	d103      	bne.n	800768e <xQueueGenericSendFromISR+0x6a>
 8007686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800768a:	2b01      	cmp	r3, #1
 800768c:	d101      	bne.n	8007692 <xQueueGenericSendFromISR+0x6e>
 800768e:	2301      	movs	r3, #1
 8007690:	e000      	b.n	8007694 <xQueueGenericSendFromISR+0x70>
 8007692:	2300      	movs	r3, #0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10a      	bne.n	80076ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	623b      	str	r3, [r7, #32]
}
 80076aa:	bf00      	nop
 80076ac:	e7fe      	b.n	80076ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076ae:	f001 ff2b 	bl	8009508 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80076b2:	f3ef 8211 	mrs	r2, BASEPRI
 80076b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	61fa      	str	r2, [r7, #28]
 80076c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80076ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d302      	bcc.n	80076e0 <xQueueGenericSendFromISR+0xbc>
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d12f      	bne.n	8007740 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	68b9      	ldr	r1, [r7, #8]
 80076f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076f6:	f000 f911 	bl	800791c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80076fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80076fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007702:	d112      	bne.n	800772a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	2b00      	cmp	r3, #0
 800770a:	d016      	beq.n	800773a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800770c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770e:	3324      	adds	r3, #36	; 0x24
 8007710:	4618      	mov	r0, r3
 8007712:	f000 fef7 	bl	8008504 <xTaskRemoveFromEventList>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00e      	beq.n	800773a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00b      	beq.n	800773a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	601a      	str	r2, [r3, #0]
 8007728:	e007      	b.n	800773a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800772a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800772e:	3301      	adds	r3, #1
 8007730:	b2db      	uxtb	r3, r3
 8007732:	b25a      	sxtb	r2, r3
 8007734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800773a:	2301      	movs	r3, #1
 800773c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800773e:	e001      	b.n	8007744 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007740:	2300      	movs	r3, #0
 8007742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007746:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800774e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007752:	4618      	mov	r0, r3
 8007754:	3740      	adds	r7, #64	; 0x40
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
	...

0800775c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b08c      	sub	sp, #48	; 0x30
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007768:	2300      	movs	r3, #0
 800776a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10a      	bne.n	800778c <xQueueReceive+0x30>
	__asm volatile
 8007776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	623b      	str	r3, [r7, #32]
}
 8007788:	bf00      	nop
 800778a:	e7fe      	b.n	800778a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d103      	bne.n	800779a <xQueueReceive+0x3e>
 8007792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <xQueueReceive+0x42>
 800779a:	2301      	movs	r3, #1
 800779c:	e000      	b.n	80077a0 <xQueueReceive+0x44>
 800779e:	2300      	movs	r3, #0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10a      	bne.n	80077ba <xQueueReceive+0x5e>
	__asm volatile
 80077a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a8:	f383 8811 	msr	BASEPRI, r3
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	61fb      	str	r3, [r7, #28]
}
 80077b6:	bf00      	nop
 80077b8:	e7fe      	b.n	80077b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077ba:	f001 f865 	bl	8008888 <xTaskGetSchedulerState>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d102      	bne.n	80077ca <xQueueReceive+0x6e>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d101      	bne.n	80077ce <xQueueReceive+0x72>
 80077ca:	2301      	movs	r3, #1
 80077cc:	e000      	b.n	80077d0 <xQueueReceive+0x74>
 80077ce:	2300      	movs	r3, #0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d10a      	bne.n	80077ea <xQueueReceive+0x8e>
	__asm volatile
 80077d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	61bb      	str	r3, [r7, #24]
}
 80077e6:	bf00      	nop
 80077e8:	e7fe      	b.n	80077e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077ea:	f001 fdab 	bl	8009344 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d01f      	beq.n	800783a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80077fa:	68b9      	ldr	r1, [r7, #8]
 80077fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077fe:	f000 f8f7 	bl	80079f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	1e5a      	subs	r2, r3, #1
 8007806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007808:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800780a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00f      	beq.n	8007832 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007814:	3310      	adds	r3, #16
 8007816:	4618      	mov	r0, r3
 8007818:	f000 fe74 	bl	8008504 <xTaskRemoveFromEventList>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d007      	beq.n	8007832 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007822:	4b3d      	ldr	r3, [pc, #244]	; (8007918 <xQueueReceive+0x1bc>)
 8007824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007828:	601a      	str	r2, [r3, #0]
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007832:	f001 fdb7 	bl	80093a4 <vPortExitCritical>
				return pdPASS;
 8007836:	2301      	movs	r3, #1
 8007838:	e069      	b.n	800790e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d103      	bne.n	8007848 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007840:	f001 fdb0 	bl	80093a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007844:	2300      	movs	r3, #0
 8007846:	e062      	b.n	800790e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784a:	2b00      	cmp	r3, #0
 800784c:	d106      	bne.n	800785c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800784e:	f107 0310 	add.w	r3, r7, #16
 8007852:	4618      	mov	r0, r3
 8007854:	f000 feba 	bl	80085cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007858:	2301      	movs	r3, #1
 800785a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800785c:	f001 fda2 	bl	80093a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007860:	f000 fc26 	bl	80080b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007864:	f001 fd6e 	bl	8009344 <vPortEnterCritical>
 8007868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800786e:	b25b      	sxtb	r3, r3
 8007870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007874:	d103      	bne.n	800787e <xQueueReceive+0x122>
 8007876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800787e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007884:	b25b      	sxtb	r3, r3
 8007886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800788a:	d103      	bne.n	8007894 <xQueueReceive+0x138>
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	2200      	movs	r2, #0
 8007890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007894:	f001 fd86 	bl	80093a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007898:	1d3a      	adds	r2, r7, #4
 800789a:	f107 0310 	add.w	r3, r7, #16
 800789e:	4611      	mov	r1, r2
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 fea9 	bl	80085f8 <xTaskCheckForTimeOut>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d123      	bne.n	80078f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078ae:	f000 f917 	bl	8007ae0 <prvIsQueueEmpty>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d017      	beq.n	80078e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	3324      	adds	r3, #36	; 0x24
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	4611      	mov	r1, r2
 80078c0:	4618      	mov	r0, r3
 80078c2:	f000 fdcf 	bl	8008464 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078c8:	f000 f8b8 	bl	8007a3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078cc:	f000 fbfe 	bl	80080cc <xTaskResumeAll>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d189      	bne.n	80077ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80078d6:	4b10      	ldr	r3, [pc, #64]	; (8007918 <xQueueReceive+0x1bc>)
 80078d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	e780      	b.n	80077ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80078e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078ea:	f000 f8a7 	bl	8007a3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078ee:	f000 fbed 	bl	80080cc <xTaskResumeAll>
 80078f2:	e77a      	b.n	80077ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80078f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078f6:	f000 f8a1 	bl	8007a3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078fa:	f000 fbe7 	bl	80080cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007900:	f000 f8ee 	bl	8007ae0 <prvIsQueueEmpty>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	f43f af6f 	beq.w	80077ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800790c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800790e:	4618      	mov	r0, r3
 8007910:	3730      	adds	r7, #48	; 0x30
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	e000ed04 	.word	0xe000ed04

0800791c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b086      	sub	sp, #24
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007928:	2300      	movs	r3, #0
 800792a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007930:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10d      	bne.n	8007956 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d14d      	bne.n	80079de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	4618      	mov	r0, r3
 8007948:	f000 ffbc 	bl	80088c4 <xTaskPriorityDisinherit>
 800794c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	609a      	str	r2, [r3, #8]
 8007954:	e043      	b.n	80079de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d119      	bne.n	8007990 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6858      	ldr	r0, [r3, #4]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007964:	461a      	mov	r2, r3
 8007966:	68b9      	ldr	r1, [r7, #8]
 8007968:	f002 f846 	bl	80099f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	685a      	ldr	r2, [r3, #4]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007974:	441a      	add	r2, r3
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	429a      	cmp	r2, r3
 8007984:	d32b      	bcc.n	80079de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	605a      	str	r2, [r3, #4]
 800798e:	e026      	b.n	80079de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	68d8      	ldr	r0, [r3, #12]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007998:	461a      	mov	r2, r3
 800799a:	68b9      	ldr	r1, [r7, #8]
 800799c:	f002 f82c 	bl	80099f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	68da      	ldr	r2, [r3, #12]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a8:	425b      	negs	r3, r3
 80079aa:	441a      	add	r2, r3
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	68da      	ldr	r2, [r3, #12]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d207      	bcs.n	80079cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	689a      	ldr	r2, [r3, #8]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c4:	425b      	negs	r3, r3
 80079c6:	441a      	add	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d105      	bne.n	80079de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	3b01      	subs	r3, #1
 80079dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	1c5a      	adds	r2, r3, #1
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80079e6:	697b      	ldr	r3, [r7, #20]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3718      	adds	r7, #24
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d018      	beq.n	8007a34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68da      	ldr	r2, [r3, #12]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0a:	441a      	add	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68da      	ldr	r2, [r3, #12]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d303      	bcc.n	8007a24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	68d9      	ldr	r1, [r3, #12]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	6838      	ldr	r0, [r7, #0]
 8007a30:	f001 ffe2 	bl	80099f8 <memcpy>
	}
}
 8007a34:	bf00      	nop
 8007a36:	3708      	adds	r7, #8
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a44:	f001 fc7e 	bl	8009344 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a50:	e011      	b.n	8007a76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d012      	beq.n	8007a80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	3324      	adds	r3, #36	; 0x24
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 fd50 	bl	8008504 <xTaskRemoveFromEventList>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007a6a:	f000 fe27 	bl	80086bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
 8007a70:	3b01      	subs	r3, #1
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	dce9      	bgt.n	8007a52 <prvUnlockQueue+0x16>
 8007a7e:	e000      	b.n	8007a82 <prvUnlockQueue+0x46>
					break;
 8007a80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	22ff      	movs	r2, #255	; 0xff
 8007a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007a8a:	f001 fc8b 	bl	80093a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007a8e:	f001 fc59 	bl	8009344 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a9a:	e011      	b.n	8007ac0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d012      	beq.n	8007aca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	3310      	adds	r3, #16
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f000 fd2b 	bl	8008504 <xTaskRemoveFromEventList>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d001      	beq.n	8007ab8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ab4:	f000 fe02 	bl	80086bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
 8007aba:	3b01      	subs	r3, #1
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ac0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	dce9      	bgt.n	8007a9c <prvUnlockQueue+0x60>
 8007ac8:	e000      	b.n	8007acc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007aca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	22ff      	movs	r2, #255	; 0xff
 8007ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007ad4:	f001 fc66 	bl	80093a4 <vPortExitCritical>
}
 8007ad8:	bf00      	nop
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ae8:	f001 fc2c 	bl	8009344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d102      	bne.n	8007afa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007af4:	2301      	movs	r3, #1
 8007af6:	60fb      	str	r3, [r7, #12]
 8007af8:	e001      	b.n	8007afe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007afa:	2300      	movs	r3, #0
 8007afc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007afe:	f001 fc51 	bl	80093a4 <vPortExitCritical>

	return xReturn;
 8007b02:	68fb      	ldr	r3, [r7, #12]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b14:	f001 fc16 	bl	8009344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d102      	bne.n	8007b2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b24:	2301      	movs	r3, #1
 8007b26:	60fb      	str	r3, [r7, #12]
 8007b28:	e001      	b.n	8007b2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b2e:	f001 fc39 	bl	80093a4 <vPortExitCritical>

	return xReturn;
 8007b32:	68fb      	ldr	r3, [r7, #12]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b46:	2300      	movs	r3, #0
 8007b48:	60fb      	str	r3, [r7, #12]
 8007b4a:	e014      	b.n	8007b76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007b4c:	4a0f      	ldr	r2, [pc, #60]	; (8007b8c <vQueueAddToRegistry+0x50>)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10b      	bne.n	8007b70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007b58:	490c      	ldr	r1, [pc, #48]	; (8007b8c <vQueueAddToRegistry+0x50>)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007b62:	4a0a      	ldr	r2, [pc, #40]	; (8007b8c <vQueueAddToRegistry+0x50>)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	00db      	lsls	r3, r3, #3
 8007b68:	4413      	add	r3, r2
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007b6e:	e006      	b.n	8007b7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	3301      	adds	r3, #1
 8007b74:	60fb      	str	r3, [r7, #12]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2b07      	cmp	r3, #7
 8007b7a:	d9e7      	bls.n	8007b4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007b7c:	bf00      	nop
 8007b7e:	bf00      	nop
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	20000eb4 	.word	0x20000eb4

08007b90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007ba0:	f001 fbd0 	bl	8009344 <vPortEnterCritical>
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007baa:	b25b      	sxtb	r3, r3
 8007bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb0:	d103      	bne.n	8007bba <vQueueWaitForMessageRestricted+0x2a>
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bc0:	b25b      	sxtb	r3, r3
 8007bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc6:	d103      	bne.n	8007bd0 <vQueueWaitForMessageRestricted+0x40>
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bd0:	f001 fbe8 	bl	80093a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d106      	bne.n	8007bea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	3324      	adds	r3, #36	; 0x24
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	68b9      	ldr	r1, [r7, #8]
 8007be4:	4618      	mov	r0, r3
 8007be6:	f000 fc61 	bl	80084ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007bea:	6978      	ldr	r0, [r7, #20]
 8007bec:	f7ff ff26 	bl	8007a3c <prvUnlockQueue>
	}
 8007bf0:	bf00      	nop
 8007bf2:	3718      	adds	r7, #24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08e      	sub	sp, #56	; 0x38
 8007bfc:	af04      	add	r7, sp, #16
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
 8007c04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10a      	bne.n	8007c22 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	623b      	str	r3, [r7, #32]
}
 8007c1e:	bf00      	nop
 8007c20:	e7fe      	b.n	8007c20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10a      	bne.n	8007c3e <xTaskCreateStatic+0x46>
	__asm volatile
 8007c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	61fb      	str	r3, [r7, #28]
}
 8007c3a:	bf00      	nop
 8007c3c:	e7fe      	b.n	8007c3c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007c3e:	23bc      	movs	r3, #188	; 0xbc
 8007c40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	2bbc      	cmp	r3, #188	; 0xbc
 8007c46:	d00a      	beq.n	8007c5e <xTaskCreateStatic+0x66>
	__asm volatile
 8007c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4c:	f383 8811 	msr	BASEPRI, r3
 8007c50:	f3bf 8f6f 	isb	sy
 8007c54:	f3bf 8f4f 	dsb	sy
 8007c58:	61bb      	str	r3, [r7, #24]
}
 8007c5a:	bf00      	nop
 8007c5c:	e7fe      	b.n	8007c5c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007c5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d01e      	beq.n	8007ca4 <xTaskCreateStatic+0xac>
 8007c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d01b      	beq.n	8007ca4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c78:	2202      	movs	r2, #2
 8007c7a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007c7e:	2300      	movs	r3, #0
 8007c80:	9303      	str	r3, [sp, #12]
 8007c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c84:	9302      	str	r3, [sp, #8]
 8007c86:	f107 0314 	add.w	r3, r7, #20
 8007c8a:	9301      	str	r3, [sp, #4]
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	68b9      	ldr	r1, [r7, #8]
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f000 f850 	bl	8007d3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c9e:	f000 f8f3 	bl	8007e88 <prvAddNewTaskToReadyList>
 8007ca2:	e001      	b.n	8007ca8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ca8:	697b      	ldr	r3, [r7, #20]
	}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3728      	adds	r7, #40	; 0x28
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b08c      	sub	sp, #48	; 0x30
 8007cb6:	af04      	add	r7, sp, #16
 8007cb8:	60f8      	str	r0, [r7, #12]
 8007cba:	60b9      	str	r1, [r7, #8]
 8007cbc:	603b      	str	r3, [r7, #0]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007cc2:	88fb      	ldrh	r3, [r7, #6]
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f001 fc5e 	bl	8009588 <pvPortMalloc>
 8007ccc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00e      	beq.n	8007cf2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007cd4:	20bc      	movs	r0, #188	; 0xbc
 8007cd6:	f001 fc57 	bl	8009588 <pvPortMalloc>
 8007cda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d003      	beq.n	8007cea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	631a      	str	r2, [r3, #48]	; 0x30
 8007ce8:	e005      	b.n	8007cf6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007cea:	6978      	ldr	r0, [r7, #20]
 8007cec:	f001 fd18 	bl	8009720 <vPortFree>
 8007cf0:	e001      	b.n	8007cf6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d017      	beq.n	8007d2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d04:	88fa      	ldrh	r2, [r7, #6]
 8007d06:	2300      	movs	r3, #0
 8007d08:	9303      	str	r3, [sp, #12]
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	9302      	str	r3, [sp, #8]
 8007d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d10:	9301      	str	r3, [sp, #4]
 8007d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	68b9      	ldr	r1, [r7, #8]
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 f80e 	bl	8007d3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d20:	69f8      	ldr	r0, [r7, #28]
 8007d22:	f000 f8b1 	bl	8007e88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d26:	2301      	movs	r3, #1
 8007d28:	61bb      	str	r3, [r7, #24]
 8007d2a:	e002      	b.n	8007d32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d32:	69bb      	ldr	r3, [r7, #24]
	}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3720      	adds	r7, #32
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b088      	sub	sp, #32
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
 8007d48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	461a      	mov	r2, r3
 8007d54:	21a5      	movs	r1, #165	; 0xa5
 8007d56:	f001 fe5d 	bl	8009a14 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007d64:	3b01      	subs	r3, #1
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4413      	add	r3, r2
 8007d6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	f023 0307 	bic.w	r3, r3, #7
 8007d72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	f003 0307 	and.w	r3, r3, #7
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00a      	beq.n	8007d94 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d82:	f383 8811 	msr	BASEPRI, r3
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	617b      	str	r3, [r7, #20]
}
 8007d90:	bf00      	nop
 8007d92:	e7fe      	b.n	8007d92 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d01f      	beq.n	8007dda <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	61fb      	str	r3, [r7, #28]
 8007d9e:	e012      	b.n	8007dc6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	4413      	add	r3, r2
 8007da6:	7819      	ldrb	r1, [r3, #0]
 8007da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	4413      	add	r3, r2
 8007dae:	3334      	adds	r3, #52	; 0x34
 8007db0:	460a      	mov	r2, r1
 8007db2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	4413      	add	r3, r2
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d006      	beq.n	8007dce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	61fb      	str	r3, [r7, #28]
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	2b0f      	cmp	r3, #15
 8007dca:	d9e9      	bls.n	8007da0 <prvInitialiseNewTask+0x64>
 8007dcc:	e000      	b.n	8007dd0 <prvInitialiseNewTask+0x94>
			{
				break;
 8007dce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007dd8:	e003      	b.n	8007de2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de4:	2b37      	cmp	r3, #55	; 0x37
 8007de6:	d901      	bls.n	8007dec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007de8:	2337      	movs	r3, #55	; 0x37
 8007dea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007df0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007df6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e00:	3304      	adds	r3, #4
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7ff f978 	bl	80070f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0a:	3318      	adds	r3, #24
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7ff f973 	bl	80070f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3a:	3354      	adds	r3, #84	; 0x54
 8007e3c:	2260      	movs	r2, #96	; 0x60
 8007e3e:	2100      	movs	r1, #0
 8007e40:	4618      	mov	r0, r3
 8007e42:	f001 fde7 	bl	8009a14 <memset>
 8007e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e48:	4a0c      	ldr	r2, [pc, #48]	; (8007e7c <prvInitialiseNewTask+0x140>)
 8007e4a:	659a      	str	r2, [r3, #88]	; 0x58
 8007e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4e:	4a0c      	ldr	r2, [pc, #48]	; (8007e80 <prvInitialiseNewTask+0x144>)
 8007e50:	65da      	str	r2, [r3, #92]	; 0x5c
 8007e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e54:	4a0b      	ldr	r2, [pc, #44]	; (8007e84 <prvInitialiseNewTask+0x148>)
 8007e56:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e58:	683a      	ldr	r2, [r7, #0]
 8007e5a:	68f9      	ldr	r1, [r7, #12]
 8007e5c:	69b8      	ldr	r0, [r7, #24]
 8007e5e:	f001 f941 	bl	80090e4 <pxPortInitialiseStack>
 8007e62:	4602      	mov	r2, r0
 8007e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e66:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d002      	beq.n	8007e74 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e74:	bf00      	nop
 8007e76:	3720      	adds	r7, #32
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	0800ac0c 	.word	0x0800ac0c
 8007e80:	0800ac2c 	.word	0x0800ac2c
 8007e84:	0800abec 	.word	0x0800abec

08007e88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007e90:	f001 fa58 	bl	8009344 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e94:	4b2d      	ldr	r3, [pc, #180]	; (8007f4c <prvAddNewTaskToReadyList+0xc4>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	4a2c      	ldr	r2, [pc, #176]	; (8007f4c <prvAddNewTaskToReadyList+0xc4>)
 8007e9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e9e:	4b2c      	ldr	r3, [pc, #176]	; (8007f50 <prvAddNewTaskToReadyList+0xc8>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d109      	bne.n	8007eba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ea6:	4a2a      	ldr	r2, [pc, #168]	; (8007f50 <prvAddNewTaskToReadyList+0xc8>)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007eac:	4b27      	ldr	r3, [pc, #156]	; (8007f4c <prvAddNewTaskToReadyList+0xc4>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d110      	bne.n	8007ed6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007eb4:	f000 fc26 	bl	8008704 <prvInitialiseTaskLists>
 8007eb8:	e00d      	b.n	8007ed6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007eba:	4b26      	ldr	r3, [pc, #152]	; (8007f54 <prvAddNewTaskToReadyList+0xcc>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d109      	bne.n	8007ed6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ec2:	4b23      	ldr	r3, [pc, #140]	; (8007f50 <prvAddNewTaskToReadyList+0xc8>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d802      	bhi.n	8007ed6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ed0:	4a1f      	ldr	r2, [pc, #124]	; (8007f50 <prvAddNewTaskToReadyList+0xc8>)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ed6:	4b20      	ldr	r3, [pc, #128]	; (8007f58 <prvAddNewTaskToReadyList+0xd0>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3301      	adds	r3, #1
 8007edc:	4a1e      	ldr	r2, [pc, #120]	; (8007f58 <prvAddNewTaskToReadyList+0xd0>)
 8007ede:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ee0:	4b1d      	ldr	r3, [pc, #116]	; (8007f58 <prvAddNewTaskToReadyList+0xd0>)
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eec:	4b1b      	ldr	r3, [pc, #108]	; (8007f5c <prvAddNewTaskToReadyList+0xd4>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d903      	bls.n	8007efc <prvAddNewTaskToReadyList+0x74>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef8:	4a18      	ldr	r2, [pc, #96]	; (8007f5c <prvAddNewTaskToReadyList+0xd4>)
 8007efa:	6013      	str	r3, [r2, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f00:	4613      	mov	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4a15      	ldr	r2, [pc, #84]	; (8007f60 <prvAddNewTaskToReadyList+0xd8>)
 8007f0a:	441a      	add	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	3304      	adds	r3, #4
 8007f10:	4619      	mov	r1, r3
 8007f12:	4610      	mov	r0, r2
 8007f14:	f7ff f8fd 	bl	8007112 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f18:	f001 fa44 	bl	80093a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f1c:	4b0d      	ldr	r3, [pc, #52]	; (8007f54 <prvAddNewTaskToReadyList+0xcc>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00e      	beq.n	8007f42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f24:	4b0a      	ldr	r3, [pc, #40]	; (8007f50 <prvAddNewTaskToReadyList+0xc8>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d207      	bcs.n	8007f42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f32:	4b0c      	ldr	r3, [pc, #48]	; (8007f64 <prvAddNewTaskToReadyList+0xdc>)
 8007f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f38:	601a      	str	r2, [r3, #0]
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f42:	bf00      	nop
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	200013c8 	.word	0x200013c8
 8007f50:	20000ef4 	.word	0x20000ef4
 8007f54:	200013d4 	.word	0x200013d4
 8007f58:	200013e4 	.word	0x200013e4
 8007f5c:	200013d0 	.word	0x200013d0
 8007f60:	20000ef8 	.word	0x20000ef8
 8007f64:	e000ed04 	.word	0xe000ed04

08007f68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f70:	2300      	movs	r3, #0
 8007f72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d017      	beq.n	8007faa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f7a:	4b13      	ldr	r3, [pc, #76]	; (8007fc8 <vTaskDelay+0x60>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00a      	beq.n	8007f98 <vTaskDelay+0x30>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	60bb      	str	r3, [r7, #8]
}
 8007f94:	bf00      	nop
 8007f96:	e7fe      	b.n	8007f96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007f98:	f000 f88a 	bl	80080b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fcfe 	bl	80089a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007fa4:	f000 f892 	bl	80080cc <xTaskResumeAll>
 8007fa8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d107      	bne.n	8007fc0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007fb0:	4b06      	ldr	r3, [pc, #24]	; (8007fcc <vTaskDelay+0x64>)
 8007fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fb6:	601a      	str	r2, [r3, #0]
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fc0:	bf00      	nop
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	200013f0 	.word	0x200013f0
 8007fcc:	e000ed04 	.word	0xe000ed04

08007fd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b08a      	sub	sp, #40	; 0x28
 8007fd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007fde:	463a      	mov	r2, r7
 8007fe0:	1d39      	adds	r1, r7, #4
 8007fe2:	f107 0308 	add.w	r3, r7, #8
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7ff f832 	bl	8007050 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	9202      	str	r2, [sp, #8]
 8007ff4:	9301      	str	r3, [sp, #4]
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	460a      	mov	r2, r1
 8007ffe:	4924      	ldr	r1, [pc, #144]	; (8008090 <vTaskStartScheduler+0xc0>)
 8008000:	4824      	ldr	r0, [pc, #144]	; (8008094 <vTaskStartScheduler+0xc4>)
 8008002:	f7ff fdf9 	bl	8007bf8 <xTaskCreateStatic>
 8008006:	4603      	mov	r3, r0
 8008008:	4a23      	ldr	r2, [pc, #140]	; (8008098 <vTaskStartScheduler+0xc8>)
 800800a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800800c:	4b22      	ldr	r3, [pc, #136]	; (8008098 <vTaskStartScheduler+0xc8>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d002      	beq.n	800801a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008014:	2301      	movs	r3, #1
 8008016:	617b      	str	r3, [r7, #20]
 8008018:	e001      	b.n	800801e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800801a:	2300      	movs	r3, #0
 800801c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d102      	bne.n	800802a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008024:	f000 fd10 	bl	8008a48 <xTimerCreateTimerTask>
 8008028:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d11b      	bne.n	8008068 <vTaskStartScheduler+0x98>
	__asm volatile
 8008030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	613b      	str	r3, [r7, #16]
}
 8008042:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008044:	4b15      	ldr	r3, [pc, #84]	; (800809c <vTaskStartScheduler+0xcc>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3354      	adds	r3, #84	; 0x54
 800804a:	4a15      	ldr	r2, [pc, #84]	; (80080a0 <vTaskStartScheduler+0xd0>)
 800804c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800804e:	4b15      	ldr	r3, [pc, #84]	; (80080a4 <vTaskStartScheduler+0xd4>)
 8008050:	f04f 32ff 	mov.w	r2, #4294967295
 8008054:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008056:	4b14      	ldr	r3, [pc, #80]	; (80080a8 <vTaskStartScheduler+0xd8>)
 8008058:	2201      	movs	r2, #1
 800805a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800805c:	4b13      	ldr	r3, [pc, #76]	; (80080ac <vTaskStartScheduler+0xdc>)
 800805e:	2200      	movs	r2, #0
 8008060:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008062:	f001 f8cd 	bl	8009200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008066:	e00e      	b.n	8008086 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800806e:	d10a      	bne.n	8008086 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	60fb      	str	r3, [r7, #12]
}
 8008082:	bf00      	nop
 8008084:	e7fe      	b.n	8008084 <vTaskStartScheduler+0xb4>
}
 8008086:	bf00      	nop
 8008088:	3718      	adds	r7, #24
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	08009dec 	.word	0x08009dec
 8008094:	080086d5 	.word	0x080086d5
 8008098:	200013ec 	.word	0x200013ec
 800809c:	20000ef4 	.word	0x20000ef4
 80080a0:	2000001c 	.word	0x2000001c
 80080a4:	200013e8 	.word	0x200013e8
 80080a8:	200013d4 	.word	0x200013d4
 80080ac:	200013cc 	.word	0x200013cc

080080b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80080b0:	b480      	push	{r7}
 80080b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80080b4:	4b04      	ldr	r3, [pc, #16]	; (80080c8 <vTaskSuspendAll+0x18>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	3301      	adds	r3, #1
 80080ba:	4a03      	ldr	r2, [pc, #12]	; (80080c8 <vTaskSuspendAll+0x18>)
 80080bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80080be:	bf00      	nop
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	200013f0 	.word	0x200013f0

080080cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80080d2:	2300      	movs	r3, #0
 80080d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80080d6:	2300      	movs	r3, #0
 80080d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080da:	4b42      	ldr	r3, [pc, #264]	; (80081e4 <xTaskResumeAll+0x118>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10a      	bne.n	80080f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80080e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	603b      	str	r3, [r7, #0]
}
 80080f4:	bf00      	nop
 80080f6:	e7fe      	b.n	80080f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80080f8:	f001 f924 	bl	8009344 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80080fc:	4b39      	ldr	r3, [pc, #228]	; (80081e4 <xTaskResumeAll+0x118>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	3b01      	subs	r3, #1
 8008102:	4a38      	ldr	r2, [pc, #224]	; (80081e4 <xTaskResumeAll+0x118>)
 8008104:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008106:	4b37      	ldr	r3, [pc, #220]	; (80081e4 <xTaskResumeAll+0x118>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d162      	bne.n	80081d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800810e:	4b36      	ldr	r3, [pc, #216]	; (80081e8 <xTaskResumeAll+0x11c>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d05e      	beq.n	80081d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008116:	e02f      	b.n	8008178 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008118:	4b34      	ldr	r3, [pc, #208]	; (80081ec <xTaskResumeAll+0x120>)
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	3318      	adds	r3, #24
 8008124:	4618      	mov	r0, r3
 8008126:	f7ff f851 	bl	80071cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3304      	adds	r3, #4
 800812e:	4618      	mov	r0, r3
 8008130:	f7ff f84c 	bl	80071cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008138:	4b2d      	ldr	r3, [pc, #180]	; (80081f0 <xTaskResumeAll+0x124>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	429a      	cmp	r2, r3
 800813e:	d903      	bls.n	8008148 <xTaskResumeAll+0x7c>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008144:	4a2a      	ldr	r2, [pc, #168]	; (80081f0 <xTaskResumeAll+0x124>)
 8008146:	6013      	str	r3, [r2, #0]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800814c:	4613      	mov	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4a27      	ldr	r2, [pc, #156]	; (80081f4 <xTaskResumeAll+0x128>)
 8008156:	441a      	add	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	3304      	adds	r3, #4
 800815c:	4619      	mov	r1, r3
 800815e:	4610      	mov	r0, r2
 8008160:	f7fe ffd7 	bl	8007112 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008168:	4b23      	ldr	r3, [pc, #140]	; (80081f8 <xTaskResumeAll+0x12c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816e:	429a      	cmp	r2, r3
 8008170:	d302      	bcc.n	8008178 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008172:	4b22      	ldr	r3, [pc, #136]	; (80081fc <xTaskResumeAll+0x130>)
 8008174:	2201      	movs	r2, #1
 8008176:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008178:	4b1c      	ldr	r3, [pc, #112]	; (80081ec <xTaskResumeAll+0x120>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1cb      	bne.n	8008118 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008186:	f000 fb5f 	bl	8008848 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800818a:	4b1d      	ldr	r3, [pc, #116]	; (8008200 <xTaskResumeAll+0x134>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d010      	beq.n	80081b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008196:	f000 f847 	bl	8008228 <xTaskIncrementTick>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d002      	beq.n	80081a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80081a0:	4b16      	ldr	r3, [pc, #88]	; (80081fc <xTaskResumeAll+0x130>)
 80081a2:	2201      	movs	r2, #1
 80081a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	3b01      	subs	r3, #1
 80081aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1f1      	bne.n	8008196 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80081b2:	4b13      	ldr	r3, [pc, #76]	; (8008200 <xTaskResumeAll+0x134>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80081b8:	4b10      	ldr	r3, [pc, #64]	; (80081fc <xTaskResumeAll+0x130>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d009      	beq.n	80081d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081c0:	2301      	movs	r3, #1
 80081c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80081c4:	4b0f      	ldr	r3, [pc, #60]	; (8008204 <xTaskResumeAll+0x138>)
 80081c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ca:	601a      	str	r2, [r3, #0]
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081d4:	f001 f8e6 	bl	80093a4 <vPortExitCritical>

	return xAlreadyYielded;
 80081d8:	68bb      	ldr	r3, [r7, #8]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	200013f0 	.word	0x200013f0
 80081e8:	200013c8 	.word	0x200013c8
 80081ec:	20001388 	.word	0x20001388
 80081f0:	200013d0 	.word	0x200013d0
 80081f4:	20000ef8 	.word	0x20000ef8
 80081f8:	20000ef4 	.word	0x20000ef4
 80081fc:	200013dc 	.word	0x200013dc
 8008200:	200013d8 	.word	0x200013d8
 8008204:	e000ed04 	.word	0xe000ed04

08008208 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800820e:	4b05      	ldr	r3, [pc, #20]	; (8008224 <xTaskGetTickCount+0x1c>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008214:	687b      	ldr	r3, [r7, #4]
}
 8008216:	4618      	mov	r0, r3
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	200013cc 	.word	0x200013cc

08008228 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800822e:	2300      	movs	r3, #0
 8008230:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008232:	4b4f      	ldr	r3, [pc, #316]	; (8008370 <xTaskIncrementTick+0x148>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	f040 808f 	bne.w	800835a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800823c:	4b4d      	ldr	r3, [pc, #308]	; (8008374 <xTaskIncrementTick+0x14c>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	3301      	adds	r3, #1
 8008242:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008244:	4a4b      	ldr	r2, [pc, #300]	; (8008374 <xTaskIncrementTick+0x14c>)
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d120      	bne.n	8008292 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008250:	4b49      	ldr	r3, [pc, #292]	; (8008378 <xTaskIncrementTick+0x150>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00a      	beq.n	8008270 <xTaskIncrementTick+0x48>
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	603b      	str	r3, [r7, #0]
}
 800826c:	bf00      	nop
 800826e:	e7fe      	b.n	800826e <xTaskIncrementTick+0x46>
 8008270:	4b41      	ldr	r3, [pc, #260]	; (8008378 <xTaskIncrementTick+0x150>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	60fb      	str	r3, [r7, #12]
 8008276:	4b41      	ldr	r3, [pc, #260]	; (800837c <xTaskIncrementTick+0x154>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a3f      	ldr	r2, [pc, #252]	; (8008378 <xTaskIncrementTick+0x150>)
 800827c:	6013      	str	r3, [r2, #0]
 800827e:	4a3f      	ldr	r2, [pc, #252]	; (800837c <xTaskIncrementTick+0x154>)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	4b3e      	ldr	r3, [pc, #248]	; (8008380 <xTaskIncrementTick+0x158>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	3301      	adds	r3, #1
 800828a:	4a3d      	ldr	r2, [pc, #244]	; (8008380 <xTaskIncrementTick+0x158>)
 800828c:	6013      	str	r3, [r2, #0]
 800828e:	f000 fadb 	bl	8008848 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008292:	4b3c      	ldr	r3, [pc, #240]	; (8008384 <xTaskIncrementTick+0x15c>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	693a      	ldr	r2, [r7, #16]
 8008298:	429a      	cmp	r2, r3
 800829a:	d349      	bcc.n	8008330 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800829c:	4b36      	ldr	r3, [pc, #216]	; (8008378 <xTaskIncrementTick+0x150>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d104      	bne.n	80082b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082a6:	4b37      	ldr	r3, [pc, #220]	; (8008384 <xTaskIncrementTick+0x15c>)
 80082a8:	f04f 32ff 	mov.w	r2, #4294967295
 80082ac:	601a      	str	r2, [r3, #0]
					break;
 80082ae:	e03f      	b.n	8008330 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082b0:	4b31      	ldr	r3, [pc, #196]	; (8008378 <xTaskIncrementTick+0x150>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d203      	bcs.n	80082d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80082c8:	4a2e      	ldr	r2, [pc, #184]	; (8008384 <xTaskIncrementTick+0x15c>)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80082ce:	e02f      	b.n	8008330 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	3304      	adds	r3, #4
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fe ff79 	bl	80071cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d004      	beq.n	80082ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	3318      	adds	r3, #24
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fe ff70 	bl	80071cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f0:	4b25      	ldr	r3, [pc, #148]	; (8008388 <xTaskIncrementTick+0x160>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d903      	bls.n	8008300 <xTaskIncrementTick+0xd8>
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fc:	4a22      	ldr	r2, [pc, #136]	; (8008388 <xTaskIncrementTick+0x160>)
 80082fe:	6013      	str	r3, [r2, #0]
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008304:	4613      	mov	r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4413      	add	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4a1f      	ldr	r2, [pc, #124]	; (800838c <xTaskIncrementTick+0x164>)
 800830e:	441a      	add	r2, r3
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	3304      	adds	r3, #4
 8008314:	4619      	mov	r1, r3
 8008316:	4610      	mov	r0, r2
 8008318:	f7fe fefb 	bl	8007112 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008320:	4b1b      	ldr	r3, [pc, #108]	; (8008390 <xTaskIncrementTick+0x168>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008326:	429a      	cmp	r2, r3
 8008328:	d3b8      	bcc.n	800829c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800832a:	2301      	movs	r3, #1
 800832c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800832e:	e7b5      	b.n	800829c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008330:	4b17      	ldr	r3, [pc, #92]	; (8008390 <xTaskIncrementTick+0x168>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008336:	4915      	ldr	r1, [pc, #84]	; (800838c <xTaskIncrementTick+0x164>)
 8008338:	4613      	mov	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4413      	add	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	440b      	add	r3, r1
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d901      	bls.n	800834c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008348:	2301      	movs	r3, #1
 800834a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800834c:	4b11      	ldr	r3, [pc, #68]	; (8008394 <xTaskIncrementTick+0x16c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d007      	beq.n	8008364 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008354:	2301      	movs	r3, #1
 8008356:	617b      	str	r3, [r7, #20]
 8008358:	e004      	b.n	8008364 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800835a:	4b0f      	ldr	r3, [pc, #60]	; (8008398 <xTaskIncrementTick+0x170>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3301      	adds	r3, #1
 8008360:	4a0d      	ldr	r2, [pc, #52]	; (8008398 <xTaskIncrementTick+0x170>)
 8008362:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008364:	697b      	ldr	r3, [r7, #20]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3718      	adds	r7, #24
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	200013f0 	.word	0x200013f0
 8008374:	200013cc 	.word	0x200013cc
 8008378:	20001380 	.word	0x20001380
 800837c:	20001384 	.word	0x20001384
 8008380:	200013e0 	.word	0x200013e0
 8008384:	200013e8 	.word	0x200013e8
 8008388:	200013d0 	.word	0x200013d0
 800838c:	20000ef8 	.word	0x20000ef8
 8008390:	20000ef4 	.word	0x20000ef4
 8008394:	200013dc 	.word	0x200013dc
 8008398:	200013d8 	.word	0x200013d8

0800839c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083a2:	4b2a      	ldr	r3, [pc, #168]	; (800844c <vTaskSwitchContext+0xb0>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80083aa:	4b29      	ldr	r3, [pc, #164]	; (8008450 <vTaskSwitchContext+0xb4>)
 80083ac:	2201      	movs	r2, #1
 80083ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80083b0:	e046      	b.n	8008440 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80083b2:	4b27      	ldr	r3, [pc, #156]	; (8008450 <vTaskSwitchContext+0xb4>)
 80083b4:	2200      	movs	r2, #0
 80083b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083b8:	4b26      	ldr	r3, [pc, #152]	; (8008454 <vTaskSwitchContext+0xb8>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	60fb      	str	r3, [r7, #12]
 80083be:	e010      	b.n	80083e2 <vTaskSwitchContext+0x46>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10a      	bne.n	80083dc <vTaskSwitchContext+0x40>
	__asm volatile
 80083c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ca:	f383 8811 	msr	BASEPRI, r3
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	607b      	str	r3, [r7, #4]
}
 80083d8:	bf00      	nop
 80083da:	e7fe      	b.n	80083da <vTaskSwitchContext+0x3e>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	3b01      	subs	r3, #1
 80083e0:	60fb      	str	r3, [r7, #12]
 80083e2:	491d      	ldr	r1, [pc, #116]	; (8008458 <vTaskSwitchContext+0xbc>)
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	4613      	mov	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	440b      	add	r3, r1
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d0e4      	beq.n	80083c0 <vTaskSwitchContext+0x24>
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	4613      	mov	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4a15      	ldr	r2, [pc, #84]	; (8008458 <vTaskSwitchContext+0xbc>)
 8008402:	4413      	add	r3, r2
 8008404:	60bb      	str	r3, [r7, #8]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	605a      	str	r2, [r3, #4]
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	685a      	ldr	r2, [r3, #4]
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	3308      	adds	r3, #8
 8008418:	429a      	cmp	r2, r3
 800841a:	d104      	bne.n	8008426 <vTaskSwitchContext+0x8a>
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	685a      	ldr	r2, [r3, #4]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	605a      	str	r2, [r3, #4]
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	4a0b      	ldr	r2, [pc, #44]	; (800845c <vTaskSwitchContext+0xc0>)
 800842e:	6013      	str	r3, [r2, #0]
 8008430:	4a08      	ldr	r2, [pc, #32]	; (8008454 <vTaskSwitchContext+0xb8>)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008436:	4b09      	ldr	r3, [pc, #36]	; (800845c <vTaskSwitchContext+0xc0>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	3354      	adds	r3, #84	; 0x54
 800843c:	4a08      	ldr	r2, [pc, #32]	; (8008460 <vTaskSwitchContext+0xc4>)
 800843e:	6013      	str	r3, [r2, #0]
}
 8008440:	bf00      	nop
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	200013f0 	.word	0x200013f0
 8008450:	200013dc 	.word	0x200013dc
 8008454:	200013d0 	.word	0x200013d0
 8008458:	20000ef8 	.word	0x20000ef8
 800845c:	20000ef4 	.word	0x20000ef4
 8008460:	2000001c 	.word	0x2000001c

08008464 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10a      	bne.n	800848a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	60fb      	str	r3, [r7, #12]
}
 8008486:	bf00      	nop
 8008488:	e7fe      	b.n	8008488 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800848a:	4b07      	ldr	r3, [pc, #28]	; (80084a8 <vTaskPlaceOnEventList+0x44>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3318      	adds	r3, #24
 8008490:	4619      	mov	r1, r3
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7fe fe61 	bl	800715a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008498:	2101      	movs	r1, #1
 800849a:	6838      	ldr	r0, [r7, #0]
 800849c:	f000 fa80 	bl	80089a0 <prvAddCurrentTaskToDelayedList>
}
 80084a0:	bf00      	nop
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	20000ef4 	.word	0x20000ef4

080084ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10a      	bne.n	80084d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80084be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	617b      	str	r3, [r7, #20]
}
 80084d0:	bf00      	nop
 80084d2:	e7fe      	b.n	80084d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084d4:	4b0a      	ldr	r3, [pc, #40]	; (8008500 <vTaskPlaceOnEventListRestricted+0x54>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3318      	adds	r3, #24
 80084da:	4619      	mov	r1, r3
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f7fe fe18 	bl	8007112 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d002      	beq.n	80084ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80084e8:	f04f 33ff 	mov.w	r3, #4294967295
 80084ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80084ee:	6879      	ldr	r1, [r7, #4]
 80084f0:	68b8      	ldr	r0, [r7, #8]
 80084f2:	f000 fa55 	bl	80089a0 <prvAddCurrentTaskToDelayedList>
	}
 80084f6:	bf00      	nop
 80084f8:	3718      	adds	r7, #24
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	20000ef4 	.word	0x20000ef4

08008504 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10a      	bne.n	8008530 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800851a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851e:	f383 8811 	msr	BASEPRI, r3
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	f3bf 8f4f 	dsb	sy
 800852a:	60fb      	str	r3, [r7, #12]
}
 800852c:	bf00      	nop
 800852e:	e7fe      	b.n	800852e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	3318      	adds	r3, #24
 8008534:	4618      	mov	r0, r3
 8008536:	f7fe fe49 	bl	80071cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800853a:	4b1e      	ldr	r3, [pc, #120]	; (80085b4 <xTaskRemoveFromEventList+0xb0>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d11d      	bne.n	800857e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	3304      	adds	r3, #4
 8008546:	4618      	mov	r0, r3
 8008548:	f7fe fe40 	bl	80071cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008550:	4b19      	ldr	r3, [pc, #100]	; (80085b8 <xTaskRemoveFromEventList+0xb4>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	429a      	cmp	r2, r3
 8008556:	d903      	bls.n	8008560 <xTaskRemoveFromEventList+0x5c>
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855c:	4a16      	ldr	r2, [pc, #88]	; (80085b8 <xTaskRemoveFromEventList+0xb4>)
 800855e:	6013      	str	r3, [r2, #0]
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008564:	4613      	mov	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4a13      	ldr	r2, [pc, #76]	; (80085bc <xTaskRemoveFromEventList+0xb8>)
 800856e:	441a      	add	r2, r3
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	3304      	adds	r3, #4
 8008574:	4619      	mov	r1, r3
 8008576:	4610      	mov	r0, r2
 8008578:	f7fe fdcb 	bl	8007112 <vListInsertEnd>
 800857c:	e005      	b.n	800858a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	3318      	adds	r3, #24
 8008582:	4619      	mov	r1, r3
 8008584:	480e      	ldr	r0, [pc, #56]	; (80085c0 <xTaskRemoveFromEventList+0xbc>)
 8008586:	f7fe fdc4 	bl	8007112 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858e:	4b0d      	ldr	r3, [pc, #52]	; (80085c4 <xTaskRemoveFromEventList+0xc0>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008594:	429a      	cmp	r2, r3
 8008596:	d905      	bls.n	80085a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008598:	2301      	movs	r3, #1
 800859a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800859c:	4b0a      	ldr	r3, [pc, #40]	; (80085c8 <xTaskRemoveFromEventList+0xc4>)
 800859e:	2201      	movs	r2, #1
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	e001      	b.n	80085a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80085a4:	2300      	movs	r3, #0
 80085a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80085a8:	697b      	ldr	r3, [r7, #20]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3718      	adds	r7, #24
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	200013f0 	.word	0x200013f0
 80085b8:	200013d0 	.word	0x200013d0
 80085bc:	20000ef8 	.word	0x20000ef8
 80085c0:	20001388 	.word	0x20001388
 80085c4:	20000ef4 	.word	0x20000ef4
 80085c8:	200013dc 	.word	0x200013dc

080085cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80085d4:	4b06      	ldr	r3, [pc, #24]	; (80085f0 <vTaskInternalSetTimeOutState+0x24>)
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80085dc:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <vTaskInternalSetTimeOutState+0x28>)
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	605a      	str	r2, [r3, #4]
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	200013e0 	.word	0x200013e0
 80085f4:	200013cc 	.word	0x200013cc

080085f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b088      	sub	sp, #32
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d10a      	bne.n	800861e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	613b      	str	r3, [r7, #16]
}
 800861a:	bf00      	nop
 800861c:	e7fe      	b.n	800861c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10a      	bne.n	800863a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	60fb      	str	r3, [r7, #12]
}
 8008636:	bf00      	nop
 8008638:	e7fe      	b.n	8008638 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800863a:	f000 fe83 	bl	8009344 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800863e:	4b1d      	ldr	r3, [pc, #116]	; (80086b4 <xTaskCheckForTimeOut+0xbc>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	69ba      	ldr	r2, [r7, #24]
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008656:	d102      	bne.n	800865e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008658:	2300      	movs	r3, #0
 800865a:	61fb      	str	r3, [r7, #28]
 800865c:	e023      	b.n	80086a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	4b15      	ldr	r3, [pc, #84]	; (80086b8 <xTaskCheckForTimeOut+0xc0>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	429a      	cmp	r2, r3
 8008668:	d007      	beq.n	800867a <xTaskCheckForTimeOut+0x82>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	69ba      	ldr	r2, [r7, #24]
 8008670:	429a      	cmp	r2, r3
 8008672:	d302      	bcc.n	800867a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008674:	2301      	movs	r3, #1
 8008676:	61fb      	str	r3, [r7, #28]
 8008678:	e015      	b.n	80086a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	429a      	cmp	r2, r3
 8008682:	d20b      	bcs.n	800869c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	1ad2      	subs	r2, r2, r3
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f7ff ff9b 	bl	80085cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008696:	2300      	movs	r3, #0
 8008698:	61fb      	str	r3, [r7, #28]
 800869a:	e004      	b.n	80086a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	2200      	movs	r2, #0
 80086a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80086a2:	2301      	movs	r3, #1
 80086a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80086a6:	f000 fe7d 	bl	80093a4 <vPortExitCritical>

	return xReturn;
 80086aa:	69fb      	ldr	r3, [r7, #28]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3720      	adds	r7, #32
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	200013cc 	.word	0x200013cc
 80086b8:	200013e0 	.word	0x200013e0

080086bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80086bc:	b480      	push	{r7}
 80086be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80086c0:	4b03      	ldr	r3, [pc, #12]	; (80086d0 <vTaskMissedYield+0x14>)
 80086c2:	2201      	movs	r2, #1
 80086c4:	601a      	str	r2, [r3, #0]
}
 80086c6:	bf00      	nop
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	200013dc 	.word	0x200013dc

080086d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80086dc:	f000 f852 	bl	8008784 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086e0:	4b06      	ldr	r3, [pc, #24]	; (80086fc <prvIdleTask+0x28>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d9f9      	bls.n	80086dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80086e8:	4b05      	ldr	r3, [pc, #20]	; (8008700 <prvIdleTask+0x2c>)
 80086ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ee:	601a      	str	r2, [r3, #0]
 80086f0:	f3bf 8f4f 	dsb	sy
 80086f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80086f8:	e7f0      	b.n	80086dc <prvIdleTask+0x8>
 80086fa:	bf00      	nop
 80086fc:	20000ef8 	.word	0x20000ef8
 8008700:	e000ed04 	.word	0xe000ed04

08008704 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800870a:	2300      	movs	r3, #0
 800870c:	607b      	str	r3, [r7, #4]
 800870e:	e00c      	b.n	800872a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	4613      	mov	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4a12      	ldr	r2, [pc, #72]	; (8008764 <prvInitialiseTaskLists+0x60>)
 800871c:	4413      	add	r3, r2
 800871e:	4618      	mov	r0, r3
 8008720:	f7fe fcca 	bl	80070b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	3301      	adds	r3, #1
 8008728:	607b      	str	r3, [r7, #4]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2b37      	cmp	r3, #55	; 0x37
 800872e:	d9ef      	bls.n	8008710 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008730:	480d      	ldr	r0, [pc, #52]	; (8008768 <prvInitialiseTaskLists+0x64>)
 8008732:	f7fe fcc1 	bl	80070b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008736:	480d      	ldr	r0, [pc, #52]	; (800876c <prvInitialiseTaskLists+0x68>)
 8008738:	f7fe fcbe 	bl	80070b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800873c:	480c      	ldr	r0, [pc, #48]	; (8008770 <prvInitialiseTaskLists+0x6c>)
 800873e:	f7fe fcbb 	bl	80070b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008742:	480c      	ldr	r0, [pc, #48]	; (8008774 <prvInitialiseTaskLists+0x70>)
 8008744:	f7fe fcb8 	bl	80070b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008748:	480b      	ldr	r0, [pc, #44]	; (8008778 <prvInitialiseTaskLists+0x74>)
 800874a:	f7fe fcb5 	bl	80070b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800874e:	4b0b      	ldr	r3, [pc, #44]	; (800877c <prvInitialiseTaskLists+0x78>)
 8008750:	4a05      	ldr	r2, [pc, #20]	; (8008768 <prvInitialiseTaskLists+0x64>)
 8008752:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008754:	4b0a      	ldr	r3, [pc, #40]	; (8008780 <prvInitialiseTaskLists+0x7c>)
 8008756:	4a05      	ldr	r2, [pc, #20]	; (800876c <prvInitialiseTaskLists+0x68>)
 8008758:	601a      	str	r2, [r3, #0]
}
 800875a:	bf00      	nop
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	20000ef8 	.word	0x20000ef8
 8008768:	20001358 	.word	0x20001358
 800876c:	2000136c 	.word	0x2000136c
 8008770:	20001388 	.word	0x20001388
 8008774:	2000139c 	.word	0x2000139c
 8008778:	200013b4 	.word	0x200013b4
 800877c:	20001380 	.word	0x20001380
 8008780:	20001384 	.word	0x20001384

08008784 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800878a:	e019      	b.n	80087c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800878c:	f000 fdda 	bl	8009344 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008790:	4b10      	ldr	r3, [pc, #64]	; (80087d4 <prvCheckTasksWaitingTermination+0x50>)
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	3304      	adds	r3, #4
 800879c:	4618      	mov	r0, r3
 800879e:	f7fe fd15 	bl	80071cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80087a2:	4b0d      	ldr	r3, [pc, #52]	; (80087d8 <prvCheckTasksWaitingTermination+0x54>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	3b01      	subs	r3, #1
 80087a8:	4a0b      	ldr	r2, [pc, #44]	; (80087d8 <prvCheckTasksWaitingTermination+0x54>)
 80087aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80087ac:	4b0b      	ldr	r3, [pc, #44]	; (80087dc <prvCheckTasksWaitingTermination+0x58>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3b01      	subs	r3, #1
 80087b2:	4a0a      	ldr	r2, [pc, #40]	; (80087dc <prvCheckTasksWaitingTermination+0x58>)
 80087b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80087b6:	f000 fdf5 	bl	80093a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f810 	bl	80087e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087c0:	4b06      	ldr	r3, [pc, #24]	; (80087dc <prvCheckTasksWaitingTermination+0x58>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1e1      	bne.n	800878c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80087c8:	bf00      	nop
 80087ca:	bf00      	nop
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	2000139c 	.word	0x2000139c
 80087d8:	200013c8 	.word	0x200013c8
 80087dc:	200013b0 	.word	0x200013b0

080087e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	3354      	adds	r3, #84	; 0x54
 80087ec:	4618      	mov	r0, r3
 80087ee:	f001 fa07 	bl	8009c00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d108      	bne.n	800880e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008800:	4618      	mov	r0, r3
 8008802:	f000 ff8d 	bl	8009720 <vPortFree>
				vPortFree( pxTCB );
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 ff8a 	bl	8009720 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800880c:	e018      	b.n	8008840 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008814:	2b01      	cmp	r3, #1
 8008816:	d103      	bne.n	8008820 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 ff81 	bl	8009720 <vPortFree>
	}
 800881e:	e00f      	b.n	8008840 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008826:	2b02      	cmp	r3, #2
 8008828:	d00a      	beq.n	8008840 <prvDeleteTCB+0x60>
	__asm volatile
 800882a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882e:	f383 8811 	msr	BASEPRI, r3
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	60fb      	str	r3, [r7, #12]
}
 800883c:	bf00      	nop
 800883e:	e7fe      	b.n	800883e <prvDeleteTCB+0x5e>
	}
 8008840:	bf00      	nop
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800884e:	4b0c      	ldr	r3, [pc, #48]	; (8008880 <prvResetNextTaskUnblockTime+0x38>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d104      	bne.n	8008862 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008858:	4b0a      	ldr	r3, [pc, #40]	; (8008884 <prvResetNextTaskUnblockTime+0x3c>)
 800885a:	f04f 32ff 	mov.w	r2, #4294967295
 800885e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008860:	e008      	b.n	8008874 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008862:	4b07      	ldr	r3, [pc, #28]	; (8008880 <prvResetNextTaskUnblockTime+0x38>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	4a04      	ldr	r2, [pc, #16]	; (8008884 <prvResetNextTaskUnblockTime+0x3c>)
 8008872:	6013      	str	r3, [r2, #0]
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	20001380 	.word	0x20001380
 8008884:	200013e8 	.word	0x200013e8

08008888 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800888e:	4b0b      	ldr	r3, [pc, #44]	; (80088bc <xTaskGetSchedulerState+0x34>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d102      	bne.n	800889c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008896:	2301      	movs	r3, #1
 8008898:	607b      	str	r3, [r7, #4]
 800889a:	e008      	b.n	80088ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800889c:	4b08      	ldr	r3, [pc, #32]	; (80088c0 <xTaskGetSchedulerState+0x38>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d102      	bne.n	80088aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80088a4:	2302      	movs	r3, #2
 80088a6:	607b      	str	r3, [r7, #4]
 80088a8:	e001      	b.n	80088ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80088aa:	2300      	movs	r3, #0
 80088ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80088ae:	687b      	ldr	r3, [r7, #4]
	}
 80088b0:	4618      	mov	r0, r3
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr
 80088bc:	200013d4 	.word	0x200013d4
 80088c0:	200013f0 	.word	0x200013f0

080088c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80088d0:	2300      	movs	r3, #0
 80088d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d056      	beq.n	8008988 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80088da:	4b2e      	ldr	r3, [pc, #184]	; (8008994 <xTaskPriorityDisinherit+0xd0>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d00a      	beq.n	80088fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80088e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e8:	f383 8811 	msr	BASEPRI, r3
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f3bf 8f4f 	dsb	sy
 80088f4:	60fb      	str	r3, [r7, #12]
}
 80088f6:	bf00      	nop
 80088f8:	e7fe      	b.n	80088f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10a      	bne.n	8008918 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	60bb      	str	r3, [r7, #8]
}
 8008914:	bf00      	nop
 8008916:	e7fe      	b.n	8008916 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800891c:	1e5a      	subs	r2, r3, #1
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800892a:	429a      	cmp	r2, r3
 800892c:	d02c      	beq.n	8008988 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008932:	2b00      	cmp	r3, #0
 8008934:	d128      	bne.n	8008988 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	3304      	adds	r3, #4
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe fc46 	bl	80071cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008958:	4b0f      	ldr	r3, [pc, #60]	; (8008998 <xTaskPriorityDisinherit+0xd4>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	429a      	cmp	r2, r3
 800895e:	d903      	bls.n	8008968 <xTaskPriorityDisinherit+0xa4>
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008964:	4a0c      	ldr	r2, [pc, #48]	; (8008998 <xTaskPriorityDisinherit+0xd4>)
 8008966:	6013      	str	r3, [r2, #0]
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800896c:	4613      	mov	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4413      	add	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	4a09      	ldr	r2, [pc, #36]	; (800899c <xTaskPriorityDisinherit+0xd8>)
 8008976:	441a      	add	r2, r3
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	3304      	adds	r3, #4
 800897c:	4619      	mov	r1, r3
 800897e:	4610      	mov	r0, r2
 8008980:	f7fe fbc7 	bl	8007112 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008984:	2301      	movs	r3, #1
 8008986:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008988:	697b      	ldr	r3, [r7, #20]
	}
 800898a:	4618      	mov	r0, r3
 800898c:	3718      	adds	r7, #24
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	20000ef4 	.word	0x20000ef4
 8008998:	200013d0 	.word	0x200013d0
 800899c:	20000ef8 	.word	0x20000ef8

080089a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80089aa:	4b21      	ldr	r3, [pc, #132]	; (8008a30 <prvAddCurrentTaskToDelayedList+0x90>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089b0:	4b20      	ldr	r3, [pc, #128]	; (8008a34 <prvAddCurrentTaskToDelayedList+0x94>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	3304      	adds	r3, #4
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fe fc08 	bl	80071cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c2:	d10a      	bne.n	80089da <prvAddCurrentTaskToDelayedList+0x3a>
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d007      	beq.n	80089da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089ca:	4b1a      	ldr	r3, [pc, #104]	; (8008a34 <prvAddCurrentTaskToDelayedList+0x94>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	3304      	adds	r3, #4
 80089d0:	4619      	mov	r1, r3
 80089d2:	4819      	ldr	r0, [pc, #100]	; (8008a38 <prvAddCurrentTaskToDelayedList+0x98>)
 80089d4:	f7fe fb9d 	bl	8007112 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80089d8:	e026      	b.n	8008a28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4413      	add	r3, r2
 80089e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089e2:	4b14      	ldr	r3, [pc, #80]	; (8008a34 <prvAddCurrentTaskToDelayedList+0x94>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d209      	bcs.n	8008a06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089f2:	4b12      	ldr	r3, [pc, #72]	; (8008a3c <prvAddCurrentTaskToDelayedList+0x9c>)
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	4b0f      	ldr	r3, [pc, #60]	; (8008a34 <prvAddCurrentTaskToDelayedList+0x94>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	3304      	adds	r3, #4
 80089fc:	4619      	mov	r1, r3
 80089fe:	4610      	mov	r0, r2
 8008a00:	f7fe fbab 	bl	800715a <vListInsert>
}
 8008a04:	e010      	b.n	8008a28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a06:	4b0e      	ldr	r3, [pc, #56]	; (8008a40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	4b0a      	ldr	r3, [pc, #40]	; (8008a34 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3304      	adds	r3, #4
 8008a10:	4619      	mov	r1, r3
 8008a12:	4610      	mov	r0, r2
 8008a14:	f7fe fba1 	bl	800715a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a18:	4b0a      	ldr	r3, [pc, #40]	; (8008a44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d202      	bcs.n	8008a28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008a22:	4a08      	ldr	r2, [pc, #32]	; (8008a44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	6013      	str	r3, [r2, #0]
}
 8008a28:	bf00      	nop
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	200013cc 	.word	0x200013cc
 8008a34:	20000ef4 	.word	0x20000ef4
 8008a38:	200013b4 	.word	0x200013b4
 8008a3c:	20001384 	.word	0x20001384
 8008a40:	20001380 	.word	0x20001380
 8008a44:	200013e8 	.word	0x200013e8

08008a48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b08a      	sub	sp, #40	; 0x28
 8008a4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008a52:	f000 fb07 	bl	8009064 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008a56:	4b1c      	ldr	r3, [pc, #112]	; (8008ac8 <xTimerCreateTimerTask+0x80>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d021      	beq.n	8008aa2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008a62:	2300      	movs	r3, #0
 8008a64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008a66:	1d3a      	adds	r2, r7, #4
 8008a68:	f107 0108 	add.w	r1, r7, #8
 8008a6c:	f107 030c 	add.w	r3, r7, #12
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7fe fb07 	bl	8007084 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008a76:	6879      	ldr	r1, [r7, #4]
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	9202      	str	r2, [sp, #8]
 8008a7e:	9301      	str	r3, [sp, #4]
 8008a80:	2302      	movs	r3, #2
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	2300      	movs	r3, #0
 8008a86:	460a      	mov	r2, r1
 8008a88:	4910      	ldr	r1, [pc, #64]	; (8008acc <xTimerCreateTimerTask+0x84>)
 8008a8a:	4811      	ldr	r0, [pc, #68]	; (8008ad0 <xTimerCreateTimerTask+0x88>)
 8008a8c:	f7ff f8b4 	bl	8007bf8 <xTaskCreateStatic>
 8008a90:	4603      	mov	r3, r0
 8008a92:	4a10      	ldr	r2, [pc, #64]	; (8008ad4 <xTimerCreateTimerTask+0x8c>)
 8008a94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008a96:	4b0f      	ldr	r3, [pc, #60]	; (8008ad4 <xTimerCreateTimerTask+0x8c>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d001      	beq.n	8008aa2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d10a      	bne.n	8008abe <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	613b      	str	r3, [r7, #16]
}
 8008aba:	bf00      	nop
 8008abc:	e7fe      	b.n	8008abc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008abe:	697b      	ldr	r3, [r7, #20]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3718      	adds	r7, #24
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	20001424 	.word	0x20001424
 8008acc:	08009df4 	.word	0x08009df4
 8008ad0:	08008c0d 	.word	0x08008c0d
 8008ad4:	20001428 	.word	0x20001428

08008ad8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b08a      	sub	sp, #40	; 0x28
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	607a      	str	r2, [r7, #4]
 8008ae4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d10a      	bne.n	8008b06 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	623b      	str	r3, [r7, #32]
}
 8008b02:	bf00      	nop
 8008b04:	e7fe      	b.n	8008b04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008b06:	4b1a      	ldr	r3, [pc, #104]	; (8008b70 <xTimerGenericCommand+0x98>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d02a      	beq.n	8008b64 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	2b05      	cmp	r3, #5
 8008b1e:	dc18      	bgt.n	8008b52 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008b20:	f7ff feb2 	bl	8008888 <xTaskGetSchedulerState>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d109      	bne.n	8008b3e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008b2a:	4b11      	ldr	r3, [pc, #68]	; (8008b70 <xTimerGenericCommand+0x98>)
 8008b2c:	6818      	ldr	r0, [r3, #0]
 8008b2e:	f107 0110 	add.w	r1, r7, #16
 8008b32:	2300      	movs	r3, #0
 8008b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b36:	f7fe fc77 	bl	8007428 <xQueueGenericSend>
 8008b3a:	6278      	str	r0, [r7, #36]	; 0x24
 8008b3c:	e012      	b.n	8008b64 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008b3e:	4b0c      	ldr	r3, [pc, #48]	; (8008b70 <xTimerGenericCommand+0x98>)
 8008b40:	6818      	ldr	r0, [r3, #0]
 8008b42:	f107 0110 	add.w	r1, r7, #16
 8008b46:	2300      	movs	r3, #0
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f7fe fc6d 	bl	8007428 <xQueueGenericSend>
 8008b4e:	6278      	str	r0, [r7, #36]	; 0x24
 8008b50:	e008      	b.n	8008b64 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008b52:	4b07      	ldr	r3, [pc, #28]	; (8008b70 <xTimerGenericCommand+0x98>)
 8008b54:	6818      	ldr	r0, [r3, #0]
 8008b56:	f107 0110 	add.w	r1, r7, #16
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	683a      	ldr	r2, [r7, #0]
 8008b5e:	f7fe fd61 	bl	8007624 <xQueueGenericSendFromISR>
 8008b62:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3728      	adds	r7, #40	; 0x28
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	20001424 	.word	0x20001424

08008b74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b088      	sub	sp, #32
 8008b78:	af02      	add	r7, sp, #8
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b7e:	4b22      	ldr	r3, [pc, #136]	; (8008c08 <prvProcessExpiredTimer+0x94>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	3304      	adds	r3, #4
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7fe fb1d 	bl	80071cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b98:	f003 0304 	and.w	r3, r3, #4
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d022      	beq.n	8008be6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	699a      	ldr	r2, [r3, #24]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	18d1      	adds	r1, r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	6978      	ldr	r0, [r7, #20]
 8008bae:	f000 f8d1 	bl	8008d54 <prvInsertTimerInActiveList>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d01f      	beq.n	8008bf8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008bb8:	2300      	movs	r3, #0
 8008bba:	9300      	str	r3, [sp, #0]
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	6978      	ldr	r0, [r7, #20]
 8008bc4:	f7ff ff88 	bl	8008ad8 <xTimerGenericCommand>
 8008bc8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d113      	bne.n	8008bf8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd4:	f383 8811 	msr	BASEPRI, r3
 8008bd8:	f3bf 8f6f 	isb	sy
 8008bdc:	f3bf 8f4f 	dsb	sy
 8008be0:	60fb      	str	r3, [r7, #12]
}
 8008be2:	bf00      	nop
 8008be4:	e7fe      	b.n	8008be4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bec:	f023 0301 	bic.w	r3, r3, #1
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	6a1b      	ldr	r3, [r3, #32]
 8008bfc:	6978      	ldr	r0, [r7, #20]
 8008bfe:	4798      	blx	r3
}
 8008c00:	bf00      	nop
 8008c02:	3718      	adds	r7, #24
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	2000141c 	.word	0x2000141c

08008c0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c14:	f107 0308 	add.w	r3, r7, #8
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 f857 	bl	8008ccc <prvGetNextExpireTime>
 8008c1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	4619      	mov	r1, r3
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f000 f803 	bl	8008c30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008c2a:	f000 f8d5 	bl	8008dd8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c2e:	e7f1      	b.n	8008c14 <prvTimerTask+0x8>

08008c30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008c3a:	f7ff fa39 	bl	80080b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c3e:	f107 0308 	add.w	r3, r7, #8
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 f866 	bl	8008d14 <prvSampleTimeNow>
 8008c48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d130      	bne.n	8008cb2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10a      	bne.n	8008c6c <prvProcessTimerOrBlockTask+0x3c>
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d806      	bhi.n	8008c6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008c5e:	f7ff fa35 	bl	80080cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008c62:	68f9      	ldr	r1, [r7, #12]
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f7ff ff85 	bl	8008b74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008c6a:	e024      	b.n	8008cb6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d008      	beq.n	8008c84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008c72:	4b13      	ldr	r3, [pc, #76]	; (8008cc0 <prvProcessTimerOrBlockTask+0x90>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d101      	bne.n	8008c80 <prvProcessTimerOrBlockTask+0x50>
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e000      	b.n	8008c82 <prvProcessTimerOrBlockTask+0x52>
 8008c80:	2300      	movs	r3, #0
 8008c82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008c84:	4b0f      	ldr	r3, [pc, #60]	; (8008cc4 <prvProcessTimerOrBlockTask+0x94>)
 8008c86:	6818      	ldr	r0, [r3, #0]
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	683a      	ldr	r2, [r7, #0]
 8008c90:	4619      	mov	r1, r3
 8008c92:	f7fe ff7d 	bl	8007b90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008c96:	f7ff fa19 	bl	80080cc <xTaskResumeAll>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10a      	bne.n	8008cb6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008ca0:	4b09      	ldr	r3, [pc, #36]	; (8008cc8 <prvProcessTimerOrBlockTask+0x98>)
 8008ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ca6:	601a      	str	r2, [r3, #0]
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	f3bf 8f6f 	isb	sy
}
 8008cb0:	e001      	b.n	8008cb6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008cb2:	f7ff fa0b 	bl	80080cc <xTaskResumeAll>
}
 8008cb6:	bf00      	nop
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20001420 	.word	0x20001420
 8008cc4:	20001424 	.word	0x20001424
 8008cc8:	e000ed04 	.word	0xe000ed04

08008ccc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008cd4:	4b0e      	ldr	r3, [pc, #56]	; (8008d10 <prvGetNextExpireTime+0x44>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d101      	bne.n	8008ce2 <prvGetNextExpireTime+0x16>
 8008cde:	2201      	movs	r2, #1
 8008ce0:	e000      	b.n	8008ce4 <prvGetNextExpireTime+0x18>
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d105      	bne.n	8008cfc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cf0:	4b07      	ldr	r3, [pc, #28]	; (8008d10 <prvGetNextExpireTime+0x44>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	60fb      	str	r3, [r7, #12]
 8008cfa:	e001      	b.n	8008d00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008d00:	68fb      	ldr	r3, [r7, #12]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3714      	adds	r7, #20
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	2000141c 	.word	0x2000141c

08008d14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008d1c:	f7ff fa74 	bl	8008208 <xTaskGetTickCount>
 8008d20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008d22:	4b0b      	ldr	r3, [pc, #44]	; (8008d50 <prvSampleTimeNow+0x3c>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d205      	bcs.n	8008d38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008d2c:	f000 f936 	bl	8008f9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	601a      	str	r2, [r3, #0]
 8008d36:	e002      	b.n	8008d3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008d3e:	4a04      	ldr	r2, [pc, #16]	; (8008d50 <prvSampleTimeNow+0x3c>)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008d44:	68fb      	ldr	r3, [r7, #12]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	2000142c 	.word	0x2000142c

08008d54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
 8008d60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008d62:	2300      	movs	r3, #0
 8008d64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	68ba      	ldr	r2, [r7, #8]
 8008d6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d812      	bhi.n	8008da0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	1ad2      	subs	r2, r2, r3
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d302      	bcc.n	8008d8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	617b      	str	r3, [r7, #20]
 8008d8c:	e01b      	b.n	8008dc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d8e:	4b10      	ldr	r3, [pc, #64]	; (8008dd0 <prvInsertTimerInActiveList+0x7c>)
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	3304      	adds	r3, #4
 8008d96:	4619      	mov	r1, r3
 8008d98:	4610      	mov	r0, r2
 8008d9a:	f7fe f9de 	bl	800715a <vListInsert>
 8008d9e:	e012      	b.n	8008dc6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d206      	bcs.n	8008db6 <prvInsertTimerInActiveList+0x62>
 8008da8:	68ba      	ldr	r2, [r7, #8]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d302      	bcc.n	8008db6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008db0:	2301      	movs	r3, #1
 8008db2:	617b      	str	r3, [r7, #20]
 8008db4:	e007      	b.n	8008dc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008db6:	4b07      	ldr	r3, [pc, #28]	; (8008dd4 <prvInsertTimerInActiveList+0x80>)
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	4610      	mov	r0, r2
 8008dc2:	f7fe f9ca 	bl	800715a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008dc6:	697b      	ldr	r3, [r7, #20]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3718      	adds	r7, #24
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	20001420 	.word	0x20001420
 8008dd4:	2000141c 	.word	0x2000141c

08008dd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b08e      	sub	sp, #56	; 0x38
 8008ddc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008dde:	e0ca      	b.n	8008f76 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	da18      	bge.n	8008e18 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008de6:	1d3b      	adds	r3, r7, #4
 8008de8:	3304      	adds	r3, #4
 8008dea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10a      	bne.n	8008e08 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df6:	f383 8811 	msr	BASEPRI, r3
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	61fb      	str	r3, [r7, #28]
}
 8008e04:	bf00      	nop
 8008e06:	e7fe      	b.n	8008e06 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e0e:	6850      	ldr	r0, [r2, #4]
 8008e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e12:	6892      	ldr	r2, [r2, #8]
 8008e14:	4611      	mov	r1, r2
 8008e16:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f2c0 80aa 	blt.w	8008f74 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e26:	695b      	ldr	r3, [r3, #20]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d004      	beq.n	8008e36 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2e:	3304      	adds	r3, #4
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7fe f9cb 	bl	80071cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e36:	463b      	mov	r3, r7
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7ff ff6b 	bl	8008d14 <prvSampleTimeNow>
 8008e3e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2b09      	cmp	r3, #9
 8008e44:	f200 8097 	bhi.w	8008f76 <prvProcessReceivedCommands+0x19e>
 8008e48:	a201      	add	r2, pc, #4	; (adr r2, 8008e50 <prvProcessReceivedCommands+0x78>)
 8008e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e4e:	bf00      	nop
 8008e50:	08008e79 	.word	0x08008e79
 8008e54:	08008e79 	.word	0x08008e79
 8008e58:	08008e79 	.word	0x08008e79
 8008e5c:	08008eed 	.word	0x08008eed
 8008e60:	08008f01 	.word	0x08008f01
 8008e64:	08008f4b 	.word	0x08008f4b
 8008e68:	08008e79 	.word	0x08008e79
 8008e6c:	08008e79 	.word	0x08008e79
 8008e70:	08008eed 	.word	0x08008eed
 8008e74:	08008f01 	.word	0x08008f01
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e7e:	f043 0301 	orr.w	r3, r3, #1
 8008e82:	b2da      	uxtb	r2, r3
 8008e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	18d1      	adds	r1, r2, r3
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e98:	f7ff ff5c 	bl	8008d54 <prvInsertTimerInActiveList>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d069      	beq.n	8008f76 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ea8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008eb0:	f003 0304 	and.w	r3, r3, #4
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d05e      	beq.n	8008f76 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008eb8:	68ba      	ldr	r2, [r7, #8]
 8008eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebc:	699b      	ldr	r3, [r3, #24]
 8008ebe:	441a      	add	r2, r3
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	9300      	str	r3, [sp, #0]
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008eca:	f7ff fe05 	bl	8008ad8 <xTimerGenericCommand>
 8008ece:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008ed0:	6a3b      	ldr	r3, [r7, #32]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d14f      	bne.n	8008f76 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eda:	f383 8811 	msr	BASEPRI, r3
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	f3bf 8f4f 	dsb	sy
 8008ee6:	61bb      	str	r3, [r7, #24]
}
 8008ee8:	bf00      	nop
 8008eea:	e7fe      	b.n	8008eea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ef2:	f023 0301 	bic.w	r3, r3, #1
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008efe:	e03a      	b.n	8008f76 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f06:	f043 0301 	orr.w	r3, r3, #1
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008f12:	68ba      	ldr	r2, [r7, #8]
 8008f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f16:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10a      	bne.n	8008f36 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	617b      	str	r3, [r7, #20]
}
 8008f32:	bf00      	nop
 8008f34:	e7fe      	b.n	8008f34 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f38:	699a      	ldr	r2, [r3, #24]
 8008f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3c:	18d1      	adds	r1, r2, r3
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f44:	f7ff ff06 	bl	8008d54 <prvInsertTimerInActiveList>
					break;
 8008f48:	e015      	b.n	8008f76 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f50:	f003 0302 	and.w	r3, r3, #2
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d103      	bne.n	8008f60 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f5a:	f000 fbe1 	bl	8009720 <vPortFree>
 8008f5e:	e00a      	b.n	8008f76 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f66:	f023 0301 	bic.w	r3, r3, #1
 8008f6a:	b2da      	uxtb	r2, r3
 8008f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008f72:	e000      	b.n	8008f76 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008f74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f76:	4b08      	ldr	r3, [pc, #32]	; (8008f98 <prvProcessReceivedCommands+0x1c0>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	1d39      	adds	r1, r7, #4
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fe fbec 	bl	800775c <xQueueReceive>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	f47f af2a 	bne.w	8008de0 <prvProcessReceivedCommands+0x8>
	}
}
 8008f8c:	bf00      	nop
 8008f8e:	bf00      	nop
 8008f90:	3730      	adds	r7, #48	; 0x30
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	20001424 	.word	0x20001424

08008f9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b088      	sub	sp, #32
 8008fa0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008fa2:	e048      	b.n	8009036 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008fa4:	4b2d      	ldr	r3, [pc, #180]	; (800905c <prvSwitchTimerLists+0xc0>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fae:	4b2b      	ldr	r3, [pc, #172]	; (800905c <prvSwitchTimerLists+0xc0>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	3304      	adds	r3, #4
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7fe f905 	bl	80071cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6a1b      	ldr	r3, [r3, #32]
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fd0:	f003 0304 	and.w	r3, r3, #4
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d02e      	beq.n	8009036 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	693a      	ldr	r2, [r7, #16]
 8008fde:	4413      	add	r3, r2
 8008fe0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d90e      	bls.n	8009008 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ff6:	4b19      	ldr	r3, [pc, #100]	; (800905c <prvSwitchTimerLists+0xc0>)
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	4619      	mov	r1, r3
 8009000:	4610      	mov	r0, r2
 8009002:	f7fe f8aa 	bl	800715a <vListInsert>
 8009006:	e016      	b.n	8009036 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009008:	2300      	movs	r3, #0
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	2300      	movs	r3, #0
 800900e:	693a      	ldr	r2, [r7, #16]
 8009010:	2100      	movs	r1, #0
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f7ff fd60 	bl	8008ad8 <xTimerGenericCommand>
 8009018:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10a      	bne.n	8009036 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	603b      	str	r3, [r7, #0]
}
 8009032:	bf00      	nop
 8009034:	e7fe      	b.n	8009034 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009036:	4b09      	ldr	r3, [pc, #36]	; (800905c <prvSwitchTimerLists+0xc0>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1b1      	bne.n	8008fa4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009040:	4b06      	ldr	r3, [pc, #24]	; (800905c <prvSwitchTimerLists+0xc0>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009046:	4b06      	ldr	r3, [pc, #24]	; (8009060 <prvSwitchTimerLists+0xc4>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a04      	ldr	r2, [pc, #16]	; (800905c <prvSwitchTimerLists+0xc0>)
 800904c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800904e:	4a04      	ldr	r2, [pc, #16]	; (8009060 <prvSwitchTimerLists+0xc4>)
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	6013      	str	r3, [r2, #0]
}
 8009054:	bf00      	nop
 8009056:	3718      	adds	r7, #24
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	2000141c 	.word	0x2000141c
 8009060:	20001420 	.word	0x20001420

08009064 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800906a:	f000 f96b 	bl	8009344 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800906e:	4b15      	ldr	r3, [pc, #84]	; (80090c4 <prvCheckForValidListAndQueue+0x60>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d120      	bne.n	80090b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009076:	4814      	ldr	r0, [pc, #80]	; (80090c8 <prvCheckForValidListAndQueue+0x64>)
 8009078:	f7fe f81e 	bl	80070b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800907c:	4813      	ldr	r0, [pc, #76]	; (80090cc <prvCheckForValidListAndQueue+0x68>)
 800907e:	f7fe f81b 	bl	80070b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009082:	4b13      	ldr	r3, [pc, #76]	; (80090d0 <prvCheckForValidListAndQueue+0x6c>)
 8009084:	4a10      	ldr	r2, [pc, #64]	; (80090c8 <prvCheckForValidListAndQueue+0x64>)
 8009086:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009088:	4b12      	ldr	r3, [pc, #72]	; (80090d4 <prvCheckForValidListAndQueue+0x70>)
 800908a:	4a10      	ldr	r2, [pc, #64]	; (80090cc <prvCheckForValidListAndQueue+0x68>)
 800908c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800908e:	2300      	movs	r3, #0
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	4b11      	ldr	r3, [pc, #68]	; (80090d8 <prvCheckForValidListAndQueue+0x74>)
 8009094:	4a11      	ldr	r2, [pc, #68]	; (80090dc <prvCheckForValidListAndQueue+0x78>)
 8009096:	2110      	movs	r1, #16
 8009098:	200a      	movs	r0, #10
 800909a:	f7fe f929 	bl	80072f0 <xQueueGenericCreateStatic>
 800909e:	4603      	mov	r3, r0
 80090a0:	4a08      	ldr	r2, [pc, #32]	; (80090c4 <prvCheckForValidListAndQueue+0x60>)
 80090a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80090a4:	4b07      	ldr	r3, [pc, #28]	; (80090c4 <prvCheckForValidListAndQueue+0x60>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d005      	beq.n	80090b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80090ac:	4b05      	ldr	r3, [pc, #20]	; (80090c4 <prvCheckForValidListAndQueue+0x60>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	490b      	ldr	r1, [pc, #44]	; (80090e0 <prvCheckForValidListAndQueue+0x7c>)
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fe fd42 	bl	8007b3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80090b8:	f000 f974 	bl	80093a4 <vPortExitCritical>
}
 80090bc:	bf00      	nop
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	20001424 	.word	0x20001424
 80090c8:	200013f4 	.word	0x200013f4
 80090cc:	20001408 	.word	0x20001408
 80090d0:	2000141c 	.word	0x2000141c
 80090d4:	20001420 	.word	0x20001420
 80090d8:	200014d0 	.word	0x200014d0
 80090dc:	20001430 	.word	0x20001430
 80090e0:	08009dfc 	.word	0x08009dfc

080090e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80090e4:	b480      	push	{r7}
 80090e6:	b085      	sub	sp, #20
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	3b04      	subs	r3, #4
 80090f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80090fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	3b04      	subs	r3, #4
 8009102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	f023 0201 	bic.w	r2, r3, #1
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	3b04      	subs	r3, #4
 8009112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009114:	4a0c      	ldr	r2, [pc, #48]	; (8009148 <pxPortInitialiseStack+0x64>)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	3b14      	subs	r3, #20
 800911e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	3b04      	subs	r3, #4
 800912a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f06f 0202 	mvn.w	r2, #2
 8009132:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	3b20      	subs	r3, #32
 8009138:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800913a:	68fb      	ldr	r3, [r7, #12]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3714      	adds	r7, #20
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr
 8009148:	0800914d 	.word	0x0800914d

0800914c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800914c:	b480      	push	{r7}
 800914e:	b085      	sub	sp, #20
 8009150:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009152:	2300      	movs	r3, #0
 8009154:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009156:	4b12      	ldr	r3, [pc, #72]	; (80091a0 <prvTaskExitError+0x54>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800915e:	d00a      	beq.n	8009176 <prvTaskExitError+0x2a>
	__asm volatile
 8009160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009164:	f383 8811 	msr	BASEPRI, r3
 8009168:	f3bf 8f6f 	isb	sy
 800916c:	f3bf 8f4f 	dsb	sy
 8009170:	60fb      	str	r3, [r7, #12]
}
 8009172:	bf00      	nop
 8009174:	e7fe      	b.n	8009174 <prvTaskExitError+0x28>
	__asm volatile
 8009176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917a:	f383 8811 	msr	BASEPRI, r3
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	60bb      	str	r3, [r7, #8]
}
 8009188:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800918a:	bf00      	nop
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d0fc      	beq.n	800918c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009192:	bf00      	nop
 8009194:	bf00      	nop
 8009196:	3714      	adds	r7, #20
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	20000018 	.word	0x20000018
	...

080091b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80091b0:	4b07      	ldr	r3, [pc, #28]	; (80091d0 <pxCurrentTCBConst2>)
 80091b2:	6819      	ldr	r1, [r3, #0]
 80091b4:	6808      	ldr	r0, [r1, #0]
 80091b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ba:	f380 8809 	msr	PSP, r0
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f04f 0000 	mov.w	r0, #0
 80091c6:	f380 8811 	msr	BASEPRI, r0
 80091ca:	4770      	bx	lr
 80091cc:	f3af 8000 	nop.w

080091d0 <pxCurrentTCBConst2>:
 80091d0:	20000ef4 	.word	0x20000ef4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80091d4:	bf00      	nop
 80091d6:	bf00      	nop

080091d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80091d8:	4808      	ldr	r0, [pc, #32]	; (80091fc <prvPortStartFirstTask+0x24>)
 80091da:	6800      	ldr	r0, [r0, #0]
 80091dc:	6800      	ldr	r0, [r0, #0]
 80091de:	f380 8808 	msr	MSP, r0
 80091e2:	f04f 0000 	mov.w	r0, #0
 80091e6:	f380 8814 	msr	CONTROL, r0
 80091ea:	b662      	cpsie	i
 80091ec:	b661      	cpsie	f
 80091ee:	f3bf 8f4f 	dsb	sy
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	df00      	svc	0
 80091f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80091fa:	bf00      	nop
 80091fc:	e000ed08 	.word	0xe000ed08

08009200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009206:	4b46      	ldr	r3, [pc, #280]	; (8009320 <xPortStartScheduler+0x120>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a46      	ldr	r2, [pc, #280]	; (8009324 <xPortStartScheduler+0x124>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d10a      	bne.n	8009226 <xPortStartScheduler+0x26>
	__asm volatile
 8009210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009214:	f383 8811 	msr	BASEPRI, r3
 8009218:	f3bf 8f6f 	isb	sy
 800921c:	f3bf 8f4f 	dsb	sy
 8009220:	613b      	str	r3, [r7, #16]
}
 8009222:	bf00      	nop
 8009224:	e7fe      	b.n	8009224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009226:	4b3e      	ldr	r3, [pc, #248]	; (8009320 <xPortStartScheduler+0x120>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a3f      	ldr	r2, [pc, #252]	; (8009328 <xPortStartScheduler+0x128>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d10a      	bne.n	8009246 <xPortStartScheduler+0x46>
	__asm volatile
 8009230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	60fb      	str	r3, [r7, #12]
}
 8009242:	bf00      	nop
 8009244:	e7fe      	b.n	8009244 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009246:	4b39      	ldr	r3, [pc, #228]	; (800932c <xPortStartScheduler+0x12c>)
 8009248:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	b2db      	uxtb	r3, r3
 8009250:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	22ff      	movs	r2, #255	; 0xff
 8009256:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	b2db      	uxtb	r3, r3
 800925e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009260:	78fb      	ldrb	r3, [r7, #3]
 8009262:	b2db      	uxtb	r3, r3
 8009264:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009268:	b2da      	uxtb	r2, r3
 800926a:	4b31      	ldr	r3, [pc, #196]	; (8009330 <xPortStartScheduler+0x130>)
 800926c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800926e:	4b31      	ldr	r3, [pc, #196]	; (8009334 <xPortStartScheduler+0x134>)
 8009270:	2207      	movs	r2, #7
 8009272:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009274:	e009      	b.n	800928a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009276:	4b2f      	ldr	r3, [pc, #188]	; (8009334 <xPortStartScheduler+0x134>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	3b01      	subs	r3, #1
 800927c:	4a2d      	ldr	r2, [pc, #180]	; (8009334 <xPortStartScheduler+0x134>)
 800927e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009280:	78fb      	ldrb	r3, [r7, #3]
 8009282:	b2db      	uxtb	r3, r3
 8009284:	005b      	lsls	r3, r3, #1
 8009286:	b2db      	uxtb	r3, r3
 8009288:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800928a:	78fb      	ldrb	r3, [r7, #3]
 800928c:	b2db      	uxtb	r3, r3
 800928e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009292:	2b80      	cmp	r3, #128	; 0x80
 8009294:	d0ef      	beq.n	8009276 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009296:	4b27      	ldr	r3, [pc, #156]	; (8009334 <xPortStartScheduler+0x134>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f1c3 0307 	rsb	r3, r3, #7
 800929e:	2b04      	cmp	r3, #4
 80092a0:	d00a      	beq.n	80092b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80092a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a6:	f383 8811 	msr	BASEPRI, r3
 80092aa:	f3bf 8f6f 	isb	sy
 80092ae:	f3bf 8f4f 	dsb	sy
 80092b2:	60bb      	str	r3, [r7, #8]
}
 80092b4:	bf00      	nop
 80092b6:	e7fe      	b.n	80092b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80092b8:	4b1e      	ldr	r3, [pc, #120]	; (8009334 <xPortStartScheduler+0x134>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	021b      	lsls	r3, r3, #8
 80092be:	4a1d      	ldr	r2, [pc, #116]	; (8009334 <xPortStartScheduler+0x134>)
 80092c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80092c2:	4b1c      	ldr	r3, [pc, #112]	; (8009334 <xPortStartScheduler+0x134>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80092ca:	4a1a      	ldr	r2, [pc, #104]	; (8009334 <xPortStartScheduler+0x134>)
 80092cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	b2da      	uxtb	r2, r3
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80092d6:	4b18      	ldr	r3, [pc, #96]	; (8009338 <xPortStartScheduler+0x138>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a17      	ldr	r2, [pc, #92]	; (8009338 <xPortStartScheduler+0x138>)
 80092dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80092e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80092e2:	4b15      	ldr	r3, [pc, #84]	; (8009338 <xPortStartScheduler+0x138>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a14      	ldr	r2, [pc, #80]	; (8009338 <xPortStartScheduler+0x138>)
 80092e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80092ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80092ee:	f000 f8dd 	bl	80094ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80092f2:	4b12      	ldr	r3, [pc, #72]	; (800933c <xPortStartScheduler+0x13c>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80092f8:	f000 f8fc 	bl	80094f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80092fc:	4b10      	ldr	r3, [pc, #64]	; (8009340 <xPortStartScheduler+0x140>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a0f      	ldr	r2, [pc, #60]	; (8009340 <xPortStartScheduler+0x140>)
 8009302:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009306:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009308:	f7ff ff66 	bl	80091d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800930c:	f7ff f846 	bl	800839c <vTaskSwitchContext>
	prvTaskExitError();
 8009310:	f7ff ff1c 	bl	800914c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3718      	adds	r7, #24
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	e000ed00 	.word	0xe000ed00
 8009324:	410fc271 	.word	0x410fc271
 8009328:	410fc270 	.word	0x410fc270
 800932c:	e000e400 	.word	0xe000e400
 8009330:	20001520 	.word	0x20001520
 8009334:	20001524 	.word	0x20001524
 8009338:	e000ed20 	.word	0xe000ed20
 800933c:	20000018 	.word	0x20000018
 8009340:	e000ef34 	.word	0xe000ef34

08009344 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
	__asm volatile
 800934a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	607b      	str	r3, [r7, #4]
}
 800935c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800935e:	4b0f      	ldr	r3, [pc, #60]	; (800939c <vPortEnterCritical+0x58>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3301      	adds	r3, #1
 8009364:	4a0d      	ldr	r2, [pc, #52]	; (800939c <vPortEnterCritical+0x58>)
 8009366:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009368:	4b0c      	ldr	r3, [pc, #48]	; (800939c <vPortEnterCritical+0x58>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2b01      	cmp	r3, #1
 800936e:	d10f      	bne.n	8009390 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009370:	4b0b      	ldr	r3, [pc, #44]	; (80093a0 <vPortEnterCritical+0x5c>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	b2db      	uxtb	r3, r3
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00a      	beq.n	8009390 <vPortEnterCritical+0x4c>
	__asm volatile
 800937a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937e:	f383 8811 	msr	BASEPRI, r3
 8009382:	f3bf 8f6f 	isb	sy
 8009386:	f3bf 8f4f 	dsb	sy
 800938a:	603b      	str	r3, [r7, #0]
}
 800938c:	bf00      	nop
 800938e:	e7fe      	b.n	800938e <vPortEnterCritical+0x4a>
	}
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr
 800939c:	20000018 	.word	0x20000018
 80093a0:	e000ed04 	.word	0xe000ed04

080093a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80093aa:	4b12      	ldr	r3, [pc, #72]	; (80093f4 <vPortExitCritical+0x50>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10a      	bne.n	80093c8 <vPortExitCritical+0x24>
	__asm volatile
 80093b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b6:	f383 8811 	msr	BASEPRI, r3
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	f3bf 8f4f 	dsb	sy
 80093c2:	607b      	str	r3, [r7, #4]
}
 80093c4:	bf00      	nop
 80093c6:	e7fe      	b.n	80093c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80093c8:	4b0a      	ldr	r3, [pc, #40]	; (80093f4 <vPortExitCritical+0x50>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	3b01      	subs	r3, #1
 80093ce:	4a09      	ldr	r2, [pc, #36]	; (80093f4 <vPortExitCritical+0x50>)
 80093d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80093d2:	4b08      	ldr	r3, [pc, #32]	; (80093f4 <vPortExitCritical+0x50>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d105      	bne.n	80093e6 <vPortExitCritical+0x42>
 80093da:	2300      	movs	r3, #0
 80093dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	f383 8811 	msr	BASEPRI, r3
}
 80093e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80093e6:	bf00      	nop
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	20000018 	.word	0x20000018
	...

08009400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009400:	f3ef 8009 	mrs	r0, PSP
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	4b15      	ldr	r3, [pc, #84]	; (8009460 <pxCurrentTCBConst>)
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	f01e 0f10 	tst.w	lr, #16
 8009410:	bf08      	it	eq
 8009412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800941a:	6010      	str	r0, [r2, #0]
 800941c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009420:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009424:	f380 8811 	msr	BASEPRI, r0
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f7fe ffb4 	bl	800839c <vTaskSwitchContext>
 8009434:	f04f 0000 	mov.w	r0, #0
 8009438:	f380 8811 	msr	BASEPRI, r0
 800943c:	bc09      	pop	{r0, r3}
 800943e:	6819      	ldr	r1, [r3, #0]
 8009440:	6808      	ldr	r0, [r1, #0]
 8009442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009446:	f01e 0f10 	tst.w	lr, #16
 800944a:	bf08      	it	eq
 800944c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009450:	f380 8809 	msr	PSP, r0
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	f3af 8000 	nop.w

08009460 <pxCurrentTCBConst>:
 8009460:	20000ef4 	.word	0x20000ef4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009464:	bf00      	nop
 8009466:	bf00      	nop

08009468 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
	__asm volatile
 800946e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	607b      	str	r3, [r7, #4]
}
 8009480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009482:	f7fe fed1 	bl	8008228 <xTaskIncrementTick>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d003      	beq.n	8009494 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800948c:	4b06      	ldr	r3, [pc, #24]	; (80094a8 <xPortSysTickHandler+0x40>)
 800948e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009492:	601a      	str	r2, [r3, #0]
 8009494:	2300      	movs	r3, #0
 8009496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	f383 8811 	msr	BASEPRI, r3
}
 800949e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80094a0:	bf00      	nop
 80094a2:	3708      	adds	r7, #8
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	e000ed04 	.word	0xe000ed04

080094ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80094ac:	b480      	push	{r7}
 80094ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80094b0:	4b0b      	ldr	r3, [pc, #44]	; (80094e0 <vPortSetupTimerInterrupt+0x34>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80094b6:	4b0b      	ldr	r3, [pc, #44]	; (80094e4 <vPortSetupTimerInterrupt+0x38>)
 80094b8:	2200      	movs	r2, #0
 80094ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80094bc:	4b0a      	ldr	r3, [pc, #40]	; (80094e8 <vPortSetupTimerInterrupt+0x3c>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a0a      	ldr	r2, [pc, #40]	; (80094ec <vPortSetupTimerInterrupt+0x40>)
 80094c2:	fba2 2303 	umull	r2, r3, r2, r3
 80094c6:	099b      	lsrs	r3, r3, #6
 80094c8:	4a09      	ldr	r2, [pc, #36]	; (80094f0 <vPortSetupTimerInterrupt+0x44>)
 80094ca:	3b01      	subs	r3, #1
 80094cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80094ce:	4b04      	ldr	r3, [pc, #16]	; (80094e0 <vPortSetupTimerInterrupt+0x34>)
 80094d0:	2207      	movs	r2, #7
 80094d2:	601a      	str	r2, [r3, #0]
}
 80094d4:	bf00      	nop
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	e000e010 	.word	0xe000e010
 80094e4:	e000e018 	.word	0xe000e018
 80094e8:	2000000c 	.word	0x2000000c
 80094ec:	10624dd3 	.word	0x10624dd3
 80094f0:	e000e014 	.word	0xe000e014

080094f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80094f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009504 <vPortEnableVFP+0x10>
 80094f8:	6801      	ldr	r1, [r0, #0]
 80094fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80094fe:	6001      	str	r1, [r0, #0]
 8009500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009502:	bf00      	nop
 8009504:	e000ed88 	.word	0xe000ed88

08009508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800950e:	f3ef 8305 	mrs	r3, IPSR
 8009512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2b0f      	cmp	r3, #15
 8009518:	d914      	bls.n	8009544 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800951a:	4a17      	ldr	r2, [pc, #92]	; (8009578 <vPortValidateInterruptPriority+0x70>)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	4413      	add	r3, r2
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009524:	4b15      	ldr	r3, [pc, #84]	; (800957c <vPortValidateInterruptPriority+0x74>)
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	7afa      	ldrb	r2, [r7, #11]
 800952a:	429a      	cmp	r2, r3
 800952c:	d20a      	bcs.n	8009544 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800952e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009532:	f383 8811 	msr	BASEPRI, r3
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	f3bf 8f4f 	dsb	sy
 800953e:	607b      	str	r3, [r7, #4]
}
 8009540:	bf00      	nop
 8009542:	e7fe      	b.n	8009542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009544:	4b0e      	ldr	r3, [pc, #56]	; (8009580 <vPortValidateInterruptPriority+0x78>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800954c:	4b0d      	ldr	r3, [pc, #52]	; (8009584 <vPortValidateInterruptPriority+0x7c>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	429a      	cmp	r2, r3
 8009552:	d90a      	bls.n	800956a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009558:	f383 8811 	msr	BASEPRI, r3
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	603b      	str	r3, [r7, #0]
}
 8009566:	bf00      	nop
 8009568:	e7fe      	b.n	8009568 <vPortValidateInterruptPriority+0x60>
	}
 800956a:	bf00      	nop
 800956c:	3714      	adds	r7, #20
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	e000e3f0 	.word	0xe000e3f0
 800957c:	20001520 	.word	0x20001520
 8009580:	e000ed0c 	.word	0xe000ed0c
 8009584:	20001524 	.word	0x20001524

08009588 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b08a      	sub	sp, #40	; 0x28
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009590:	2300      	movs	r3, #0
 8009592:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009594:	f7fe fd8c 	bl	80080b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009598:	4b5b      	ldr	r3, [pc, #364]	; (8009708 <pvPortMalloc+0x180>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d101      	bne.n	80095a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80095a0:	f000 f920 	bl	80097e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80095a4:	4b59      	ldr	r3, [pc, #356]	; (800970c <pvPortMalloc+0x184>)
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4013      	ands	r3, r2
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f040 8093 	bne.w	80096d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d01d      	beq.n	80095f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80095b8:	2208      	movs	r2, #8
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4413      	add	r3, r2
 80095be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f003 0307 	and.w	r3, r3, #7
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d014      	beq.n	80095f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f023 0307 	bic.w	r3, r3, #7
 80095d0:	3308      	adds	r3, #8
 80095d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f003 0307 	and.w	r3, r3, #7
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00a      	beq.n	80095f4 <pvPortMalloc+0x6c>
	__asm volatile
 80095de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e2:	f383 8811 	msr	BASEPRI, r3
 80095e6:	f3bf 8f6f 	isb	sy
 80095ea:	f3bf 8f4f 	dsb	sy
 80095ee:	617b      	str	r3, [r7, #20]
}
 80095f0:	bf00      	nop
 80095f2:	e7fe      	b.n	80095f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d06e      	beq.n	80096d8 <pvPortMalloc+0x150>
 80095fa:	4b45      	ldr	r3, [pc, #276]	; (8009710 <pvPortMalloc+0x188>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	429a      	cmp	r2, r3
 8009602:	d869      	bhi.n	80096d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009604:	4b43      	ldr	r3, [pc, #268]	; (8009714 <pvPortMalloc+0x18c>)
 8009606:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009608:	4b42      	ldr	r3, [pc, #264]	; (8009714 <pvPortMalloc+0x18c>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800960e:	e004      	b.n	800961a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	429a      	cmp	r2, r3
 8009622:	d903      	bls.n	800962c <pvPortMalloc+0xa4>
 8009624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d1f1      	bne.n	8009610 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800962c:	4b36      	ldr	r3, [pc, #216]	; (8009708 <pvPortMalloc+0x180>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009632:	429a      	cmp	r2, r3
 8009634:	d050      	beq.n	80096d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009636:	6a3b      	ldr	r3, [r7, #32]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2208      	movs	r2, #8
 800963c:	4413      	add	r3, r2
 800963e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	6a3b      	ldr	r3, [r7, #32]
 8009646:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	1ad2      	subs	r2, r2, r3
 8009650:	2308      	movs	r3, #8
 8009652:	005b      	lsls	r3, r3, #1
 8009654:	429a      	cmp	r2, r3
 8009656:	d91f      	bls.n	8009698 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4413      	add	r3, r2
 800965e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	f003 0307 	and.w	r3, r3, #7
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00a      	beq.n	8009680 <pvPortMalloc+0xf8>
	__asm volatile
 800966a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966e:	f383 8811 	msr	BASEPRI, r3
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	f3bf 8f4f 	dsb	sy
 800967a:	613b      	str	r3, [r7, #16]
}
 800967c:	bf00      	nop
 800967e:	e7fe      	b.n	800967e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009682:	685a      	ldr	r2, [r3, #4]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	1ad2      	subs	r2, r2, r3
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800968c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009692:	69b8      	ldr	r0, [r7, #24]
 8009694:	f000 f908 	bl	80098a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009698:	4b1d      	ldr	r3, [pc, #116]	; (8009710 <pvPortMalloc+0x188>)
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	4a1b      	ldr	r2, [pc, #108]	; (8009710 <pvPortMalloc+0x188>)
 80096a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80096a6:	4b1a      	ldr	r3, [pc, #104]	; (8009710 <pvPortMalloc+0x188>)
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	4b1b      	ldr	r3, [pc, #108]	; (8009718 <pvPortMalloc+0x190>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d203      	bcs.n	80096ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80096b2:	4b17      	ldr	r3, [pc, #92]	; (8009710 <pvPortMalloc+0x188>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a18      	ldr	r2, [pc, #96]	; (8009718 <pvPortMalloc+0x190>)
 80096b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80096ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096bc:	685a      	ldr	r2, [r3, #4]
 80096be:	4b13      	ldr	r3, [pc, #76]	; (800970c <pvPortMalloc+0x184>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	431a      	orrs	r2, r3
 80096c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80096c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ca:	2200      	movs	r2, #0
 80096cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80096ce:	4b13      	ldr	r3, [pc, #76]	; (800971c <pvPortMalloc+0x194>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	3301      	adds	r3, #1
 80096d4:	4a11      	ldr	r2, [pc, #68]	; (800971c <pvPortMalloc+0x194>)
 80096d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80096d8:	f7fe fcf8 	bl	80080cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	f003 0307 	and.w	r3, r3, #7
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00a      	beq.n	80096fc <pvPortMalloc+0x174>
	__asm volatile
 80096e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ea:	f383 8811 	msr	BASEPRI, r3
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	60fb      	str	r3, [r7, #12]
}
 80096f8:	bf00      	nop
 80096fa:	e7fe      	b.n	80096fa <pvPortMalloc+0x172>
	return pvReturn;
 80096fc:	69fb      	ldr	r3, [r7, #28]
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3728      	adds	r7, #40	; 0x28
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	20005130 	.word	0x20005130
 800970c:	20005144 	.word	0x20005144
 8009710:	20005134 	.word	0x20005134
 8009714:	20005128 	.word	0x20005128
 8009718:	20005138 	.word	0x20005138
 800971c:	2000513c 	.word	0x2000513c

08009720 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b086      	sub	sp, #24
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d04d      	beq.n	80097ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009732:	2308      	movs	r3, #8
 8009734:	425b      	negs	r3, r3
 8009736:	697a      	ldr	r2, [r7, #20]
 8009738:	4413      	add	r3, r2
 800973a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	685a      	ldr	r2, [r3, #4]
 8009744:	4b24      	ldr	r3, [pc, #144]	; (80097d8 <vPortFree+0xb8>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4013      	ands	r3, r2
 800974a:	2b00      	cmp	r3, #0
 800974c:	d10a      	bne.n	8009764 <vPortFree+0x44>
	__asm volatile
 800974e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009752:	f383 8811 	msr	BASEPRI, r3
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	60fb      	str	r3, [r7, #12]
}
 8009760:	bf00      	nop
 8009762:	e7fe      	b.n	8009762 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00a      	beq.n	8009782 <vPortFree+0x62>
	__asm volatile
 800976c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009770:	f383 8811 	msr	BASEPRI, r3
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	60bb      	str	r3, [r7, #8]
}
 800977e:	bf00      	nop
 8009780:	e7fe      	b.n	8009780 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	685a      	ldr	r2, [r3, #4]
 8009786:	4b14      	ldr	r3, [pc, #80]	; (80097d8 <vPortFree+0xb8>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4013      	ands	r3, r2
 800978c:	2b00      	cmp	r3, #0
 800978e:	d01e      	beq.n	80097ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d11a      	bne.n	80097ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	685a      	ldr	r2, [r3, #4]
 800979c:	4b0e      	ldr	r3, [pc, #56]	; (80097d8 <vPortFree+0xb8>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	43db      	mvns	r3, r3
 80097a2:	401a      	ands	r2, r3
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80097a8:	f7fe fc82 	bl	80080b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	685a      	ldr	r2, [r3, #4]
 80097b0:	4b0a      	ldr	r3, [pc, #40]	; (80097dc <vPortFree+0xbc>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4413      	add	r3, r2
 80097b6:	4a09      	ldr	r2, [pc, #36]	; (80097dc <vPortFree+0xbc>)
 80097b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80097ba:	6938      	ldr	r0, [r7, #16]
 80097bc:	f000 f874 	bl	80098a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80097c0:	4b07      	ldr	r3, [pc, #28]	; (80097e0 <vPortFree+0xc0>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	3301      	adds	r3, #1
 80097c6:	4a06      	ldr	r2, [pc, #24]	; (80097e0 <vPortFree+0xc0>)
 80097c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80097ca:	f7fe fc7f 	bl	80080cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80097ce:	bf00      	nop
 80097d0:	3718      	adds	r7, #24
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	20005144 	.word	0x20005144
 80097dc:	20005134 	.word	0x20005134
 80097e0:	20005140 	.word	0x20005140

080097e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80097ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80097ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80097f0:	4b27      	ldr	r3, [pc, #156]	; (8009890 <prvHeapInit+0xac>)
 80097f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f003 0307 	and.w	r3, r3, #7
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00c      	beq.n	8009818 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	3307      	adds	r3, #7
 8009802:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f023 0307 	bic.w	r3, r3, #7
 800980a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800980c:	68ba      	ldr	r2, [r7, #8]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	4a1f      	ldr	r2, [pc, #124]	; (8009890 <prvHeapInit+0xac>)
 8009814:	4413      	add	r3, r2
 8009816:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800981c:	4a1d      	ldr	r2, [pc, #116]	; (8009894 <prvHeapInit+0xb0>)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009822:	4b1c      	ldr	r3, [pc, #112]	; (8009894 <prvHeapInit+0xb0>)
 8009824:	2200      	movs	r2, #0
 8009826:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	68ba      	ldr	r2, [r7, #8]
 800982c:	4413      	add	r3, r2
 800982e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009830:	2208      	movs	r2, #8
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	1a9b      	subs	r3, r3, r2
 8009836:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f023 0307 	bic.w	r3, r3, #7
 800983e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	4a15      	ldr	r2, [pc, #84]	; (8009898 <prvHeapInit+0xb4>)
 8009844:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009846:	4b14      	ldr	r3, [pc, #80]	; (8009898 <prvHeapInit+0xb4>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2200      	movs	r2, #0
 800984c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800984e:	4b12      	ldr	r3, [pc, #72]	; (8009898 <prvHeapInit+0xb4>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2200      	movs	r2, #0
 8009854:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	1ad2      	subs	r2, r2, r3
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009864:	4b0c      	ldr	r3, [pc, #48]	; (8009898 <prvHeapInit+0xb4>)
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	4a0a      	ldr	r2, [pc, #40]	; (800989c <prvHeapInit+0xb8>)
 8009872:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	4a09      	ldr	r2, [pc, #36]	; (80098a0 <prvHeapInit+0xbc>)
 800987a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800987c:	4b09      	ldr	r3, [pc, #36]	; (80098a4 <prvHeapInit+0xc0>)
 800987e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009882:	601a      	str	r2, [r3, #0]
}
 8009884:	bf00      	nop
 8009886:	3714      	adds	r7, #20
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr
 8009890:	20001528 	.word	0x20001528
 8009894:	20005128 	.word	0x20005128
 8009898:	20005130 	.word	0x20005130
 800989c:	20005138 	.word	0x20005138
 80098a0:	20005134 	.word	0x20005134
 80098a4:	20005144 	.word	0x20005144

080098a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80098b0:	4b28      	ldr	r3, [pc, #160]	; (8009954 <prvInsertBlockIntoFreeList+0xac>)
 80098b2:	60fb      	str	r3, [r7, #12]
 80098b4:	e002      	b.n	80098bc <prvInsertBlockIntoFreeList+0x14>
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	60fb      	str	r3, [r7, #12]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d8f7      	bhi.n	80098b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	68ba      	ldr	r2, [r7, #8]
 80098d0:	4413      	add	r3, r2
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d108      	bne.n	80098ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	685a      	ldr	r2, [r3, #4]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	441a      	add	r2, r3
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	68ba      	ldr	r2, [r7, #8]
 80098f4:	441a      	add	r2, r3
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d118      	bne.n	8009930 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	4b15      	ldr	r3, [pc, #84]	; (8009958 <prvInsertBlockIntoFreeList+0xb0>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	429a      	cmp	r2, r3
 8009908:	d00d      	beq.n	8009926 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	685a      	ldr	r2, [r3, #4]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	441a      	add	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	601a      	str	r2, [r3, #0]
 8009924:	e008      	b.n	8009938 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009926:	4b0c      	ldr	r3, [pc, #48]	; (8009958 <prvInsertBlockIntoFreeList+0xb0>)
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	601a      	str	r2, [r3, #0]
 800992e:	e003      	b.n	8009938 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	429a      	cmp	r2, r3
 800993e:	d002      	beq.n	8009946 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009946:	bf00      	nop
 8009948:	3714      	adds	r7, #20
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	20005128 	.word	0x20005128
 8009958:	20005130 	.word	0x20005130

0800995c <__errno>:
 800995c:	4b01      	ldr	r3, [pc, #4]	; (8009964 <__errno+0x8>)
 800995e:	6818      	ldr	r0, [r3, #0]
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	2000001c 	.word	0x2000001c

08009968 <__libc_init_array>:
 8009968:	b570      	push	{r4, r5, r6, lr}
 800996a:	4d0d      	ldr	r5, [pc, #52]	; (80099a0 <__libc_init_array+0x38>)
 800996c:	4c0d      	ldr	r4, [pc, #52]	; (80099a4 <__libc_init_array+0x3c>)
 800996e:	1b64      	subs	r4, r4, r5
 8009970:	10a4      	asrs	r4, r4, #2
 8009972:	2600      	movs	r6, #0
 8009974:	42a6      	cmp	r6, r4
 8009976:	d109      	bne.n	800998c <__libc_init_array+0x24>
 8009978:	4d0b      	ldr	r5, [pc, #44]	; (80099a8 <__libc_init_array+0x40>)
 800997a:	4c0c      	ldr	r4, [pc, #48]	; (80099ac <__libc_init_array+0x44>)
 800997c:	f000 f9fa 	bl	8009d74 <_init>
 8009980:	1b64      	subs	r4, r4, r5
 8009982:	10a4      	asrs	r4, r4, #2
 8009984:	2600      	movs	r6, #0
 8009986:	42a6      	cmp	r6, r4
 8009988:	d105      	bne.n	8009996 <__libc_init_array+0x2e>
 800998a:	bd70      	pop	{r4, r5, r6, pc}
 800998c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009990:	4798      	blx	r3
 8009992:	3601      	adds	r6, #1
 8009994:	e7ee      	b.n	8009974 <__libc_init_array+0xc>
 8009996:	f855 3b04 	ldr.w	r3, [r5], #4
 800999a:	4798      	blx	r3
 800999c:	3601      	adds	r6, #1
 800999e:	e7f2      	b.n	8009986 <__libc_init_array+0x1e>
 80099a0:	0800ac7c 	.word	0x0800ac7c
 80099a4:	0800ac7c 	.word	0x0800ac7c
 80099a8:	0800ac7c 	.word	0x0800ac7c
 80099ac:	0800ac80 	.word	0x0800ac80

080099b0 <__itoa>:
 80099b0:	1e93      	subs	r3, r2, #2
 80099b2:	2b22      	cmp	r3, #34	; 0x22
 80099b4:	b510      	push	{r4, lr}
 80099b6:	460c      	mov	r4, r1
 80099b8:	d904      	bls.n	80099c4 <__itoa+0x14>
 80099ba:	2300      	movs	r3, #0
 80099bc:	700b      	strb	r3, [r1, #0]
 80099be:	461c      	mov	r4, r3
 80099c0:	4620      	mov	r0, r4
 80099c2:	bd10      	pop	{r4, pc}
 80099c4:	2a0a      	cmp	r2, #10
 80099c6:	d109      	bne.n	80099dc <__itoa+0x2c>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	da07      	bge.n	80099dc <__itoa+0x2c>
 80099cc:	232d      	movs	r3, #45	; 0x2d
 80099ce:	700b      	strb	r3, [r1, #0]
 80099d0:	4240      	negs	r0, r0
 80099d2:	2101      	movs	r1, #1
 80099d4:	4421      	add	r1, r4
 80099d6:	f000 f97f 	bl	8009cd8 <__utoa>
 80099da:	e7f1      	b.n	80099c0 <__itoa+0x10>
 80099dc:	2100      	movs	r1, #0
 80099de:	e7f9      	b.n	80099d4 <__itoa+0x24>

080099e0 <itoa>:
 80099e0:	f7ff bfe6 	b.w	80099b0 <__itoa>

080099e4 <__retarget_lock_acquire_recursive>:
 80099e4:	4770      	bx	lr

080099e6 <__retarget_lock_release_recursive>:
 80099e6:	4770      	bx	lr

080099e8 <malloc>:
 80099e8:	4b02      	ldr	r3, [pc, #8]	; (80099f4 <malloc+0xc>)
 80099ea:	4601      	mov	r1, r0
 80099ec:	6818      	ldr	r0, [r3, #0]
 80099ee:	f000 b885 	b.w	8009afc <_malloc_r>
 80099f2:	bf00      	nop
 80099f4:	2000001c 	.word	0x2000001c

080099f8 <memcpy>:
 80099f8:	440a      	add	r2, r1
 80099fa:	4291      	cmp	r1, r2
 80099fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a00:	d100      	bne.n	8009a04 <memcpy+0xc>
 8009a02:	4770      	bx	lr
 8009a04:	b510      	push	{r4, lr}
 8009a06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a0e:	4291      	cmp	r1, r2
 8009a10:	d1f9      	bne.n	8009a06 <memcpy+0xe>
 8009a12:	bd10      	pop	{r4, pc}

08009a14 <memset>:
 8009a14:	4402      	add	r2, r0
 8009a16:	4603      	mov	r3, r0
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d100      	bne.n	8009a1e <memset+0xa>
 8009a1c:	4770      	bx	lr
 8009a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8009a22:	e7f9      	b.n	8009a18 <memset+0x4>

08009a24 <_free_r>:
 8009a24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a26:	2900      	cmp	r1, #0
 8009a28:	d044      	beq.n	8009ab4 <_free_r+0x90>
 8009a2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a2e:	9001      	str	r0, [sp, #4]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f1a1 0404 	sub.w	r4, r1, #4
 8009a36:	bfb8      	it	lt
 8009a38:	18e4      	addlt	r4, r4, r3
 8009a3a:	f000 f98f 	bl	8009d5c <__malloc_lock>
 8009a3e:	4a1e      	ldr	r2, [pc, #120]	; (8009ab8 <_free_r+0x94>)
 8009a40:	9801      	ldr	r0, [sp, #4]
 8009a42:	6813      	ldr	r3, [r2, #0]
 8009a44:	b933      	cbnz	r3, 8009a54 <_free_r+0x30>
 8009a46:	6063      	str	r3, [r4, #4]
 8009a48:	6014      	str	r4, [r2, #0]
 8009a4a:	b003      	add	sp, #12
 8009a4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a50:	f000 b98a 	b.w	8009d68 <__malloc_unlock>
 8009a54:	42a3      	cmp	r3, r4
 8009a56:	d908      	bls.n	8009a6a <_free_r+0x46>
 8009a58:	6825      	ldr	r5, [r4, #0]
 8009a5a:	1961      	adds	r1, r4, r5
 8009a5c:	428b      	cmp	r3, r1
 8009a5e:	bf01      	itttt	eq
 8009a60:	6819      	ldreq	r1, [r3, #0]
 8009a62:	685b      	ldreq	r3, [r3, #4]
 8009a64:	1949      	addeq	r1, r1, r5
 8009a66:	6021      	streq	r1, [r4, #0]
 8009a68:	e7ed      	b.n	8009a46 <_free_r+0x22>
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	b10b      	cbz	r3, 8009a74 <_free_r+0x50>
 8009a70:	42a3      	cmp	r3, r4
 8009a72:	d9fa      	bls.n	8009a6a <_free_r+0x46>
 8009a74:	6811      	ldr	r1, [r2, #0]
 8009a76:	1855      	adds	r5, r2, r1
 8009a78:	42a5      	cmp	r5, r4
 8009a7a:	d10b      	bne.n	8009a94 <_free_r+0x70>
 8009a7c:	6824      	ldr	r4, [r4, #0]
 8009a7e:	4421      	add	r1, r4
 8009a80:	1854      	adds	r4, r2, r1
 8009a82:	42a3      	cmp	r3, r4
 8009a84:	6011      	str	r1, [r2, #0]
 8009a86:	d1e0      	bne.n	8009a4a <_free_r+0x26>
 8009a88:	681c      	ldr	r4, [r3, #0]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	6053      	str	r3, [r2, #4]
 8009a8e:	4421      	add	r1, r4
 8009a90:	6011      	str	r1, [r2, #0]
 8009a92:	e7da      	b.n	8009a4a <_free_r+0x26>
 8009a94:	d902      	bls.n	8009a9c <_free_r+0x78>
 8009a96:	230c      	movs	r3, #12
 8009a98:	6003      	str	r3, [r0, #0]
 8009a9a:	e7d6      	b.n	8009a4a <_free_r+0x26>
 8009a9c:	6825      	ldr	r5, [r4, #0]
 8009a9e:	1961      	adds	r1, r4, r5
 8009aa0:	428b      	cmp	r3, r1
 8009aa2:	bf04      	itt	eq
 8009aa4:	6819      	ldreq	r1, [r3, #0]
 8009aa6:	685b      	ldreq	r3, [r3, #4]
 8009aa8:	6063      	str	r3, [r4, #4]
 8009aaa:	bf04      	itt	eq
 8009aac:	1949      	addeq	r1, r1, r5
 8009aae:	6021      	streq	r1, [r4, #0]
 8009ab0:	6054      	str	r4, [r2, #4]
 8009ab2:	e7ca      	b.n	8009a4a <_free_r+0x26>
 8009ab4:	b003      	add	sp, #12
 8009ab6:	bd30      	pop	{r4, r5, pc}
 8009ab8:	2000514c 	.word	0x2000514c

08009abc <sbrk_aligned>:
 8009abc:	b570      	push	{r4, r5, r6, lr}
 8009abe:	4e0e      	ldr	r6, [pc, #56]	; (8009af8 <sbrk_aligned+0x3c>)
 8009ac0:	460c      	mov	r4, r1
 8009ac2:	6831      	ldr	r1, [r6, #0]
 8009ac4:	4605      	mov	r5, r0
 8009ac6:	b911      	cbnz	r1, 8009ace <sbrk_aligned+0x12>
 8009ac8:	f000 f8f6 	bl	8009cb8 <_sbrk_r>
 8009acc:	6030      	str	r0, [r6, #0]
 8009ace:	4621      	mov	r1, r4
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	f000 f8f1 	bl	8009cb8 <_sbrk_r>
 8009ad6:	1c43      	adds	r3, r0, #1
 8009ad8:	d00a      	beq.n	8009af0 <sbrk_aligned+0x34>
 8009ada:	1cc4      	adds	r4, r0, #3
 8009adc:	f024 0403 	bic.w	r4, r4, #3
 8009ae0:	42a0      	cmp	r0, r4
 8009ae2:	d007      	beq.n	8009af4 <sbrk_aligned+0x38>
 8009ae4:	1a21      	subs	r1, r4, r0
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	f000 f8e6 	bl	8009cb8 <_sbrk_r>
 8009aec:	3001      	adds	r0, #1
 8009aee:	d101      	bne.n	8009af4 <sbrk_aligned+0x38>
 8009af0:	f04f 34ff 	mov.w	r4, #4294967295
 8009af4:	4620      	mov	r0, r4
 8009af6:	bd70      	pop	{r4, r5, r6, pc}
 8009af8:	20005150 	.word	0x20005150

08009afc <_malloc_r>:
 8009afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b00:	1ccd      	adds	r5, r1, #3
 8009b02:	f025 0503 	bic.w	r5, r5, #3
 8009b06:	3508      	adds	r5, #8
 8009b08:	2d0c      	cmp	r5, #12
 8009b0a:	bf38      	it	cc
 8009b0c:	250c      	movcc	r5, #12
 8009b0e:	2d00      	cmp	r5, #0
 8009b10:	4607      	mov	r7, r0
 8009b12:	db01      	blt.n	8009b18 <_malloc_r+0x1c>
 8009b14:	42a9      	cmp	r1, r5
 8009b16:	d905      	bls.n	8009b24 <_malloc_r+0x28>
 8009b18:	230c      	movs	r3, #12
 8009b1a:	603b      	str	r3, [r7, #0]
 8009b1c:	2600      	movs	r6, #0
 8009b1e:	4630      	mov	r0, r6
 8009b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b24:	4e2e      	ldr	r6, [pc, #184]	; (8009be0 <_malloc_r+0xe4>)
 8009b26:	f000 f919 	bl	8009d5c <__malloc_lock>
 8009b2a:	6833      	ldr	r3, [r6, #0]
 8009b2c:	461c      	mov	r4, r3
 8009b2e:	bb34      	cbnz	r4, 8009b7e <_malloc_r+0x82>
 8009b30:	4629      	mov	r1, r5
 8009b32:	4638      	mov	r0, r7
 8009b34:	f7ff ffc2 	bl	8009abc <sbrk_aligned>
 8009b38:	1c43      	adds	r3, r0, #1
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	d14d      	bne.n	8009bda <_malloc_r+0xde>
 8009b3e:	6834      	ldr	r4, [r6, #0]
 8009b40:	4626      	mov	r6, r4
 8009b42:	2e00      	cmp	r6, #0
 8009b44:	d140      	bne.n	8009bc8 <_malloc_r+0xcc>
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	4631      	mov	r1, r6
 8009b4a:	4638      	mov	r0, r7
 8009b4c:	eb04 0803 	add.w	r8, r4, r3
 8009b50:	f000 f8b2 	bl	8009cb8 <_sbrk_r>
 8009b54:	4580      	cmp	r8, r0
 8009b56:	d13a      	bne.n	8009bce <_malloc_r+0xd2>
 8009b58:	6821      	ldr	r1, [r4, #0]
 8009b5a:	3503      	adds	r5, #3
 8009b5c:	1a6d      	subs	r5, r5, r1
 8009b5e:	f025 0503 	bic.w	r5, r5, #3
 8009b62:	3508      	adds	r5, #8
 8009b64:	2d0c      	cmp	r5, #12
 8009b66:	bf38      	it	cc
 8009b68:	250c      	movcc	r5, #12
 8009b6a:	4629      	mov	r1, r5
 8009b6c:	4638      	mov	r0, r7
 8009b6e:	f7ff ffa5 	bl	8009abc <sbrk_aligned>
 8009b72:	3001      	adds	r0, #1
 8009b74:	d02b      	beq.n	8009bce <_malloc_r+0xd2>
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	442b      	add	r3, r5
 8009b7a:	6023      	str	r3, [r4, #0]
 8009b7c:	e00e      	b.n	8009b9c <_malloc_r+0xa0>
 8009b7e:	6822      	ldr	r2, [r4, #0]
 8009b80:	1b52      	subs	r2, r2, r5
 8009b82:	d41e      	bmi.n	8009bc2 <_malloc_r+0xc6>
 8009b84:	2a0b      	cmp	r2, #11
 8009b86:	d916      	bls.n	8009bb6 <_malloc_r+0xba>
 8009b88:	1961      	adds	r1, r4, r5
 8009b8a:	42a3      	cmp	r3, r4
 8009b8c:	6025      	str	r5, [r4, #0]
 8009b8e:	bf18      	it	ne
 8009b90:	6059      	strne	r1, [r3, #4]
 8009b92:	6863      	ldr	r3, [r4, #4]
 8009b94:	bf08      	it	eq
 8009b96:	6031      	streq	r1, [r6, #0]
 8009b98:	5162      	str	r2, [r4, r5]
 8009b9a:	604b      	str	r3, [r1, #4]
 8009b9c:	4638      	mov	r0, r7
 8009b9e:	f104 060b 	add.w	r6, r4, #11
 8009ba2:	f000 f8e1 	bl	8009d68 <__malloc_unlock>
 8009ba6:	f026 0607 	bic.w	r6, r6, #7
 8009baa:	1d23      	adds	r3, r4, #4
 8009bac:	1af2      	subs	r2, r6, r3
 8009bae:	d0b6      	beq.n	8009b1e <_malloc_r+0x22>
 8009bb0:	1b9b      	subs	r3, r3, r6
 8009bb2:	50a3      	str	r3, [r4, r2]
 8009bb4:	e7b3      	b.n	8009b1e <_malloc_r+0x22>
 8009bb6:	6862      	ldr	r2, [r4, #4]
 8009bb8:	42a3      	cmp	r3, r4
 8009bba:	bf0c      	ite	eq
 8009bbc:	6032      	streq	r2, [r6, #0]
 8009bbe:	605a      	strne	r2, [r3, #4]
 8009bc0:	e7ec      	b.n	8009b9c <_malloc_r+0xa0>
 8009bc2:	4623      	mov	r3, r4
 8009bc4:	6864      	ldr	r4, [r4, #4]
 8009bc6:	e7b2      	b.n	8009b2e <_malloc_r+0x32>
 8009bc8:	4634      	mov	r4, r6
 8009bca:	6876      	ldr	r6, [r6, #4]
 8009bcc:	e7b9      	b.n	8009b42 <_malloc_r+0x46>
 8009bce:	230c      	movs	r3, #12
 8009bd0:	603b      	str	r3, [r7, #0]
 8009bd2:	4638      	mov	r0, r7
 8009bd4:	f000 f8c8 	bl	8009d68 <__malloc_unlock>
 8009bd8:	e7a1      	b.n	8009b1e <_malloc_r+0x22>
 8009bda:	6025      	str	r5, [r4, #0]
 8009bdc:	e7de      	b.n	8009b9c <_malloc_r+0xa0>
 8009bde:	bf00      	nop
 8009be0:	2000514c 	.word	0x2000514c

08009be4 <cleanup_glue>:
 8009be4:	b538      	push	{r3, r4, r5, lr}
 8009be6:	460c      	mov	r4, r1
 8009be8:	6809      	ldr	r1, [r1, #0]
 8009bea:	4605      	mov	r5, r0
 8009bec:	b109      	cbz	r1, 8009bf2 <cleanup_glue+0xe>
 8009bee:	f7ff fff9 	bl	8009be4 <cleanup_glue>
 8009bf2:	4621      	mov	r1, r4
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bfa:	f7ff bf13 	b.w	8009a24 <_free_r>
	...

08009c00 <_reclaim_reent>:
 8009c00:	4b2c      	ldr	r3, [pc, #176]	; (8009cb4 <_reclaim_reent+0xb4>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4283      	cmp	r3, r0
 8009c06:	b570      	push	{r4, r5, r6, lr}
 8009c08:	4604      	mov	r4, r0
 8009c0a:	d051      	beq.n	8009cb0 <_reclaim_reent+0xb0>
 8009c0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009c0e:	b143      	cbz	r3, 8009c22 <_reclaim_reent+0x22>
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d14a      	bne.n	8009cac <_reclaim_reent+0xac>
 8009c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c18:	6819      	ldr	r1, [r3, #0]
 8009c1a:	b111      	cbz	r1, 8009c22 <_reclaim_reent+0x22>
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f7ff ff01 	bl	8009a24 <_free_r>
 8009c22:	6961      	ldr	r1, [r4, #20]
 8009c24:	b111      	cbz	r1, 8009c2c <_reclaim_reent+0x2c>
 8009c26:	4620      	mov	r0, r4
 8009c28:	f7ff fefc 	bl	8009a24 <_free_r>
 8009c2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009c2e:	b111      	cbz	r1, 8009c36 <_reclaim_reent+0x36>
 8009c30:	4620      	mov	r0, r4
 8009c32:	f7ff fef7 	bl	8009a24 <_free_r>
 8009c36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009c38:	b111      	cbz	r1, 8009c40 <_reclaim_reent+0x40>
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	f7ff fef2 	bl	8009a24 <_free_r>
 8009c40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009c42:	b111      	cbz	r1, 8009c4a <_reclaim_reent+0x4a>
 8009c44:	4620      	mov	r0, r4
 8009c46:	f7ff feed 	bl	8009a24 <_free_r>
 8009c4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009c4c:	b111      	cbz	r1, 8009c54 <_reclaim_reent+0x54>
 8009c4e:	4620      	mov	r0, r4
 8009c50:	f7ff fee8 	bl	8009a24 <_free_r>
 8009c54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009c56:	b111      	cbz	r1, 8009c5e <_reclaim_reent+0x5e>
 8009c58:	4620      	mov	r0, r4
 8009c5a:	f7ff fee3 	bl	8009a24 <_free_r>
 8009c5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009c60:	b111      	cbz	r1, 8009c68 <_reclaim_reent+0x68>
 8009c62:	4620      	mov	r0, r4
 8009c64:	f7ff fede 	bl	8009a24 <_free_r>
 8009c68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c6a:	b111      	cbz	r1, 8009c72 <_reclaim_reent+0x72>
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	f7ff fed9 	bl	8009a24 <_free_r>
 8009c72:	69a3      	ldr	r3, [r4, #24]
 8009c74:	b1e3      	cbz	r3, 8009cb0 <_reclaim_reent+0xb0>
 8009c76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009c78:	4620      	mov	r0, r4
 8009c7a:	4798      	blx	r3
 8009c7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009c7e:	b1b9      	cbz	r1, 8009cb0 <_reclaim_reent+0xb0>
 8009c80:	4620      	mov	r0, r4
 8009c82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c86:	f7ff bfad 	b.w	8009be4 <cleanup_glue>
 8009c8a:	5949      	ldr	r1, [r1, r5]
 8009c8c:	b941      	cbnz	r1, 8009ca0 <_reclaim_reent+0xa0>
 8009c8e:	3504      	adds	r5, #4
 8009c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c92:	2d80      	cmp	r5, #128	; 0x80
 8009c94:	68d9      	ldr	r1, [r3, #12]
 8009c96:	d1f8      	bne.n	8009c8a <_reclaim_reent+0x8a>
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f7ff fec3 	bl	8009a24 <_free_r>
 8009c9e:	e7ba      	b.n	8009c16 <_reclaim_reent+0x16>
 8009ca0:	680e      	ldr	r6, [r1, #0]
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	f7ff febe 	bl	8009a24 <_free_r>
 8009ca8:	4631      	mov	r1, r6
 8009caa:	e7ef      	b.n	8009c8c <_reclaim_reent+0x8c>
 8009cac:	2500      	movs	r5, #0
 8009cae:	e7ef      	b.n	8009c90 <_reclaim_reent+0x90>
 8009cb0:	bd70      	pop	{r4, r5, r6, pc}
 8009cb2:	bf00      	nop
 8009cb4:	2000001c 	.word	0x2000001c

08009cb8 <_sbrk_r>:
 8009cb8:	b538      	push	{r3, r4, r5, lr}
 8009cba:	4d06      	ldr	r5, [pc, #24]	; (8009cd4 <_sbrk_r+0x1c>)
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	4608      	mov	r0, r1
 8009cc2:	602b      	str	r3, [r5, #0]
 8009cc4:	f7f8 ff7c 	bl	8002bc0 <_sbrk>
 8009cc8:	1c43      	adds	r3, r0, #1
 8009cca:	d102      	bne.n	8009cd2 <_sbrk_r+0x1a>
 8009ccc:	682b      	ldr	r3, [r5, #0]
 8009cce:	b103      	cbz	r3, 8009cd2 <_sbrk_r+0x1a>
 8009cd0:	6023      	str	r3, [r4, #0]
 8009cd2:	bd38      	pop	{r3, r4, r5, pc}
 8009cd4:	20005154 	.word	0x20005154

08009cd8 <__utoa>:
 8009cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cda:	4c1f      	ldr	r4, [pc, #124]	; (8009d58 <__utoa+0x80>)
 8009cdc:	b08b      	sub	sp, #44	; 0x2c
 8009cde:	4605      	mov	r5, r0
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	466e      	mov	r6, sp
 8009ce4:	f104 0c20 	add.w	ip, r4, #32
 8009ce8:	6820      	ldr	r0, [r4, #0]
 8009cea:	6861      	ldr	r1, [r4, #4]
 8009cec:	4637      	mov	r7, r6
 8009cee:	c703      	stmia	r7!, {r0, r1}
 8009cf0:	3408      	adds	r4, #8
 8009cf2:	4564      	cmp	r4, ip
 8009cf4:	463e      	mov	r6, r7
 8009cf6:	d1f7      	bne.n	8009ce8 <__utoa+0x10>
 8009cf8:	7921      	ldrb	r1, [r4, #4]
 8009cfa:	7139      	strb	r1, [r7, #4]
 8009cfc:	1e91      	subs	r1, r2, #2
 8009cfe:	6820      	ldr	r0, [r4, #0]
 8009d00:	6038      	str	r0, [r7, #0]
 8009d02:	2922      	cmp	r1, #34	; 0x22
 8009d04:	f04f 0100 	mov.w	r1, #0
 8009d08:	d904      	bls.n	8009d14 <__utoa+0x3c>
 8009d0a:	7019      	strb	r1, [r3, #0]
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	4618      	mov	r0, r3
 8009d10:	b00b      	add	sp, #44	; 0x2c
 8009d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d14:	1e58      	subs	r0, r3, #1
 8009d16:	4684      	mov	ip, r0
 8009d18:	fbb5 f7f2 	udiv	r7, r5, r2
 8009d1c:	fb02 5617 	mls	r6, r2, r7, r5
 8009d20:	3628      	adds	r6, #40	; 0x28
 8009d22:	446e      	add	r6, sp
 8009d24:	460c      	mov	r4, r1
 8009d26:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009d2a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009d2e:	462e      	mov	r6, r5
 8009d30:	42b2      	cmp	r2, r6
 8009d32:	f101 0101 	add.w	r1, r1, #1
 8009d36:	463d      	mov	r5, r7
 8009d38:	d9ee      	bls.n	8009d18 <__utoa+0x40>
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	545a      	strb	r2, [r3, r1]
 8009d3e:	1919      	adds	r1, r3, r4
 8009d40:	1aa5      	subs	r5, r4, r2
 8009d42:	42aa      	cmp	r2, r5
 8009d44:	dae3      	bge.n	8009d0e <__utoa+0x36>
 8009d46:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009d4a:	780e      	ldrb	r6, [r1, #0]
 8009d4c:	7006      	strb	r6, [r0, #0]
 8009d4e:	3201      	adds	r2, #1
 8009d50:	f801 5901 	strb.w	r5, [r1], #-1
 8009d54:	e7f4      	b.n	8009d40 <__utoa+0x68>
 8009d56:	bf00      	nop
 8009d58:	0800ac4c 	.word	0x0800ac4c

08009d5c <__malloc_lock>:
 8009d5c:	4801      	ldr	r0, [pc, #4]	; (8009d64 <__malloc_lock+0x8>)
 8009d5e:	f7ff be41 	b.w	80099e4 <__retarget_lock_acquire_recursive>
 8009d62:	bf00      	nop
 8009d64:	20005148 	.word	0x20005148

08009d68 <__malloc_unlock>:
 8009d68:	4801      	ldr	r0, [pc, #4]	; (8009d70 <__malloc_unlock+0x8>)
 8009d6a:	f7ff be3c 	b.w	80099e6 <__retarget_lock_release_recursive>
 8009d6e:	bf00      	nop
 8009d70:	20005148 	.word	0x20005148

08009d74 <_init>:
 8009d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d76:	bf00      	nop
 8009d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d7a:	bc08      	pop	{r3}
 8009d7c:	469e      	mov	lr, r3
 8009d7e:	4770      	bx	lr

08009d80 <_fini>:
 8009d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d82:	bf00      	nop
 8009d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d86:	bc08      	pop	{r3}
 8009d88:	469e      	mov	lr, r3
 8009d8a:	4770      	bx	lr
