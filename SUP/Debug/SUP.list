
SUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb80  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010e0  0800fd20  0800fd20  0001fd20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e00  08010e00  00030198  2**0
                  CONTENTS
  4 .ARM          00000008  08010e00  08010e00  00020e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e08  08010e08  00030198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010e08  08010e08  00020e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010e0c  08010e0c  00020e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  08010e10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000064b4  20000198  08010fa8  00030198  2**2
                  ALLOC
 10 ._user_heap_stack 00008004  2000664c  08010fa8  0003664c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a7b7  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000615a  00000000  00000000  0005a97f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002248  00000000  00000000  00060ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fb0  00000000  00000000  00062d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020378  00000000  00000000  00064cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cb8f  00000000  00000000  00085050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a14d8  00000000  00000000  000b1bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001530b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000944c  00000000  00000000  00153108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000198 	.word	0x20000198
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fd08 	.word	0x0800fd08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000019c 	.word	0x2000019c
 80001dc:	0800fd08 	.word	0x0800fd08

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2iz>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d215      	bcs.n	80009b2 <__aeabi_d2iz+0x36>
 8000986:	d511      	bpl.n	80009ac <__aeabi_d2iz+0x30>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d912      	bls.n	80009b8 <__aeabi_d2iz+0x3c>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009a2:	fa23 f002 	lsr.w	r0, r3, r2
 80009a6:	bf18      	it	ne
 80009a8:	4240      	negne	r0, r0
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d105      	bne.n	80009c4 <__aeabi_d2iz+0x48>
 80009b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	bf08      	it	eq
 80009be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_d2uiz>:
 80009cc:	004a      	lsls	r2, r1, #1
 80009ce:	d211      	bcs.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009d4:	d211      	bcs.n	80009fa <__aeabi_d2uiz+0x2e>
 80009d6:	d50d      	bpl.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d40e      	bmi.n	8000a00 <__aeabi_d2uiz+0x34>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	fa23 f002 	lsr.w	r0, r3, r2
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d102      	bne.n	8000a06 <__aeabi_d2uiz+0x3a>
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	4770      	bx	lr
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	4770      	bx	lr

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b974 	b.w	8000d0c <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	4604      	mov	r4, r0
 8000a44:	468e      	mov	lr, r1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d14d      	bne.n	8000ae6 <__udivmoddi4+0xaa>
 8000a4a:	428a      	cmp	r2, r1
 8000a4c:	4694      	mov	ip, r2
 8000a4e:	d969      	bls.n	8000b24 <__udivmoddi4+0xe8>
 8000a50:	fab2 f282 	clz	r2, r2
 8000a54:	b152      	cbz	r2, 8000a6c <__udivmoddi4+0x30>
 8000a56:	fa01 f302 	lsl.w	r3, r1, r2
 8000a5a:	f1c2 0120 	rsb	r1, r2, #32
 8000a5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a66:	ea41 0e03 	orr.w	lr, r1, r3
 8000a6a:	4094      	lsls	r4, r2
 8000a6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a70:	0c21      	lsrs	r1, r4, #16
 8000a72:	fbbe f6f8 	udiv	r6, lr, r8
 8000a76:	fa1f f78c 	uxth.w	r7, ip
 8000a7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a82:	fb06 f107 	mul.w	r1, r6, r7
 8000a86:	4299      	cmp	r1, r3
 8000a88:	d90a      	bls.n	8000aa0 <__udivmoddi4+0x64>
 8000a8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a92:	f080 811f 	bcs.w	8000cd4 <__udivmoddi4+0x298>
 8000a96:	4299      	cmp	r1, r3
 8000a98:	f240 811c 	bls.w	8000cd4 <__udivmoddi4+0x298>
 8000a9c:	3e02      	subs	r6, #2
 8000a9e:	4463      	add	r3, ip
 8000aa0:	1a5b      	subs	r3, r3, r1
 8000aa2:	b2a4      	uxth	r4, r4
 8000aa4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab0:	fb00 f707 	mul.w	r7, r0, r7
 8000ab4:	42a7      	cmp	r7, r4
 8000ab6:	d90a      	bls.n	8000ace <__udivmoddi4+0x92>
 8000ab8:	eb1c 0404 	adds.w	r4, ip, r4
 8000abc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac0:	f080 810a 	bcs.w	8000cd8 <__udivmoddi4+0x29c>
 8000ac4:	42a7      	cmp	r7, r4
 8000ac6:	f240 8107 	bls.w	8000cd8 <__udivmoddi4+0x29c>
 8000aca:	4464      	add	r4, ip
 8000acc:	3802      	subs	r0, #2
 8000ace:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ad2:	1be4      	subs	r4, r4, r7
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	b11d      	cbz	r5, 8000ae0 <__udivmoddi4+0xa4>
 8000ad8:	40d4      	lsrs	r4, r2
 8000ada:	2300      	movs	r3, #0
 8000adc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d909      	bls.n	8000afe <__udivmoddi4+0xc2>
 8000aea:	2d00      	cmp	r5, #0
 8000aec:	f000 80ef 	beq.w	8000cce <__udivmoddi4+0x292>
 8000af0:	2600      	movs	r6, #0
 8000af2:	e9c5 0100 	strd	r0, r1, [r5]
 8000af6:	4630      	mov	r0, r6
 8000af8:	4631      	mov	r1, r6
 8000afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afe:	fab3 f683 	clz	r6, r3
 8000b02:	2e00      	cmp	r6, #0
 8000b04:	d14a      	bne.n	8000b9c <__udivmoddi4+0x160>
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d302      	bcc.n	8000b10 <__udivmoddi4+0xd4>
 8000b0a:	4282      	cmp	r2, r0
 8000b0c:	f200 80f9 	bhi.w	8000d02 <__udivmoddi4+0x2c6>
 8000b10:	1a84      	subs	r4, r0, r2
 8000b12:	eb61 0303 	sbc.w	r3, r1, r3
 8000b16:	2001      	movs	r0, #1
 8000b18:	469e      	mov	lr, r3
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d0e0      	beq.n	8000ae0 <__udivmoddi4+0xa4>
 8000b1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b22:	e7dd      	b.n	8000ae0 <__udivmoddi4+0xa4>
 8000b24:	b902      	cbnz	r2, 8000b28 <__udivmoddi4+0xec>
 8000b26:	deff      	udf	#255	; 0xff
 8000b28:	fab2 f282 	clz	r2, r2
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	f040 8092 	bne.w	8000c56 <__udivmoddi4+0x21a>
 8000b32:	eba1 010c 	sub.w	r1, r1, ip
 8000b36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3a:	fa1f fe8c 	uxth.w	lr, ip
 8000b3e:	2601      	movs	r6, #1
 8000b40:	0c20      	lsrs	r0, r4, #16
 8000b42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b46:	fb07 1113 	mls	r1, r7, r3, r1
 8000b4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b4e:	fb0e f003 	mul.w	r0, lr, r3
 8000b52:	4288      	cmp	r0, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x12c>
 8000b56:	eb1c 0101 	adds.w	r1, ip, r1
 8000b5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x12a>
 8000b60:	4288      	cmp	r0, r1
 8000b62:	f200 80cb 	bhi.w	8000cfc <__udivmoddi4+0x2c0>
 8000b66:	4643      	mov	r3, r8
 8000b68:	1a09      	subs	r1, r1, r0
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b70:	fb07 1110 	mls	r1, r7, r0, r1
 8000b74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b78:	fb0e fe00 	mul.w	lr, lr, r0
 8000b7c:	45a6      	cmp	lr, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x156>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x154>
 8000b8a:	45a6      	cmp	lr, r4
 8000b8c:	f200 80bb 	bhi.w	8000d06 <__udivmoddi4+0x2ca>
 8000b90:	4608      	mov	r0, r1
 8000b92:	eba4 040e 	sub.w	r4, r4, lr
 8000b96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b9a:	e79c      	b.n	8000ad6 <__udivmoddi4+0x9a>
 8000b9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ba0:	40b3      	lsls	r3, r6
 8000ba2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ba6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000baa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bae:	fa01 f306 	lsl.w	r3, r1, r6
 8000bb2:	431c      	orrs	r4, r3
 8000bb4:	40f9      	lsrs	r1, r7
 8000bb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bba:	fa00 f306 	lsl.w	r3, r0, r6
 8000bbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bc2:	0c20      	lsrs	r0, r4, #16
 8000bc4:	fa1f fe8c 	uxth.w	lr, ip
 8000bc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000bd4:	4288      	cmp	r0, r1
 8000bd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bda:	d90b      	bls.n	8000bf4 <__udivmoddi4+0x1b8>
 8000bdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000be0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000be4:	f080 8088 	bcs.w	8000cf8 <__udivmoddi4+0x2bc>
 8000be8:	4288      	cmp	r0, r1
 8000bea:	f240 8085 	bls.w	8000cf8 <__udivmoddi4+0x2bc>
 8000bee:	f1a8 0802 	sub.w	r8, r8, #2
 8000bf2:	4461      	add	r1, ip
 8000bf4:	1a09      	subs	r1, r1, r0
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000c00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c08:	458e      	cmp	lr, r1
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x1e2>
 8000c0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c14:	d26c      	bcs.n	8000cf0 <__udivmoddi4+0x2b4>
 8000c16:	458e      	cmp	lr, r1
 8000c18:	d96a      	bls.n	8000cf0 <__udivmoddi4+0x2b4>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4461      	add	r1, ip
 8000c1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c22:	fba0 9402 	umull	r9, r4, r0, r2
 8000c26:	eba1 010e 	sub.w	r1, r1, lr
 8000c2a:	42a1      	cmp	r1, r4
 8000c2c:	46c8      	mov	r8, r9
 8000c2e:	46a6      	mov	lr, r4
 8000c30:	d356      	bcc.n	8000ce0 <__udivmoddi4+0x2a4>
 8000c32:	d053      	beq.n	8000cdc <__udivmoddi4+0x2a0>
 8000c34:	b15d      	cbz	r5, 8000c4e <__udivmoddi4+0x212>
 8000c36:	ebb3 0208 	subs.w	r2, r3, r8
 8000c3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c42:	fa22 f306 	lsr.w	r3, r2, r6
 8000c46:	40f1      	lsrs	r1, r6
 8000c48:	431f      	orrs	r7, r3
 8000c4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c4e:	2600      	movs	r6, #0
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	40d8      	lsrs	r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	fa21 f303 	lsr.w	r3, r1, r3
 8000c64:	4091      	lsls	r1, r2
 8000c66:	4301      	orrs	r1, r0
 8000c68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6c:	fa1f fe8c 	uxth.w	lr, ip
 8000c70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c74:	fb07 3610 	mls	r6, r7, r0, r3
 8000c78:	0c0b      	lsrs	r3, r1, #16
 8000c7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c82:	429e      	cmp	r6, r3
 8000c84:	fa04 f402 	lsl.w	r4, r4, r2
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x260>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c92:	d22f      	bcs.n	8000cf4 <__udivmoddi4+0x2b8>
 8000c94:	429e      	cmp	r6, r3
 8000c96:	d92d      	bls.n	8000cf4 <__udivmoddi4+0x2b8>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	b289      	uxth	r1, r1
 8000ca0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ca4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ca8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cac:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb0:	428b      	cmp	r3, r1
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x28a>
 8000cb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cbc:	d216      	bcs.n	8000cec <__udivmoddi4+0x2b0>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d914      	bls.n	8000cec <__udivmoddi4+0x2b0>
 8000cc2:	3e02      	subs	r6, #2
 8000cc4:	4461      	add	r1, ip
 8000cc6:	1ac9      	subs	r1, r1, r3
 8000cc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ccc:	e738      	b.n	8000b40 <__udivmoddi4+0x104>
 8000cce:	462e      	mov	r6, r5
 8000cd0:	4628      	mov	r0, r5
 8000cd2:	e705      	b.n	8000ae0 <__udivmoddi4+0xa4>
 8000cd4:	4606      	mov	r6, r0
 8000cd6:	e6e3      	b.n	8000aa0 <__udivmoddi4+0x64>
 8000cd8:	4618      	mov	r0, r3
 8000cda:	e6f8      	b.n	8000ace <__udivmoddi4+0x92>
 8000cdc:	454b      	cmp	r3, r9
 8000cde:	d2a9      	bcs.n	8000c34 <__udivmoddi4+0x1f8>
 8000ce0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ce4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ce8:	3801      	subs	r0, #1
 8000cea:	e7a3      	b.n	8000c34 <__udivmoddi4+0x1f8>
 8000cec:	4646      	mov	r6, r8
 8000cee:	e7ea      	b.n	8000cc6 <__udivmoddi4+0x28a>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	e794      	b.n	8000c1e <__udivmoddi4+0x1e2>
 8000cf4:	4640      	mov	r0, r8
 8000cf6:	e7d1      	b.n	8000c9c <__udivmoddi4+0x260>
 8000cf8:	46d0      	mov	r8, sl
 8000cfa:	e77b      	b.n	8000bf4 <__udivmoddi4+0x1b8>
 8000cfc:	3b02      	subs	r3, #2
 8000cfe:	4461      	add	r1, ip
 8000d00:	e732      	b.n	8000b68 <__udivmoddi4+0x12c>
 8000d02:	4630      	mov	r0, r6
 8000d04:	e709      	b.n	8000b1a <__udivmoddi4+0xde>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	e742      	b.n	8000b92 <__udivmoddi4+0x156>

08000d0c <__aeabi_idiv0>:
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <ADS1115_init>:
	ADS1115_Config_t 	config;
};

//static void prepareConfigFrame(uint8_t *pOutFrame, ADS1115_Config_t config);

ADS1115_Handle_t* ADS1115_init(I2C_HandleTypeDef *hi2c, uint16_t Addr, ADS1115_Config_t config){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	4608      	mov	r0, r1
 8000d1a:	4639      	mov	r1, r7
 8000d1c:	e881 000c 	stmia.w	r1, {r2, r3}
 8000d20:	4603      	mov	r3, r0
 8000d22:	817b      	strh	r3, [r7, #10]
	ADS1115_Handle_t *pConfig = malloc(sizeof(ADS1115_Handle_t));
 8000d24:	2010      	movs	r0, #16
 8000d26:	f00e fe29 	bl	800f97c <malloc>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	617b      	str	r3, [r7, #20]
	pConfig->hi2c = hi2c;
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	601a      	str	r2, [r3, #0]
	pConfig->address = Addr;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	897a      	ldrh	r2, [r7, #10]
 8000d38:	809a      	strh	r2, [r3, #4]
	pConfig->config = config;
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	1d9a      	adds	r2, r3, #6
 8000d3e:	463b      	mov	r3, r7
 8000d40:	cb03      	ldmia	r3!, {r0, r1}
 8000d42:	6010      	str	r0, [r2, #0]
 8000d44:	6051      	str	r1, [r2, #4]
	return pConfig;
 8000d46:	697b      	ldr	r3, [r7, #20]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <ADS1115_updateConfig>:

void ADS1115_deinit(ADS1115_Handle_t* pConfig){
	free(pConfig);
}

void ADS1115_updateConfig(ADS1115_Handle_t *pConfig, ADS1115_Config_t config){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af02      	add	r7, sp, #8
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	e883 0006 	stmia.w	r3, {r1, r2}
	pConfig->config = config;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	1d9a      	adds	r2, r3, #6
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	cb03      	ldmia	r3!, {r0, r1}
 8000d66:	6010      	str	r0, [r2, #0]
 8000d68:	6051      	str	r1, [r2, #4]

	uint8_t bytes[3] = {0};
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <ADS1115_updateConfig+0x60>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	82bb      	strh	r3, [r7, #20]
 8000d70:	2300      	movs	r3, #0
 8000d72:	75bb      	strb	r3, [r7, #22]
	prepareConfigFrame(bytes, pConfig->config);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f107 0014 	add.w	r0, r7, #20
 8000d7a:	f8d3 1006 	ldr.w	r1, [r3, #6]
 8000d7e:	460a      	mov	r2, r1
 8000d80:	f8d3 100a 	ldr.w	r1, [r3, #10]
 8000d84:	460b      	mov	r3, r1
 8000d86:	4611      	mov	r1, r2
 8000d88:	461a      	mov	r2, r3
 8000d8a:	f000 f875 	bl	8000e78 <prepareConfigFrame>

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	6818      	ldr	r0, [r3, #0]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	889b      	ldrh	r3, [r3, #4]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	b299      	uxth	r1, r3
 8000d9a:	f107 0214 	add.w	r2, r7, #20
 8000d9e:	2364      	movs	r3, #100	; 0x64
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2303      	movs	r3, #3
 8000da4:	f002 fff0 	bl	8003d88 <HAL_I2C_Master_Transmit>
}
 8000da8:	bf00      	nop
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	0800fd20 	.word	0x0800fd20

08000db4 <ADS1115_getData>:
	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);

	return ADS1115_getData(pConfig);
}

int16_t ADS1115_getData(ADS1115_Handle_t *pConfig){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af02      	add	r7, sp, #8
 8000dba:	6078      	str	r0, [r7, #4]
	uint8_t bytes[2] = {0};
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	81bb      	strh	r3, [r7, #12]
	bytes[0] = 0x00;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 1, 50);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6818      	ldr	r0, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	889b      	ldrh	r3, [r3, #4]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	b299      	uxth	r1, r3
 8000dd0:	f107 020c 	add.w	r2, r7, #12
 8000dd4:	2332      	movs	r3, #50	; 0x32
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	2301      	movs	r3, #1
 8000dda:	f002 ffd5 	bl	8003d88 <HAL_I2C_Master_Transmit>

	if(HAL_I2C_Master_Receive(pConfig->hi2c, (pConfig->address << 1), bytes, 2, 50) != HAL_OK)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6818      	ldr	r0, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	889b      	ldrh	r3, [r3, #4]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	b299      	uxth	r1, r3
 8000dea:	f107 020c 	add.w	r2, r7, #12
 8000dee:	2332      	movs	r3, #50	; 0x32
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2302      	movs	r3, #2
 8000df4:	f003 f8c6 	bl	8003f84 <HAL_I2C_Master_Receive>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <ADS1115_getData+0x4e>
		return 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e008      	b.n	8000e14 <ADS1115_getData+0x60>

	int16_t readValue = ((bytes[0] << 8) | bytes[1]);
 8000e02:	7b3b      	ldrb	r3, [r7, #12]
 8000e04:	021b      	lsls	r3, r3, #8
 8000e06:	b21a      	sxth	r2, r3
 8000e08:	7b7b      	ldrb	r3, [r7, #13]
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	81fb      	strh	r3, [r7, #14]

	return readValue;
 8000e10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <ADS1115_startContinousMode>:

void ADS1115_setConversionReadyPin(ADS1115_Handle_t* pConfig){
	ADS1115_setThresholds(pConfig, 0x0000, 0xFFFF);
}

void ADS1115_startContinousMode(ADS1115_Handle_t* pConfig){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	6078      	str	r0, [r7, #4]
	uint8_t bytes[3] = {0};
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <ADS1115_startContinousMode+0x58>)
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	82bb      	strh	r3, [r7, #20]
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	75bb      	strb	r3, [r7, #22]

	ADS1115_Config_t configReg = pConfig->config;
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	3206      	adds	r2, #6
 8000e36:	6810      	ldr	r0, [r2, #0]
 8000e38:	6851      	ldr	r1, [r2, #4]
 8000e3a:	c303      	stmia	r3!, {r0, r1}
	configReg.operatingMode = MODE_CONTINOUS;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73bb      	strb	r3, [r7, #14]
	prepareConfigFrame(bytes, configReg);
 8000e40:	f107 0014 	add.w	r0, r7, #20
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000e4c:	f000 f814 	bl	8000e78 <prepareConfigFrame>

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6818      	ldr	r0, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	889b      	ldrh	r3, [r3, #4]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	b299      	uxth	r1, r3
 8000e5c:	f107 0214 	add.w	r2, r7, #20
 8000e60:	2364      	movs	r3, #100	; 0x64
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2303      	movs	r3, #3
 8000e66:	f002 ff8f 	bl	8003d88 <HAL_I2C_Master_Transmit>
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	0800fd20 	.word	0x0800fd20

08000e78 <prepareConfigFrame>:
	prepareConfigFrame(bytes, configReg);

	HAL_I2C_Master_Transmit(pConfig->hi2c, (pConfig->address << 1), bytes, 3, 100);
}

void prepareConfigFrame(uint8_t *pOutFrame, ADS1115_Config_t config){
 8000e78:	b480      	push	{r7}
 8000e7a:	b087      	sub	sp, #28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t temp[3] = {0};
 8000e86:	4b27      	ldr	r3, [pc, #156]	; (8000f24 <prepareConfigFrame+0xac>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	82bb      	strh	r3, [r7, #20]
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	75bb      	strb	r3, [r7, #22]
	pOutFrame[0] = 0x01;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2201      	movs	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
	pOutFrame[1] |= (config.channel << 4) | (config.pgaConfig << 1)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	b25a      	sxtb	r2, r3
 8000e9e:	793b      	ldrb	r3, [r7, #4]
 8000ea0:	011b      	lsls	r3, r3, #4
 8000ea2:	b259      	sxtb	r1, r3
 8000ea4:	797b      	ldrb	r3, [r7, #5]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	b25b      	sxtb	r3, r3
 8000eaa:	430b      	orrs	r3, r1
 8000eac:	b259      	sxtb	r1, r3
					| (config.operatingMode << 0);
 8000eae:	79bb      	ldrb	r3, [r7, #6]
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	430b      	orrs	r3, r1
 8000eb4:	b25b      	sxtb	r3, r3
	pOutFrame[1] |= (config.channel << 4) | (config.pgaConfig << 1)
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	b25a      	sxtb	r2, r3
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	701a      	strb	r2, [r3, #0]
	pOutFrame[2] |= (config.dataRate << 5) | (config.compareMode << 4) | (config.polarityMode << 3)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	b25a      	sxtb	r2, r3
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	015b      	lsls	r3, r3, #5
 8000ece:	b259      	sxtb	r1, r3
 8000ed0:	7a3b      	ldrb	r3, [r7, #8]
 8000ed2:	011b      	lsls	r3, r3, #4
 8000ed4:	b25b      	sxtb	r3, r3
 8000ed6:	430b      	orrs	r3, r1
 8000ed8:	b259      	sxtb	r1, r3
 8000eda:	7a7b      	ldrb	r3, [r7, #9]
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	b25b      	sxtb	r3, r3
 8000ee0:	430b      	orrs	r3, r1
 8000ee2:	b259      	sxtb	r1, r3
					| (config.latchingMode << 2) | (config.queueComparator << 1);
 8000ee4:	7abb      	ldrb	r3, [r7, #10]
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	430b      	orrs	r3, r1
 8000eec:	b259      	sxtb	r1, r3
 8000eee:	7afb      	ldrb	r3, [r7, #11]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	430b      	orrs	r3, r1
 8000ef6:	b25b      	sxtb	r3, r3
	pOutFrame[2] |= (config.dataRate << 5) | (config.compareMode << 4) | (config.polarityMode << 3)
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	b25a      	sxtb	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	3302      	adds	r3, #2
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	701a      	strb	r2, [r3, #0]
	temp[0] = pOutFrame[0];
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	753b      	strb	r3, [r7, #20]
	temp[1] = pOutFrame[1];
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	785b      	ldrb	r3, [r3, #1]
 8000f0e:	757b      	strb	r3, [r7, #21]
	temp[2] = pOutFrame[2];
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	789b      	ldrb	r3, [r3, #2]
 8000f14:	75bb      	strb	r3, [r7, #22]
}
 8000f16:	bf00      	nop
 8000f18:	371c      	adds	r7, #28
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	0800fd20 	.word	0x0800fd20

08000f28 <MCP4725_init>:

    Constructor
*/
/**************************************************************************/ 
MCP4725 MCP4725_init(I2C_HandleTypeDef* hi2c, MCP4725Ax_ADDRESS addr, float refV)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	4613      	mov	r3, r2
 8000f34:	ed87 0a00 	vstr	s0, [r7]
 8000f38:	71fb      	strb	r3, [r7, #7]
	MCP4725 _MCP4725;

	_MCP4725._i2cAddress = (uint16_t)(addr<<1);
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	753b      	strb	r3, [r7, #20]
	_MCP4725.hi2c = hi2c;
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	613b      	str	r3, [r7, #16]

	MCP4725_setReferenceVoltage(&_MCP4725, refV); //set _refVoltage & _bitsPerVolt variables
 8000f46:	f107 0310 	add.w	r3, r7, #16
 8000f4a:	ed97 0a00 	vldr	s0, [r7]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f80c 	bl	8000f6c <MCP4725_setReferenceVoltage>

	return _MCP4725;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	461c      	mov	r4, r3
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	3724      	adds	r7, #36	; 0x24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd90      	pop	{r4, r7, pc}
	...

08000f6c <MCP4725_setReferenceVoltage>:

    Set reference voltage
*/
/**************************************************************************/
void MCP4725_setReferenceVoltage(MCP4725* _MCP4725, float value)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	ed87 0a00 	vstr	s0, [r7]
   if   (value == 0) _MCP4725->_refVoltage = MCP4725_REFERENCE_VOLTAGE; //sanity check, avoid division by zero
 8000f78:	edd7 7a00 	vldr	s15, [r7]
 8000f7c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f84:	d103      	bne.n	8000f8e <MCP4725_setReferenceVoltage+0x22>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a0c      	ldr	r2, [pc, #48]	; (8000fbc <MCP4725_setReferenceVoltage+0x50>)
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	e002      	b.n	8000f94 <MCP4725_setReferenceVoltage+0x28>
   else              _MCP4725->_refVoltage = value;    
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	609a      	str	r2, [r3, #8]

   _MCP4725->_bitsPerVolt = (float)MCP4725_STEPS / _MCP4725->_refVoltage;         //TODO: check accuracy with +0.5
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f9a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000fc0 <MCP4725_setReferenceVoltage+0x54>
 8000f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fa6:	ee17 3a90 	vmov	r3, s15
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	819a      	strh	r2, [r3, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	40533333 	.word	0x40533333
 8000fc0:	45800000 	.word	0x45800000

08000fc4 <MCP4725_setValue>:
      - "MCP4725_POWER_DOWN_100KOHM"..power down on with 100 kOhm to ground
      - "MCP4725_POWER_DOWN_500KOHM"..power down on with 500kOhm to ground
*/
/**************************************************************************/ 
uint8_t MCP4725_setValue(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	4608      	mov	r0, r1
 8000fce:	4611      	mov	r1, r2
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	807b      	strh	r3, [r7, #2]
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	707b      	strb	r3, [r7, #1]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	703b      	strb	r3, [r7, #0]
  #ifndef MCP4725_DISABLE_SANITY_CHECK
  if (value > MCP4725_MAX_VALUE) value = MCP4725_MAX_VALUE; //make sure value never exceeds threshold
  #endif

  return MCP4725_writeComand(_MCP4725, value, mode, powerType);
 8000fde:	783b      	ldrb	r3, [r7, #0]
 8000fe0:	787a      	ldrb	r2, [r7, #1]
 8000fe2:	8879      	ldrh	r1, [r7, #2]
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f822 	bl	800102e <MCP4725_writeComand>
 8000fea:	4603      	mov	r3, r0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <MCP4725_getEepromBusyFlag>:
      is ignored
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint8_t MCP4725_getEepromBusyFlag(MCP4725* _MCP4725)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint16_t value = MCP4725_readRegister(_MCP4725, MCP4725_READ_SETTINGS); //BSY,POR,xx,xx,xx,PD1,PD0,xx
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f000 f895 	bl	800112e <MCP4725_readRegister>
 8001004:	4603      	mov	r3, r0
 8001006:	81fb      	strh	r3, [r7, #14]

  if (value != MCP4725_ERROR) return (value & 0x80)==0x80;		//1 - completed, 0 - incompleted
 8001008:	89fb      	ldrh	r3, [r7, #14]
 800100a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800100e:	4293      	cmp	r3, r2
 8001010:	d008      	beq.n	8001024 <MCP4725_getEepromBusyFlag+0x30>
 8001012:	89fb      	ldrh	r3, [r7, #14]
 8001014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001018:	2b00      	cmp	r3, #0
 800101a:	bf14      	ite	ne
 800101c:	2301      	movne	r3, #1
 800101e:	2300      	moveq	r3, #0
 8001020:	b2db      	uxtb	r3, r3
 8001022:	e000      	b.n	8001026 <MCP4725_getEepromBusyFlag+0x32>
                              return 0;										//collision on i2c bus
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <MCP4725_writeComand>:
    - "MCP4725_POWER_DOWN_500KOHM"
      1,  1
*/
/**************************************************************************/ 
uint8_t	MCP4725_writeComand(MCP4725* _MCP4725, uint16_t value, MCP4725_COMMAND_TYPE mode, MCP4725_POWER_DOWN_TYPE powerType)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b086      	sub	sp, #24
 8001032:	af02      	add	r7, sp, #8
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	4608      	mov	r0, r1
 8001038:	4611      	mov	r1, r2
 800103a:	461a      	mov	r2, r3
 800103c:	4603      	mov	r3, r0
 800103e:	807b      	strh	r3, [r7, #2]
 8001040:	460b      	mov	r3, r1
 8001042:	707b      	strb	r3, [r7, #1]
 8001044:	4613      	mov	r3, r2
 8001046:	703b      	strb	r3, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef I2C_Stat;
  //Wire.beginTransmission(_i2cAddress);

  switch (mode)
 8001048:	787b      	ldrb	r3, [r7, #1]
 800104a:	2b60      	cmp	r3, #96	; 0x60
 800104c:	d028      	beq.n	80010a0 <MCP4725_writeComand+0x72>
 800104e:	2b60      	cmp	r3, #96	; 0x60
 8001050:	dc4a      	bgt.n	80010e8 <MCP4725_writeComand+0xba>
 8001052:	2b00      	cmp	r3, #0
 8001054:	d002      	beq.n	800105c <MCP4725_writeComand+0x2e>
 8001056:	2b40      	cmp	r3, #64	; 0x40
 8001058:	d022      	beq.n	80010a0 <MCP4725_writeComand+0x72>
 800105a:	e045      	b.n	80010e8 <MCP4725_writeComand+0xba>
    case MCP4725_FAST_MODE:                                            //see MCP4725 datasheet on p.18
		
      //Wire.send(mode | (powerType << 4)  | highByte(value));
      //Wire.send(lowByte(value));
		
			buffer[0] = mode | (powerType << 4)  | highByte(value);
 800105c:	783b      	ldrb	r3, [r7, #0]
 800105e:	011b      	lsls	r3, r3, #4
 8001060:	b25a      	sxtb	r2, r3
 8001062:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001066:	4313      	orrs	r3, r2
 8001068:	b25a      	sxtb	r2, r3
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	b29b      	uxth	r3, r3
 8001070:	b25b      	sxtb	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b25b      	sxtb	r3, r3
 8001076:	b2db      	uxtb	r3, r3
 8001078:	733b      	strb	r3, [r7, #12]
			buffer[1] = lowByte(value);
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	737b      	strb	r3, [r7, #13]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 2, 1000);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	791b      	ldrb	r3, [r3, #4]
 8001088:	b299      	uxth	r1, r3
 800108a:	f107 020c 	add.w	r2, r7, #12
 800108e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2302      	movs	r3, #2
 8001096:	f002 fe77 	bl	8003d88 <HAL_I2C_Master_Transmit>
 800109a:	4603      	mov	r3, r0
 800109c:	73fb      	strb	r3, [r7, #15]
		
      break;
 800109e:	e023      	b.n	80010e8 <MCP4725_writeComand+0xba>

    case MCP4725_REGISTER_MODE: case MCP4725_EEPROM_MODE:              //see MCP4725 datasheet on p.19
      value = value << 4;                                              //D11,D10,D9,D8,D7,D6,D5,D4,  D3,D2,D1,D0,xx,xx,xx,xx
 80010a0:	887b      	ldrh	r3, [r7, #2]
 80010a2:	011b      	lsls	r3, r3, #4
 80010a4:	807b      	strh	r3, [r7, #2]
      //Wire.send(mode  | (powerType << 1));
      //Wire.send(highByte(value));
      //Wire.send(lowByte(value));
      
			buffer[0] = mode  | (powerType << 1);
 80010a6:	783b      	ldrb	r3, [r7, #0]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	b25a      	sxtb	r2, r3
 80010ac:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b25b      	sxtb	r3, r3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	733b      	strb	r3, [r7, #12]
			buffer[1] = highByte(value);
 80010b8:	887b      	ldrh	r3, [r7, #2]
 80010ba:	0a1b      	lsrs	r3, r3, #8
 80010bc:	b29b      	uxth	r3, r3
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	737b      	strb	r3, [r7, #13]
			buffer[2] = lowByte(value);
 80010c2:	887b      	ldrh	r3, [r7, #2]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	73bb      	strb	r3, [r7, #14]
		
			I2C_Stat = HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, 3, 1000);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	791b      	ldrb	r3, [r3, #4]
 80010d0:	b299      	uxth	r1, r3
 80010d2:	f107 020c 	add.w	r2, r7, #12
 80010d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2303      	movs	r3, #3
 80010de:	f002 fe53 	bl	8003d88 <HAL_I2C_Master_Transmit>
 80010e2:	4603      	mov	r3, r0
 80010e4:	73fb      	strb	r3, [r7, #15]
		
			break;
 80010e6:	bf00      	nop
  }

  if (I2C_Stat != HAL_OK) return 0;                   //send data over i2c & check for collision on i2c bus
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MCP4725_writeComand+0xc4>
 80010ee:	2300      	movs	r3, #0
 80010f0:	e019      	b.n	8001126 <MCP4725_writeComand+0xf8>

  if (mode == MCP4725_EEPROM_MODE)
 80010f2:	787b      	ldrb	r3, [r7, #1]
 80010f4:	2b60      	cmp	r3, #96	; 0x60
 80010f6:	d115      	bne.n	8001124 <MCP4725_writeComand+0xf6>
  {
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff7b 	bl	8000ff4 <MCP4725_getEepromBusyFlag>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b01      	cmp	r3, #1
 8001102:	d101      	bne.n	8001108 <MCP4725_writeComand+0xda>
 8001104:	2301      	movs	r3, #1
 8001106:	e00e      	b.n	8001126 <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //typical EEPROM write time 25 msec
 8001108:	2019      	movs	r0, #25
 800110a:	f001 ff3b 	bl	8002f84 <HAL_Delay>
    if (MCP4725_getEepromBusyFlag(_MCP4725) == 1) return 1;                      //write completed, success!!!
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ff70 	bl	8000ff4 <MCP4725_getEepromBusyFlag>
 8001114:	4603      	mov	r3, r0
 8001116:	2b01      	cmp	r3, #1
 8001118:	d101      	bne.n	800111e <MCP4725_writeComand+0xf0>
 800111a:	2301      	movs	r3, #1
 800111c:	e003      	b.n	8001126 <MCP4725_writeComand+0xf8>
                                     HAL_Delay(MCP4725_EEPROM_WRITE_TIME); //maximum EEPROM write time 25 + 25 = 50 msec
 800111e:	2019      	movs	r0, #25
 8001120:	f001 ff30 	bl	8002f84 <HAL_Delay>
  }

  return 1;                                                         //success!!!
 8001124:	2301      	movs	r3, #1
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <MCP4725_readRegister>:
      ------ Settings data ------  ---------------- DAC register data ---------------  ------------------- EEPROM data --------------------
    - see MCP4725 datasheet on p.20
*/
/**************************************************************************/ 
uint16_t MCP4725_readRegister(MCP4725* _MCP4725, MCP4725_READ_TYPE dataType)
{
 800112e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af02      	add	r7, sp, #8
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	70fb      	strb	r3, [r7, #3]
 800113c:	466b      	mov	r3, sp
 800113e:	461e      	mov	r6, r3
  uint16_t value = dataType;                             //convert enum to integer to avoid compiler warnings                                    
 8001140:	78fb      	ldrb	r3, [r7, #3]
 8001142:	82bb      	strh	r3, [r7, #20]
	uint16_t ret_val = 0 ;
 8001144:	2300      	movs	r3, #0
 8001146:	82fb      	strh	r3, [r7, #22]
	uint8_t buffer[dataType];
 8001148:	78f9      	ldrb	r1, [r7, #3]
 800114a:	460b      	mov	r3, r1
 800114c:	3b01      	subs	r3, #1
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	b2cb      	uxtb	r3, r1
 8001152:	2200      	movs	r2, #0
 8001154:	4698      	mov	r8, r3
 8001156:	4691      	mov	r9, r2
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001164:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001168:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800116c:	b2cb      	uxtb	r3, r1
 800116e:	2200      	movs	r2, #0
 8001170:	461c      	mov	r4, r3
 8001172:	4615      	mov	r5, r2
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	f04f 0300 	mov.w	r3, #0
 800117c:	00eb      	lsls	r3, r5, #3
 800117e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001182:	00e2      	lsls	r2, r4, #3
 8001184:	460b      	mov	r3, r1
 8001186:	3307      	adds	r3, #7
 8001188:	08db      	lsrs	r3, r3, #3
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	ebad 0d03 	sub.w	sp, sp, r3
 8001190:	ab02      	add	r3, sp, #8
 8001192:	3300      	adds	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef I2C_Stat;
	
	I2C_Stat = HAL_I2C_Master_Receive(_MCP4725->hi2c, _MCP4725->_i2cAddress, buffer, dataType, 1000);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	791b      	ldrb	r3, [r3, #4]
 800119e:	b299      	uxth	r1, r3
 80011a0:	78fb      	ldrb	r3, [r7, #3]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011a8:	9200      	str	r2, [sp, #0]
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	f002 feea 	bl	8003f84 <HAL_I2C_Master_Receive>
 80011b0:	4603      	mov	r3, r0
 80011b2:	72fb      	strb	r3, [r7, #11]

  if (I2C_Stat != HAL_OK) return MCP4725_ERROR;
 80011b4:	7afb      	ldrb	r3, [r7, #11]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <MCP4725_readRegister+0x92>
 80011ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011be:	e01f      	b.n	8001200 <MCP4725_readRegister+0xd2>


  /* read data from buffer */
  switch (dataType)
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	2b05      	cmp	r3, #5
 80011c4:	d00a      	beq.n	80011dc <MCP4725_readRegister+0xae>
 80011c6:	2b05      	cmp	r3, #5
 80011c8:	dc19      	bgt.n	80011fe <MCP4725_readRegister+0xd0>
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d002      	beq.n	80011d4 <MCP4725_readRegister+0xa6>
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	d004      	beq.n	80011dc <MCP4725_readRegister+0xae>
 80011d2:	e014      	b.n	80011fe <MCP4725_readRegister+0xd0>
  {
    case MCP4725_READ_SETTINGS:
      ret_val = buffer[0];
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	82fb      	strh	r3, [r7, #22]

      break;
 80011da:	e010      	b.n	80011fe <MCP4725_readRegister+0xd0>

    case MCP4725_READ_DAC_REG: case MCP4725_READ_EEPROM:

      ret_val = buffer[value-2];
 80011dc:	8abb      	ldrh	r3, [r7, #20]
 80011de:	3b02      	subs	r3, #2
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	5cd3      	ldrb	r3, [r2, r3]
 80011e4:	82fb      	strh	r3, [r7, #22]
      ret_val = (ret_val << 8) | buffer[value-1];
 80011e6:	8afb      	ldrh	r3, [r7, #22]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	8abb      	ldrh	r3, [r7, #20]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	68f9      	ldr	r1, [r7, #12]
 80011f2:	5ccb      	ldrb	r3, [r1, r3]
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	82fb      	strh	r3, [r7, #22]
      break;
 80011fc:	bf00      	nop
  }

  return ret_val;
 80011fe:	8afb      	ldrh	r3, [r7, #22]
 8001200:	46b5      	mov	sp, r6
}
 8001202:	4618      	mov	r0, r3
 8001204:	371c      	adds	r7, #28
 8001206:	46bd      	mov	sp, r7
 8001208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800120c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af04      	add	r7, sp, #16
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	9302      	str	r3, [sp, #8]
 800122c:	2301      	movs	r3, #1
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	1dfb      	adds	r3, r7, #7
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	2200      	movs	r2, #0
 8001238:	2178      	movs	r1, #120	; 0x78
 800123a:	4803      	ldr	r0, [pc, #12]	; (8001248 <ssd1306_WriteCommand+0x2c>)
 800123c:	f003 f8c8 	bl	80043d0 <HAL_I2C_Mem_Write>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200005dc 	.word	0x200005dc

0800124c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af04      	add	r7, sp, #16
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	b29b      	uxth	r3, r3
 800125a:	f04f 32ff 	mov.w	r2, #4294967295
 800125e:	9202      	str	r2, [sp, #8]
 8001260:	9301      	str	r3, [sp, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2301      	movs	r3, #1
 8001268:	2240      	movs	r2, #64	; 0x40
 800126a:	2178      	movs	r1, #120	; 0x78
 800126c:	4803      	ldr	r0, [pc, #12]	; (800127c <ssd1306_WriteData+0x30>)
 800126e:	f003 f8af 	bl	80043d0 <HAL_I2C_Mem_Write>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200005dc 	.word	0x200005dc

08001280 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001284:	f7ff ffc2 	bl	800120c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001288:	2064      	movs	r0, #100	; 0x64
 800128a:	f001 fe7b 	bl	8002f84 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800128e:	2000      	movs	r0, #0
 8001290:	f000 fa8a 	bl	80017a8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001294:	2020      	movs	r0, #32
 8001296:	f7ff ffc1 	bl	800121c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800129a:	2000      	movs	r0, #0
 800129c:	f7ff ffbe 	bl	800121c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80012a0:	20b0      	movs	r0, #176	; 0xb0
 80012a2:	f7ff ffbb 	bl	800121c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80012a6:	20c8      	movs	r0, #200	; 0xc8
 80012a8:	f7ff ffb8 	bl	800121c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff ffb5 	bl	800121c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80012b2:	2010      	movs	r0, #16
 80012b4:	f7ff ffb2 	bl	800121c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80012b8:	2040      	movs	r0, #64	; 0x40
 80012ba:	f7ff ffaf 	bl	800121c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80012be:	20ff      	movs	r0, #255	; 0xff
 80012c0:	f000 fa5f 	bl	8001782 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80012c4:	20a1      	movs	r0, #161	; 0xa1
 80012c6:	f7ff ffa9 	bl	800121c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80012ca:	20a6      	movs	r0, #166	; 0xa6
 80012cc:	f7ff ffa6 	bl	800121c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80012d0:	20a8      	movs	r0, #168	; 0xa8
 80012d2:	f7ff ffa3 	bl	800121c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80012d6:	203f      	movs	r0, #63	; 0x3f
 80012d8:	f7ff ffa0 	bl	800121c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80012dc:	20a4      	movs	r0, #164	; 0xa4
 80012de:	f7ff ff9d 	bl	800121c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80012e2:	20d3      	movs	r0, #211	; 0xd3
 80012e4:	f7ff ff9a 	bl	800121c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff ff97 	bl	800121c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80012ee:	20d5      	movs	r0, #213	; 0xd5
 80012f0:	f7ff ff94 	bl	800121c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80012f4:	20f0      	movs	r0, #240	; 0xf0
 80012f6:	f7ff ff91 	bl	800121c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80012fa:	20d9      	movs	r0, #217	; 0xd9
 80012fc:	f7ff ff8e 	bl	800121c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001300:	2022      	movs	r0, #34	; 0x22
 8001302:	f7ff ff8b 	bl	800121c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001306:	20da      	movs	r0, #218	; 0xda
 8001308:	f7ff ff88 	bl	800121c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800130c:	2012      	movs	r0, #18
 800130e:	f7ff ff85 	bl	800121c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001312:	20db      	movs	r0, #219	; 0xdb
 8001314:	f7ff ff82 	bl	800121c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001318:	2020      	movs	r0, #32
 800131a:	f7ff ff7f 	bl	800121c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800131e:	208d      	movs	r0, #141	; 0x8d
 8001320:	f7ff ff7c 	bl	800121c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001324:	2014      	movs	r0, #20
 8001326:	f7ff ff79 	bl	800121c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800132a:	2001      	movs	r0, #1
 800132c:	f000 fa3c 	bl	80017a8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001330:	2000      	movs	r0, #0
 8001332:	f000 f80f 	bl	8001354 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001336:	f000 f831 	bl	800139c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800133a:	4b05      	ldr	r3, [pc, #20]	; (8001350 <ssd1306_Init+0xd0>)
 800133c:	2200      	movs	r2, #0
 800133e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <ssd1306_Init+0xd0>)
 8001342:	2200      	movs	r2, #0
 8001344:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001346:	4b02      	ldr	r3, [pc, #8]	; (8001350 <ssd1306_Init+0xd0>)
 8001348:	2201      	movs	r2, #1
 800134a:	711a      	strb	r2, [r3, #4]
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200005c4 	.word	0x200005c4

08001354 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	e00d      	b.n	8001380 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <ssd1306_Fill+0x1a>
 800136a:	2100      	movs	r1, #0
 800136c:	e000      	b.n	8001370 <ssd1306_Fill+0x1c>
 800136e:	21ff      	movs	r1, #255	; 0xff
 8001370:	4a09      	ldr	r2, [pc, #36]	; (8001398 <ssd1306_Fill+0x44>)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4413      	add	r3, r2
 8001376:	460a      	mov	r2, r1
 8001378:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	3301      	adds	r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8001386:	d3ed      	bcc.n	8001364 <ssd1306_Fill+0x10>
    }
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	200001b4 	.word	0x200001b4

0800139c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013a2:	2300      	movs	r3, #0
 80013a4:	71fb      	strb	r3, [r7, #7]
 80013a6:	e01a      	b.n	80013de <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	3b50      	subs	r3, #80	; 0x50
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ff34 	bl	800121c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80013b4:	2000      	movs	r0, #0
 80013b6:	f7ff ff31 	bl	800121c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80013ba:	2010      	movs	r0, #16
 80013bc:	f7ff ff2e 	bl	800121c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80013c0:	79fa      	ldrb	r2, [r7, #7]
 80013c2:	4613      	mov	r3, r2
 80013c4:	019b      	lsls	r3, r3, #6
 80013c6:	4413      	add	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <ssd1306_UpdateScreen+0x54>)
 80013ce:	4413      	add	r3, r2
 80013d0:	2182      	movs	r1, #130	; 0x82
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ff3a 	bl	800124c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	3301      	adds	r3, #1
 80013dc:	71fb      	strb	r3, [r7, #7]
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2b07      	cmp	r3, #7
 80013e2:	d9e1      	bls.n	80013a8 <ssd1306_UpdateScreen+0xc>
    }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200001b4 	.word	0x200001b4

080013f4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80013f4:	b490      	push	{r4, r7}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
 80013fe:	460b      	mov	r3, r1
 8001400:	71bb      	strb	r3, [r7, #6]
 8001402:	4613      	mov	r3, r2
 8001404:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	2b81      	cmp	r3, #129	; 0x81
 800140a:	d849      	bhi.n	80014a0 <ssd1306_DrawPixel+0xac>
 800140c:	79bb      	ldrb	r3, [r7, #6]
 800140e:	2b3f      	cmp	r3, #63	; 0x3f
 8001410:	d846      	bhi.n	80014a0 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001412:	797b      	ldrb	r3, [r7, #5]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d120      	bne.n	800145a <ssd1306_DrawPixel+0x66>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001418:	79fa      	ldrb	r2, [r7, #7]
 800141a:	79bb      	ldrb	r3, [r7, #6]
 800141c:	08db      	lsrs	r3, r3, #3
 800141e:	b2d8      	uxtb	r0, r3
 8001420:	4601      	mov	r1, r0
 8001422:	460b      	mov	r3, r1
 8001424:	019b      	lsls	r3, r3, #6
 8001426:	440b      	add	r3, r1
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4413      	add	r3, r2
 800142c:	4a1f      	ldr	r2, [pc, #124]	; (80014ac <ssd1306_DrawPixel+0xb8>)
 800142e:	5cd3      	ldrb	r3, [r2, r3]
 8001430:	b25a      	sxtb	r2, r3
 8001432:	79bb      	ldrb	r3, [r7, #6]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	2101      	movs	r1, #1
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	b25b      	sxtb	r3, r3
 8001440:	4313      	orrs	r3, r2
 8001442:	b25c      	sxtb	r4, r3
 8001444:	79fa      	ldrb	r2, [r7, #7]
 8001446:	4601      	mov	r1, r0
 8001448:	460b      	mov	r3, r1
 800144a:	019b      	lsls	r3, r3, #6
 800144c:	440b      	add	r3, r1
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	b2e1      	uxtb	r1, r4
 8001454:	4a15      	ldr	r2, [pc, #84]	; (80014ac <ssd1306_DrawPixel+0xb8>)
 8001456:	54d1      	strb	r1, [r2, r3]
 8001458:	e023      	b.n	80014a2 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800145a:	79fa      	ldrb	r2, [r7, #7]
 800145c:	79bb      	ldrb	r3, [r7, #6]
 800145e:	08db      	lsrs	r3, r3, #3
 8001460:	b2d8      	uxtb	r0, r3
 8001462:	4601      	mov	r1, r0
 8001464:	460b      	mov	r3, r1
 8001466:	019b      	lsls	r3, r3, #6
 8001468:	440b      	add	r3, r1
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4413      	add	r3, r2
 800146e:	4a0f      	ldr	r2, [pc, #60]	; (80014ac <ssd1306_DrawPixel+0xb8>)
 8001470:	5cd3      	ldrb	r3, [r2, r3]
 8001472:	b25a      	sxtb	r2, r3
 8001474:	79bb      	ldrb	r3, [r7, #6]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	2101      	movs	r1, #1
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
 8001480:	b25b      	sxtb	r3, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	b25b      	sxtb	r3, r3
 8001486:	4013      	ands	r3, r2
 8001488:	b25c      	sxtb	r4, r3
 800148a:	79fa      	ldrb	r2, [r7, #7]
 800148c:	4601      	mov	r1, r0
 800148e:	460b      	mov	r3, r1
 8001490:	019b      	lsls	r3, r3, #6
 8001492:	440b      	add	r3, r1
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	b2e1      	uxtb	r1, r4
 800149a:	4a04      	ldr	r2, [pc, #16]	; (80014ac <ssd1306_DrawPixel+0xb8>)
 800149c:	54d1      	strb	r1, [r2, r3]
 800149e:	e000      	b.n	80014a2 <ssd1306_DrawPixel+0xae>
        return;
 80014a0:	bf00      	nop
    }
}
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc90      	pop	{r4, r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	200001b4 	.word	0x200001b4

080014b0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4604      	mov	r4, r0
 80014b8:	1d38      	adds	r0, r7, #4
 80014ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80014be:	461a      	mov	r2, r3
 80014c0:	4623      	mov	r3, r4
 80014c2:	73fb      	strb	r3, [r7, #15]
 80014c4:	4613      	mov	r3, r2
 80014c6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	2b1f      	cmp	r3, #31
 80014cc:	d902      	bls.n	80014d4 <ssd1306_WriteChar+0x24>
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	2b7e      	cmp	r3, #126	; 0x7e
 80014d2:	d901      	bls.n	80014d8 <ssd1306_WriteChar+0x28>
        return 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e06d      	b.n	80015b4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80014d8:	4b38      	ldr	r3, [pc, #224]	; (80015bc <ssd1306_WriteChar+0x10c>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	793b      	ldrb	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	2b82      	cmp	r3, #130	; 0x82
 80014e4:	dc06      	bgt.n	80014f4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80014e6:	4b35      	ldr	r3, [pc, #212]	; (80015bc <ssd1306_WriteChar+0x10c>)
 80014e8:	885b      	ldrh	r3, [r3, #2]
 80014ea:	461a      	mov	r2, r3
 80014ec:	797b      	ldrb	r3, [r7, #5]
 80014ee:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80014f0:	2b40      	cmp	r3, #64	; 0x40
 80014f2:	dd01      	ble.n	80014f8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	e05d      	b.n	80015b4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	e04c      	b.n	8001598 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	3b20      	subs	r3, #32
 8001504:	7979      	ldrb	r1, [r7, #5]
 8001506:	fb01 f303 	mul.w	r3, r1, r3
 800150a:	4619      	mov	r1, r3
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	440b      	add	r3, r1
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4413      	add	r3, r2
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	e034      	b.n	8001588 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d012      	beq.n	8001554 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800152e:	4b23      	ldr	r3, [pc, #140]	; (80015bc <ssd1306_WriteChar+0x10c>)
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	b2da      	uxtb	r2, r3
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4413      	add	r3, r2
 800153a:	b2d8      	uxtb	r0, r3
 800153c:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <ssd1306_WriteChar+0x10c>)
 800153e:	885b      	ldrh	r3, [r3, #2]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4413      	add	r3, r2
 8001548:	b2db      	uxtb	r3, r3
 800154a:	7bba      	ldrb	r2, [r7, #14]
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff ff51 	bl	80013f4 <ssd1306_DrawPixel>
 8001552:	e016      	b.n	8001582 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001554:	4b19      	ldr	r3, [pc, #100]	; (80015bc <ssd1306_WriteChar+0x10c>)
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4413      	add	r3, r2
 8001560:	b2d8      	uxtb	r0, r3
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <ssd1306_WriteChar+0x10c>)
 8001564:	885b      	ldrh	r3, [r3, #2]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	4413      	add	r3, r2
 800156e:	b2d9      	uxtb	r1, r3
 8001570:	7bbb      	ldrb	r3, [r7, #14]
 8001572:	2b00      	cmp	r3, #0
 8001574:	bf0c      	ite	eq
 8001576:	2301      	moveq	r3, #1
 8001578:	2300      	movne	r3, #0
 800157a:	b2db      	uxtb	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	f7ff ff39 	bl	80013f4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	3301      	adds	r3, #1
 8001586:	61bb      	str	r3, [r7, #24]
 8001588:	793b      	ldrb	r3, [r7, #4]
 800158a:	461a      	mov	r2, r3
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	4293      	cmp	r3, r2
 8001590:	d3c5      	bcc.n	800151e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3301      	adds	r3, #1
 8001596:	61fb      	str	r3, [r7, #28]
 8001598:	797b      	ldrb	r3, [r7, #5]
 800159a:	461a      	mov	r2, r3
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	4293      	cmp	r3, r2
 80015a0:	d3ad      	bcc.n	80014fe <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <ssd1306_WriteChar+0x10c>)
 80015a4:	881a      	ldrh	r2, [r3, #0]
 80015a6:	793b      	ldrb	r3, [r7, #4]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	4b03      	ldr	r3, [pc, #12]	; (80015bc <ssd1306_WriteChar+0x10c>)
 80015b0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3724      	adds	r7, #36	; 0x24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd90      	pop	{r4, r7, pc}
 80015bc:	200005c4 	.word	0x200005c4

080015c0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	1d38      	adds	r0, r7, #4
 80015ca:	e880 0006 	stmia.w	r0, {r1, r2}
 80015ce:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80015d0:	e012      	b.n	80015f8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	7818      	ldrb	r0, [r3, #0]
 80015d6:	78fb      	ldrb	r3, [r7, #3]
 80015d8:	1d3a      	adds	r2, r7, #4
 80015da:	ca06      	ldmia	r2, {r1, r2}
 80015dc:	f7ff ff68 	bl	80014b0 <ssd1306_WriteChar>
 80015e0:	4603      	mov	r3, r0
 80015e2:	461a      	mov	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d002      	beq.n	80015f2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	e008      	b.n	8001604 <ssd1306_WriteString+0x44>
        }
        str++;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	3301      	adds	r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1e8      	bne.n	80015d2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	781b      	ldrb	r3, [r3, #0]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	460a      	mov	r2, r1
 8001616:	71fb      	strb	r3, [r7, #7]
 8001618:	4613      	mov	r3, r2
 800161a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	b29a      	uxth	r2, r3
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <ssd1306_SetCursor+0x2c>)
 8001622:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001624:	79bb      	ldrb	r3, [r7, #6]
 8001626:	b29a      	uxth	r2, r3
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <ssd1306_SetCursor+0x2c>)
 800162a:	805a      	strh	r2, [r3, #2]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	200005c4 	.word	0x200005c4

0800163c <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	4604      	mov	r4, r0
 8001644:	4608      	mov	r0, r1
 8001646:	4611      	mov	r1, r2
 8001648:	461a      	mov	r2, r3
 800164a:	4623      	mov	r3, r4
 800164c:	71fb      	strb	r3, [r7, #7]
 800164e:	4603      	mov	r3, r0
 8001650:	71bb      	strb	r3, [r7, #6]
 8001652:	460b      	mov	r3, r1
 8001654:	717b      	strb	r3, [r7, #5]
 8001656:	4613      	mov	r3, r2
 8001658:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 800165a:	797a      	ldrb	r2, [r7, #5]
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	bfb8      	it	lt
 8001664:	425b      	neglt	r3, r3
 8001666:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8001668:	793a      	ldrb	r2, [r7, #4]
 800166a:	79bb      	ldrb	r3, [r7, #6]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	bfb8      	it	lt
 8001672:	425b      	neglt	r3, r3
 8001674:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8001676:	79fa      	ldrb	r2, [r7, #7]
 8001678:	797b      	ldrb	r3, [r7, #5]
 800167a:	429a      	cmp	r2, r3
 800167c:	d201      	bcs.n	8001682 <ssd1306_Line+0x46>
 800167e:	2301      	movs	r3, #1
 8001680:	e001      	b.n	8001686 <ssd1306_Line+0x4a>
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
 8001686:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8001688:	79ba      	ldrb	r2, [r7, #6]
 800168a:	793b      	ldrb	r3, [r7, #4]
 800168c:	429a      	cmp	r2, r3
 800168e:	d201      	bcs.n	8001694 <ssd1306_Line+0x58>
 8001690:	2301      	movs	r3, #1
 8001692:	e001      	b.n	8001698 <ssd1306_Line+0x5c>
 8001694:	f04f 33ff 	mov.w	r3, #4294967295
 8001698:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80016a2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80016a6:	7939      	ldrb	r1, [r7, #4]
 80016a8:	797b      	ldrb	r3, [r7, #5]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fea2 	bl	80013f4 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80016b0:	e024      	b.n	80016fc <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80016b2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80016b6:	79b9      	ldrb	r1, [r7, #6]
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fe9a 	bl	80013f4 <ssd1306_DrawPixel>
        error2 = error * 2;
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	425b      	negs	r3, r3
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	dd08      	ble.n	80016e2 <ssd1306_Line+0xa6>
            error -= deltaY;
 80016d0:	69fa      	ldr	r2, [r7, #28]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	4413      	add	r3, r2
 80016e0:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	da08      	bge.n	80016fc <ssd1306_Line+0xc0>
            error += deltaX;
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	4413      	add	r3, r2
 80016f0:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	79bb      	ldrb	r3, [r7, #6]
 80016f8:	4413      	add	r3, r2
 80016fa:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80016fc:	79fa      	ldrb	r2, [r7, #7]
 80016fe:	797b      	ldrb	r3, [r7, #5]
 8001700:	429a      	cmp	r2, r3
 8001702:	d1d6      	bne.n	80016b2 <ssd1306_Line+0x76>
 8001704:	79ba      	ldrb	r2, [r7, #6]
 8001706:	793b      	ldrb	r3, [r7, #4]
 8001708:	429a      	cmp	r2, r3
 800170a:	d1d2      	bne.n	80016b2 <ssd1306_Line+0x76>
        }
    }
    return;
 800170c:	bf00      	nop
}
 800170e:	3724      	adds	r7, #36	; 0x24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd90      	pop	{r4, r7, pc}

08001714 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b085      	sub	sp, #20
 8001718:	af02      	add	r7, sp, #8
 800171a:	4604      	mov	r4, r0
 800171c:	4608      	mov	r0, r1
 800171e:	4611      	mov	r1, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4623      	mov	r3, r4
 8001724:	71fb      	strb	r3, [r7, #7]
 8001726:	4603      	mov	r3, r0
 8001728:	71bb      	strb	r3, [r7, #6]
 800172a:	460b      	mov	r3, r1
 800172c:	717b      	strb	r3, [r7, #5]
 800172e:	4613      	mov	r3, r2
 8001730:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8001732:	79bc      	ldrb	r4, [r7, #6]
 8001734:	797a      	ldrb	r2, [r7, #5]
 8001736:	79b9      	ldrb	r1, [r7, #6]
 8001738:	79f8      	ldrb	r0, [r7, #7]
 800173a:	7e3b      	ldrb	r3, [r7, #24]
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	4623      	mov	r3, r4
 8001740:	f7ff ff7c 	bl	800163c <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8001744:	793c      	ldrb	r4, [r7, #4]
 8001746:	797a      	ldrb	r2, [r7, #5]
 8001748:	79b9      	ldrb	r1, [r7, #6]
 800174a:	7978      	ldrb	r0, [r7, #5]
 800174c:	7e3b      	ldrb	r3, [r7, #24]
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	4623      	mov	r3, r4
 8001752:	f7ff ff73 	bl	800163c <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8001756:	793c      	ldrb	r4, [r7, #4]
 8001758:	79fa      	ldrb	r2, [r7, #7]
 800175a:	7939      	ldrb	r1, [r7, #4]
 800175c:	7978      	ldrb	r0, [r7, #5]
 800175e:	7e3b      	ldrb	r3, [r7, #24]
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	4623      	mov	r3, r4
 8001764:	f7ff ff6a 	bl	800163c <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8001768:	79bc      	ldrb	r4, [r7, #6]
 800176a:	79fa      	ldrb	r2, [r7, #7]
 800176c:	7939      	ldrb	r1, [r7, #4]
 800176e:	79f8      	ldrb	r0, [r7, #7]
 8001770:	7e3b      	ldrb	r3, [r7, #24]
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	4623      	mov	r3, r4
 8001776:	f7ff ff61 	bl	800163c <ssd1306_Line>

    return;
 800177a:	bf00      	nop
}
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bd90      	pop	{r4, r7, pc}

08001782 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001782:	b580      	push	{r7, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800178c:	2381      	movs	r3, #129	; 0x81
 800178e:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fd42 	bl	800121c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fd3e 	bl	800121c <ssd1306_WriteCommand>
}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80017b8:	23af      	movs	r3, #175	; 0xaf
 80017ba:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <ssd1306_SetDisplayOn+0x38>)
 80017be:	2201      	movs	r2, #1
 80017c0:	715a      	strb	r2, [r3, #5]
 80017c2:	e004      	b.n	80017ce <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80017c4:	23ae      	movs	r3, #174	; 0xae
 80017c6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <ssd1306_SetDisplayOn+0x38>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fd23 	bl	800121c <ssd1306_WriteCommand>
}
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200005c4 	.word	0x200005c4

080017e4 <AS5600_ReadReg>:
	HAL_I2C_Master_Transmit(&hi2c1,AS5600_ADDR,&Data,1,10);	
	HAL_I2C_Mem_Write(&hi2c1,(AS5600_ADDR << 1),Reg,1,&Data,1,100);
}

uint8_t AS5600_ReadReg(uint8_t Reg)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af04      	add	r7, sp, #16
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
	uint8_t DataRead=0;	
 80017ee:	2300      	movs	r3, #0
 80017f0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c1,(AS5600_ADDR << 1),Reg,1,&DataRead,1,100);
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	2364      	movs	r3, #100	; 0x64
 80017f8:	9302      	str	r3, [sp, #8]
 80017fa:	2301      	movs	r3, #1
 80017fc:	9301      	str	r3, [sp, #4]
 80017fe:	f107 030f 	add.w	r3, r7, #15
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	2301      	movs	r3, #1
 8001806:	216c      	movs	r1, #108	; 0x6c
 8001808:	4803      	ldr	r0, [pc, #12]	; (8001818 <AS5600_ReadReg+0x34>)
 800180a:	f002 fedb 	bl	80045c4 <HAL_I2C_Mem_Read>
	
	
	return DataRead;
 800180e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200005dc 	.word	0x200005dc

0800181c <AS5600_GetRawAngle>:
	return (int)((float)(AS5600_ReadReg(ANGLE_L) + (AS5600_ReadReg(ANGLE_H) << 8))/4096*360);	
}


uint16_t AS5600_GetRawAngle()
{
 800181c:	b590      	push	{r4, r7, lr}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
	uint16_t AngleVal=AS5600_ReadReg(RAWANG_L) + (AS5600_ReadReg(RAWANG_H) << 8);
 8001822:	200d      	movs	r0, #13
 8001824:	f7ff ffde 	bl	80017e4 <AS5600_ReadReg>
 8001828:	4603      	mov	r3, r0
 800182a:	b29c      	uxth	r4, r3
 800182c:	200c      	movs	r0, #12
 800182e:	f7ff ffd9 	bl	80017e4 <AS5600_ReadReg>
 8001832:	4603      	mov	r3, r0
 8001834:	b29b      	uxth	r3, r3
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	b29b      	uxth	r3, r3
 800183a:	4423      	add	r3, r4
 800183c:	80fb      	strh	r3, [r7, #6]
	return AngleVal;	
 800183e:	88fb      	ldrh	r3, [r7, #6]
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	bd90      	pop	{r4, r7, pc}

08001848 <AS5600_GetStatus>:

uint8_t AS5600_GetStatus()
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
	return AS5600_ReadReg(STATUS) & 0x38;	
 800184c:	200b      	movs	r0, #11
 800184e:	f7ff ffc9 	bl	80017e4 <AS5600_ReadReg>
 8001852:	4603      	mov	r3, r0
 8001854:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001858:	b2db      	uxtb	r3, r3
}
 800185a:	4618      	mov	r0, r3
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <drawMainMenu>:
    "C1:   C3:  ",
    "C2:   C4:  ",
	"    ADC    "
};

void drawMainMenu() {
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af02      	add	r7, sp, #8

    uint8_t exit = 1;
 8001866:	2301      	movs	r3, #1
 8001868:	71fb      	strb	r3, [r7, #7]
    int8_t  current_item_menu = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	71bb      	strb	r3, [r7, #6]
    ssd1306_Fill(Black);
 800186e:	2000      	movs	r0, #0
 8001870:	f7ff fd70 	bl	8001354 <ssd1306_Fill>
    ssd1306_DrawRectangle(1, 1, 127, 63, White);
 8001874:	2301      	movs	r3, #1
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	233f      	movs	r3, #63	; 0x3f
 800187a:	227f      	movs	r2, #127	; 0x7f
 800187c:	2101      	movs	r1, #1
 800187e:	2001      	movs	r0, #1
 8001880:	f7ff ff48 	bl	8001714 <ssd1306_DrawRectangle>
    udpateDisplay();
 8001884:	f000 f8b4 	bl	80019f0 <udpateDisplay>

    while(exit){ // Вывод главного меню
 8001888:	e0a5      	b.n	80019d6 <drawMainMenu+0x176>
        ssd1306_Fill(Black);
 800188a:	2000      	movs	r0, #0
 800188c:	f7ff fd62 	bl	8001354 <ssd1306_Fill>
        ssd1306_DrawRectangle(1, 1, 127, 63, White);
 8001890:	2301      	movs	r3, #1
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	233f      	movs	r3, #63	; 0x3f
 8001896:	227f      	movs	r2, #127	; 0x7f
 8001898:	2101      	movs	r1, #1
 800189a:	2001      	movs	r0, #1
 800189c:	f7ff ff3a 	bl	8001714 <ssd1306_DrawRectangle>
        udpateDisplay();
 80018a0:	f000 f8a6 	bl	80019f0 <udpateDisplay>
    	if(current_item_menu >= MENU_ITEMS_COUNT )
 80018a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80018a8:	2b06      	cmp	r3, #6
 80018aa:	dd01      	ble.n	80018b0 <drawMainMenu+0x50>
			current_item_menu = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	71bb      	strb	r3, [r7, #6]
    	if(current_item_menu <= 0 )
 80018b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	dc01      	bgt.n	80018bc <drawMainMenu+0x5c>
    	    current_item_menu = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	71bb      	strb	r3, [r7, #6]
    	ssd1306_SetCursor(START_POS_X, START_POS_Y+6);
 80018bc:	2106      	movs	r1, #6
 80018be:	2002      	movs	r0, #2
 80018c0:	f7ff fea4 	bl	800160c <ssd1306_SetCursor>
    		ssd1306_WriteString(menuItems[MENU_ITEMS_COUNT], Font_11x18, White);
 80018c4:	4b48      	ldr	r3, [pc, #288]	; (80019e8 <drawMainMenu+0x188>)
 80018c6:	69d8      	ldr	r0, [r3, #28]
 80018c8:	4a48      	ldr	r2, [pc, #288]	; (80019ec <drawMainMenu+0x18c>)
 80018ca:	2301      	movs	r3, #1
 80018cc:	ca06      	ldmia	r2, {r1, r2}
 80018ce:	f7ff fe77 	bl	80015c0 <ssd1306_WriteString>
    	ssd1306_SetCursor(START_POS_X, START_POS_Y + SIZE_FONT_Y + 5+6);
 80018d2:	211d      	movs	r1, #29
 80018d4:	2002      	movs	r0, #2
 80018d6:	f7ff fe99 	bl	800160c <ssd1306_SetCursor>
    		ssd1306_WriteString(menuItems[current_item_menu], Font_11x18, White);
 80018da:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80018de:	4a42      	ldr	r2, [pc, #264]	; (80019e8 <drawMainMenu+0x188>)
 80018e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018e4:	4a41      	ldr	r2, [pc, #260]	; (80019ec <drawMainMenu+0x18c>)
 80018e6:	2301      	movs	r3, #1
 80018e8:	ca06      	ldmia	r2, {r1, r2}
 80018ea:	f7ff fe69 	bl	80015c0 <ssd1306_WriteString>
    	udpateDisplay();
 80018ee:	f000 f87f 	bl	80019f0 <udpateDisplay>
        buttonEnReset();
 80018f2:	f000 fb07 	bl	8001f04 <buttonEnReset>
        buttonLongReset();
 80018f6:	f000 fb51 	bl	8001f9c <buttonLongReset>
        encoderReset();
 80018fa:	f000 fb7f 	bl	8001ffc <encoderReset>
        HAL_Delay(500);
 80018fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001902:	f001 fb3f 	bl	8002f84 <HAL_Delay>
    	while(1){
    		if(buttonLong()){
 8001906:	f000 fb31 	bl	8001f6c <buttonLong>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d002      	beq.n	8001916 <drawMainMenu+0xb6>
    			// Вернуться на стартовый дисплей
    			exit = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	71fb      	strb	r3, [r7, #7]
    			break;
 8001914:	e05f      	b.n	80019d6 <drawMainMenu+0x176>
    		}
    		if(buttonEn()){// если нажали ввод переходим в подменю
 8001916:	f000 fadd 	bl	8001ed4 <buttonEn>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d03f      	beq.n	80019a0 <drawMainMenu+0x140>
    			HAL_Delay(600);
 8001920:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001924:	f001 fb2e 	bl	8002f84 <HAL_Delay>
        		if(buttonLong()){ // если нажата кнопка подтверждения ждем что это не выход
 8001928:	f000 fb20 	bl	8001f6c <buttonLong>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <drawMainMenu+0xd8>
        			// Вернуться на стартовый дисплей
        			exit = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	71fb      	strb	r3, [r7, #7]
        			break;
 8001936:	e04e      	b.n	80019d6 <drawMainMenu+0x176>
        		}
    		    switch(current_item_menu){
 8001938:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800193c:	2b06      	cmp	r3, #6
 800193e:	d826      	bhi.n	800198e <drawMainMenu+0x12e>
 8001940:	a201      	add	r2, pc, #4	; (adr r2, 8001948 <drawMainMenu+0xe8>)
 8001942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001946:	bf00      	nop
 8001948:	08001965 	.word	0x08001965
 800194c:	0800196b 	.word	0x0800196b
 8001950:	08001971 	.word	0x08001971
 8001954:	08001977 	.word	0x08001977
 8001958:	0800197d 	.word	0x0800197d
 800195c:	08001983 	.word	0x08001983
 8001960:	08001989 	.word	0x08001989
    		    	case 0: drawButtonMenu();	break;
 8001964:	f000 f984 	bl	8001c70 <drawButtonMenu>
 8001968:	e013      	b.n	8001992 <drawMainMenu+0x132>
    		    	case 1: drawLEDMenu(); 		break;
 800196a:	f000 fa65 	bl	8001e38 <drawLEDMenu>
 800196e:	e010      	b.n	8001992 <drawMainMenu+0x132>
    		    	case 2: drawE_inkMenu();	break;
 8001970:	f000 fa6d 	bl	8001e4e <drawE_inkMenu>
 8001974:	e00d      	b.n	8001992 <drawMainMenu+0x132>
    		    	case 3: drawADCMenu();		break;
 8001976:	f000 fa75 	bl	8001e64 <drawADCMenu>
 800197a:	e00a      	b.n	8001992 <drawMainMenu+0x132>
    		    	case 4: drawEncodMenu();	break;
 800197c:	f000 fa7d 	bl	8001e7a <drawEncodMenu>
 8001980:	e007      	b.n	8001992 <drawMainMenu+0x132>
    		    	case 5: drawDACMenu();		break;
 8001982:	f000 fa85 	bl	8001e90 <drawDACMenu>
 8001986:	e004      	b.n	8001992 <drawMainMenu+0x132>
    		    	case 6: drawSettinMenu();	break;
 8001988:	f000 fa8d 	bl	8001ea6 <drawSettinMenu>
 800198c:	e001      	b.n	8001992 <drawMainMenu+0x132>
    		    	default: current_item_menu = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	71bb      	strb	r3, [r7, #6]
    		    }
                buttonEnReset();
 8001992:	f000 fab7 	bl	8001f04 <buttonEnReset>
                buttonLongReset();
 8001996:	f000 fb01 	bl	8001f9c <buttonLongReset>
                encoderReset();
 800199a:	f000 fb2f 	bl	8001ffc <encoderReset>
                break;
 800199e:	e01a      	b.n	80019d6 <drawMainMenu+0x176>
    		}
    		if(encoderData() > 0){
 80019a0:	f000 fb08 	bl	8001fb4 <encoderData>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	dd08      	ble.n	80019bc <drawMainMenu+0x15c>
    			current_item_menu++;
 80019aa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	3301      	adds	r3, #1
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	71bb      	strb	r3, [r7, #6]
    			encoderReset();
 80019b6:	f000 fb21 	bl	8001ffc <encoderReset>
    			break;
 80019ba:	e00c      	b.n	80019d6 <drawMainMenu+0x176>
    		}
    		if(encoderData() < 0){
 80019bc:	f000 fafa 	bl	8001fb4 <encoderData>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	da9f      	bge.n	8001906 <drawMainMenu+0xa6>
    			current_item_menu--;
 80019c6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	3b01      	subs	r3, #1
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	71bb      	strb	r3, [r7, #6]
    			encoderReset();
 80019d2:	f000 fb13 	bl	8001ffc <encoderReset>
    while(exit){ // Вывод главного меню
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f47f af56 	bne.w	800188a <drawMainMenu+0x2a>
    			break;
    		}
    	}
    }

}
 80019de:	bf00      	nop
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000008 	.word	0x20000008
 80019ec:	20000000 	.word	0x20000000

080019f0 <udpateDisplay>:

extern osMutexId_t BlockI2CHandle;

void udpateDisplay(){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	statusMutex = osMutexAcquire(BlockI2CHandle, 1000);
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <udpateDisplay+0x34>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019fc:	4618      	mov	r0, r3
 80019fe:	f00a fa34 	bl	800be6a <osMutexAcquire>
 8001a02:	4603      	mov	r3, r0
 8001a04:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <udpateDisplay+0x38>)
 8001a06:	6013      	str	r3, [r2, #0]
	if(statusMutex == osOK)
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <udpateDisplay+0x38>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <udpateDisplay+0x24>
		ssd1306_UpdateScreen();
 8001a10:	f7ff fcc4 	bl	800139c <ssd1306_UpdateScreen>
	osMutexRelease(BlockI2CHandle);// Освобождение мьютекса
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <udpateDisplay+0x34>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f00a fa71 	bl	800bf00 <osMutexRelease>
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000734 	.word	0x20000734
 8001a28:	200005cc 	.word	0x200005cc
 8001a2c:	00000000 	.word	0x00000000

08001a30 <startDisplay>:
#define STD_WHITESPACE 7 // с учётом линии по краям экрана
int8_t speed = 0;
extern int16_t data_ch[NUM_ADC_CH][SIZE_ADC_BUFF];
extern uint16_t global_DAC;

void startDisplay(){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af02      	add	r7, sp, #8
	// todo сделать отдельную функцию для упрощения
	    ssd1306_Fill(Black);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f7ff fc8c 	bl	8001354 <ssd1306_Fill>
	    ssd1306_Line(0, 1, 128, 1, White);
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2301      	movs	r3, #1
 8001a42:	2280      	movs	r2, #128	; 0x80
 8001a44:	2101      	movs	r1, #1
 8001a46:	2000      	movs	r0, #0
 8001a48:	f7ff fdf8 	bl	800163c <ssd1306_Line>
	    ssd1306_SetCursor(STD_WHITESPACE, STD_WHITESPACE); //
 8001a4c:	2107      	movs	r1, #7
 8001a4e:	2007      	movs	r0, #7
 8001a50:	f7ff fddc 	bl	800160c <ssd1306_SetCursor>
	    ssd1306_WriteString("SPEED:", Font_11x18, White);
 8001a54:	4a7e      	ldr	r2, [pc, #504]	; (8001c50 <startDisplay+0x220>)
 8001a56:	2301      	movs	r3, #1
 8001a58:	ca06      	ldmia	r2, {r1, r2}
 8001a5a:	487e      	ldr	r0, [pc, #504]	; (8001c54 <startDisplay+0x224>)
 8001a5c:	f7ff fdb0 	bl	80015c0 <ssd1306_WriteString>
	    // х-отступ для линии у-отступ линии плюс ширина текста
	 	ssd1306_SetCursor(STD_WHITESPACE, STD_WHITESPACE+SIZE_FONT_Y);
 8001a60:	2119      	movs	r1, #25
 8001a62:	2007      	movs	r0, #7
 8001a64:	f7ff fdd2 	bl	800160c <ssd1306_SetCursor>
	 	ssd1306_WriteString("CUR:", Font_11x18, White);
 8001a68:	4a79      	ldr	r2, [pc, #484]	; (8001c50 <startDisplay+0x220>)
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	ca06      	ldmia	r2, {r1, r2}
 8001a6e:	487a      	ldr	r0, [pc, #488]	; (8001c58 <startDisplay+0x228>)
 8001a70:	f7ff fda6 	bl	80015c0 <ssd1306_WriteString>
	 	ssd1306_SetCursor(STD_WHITESPACE, STD_WHITESPACE+SIZE_FONT_Y*2); //
 8001a74:	212b      	movs	r1, #43	; 0x2b
 8001a76:	2007      	movs	r0, #7
 8001a78:	f7ff fdc8 	bl	800160c <ssd1306_SetCursor>
	 	ssd1306_WriteString("Vout:", Font_11x18, White);
 8001a7c:	4a74      	ldr	r2, [pc, #464]	; (8001c50 <startDisplay+0x220>)
 8001a7e:	2301      	movs	r3, #1
 8001a80:	ca06      	ldmia	r2, {r1, r2}
 8001a82:	4876      	ldr	r0, [pc, #472]	; (8001c5c <startDisplay+0x22c>)
 8001a84:	f7ff fd9c 	bl	80015c0 <ssd1306_WriteString>
	 	ssd1306_Line(0, 63, 128, 63, White);
 8001a88:	2301      	movs	r3, #1
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	233f      	movs	r3, #63	; 0x3f
 8001a8e:	2280      	movs	r2, #128	; 0x80
 8001a90:	213f      	movs	r1, #63	; 0x3f
 8001a92:	2000      	movs	r0, #0
 8001a94:	f7ff fdd2 	bl	800163c <ssd1306_Line>
	 	udpateDisplay();
 8001a98:	f7ff ffaa 	bl	80019f0 <udpateDisplay>
	 	uint16_t current_Vout;
	 	char symSpeed[5];
	 	char symCurrent[5];
	 	char symVout[5];
	 	while(1){
	 		HAL_Delay(350);
 8001a9c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001aa0:	f001 fa70 	bl	8002f84 <HAL_Delay>
	 		if(buttonLong()){
 8001aa4:	f000 fa62 	bl	8001f6c <buttonLong>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d004      	beq.n	8001ab8 <startDisplay+0x88>
	 			speed = 0;
 8001aae:	4b6c      	ldr	r3, [pc, #432]	; (8001c60 <startDisplay+0x230>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	701a      	strb	r2, [r3, #0]
	 			buttonLongReset();
 8001ab4:	f000 fa72 	bl	8001f9c <buttonLongReset>
	 		}
	 		if(encoderData() > 0){
 8001ab8:	f000 fa7c 	bl	8001fb4 <encoderData>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	dd12      	ble.n	8001ae8 <startDisplay+0xb8>
	 			encoderReset();
 8001ac2:	f000 fa9b 	bl	8001ffc <encoderReset>
	 		 	speed++;
 8001ac6:	4b66      	ldr	r3, [pc, #408]	; (8001c60 <startDisplay+0x230>)
 8001ac8:	f993 3000 	ldrsb.w	r3, [r3]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	3301      	adds	r3, #1
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	b25a      	sxtb	r2, r3
 8001ad4:	4b62      	ldr	r3, [pc, #392]	; (8001c60 <startDisplay+0x230>)
 8001ad6:	701a      	strb	r2, [r3, #0]
	 		 	if(speed >= MAX_SPEED)
 8001ad8:	4b61      	ldr	r3, [pc, #388]	; (8001c60 <startDisplay+0x230>)
 8001ada:	f993 3000 	ldrsb.w	r3, [r3]
 8001ade:	2b31      	cmp	r3, #49	; 0x31
 8001ae0:	dd02      	ble.n	8001ae8 <startDisplay+0xb8>
	 		 		speed = MAX_SPEED;
 8001ae2:	4b5f      	ldr	r3, [pc, #380]	; (8001c60 <startDisplay+0x230>)
 8001ae4:	2232      	movs	r2, #50	; 0x32
 8001ae6:	701a      	strb	r2, [r3, #0]
	 		}
	 		if(encoderData() < 0){
 8001ae8:	f000 fa64 	bl	8001fb4 <encoderData>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	da13      	bge.n	8001b1a <startDisplay+0xea>
	 			encoderReset();
 8001af2:	f000 fa83 	bl	8001ffc <encoderReset>
	 		 	speed--;
 8001af6:	4b5a      	ldr	r3, [pc, #360]	; (8001c60 <startDisplay+0x230>)
 8001af8:	f993 3000 	ldrsb.w	r3, [r3]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	b25a      	sxtb	r2, r3
 8001b04:	4b56      	ldr	r3, [pc, #344]	; (8001c60 <startDisplay+0x230>)
 8001b06:	701a      	strb	r2, [r3, #0]
	 		 	if(speed <= MIN_SPEED)
 8001b08:	4b55      	ldr	r3, [pc, #340]	; (8001c60 <startDisplay+0x230>)
 8001b0a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b0e:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8001b12:	da02      	bge.n	8001b1a <startDisplay+0xea>
	 		 		speed = MIN_SPEED;
 8001b14:	4b52      	ldr	r3, [pc, #328]	; (8001c60 <startDisplay+0x230>)
 8001b16:	22ce      	movs	r2, #206	; 0xce
 8001b18:	701a      	strb	r2, [r3, #0]
	 		}
	 		global_DAC = 1500 + (SPEED_STEP*speed);
 8001b1a:	4b51      	ldr	r3, [pc, #324]	; (8001c60 <startDisplay+0x230>)
 8001b1c:	f993 3000 	ldrsb.w	r3, [r3]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	461a      	mov	r2, r3
 8001b24:	0112      	lsls	r2, r2, #4
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	4b4c      	ldr	r3, [pc, #304]	; (8001c64 <startDisplay+0x234>)
 8001b34:	801a      	strh	r2, [r3, #0]

	 		itoa(current_speed  , symSpeed  , 10);
 8001b36:	8bfb      	ldrh	r3, [r7, #30]
 8001b38:	f107 0114 	add.w	r1, r7, #20
 8001b3c:	220a      	movs	r2, #10
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f00d ff18 	bl	800f974 <itoa>
	 		itoa(current_current, symCurrent, 10);
 8001b44:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b48:	f107 010c 	add.w	r1, r7, #12
 8001b4c:	220a      	movs	r2, #10
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f00d ff10 	bl	800f974 <itoa>
	 		itoa(current_Vout   , symVout   , 10);
 8001b54:	8b7b      	ldrh	r3, [r7, #26]
 8001b56:	1d39      	adds	r1, r7, #4
 8001b58:	220a      	movs	r2, #10
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f00d ff0a 	bl	800f974 <itoa>
	 		current_speed = speed;
 8001b60:	4b3f      	ldr	r3, [pc, #252]	; (8001c60 <startDisplay+0x230>)
 8001b62:	f993 3000 	ldrsb.w	r3, [r3]
 8001b66:	83fb      	strh	r3, [r7, #30]
	 		current_current = (((aver_mass(data_ch[2])* ADC_TO_V)-1500)*V_TO_A)-3900;
 8001b68:	483f      	ldr	r0, [pc, #252]	; (8001c68 <startDisplay+0x238>)
 8001b6a:	f000 ff77 	bl	8002a5c <aver_mass>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fc87 	bl	8000484 <__aeabi_i2d>
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001b7e:	f7fe fceb 	bl	8000558 <__aeabi_dmul>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	a32b      	add	r3, pc, #172	; (adr r3, 8001c38 <startDisplay+0x208>)
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	f7fe fb2a 	bl	80001e8 <__aeabi_dsub>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	a328      	add	r3, pc, #160	; (adr r3, 8001c40 <startDisplay+0x210>)
 8001b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba2:	f7fe fcd9 	bl	8000558 <__aeabi_dmul>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	a326      	add	r3, pc, #152	; (adr r3, 8001c48 <startDisplay+0x218>)
 8001bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb4:	f7fe fb18 	bl	80001e8 <__aeabi_dsub>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f7fe fedc 	bl	800097c <__aeabi_d2iz>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	83bb      	strh	r3, [r7, #28]
	 		current_Vout = aver_mass(data_ch[1]) * ADC_TO_V;
 8001bc8:	4828      	ldr	r0, [pc, #160]	; (8001c6c <startDisplay+0x23c>)
 8001bca:	f000 ff47 	bl	8002a5c <aver_mass>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fc57 	bl	8000484 <__aeabi_i2d>
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001bde:	f7fe fcbb 	bl	8000558 <__aeabi_dmul>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4610      	mov	r0, r2
 8001be8:	4619      	mov	r1, r3
 8001bea:	f7fe feef 	bl	80009cc <__aeabi_d2uiz>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	837b      	strh	r3, [r7, #26]
	 		// х-линейный отступ плюс слово speed: 6 символов+1символ для знака : Вывод скорости
	 		ssd1306_SetCursor(STD_WHITESPACE + SIZE_FONT_X * 7, STD_WHITESPACE );
 8001bf2:	2107      	movs	r1, #7
 8001bf4:	2054      	movs	r0, #84	; 0x54
 8001bf6:	f7ff fd09 	bl	800160c <ssd1306_SetCursor>
	 			ssd1306_WriteString(symSpeed, Font_11x18, White);
 8001bfa:	4a15      	ldr	r2, [pc, #84]	; (8001c50 <startDisplay+0x220>)
 8001bfc:	f107 0014 	add.w	r0, r7, #20
 8001c00:	2301      	movs	r3, #1
 8001c02:	ca06      	ldmia	r2, {r1, r2}
 8001c04:	f7ff fcdc 	bl	80015c0 <ssd1306_WriteString>
	 		// х-линейный отступ плюс слово cur: 4 символов+1символ для знака : Вывод тока
	 		ssd1306_SetCursor(STD_WHITESPACE + SIZE_FONT_X * 5, STD_WHITESPACE + SIZE_FONT_Y);
 8001c08:	2119      	movs	r1, #25
 8001c0a:	203e      	movs	r0, #62	; 0x3e
 8001c0c:	f7ff fcfe 	bl	800160c <ssd1306_SetCursor>
	 			ssd1306_WriteString(symCurrent, Font_11x18, White);
 8001c10:	4a0f      	ldr	r2, [pc, #60]	; (8001c50 <startDisplay+0x220>)
 8001c12:	f107 000c 	add.w	r0, r7, #12
 8001c16:	2301      	movs	r3, #1
 8001c18:	ca06      	ldmia	r2, {r1, r2}
 8001c1a:	f7ff fcd1 	bl	80015c0 <ssd1306_WriteString>
	 		// х-линейный отступ плюс слово Vout: 5 символов : Вывод напряжения управления
	 		ssd1306_SetCursor(STD_WHITESPACE + SIZE_FONT_X * 5, STD_WHITESPACE + SIZE_FONT_Y*2);
 8001c1e:	212b      	movs	r1, #43	; 0x2b
 8001c20:	203e      	movs	r0, #62	; 0x3e
 8001c22:	f7ff fcf3 	bl	800160c <ssd1306_SetCursor>
	 			ssd1306_WriteString(symVout, Font_11x18, White);
 8001c26:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <startDisplay+0x220>)
 8001c28:	1d38      	adds	r0, r7, #4
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	ca06      	ldmia	r2, {r1, r2}
 8001c2e:	f7ff fcc7 	bl	80015c0 <ssd1306_WriteString>
	 		udpateDisplay();
 8001c32:	f7ff fedd 	bl	80019f0 <udpateDisplay>
	 	while(1){
 8001c36:	e731      	b.n	8001a9c <startDisplay+0x6c>
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	40977000 	.word	0x40977000
 8001c40:	55555555 	.word	0x55555555
 8001c44:	40475555 	.word	0x40475555
 8001c48:	00000000 	.word	0x00000000
 8001c4c:	40ae7800 	.word	0x40ae7800
 8001c50:	20000000 	.word	0x20000000
 8001c54:	0800feac 	.word	0x0800feac
 8001c58:	0800feb4 	.word	0x0800feb4
 8001c5c:	0800febc 	.word	0x0800febc
 8001c60:	200005d5 	.word	0x200005d5
 8001c64:	200005da 	.word	0x200005da
 8001c68:	200007e8 	.word	0x200007e8
 8001c6c:	200007d4 	.word	0x200007d4

08001c70 <drawButtonMenu>:
	 	}
  }

// Тестовая функция для проверки кнопок  готова
void drawButtonMenu(){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
	uint8_t butEn = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	75fb      	strb	r3, [r7, #23]
	uint8_t butLo = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	75bb      	strb	r3, [r7, #22]
	uint8_t encodP = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	757b      	strb	r3, [r7, #21]
	uint8_t encodM = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	753b      	strb	r3, [r7, #20]

	char sym_butEn[1];
	char sym_butLo[1];
	char sym_encP[1];
	char sym_encM[1];
	buttonEnReset();
 8001c86:	f000 f93d 	bl	8001f04 <buttonEnReset>
	buttonLongReset();
 8001c8a:	f000 f987 	bl	8001f9c <buttonLongReset>
	encoderReset();
 8001c8e:	f000 f9b5 	bl	8001ffc <encoderReset>

	ssd1306_Fill(Black);
 8001c92:	2000      	movs	r0, #0
 8001c94:	f7ff fb5e 	bl	8001354 <ssd1306_Fill>
	ssd1306_SetCursor(START_POS_X, START_POS_Y);
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2002      	movs	r0, #2
 8001c9c:	f7ff fcb6 	bl	800160c <ssd1306_SetCursor>
		ssd1306_WriteString(menuButton[2], Font_11x18, White);
 8001ca0:	4b62      	ldr	r3, [pc, #392]	; (8001e2c <drawButtonMenu+0x1bc>)
 8001ca2:	6898      	ldr	r0, [r3, #8]
 8001ca4:	4a62      	ldr	r2, [pc, #392]	; (8001e30 <drawButtonMenu+0x1c0>)
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	ca06      	ldmia	r2, {r1, r2}
 8001caa:	f7ff fc89 	bl	80015c0 <ssd1306_WriteString>
	ssd1306_SetCursor(START_POS_X, START_POS_Y + SIZE_FONT_Y);
 8001cae:	2112      	movs	r1, #18
 8001cb0:	2002      	movs	r0, #2
 8001cb2:	f7ff fcab 	bl	800160c <ssd1306_SetCursor>
		ssd1306_WriteString(menuButton[0], Font_11x18, White);
 8001cb6:	4b5d      	ldr	r3, [pc, #372]	; (8001e2c <drawButtonMenu+0x1bc>)
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	4a5d      	ldr	r2, [pc, #372]	; (8001e30 <drawButtonMenu+0x1c0>)
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	ca06      	ldmia	r2, {r1, r2}
 8001cc0:	f7ff fc7e 	bl	80015c0 <ssd1306_WriteString>
	ssd1306_SetCursor(START_POS_X, START_POS_Y + SIZE_FONT_Y*2);
 8001cc4:	2124      	movs	r1, #36	; 0x24
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f7ff fca0 	bl	800160c <ssd1306_SetCursor>
		ssd1306_WriteString(menuButton[1], Font_11x18, White);
 8001ccc:	4b57      	ldr	r3, [pc, #348]	; (8001e2c <drawButtonMenu+0x1bc>)
 8001cce:	6858      	ldr	r0, [r3, #4]
 8001cd0:	4a57      	ldr	r2, [pc, #348]	; (8001e30 <drawButtonMenu+0x1c0>)
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	ca06      	ldmia	r2, {r1, r2}
 8001cd6:	f7ff fc73 	bl	80015c0 <ssd1306_WriteString>

	while(1){
		if(buttonEn() == ON){
 8001cda:	f000 f8fb 	bl	8001ed4 <buttonEn>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d104      	bne.n	8001cee <drawButtonMenu+0x7e>
			buttonEnReset();
 8001ce4:	f000 f90e 	bl	8001f04 <buttonEnReset>
			butEn++;
 8001ce8:	7dfb      	ldrb	r3, [r7, #23]
 8001cea:	3301      	adds	r3, #1
 8001cec:	75fb      	strb	r3, [r7, #23]
		}
		if(buttonLong() == ON){
 8001cee:	f000 f93d 	bl	8001f6c <buttonLong>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d104      	bne.n	8001d02 <drawButtonMenu+0x92>
			buttonLongReset();
 8001cf8:	f000 f950 	bl	8001f9c <buttonLongReset>
			butLo++;
 8001cfc:	7dbb      	ldrb	r3, [r7, #22]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	75bb      	strb	r3, [r7, #22]
		}
		if(encoderData() > 0){
 8001d02:	f000 f957 	bl	8001fb4 <encoderData>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	dd04      	ble.n	8001d16 <drawButtonMenu+0xa6>
			encoderReset();
 8001d0c:	f000 f976 	bl	8001ffc <encoderReset>
			encodP++;
 8001d10:	7d7b      	ldrb	r3, [r7, #21]
 8001d12:	3301      	adds	r3, #1
 8001d14:	757b      	strb	r3, [r7, #21]
		}
		if(encoderData() < 0){
 8001d16:	f000 f94d 	bl	8001fb4 <encoderData>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	da04      	bge.n	8001d2a <drawButtonMenu+0xba>
			encoderReset();
 8001d20:	f000 f96c 	bl	8001ffc <encoderReset>
			encodM++;
 8001d24:	7d3b      	ldrb	r3, [r7, #20]
 8001d26:	3301      	adds	r3, #1
 8001d28:	753b      	strb	r3, [r7, #20]
		}
		encodM %=10;
 8001d2a:	7d3a      	ldrb	r2, [r7, #20]
 8001d2c:	4b41      	ldr	r3, [pc, #260]	; (8001e34 <drawButtonMenu+0x1c4>)
 8001d2e:	fba3 1302 	umull	r1, r3, r3, r2
 8001d32:	08d9      	lsrs	r1, r3, #3
 8001d34:	460b      	mov	r3, r1
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	753b      	strb	r3, [r7, #20]
		encodP %=10;
 8001d40:	7d7a      	ldrb	r2, [r7, #21]
 8001d42:	4b3c      	ldr	r3, [pc, #240]	; (8001e34 <drawButtonMenu+0x1c4>)
 8001d44:	fba3 1302 	umull	r1, r3, r3, r2
 8001d48:	08d9      	lsrs	r1, r3, #3
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	440b      	add	r3, r1
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	757b      	strb	r3, [r7, #21]

		butEn = butEn % 10;
 8001d56:	7dfa      	ldrb	r2, [r7, #23]
 8001d58:	4b36      	ldr	r3, [pc, #216]	; (8001e34 <drawButtonMenu+0x1c4>)
 8001d5a:	fba3 1302 	umull	r1, r3, r3, r2
 8001d5e:	08d9      	lsrs	r1, r3, #3
 8001d60:	460b      	mov	r3, r1
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	75fb      	strb	r3, [r7, #23]
		butLo = butLo % 10;
 8001d6c:	7dba      	ldrb	r2, [r7, #22]
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <drawButtonMenu+0x1c4>)
 8001d70:	fba3 1302 	umull	r1, r3, r3, r2
 8001d74:	08d9      	lsrs	r1, r3, #3
 8001d76:	460b      	mov	r3, r1
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	75bb      	strb	r3, [r7, #22]

		itoa(butEn, sym_butEn, 10);
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
 8001d84:	f107 0110 	add.w	r1, r7, #16
 8001d88:	220a      	movs	r2, #10
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f00d fdf2 	bl	800f974 <itoa>
		itoa(butLo, sym_butLo, 10);
 8001d90:	7dbb      	ldrb	r3, [r7, #22]
 8001d92:	f107 010c 	add.w	r1, r7, #12
 8001d96:	220a      	movs	r2, #10
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f00d fdeb 	bl	800f974 <itoa>
		itoa(encodM, sym_encM, 10);
 8001d9e:	7d3b      	ldrb	r3, [r7, #20]
 8001da0:	1d39      	adds	r1, r7, #4
 8001da2:	220a      	movs	r2, #10
 8001da4:	4618      	mov	r0, r3
 8001da6:	f00d fde5 	bl	800f974 <itoa>
		itoa(encodP, sym_encP, 10);
 8001daa:	7d7b      	ldrb	r3, [r7, #21]
 8001dac:	f107 0108 	add.w	r1, r7, #8
 8001db0:	220a      	movs	r2, #10
 8001db2:	4618      	mov	r0, r3
 8001db4:	f00d fdde 	bl	800f974 <itoa>

		ssd1306_SetCursor(SIZE_FONT_X * 4, START_POS_Y + SIZE_FONT_Y);
 8001db8:	2112      	movs	r1, #18
 8001dba:	202c      	movs	r0, #44	; 0x2c
 8001dbc:	f7ff fc26 	bl	800160c <ssd1306_SetCursor>
			ssd1306_WriteString(sym_butLo, Font_11x18, White);
 8001dc0:	4a1b      	ldr	r2, [pc, #108]	; (8001e30 <drawButtonMenu+0x1c0>)
 8001dc2:	f107 000c 	add.w	r0, r7, #12
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	ca06      	ldmia	r2, {r1, r2}
 8001dca:	f7ff fbf9 	bl	80015c0 <ssd1306_WriteString>
		ssd1306_SetCursor(SIZE_FONT_X * 10, START_POS_Y + SIZE_FONT_Y);
 8001dce:	2112      	movs	r1, #18
 8001dd0:	206e      	movs	r0, #110	; 0x6e
 8001dd2:	f7ff fc1b 	bl	800160c <ssd1306_SetCursor>
			ssd1306_WriteString(sym_butEn, Font_11x18, White);
 8001dd6:	4a16      	ldr	r2, [pc, #88]	; (8001e30 <drawButtonMenu+0x1c0>)
 8001dd8:	f107 0010 	add.w	r0, r7, #16
 8001ddc:	2301      	movs	r3, #1
 8001dde:	ca06      	ldmia	r2, {r1, r2}
 8001de0:	f7ff fbee 	bl	80015c0 <ssd1306_WriteString>
		ssd1306_SetCursor(SIZE_FONT_X * 4, START_POS_Y + SIZE_FONT_Y*2);
 8001de4:	2124      	movs	r1, #36	; 0x24
 8001de6:	202c      	movs	r0, #44	; 0x2c
 8001de8:	f7ff fc10 	bl	800160c <ssd1306_SetCursor>
			ssd1306_WriteString(sym_encM, Font_11x18, White);
 8001dec:	4a10      	ldr	r2, [pc, #64]	; (8001e30 <drawButtonMenu+0x1c0>)
 8001dee:	1d38      	adds	r0, r7, #4
 8001df0:	2301      	movs	r3, #1
 8001df2:	ca06      	ldmia	r2, {r1, r2}
 8001df4:	f7ff fbe4 	bl	80015c0 <ssd1306_WriteString>
		ssd1306_SetCursor(SIZE_FONT_X * 10, START_POS_Y + SIZE_FONT_Y*2);
 8001df8:	2124      	movs	r1, #36	; 0x24
 8001dfa:	206e      	movs	r0, #110	; 0x6e
 8001dfc:	f7ff fc06 	bl	800160c <ssd1306_SetCursor>
			ssd1306_WriteString(sym_encP, Font_11x18, White);
 8001e00:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <drawButtonMenu+0x1c0>)
 8001e02:	f107 0008 	add.w	r0, r7, #8
 8001e06:	2301      	movs	r3, #1
 8001e08:	ca06      	ldmia	r2, {r1, r2}
 8001e0a:	f7ff fbd9 	bl	80015c0 <ssd1306_WriteString>

		udpateDisplay();
 8001e0e:	f7ff fdef 	bl	80019f0 <udpateDisplay>
		HAL_Delay(50);
 8001e12:	2032      	movs	r0, #50	; 0x32
 8001e14:	f001 f8b6 	bl	8002f84 <HAL_Delay>
		if(butLo > 2)
 8001e18:	7dbb      	ldrb	r3, [r7, #22]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d800      	bhi.n	8001e20 <drawButtonMenu+0x1b0>
		if(buttonEn() == ON){
 8001e1e:	e75c      	b.n	8001cda <drawButtonMenu+0x6a>
			break;
 8001e20:	bf00      	nop
	}
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000028 	.word	0x20000028
 8001e30:	20000000 	.word	0x20000000
 8001e34:	cccccccd 	.word	0xcccccccd

08001e38 <drawLEDMenu>:

void drawLEDMenu(){
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
	uint8_t currentLed = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	71fb      	strb	r3, [r7, #7]
	uint8_t red,grn,blu;
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <drawE_inkMenu>:

void drawE_inkMenu(){
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
	uint8_t exit = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	71fb      	strb	r3, [r7, #7]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <drawADCMenu>:

void drawADCMenu(){
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
	uint8_t exit = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	71fb      	strb	r3, [r7, #7]
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <drawEncodMenu>:
void drawEncodMenu(){
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
	uint8_t exit = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	71fb      	strb	r3, [r7, #7]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <drawDACMenu>:
void drawDACMenu(){
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0

	uint8_t exit = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	71fb      	strb	r3, [r7, #7]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <drawSettinMenu>:
void drawSettinMenu(){
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
	uint8_t exit = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	71fb      	strb	r3, [r7, #7]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <buttonUpSet>:

uint8_t buttonUp(){
	return buttonUpper;
}
void buttonUpSet(){
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
	buttonUpper = 1;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <buttonUpSet+0x14>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
}
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	200005d0 	.word	0x200005d0

08001ed4 <buttonEn>:
void buttonUpReset(){
	buttonUpper = 0;
}

uint8_t buttonEn(){
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
	return buttonEnable;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <buttonEn+0x14>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	200005d1 	.word	0x200005d1

08001eec <buttonEnSet>:
void buttonEnSet(){
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
	buttonEnable = 1;
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <buttonEnSet+0x14>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	200005d1 	.word	0x200005d1

08001f04 <buttonEnReset>:
void buttonEnReset(){
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
	buttonEnable = 0;
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <buttonEnReset+0x14>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	200005d1 	.word	0x200005d1

08001f1c <buttonCounter>:

uint8_t buttonCounter(){
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
	return button_counter;
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <buttonCounter+0x14>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	200005d2 	.word	0x200005d2

08001f34 <buttonCounterSet>:
void buttonCounterSet(){
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
	button_counter++;
 8001f38:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <buttonCounterSet+0x1c>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <buttonCounterSet+0x1c>)
 8001f42:	701a      	strb	r2, [r3, #0]
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	200005d2 	.word	0x200005d2

08001f54 <buttonCounterReset>:

void buttonCounterReset(){
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
	button_counter = 0;
 8001f58:	4b03      	ldr	r3, [pc, #12]	; (8001f68 <buttonCounterReset+0x14>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	200005d2 	.word	0x200005d2

08001f6c <buttonLong>:

uint8_t buttonLong(){
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
	return button_long;
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <buttonLong+0x14>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	200005d3 	.word	0x200005d3

08001f84 <buttonLongSet>:
void buttonLongSet(){
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
	button_long = 1;
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <buttonLongSet+0x14>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	200005d3 	.word	0x200005d3

08001f9c <buttonLongReset>:
void buttonLongReset(){
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
	button_long = 0;
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <buttonLongReset+0x14>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
}
 8001fa6:	bf00      	nop
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	200005d3 	.word	0x200005d3

08001fb4 <encoderData>:

int8_t encoderData(){
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
	return encoderAS56;
 8001fb8:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <encoderData+0x14>)
 8001fba:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	200005d4 	.word	0x200005d4

08001fcc <encoderSetUp>:
void encoderSetUp(){
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
	encoderAS56 = 1;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <encoderSetUp+0x14>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	701a      	strb	r2, [r3, #0]
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	200005d4 	.word	0x200005d4

08001fe4 <encoderSetDown>:

void encoderSetDown(){
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
	encoderAS56 = -1;
 8001fe8:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <encoderSetDown+0x14>)
 8001fea:	22ff      	movs	r2, #255	; 0xff
 8001fec:	701a      	strb	r2, [r3, #0]
}
 8001fee:	bf00      	nop
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	200005d4 	.word	0x200005d4

08001ffc <encoderReset>:

void encoderReset(){
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
	encoderAS56 = 0;
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <encoderReset+0x14>)
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
}
 8002006:	bf00      	nop
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	200005d4 	.word	0x200005d4

08002014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002018:	f000 ff72 	bl	8002f00 <HAL_Init>
  //MCP4725 myMCP4725;
  //MCP4725_setValue(&myMCP4725, 2048, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800201c:	f000 f854 	bl	80020c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002020:	f000 f9b2 	bl	8002388 <MX_GPIO_Init>
  MX_DMA_Init();
 8002024:	f000 f990 	bl	8002348 <MX_DMA_Init>
  MX_I2C1_Init();
 8002028:	f000 f8b6 	bl	8002198 <MX_I2C1_Init>
  MX_SPI1_Init();
 800202c:	f000 f8e2 	bl	80021f4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002030:	f000 f916 	bl	8002260 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  test_i2c_dev(); // Определяем что все устройства на линии i2c подключены
 8002034:	f000 fa2e 	bl	8002494 <test_i2c_dev>
  ssd1306_Init();
 8002038:	f7ff f922 	bl	8001280 <ssd1306_Init>
  ssd1306_SetCursor(5, 10);
 800203c:	210a      	movs	r1, #10
 800203e:	2005      	movs	r0, #5
 8002040:	f7ff fae4 	bl	800160c <ssd1306_SetCursor>
  ssd1306_WriteString("JetPro,Bro!", Font_11x18, White);
 8002044:	4a18      	ldr	r2, [pc, #96]	; (80020a8 <main+0x94>)
 8002046:	2301      	movs	r3, #1
 8002048:	ca06      	ldmia	r2, {r1, r2}
 800204a:	4818      	ldr	r0, [pc, #96]	; (80020ac <main+0x98>)
 800204c:	f7ff fab8 	bl	80015c0 <ssd1306_WriteString>
  ssd1306_SetCursor(3, 40);
 8002050:	2128      	movs	r1, #40	; 0x28
 8002052:	2003      	movs	r0, #3
 8002054:	f7ff fada 	bl	800160c <ssd1306_SetCursor>
  ssd1306_WriteString(" Tap Start ", Font_11x18, White);
 8002058:	4a13      	ldr	r2, [pc, #76]	; (80020a8 <main+0x94>)
 800205a:	2301      	movs	r3, #1
 800205c:	ca06      	ldmia	r2, {r1, r2}
 800205e:	4814      	ldr	r0, [pc, #80]	; (80020b0 <main+0x9c>)
 8002060:	f7ff faae 	bl	80015c0 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8002064:	f7ff f99a 	bl	800139c <ssd1306_UpdateScreen>
  BlockI2CHandle = osMutexNew(&BlockI2C_attributes);
 8002068:	4812      	ldr	r0, [pc, #72]	; (80020b4 <main+0xa0>)
 800206a:	f009 fe78 	bl	800bd5e <osMutexNew>
 800206e:	4603      	mov	r3, r0
 8002070:	4a11      	ldr	r2, [pc, #68]	; (80020b8 <main+0xa4>)
 8002072:	6013      	str	r3, [r2, #0]
  //osStatus_t status = osMutexAcquire(BlockI2CHandle, 1000);
  //osMutexRelease (BlockI2CHandle);

  HAL_Delay(1000);
 8002074:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002078:	f000 ff84 	bl	8002f84 <HAL_Delay>
  //EPD_WhiteScreen_ALL_Clean();
  //EPD_DeepSleep(); //Enter deep sleep,Sleep instruction is necessary, please do not delete!!!
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800207c:	f009 fd78 	bl	800bb70 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of BlockI2C */
  BlockI2CHandle = osMutexNew(&BlockI2C_attributes);
 8002080:	480c      	ldr	r0, [pc, #48]	; (80020b4 <main+0xa0>)
 8002082:	f009 fe6c 	bl	800bd5e <osMutexNew>
 8002086:	4603      	mov	r3, r0
 8002088:	4a0b      	ldr	r2, [pc, #44]	; (80020b8 <main+0xa4>)
 800208a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of EmptyTask */
  EmptyTaskHandle = osThreadNew(StartEmptyTask, NULL, &EmptyTask_attributes);
 800208c:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <main+0xa8>)
 800208e:	2100      	movs	r1, #0
 8002090:	480b      	ldr	r0, [pc, #44]	; (80020c0 <main+0xac>)
 8002092:	f009 fdb7 	bl	800bc04 <osThreadNew>
 8002096:	4603      	mov	r3, r0
 8002098:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <main+0xb0>)
 800209a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  initUserTasks();
 800209c:	f000 fee6 	bl	8002e6c <initUserTasks>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80020a0:	f009 fd8a 	bl	800bbb8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80020a4:	e7fe      	b.n	80020a4 <main+0x90>
 80020a6:	bf00      	nop
 80020a8:	20000000 	.word	0x20000000
 80020ac:	0800fedc 	.word	0x0800fedc
 80020b0:	0800fee8 	.word	0x0800fee8
 80020b4:	08010d00 	.word	0x08010d00
 80020b8:	20000734 	.word	0x20000734
 80020bc:	08010cdc 	.word	0x08010cdc
 80020c0:	08002549 	.word	0x08002549
 80020c4:	20000730 	.word	0x20000730

080020c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b094      	sub	sp, #80	; 0x50
 80020cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ce:	f107 0320 	add.w	r3, r7, #32
 80020d2:	2230      	movs	r2, #48	; 0x30
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f00d fc66 	bl	800f9a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020dc:	f107 030c 	add.w	r3, r7, #12
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ec:	2300      	movs	r3, #0
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	4b27      	ldr	r3, [pc, #156]	; (8002190 <SystemClock_Config+0xc8>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	4a26      	ldr	r2, [pc, #152]	; (8002190 <SystemClock_Config+0xc8>)
 80020f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fa:	6413      	str	r3, [r2, #64]	; 0x40
 80020fc:	4b24      	ldr	r3, [pc, #144]	; (8002190 <SystemClock_Config+0xc8>)
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002108:	2300      	movs	r3, #0
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	4b21      	ldr	r3, [pc, #132]	; (8002194 <SystemClock_Config+0xcc>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a20      	ldr	r2, [pc, #128]	; (8002194 <SystemClock_Config+0xcc>)
 8002112:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	4b1e      	ldr	r3, [pc, #120]	; (8002194 <SystemClock_Config+0xcc>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002124:	2301      	movs	r3, #1
 8002126:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002128:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800212e:	2302      	movs	r3, #2
 8002130:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002132:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002136:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002138:	2319      	movs	r3, #25
 800213a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800213c:	2390      	movs	r3, #144	; 0x90
 800213e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002140:	2302      	movs	r3, #2
 8002142:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002144:	2303      	movs	r3, #3
 8002146:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002148:	f107 0320 	add.w	r3, r7, #32
 800214c:	4618      	mov	r0, r3
 800214e:	f004 fcb5 	bl	8006abc <HAL_RCC_OscConfig>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002158:	f000 fa12 	bl	8002580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800215c:	230f      	movs	r3, #15
 800215e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002160:	2302      	movs	r3, #2
 8002162:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800216c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002172:	f107 030c 	add.w	r3, r7, #12
 8002176:	2102      	movs	r1, #2
 8002178:	4618      	mov	r0, r3
 800217a:	f004 ff17 	bl	8006fac <HAL_RCC_ClockConfig>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002184:	f000 f9fc 	bl	8002580 <Error_Handler>
  }
}
 8002188:	bf00      	nop
 800218a:	3750      	adds	r7, #80	; 0x50
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40023800 	.word	0x40023800
 8002194:	40007000 	.word	0x40007000

08002198 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <MX_I2C1_Init+0x50>)
 800219e:	4a13      	ldr	r2, [pc, #76]	; (80021ec <MX_I2C1_Init+0x54>)
 80021a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <MX_I2C1_Init+0x50>)
 80021a4:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <MX_I2C1_Init+0x58>)
 80021a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <MX_I2C1_Init+0x50>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <MX_I2C1_Init+0x50>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <MX_I2C1_Init+0x50>)
 80021b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021bc:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <MX_I2C1_Init+0x50>)
 80021be:	2200      	movs	r2, #0
 80021c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <MX_I2C1_Init+0x50>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021c8:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <MX_I2C1_Init+0x50>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <MX_I2C1_Init+0x50>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021d4:	4804      	ldr	r0, [pc, #16]	; (80021e8 <MX_I2C1_Init+0x50>)
 80021d6:	f001 fc93 	bl	8003b00 <HAL_I2C_Init>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021e0:	f000 f9ce 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	200005dc 	.word	0x200005dc
 80021ec:	40005400 	.word	0x40005400
 80021f0:	00061a80 	.word	0x00061a80

080021f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80021f8:	4b17      	ldr	r3, [pc, #92]	; (8002258 <MX_SPI1_Init+0x64>)
 80021fa:	4a18      	ldr	r2, [pc, #96]	; (800225c <MX_SPI1_Init+0x68>)
 80021fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021fe:	4b16      	ldr	r3, [pc, #88]	; (8002258 <MX_SPI1_Init+0x64>)
 8002200:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002204:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002206:	4b14      	ldr	r3, [pc, #80]	; (8002258 <MX_SPI1_Init+0x64>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800220c:	4b12      	ldr	r3, [pc, #72]	; (8002258 <MX_SPI1_Init+0x64>)
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002212:	4b11      	ldr	r3, [pc, #68]	; (8002258 <MX_SPI1_Init+0x64>)
 8002214:	2200      	movs	r2, #0
 8002216:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002218:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <MX_SPI1_Init+0x64>)
 800221a:	2200      	movs	r2, #0
 800221c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800221e:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <MX_SPI1_Init+0x64>)
 8002220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002224:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002226:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <MX_SPI1_Init+0x64>)
 8002228:	2230      	movs	r2, #48	; 0x30
 800222a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800222c:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <MX_SPI1_Init+0x64>)
 800222e:	2200      	movs	r2, #0
 8002230:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <MX_SPI1_Init+0x64>)
 8002234:	2200      	movs	r2, #0
 8002236:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002238:	4b07      	ldr	r3, [pc, #28]	; (8002258 <MX_SPI1_Init+0x64>)
 800223a:	2200      	movs	r2, #0
 800223c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <MX_SPI1_Init+0x64>)
 8002240:	220a      	movs	r2, #10
 8002242:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002244:	4804      	ldr	r0, [pc, #16]	; (8002258 <MX_SPI1_Init+0x64>)
 8002246:	f005 f8c3 	bl	80073d0 <HAL_SPI_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002250:	f000 f996 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000630 	.word	0x20000630
 800225c:	40013000 	.word	0x40013000

08002260 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08e      	sub	sp, #56	; 0x38
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002266:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002274:	f107 0320 	add.w	r3, r7, #32
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800227e:	1d3b      	adds	r3, r7, #4
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
 800228c:	615a      	str	r2, [r3, #20]
 800228e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002290:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <MX_TIM2_Init+0xe4>)
 8002292:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002296:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002298:	4b2a      	ldr	r3, [pc, #168]	; (8002344 <MX_TIM2_Init+0xe4>)
 800229a:	2200      	movs	r2, #0
 800229c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229e:	4b29      	ldr	r3, [pc, #164]	; (8002344 <MX_TIM2_Init+0xe4>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 80022a4:	4b27      	ldr	r3, [pc, #156]	; (8002344 <MX_TIM2_Init+0xe4>)
 80022a6:	2259      	movs	r2, #89	; 0x59
 80022a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022aa:	4b26      	ldr	r3, [pc, #152]	; (8002344 <MX_TIM2_Init+0xe4>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b0:	4b24      	ldr	r3, [pc, #144]	; (8002344 <MX_TIM2_Init+0xe4>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022b6:	4823      	ldr	r0, [pc, #140]	; (8002344 <MX_TIM2_Init+0xe4>)
 80022b8:	f005 f913 	bl	80074e2 <HAL_TIM_Base_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80022c2:	f000 f95d 	bl	8002580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022d0:	4619      	mov	r1, r3
 80022d2:	481c      	ldr	r0, [pc, #112]	; (8002344 <MX_TIM2_Init+0xe4>)
 80022d4:	f005 fbda 	bl	8007a8c <HAL_TIM_ConfigClockSource>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80022de:	f000 f94f 	bl	8002580 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80022e2:	4818      	ldr	r0, [pc, #96]	; (8002344 <MX_TIM2_Init+0xe4>)
 80022e4:	f005 f9ae 	bl	8007644 <HAL_TIM_PWM_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80022ee:	f000 f947 	bl	8002580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022fa:	f107 0320 	add.w	r3, r7, #32
 80022fe:	4619      	mov	r1, r3
 8002300:	4810      	ldr	r0, [pc, #64]	; (8002344 <MX_TIM2_Init+0xe4>)
 8002302:	f005 ff59 	bl	80081b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800230c:	f000 f938 	bl	8002580 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002310:	2360      	movs	r3, #96	; 0x60
 8002312:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002320:	1d3b      	adds	r3, r7, #4
 8002322:	2204      	movs	r2, #4
 8002324:	4619      	mov	r1, r3
 8002326:	4807      	ldr	r0, [pc, #28]	; (8002344 <MX_TIM2_Init+0xe4>)
 8002328:	f005 faee 	bl	8007908 <HAL_TIM_PWM_ConfigChannel>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002332:	f000 f925 	bl	8002580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002336:	4803      	ldr	r0, [pc, #12]	; (8002344 <MX_TIM2_Init+0xe4>)
 8002338:	f000 fa44 	bl	80027c4 <HAL_TIM_MspPostInit>

}
 800233c:	bf00      	nop
 800233e:	3738      	adds	r7, #56	; 0x38
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000688 	.word	0x20000688

08002348 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	607b      	str	r3, [r7, #4]
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <MX_DMA_Init+0x3c>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a0b      	ldr	r2, [pc, #44]	; (8002384 <MX_DMA_Init+0x3c>)
 8002358:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <MX_DMA_Init+0x3c>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002366:	607b      	str	r3, [r7, #4]
 8002368:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800236a:	2200      	movs	r2, #0
 800236c:	2105      	movs	r1, #5
 800236e:	2011      	movs	r0, #17
 8002370:	f000 fee4 	bl	800313c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002374:	2011      	movs	r0, #17
 8002376:	f000 fefd 	bl	8003174 <HAL_NVIC_EnableIRQ>

}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800

08002388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238e:	f107 030c 	add.w	r3, r7, #12
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	60da      	str	r2, [r3, #12]
 800239c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	4b31      	ldr	r3, [pc, #196]	; (8002468 <MX_GPIO_Init+0xe0>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a30      	ldr	r2, [pc, #192]	; (8002468 <MX_GPIO_Init+0xe0>)
 80023a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b2e      	ldr	r3, [pc, #184]	; (8002468 <MX_GPIO_Init+0xe0>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	607b      	str	r3, [r7, #4]
 80023be:	4b2a      	ldr	r3, [pc, #168]	; (8002468 <MX_GPIO_Init+0xe0>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a29      	ldr	r2, [pc, #164]	; (8002468 <MX_GPIO_Init+0xe0>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b27      	ldr	r3, [pc, #156]	; (8002468 <MX_GPIO_Init+0xe0>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	607b      	str	r3, [r7, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	603b      	str	r3, [r7, #0]
 80023da:	4b23      	ldr	r3, [pc, #140]	; (8002468 <MX_GPIO_Init+0xe0>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a22      	ldr	r2, [pc, #136]	; (8002468 <MX_GPIO_Init+0xe0>)
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b20      	ldr	r3, [pc, #128]	; (8002468 <MX_GPIO_Init+0xe0>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin, GPIO_PIN_RESET);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2107      	movs	r1, #7
 80023f6:	481d      	ldr	r0, [pc, #116]	; (800246c <MX_GPIO_Init+0xe4>)
 80023f8:	f001 fb50 	bl	8003a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_CS_Pin EPD_Reset_Pin EPD_Data_Control_Pin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin;
 80023fc:	2307      	movs	r3, #7
 80023fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002400:	2301      	movs	r3, #1
 8002402:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002408:	2300      	movs	r3, #0
 800240a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800240c:	f107 030c 	add.w	r3, r7, #12
 8002410:	4619      	mov	r1, r3
 8002412:	4816      	ldr	r0, [pc, #88]	; (800246c <MX_GPIO_Init+0xe4>)
 8002414:	f001 f9a6 	bl	8003764 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_Busy_Pin */
  GPIO_InitStruct.Pin = EPD_Busy_Pin;
 8002418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800241c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002422:	2302      	movs	r3, #2
 8002424:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EPD_Busy_GPIO_Port, &GPIO_InitStruct);
 8002426:	f107 030c 	add.w	r3, r7, #12
 800242a:	4619      	mov	r1, r3
 800242c:	480f      	ldr	r0, [pc, #60]	; (800246c <MX_GPIO_Init+0xe4>)
 800242e:	f001 f999 	bl	8003764 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_button_on_Pin */
  GPIO_InitStruct.Pin = EXT_button_on_Pin;
 8002432:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002436:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002438:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800243c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800243e:	2301      	movs	r3, #1
 8002440:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EXT_button_on_GPIO_Port, &GPIO_InitStruct);
 8002442:	f107 030c 	add.w	r3, r7, #12
 8002446:	4619      	mov	r1, r3
 8002448:	4808      	ldr	r0, [pc, #32]	; (800246c <MX_GPIO_Init+0xe4>)
 800244a:	f001 f98b 	bl	8003764 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800244e:	2200      	movs	r2, #0
 8002450:	2105      	movs	r1, #5
 8002452:	2028      	movs	r0, #40	; 0x28
 8002454:	f000 fe72 	bl	800313c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002458:	2028      	movs	r0, #40	; 0x28
 800245a:	f000 fe8b 	bl	8003174 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800245e:	bf00      	nop
 8002460:	3720      	adds	r7, #32
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40023800 	.word	0x40023800
 800246c:	40020400 	.word	0x40020400

08002470 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EXT_button_on_Pin){
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002480:	d104      	bne.n	800248c <HAL_GPIO_EXTI_Callback+0x1c>
		buttonEnSet(ON);
 8002482:	2001      	movs	r0, #1
 8002484:	f7ff fd32 	bl	8001eec <buttonEnSet>
		buttonUpSet();
 8002488:	f7ff fd18 	bl	8001ebc <buttonUpSet>
	}
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <test_i2c_dev>:


uint8_t test_i2c_dev(){
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef stateI2c;
	  // Подсчёт устройств в сети I2C 60-display, 72-ацп, 54-encoder, 96 -dac/
	  for(uint8_t i = 1; i < 127 ; i++){
 800249a:	2301      	movs	r3, #1
 800249c:	71fb      	strb	r3, [r7, #7]
 800249e:	e046      	b.n	800252e <test_i2c_dev+0x9a>
		  stateI2c = HAL_I2C_IsDeviceReady(&hi2c1, (i << 1), 2, 10);
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	b299      	uxth	r1, r3
 80024a8:	230a      	movs	r3, #10
 80024aa:	2202      	movs	r2, #2
 80024ac:	4824      	ldr	r0, [pc, #144]	; (8002540 <test_i2c_dev+0xac>)
 80024ae:	f002 faaf 	bl	8004a10 <HAL_I2C_IsDeviceReady>
 80024b2:	4603      	mov	r3, r0
 80024b4:	71bb      	strb	r3, [r7, #6]
		  if(stateI2c == HAL_OK){
 80024b6:	79bb      	ldrb	r3, [r7, #6]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d134      	bne.n	8002526 <test_i2c_dev+0x92>
			  switch ( i ) {
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	2b60      	cmp	r3, #96	; 0x60
 80024c0:	d01c      	beq.n	80024fc <test_i2c_dev+0x68>
 80024c2:	2b60      	cmp	r3, #96	; 0x60
 80024c4:	dc20      	bgt.n	8002508 <test_i2c_dev+0x74>
 80024c6:	2b48      	cmp	r3, #72	; 0x48
 80024c8:	d012      	beq.n	80024f0 <test_i2c_dev+0x5c>
 80024ca:	2b48      	cmp	r3, #72	; 0x48
 80024cc:	dc1c      	bgt.n	8002508 <test_i2c_dev+0x74>
 80024ce:	2b36      	cmp	r3, #54	; 0x36
 80024d0:	d002      	beq.n	80024d8 <test_i2c_dev+0x44>
 80024d2:	2b3c      	cmp	r3, #60	; 0x3c
 80024d4:	d006      	beq.n	80024e4 <test_i2c_dev+0x50>
 80024d6:	e017      	b.n	8002508 <test_i2c_dev+0x74>
			  	  case ENC_ADRESS: devise_i2c_tree.encoder_dev = ON; break;
 80024d8:	4a1a      	ldr	r2, [pc, #104]	; (8002544 <test_i2c_dev+0xb0>)
 80024da:	7813      	ldrb	r3, [r2, #0]
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	7013      	strb	r3, [r2, #0]
 80024e2:	e021      	b.n	8002528 <test_i2c_dev+0x94>
			  	  case DIS_ADRESS: devise_i2c_tree.display_dev = ON; break;
 80024e4:	4a17      	ldr	r2, [pc, #92]	; (8002544 <test_i2c_dev+0xb0>)
 80024e6:	7813      	ldrb	r3, [r2, #0]
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	7013      	strb	r3, [r2, #0]
 80024ee:	e01b      	b.n	8002528 <test_i2c_dev+0x94>
			  	  case ADC_ADRESS: devise_i2c_tree.ADC_dev 	   = ON; break;
 80024f0:	4a14      	ldr	r2, [pc, #80]	; (8002544 <test_i2c_dev+0xb0>)
 80024f2:	7813      	ldrb	r3, [r2, #0]
 80024f4:	f043 0304 	orr.w	r3, r3, #4
 80024f8:	7013      	strb	r3, [r2, #0]
 80024fa:	e015      	b.n	8002528 <test_i2c_dev+0x94>
			  	  case DAC_ADRESS: devise_i2c_tree.DAC_dev 	   = ON; break;
 80024fc:	4a11      	ldr	r2, [pc, #68]	; (8002544 <test_i2c_dev+0xb0>)
 80024fe:	7813      	ldrb	r3, [r2, #0]
 8002500:	f043 0308 	orr.w	r3, r3, #8
 8002504:	7013      	strb	r3, [r2, #0]
 8002506:	e00f      	b.n	8002528 <test_i2c_dev+0x94>
			      default: devise_i2c_tree.unknown_dev++;
 8002508:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <test_i2c_dev+0xb0>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002510:	b2db      	uxtb	r3, r3
 8002512:	3301      	adds	r3, #1
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	b2d9      	uxtb	r1, r3
 800251a:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <test_i2c_dev+0xb0>)
 800251c:	7813      	ldrb	r3, [r2, #0]
 800251e:	f361 1307 	bfi	r3, r1, #4, #4
 8002522:	7013      	strb	r3, [r2, #0]
 8002524:	e000      	b.n	8002528 <test_i2c_dev+0x94>
			      }
		  }
 8002526:	bf00      	nop
	  for(uint8_t i = 1; i < 127 ; i++){
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	3301      	adds	r3, #1
 800252c:	71fb      	strb	r3, [r7, #7]
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	2b7e      	cmp	r3, #126	; 0x7e
 8002532:	d9b5      	bls.n	80024a0 <test_i2c_dev+0xc>
	  }
  }
 8002534:	bf00      	nop
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	200005dc 	.word	0x200005dc
 8002544:	200005d8 	.word	0x200005d8

08002548 <StartEmptyTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEmptyTask */
void StartEmptyTask(void *argument)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002550:	f00c fcbc 	bl	800eecc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(1);
 8002554:	2001      	movs	r0, #1
 8002556:	f009 fbe7 	bl	800bd28 <osDelay>
 800255a:	e7fb      	b.n	8002554 <StartEmptyTask+0xc>

0800255c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a04      	ldr	r2, [pc, #16]	; (800257c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d101      	bne.n	8002572 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800256e:	f000 fce9 	bl	8002f44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40014000 	.word	0x40014000

08002580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002584:	b672      	cpsid	i
}
 8002586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002588:	e7fe      	b.n	8002588 <Error_Handler+0x8>
	...

0800258c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	607b      	str	r3, [r7, #4]
 8002596:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_MspInit+0x54>)
 8002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259a:	4a11      	ldr	r2, [pc, #68]	; (80025e0 <HAL_MspInit+0x54>)
 800259c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a0:	6453      	str	r3, [r2, #68]	; 0x44
 80025a2:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <HAL_MspInit+0x54>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025aa:	607b      	str	r3, [r7, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	603b      	str	r3, [r7, #0]
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_MspInit+0x54>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <HAL_MspInit+0x54>)
 80025b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025bc:	6413      	str	r3, [r2, #64]	; 0x40
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_MspInit+0x54>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	210f      	movs	r1, #15
 80025ce:	f06f 0001 	mvn.w	r0, #1
 80025d2:	f000 fdb3 	bl	800313c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800

080025e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	; 0x28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
 80025fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a19      	ldr	r2, [pc, #100]	; (8002668 <HAL_I2C_MspInit+0x84>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d12b      	bne.n	800265e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	4b18      	ldr	r3, [pc, #96]	; (800266c <HAL_I2C_MspInit+0x88>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	4a17      	ldr	r2, [pc, #92]	; (800266c <HAL_I2C_MspInit+0x88>)
 8002610:	f043 0302 	orr.w	r3, r3, #2
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <HAL_I2C_MspInit+0x88>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002622:	23c0      	movs	r3, #192	; 0xc0
 8002624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002626:	2312      	movs	r3, #18
 8002628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262e:	2303      	movs	r3, #3
 8002630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002632:	2304      	movs	r3, #4
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002636:	f107 0314 	add.w	r3, r7, #20
 800263a:	4619      	mov	r1, r3
 800263c:	480c      	ldr	r0, [pc, #48]	; (8002670 <HAL_I2C_MspInit+0x8c>)
 800263e:	f001 f891 	bl	8003764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <HAL_I2C_MspInit+0x88>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	4a08      	ldr	r2, [pc, #32]	; (800266c <HAL_I2C_MspInit+0x88>)
 800264c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002650:	6413      	str	r3, [r2, #64]	; 0x40
 8002652:	4b06      	ldr	r3, [pc, #24]	; (800266c <HAL_I2C_MspInit+0x88>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800265e:	bf00      	nop
 8002660:	3728      	adds	r7, #40	; 0x28
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40005400 	.word	0x40005400
 800266c:	40023800 	.word	0x40023800
 8002670:	40020400 	.word	0x40020400

08002674 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 0314 	add.w	r3, r7, #20
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a19      	ldr	r2, [pc, #100]	; (80026f8 <HAL_SPI_MspInit+0x84>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d12b      	bne.n	80026ee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	4b18      	ldr	r3, [pc, #96]	; (80026fc <HAL_SPI_MspInit+0x88>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269e:	4a17      	ldr	r2, [pc, #92]	; (80026fc <HAL_SPI_MspInit+0x88>)
 80026a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026a4:	6453      	str	r3, [r2, #68]	; 0x44
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <HAL_SPI_MspInit+0x88>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <HAL_SPI_MspInit+0x88>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	4a10      	ldr	r2, [pc, #64]	; (80026fc <HAL_SPI_MspInit+0x88>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6313      	str	r3, [r2, #48]	; 0x30
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <HAL_SPI_MspInit+0x88>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80026ce:	23a0      	movs	r3, #160	; 0xa0
 80026d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026da:	2303      	movs	r3, #3
 80026dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026de:	2305      	movs	r3, #5
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e2:	f107 0314 	add.w	r3, r7, #20
 80026e6:	4619      	mov	r1, r3
 80026e8:	4805      	ldr	r0, [pc, #20]	; (8002700 <HAL_SPI_MspInit+0x8c>)
 80026ea:	f001 f83b 	bl	8003764 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026ee:	bf00      	nop
 80026f0:	3728      	adds	r7, #40	; 0x28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40013000 	.word	0x40013000
 80026fc:	40023800 	.word	0x40023800
 8002700:	40020000 	.word	0x40020000

08002704 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002714:	d14c      	bne.n	80027b0 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	4b27      	ldr	r3, [pc, #156]	; (80027b8 <HAL_TIM_Base_MspInit+0xb4>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	4a26      	ldr	r2, [pc, #152]	; (80027b8 <HAL_TIM_Base_MspInit+0xb4>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6413      	str	r3, [r2, #64]	; 0x40
 8002726:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <HAL_TIM_Base_MspInit+0xb4>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 8002732:	4b22      	ldr	r3, [pc, #136]	; (80027bc <HAL_TIM_Base_MspInit+0xb8>)
 8002734:	4a22      	ldr	r2, [pc, #136]	; (80027c0 <HAL_TIM_Base_MspInit+0xbc>)
 8002736:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 8002738:	4b20      	ldr	r3, [pc, #128]	; (80027bc <HAL_TIM_Base_MspInit+0xb8>)
 800273a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800273e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002740:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <HAL_TIM_Base_MspInit+0xb8>)
 8002742:	2240      	movs	r2, #64	; 0x40
 8002744:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002746:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <HAL_TIM_Base_MspInit+0xb8>)
 8002748:	2200      	movs	r2, #0
 800274a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800274c:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <HAL_TIM_Base_MspInit+0xb8>)
 800274e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002752:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002754:	4b19      	ldr	r3, [pc, #100]	; (80027bc <HAL_TIM_Base_MspInit+0xb8>)
 8002756:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800275a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800275c:	4b17      	ldr	r3, [pc, #92]	; (80027bc <HAL_TIM_Base_MspInit+0xb8>)
 800275e:	2200      	movs	r2, #0
 8002760:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8002762:	4b16      	ldr	r3, [pc, #88]	; (80027bc <HAL_TIM_Base_MspInit+0xb8>)
 8002764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002768:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800276a:	4b14      	ldr	r3, [pc, #80]	; (80027bc <HAL_TIM_Base_MspInit+0xb8>)
 800276c:	2200      	movs	r2, #0
 800276e:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_TIM_Base_MspInit+0xb8>)
 8002772:	2204      	movs	r2, #4
 8002774:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch2_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_TIM_Base_MspInit+0xb8>)
 8002778:	2203      	movs	r2, #3
 800277a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch2_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 800277c:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <HAL_TIM_Base_MspInit+0xb8>)
 800277e:	2200      	movs	r2, #0
 8002780:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch2_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002782:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <HAL_TIM_Base_MspInit+0xb8>)
 8002784:	2200      	movs	r2, #0
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8002788:	480c      	ldr	r0, [pc, #48]	; (80027bc <HAL_TIM_Base_MspInit+0xb8>)
 800278a:	f000 fd01 	bl	8003190 <HAL_DMA_Init>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_TIM_Base_MspInit+0x94>
    {
      Error_Handler();
 8002794:	f7ff fef4 	bl	8002580 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a08      	ldr	r2, [pc, #32]	; (80027bc <HAL_TIM_Base_MspInit+0xb8>)
 800279c:	629a      	str	r2, [r3, #40]	; 0x28
 800279e:	4a07      	ldr	r2, [pc, #28]	; (80027bc <HAL_TIM_Base_MspInit+0xb8>)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a05      	ldr	r2, [pc, #20]	; (80027bc <HAL_TIM_Base_MspInit+0xb8>)
 80027a8:	631a      	str	r2, [r3, #48]	; 0x30
 80027aa:	4a04      	ldr	r2, [pc, #16]	; (80027bc <HAL_TIM_Base_MspInit+0xb8>)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80027b0:	bf00      	nop
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40023800 	.word	0x40023800
 80027bc:	200006d0 	.word	0x200006d0
 80027c0:	400260a0 	.word	0x400260a0

080027c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027cc:	f107 030c 	add.w	r3, r7, #12
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e4:	d11d      	bne.n	8002822 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	4b10      	ldr	r3, [pc, #64]	; (800282c <HAL_TIM_MspPostInit+0x68>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a0f      	ldr	r2, [pc, #60]	; (800282c <HAL_TIM_MspPostInit+0x68>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b0d      	ldr	r3, [pc, #52]	; (800282c <HAL_TIM_MspPostInit+0x68>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002802:	2302      	movs	r3, #2
 8002804:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002806:	2302      	movs	r3, #2
 8002808:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800280e:	2302      	movs	r3, #2
 8002810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002812:	2301      	movs	r3, #1
 8002814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002816:	f107 030c 	add.w	r3, r7, #12
 800281a:	4619      	mov	r1, r3
 800281c:	4804      	ldr	r0, [pc, #16]	; (8002830 <HAL_TIM_MspPostInit+0x6c>)
 800281e:	f000 ffa1 	bl	8003764 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002822:	bf00      	nop
 8002824:	3720      	adds	r7, #32
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800
 8002830:	40020000 	.word	0x40020000

08002834 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08c      	sub	sp, #48	; 0x30
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8002844:	2300      	movs	r3, #0
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	4b2e      	ldr	r3, [pc, #184]	; (8002904 <HAL_InitTick+0xd0>)
 800284a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284c:	4a2d      	ldr	r2, [pc, #180]	; (8002904 <HAL_InitTick+0xd0>)
 800284e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002852:	6453      	str	r3, [r2, #68]	; 0x44
 8002854:	4b2b      	ldr	r3, [pc, #172]	; (8002904 <HAL_InitTick+0xd0>)
 8002856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002860:	f107 020c 	add.w	r2, r7, #12
 8002864:	f107 0310 	add.w	r3, r7, #16
 8002868:	4611      	mov	r1, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f004 fd7e 	bl	800736c <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002870:	f004 fd68 	bl	8007344 <HAL_RCC_GetPCLK2Freq>
 8002874:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002878:	4a23      	ldr	r2, [pc, #140]	; (8002908 <HAL_InitTick+0xd4>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	0c9b      	lsrs	r3, r3, #18
 8002880:	3b01      	subs	r3, #1
 8002882:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8002884:	4b21      	ldr	r3, [pc, #132]	; (800290c <HAL_InitTick+0xd8>)
 8002886:	4a22      	ldr	r2, [pc, #136]	; (8002910 <HAL_InitTick+0xdc>)
 8002888:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800288a:	4b20      	ldr	r3, [pc, #128]	; (800290c <HAL_InitTick+0xd8>)
 800288c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002890:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8002892:	4a1e      	ldr	r2, [pc, #120]	; (800290c <HAL_InitTick+0xd8>)
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8002898:	4b1c      	ldr	r3, [pc, #112]	; (800290c <HAL_InitTick+0xd8>)
 800289a:	2200      	movs	r2, #0
 800289c:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800289e:	4b1b      	ldr	r3, [pc, #108]	; (800290c <HAL_InitTick+0xd8>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028a4:	4b19      	ldr	r3, [pc, #100]	; (800290c <HAL_InitTick+0xd8>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 80028aa:	4818      	ldr	r0, [pc, #96]	; (800290c <HAL_InitTick+0xd8>)
 80028ac:	f004 fe19 	bl	80074e2 <HAL_TIM_Base_Init>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80028b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d11b      	bne.n	80028f6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 80028be:	4813      	ldr	r0, [pc, #76]	; (800290c <HAL_InitTick+0xd8>)
 80028c0:	f004 fe5e 	bl	8007580 <HAL_TIM_Base_Start_IT>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80028ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d111      	bne.n	80028f6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80028d2:	2018      	movs	r0, #24
 80028d4:	f000 fc4e 	bl	8003174 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b0f      	cmp	r3, #15
 80028dc:	d808      	bhi.n	80028f0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 80028de:	2200      	movs	r2, #0
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	2018      	movs	r0, #24
 80028e4:	f000 fc2a 	bl	800313c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028e8:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <HAL_InitTick+0xe0>)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e002      	b.n	80028f6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80028f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3730      	adds	r7, #48	; 0x30
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800
 8002908:	431bde83 	.word	0x431bde83
 800290c:	20000738 	.word	0x20000738
 8002910:	40014000 	.word	0x40014000
 8002914:	20000038 	.word	0x20000038

08002918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800291c:	e7fe      	b.n	800291c <NMI_Handler+0x4>

0800291e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002922:	e7fe      	b.n	8002922 <HardFault_Handler+0x4>

08002924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002928:	e7fe      	b.n	8002928 <MemManage_Handler+0x4>

0800292a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800292e:	e7fe      	b.n	800292e <BusFault_Handler+0x4>

08002930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002934:	e7fe      	b.n	8002934 <UsageFault_Handler+0x4>

08002936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002936:	b480      	push	{r7}
 8002938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8002948:	4802      	ldr	r0, [pc, #8]	; (8002954 <DMA1_Stream6_IRQHandler+0x10>)
 800294a:	f000 fccf 	bl	80032ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	200006d0 	.word	0x200006d0

08002958 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800295c:	4802      	ldr	r0, [pc, #8]	; (8002968 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800295e:	f004 feca 	bl	80076f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000738 	.word	0x20000738

0800296c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT_button_on_Pin);
 8002970:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002974:	f001 f8ac 	bl	8003ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002978:	bf00      	nop
 800297a:	bd80      	pop	{r7, pc}

0800297c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002980:	4802      	ldr	r0, [pc, #8]	; (800298c <OTG_FS_IRQHandler+0x10>)
 8002982:	f002 ff6e 	bl	8005862 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20005f10 	.word	0x20005f10

08002990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002998:	4a14      	ldr	r2, [pc, #80]	; (80029ec <_sbrk+0x5c>)
 800299a:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <_sbrk+0x60>)
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029a4:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <_sbrk+0x64>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <_sbrk+0x64>)
 80029ae:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <_sbrk+0x68>)
 80029b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029b2:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <_sbrk+0x64>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d207      	bcs.n	80029d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029c0:	f00c ff96 	bl	800f8f0 <__errno>
 80029c4:	4603      	mov	r3, r0
 80029c6:	220c      	movs	r2, #12
 80029c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ca:	f04f 33ff 	mov.w	r3, #4294967295
 80029ce:	e009      	b.n	80029e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029d0:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <_sbrk+0x64>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029d6:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <_sbrk+0x64>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	4a05      	ldr	r2, [pc, #20]	; (80029f4 <_sbrk+0x64>)
 80029e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029e2:	68fb      	ldr	r3, [r7, #12]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20020000 	.word	0x20020000
 80029f0:	00005000 	.word	0x00005000
 80029f4:	20000780 	.word	0x20000780
 80029f8:	20006650 	.word	0x20006650

080029fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <SystemInit+0x20>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a06:	4a05      	ldr	r2, [pc, #20]	; (8002a1c <SystemInit+0x20>)
 8002a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <StartOledMenuTask>:

#include "tasks/OledMenu.h"

void StartOledMenuTask(void *argument){
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

	while(buttonEn() != ON){
 8002a28:	e002      	b.n	8002a30 <StartOledMenuTask+0x10>
		osDelay(50);
 8002a2a:	2032      	movs	r0, #50	; 0x32
 8002a2c:	f009 f97c 	bl	800bd28 <osDelay>
	while(buttonEn() != ON){
 8002a30:	f7ff fa50 	bl	8001ed4 <buttonEn>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d1f7      	bne.n	8002a2a <StartOledMenuTask+0xa>
	}
	buttonEnReset();
 8002a3a:	f7ff fa63 	bl	8001f04 <buttonEnReset>
	for(;;){
		osDelay(50);
 8002a3e:	2032      	movs	r0, #50	; 0x32
 8002a40:	f009 f972 	bl	800bd28 <osDelay>
		if(buttonEn() == ON){
 8002a44:	f7ff fa46 	bl	8001ed4 <buttonEn>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <StartOledMenuTask+0x32>
			drawMainMenu();
 8002a4e:	f7fe ff07 	bl	8001860 <drawMainMenu>
		}
		startDisplay();
 8002a52:	f7fe ffed 	bl	8001a30 <startDisplay>
		udpateDisplay();
 8002a56:	f7fe ffcb 	bl	80019f0 <udpateDisplay>
		osDelay(50);
 8002a5a:	e7f0      	b.n	8002a3e <StartOledMenuTask+0x1e>

08002a5c <aver_mass>:
int16_t data_ch[NUM_ADC_CH][SIZE_ADC_BUFF] = {0};
extern uint16_t global_DAC;

// Много дефайнов

int16_t aver_mass(int16_t* data){
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	int32_t temp = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < SIZE_ADC_BUFF; i++)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	72fb      	strb	r3, [r7, #11]
 8002a6c:	e00c      	b.n	8002a88 <aver_mass+0x2c>
		temp += data[i];
 8002a6e:	7afb      	ldrb	r3, [r7, #11]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4413      	add	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < SIZE_ADC_BUFF; i++)
 8002a82:	7afb      	ldrb	r3, [r7, #11]
 8002a84:	3301      	adds	r3, #1
 8002a86:	72fb      	strb	r3, [r7, #11]
 8002a88:	7afb      	ldrb	r3, [r7, #11]
 8002a8a:	2b09      	cmp	r3, #9
 8002a8c:	d9ef      	bls.n	8002a6e <aver_mass+0x12>
	temp /= SIZE_ADC_BUFF;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4a07      	ldr	r2, [pc, #28]	; (8002ab0 <aver_mass+0x54>)
 8002a92:	fb82 1203 	smull	r1, r2, r2, r3
 8002a96:	1092      	asrs	r2, r2, #2
 8002a98:	17db      	asrs	r3, r3, #31
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	60fb      	str	r3, [r7, #12]
	return (int16_t)temp;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	b21b      	sxth	r3, r3
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	66666667 	.word	0x66666667

08002ab4 <StartSensOutTask>:
// Задача для опросо кнопок ADC и энкодера и система команд от usb
void StartSensOutTask(void *argument){
 8002ab4:	b5b0      	push	{r4, r5, r7, lr}
 8002ab6:	b08a      	sub	sp, #40	; 0x28
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	6078      	str	r0, [r7, #4]
	uint8_t currentChanel = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	77fb      	strb	r3, [r7, #31]
	initAllChanelADC(); // todo сделать новую задачу для ацп
 8002ac0:	f000 f96e 	bl	8002da0 <initAllChanelADC>
    pADS = ADS1115_init(&hi2c1, ADS1115_ADR, configChanel[currentChanel]);
 8002ac4:	7ffb      	ldrb	r3, [r7, #31]
 8002ac6:	4a71      	ldr	r2, [pc, #452]	; (8002c8c <StartSensOutTask+0x1d8>)
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4413      	add	r3, r2
 8002acc:	cb0c      	ldmia	r3, {r2, r3}
 8002ace:	2148      	movs	r1, #72	; 0x48
 8002ad0:	486f      	ldr	r0, [pc, #444]	; (8002c90 <StartSensOutTask+0x1dc>)
 8002ad2:	f7fe f91d 	bl	8000d10 <ADS1115_init>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	4a6e      	ldr	r2, [pc, #440]	; (8002c94 <StartSensOutTask+0x1e0>)
 8002ada:	6013      	str	r3, [r2, #0]
    ADS1115_updateConfig(pADS, configChanel[currentChanel]);
 8002adc:	4b6d      	ldr	r3, [pc, #436]	; (8002c94 <StartSensOutTask+0x1e0>)
 8002ade:	6818      	ldr	r0, [r3, #0]
 8002ae0:	7ffb      	ldrb	r3, [r7, #31]
 8002ae2:	4a6a      	ldr	r2, [pc, #424]	; (8002c8c <StartSensOutTask+0x1d8>)
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002aec:	f7fe f930 	bl	8000d50 <ADS1115_updateConfig>
    ADS1115_startContinousMode(pADS);
 8002af0:	4b68      	ldr	r3, [pc, #416]	; (8002c94 <StartSensOutTask+0x1e0>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fe f991 	bl	8000e1c <ADS1115_startContinousMode>
    uint8_t buffer[] = {0};
 8002afa:	2300      	movs	r3, #0
 8002afc:	773b      	strb	r3, [r7, #28]
    MCP4725 myMCP4725 = MCP4725_init(&hi2c1, MCP4725A0_ADDR_A00, 3.30);
 8002afe:	f107 030c 	add.w	r3, r7, #12
 8002b02:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8002c98 <StartSensOutTask+0x1e4>
 8002b06:	2260      	movs	r2, #96	; 0x60
 8002b08:	4961      	ldr	r1, [pc, #388]	; (8002c90 <StartSensOutTask+0x1dc>)
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe fa0c 	bl	8000f28 <MCP4725_init>
    global_DAC = 1500;// это вроде 1.2 вольт
 8002b10:	4b62      	ldr	r3, [pc, #392]	; (8002c9c <StartSensOutTask+0x1e8>)
 8002b12:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002b16:	801a      	strh	r2, [r3, #0]
    setDAC(myMCP4725,  global_DAC);
 8002b18:	4b60      	ldr	r3, [pc, #384]	; (8002c9c <StartSensOutTask+0x1e8>)
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	f107 030c 	add.w	r3, r7, #12
 8002b22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b24:	f000 f992 	bl	8002e4c <setDAC>

	for(;;){
		if(command_CMD[0] != 0){ // Самоя простая система команда из палок и прочего
 8002b28:	4b5d      	ldr	r3, [pc, #372]	; (8002ca0 <StartSensOutTask+0x1ec>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d02c      	beq.n	8002b8a <StartSensOutTask+0xd6>
			switch(command_CMD[0] - 48){ // преобразуем символ в число
 8002b30:	4b5b      	ldr	r3, [pc, #364]	; (8002ca0 <StartSensOutTask+0x1ec>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	3b30      	subs	r3, #48	; 0x30
 8002b36:	3b01      	subs	r3, #1
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d817      	bhi.n	8002b6c <StartSensOutTask+0xb8>
 8002b3c:	a201      	add	r2, pc, #4	; (adr r2, 8002b44 <StartSensOutTask+0x90>)
 8002b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b42:	bf00      	nop
 8002b44:	08002b55 	.word	0x08002b55
 8002b48:	08002b5b 	.word	0x08002b5b
 8002b4c:	08002b61 	.word	0x08002b61
 8002b50:	08002b67 	.word	0x08002b67
				case 1: buttonEnSet();    break;
 8002b54:	f7ff f9ca 	bl	8001eec <buttonEnSet>
 8002b58:	e008      	b.n	8002b6c <StartSensOutTask+0xb8>
				case 2: buttonLongSet();  break;
 8002b5a:	f7ff fa13 	bl	8001f84 <buttonLongSet>
 8002b5e:	e005      	b.n	8002b6c <StartSensOutTask+0xb8>
				case 3: encoderSetUp();   break;
 8002b60:	f7ff fa34 	bl	8001fcc <encoderSetUp>
 8002b64:	e002      	b.n	8002b6c <StartSensOutTask+0xb8>
				case 4: encoderSetDown(); break;
 8002b66:	f7ff fa3d 	bl	8001fe4 <encoderSetDown>
 8002b6a:	bf00      	nop
			}
//			buffer[0] = command_CMD[0];
			buffer[0] = (uint8_t)global_DAC/8;
 8002b6c:	4b4b      	ldr	r3, [pc, #300]	; (8002c9c <StartSensOutTask+0x1e8>)
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	08db      	lsrs	r3, r3, #3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	773b      	strb	r3, [r7, #28]
			command_CMD[0] = 0;
 8002b78:	4b49      	ldr	r3, [pc, #292]	; (8002ca0 <StartSensOutTask+0x1ec>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
			CDC_Transmit_FS(buffer, 2);
 8002b7e:	f107 031c 	add.w	r3, r7, #28
 8002b82:	2102      	movs	r1, #2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f00c fa61 	bl	800f04c <CDC_Transmit_FS>
		}
		// Попытка захвата мьютекса с таймаутом 1000 мс
		statusMutexI2C = osMutexAcquire(BlockI2CHandle, 1000);
 8002b8a:	4b46      	ldr	r3, [pc, #280]	; (8002ca4 <StartSensOutTask+0x1f0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b92:	4618      	mov	r0, r3
 8002b94:	f009 f969 	bl	800be6a <osMutexAcquire>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	4a43      	ldr	r2, [pc, #268]	; (8002ca8 <StartSensOutTask+0x1f4>)
 8002b9c:	6013      	str	r3, [r2, #0]
		if(statusMutexI2C == osOK){
 8002b9e:	4b42      	ldr	r3, [pc, #264]	; (8002ca8 <StartSensOutTask+0x1f4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10b      	bne.n	8002bbe <StartSensOutTask+0x10a>
			calcDeltaAngle((int16_t)getEncoderData()); // Расчитываем смещение энкодера
 8002ba6:	f000 f8dd 	bl	8002d64 <getEncoderData>
 8002baa:	4603      	mov	r3, r0
 8002bac:	b21b      	sxth	r3, r3
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 f87e 	bl	8002cb0 <calcDeltaAngle>
			osMutexRelease(BlockI2CHandle);// Освобождение мьютекса
 8002bb4:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <StartSensOutTask+0x1f0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f009 f9a1 	bl	800bf00 <osMutexRelease>
		}
		for(uint8_t i = 0; i < 10;){ // Читаем с ацп порта 10 значений
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	77bb      	strb	r3, [r7, #30]
 8002bc2:	e025      	b.n	8002c10 <StartSensOutTask+0x15c>
			if(osMutexAcquire(BlockI2CHandle, 1000) == osOK){
 8002bc4:	4b37      	ldr	r3, [pc, #220]	; (8002ca4 <StartSensOutTask+0x1f0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f009 f94c 	bl	800be6a <osMutexAcquire>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d11b      	bne.n	8002c10 <StartSensOutTask+0x15c>
				data_ch[currentChanel][i] = ADS1115_getData(pADS);
 8002bd8:	4b2e      	ldr	r3, [pc, #184]	; (8002c94 <StartSensOutTask+0x1e0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	7ffc      	ldrb	r4, [r7, #31]
 8002bde:	7fbd      	ldrb	r5, [r7, #30]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fe f8e7 	bl	8000db4 <ADS1115_getData>
 8002be6:	4603      	mov	r3, r0
 8002be8:	4619      	mov	r1, r3
 8002bea:	4a30      	ldr	r2, [pc, #192]	; (8002cac <StartSensOutTask+0x1f8>)
 8002bec:	4623      	mov	r3, r4
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4423      	add	r3, r4
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	442b      	add	r3, r5
 8002bf6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				osMutexRelease(BlockI2CHandle);// Освобождение мьютекса
 8002bfa:	4b2a      	ldr	r3, [pc, #168]	; (8002ca4 <StartSensOutTask+0x1f0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f009 f97e 	bl	800bf00 <osMutexRelease>
				osDelay(6);
 8002c04:	2006      	movs	r0, #6
 8002c06:	f009 f88f 	bl	800bd28 <osDelay>
				i++;
 8002c0a:	7fbb      	ldrb	r3, [r7, #30]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	77bb      	strb	r3, [r7, #30]
		for(uint8_t i = 0; i < 10;){ // Читаем с ацп порта 10 значений
 8002c10:	7fbb      	ldrb	r3, [r7, #30]
 8002c12:	2b09      	cmp	r3, #9
 8002c14:	d9d6      	bls.n	8002bc4 <StartSensOutTask+0x110>
			}
		 }
				currentChanel++;
 8002c16:	7ffb      	ldrb	r3, [r7, #31]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	77fb      	strb	r3, [r7, #31]
				if(currentChanel > 3)
 8002c1c:	7ffb      	ldrb	r3, [r7, #31]
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d901      	bls.n	8002c26 <StartSensOutTask+0x172>
					currentChanel = 0;
 8002c22:	2300      	movs	r3, #0
 8002c24:	77fb      	strb	r3, [r7, #31]
				while(osMutexAcquire(BlockI2CHandle, 1000) != osOK){};
 8002c26:	bf00      	nop
 8002c28:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <StartSensOutTask+0x1f0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c30:	4618      	mov	r0, r3
 8002c32:	f009 f91a 	bl	800be6a <osMutexAcquire>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1f5      	bne.n	8002c28 <StartSensOutTask+0x174>
					ADS1115_updateConfig(pADS, configChanel[currentChanel]);
 8002c3c:	4b15      	ldr	r3, [pc, #84]	; (8002c94 <StartSensOutTask+0x1e0>)
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	7ffb      	ldrb	r3, [r7, #31]
 8002c42:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <StartSensOutTask+0x1d8>)
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	4413      	add	r3, r2
 8002c48:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002c4c:	f7fe f880 	bl	8000d50 <ADS1115_updateConfig>
					osMutexRelease(BlockI2CHandle);// Освобождение мьютекса
 8002c50:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <StartSensOutTask+0x1f0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f009 f953 	bl	800bf00 <osMutexRelease>
					osDelay(10);
 8002c5a:	200a      	movs	r0, #10
 8002c5c:	f009 f864 	bl	800bd28 <osDelay>
					if(global_DAC > 3000)
 8002c60:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <StartSensOutTask+0x1e8>)
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d903      	bls.n	8002c74 <StartSensOutTask+0x1c0>
						global_DAC = 3000;
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <StartSensOutTask+0x1e8>)
 8002c6e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002c72:	801a      	strh	r2, [r3, #0]
		setDAC(myMCP4725,  global_DAC);
 8002c74:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <StartSensOutTask+0x1e8>)
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	f107 030c 	add.w	r3, r7, #12
 8002c7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c80:	f000 f8e4 	bl	8002e4c <setDAC>
		longButton();
 8002c84:	f000 f84c 	bl	8002d20 <longButton>
		if(command_CMD[0] != 0){ // Самоя простая система команда из палок и прочего
 8002c88:	e74e      	b.n	8002b28 <StartSensOutTask+0x74>
 8002c8a:	bf00      	nop
 8002c8c:	2000078c 	.word	0x2000078c
 8002c90:	200005dc 	.word	0x200005dc
 8002c94:	200007ac 	.word	0x200007ac
 8002c98:	40533333 	.word	0x40533333
 8002c9c:	200005da 	.word	0x200005da
 8002ca0:	200007b4 	.word	0x200007b4
 8002ca4:	20000734 	.word	0x20000734
 8002ca8:	200007b0 	.word	0x200007b0
 8002cac:	200007c0 	.word	0x200007c0

08002cb0 <calcDeltaAngle>:
		//osDelay(50);
	}
}

void calcDeltaAngle(int16_t current_encoder_data){
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	80fb      	strh	r3, [r7, #6]
	delta_encoder = current_encoder_data - old_encoder_data;
 8002cba:	88fa      	ldrh	r2, [r7, #6]
 8002cbc:	4b16      	ldr	r3, [pc, #88]	; (8002d18 <calcDeltaAngle+0x68>)
 8002cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	b21a      	sxth	r2, r3
 8002cca:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <calcDeltaAngle+0x6c>)
 8002ccc:	801a      	strh	r2, [r3, #0]
	old_encoder_data = current_encoder_data;
 8002cce:	4a12      	ldr	r2, [pc, #72]	; (8002d18 <calcDeltaAngle+0x68>)
 8002cd0:	88fb      	ldrh	r3, [r7, #6]
 8002cd2:	8013      	strh	r3, [r2, #0]
	if(delta_encoder > MAX_ANGLE || delta_encoder < (-1)*MAX_ANGLE){
 8002cd4:	4b11      	ldr	r3, [pc, #68]	; (8002d1c <calcDeltaAngle+0x6c>)
 8002cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cda:	2bb4      	cmp	r3, #180	; 0xb4
 8002cdc:	dc05      	bgt.n	8002cea <calcDeltaAngle+0x3a>
 8002cde:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <calcDeltaAngle+0x6c>)
 8002ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ce4:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8002ce8:	da02      	bge.n	8002cf0 <calcDeltaAngle+0x40>
		delta_encoder = 0;
 8002cea:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <calcDeltaAngle+0x6c>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	801a      	strh	r2, [r3, #0]
	}
	if(delta_encoder > MIN_ANGLE )
 8002cf0:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <calcDeltaAngle+0x6c>)
 8002cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cf6:	2b05      	cmp	r3, #5
 8002cf8:	dd01      	ble.n	8002cfe <calcDeltaAngle+0x4e>
		encoderSetUp();
 8002cfa:	f7ff f967 	bl	8001fcc <encoderSetUp>
	if(delta_encoder < (-1)*MIN_ANGLE)
 8002cfe:	4b07      	ldr	r3, [pc, #28]	; (8002d1c <calcDeltaAngle+0x6c>)
 8002d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d04:	f113 0f05 	cmn.w	r3, #5
 8002d08:	da01      	bge.n	8002d0e <calcDeltaAngle+0x5e>
		encoderSetDown();
 8002d0a:	f7ff f96b 	bl	8001fe4 <encoderSetDown>
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20000786 	.word	0x20000786
 8002d1c:	20000788 	.word	0x20000788

08002d20 <longButton>:
void longButton(){
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
	GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8002d26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d2a:	480d      	ldr	r0, [pc, #52]	; (8002d60 <longButton+0x40>)
 8002d2c:	f000 fe9e 	bl	8003a6c <HAL_GPIO_ReadPin>
 8002d30:	4603      	mov	r3, r0
 8002d32:	71fb      	strb	r3, [r7, #7]
	if(pinState == GPIO_PIN_RESET){
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d102      	bne.n	8002d40 <longButton+0x20>
		buttonCounterSet();
 8002d3a:	f7ff f8fb 	bl	8001f34 <buttonCounterSet>
 8002d3e:	e001      	b.n	8002d44 <longButton+0x24>
	}
	else{
		buttonCounterReset();
 8002d40:	f7ff f908 	bl	8001f54 <buttonCounterReset>
	}

	if(buttonCounter() > 50){
 8002d44:	f7ff f8ea 	bl	8001f1c <buttonCounter>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b32      	cmp	r3, #50	; 0x32
 8002d4c:	d903      	bls.n	8002d56 <longButton+0x36>
		buttonLongSet();
 8002d4e:	f7ff f919 	bl	8001f84 <buttonLongSet>
		buttonCounterReset();
 8002d52:	f7ff f8ff 	bl	8001f54 <buttonCounterReset>
	}
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40020400 	.word	0x40020400

08002d64 <getEncoderData>:

u_magnituda magnituda;
uint16_t getEncoderData(){
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
	magnituda.data = AS5600_GetStatus();
 8002d68:	f7fe fd6e 	bl	8001848 <AS5600_GetStatus>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	461a      	mov	r2, r3
 8002d70:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <getEncoderData+0x34>)
 8002d72:	701a      	strb	r2, [r3, #0]
	if(magnituda.state_magnit.MD == ON)
 8002d74:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <getEncoderData+0x34>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <getEncoderData+0x2a>
		raw_angle = AS5600_GetRawAngle();
 8002d82:	f7fe fd4b 	bl	800181c <AS5600_GetRawAngle>
 8002d86:	4603      	mov	r3, r0
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <getEncoderData+0x38>)
 8002d8c:	801a      	strh	r2, [r3, #0]
	return 	raw_angle;
 8002d8e:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <getEncoderData+0x38>)
 8002d90:	881b      	ldrh	r3, [r3, #0]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000810 	.word	0x20000810
 8002d9c:	20000784 	.word	0x20000784

08002da0 <initAllChanelADC>:

void initAllChanelADC(){
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
	initADC(&configChanel[ADC_CHANEL_1]);
 8002da4:	480e      	ldr	r0, [pc, #56]	; (8002de0 <initAllChanelADC+0x40>)
 8002da6:	f000 f823 	bl	8002df0 <initADC>
	initADC(&configChanel[ADC_CHANEL_2]);
 8002daa:	480e      	ldr	r0, [pc, #56]	; (8002de4 <initAllChanelADC+0x44>)
 8002dac:	f000 f820 	bl	8002df0 <initADC>
	initADC(&configChanel[ADC_CHANEL_3]);
 8002db0:	480d      	ldr	r0, [pc, #52]	; (8002de8 <initAllChanelADC+0x48>)
 8002db2:	f000 f81d 	bl	8002df0 <initADC>
	initADC(&configChanel[ADC_CHANEL_4]);
 8002db6:	480d      	ldr	r0, [pc, #52]	; (8002dec <initAllChanelADC+0x4c>)
 8002db8:	f000 f81a 	bl	8002df0 <initADC>

	initChanelADC(&configChanel[ADC_CHANEL_1], CHANNEL_AIN0_GND);
 8002dbc:	2104      	movs	r1, #4
 8002dbe:	4808      	ldr	r0, [pc, #32]	; (8002de0 <initAllChanelADC+0x40>)
 8002dc0:	f000 f835 	bl	8002e2e <initChanelADC>
	initChanelADC(&configChanel[ADC_CHANEL_2], CHANNEL_AIN1_GND);
 8002dc4:	2105      	movs	r1, #5
 8002dc6:	4807      	ldr	r0, [pc, #28]	; (8002de4 <initAllChanelADC+0x44>)
 8002dc8:	f000 f831 	bl	8002e2e <initChanelADC>
	initChanelADC(&configChanel[ADC_CHANEL_3], CHANNEL_AIN2_GND);
 8002dcc:	2106      	movs	r1, #6
 8002dce:	4806      	ldr	r0, [pc, #24]	; (8002de8 <initAllChanelADC+0x48>)
 8002dd0:	f000 f82d 	bl	8002e2e <initChanelADC>
	initChanelADC(&configChanel[ADC_CHANEL_4], CHANNEL_AIN3_GND);
 8002dd4:	2107      	movs	r1, #7
 8002dd6:	4805      	ldr	r0, [pc, #20]	; (8002dec <initAllChanelADC+0x4c>)
 8002dd8:	f000 f829 	bl	8002e2e <initChanelADC>
}
 8002ddc:	bf00      	nop
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	2000078c 	.word	0x2000078c
 8002de4:	20000794 	.word	0x20000794
 8002de8:	2000079c 	.word	0x2000079c
 8002dec:	200007a4 	.word	0x200007a4

08002df0 <initADC>:

void initADC(ADS1115_Config_t* configReg){
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
	configReg->pgaConfig 		= PGA_4_096;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	705a      	strb	r2, [r3, #1]
	configReg->operatingMode 	= MODE_CONTINOUS;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	709a      	strb	r2, [r3, #2]
	configReg->dataRate 		= DRATE_250;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2205      	movs	r2, #5
 8002e08:	70da      	strb	r2, [r3, #3]
	configReg->compareMode 		= COMP_HYSTERESIS;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	711a      	strb	r2, [r3, #4]
	configReg->polarityMode 	= POLARITY_ACTIVE_LOW;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	715a      	strb	r2, [r3, #5]
	configReg->latchingMode  	= LATCHING_NONE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	719a      	strb	r2, [r3, #6]
	configReg->queueComparator 	= QUEUE_ONE; 			// ПОднять флаг через сколько измерений
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	71da      	strb	r2, [r3, #7]
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <initChanelADC>:

void initChanelADC(ADS1115_Config_t* configReg, MultiplexerConfig_t chanel){
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	460b      	mov	r3, r1
 8002e38:	70fb      	strb	r3, [r7, #3]
	configReg->channel = chanel;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	701a      	strb	r2, [r3, #0]
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <setDAC>:

void setDAC(MCP4725 myMCP4725, uint16_t Vout){
 8002e4c:	b590      	push	{r4, r7, lr}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	463c      	mov	r4, r7
 8002e54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MCP4725_setValue(&myMCP4725, Vout, MCP4725_FAST_MODE, MCP4725_POWER_DOWN_OFF);
 8002e58:	8c39      	ldrh	r1, [r7, #32]
 8002e5a:	4638      	mov	r0, r7
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f7fe f8b0 	bl	8000fc4 <MCP4725_setValue>
}
 8002e64:	bf00      	nop
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd90      	pop	{r4, r7, pc}

08002e6c <initUserTasks>:
  .name = "SensOutTask",
  .stack_size = 256 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

void initUserTasks(){
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
	OledMenuTaskHandle   = osThreadNew(StartOledMenuTask,   NULL, &OledMenuTask_attributes);
 8002e70:	4a08      	ldr	r2, [pc, #32]	; (8002e94 <initUserTasks+0x28>)
 8002e72:	2100      	movs	r1, #0
 8002e74:	4808      	ldr	r0, [pc, #32]	; (8002e98 <initUserTasks+0x2c>)
 8002e76:	f008 fec5 	bl	800bc04 <osThreadNew>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	4a07      	ldr	r2, [pc, #28]	; (8002e9c <initUserTasks+0x30>)
 8002e7e:	6013      	str	r3, [r2, #0]
	//LedControlTaskHandle = osThreadNew(StartLedControlTask, NULL, &LedControlTask_attributes);
	SensOutTaskHandle    = osThreadNew(StartSensOutTask,    NULL, &SensOutTask_attributes);
 8002e80:	4a07      	ldr	r2, [pc, #28]	; (8002ea0 <initUserTasks+0x34>)
 8002e82:	2100      	movs	r1, #0
 8002e84:	4807      	ldr	r0, [pc, #28]	; (8002ea4 <initUserTasks+0x38>)
 8002e86:	f008 febd 	bl	800bc04 <osThreadNew>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4a06      	ldr	r2, [pc, #24]	; (8002ea8 <initUserTasks+0x3c>)
 8002e8e:	6013      	str	r3, [r2, #0]
};
 8002e90:	bf00      	nop
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	08010d28 	.word	0x08010d28
 8002e98:	08002a21 	.word	0x08002a21
 8002e9c:	20000814 	.word	0x20000814
 8002ea0:	08010d4c 	.word	0x08010d4c
 8002ea4:	08002ab5 	.word	0x08002ab5
 8002ea8:	20000818 	.word	0x20000818

08002eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ee4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002eb0:	480d      	ldr	r0, [pc, #52]	; (8002ee8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002eb2:	490e      	ldr	r1, [pc, #56]	; (8002eec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002eb4:	4a0e      	ldr	r2, [pc, #56]	; (8002ef0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eb8:	e002      	b.n	8002ec0 <LoopCopyDataInit>

08002eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ebe:	3304      	adds	r3, #4

08002ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec4:	d3f9      	bcc.n	8002eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ec6:	4a0b      	ldr	r2, [pc, #44]	; (8002ef4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ec8:	4c0b      	ldr	r4, [pc, #44]	; (8002ef8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ecc:	e001      	b.n	8002ed2 <LoopFillZerobss>

08002ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed0:	3204      	adds	r2, #4

08002ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed4:	d3fb      	bcc.n	8002ece <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ed6:	f7ff fd91 	bl	80029fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eda:	f00c fd0f 	bl	800f8fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ede:	f7ff f899 	bl	8002014 <main>
  bx  lr    
 8002ee2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ee4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eec:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8002ef0:	08010e10 	.word	0x08010e10
  ldr r2, =_sbss
 8002ef4:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8002ef8:	2000664c 	.word	0x2000664c

08002efc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002efc:	e7fe      	b.n	8002efc <ADC_IRQHandler>
	...

08002f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f04:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <HAL_Init+0x40>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a0d      	ldr	r2, [pc, #52]	; (8002f40 <HAL_Init+0x40>)
 8002f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_Init+0x40>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <HAL_Init+0x40>)
 8002f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f1c:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <HAL_Init+0x40>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a07      	ldr	r2, [pc, #28]	; (8002f40 <HAL_Init+0x40>)
 8002f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f28:	2003      	movs	r0, #3
 8002f2a:	f000 f8fc 	bl	8003126 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f7ff fc80 	bl	8002834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f34:	f7ff fb2a 	bl	800258c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023c00 	.word	0x40023c00

08002f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f48:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <HAL_IncTick+0x20>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <HAL_IncTick+0x24>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4413      	add	r3, r2
 8002f54:	4a04      	ldr	r2, [pc, #16]	; (8002f68 <HAL_IncTick+0x24>)
 8002f56:	6013      	str	r3, [r2, #0]
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	2000003c 	.word	0x2000003c
 8002f68:	2000081c 	.word	0x2000081c

08002f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f70:	4b03      	ldr	r3, [pc, #12]	; (8002f80 <HAL_GetTick+0x14>)
 8002f72:	681b      	ldr	r3, [r3, #0]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	2000081c 	.word	0x2000081c

08002f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f8c:	f7ff ffee 	bl	8002f6c <HAL_GetTick>
 8002f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9c:	d005      	beq.n	8002faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <HAL_Delay+0x44>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002faa:	bf00      	nop
 8002fac:	f7ff ffde 	bl	8002f6c <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d8f7      	bhi.n	8002fac <HAL_Delay+0x28>
  {
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	bf00      	nop
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	2000003c 	.word	0x2000003c

08002fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <__NVIC_SetPriorityGrouping+0x44>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fe8:	4013      	ands	r3, r2
 8002fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ffe:	4a04      	ldr	r2, [pc, #16]	; (8003010 <__NVIC_SetPriorityGrouping+0x44>)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	60d3      	str	r3, [r2, #12]
}
 8003004:	bf00      	nop
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003018:	4b04      	ldr	r3, [pc, #16]	; (800302c <__NVIC_GetPriorityGrouping+0x18>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	0a1b      	lsrs	r3, r3, #8
 800301e:	f003 0307 	and.w	r3, r3, #7
}
 8003022:	4618      	mov	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	2b00      	cmp	r3, #0
 8003040:	db0b      	blt.n	800305a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	f003 021f 	and.w	r2, r3, #31
 8003048:	4907      	ldr	r1, [pc, #28]	; (8003068 <__NVIC_EnableIRQ+0x38>)
 800304a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	2001      	movs	r0, #1
 8003052:	fa00 f202 	lsl.w	r2, r0, r2
 8003056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	e000e100 	.word	0xe000e100

0800306c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	6039      	str	r1, [r7, #0]
 8003076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307c:	2b00      	cmp	r3, #0
 800307e:	db0a      	blt.n	8003096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	b2da      	uxtb	r2, r3
 8003084:	490c      	ldr	r1, [pc, #48]	; (80030b8 <__NVIC_SetPriority+0x4c>)
 8003086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308a:	0112      	lsls	r2, r2, #4
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	440b      	add	r3, r1
 8003090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003094:	e00a      	b.n	80030ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	b2da      	uxtb	r2, r3
 800309a:	4908      	ldr	r1, [pc, #32]	; (80030bc <__NVIC_SetPriority+0x50>)
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	3b04      	subs	r3, #4
 80030a4:	0112      	lsls	r2, r2, #4
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	440b      	add	r3, r1
 80030aa:	761a      	strb	r2, [r3, #24]
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	e000e100 	.word	0xe000e100
 80030bc:	e000ed00 	.word	0xe000ed00

080030c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b089      	sub	sp, #36	; 0x24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f1c3 0307 	rsb	r3, r3, #7
 80030da:	2b04      	cmp	r3, #4
 80030dc:	bf28      	it	cs
 80030de:	2304      	movcs	r3, #4
 80030e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3304      	adds	r3, #4
 80030e6:	2b06      	cmp	r3, #6
 80030e8:	d902      	bls.n	80030f0 <NVIC_EncodePriority+0x30>
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3b03      	subs	r3, #3
 80030ee:	e000      	b.n	80030f2 <NVIC_EncodePriority+0x32>
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f4:	f04f 32ff 	mov.w	r2, #4294967295
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43da      	mvns	r2, r3
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	401a      	ands	r2, r3
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003108:	f04f 31ff 	mov.w	r1, #4294967295
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	fa01 f303 	lsl.w	r3, r1, r3
 8003112:	43d9      	mvns	r1, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	4313      	orrs	r3, r2
         );
}
 800311a:	4618      	mov	r0, r3
 800311c:	3724      	adds	r7, #36	; 0x24
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff ff4c 	bl	8002fcc <__NVIC_SetPriorityGrouping>
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800314e:	f7ff ff61 	bl	8003014 <__NVIC_GetPriorityGrouping>
 8003152:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	68b9      	ldr	r1, [r7, #8]
 8003158:	6978      	ldr	r0, [r7, #20]
 800315a:	f7ff ffb1 	bl	80030c0 <NVIC_EncodePriority>
 800315e:	4602      	mov	r2, r0
 8003160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003164:	4611      	mov	r1, r2
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff ff80 	bl	800306c <__NVIC_SetPriority>
}
 800316c:	bf00      	nop
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800317e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff ff54 	bl	8003030 <__NVIC_EnableIRQ>
}
 8003188:	bf00      	nop
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800319c:	f7ff fee6 	bl	8002f6c <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e099      	b.n	80032e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0201 	bic.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031cc:	e00f      	b.n	80031ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031ce:	f7ff fecd 	bl	8002f6c <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b05      	cmp	r3, #5
 80031da:	d908      	bls.n	80031ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2220      	movs	r2, #32
 80031e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2203      	movs	r2, #3
 80031e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e078      	b.n	80032e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1e8      	bne.n	80031ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	4b38      	ldr	r3, [pc, #224]	; (80032e8 <HAL_DMA_Init+0x158>)
 8003208:	4013      	ands	r3, r2
 800320a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800321a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003226:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003232:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	2b04      	cmp	r3, #4
 8003246:	d107      	bne.n	8003258 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	4313      	orrs	r3, r2
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	4313      	orrs	r3, r2
 8003256:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f023 0307 	bic.w	r3, r3, #7
 800326e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	4313      	orrs	r3, r2
 8003278:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	2b04      	cmp	r3, #4
 8003280:	d117      	bne.n	80032b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	4313      	orrs	r3, r2
 800328a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00e      	beq.n	80032b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f9e9 	bl	800366c <DMA_CheckFifoParam>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2240      	movs	r2, #64	; 0x40
 80032a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032ae:	2301      	movs	r3, #1
 80032b0:	e016      	b.n	80032e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f9a0 	bl	8003600 <DMA_CalcBaseAndBitshift>
 80032c0:	4603      	mov	r3, r0
 80032c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c8:	223f      	movs	r2, #63	; 0x3f
 80032ca:	409a      	lsls	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	f010803f 	.word	0xf010803f

080032ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032f8:	4b8e      	ldr	r3, [pc, #568]	; (8003534 <HAL_DMA_IRQHandler+0x248>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a8e      	ldr	r2, [pc, #568]	; (8003538 <HAL_DMA_IRQHandler+0x24c>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	0a9b      	lsrs	r3, r3, #10
 8003304:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003316:	2208      	movs	r2, #8
 8003318:	409a      	lsls	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4013      	ands	r3, r2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d01a      	beq.n	8003358 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d013      	beq.n	8003358 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0204 	bic.w	r2, r2, #4
 800333e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	2208      	movs	r2, #8
 8003346:	409a      	lsls	r2, r3
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003350:	f043 0201 	orr.w	r2, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335c:	2201      	movs	r2, #1
 800335e:	409a      	lsls	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d012      	beq.n	800338e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00b      	beq.n	800338e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337a:	2201      	movs	r2, #1
 800337c:	409a      	lsls	r2, r3
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003386:	f043 0202 	orr.w	r2, r3, #2
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003392:	2204      	movs	r2, #4
 8003394:	409a      	lsls	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4013      	ands	r3, r2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d012      	beq.n	80033c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00b      	beq.n	80033c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b0:	2204      	movs	r2, #4
 80033b2:	409a      	lsls	r2, r3
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	f043 0204 	orr.w	r2, r3, #4
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	2210      	movs	r2, #16
 80033ca:	409a      	lsls	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d043      	beq.n	800345c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d03c      	beq.n	800345c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e6:	2210      	movs	r2, #16
 80033e8:	409a      	lsls	r2, r3
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d018      	beq.n	800342e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d108      	bne.n	800341c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	d024      	beq.n	800345c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	4798      	blx	r3
 800341a:	e01f      	b.n	800345c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01b      	beq.n	800345c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	4798      	blx	r3
 800342c:	e016      	b.n	800345c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d107      	bne.n	800344c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0208 	bic.w	r2, r2, #8
 800344a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003460:	2220      	movs	r2, #32
 8003462:	409a      	lsls	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4013      	ands	r3, r2
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 808f 	beq.w	800358c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 8087 	beq.w	800358c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003482:	2220      	movs	r2, #32
 8003484:	409a      	lsls	r2, r3
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b05      	cmp	r3, #5
 8003494:	d136      	bne.n	8003504 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0216 	bic.w	r2, r2, #22
 80034a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695a      	ldr	r2, [r3, #20]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d103      	bne.n	80034c6 <HAL_DMA_IRQHandler+0x1da>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d007      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0208 	bic.w	r2, r2, #8
 80034d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034da:	223f      	movs	r2, #63	; 0x3f
 80034dc:	409a      	lsls	r2, r3
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d07e      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	4798      	blx	r3
        }
        return;
 8003502:	e079      	b.n	80035f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d01d      	beq.n	800354e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10d      	bne.n	800353c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003524:	2b00      	cmp	r3, #0
 8003526:	d031      	beq.n	800358c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	4798      	blx	r3
 8003530:	e02c      	b.n	800358c <HAL_DMA_IRQHandler+0x2a0>
 8003532:	bf00      	nop
 8003534:	20000034 	.word	0x20000034
 8003538:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003540:	2b00      	cmp	r3, #0
 8003542:	d023      	beq.n	800358c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	4798      	blx	r3
 800354c:	e01e      	b.n	800358c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10f      	bne.n	800357c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0210 	bic.w	r2, r2, #16
 800356a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003590:	2b00      	cmp	r3, #0
 8003592:	d032      	beq.n	80035fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d022      	beq.n	80035e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2205      	movs	r2, #5
 80035a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0201 	bic.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	3301      	adds	r3, #1
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d307      	bcc.n	80035d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f2      	bne.n	80035b8 <HAL_DMA_IRQHandler+0x2cc>
 80035d2:	e000      	b.n	80035d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d005      	beq.n	80035fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	4798      	blx	r3
 80035f6:	e000      	b.n	80035fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80035f8:	bf00      	nop
    }
  }
}
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	b2db      	uxtb	r3, r3
 800360e:	3b10      	subs	r3, #16
 8003610:	4a14      	ldr	r2, [pc, #80]	; (8003664 <DMA_CalcBaseAndBitshift+0x64>)
 8003612:	fba2 2303 	umull	r2, r3, r2, r3
 8003616:	091b      	lsrs	r3, r3, #4
 8003618:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800361a:	4a13      	ldr	r2, [pc, #76]	; (8003668 <DMA_CalcBaseAndBitshift+0x68>)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4413      	add	r3, r2
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b03      	cmp	r3, #3
 800362c:	d909      	bls.n	8003642 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003636:	f023 0303 	bic.w	r3, r3, #3
 800363a:	1d1a      	adds	r2, r3, #4
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	659a      	str	r2, [r3, #88]	; 0x58
 8003640:	e007      	b.n	8003652 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800364a:	f023 0303 	bic.w	r3, r3, #3
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003656:	4618      	mov	r0, r3
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	aaaaaaab 	.word	0xaaaaaaab
 8003668:	08010d70 	.word	0x08010d70

0800366c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d11f      	bne.n	80036c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b03      	cmp	r3, #3
 800368a:	d856      	bhi.n	800373a <DMA_CheckFifoParam+0xce>
 800368c:	a201      	add	r2, pc, #4	; (adr r2, 8003694 <DMA_CheckFifoParam+0x28>)
 800368e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003692:	bf00      	nop
 8003694:	080036a5 	.word	0x080036a5
 8003698:	080036b7 	.word	0x080036b7
 800369c:	080036a5 	.word	0x080036a5
 80036a0:	0800373b 	.word	0x0800373b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d046      	beq.n	800373e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b4:	e043      	b.n	800373e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036be:	d140      	bne.n	8003742 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036c4:	e03d      	b.n	8003742 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ce:	d121      	bne.n	8003714 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2b03      	cmp	r3, #3
 80036d4:	d837      	bhi.n	8003746 <DMA_CheckFifoParam+0xda>
 80036d6:	a201      	add	r2, pc, #4	; (adr r2, 80036dc <DMA_CheckFifoParam+0x70>)
 80036d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036dc:	080036ed 	.word	0x080036ed
 80036e0:	080036f3 	.word	0x080036f3
 80036e4:	080036ed 	.word	0x080036ed
 80036e8:	08003705 	.word	0x08003705
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
      break;
 80036f0:	e030      	b.n	8003754 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d025      	beq.n	800374a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003702:	e022      	b.n	800374a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800370c:	d11f      	bne.n	800374e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003712:	e01c      	b.n	800374e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d903      	bls.n	8003722 <DMA_CheckFifoParam+0xb6>
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b03      	cmp	r3, #3
 800371e:	d003      	beq.n	8003728 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003720:	e018      	b.n	8003754 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	73fb      	strb	r3, [r7, #15]
      break;
 8003726:	e015      	b.n	8003754 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00e      	beq.n	8003752 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	73fb      	strb	r3, [r7, #15]
      break;
 8003738:	e00b      	b.n	8003752 <DMA_CheckFifoParam+0xe6>
      break;
 800373a:	bf00      	nop
 800373c:	e00a      	b.n	8003754 <DMA_CheckFifoParam+0xe8>
      break;
 800373e:	bf00      	nop
 8003740:	e008      	b.n	8003754 <DMA_CheckFifoParam+0xe8>
      break;
 8003742:	bf00      	nop
 8003744:	e006      	b.n	8003754 <DMA_CheckFifoParam+0xe8>
      break;
 8003746:	bf00      	nop
 8003748:	e004      	b.n	8003754 <DMA_CheckFifoParam+0xe8>
      break;
 800374a:	bf00      	nop
 800374c:	e002      	b.n	8003754 <DMA_CheckFifoParam+0xe8>
      break;   
 800374e:	bf00      	nop
 8003750:	e000      	b.n	8003754 <DMA_CheckFifoParam+0xe8>
      break;
 8003752:	bf00      	nop
    }
  } 
  
  return status; 
 8003754:	7bfb      	ldrb	r3, [r7, #15]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop

08003764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003764:	b480      	push	{r7}
 8003766:	b089      	sub	sp, #36	; 0x24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003772:	2300      	movs	r3, #0
 8003774:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003776:	2300      	movs	r3, #0
 8003778:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	e159      	b.n	8003a34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003780:	2201      	movs	r2, #1
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4013      	ands	r3, r2
 8003792:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	429a      	cmp	r2, r3
 800379a:	f040 8148 	bne.w	8003a2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d005      	beq.n	80037b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d130      	bne.n	8003818 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	2203      	movs	r2, #3
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43db      	mvns	r3, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4013      	ands	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4313      	orrs	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037ec:	2201      	movs	r2, #1
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f003 0201 	and.w	r2, r3, #1
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 0303 	and.w	r3, r3, #3
 8003820:	2b03      	cmp	r3, #3
 8003822:	d017      	beq.n	8003854 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	2203      	movs	r2, #3
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4013      	ands	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4313      	orrs	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d123      	bne.n	80038a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	08da      	lsrs	r2, r3, #3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3208      	adds	r2, #8
 8003868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800386c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	220f      	movs	r2, #15
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	43db      	mvns	r3, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4013      	ands	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4313      	orrs	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	08da      	lsrs	r2, r3, #3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3208      	adds	r2, #8
 80038a2:	69b9      	ldr	r1, [r7, #24]
 80038a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	2203      	movs	r2, #3
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 0203 	and.w	r2, r3, #3
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 80a2 	beq.w	8003a2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	4b57      	ldr	r3, [pc, #348]	; (8003a4c <HAL_GPIO_Init+0x2e8>)
 80038f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f2:	4a56      	ldr	r2, [pc, #344]	; (8003a4c <HAL_GPIO_Init+0x2e8>)
 80038f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038f8:	6453      	str	r3, [r2, #68]	; 0x44
 80038fa:	4b54      	ldr	r3, [pc, #336]	; (8003a4c <HAL_GPIO_Init+0x2e8>)
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003906:	4a52      	ldr	r2, [pc, #328]	; (8003a50 <HAL_GPIO_Init+0x2ec>)
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	089b      	lsrs	r3, r3, #2
 800390c:	3302      	adds	r3, #2
 800390e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	220f      	movs	r2, #15
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43db      	mvns	r3, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4013      	ands	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a49      	ldr	r2, [pc, #292]	; (8003a54 <HAL_GPIO_Init+0x2f0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d019      	beq.n	8003966 <HAL_GPIO_Init+0x202>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a48      	ldr	r2, [pc, #288]	; (8003a58 <HAL_GPIO_Init+0x2f4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d013      	beq.n	8003962 <HAL_GPIO_Init+0x1fe>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a47      	ldr	r2, [pc, #284]	; (8003a5c <HAL_GPIO_Init+0x2f8>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00d      	beq.n	800395e <HAL_GPIO_Init+0x1fa>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a46      	ldr	r2, [pc, #280]	; (8003a60 <HAL_GPIO_Init+0x2fc>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d007      	beq.n	800395a <HAL_GPIO_Init+0x1f6>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a45      	ldr	r2, [pc, #276]	; (8003a64 <HAL_GPIO_Init+0x300>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d101      	bne.n	8003956 <HAL_GPIO_Init+0x1f2>
 8003952:	2304      	movs	r3, #4
 8003954:	e008      	b.n	8003968 <HAL_GPIO_Init+0x204>
 8003956:	2307      	movs	r3, #7
 8003958:	e006      	b.n	8003968 <HAL_GPIO_Init+0x204>
 800395a:	2303      	movs	r3, #3
 800395c:	e004      	b.n	8003968 <HAL_GPIO_Init+0x204>
 800395e:	2302      	movs	r3, #2
 8003960:	e002      	b.n	8003968 <HAL_GPIO_Init+0x204>
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <HAL_GPIO_Init+0x204>
 8003966:	2300      	movs	r3, #0
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	f002 0203 	and.w	r2, r2, #3
 800396e:	0092      	lsls	r2, r2, #2
 8003970:	4093      	lsls	r3, r2
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4313      	orrs	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003978:	4935      	ldr	r1, [pc, #212]	; (8003a50 <HAL_GPIO_Init+0x2ec>)
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	089b      	lsrs	r3, r3, #2
 800397e:	3302      	adds	r3, #2
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003986:	4b38      	ldr	r3, [pc, #224]	; (8003a68 <HAL_GPIO_Init+0x304>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	43db      	mvns	r3, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4013      	ands	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039aa:	4a2f      	ldr	r2, [pc, #188]	; (8003a68 <HAL_GPIO_Init+0x304>)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039b0:	4b2d      	ldr	r3, [pc, #180]	; (8003a68 <HAL_GPIO_Init+0x304>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039d4:	4a24      	ldr	r2, [pc, #144]	; (8003a68 <HAL_GPIO_Init+0x304>)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039da:	4b23      	ldr	r3, [pc, #140]	; (8003a68 <HAL_GPIO_Init+0x304>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	43db      	mvns	r3, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4013      	ands	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039fe:	4a1a      	ldr	r2, [pc, #104]	; (8003a68 <HAL_GPIO_Init+0x304>)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a04:	4b18      	ldr	r3, [pc, #96]	; (8003a68 <HAL_GPIO_Init+0x304>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a28:	4a0f      	ldr	r2, [pc, #60]	; (8003a68 <HAL_GPIO_Init+0x304>)
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	3301      	adds	r3, #1
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	2b0f      	cmp	r3, #15
 8003a38:	f67f aea2 	bls.w	8003780 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a3c:	bf00      	nop
 8003a3e:	bf00      	nop
 8003a40:	3724      	adds	r7, #36	; 0x24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	40013800 	.word	0x40013800
 8003a54:	40020000 	.word	0x40020000
 8003a58:	40020400 	.word	0x40020400
 8003a5c:	40020800 	.word	0x40020800
 8003a60:	40020c00 	.word	0x40020c00
 8003a64:	40021000 	.word	0x40021000
 8003a68:	40013c00 	.word	0x40013c00

08003a6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	887b      	ldrh	r3, [r7, #2]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
 8003a88:	e001      	b.n	8003a8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	807b      	strh	r3, [r7, #2]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003aac:	787b      	ldrb	r3, [r7, #1]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ab2:	887a      	ldrh	r2, [r7, #2]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ab8:	e003      	b.n	8003ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003aba:	887b      	ldrh	r3, [r7, #2]
 8003abc:	041a      	lsls	r2, r3, #16
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	619a      	str	r2, [r3, #24]
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
	...

08003ad0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ada:	4b08      	ldr	r3, [pc, #32]	; (8003afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003adc:	695a      	ldr	r2, [r3, #20]
 8003ade:	88fb      	ldrh	r3, [r7, #6]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d006      	beq.n	8003af4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ae6:	4a05      	ldr	r2, [pc, #20]	; (8003afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ae8:	88fb      	ldrh	r3, [r7, #6]
 8003aea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003aec:	88fb      	ldrh	r3, [r7, #6]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fe fcbe 	bl	8002470 <HAL_GPIO_EXTI_Callback>
  }
}
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40013c00 	.word	0x40013c00

08003b00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e12b      	b.n	8003d6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d106      	bne.n	8003b2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fe fd5c 	bl	80025e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2224      	movs	r2, #36	; 0x24
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0201 	bic.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b64:	f003 fbda 	bl	800731c <HAL_RCC_GetPCLK1Freq>
 8003b68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	4a81      	ldr	r2, [pc, #516]	; (8003d74 <HAL_I2C_Init+0x274>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d807      	bhi.n	8003b84 <HAL_I2C_Init+0x84>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4a80      	ldr	r2, [pc, #512]	; (8003d78 <HAL_I2C_Init+0x278>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	bf94      	ite	ls
 8003b7c:	2301      	movls	r3, #1
 8003b7e:	2300      	movhi	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	e006      	b.n	8003b92 <HAL_I2C_Init+0x92>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4a7d      	ldr	r2, [pc, #500]	; (8003d7c <HAL_I2C_Init+0x27c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	bf94      	ite	ls
 8003b8c:	2301      	movls	r3, #1
 8003b8e:	2300      	movhi	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e0e7      	b.n	8003d6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4a78      	ldr	r2, [pc, #480]	; (8003d80 <HAL_I2C_Init+0x280>)
 8003b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba2:	0c9b      	lsrs	r3, r3, #18
 8003ba4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	4a6a      	ldr	r2, [pc, #424]	; (8003d74 <HAL_I2C_Init+0x274>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d802      	bhi.n	8003bd4 <HAL_I2C_Init+0xd4>
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	e009      	b.n	8003be8 <HAL_I2C_Init+0xe8>
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bda:	fb02 f303 	mul.w	r3, r2, r3
 8003bde:	4a69      	ldr	r2, [pc, #420]	; (8003d84 <HAL_I2C_Init+0x284>)
 8003be0:	fba2 2303 	umull	r2, r3, r2, r3
 8003be4:	099b      	lsrs	r3, r3, #6
 8003be6:	3301      	adds	r3, #1
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6812      	ldr	r2, [r2, #0]
 8003bec:	430b      	orrs	r3, r1
 8003bee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bfa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	495c      	ldr	r1, [pc, #368]	; (8003d74 <HAL_I2C_Init+0x274>)
 8003c04:	428b      	cmp	r3, r1
 8003c06:	d819      	bhi.n	8003c3c <HAL_I2C_Init+0x13c>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	1e59      	subs	r1, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c16:	1c59      	adds	r1, r3, #1
 8003c18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c1c:	400b      	ands	r3, r1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_I2C_Init+0x138>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	1e59      	subs	r1, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c30:	3301      	adds	r3, #1
 8003c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c36:	e051      	b.n	8003cdc <HAL_I2C_Init+0x1dc>
 8003c38:	2304      	movs	r3, #4
 8003c3a:	e04f      	b.n	8003cdc <HAL_I2C_Init+0x1dc>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d111      	bne.n	8003c68 <HAL_I2C_Init+0x168>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	1e58      	subs	r0, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6859      	ldr	r1, [r3, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	440b      	add	r3, r1
 8003c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c56:	3301      	adds	r3, #1
 8003c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	bf0c      	ite	eq
 8003c60:	2301      	moveq	r3, #1
 8003c62:	2300      	movne	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	e012      	b.n	8003c8e <HAL_I2C_Init+0x18e>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	1e58      	subs	r0, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6859      	ldr	r1, [r3, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	0099      	lsls	r1, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c7e:	3301      	adds	r3, #1
 8003c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bf0c      	ite	eq
 8003c88:	2301      	moveq	r3, #1
 8003c8a:	2300      	movne	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_I2C_Init+0x196>
 8003c92:	2301      	movs	r3, #1
 8003c94:	e022      	b.n	8003cdc <HAL_I2C_Init+0x1dc>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10e      	bne.n	8003cbc <HAL_I2C_Init+0x1bc>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1e58      	subs	r0, r3, #1
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6859      	ldr	r1, [r3, #4]
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	440b      	add	r3, r1
 8003cac:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cba:	e00f      	b.n	8003cdc <HAL_I2C_Init+0x1dc>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	1e58      	subs	r0, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6859      	ldr	r1, [r3, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	0099      	lsls	r1, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	6809      	ldr	r1, [r1, #0]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69da      	ldr	r2, [r3, #28]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6911      	ldr	r1, [r2, #16]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	68d2      	ldr	r2, [r2, #12]
 8003d16:	4311      	orrs	r1, r2
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695a      	ldr	r2, [r3, #20]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	000186a0 	.word	0x000186a0
 8003d78:	001e847f 	.word	0x001e847f
 8003d7c:	003d08ff 	.word	0x003d08ff
 8003d80:	431bde83 	.word	0x431bde83
 8003d84:	10624dd3 	.word	0x10624dd3

08003d88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af02      	add	r7, sp, #8
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	607a      	str	r2, [r7, #4]
 8003d92:	461a      	mov	r2, r3
 8003d94:	460b      	mov	r3, r1
 8003d96:	817b      	strh	r3, [r7, #10]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d9c:	f7ff f8e6 	bl	8002f6c <HAL_GetTick>
 8003da0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	f040 80e0 	bne.w	8003f70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	2319      	movs	r3, #25
 8003db6:	2201      	movs	r2, #1
 8003db8:	4970      	ldr	r1, [pc, #448]	; (8003f7c <HAL_I2C_Master_Transmit+0x1f4>)
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f001 fa24 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e0d3      	b.n	8003f72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_I2C_Master_Transmit+0x50>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e0cc      	b.n	8003f72 <HAL_I2C_Master_Transmit+0x1ea>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d007      	beq.n	8003dfe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 0201 	orr.w	r2, r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2221      	movs	r2, #33	; 0x21
 8003e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2210      	movs	r2, #16
 8003e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	893a      	ldrh	r2, [r7, #8]
 8003e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4a50      	ldr	r2, [pc, #320]	; (8003f80 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e40:	8979      	ldrh	r1, [r7, #10]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	6a3a      	ldr	r2, [r7, #32]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 ff10 	bl	8004c6c <I2C_MasterRequestWrite>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e08d      	b.n	8003f72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e56:	2300      	movs	r3, #0
 8003e58:	613b      	str	r3, [r7, #16]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e6c:	e066      	b.n	8003f3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	6a39      	ldr	r1, [r7, #32]
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f001 fa9e 	bl	80053b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00d      	beq.n	8003e9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d107      	bne.n	8003e96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e06b      	b.n	8003f72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	781a      	ldrb	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	d11b      	bne.n	8003f10 <HAL_I2C_Master_Transmit+0x188>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d017      	beq.n	8003f10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	781a      	ldrb	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	6a39      	ldr	r1, [r7, #32]
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f001 fa8e 	bl	8005436 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00d      	beq.n	8003f3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d107      	bne.n	8003f38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e01a      	b.n	8003f72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d194      	bne.n	8003e6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	e000      	b.n	8003f72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f70:	2302      	movs	r3, #2
  }
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	00100002 	.word	0x00100002
 8003f80:	ffff0000 	.word	0xffff0000

08003f84 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08c      	sub	sp, #48	; 0x30
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	607a      	str	r2, [r7, #4]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	460b      	mov	r3, r1
 8003f92:	817b      	strh	r3, [r7, #10]
 8003f94:	4613      	mov	r3, r2
 8003f96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f98:	f7fe ffe8 	bl	8002f6c <HAL_GetTick>
 8003f9c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b20      	cmp	r3, #32
 8003fa8:	f040 820b 	bne.w	80043c2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	2319      	movs	r3, #25
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	497c      	ldr	r1, [pc, #496]	; (80041a8 <HAL_I2C_Master_Receive+0x224>)
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f001 f926 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e1fe      	b.n	80043c4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_I2C_Master_Receive+0x50>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e1f7      	b.n	80043c4 <HAL_I2C_Master_Receive+0x440>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d007      	beq.n	8003ffa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0201 	orr.w	r2, r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004008:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2222      	movs	r2, #34	; 0x22
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2210      	movs	r2, #16
 8004016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	893a      	ldrh	r2, [r7, #8]
 800402a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4a5c      	ldr	r2, [pc, #368]	; (80041ac <HAL_I2C_Master_Receive+0x228>)
 800403a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800403c:	8979      	ldrh	r1, [r7, #10]
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 fe94 	bl	8004d70 <I2C_MasterRequestRead>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e1b8      	b.n	80043c4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004056:	2b00      	cmp	r3, #0
 8004058:	d113      	bne.n	8004082 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405a:	2300      	movs	r3, #0
 800405c:	623b      	str	r3, [r7, #32]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	623b      	str	r3, [r7, #32]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	623b      	str	r3, [r7, #32]
 800406e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	e18c      	b.n	800439c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004086:	2b01      	cmp	r3, #1
 8004088:	d11b      	bne.n	80040c2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004098:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800409a:	2300      	movs	r3, #0
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	61fb      	str	r3, [r7, #28]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	61fb      	str	r3, [r7, #28]
 80040ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	e16c      	b.n	800439c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d11b      	bne.n	8004102 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ea:	2300      	movs	r3, #0
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	61bb      	str	r3, [r7, #24]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	61bb      	str	r3, [r7, #24]
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	e14c      	b.n	800439c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004110:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	617b      	str	r3, [r7, #20]
 8004126:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004128:	e138      	b.n	800439c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412e:	2b03      	cmp	r3, #3
 8004130:	f200 80f1 	bhi.w	8004316 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004138:	2b01      	cmp	r3, #1
 800413a:	d123      	bne.n	8004184 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800413c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800413e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f001 f9b9 	bl	80054b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e139      	b.n	80043c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691a      	ldr	r2, [r3, #16]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004178:	b29b      	uxth	r3, r3
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004182:	e10b      	b.n	800439c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004188:	2b02      	cmp	r3, #2
 800418a:	d14e      	bne.n	800422a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004192:	2200      	movs	r2, #0
 8004194:	4906      	ldr	r1, [pc, #24]	; (80041b0 <HAL_I2C_Master_Receive+0x22c>)
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f001 f836 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d008      	beq.n	80041b4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e10e      	b.n	80043c4 <HAL_I2C_Master_Receive+0x440>
 80041a6:	bf00      	nop
 80041a8:	00100002 	.word	0x00100002
 80041ac:	ffff0000 	.word	0xffff0000
 80041b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004228:	e0b8      	b.n	800439c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004230:	2200      	movs	r2, #0
 8004232:	4966      	ldr	r1, [pc, #408]	; (80043cc <HAL_I2C_Master_Receive+0x448>)
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 ffe7 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0bf      	b.n	80043c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427c:	b29b      	uxth	r3, r3
 800427e:	3b01      	subs	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	2200      	movs	r2, #0
 800428e:	494f      	ldr	r1, [pc, #316]	; (80043cc <HAL_I2C_Master_Receive+0x448>)
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 ffb9 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e091      	b.n	80043c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d8:	b29b      	uxth	r3, r3
 80042da:	3b01      	subs	r3, #1
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004314:	e042      	b.n	800439c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004318:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f001 f8cc 	bl	80054b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e04c      	b.n	80043c4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b04      	cmp	r3, #4
 8004368:	d118      	bne.n	800439c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f47f aec2 	bne.w	800412a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	e000      	b.n	80043c4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80043c2:	2302      	movs	r3, #2
  }
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3728      	adds	r7, #40	; 0x28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	00010004 	.word	0x00010004

080043d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af02      	add	r7, sp, #8
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	4608      	mov	r0, r1
 80043da:	4611      	mov	r1, r2
 80043dc:	461a      	mov	r2, r3
 80043de:	4603      	mov	r3, r0
 80043e0:	817b      	strh	r3, [r7, #10]
 80043e2:	460b      	mov	r3, r1
 80043e4:	813b      	strh	r3, [r7, #8]
 80043e6:	4613      	mov	r3, r2
 80043e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043ea:	f7fe fdbf 	bl	8002f6c <HAL_GetTick>
 80043ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	f040 80d9 	bne.w	80045b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	2319      	movs	r3, #25
 8004404:	2201      	movs	r2, #1
 8004406:	496d      	ldr	r1, [pc, #436]	; (80045bc <HAL_I2C_Mem_Write+0x1ec>)
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 fefd 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004414:	2302      	movs	r3, #2
 8004416:	e0cc      	b.n	80045b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <HAL_I2C_Mem_Write+0x56>
 8004422:	2302      	movs	r3, #2
 8004424:	e0c5      	b.n	80045b2 <HAL_I2C_Mem_Write+0x1e2>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b01      	cmp	r3, #1
 800443a:	d007      	beq.n	800444c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800445a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2221      	movs	r2, #33	; 0x21
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2240      	movs	r2, #64	; 0x40
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a3a      	ldr	r2, [r7, #32]
 8004476:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800447c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4a4d      	ldr	r2, [pc, #308]	; (80045c0 <HAL_I2C_Mem_Write+0x1f0>)
 800448c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800448e:	88f8      	ldrh	r0, [r7, #6]
 8004490:	893a      	ldrh	r2, [r7, #8]
 8004492:	8979      	ldrh	r1, [r7, #10]
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	9301      	str	r3, [sp, #4]
 8004498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	4603      	mov	r3, r0
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 fd34 	bl	8004f0c <I2C_RequestMemoryWrite>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d052      	beq.n	8004550 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e081      	b.n	80045b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 ff7e 	bl	80053b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00d      	beq.n	80044da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d107      	bne.n	80044d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e06b      	b.n	80045b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	781a      	ldrb	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	1c5a      	adds	r2, r3, #1
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004500:	b29b      	uxth	r3, r3
 8004502:	3b01      	subs	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b04      	cmp	r3, #4
 8004516:	d11b      	bne.n	8004550 <HAL_I2C_Mem_Write+0x180>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451c:	2b00      	cmp	r3, #0
 800451e:	d017      	beq.n	8004550 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	781a      	ldrb	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453a:	3b01      	subs	r3, #1
 800453c:	b29a      	uxth	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004546:	b29b      	uxth	r3, r3
 8004548:	3b01      	subs	r3, #1
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1aa      	bne.n	80044ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 ff6a 	bl	8005436 <I2C_WaitOnBTFFlagUntilTimeout>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00d      	beq.n	8004584 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	2b04      	cmp	r3, #4
 800456e:	d107      	bne.n	8004580 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800457e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e016      	b.n	80045b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004592:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	e000      	b.n	80045b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80045b0:	2302      	movs	r3, #2
  }
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	00100002 	.word	0x00100002
 80045c0:	ffff0000 	.word	0xffff0000

080045c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08c      	sub	sp, #48	; 0x30
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	4608      	mov	r0, r1
 80045ce:	4611      	mov	r1, r2
 80045d0:	461a      	mov	r2, r3
 80045d2:	4603      	mov	r3, r0
 80045d4:	817b      	strh	r3, [r7, #10]
 80045d6:	460b      	mov	r3, r1
 80045d8:	813b      	strh	r3, [r7, #8]
 80045da:	4613      	mov	r3, r2
 80045dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045de:	f7fe fcc5 	bl	8002f6c <HAL_GetTick>
 80045e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b20      	cmp	r3, #32
 80045ee:	f040 8208 	bne.w	8004a02 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	2319      	movs	r3, #25
 80045f8:	2201      	movs	r2, #1
 80045fa:	497b      	ldr	r1, [pc, #492]	; (80047e8 <HAL_I2C_Mem_Read+0x224>)
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 fe03 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004608:	2302      	movs	r3, #2
 800460a:	e1fb      	b.n	8004a04 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <HAL_I2C_Mem_Read+0x56>
 8004616:	2302      	movs	r3, #2
 8004618:	e1f4      	b.n	8004a04 <HAL_I2C_Mem_Read+0x440>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b01      	cmp	r3, #1
 800462e:	d007      	beq.n	8004640 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800464e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2222      	movs	r2, #34	; 0x22
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2240      	movs	r2, #64	; 0x40
 800465c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800466a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004670:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4a5b      	ldr	r2, [pc, #364]	; (80047ec <HAL_I2C_Mem_Read+0x228>)
 8004680:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004682:	88f8      	ldrh	r0, [r7, #6]
 8004684:	893a      	ldrh	r2, [r7, #8]
 8004686:	8979      	ldrh	r1, [r7, #10]
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	9301      	str	r3, [sp, #4]
 800468c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	4603      	mov	r3, r0
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 fcd0 	bl	8005038 <I2C_RequestMemoryRead>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e1b0      	b.n	8004a04 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d113      	bne.n	80046d2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046aa:	2300      	movs	r3, #0
 80046ac:	623b      	str	r3, [r7, #32]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	623b      	str	r3, [r7, #32]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	623b      	str	r3, [r7, #32]
 80046be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	e184      	b.n	80049dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d11b      	bne.n	8004712 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ea:	2300      	movs	r3, #0
 80046ec:	61fb      	str	r3, [r7, #28]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	61fb      	str	r3, [r7, #28]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	61fb      	str	r3, [r7, #28]
 80046fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	e164      	b.n	80049dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004716:	2b02      	cmp	r3, #2
 8004718:	d11b      	bne.n	8004752 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004728:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004738:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800473a:	2300      	movs	r3, #0
 800473c:	61bb      	str	r3, [r7, #24]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	61bb      	str	r3, [r7, #24]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	61bb      	str	r3, [r7, #24]
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	e144      	b.n	80049dc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004752:	2300      	movs	r3, #0
 8004754:	617b      	str	r3, [r7, #20]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	617b      	str	r3, [r7, #20]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004768:	e138      	b.n	80049dc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476e:	2b03      	cmp	r3, #3
 8004770:	f200 80f1 	bhi.w	8004956 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004778:	2b01      	cmp	r3, #1
 800477a:	d123      	bne.n	80047c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800477c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800477e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 fe99 	bl	80054b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e139      	b.n	8004a04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	691a      	ldr	r2, [r3, #16]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	1c5a      	adds	r2, r3, #1
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ac:	3b01      	subs	r3, #1
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047c2:	e10b      	b.n	80049dc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d14e      	bne.n	800486a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d2:	2200      	movs	r2, #0
 80047d4:	4906      	ldr	r1, [pc, #24]	; (80047f0 <HAL_I2C_Mem_Read+0x22c>)
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 fd16 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d008      	beq.n	80047f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e10e      	b.n	8004a04 <HAL_I2C_Mem_Read+0x440>
 80047e6:	bf00      	nop
 80047e8:	00100002 	.word	0x00100002
 80047ec:	ffff0000 	.word	0xffff0000
 80047f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004802:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691a      	ldr	r2, [r3, #16]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	b2d2      	uxtb	r2, r2
 8004810:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004820:	3b01      	subs	r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482c:	b29b      	uxth	r3, r3
 800482e:	3b01      	subs	r3, #1
 8004830:	b29a      	uxth	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004852:	3b01      	subs	r3, #1
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004868:	e0b8      	b.n	80049dc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004870:	2200      	movs	r2, #0
 8004872:	4966      	ldr	r1, [pc, #408]	; (8004a0c <HAL_I2C_Mem_Read+0x448>)
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 fcc7 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e0bf      	b.n	8004a04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004892:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b0:	3b01      	subs	r3, #1
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048bc:	b29b      	uxth	r3, r3
 80048be:	3b01      	subs	r3, #1
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048cc:	2200      	movs	r2, #0
 80048ce:	494f      	ldr	r1, [pc, #316]	; (8004a0c <HAL_I2C_Mem_Read+0x448>)
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 fc99 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e091      	b.n	8004a04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691a      	ldr	r2, [r3, #16]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493e:	3b01      	subs	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004954:	e042      	b.n	80049dc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004958:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 fdac 	bl	80054b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e04c      	b.n	8004a04 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691a      	ldr	r2, [r3, #16]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	b2d2      	uxtb	r2, r2
 8004976:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004986:	3b01      	subs	r3, #1
 8004988:	b29a      	uxth	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004992:	b29b      	uxth	r3, r3
 8004994:	3b01      	subs	r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d118      	bne.n	80049dc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	691a      	ldr	r2, [r3, #16]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f47f aec2 	bne.w	800476a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	e000      	b.n	8004a04 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004a02:	2302      	movs	r3, #2
  }
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3728      	adds	r7, #40	; 0x28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	00010004 	.word	0x00010004

08004a10 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08a      	sub	sp, #40	; 0x28
 8004a14:	af02      	add	r7, sp, #8
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	607a      	str	r2, [r7, #4]
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004a20:	f7fe faa4 	bl	8002f6c <HAL_GetTick>
 8004a24:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	f040 8111 	bne.w	8004c5a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	2319      	movs	r3, #25
 8004a3e:	2201      	movs	r2, #1
 8004a40:	4988      	ldr	r1, [pc, #544]	; (8004c64 <HAL_I2C_IsDeviceReady+0x254>)
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 fbe0 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004a4e:	2302      	movs	r3, #2
 8004a50:	e104      	b.n	8004c5c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_I2C_IsDeviceReady+0x50>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e0fd      	b.n	8004c5c <HAL_I2C_IsDeviceReady+0x24c>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d007      	beq.n	8004a86 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0201 	orr.w	r2, r2, #1
 8004a84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2224      	movs	r2, #36	; 0x24
 8004a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4a70      	ldr	r2, [pc, #448]	; (8004c68 <HAL_I2C_IsDeviceReady+0x258>)
 8004aa8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ab8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 fb9e 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00d      	beq.n	8004aee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae0:	d103      	bne.n	8004aea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ae8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e0b6      	b.n	8004c5c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004aee:	897b      	ldrh	r3, [r7, #10]
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	461a      	mov	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004afc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004afe:	f7fe fa35 	bl	8002f6c <HAL_GetTick>
 8004b02:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	bf0c      	ite	eq
 8004b12:	2301      	moveq	r3, #1
 8004b14:	2300      	movne	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b28:	bf0c      	ite	eq
 8004b2a:	2301      	moveq	r3, #1
 8004b2c:	2300      	movne	r3, #0
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004b32:	e025      	b.n	8004b80 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b34:	f7fe fa1a 	bl	8002f6c <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d302      	bcc.n	8004b4a <HAL_I2C_IsDeviceReady+0x13a>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d103      	bne.n	8004b52 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	22a0      	movs	r2, #160	; 0xa0
 8004b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	bf0c      	ite	eq
 8004b60:	2301      	moveq	r3, #1
 8004b62:	2300      	movne	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b76:	bf0c      	ite	eq
 8004b78:	2301      	moveq	r3, #1
 8004b7a:	2300      	movne	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2ba0      	cmp	r3, #160	; 0xa0
 8004b8a:	d005      	beq.n	8004b98 <HAL_I2C_IsDeviceReady+0x188>
 8004b8c:	7dfb      	ldrb	r3, [r7, #23]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d102      	bne.n	8004b98 <HAL_I2C_IsDeviceReady+0x188>
 8004b92:	7dbb      	ldrb	r3, [r7, #22]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0cd      	beq.n	8004b34 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d129      	bne.n	8004c02 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bbc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	613b      	str	r3, [r7, #16]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	613b      	str	r3, [r7, #16]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	613b      	str	r3, [r7, #16]
 8004bd2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	2319      	movs	r3, #25
 8004bda:	2201      	movs	r2, #1
 8004bdc:	4921      	ldr	r1, [pc, #132]	; (8004c64 <HAL_I2C_IsDeviceReady+0x254>)
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 fb12 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e036      	b.n	8004c5c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e02c      	b.n	8004c5c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c10:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c1a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	2319      	movs	r3, #25
 8004c22:	2201      	movs	r2, #1
 8004c24:	490f      	ldr	r1, [pc, #60]	; (8004c64 <HAL_I2C_IsDeviceReady+0x254>)
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 faee 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e012      	b.n	8004c5c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	f4ff af32 	bcc.w	8004aaa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e000      	b.n	8004c5c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004c5a:	2302      	movs	r3, #2
  }
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3720      	adds	r7, #32
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	00100002 	.word	0x00100002
 8004c68:	ffff0000 	.word	0xffff0000

08004c6c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b088      	sub	sp, #32
 8004c70:	af02      	add	r7, sp, #8
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	607a      	str	r2, [r7, #4]
 8004c76:	603b      	str	r3, [r7, #0]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d006      	beq.n	8004c96 <I2C_MasterRequestWrite+0x2a>
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d003      	beq.n	8004c96 <I2C_MasterRequestWrite+0x2a>
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c94:	d108      	bne.n	8004ca8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	e00b      	b.n	8004cc0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	2b12      	cmp	r3, #18
 8004cae:	d107      	bne.n	8004cc0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cbe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 fa9b 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00d      	beq.n	8004cf4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ce6:	d103      	bne.n	8004cf0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e035      	b.n	8004d60 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cfc:	d108      	bne.n	8004d10 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cfe:	897b      	ldrh	r3, [r7, #10]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	461a      	mov	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d0c:	611a      	str	r2, [r3, #16]
 8004d0e:	e01b      	b.n	8004d48 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d10:	897b      	ldrh	r3, [r7, #10]
 8004d12:	11db      	asrs	r3, r3, #7
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	f003 0306 	and.w	r3, r3, #6
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	f063 030f 	orn	r3, r3, #15
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	490e      	ldr	r1, [pc, #56]	; (8004d68 <I2C_MasterRequestWrite+0xfc>)
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 fac1 	bl	80052b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e010      	b.n	8004d60 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d3e:	897b      	ldrh	r3, [r7, #10]
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	4907      	ldr	r1, [pc, #28]	; (8004d6c <I2C_MasterRequestWrite+0x100>)
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f000 fab1 	bl	80052b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e000      	b.n	8004d60 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	00010008 	.word	0x00010008
 8004d6c:	00010002 	.word	0x00010002

08004d70 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b088      	sub	sp, #32
 8004d74:	af02      	add	r7, sp, #8
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	607a      	str	r2, [r7, #4]
 8004d7a:	603b      	str	r3, [r7, #0]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d94:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d006      	beq.n	8004daa <I2C_MasterRequestRead+0x3a>
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d003      	beq.n	8004daa <I2C_MasterRequestRead+0x3a>
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004da8:	d108      	bne.n	8004dbc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	e00b      	b.n	8004dd4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	2b11      	cmp	r3, #17
 8004dc2:	d107      	bne.n	8004dd4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f000 fa11 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00d      	beq.n	8004e08 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dfa:	d103      	bne.n	8004e04 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e079      	b.n	8004efc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e10:	d108      	bne.n	8004e24 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e12:	897b      	ldrh	r3, [r7, #10]
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	f043 0301 	orr.w	r3, r3, #1
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	611a      	str	r2, [r3, #16]
 8004e22:	e05f      	b.n	8004ee4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e24:	897b      	ldrh	r3, [r7, #10]
 8004e26:	11db      	asrs	r3, r3, #7
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	f003 0306 	and.w	r3, r3, #6
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	f063 030f 	orn	r3, r3, #15
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	4930      	ldr	r1, [pc, #192]	; (8004f04 <I2C_MasterRequestRead+0x194>)
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 fa37 	bl	80052b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e054      	b.n	8004efc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e52:	897b      	ldrh	r3, [r7, #10]
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	4929      	ldr	r1, [pc, #164]	; (8004f08 <I2C_MasterRequestRead+0x198>)
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 fa27 	bl	80052b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e044      	b.n	8004efc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e72:	2300      	movs	r3, #0
 8004e74:	613b      	str	r3, [r7, #16]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e96:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 f9af 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00d      	beq.n	8004ecc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ebe:	d103      	bne.n	8004ec8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ec6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e017      	b.n	8004efc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004ecc:	897b      	ldrh	r3, [r7, #10]
 8004ece:	11db      	asrs	r3, r3, #7
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	f003 0306 	and.w	r3, r3, #6
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	f063 030e 	orn	r3, r3, #14
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	4907      	ldr	r1, [pc, #28]	; (8004f08 <I2C_MasterRequestRead+0x198>)
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 f9e3 	bl	80052b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e000      	b.n	8004efc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3718      	adds	r7, #24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	00010008 	.word	0x00010008
 8004f08:	00010002 	.word	0x00010002

08004f0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	4608      	mov	r0, r1
 8004f16:	4611      	mov	r1, r2
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	817b      	strh	r3, [r7, #10]
 8004f1e:	460b      	mov	r3, r1
 8004f20:	813b      	strh	r3, [r7, #8]
 8004f22:	4613      	mov	r3, r2
 8004f24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	6a3b      	ldr	r3, [r7, #32]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 f960 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00d      	beq.n	8004f6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f5c:	d103      	bne.n	8004f66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e05f      	b.n	800502a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f6a:	897b      	ldrh	r3, [r7, #10]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	461a      	mov	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	6a3a      	ldr	r2, [r7, #32]
 8004f7e:	492d      	ldr	r1, [pc, #180]	; (8005034 <I2C_RequestMemoryWrite+0x128>)
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 f998 	bl	80052b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e04c      	b.n	800502a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	617b      	str	r3, [r7, #20]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	617b      	str	r3, [r7, #20]
 8004fa4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa8:	6a39      	ldr	r1, [r7, #32]
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 fa02 	bl	80053b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00d      	beq.n	8004fd2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d107      	bne.n	8004fce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e02b      	b.n	800502a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d105      	bne.n	8004fe4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fd8:	893b      	ldrh	r3, [r7, #8]
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	611a      	str	r2, [r3, #16]
 8004fe2:	e021      	b.n	8005028 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004fe4:	893b      	ldrh	r3, [r7, #8]
 8004fe6:	0a1b      	lsrs	r3, r3, #8
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	b2da      	uxtb	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff4:	6a39      	ldr	r1, [r7, #32]
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 f9dc 	bl	80053b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00d      	beq.n	800501e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	2b04      	cmp	r3, #4
 8005008:	d107      	bne.n	800501a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005018:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e005      	b.n	800502a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800501e:	893b      	ldrh	r3, [r7, #8]
 8005020:	b2da      	uxtb	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	00010002 	.word	0x00010002

08005038 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b088      	sub	sp, #32
 800503c:	af02      	add	r7, sp, #8
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	4608      	mov	r0, r1
 8005042:	4611      	mov	r1, r2
 8005044:	461a      	mov	r2, r3
 8005046:	4603      	mov	r3, r0
 8005048:	817b      	strh	r3, [r7, #10]
 800504a:	460b      	mov	r3, r1
 800504c:	813b      	strh	r3, [r7, #8]
 800504e:	4613      	mov	r3, r2
 8005050:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005060:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005070:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	2200      	movs	r2, #0
 800507a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f8c2 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00d      	beq.n	80050a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005098:	d103      	bne.n	80050a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e0aa      	b.n	80051fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050a6:	897b      	ldrh	r3, [r7, #10]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	461a      	mov	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	6a3a      	ldr	r2, [r7, #32]
 80050ba:	4952      	ldr	r1, [pc, #328]	; (8005204 <I2C_RequestMemoryRead+0x1cc>)
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f8fa 	bl	80052b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e097      	b.n	80051fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050cc:	2300      	movs	r3, #0
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e4:	6a39      	ldr	r1, [r7, #32]
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 f964 	bl	80053b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00d      	beq.n	800510e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d107      	bne.n	800510a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005108:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e076      	b.n	80051fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800510e:	88fb      	ldrh	r3, [r7, #6]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d105      	bne.n	8005120 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005114:	893b      	ldrh	r3, [r7, #8]
 8005116:	b2da      	uxtb	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	611a      	str	r2, [r3, #16]
 800511e:	e021      	b.n	8005164 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005120:	893b      	ldrh	r3, [r7, #8]
 8005122:	0a1b      	lsrs	r3, r3, #8
 8005124:	b29b      	uxth	r3, r3
 8005126:	b2da      	uxtb	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800512e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005130:	6a39      	ldr	r1, [r7, #32]
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 f93e 	bl	80053b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00d      	beq.n	800515a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	2b04      	cmp	r3, #4
 8005144:	d107      	bne.n	8005156 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005154:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e050      	b.n	80051fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800515a:	893b      	ldrh	r3, [r7, #8]
 800515c:	b2da      	uxtb	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005166:	6a39      	ldr	r1, [r7, #32]
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 f923 	bl	80053b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00d      	beq.n	8005190 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005178:	2b04      	cmp	r3, #4
 800517a:	d107      	bne.n	800518c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800518a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e035      	b.n	80051fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800519e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 f82b 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00d      	beq.n	80051d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c6:	d103      	bne.n	80051d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e013      	b.n	80051fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80051d4:	897b      	ldrh	r3, [r7, #10]
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	f043 0301 	orr.w	r3, r3, #1
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	6a3a      	ldr	r2, [r7, #32]
 80051e8:	4906      	ldr	r1, [pc, #24]	; (8005204 <I2C_RequestMemoryRead+0x1cc>)
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 f863 	bl	80052b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	00010002 	.word	0x00010002

08005208 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	603b      	str	r3, [r7, #0]
 8005214:	4613      	mov	r3, r2
 8005216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005218:	e025      	b.n	8005266 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005220:	d021      	beq.n	8005266 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005222:	f7fd fea3 	bl	8002f6c <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d302      	bcc.n	8005238 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d116      	bne.n	8005266 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2220      	movs	r2, #32
 8005242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	f043 0220 	orr.w	r2, r3, #32
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e023      	b.n	80052ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	0c1b      	lsrs	r3, r3, #16
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b01      	cmp	r3, #1
 800526e:	d10d      	bne.n	800528c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	43da      	mvns	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	4013      	ands	r3, r2
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	bf0c      	ite	eq
 8005282:	2301      	moveq	r3, #1
 8005284:	2300      	movne	r3, #0
 8005286:	b2db      	uxtb	r3, r3
 8005288:	461a      	mov	r2, r3
 800528a:	e00c      	b.n	80052a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	43da      	mvns	r2, r3
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	4013      	ands	r3, r2
 8005298:	b29b      	uxth	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	bf0c      	ite	eq
 800529e:	2301      	moveq	r3, #1
 80052a0:	2300      	movne	r3, #0
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	461a      	mov	r2, r3
 80052a6:	79fb      	ldrb	r3, [r7, #7]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d0b6      	beq.n	800521a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	607a      	str	r2, [r7, #4]
 80052c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052c4:	e051      	b.n	800536a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d4:	d123      	bne.n	800531e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	f043 0204 	orr.w	r2, r3, #4
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e046      	b.n	80053ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005324:	d021      	beq.n	800536a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005326:	f7fd fe21 	bl	8002f6c <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	429a      	cmp	r2, r3
 8005334:	d302      	bcc.n	800533c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d116      	bne.n	800536a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2220      	movs	r2, #32
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	f043 0220 	orr.w	r2, r3, #32
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e020      	b.n	80053ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	0c1b      	lsrs	r3, r3, #16
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b01      	cmp	r3, #1
 8005372:	d10c      	bne.n	800538e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	43da      	mvns	r2, r3
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	4013      	ands	r3, r2
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	bf14      	ite	ne
 8005386:	2301      	movne	r3, #1
 8005388:	2300      	moveq	r3, #0
 800538a:	b2db      	uxtb	r3, r3
 800538c:	e00b      	b.n	80053a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	43da      	mvns	r2, r3
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	4013      	ands	r3, r2
 800539a:	b29b      	uxth	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	bf14      	ite	ne
 80053a0:	2301      	movne	r3, #1
 80053a2:	2300      	moveq	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d18d      	bne.n	80052c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053c0:	e02d      	b.n	800541e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 f8ce 	bl	8005564 <I2C_IsAcknowledgeFailed>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e02d      	b.n	800542e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d8:	d021      	beq.n	800541e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053da:	f7fd fdc7 	bl	8002f6c <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d302      	bcc.n	80053f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d116      	bne.n	800541e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	f043 0220 	orr.w	r2, r3, #32
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e007      	b.n	800542e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005428:	2b80      	cmp	r3, #128	; 0x80
 800542a:	d1ca      	bne.n	80053c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b084      	sub	sp, #16
 800543a:	af00      	add	r7, sp, #0
 800543c:	60f8      	str	r0, [r7, #12]
 800543e:	60b9      	str	r1, [r7, #8]
 8005440:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005442:	e02d      	b.n	80054a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 f88d 	bl	8005564 <I2C_IsAcknowledgeFailed>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e02d      	b.n	80054b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545a:	d021      	beq.n	80054a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800545c:	f7fd fd86 	bl	8002f6c <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	429a      	cmp	r2, r3
 800546a:	d302      	bcc.n	8005472 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d116      	bne.n	80054a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	f043 0220 	orr.w	r2, r3, #32
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e007      	b.n	80054b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	f003 0304 	and.w	r3, r3, #4
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d1ca      	bne.n	8005444 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054c4:	e042      	b.n	800554c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	f003 0310 	and.w	r3, r3, #16
 80054d0:	2b10      	cmp	r3, #16
 80054d2:	d119      	bne.n	8005508 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0210 	mvn.w	r2, #16
 80054dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e029      	b.n	800555c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005508:	f7fd fd30 	bl	8002f6c <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	429a      	cmp	r2, r3
 8005516:	d302      	bcc.n	800551e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d116      	bne.n	800554c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2220      	movs	r2, #32
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005538:	f043 0220 	orr.w	r2, r3, #32
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e007      	b.n	800555c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005556:	2b40      	cmp	r3, #64	; 0x40
 8005558:	d1b5      	bne.n	80054c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800557a:	d11b      	bne.n	80055b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005584:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a0:	f043 0204 	orr.w	r2, r3, #4
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e000      	b.n	80055b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80055c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055c4:	b08f      	sub	sp, #60	; 0x3c
 80055c6:	af0a      	add	r7, sp, #40	; 0x28
 80055c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e10f      	b.n	80057f4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f009 fe74 	bl	800f2dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2203      	movs	r2, #3
 80055f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005604:	2b00      	cmp	r3, #0
 8005606:	d102      	bne.n	800560e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4618      	mov	r0, r3
 8005614:	f002 ff67 	bl	80084e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	603b      	str	r3, [r7, #0]
 800561e:	687e      	ldr	r6, [r7, #4]
 8005620:	466d      	mov	r5, sp
 8005622:	f106 0410 	add.w	r4, r6, #16
 8005626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800562a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800562c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800562e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005632:	e885 0003 	stmia.w	r5, {r0, r1}
 8005636:	1d33      	adds	r3, r6, #4
 8005638:	cb0e      	ldmia	r3, {r1, r2, r3}
 800563a:	6838      	ldr	r0, [r7, #0]
 800563c:	f002 fe3e 	bl	80082bc <USB_CoreInit>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d005      	beq.n	8005652 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2202      	movs	r2, #2
 800564a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e0d0      	b.n	80057f4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2100      	movs	r1, #0
 8005658:	4618      	mov	r0, r3
 800565a:	f002 ff55 	bl	8008508 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800565e:	2300      	movs	r3, #0
 8005660:	73fb      	strb	r3, [r7, #15]
 8005662:	e04a      	b.n	80056fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005664:	7bfa      	ldrb	r2, [r7, #15]
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	4613      	mov	r3, r2
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	4413      	add	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	440b      	add	r3, r1
 8005672:	333d      	adds	r3, #61	; 0x3d
 8005674:	2201      	movs	r2, #1
 8005676:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005678:	7bfa      	ldrb	r2, [r7, #15]
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	4613      	mov	r3, r2
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	4413      	add	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	333c      	adds	r3, #60	; 0x3c
 8005688:	7bfa      	ldrb	r2, [r7, #15]
 800568a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800568c:	7bfa      	ldrb	r2, [r7, #15]
 800568e:	7bfb      	ldrb	r3, [r7, #15]
 8005690:	b298      	uxth	r0, r3
 8005692:	6879      	ldr	r1, [r7, #4]
 8005694:	4613      	mov	r3, r2
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	4413      	add	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	440b      	add	r3, r1
 800569e:	3344      	adds	r3, #68	; 0x44
 80056a0:	4602      	mov	r2, r0
 80056a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80056a4:	7bfa      	ldrb	r2, [r7, #15]
 80056a6:	6879      	ldr	r1, [r7, #4]
 80056a8:	4613      	mov	r3, r2
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	4413      	add	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	3340      	adds	r3, #64	; 0x40
 80056b4:	2200      	movs	r2, #0
 80056b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80056b8:	7bfa      	ldrb	r2, [r7, #15]
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	4613      	mov	r3, r2
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	4413      	add	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	440b      	add	r3, r1
 80056c6:	3348      	adds	r3, #72	; 0x48
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056cc:	7bfa      	ldrb	r2, [r7, #15]
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	4613      	mov	r3, r2
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	4413      	add	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	440b      	add	r3, r1
 80056da:	334c      	adds	r3, #76	; 0x4c
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80056e0:	7bfa      	ldrb	r2, [r7, #15]
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	4613      	mov	r3, r2
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	4413      	add	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	440b      	add	r3, r1
 80056ee:	3354      	adds	r3, #84	; 0x54
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	3301      	adds	r3, #1
 80056f8:	73fb      	strb	r3, [r7, #15]
 80056fa:	7bfa      	ldrb	r2, [r7, #15]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	429a      	cmp	r2, r3
 8005702:	d3af      	bcc.n	8005664 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005704:	2300      	movs	r3, #0
 8005706:	73fb      	strb	r3, [r7, #15]
 8005708:	e044      	b.n	8005794 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800570a:	7bfa      	ldrb	r2, [r7, #15]
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	4613      	mov	r3, r2
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	4413      	add	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	440b      	add	r3, r1
 8005718:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800571c:	2200      	movs	r2, #0
 800571e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005720:	7bfa      	ldrb	r2, [r7, #15]
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	4613      	mov	r3, r2
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	4413      	add	r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	440b      	add	r3, r1
 800572e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005732:	7bfa      	ldrb	r2, [r7, #15]
 8005734:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005736:	7bfa      	ldrb	r2, [r7, #15]
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	4613      	mov	r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	440b      	add	r3, r1
 8005744:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005748:	2200      	movs	r2, #0
 800574a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800574c:	7bfa      	ldrb	r2, [r7, #15]
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	4613      	mov	r3, r2
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	4413      	add	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005762:	7bfa      	ldrb	r2, [r7, #15]
 8005764:	6879      	ldr	r1, [r7, #4]
 8005766:	4613      	mov	r3, r2
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	4413      	add	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	440b      	add	r3, r1
 8005770:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005778:	7bfa      	ldrb	r2, [r7, #15]
 800577a:	6879      	ldr	r1, [r7, #4]
 800577c:	4613      	mov	r3, r2
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	440b      	add	r3, r1
 8005786:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800578e:	7bfb      	ldrb	r3, [r7, #15]
 8005790:	3301      	adds	r3, #1
 8005792:	73fb      	strb	r3, [r7, #15]
 8005794:	7bfa      	ldrb	r2, [r7, #15]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	429a      	cmp	r2, r3
 800579c:	d3b5      	bcc.n	800570a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	603b      	str	r3, [r7, #0]
 80057a4:	687e      	ldr	r6, [r7, #4]
 80057a6:	466d      	mov	r5, sp
 80057a8:	f106 0410 	add.w	r4, r6, #16
 80057ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80057b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80057bc:	1d33      	adds	r3, r6, #4
 80057be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057c0:	6838      	ldr	r0, [r7, #0]
 80057c2:	f002 feed 	bl	80085a0 <USB_DevInit>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e00d      	b.n	80057f4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f004 f83c 	bl	800986a <USB_DevDisconnect>

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057fc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_PCD_Start+0x1c>
 8005814:	2302      	movs	r3, #2
 8005816:	e020      	b.n	800585a <HAL_PCD_Start+0x5e>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005824:	2b01      	cmp	r3, #1
 8005826:	d109      	bne.n	800583c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800582c:	2b01      	cmp	r3, #1
 800582e:	d005      	beq.n	800583c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4618      	mov	r0, r3
 8005842:	f002 fe3f 	bl	80084c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4618      	mov	r0, r3
 800584c:	f003 ffec 	bl	8009828 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005862:	b590      	push	{r4, r7, lr}
 8005864:	b08d      	sub	sp, #52	; 0x34
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4618      	mov	r0, r3
 800587a:	f004 f8aa 	bl	80099d2 <USB_GetMode>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	f040 848a 	bne.w	800619a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	f004 f80e 	bl	80098ac <USB_ReadInterrupts>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 8480 	beq.w	8006198 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	0a1b      	lsrs	r3, r3, #8
 80058a2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f003 fffb 	bl	80098ac <USB_ReadInterrupts>
 80058b6:	4603      	mov	r3, r0
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d107      	bne.n	80058d0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695a      	ldr	r2, [r3, #20]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f002 0202 	and.w	r2, r2, #2
 80058ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f003 ffe9 	bl	80098ac <USB_ReadInterrupts>
 80058da:	4603      	mov	r3, r0
 80058dc:	f003 0310 	and.w	r3, r3, #16
 80058e0:	2b10      	cmp	r3, #16
 80058e2:	d161      	bne.n	80059a8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699a      	ldr	r2, [r3, #24]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0210 	bic.w	r2, r2, #16
 80058f2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	f003 020f 	and.w	r2, r3, #15
 8005900:	4613      	mov	r3, r2
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	4413      	add	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	4413      	add	r3, r2
 8005910:	3304      	adds	r3, #4
 8005912:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	0c5b      	lsrs	r3, r3, #17
 8005918:	f003 030f 	and.w	r3, r3, #15
 800591c:	2b02      	cmp	r3, #2
 800591e:	d124      	bne.n	800596a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005926:	4013      	ands	r3, r2
 8005928:	2b00      	cmp	r3, #0
 800592a:	d035      	beq.n	8005998 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	091b      	lsrs	r3, r3, #4
 8005934:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005936:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800593a:	b29b      	uxth	r3, r3
 800593c:	461a      	mov	r2, r3
 800593e:	6a38      	ldr	r0, [r7, #32]
 8005940:	f003 fe20 	bl	8009584 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	691a      	ldr	r2, [r3, #16]
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	091b      	lsrs	r3, r3, #4
 800594c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005950:	441a      	add	r2, r3
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	6a1a      	ldr	r2, [r3, #32]
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	091b      	lsrs	r3, r3, #4
 800595e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005962:	441a      	add	r2, r3
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	621a      	str	r2, [r3, #32]
 8005968:	e016      	b.n	8005998 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	0c5b      	lsrs	r3, r3, #17
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	2b06      	cmp	r3, #6
 8005974:	d110      	bne.n	8005998 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800597c:	2208      	movs	r2, #8
 800597e:	4619      	mov	r1, r3
 8005980:	6a38      	ldr	r0, [r7, #32]
 8005982:	f003 fdff 	bl	8009584 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	6a1a      	ldr	r2, [r3, #32]
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	091b      	lsrs	r3, r3, #4
 800598e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005992:	441a      	add	r2, r3
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699a      	ldr	r2, [r3, #24]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0210 	orr.w	r2, r2, #16
 80059a6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f003 ff7d 	bl	80098ac <USB_ReadInterrupts>
 80059b2:	4603      	mov	r3, r0
 80059b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80059bc:	f040 80a7 	bne.w	8005b0e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f003 ff82 	bl	80098d2 <USB_ReadDevAllOutEpInterrupt>
 80059ce:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80059d0:	e099      	b.n	8005b06 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80059d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 808e 	beq.w	8005afa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	4611      	mov	r1, r2
 80059e8:	4618      	mov	r0, r3
 80059ea:	f003 ffa6 	bl	800993a <USB_ReadDevOutEPInterrupt>
 80059ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00c      	beq.n	8005a14 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a06:	461a      	mov	r2, r3
 8005a08:	2301      	movs	r3, #1
 8005a0a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fec2 	bl	8006798 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00c      	beq.n	8005a38 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	2308      	movs	r3, #8
 8005a2e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005a30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 ff98 	bl	8006968 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f003 0310 	and.w	r3, r3, #16
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d008      	beq.n	8005a54 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4e:	461a      	mov	r2, r3
 8005a50:	2310      	movs	r3, #16
 8005a52:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d030      	beq.n	8005ac0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a66:	2b80      	cmp	r3, #128	; 0x80
 8005a68:	d109      	bne.n	8005a7e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	69fa      	ldr	r2, [r7, #28]
 8005a74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a7c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a80:	4613      	mov	r3, r2
 8005a82:	00db      	lsls	r3, r3, #3
 8005a84:	4413      	add	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	4413      	add	r3, r2
 8005a90:	3304      	adds	r3, #4
 8005a92:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	78db      	ldrb	r3, [r3, #3]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d108      	bne.n	8005aae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f009 fd13 	bl	800f4d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aba:	461a      	mov	r2, r3
 8005abc:	2302      	movs	r3, #2
 8005abe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f003 0320 	and.w	r3, r3, #32
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d008      	beq.n	8005adc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	2320      	movs	r3, #32
 8005ada:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d009      	beq.n	8005afa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af2:	461a      	mov	r2, r3
 8005af4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005af8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	3301      	adds	r3, #1
 8005afe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b02:	085b      	lsrs	r3, r3, #1
 8005b04:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f47f af62 	bne.w	80059d2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f003 feca 	bl	80098ac <USB_ReadInterrupts>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b22:	f040 80db 	bne.w	8005cdc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f003 feeb 	bl	8009906 <USB_ReadDevAllInEpInterrupt>
 8005b30:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005b36:	e0cd      	b.n	8005cd4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 80c2 	beq.w	8005cc8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4a:	b2d2      	uxtb	r2, r2
 8005b4c:	4611      	mov	r1, r2
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f003 ff11 	bl	8009976 <USB_ReadDevInEPInterrupt>
 8005b54:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d057      	beq.n	8005c10 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	2201      	movs	r2, #1
 8005b68:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	43db      	mvns	r3, r3
 8005b7a:	69f9      	ldr	r1, [r7, #28]
 8005b7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b80:	4013      	ands	r3, r2
 8005b82:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b90:	461a      	mov	r2, r3
 8005b92:	2301      	movs	r3, #1
 8005b94:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d132      	bne.n	8005c04 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005b9e:	6879      	ldr	r1, [r7, #4]
 8005ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	4413      	add	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	440b      	add	r3, r1
 8005bac:	334c      	adds	r3, #76	; 0x4c
 8005bae:	6819      	ldr	r1, [r3, #0]
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	4413      	add	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4403      	add	r3, r0
 8005bbe:	3348      	adds	r3, #72	; 0x48
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4419      	add	r1, r3
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc8:	4613      	mov	r3, r2
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	4413      	add	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4403      	add	r3, r0
 8005bd2:	334c      	adds	r3, #76	; 0x4c
 8005bd4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d113      	bne.n	8005c04 <HAL_PCD_IRQHandler+0x3a2>
 8005bdc:	6879      	ldr	r1, [r7, #4]
 8005bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be0:	4613      	mov	r3, r2
 8005be2:	00db      	lsls	r3, r3, #3
 8005be4:	4413      	add	r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	440b      	add	r3, r1
 8005bea:	3354      	adds	r3, #84	; 0x54
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d108      	bne.n	8005c04 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	2101      	movs	r1, #1
 8005c00:	f003 ff18 	bl	8009a34 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f009 fbe7 	bl	800f3de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f003 0308 	and.w	r3, r3, #8
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d008      	beq.n	8005c2c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c26:	461a      	mov	r2, r3
 8005c28:	2308      	movs	r3, #8
 8005c2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f003 0310 	and.w	r3, r3, #16
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d008      	beq.n	8005c48 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c42:	461a      	mov	r2, r3
 8005c44:	2310      	movs	r3, #16
 8005c46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d008      	beq.n	8005c64 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5e:	461a      	mov	r2, r3
 8005c60:	2340      	movs	r3, #64	; 0x40
 8005c62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d023      	beq.n	8005cb6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005c6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c70:	6a38      	ldr	r0, [r7, #32]
 8005c72:	f002 fdf9 	bl	8008868 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c78:	4613      	mov	r3, r2
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	4413      	add	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	3338      	adds	r3, #56	; 0x38
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	4413      	add	r3, r2
 8005c86:	3304      	adds	r3, #4
 8005c88:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	78db      	ldrb	r3, [r3, #3]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d108      	bne.n	8005ca4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2200      	movs	r2, #0
 8005c96:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f009 fc2a 	bl	800f4f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d003      	beq.n	8005cc8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005cc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fcdb 	bl	800667e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	3301      	adds	r3, #1
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd0:	085b      	lsrs	r3, r3, #1
 8005cd2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f47f af2e 	bne.w	8005b38 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f003 fde3 	bl	80098ac <USB_ReadInterrupts>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cf0:	d122      	bne.n	8005d38 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	69fa      	ldr	r2, [r7, #28]
 8005cfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d00:	f023 0301 	bic.w	r3, r3, #1
 8005d04:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d108      	bne.n	8005d22 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005d18:	2100      	movs	r1, #0
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fec2 	bl	8006aa4 <HAL_PCDEx_LPM_Callback>
 8005d20:	e002      	b.n	8005d28 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f009 fbc8 	bl	800f4b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	695a      	ldr	r2, [r3, #20]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005d36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f003 fdb5 	bl	80098ac <USB_ReadInterrupts>
 8005d42:	4603      	mov	r3, r0
 8005d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d4c:	d112      	bne.n	8005d74 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d102      	bne.n	8005d64 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f009 fb84 	bl	800f46c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695a      	ldr	r2, [r3, #20]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005d72:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f003 fd97 	bl	80098ac <USB_ReadInterrupts>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d88:	f040 80b7 	bne.w	8005efa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	69fa      	ldr	r2, [r7, #28]
 8005d96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d9a:	f023 0301 	bic.w	r3, r3, #1
 8005d9e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2110      	movs	r1, #16
 8005da6:	4618      	mov	r0, r3
 8005da8:	f002 fd5e 	bl	8008868 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dac:	2300      	movs	r3, #0
 8005dae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005db0:	e046      	b.n	8005e40 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dc4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dd6:	0151      	lsls	r1, r2, #5
 8005dd8:	69fa      	ldr	r2, [r7, #28]
 8005dda:	440a      	add	r2, r1
 8005ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005de4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df2:	461a      	mov	r2, r3
 8005df4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005df8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e0a:	0151      	lsls	r1, r2, #5
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	440a      	add	r2, r1
 8005e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e18:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e2a:	0151      	lsls	r1, r2, #5
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	440a      	add	r2, r1
 8005e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e38:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d3b3      	bcc.n	8005db2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	69fa      	ldr	r2, [r7, #28]
 8005e54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e58:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005e5c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d016      	beq.n	8005e94 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e70:	69fa      	ldr	r2, [r7, #28]
 8005e72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e76:	f043 030b 	orr.w	r3, r3, #11
 8005e7a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e86:	69fa      	ldr	r2, [r7, #28]
 8005e88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e8c:	f043 030b 	orr.w	r3, r3, #11
 8005e90:	6453      	str	r3, [r2, #68]	; 0x44
 8005e92:	e015      	b.n	8005ec0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	69fa      	ldr	r2, [r7, #28]
 8005e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ea2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005ea6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005eaa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	69fa      	ldr	r2, [r7, #28]
 8005eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eba:	f043 030b 	orr.w	r3, r3, #11
 8005ebe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	69fa      	ldr	r2, [r7, #28]
 8005eca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ece:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005ed2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6818      	ldr	r0, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	f003 fda5 	bl	8009a34 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	695a      	ldr	r2, [r3, #20]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005ef8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f003 fcd4 	bl	80098ac <USB_ReadInterrupts>
 8005f04:	4603      	mov	r3, r0
 8005f06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f0e:	d124      	bne.n	8005f5a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f003 fd6a 	bl	80099ee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f002 fd1f 	bl	8008962 <USB_GetDevSpeed>
 8005f24:	4603      	mov	r3, r0
 8005f26:	461a      	mov	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681c      	ldr	r4, [r3, #0]
 8005f30:	f001 f9e8 	bl	8007304 <HAL_RCC_GetHCLKFreq>
 8005f34:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f002 fa1e 	bl	8008380 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f009 fa72 	bl	800f42e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	695a      	ldr	r2, [r3, #20]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005f58:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f003 fca4 	bl	80098ac <USB_ReadInterrupts>
 8005f64:	4603      	mov	r3, r0
 8005f66:	f003 0308 	and.w	r3, r3, #8
 8005f6a:	2b08      	cmp	r3, #8
 8005f6c:	d10a      	bne.n	8005f84 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f009 fa4f 	bl	800f412 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695a      	ldr	r2, [r3, #20]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f002 0208 	and.w	r2, r2, #8
 8005f82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f003 fc8f 	bl	80098ac <USB_ReadInterrupts>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f94:	2b80      	cmp	r3, #128	; 0x80
 8005f96:	d122      	bne.n	8005fde <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa8:	e014      	b.n	8005fd4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fae:	4613      	mov	r3, r2
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	4413      	add	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	440b      	add	r3, r1
 8005fb8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d105      	bne.n	8005fce <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 fb27 	bl	800661c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d3e5      	bcc.n	8005faa <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f003 fc62 	bl	80098ac <USB_ReadInterrupts>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ff2:	d13b      	bne.n	800606c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ff8:	e02b      	b.n	8006052 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800600a:	6879      	ldr	r1, [r7, #4]
 800600c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800600e:	4613      	mov	r3, r2
 8006010:	00db      	lsls	r3, r3, #3
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	440b      	add	r3, r1
 8006018:	3340      	adds	r3, #64	; 0x40
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d115      	bne.n	800604c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006020:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006022:	2b00      	cmp	r3, #0
 8006024:	da12      	bge.n	800604c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800602a:	4613      	mov	r3, r2
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	4413      	add	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	440b      	add	r3, r1
 8006034:	333f      	adds	r3, #63	; 0x3f
 8006036:	2201      	movs	r2, #1
 8006038:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	b2db      	uxtb	r3, r3
 800603e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006042:	b2db      	uxtb	r3, r3
 8006044:	4619      	mov	r1, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fae8 	bl	800661c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	3301      	adds	r3, #1
 8006050:	627b      	str	r3, [r7, #36]	; 0x24
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006058:	429a      	cmp	r2, r3
 800605a:	d3ce      	bcc.n	8005ffa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	695a      	ldr	r2, [r3, #20]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800606a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4618      	mov	r0, r3
 8006072:	f003 fc1b 	bl	80098ac <USB_ReadInterrupts>
 8006076:	4603      	mov	r3, r0
 8006078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800607c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006080:	d155      	bne.n	800612e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006082:	2301      	movs	r3, #1
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
 8006086:	e045      	b.n	8006114 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006098:	6879      	ldr	r1, [r7, #4]
 800609a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800609c:	4613      	mov	r3, r2
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	4413      	add	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	440b      	add	r3, r1
 80060a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d12e      	bne.n	800610e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80060b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	da2b      	bge.n	800610e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80060c2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d121      	bne.n	800610e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ce:	4613      	mov	r3, r2
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	4413      	add	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	440b      	add	r3, r1
 80060d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80060dc:	2201      	movs	r2, #1
 80060de:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10a      	bne.n	800610e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	69fa      	ldr	r2, [r7, #28]
 8006102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800610a:	6053      	str	r3, [r2, #4]
            break;
 800610c:	e007      	b.n	800611e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	3301      	adds	r3, #1
 8006112:	627b      	str	r3, [r7, #36]	; 0x24
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800611a:	429a      	cmp	r2, r3
 800611c:	d3b4      	bcc.n	8006088 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	695a      	ldr	r2, [r3, #20]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800612c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4618      	mov	r0, r3
 8006134:	f003 fbba 	bl	80098ac <USB_ReadInterrupts>
 8006138:	4603      	mov	r3, r0
 800613a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800613e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006142:	d10a      	bne.n	800615a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f009 f9e9 	bl	800f51c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695a      	ldr	r2, [r3, #20]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006158:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4618      	mov	r0, r3
 8006160:	f003 fba4 	bl	80098ac <USB_ReadInterrupts>
 8006164:	4603      	mov	r3, r0
 8006166:	f003 0304 	and.w	r3, r3, #4
 800616a:	2b04      	cmp	r3, #4
 800616c:	d115      	bne.n	800619a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	f003 0304 	and.w	r3, r3, #4
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f009 f9d9 	bl	800f538 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6859      	ldr	r1, [r3, #4]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	430a      	orrs	r2, r1
 8006194:	605a      	str	r2, [r3, #4]
 8006196:	e000      	b.n	800619a <HAL_PCD_IRQHandler+0x938>
      return;
 8006198:	bf00      	nop
    }
  }
}
 800619a:	3734      	adds	r7, #52	; 0x34
 800619c:	46bd      	mov	sp, r7
 800619e:	bd90      	pop	{r4, r7, pc}

080061a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <HAL_PCD_SetAddress+0x1a>
 80061b6:	2302      	movs	r3, #2
 80061b8:	e013      	b.n	80061e2 <HAL_PCD_SetAddress+0x42>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	78fa      	ldrb	r2, [r7, #3]
 80061c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	78fa      	ldrb	r2, [r7, #3]
 80061d0:	4611      	mov	r1, r2
 80061d2:	4618      	mov	r0, r3
 80061d4:	f003 fb02 	bl	80097dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	4608      	mov	r0, r1
 80061f4:	4611      	mov	r1, r2
 80061f6:	461a      	mov	r2, r3
 80061f8:	4603      	mov	r3, r0
 80061fa:	70fb      	strb	r3, [r7, #3]
 80061fc:	460b      	mov	r3, r1
 80061fe:	803b      	strh	r3, [r7, #0]
 8006200:	4613      	mov	r3, r2
 8006202:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006204:	2300      	movs	r3, #0
 8006206:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800620c:	2b00      	cmp	r3, #0
 800620e:	da0f      	bge.n	8006230 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	f003 020f 	and.w	r2, r3, #15
 8006216:	4613      	mov	r3, r2
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	4413      	add	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	3338      	adds	r3, #56	; 0x38
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	4413      	add	r3, r2
 8006224:	3304      	adds	r3, #4
 8006226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2201      	movs	r2, #1
 800622c:	705a      	strb	r2, [r3, #1]
 800622e:	e00f      	b.n	8006250 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	f003 020f 	and.w	r2, r3, #15
 8006236:	4613      	mov	r3, r2
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	4413      	add	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	4413      	add	r3, r2
 8006246:	3304      	adds	r3, #4
 8006248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	f003 030f 	and.w	r3, r3, #15
 8006256:	b2da      	uxtb	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800625c:	883a      	ldrh	r2, [r7, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	78ba      	ldrb	r2, [r7, #2]
 8006266:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	785b      	ldrb	r3, [r3, #1]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d004      	beq.n	800627a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800627a:	78bb      	ldrb	r3, [r7, #2]
 800627c:	2b02      	cmp	r3, #2
 800627e:	d102      	bne.n	8006286 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800628c:	2b01      	cmp	r3, #1
 800628e:	d101      	bne.n	8006294 <HAL_PCD_EP_Open+0xaa>
 8006290:	2302      	movs	r3, #2
 8006292:	e00e      	b.n	80062b2 <HAL_PCD_EP_Open+0xc8>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68f9      	ldr	r1, [r7, #12]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f002 fb82 	bl	80089ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80062b0:	7afb      	ldrb	r3, [r7, #11]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b084      	sub	sp, #16
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	460b      	mov	r3, r1
 80062c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80062c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	da0f      	bge.n	80062ee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062ce:	78fb      	ldrb	r3, [r7, #3]
 80062d0:	f003 020f 	and.w	r2, r3, #15
 80062d4:	4613      	mov	r3, r2
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	4413      	add	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	3338      	adds	r3, #56	; 0x38
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	4413      	add	r3, r2
 80062e2:	3304      	adds	r3, #4
 80062e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2201      	movs	r2, #1
 80062ea:	705a      	strb	r2, [r3, #1]
 80062ec:	e00f      	b.n	800630e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062ee:	78fb      	ldrb	r3, [r7, #3]
 80062f0:	f003 020f 	and.w	r2, r3, #15
 80062f4:	4613      	mov	r3, r2
 80062f6:	00db      	lsls	r3, r3, #3
 80062f8:	4413      	add	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	4413      	add	r3, r2
 8006304:	3304      	adds	r3, #4
 8006306:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800630e:	78fb      	ldrb	r3, [r7, #3]
 8006310:	f003 030f 	and.w	r3, r3, #15
 8006314:	b2da      	uxtb	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006320:	2b01      	cmp	r3, #1
 8006322:	d101      	bne.n	8006328 <HAL_PCD_EP_Close+0x6e>
 8006324:	2302      	movs	r3, #2
 8006326:	e00e      	b.n	8006346 <HAL_PCD_EP_Close+0x8c>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68f9      	ldr	r1, [r7, #12]
 8006336:	4618      	mov	r0, r3
 8006338:	f002 fbc0 	bl	8008abc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b086      	sub	sp, #24
 8006352:	af00      	add	r7, sp, #0
 8006354:	60f8      	str	r0, [r7, #12]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	603b      	str	r3, [r7, #0]
 800635a:	460b      	mov	r3, r1
 800635c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800635e:	7afb      	ldrb	r3, [r7, #11]
 8006360:	f003 020f 	and.w	r2, r3, #15
 8006364:	4613      	mov	r3, r2
 8006366:	00db      	lsls	r3, r3, #3
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	4413      	add	r3, r2
 8006374:	3304      	adds	r3, #4
 8006376:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	2200      	movs	r2, #0
 8006388:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2200      	movs	r2, #0
 800638e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006390:	7afb      	ldrb	r3, [r7, #11]
 8006392:	f003 030f 	and.w	r3, r3, #15
 8006396:	b2da      	uxtb	r2, r3
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d102      	bne.n	80063aa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80063aa:	7afb      	ldrb	r3, [r7, #11]
 80063ac:	f003 030f 	and.w	r3, r3, #15
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d109      	bne.n	80063c8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6818      	ldr	r0, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	461a      	mov	r2, r3
 80063c0:	6979      	ldr	r1, [r7, #20]
 80063c2:	f002 fe9f 	bl	8009104 <USB_EP0StartXfer>
 80063c6:	e008      	b.n	80063da <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6818      	ldr	r0, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	461a      	mov	r2, r3
 80063d4:	6979      	ldr	r1, [r7, #20]
 80063d6:	f002 fc4d 	bl	8008c74 <USB_EPStartXfer>
  }

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	460b      	mov	r3, r1
 80063ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80063f0:	78fb      	ldrb	r3, [r7, #3]
 80063f2:	f003 020f 	and.w	r2, r3, #15
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	4613      	mov	r3, r2
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	4413      	add	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	440b      	add	r3, r1
 8006402:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006406:	681b      	ldr	r3, [r3, #0]
}
 8006408:	4618      	mov	r0, r3
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	607a      	str	r2, [r7, #4]
 800641e:	603b      	str	r3, [r7, #0]
 8006420:	460b      	mov	r3, r1
 8006422:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006424:	7afb      	ldrb	r3, [r7, #11]
 8006426:	f003 020f 	and.w	r2, r3, #15
 800642a:	4613      	mov	r3, r2
 800642c:	00db      	lsls	r3, r3, #3
 800642e:	4413      	add	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	3338      	adds	r3, #56	; 0x38
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	4413      	add	r3, r2
 8006438:	3304      	adds	r3, #4
 800643a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	2200      	movs	r2, #0
 800644c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2201      	movs	r2, #1
 8006452:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006454:	7afb      	ldrb	r3, [r7, #11]
 8006456:	f003 030f 	and.w	r3, r3, #15
 800645a:	b2da      	uxtb	r2, r3
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d102      	bne.n	800646e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800646e:	7afb      	ldrb	r3, [r7, #11]
 8006470:	f003 030f 	and.w	r3, r3, #15
 8006474:	2b00      	cmp	r3, #0
 8006476:	d109      	bne.n	800648c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6818      	ldr	r0, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	b2db      	uxtb	r3, r3
 8006482:	461a      	mov	r2, r3
 8006484:	6979      	ldr	r1, [r7, #20]
 8006486:	f002 fe3d 	bl	8009104 <USB_EP0StartXfer>
 800648a:	e008      	b.n	800649e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6818      	ldr	r0, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	461a      	mov	r2, r3
 8006498:	6979      	ldr	r1, [r7, #20]
 800649a:	f002 fbeb 	bl	8008c74 <USB_EPStartXfer>
  }

  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	460b      	mov	r3, r1
 80064b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80064b4:	78fb      	ldrb	r3, [r7, #3]
 80064b6:	f003 020f 	and.w	r2, r3, #15
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d901      	bls.n	80064c6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e050      	b.n	8006568 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80064c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	da0f      	bge.n	80064ee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064ce:	78fb      	ldrb	r3, [r7, #3]
 80064d0:	f003 020f 	and.w	r2, r3, #15
 80064d4:	4613      	mov	r3, r2
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	4413      	add	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	3338      	adds	r3, #56	; 0x38
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	4413      	add	r3, r2
 80064e2:	3304      	adds	r3, #4
 80064e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2201      	movs	r2, #1
 80064ea:	705a      	strb	r2, [r3, #1]
 80064ec:	e00d      	b.n	800650a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80064ee:	78fa      	ldrb	r2, [r7, #3]
 80064f0:	4613      	mov	r3, r2
 80064f2:	00db      	lsls	r3, r3, #3
 80064f4:	4413      	add	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	4413      	add	r3, r2
 8006500:	3304      	adds	r3, #4
 8006502:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2201      	movs	r2, #1
 800650e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	f003 030f 	and.w	r3, r3, #15
 8006516:	b2da      	uxtb	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006522:	2b01      	cmp	r3, #1
 8006524:	d101      	bne.n	800652a <HAL_PCD_EP_SetStall+0x82>
 8006526:	2302      	movs	r3, #2
 8006528:	e01e      	b.n	8006568 <HAL_PCD_EP_SetStall+0xc0>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68f9      	ldr	r1, [r7, #12]
 8006538:	4618      	mov	r0, r3
 800653a:	f003 f87b 	bl	8009634 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800653e:	78fb      	ldrb	r3, [r7, #3]
 8006540:	f003 030f 	and.w	r3, r3, #15
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10a      	bne.n	800655e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6818      	ldr	r0, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	b2d9      	uxtb	r1, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006558:	461a      	mov	r2, r3
 800655a:	f003 fa6b 	bl	8009a34 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	460b      	mov	r3, r1
 800657a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800657c:	78fb      	ldrb	r3, [r7, #3]
 800657e:	f003 020f 	and.w	r2, r3, #15
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	429a      	cmp	r2, r3
 8006588:	d901      	bls.n	800658e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e042      	b.n	8006614 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800658e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006592:	2b00      	cmp	r3, #0
 8006594:	da0f      	bge.n	80065b6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006596:	78fb      	ldrb	r3, [r7, #3]
 8006598:	f003 020f 	and.w	r2, r3, #15
 800659c:	4613      	mov	r3, r2
 800659e:	00db      	lsls	r3, r3, #3
 80065a0:	4413      	add	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	3338      	adds	r3, #56	; 0x38
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	4413      	add	r3, r2
 80065aa:	3304      	adds	r3, #4
 80065ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2201      	movs	r2, #1
 80065b2:	705a      	strb	r2, [r3, #1]
 80065b4:	e00f      	b.n	80065d6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065b6:	78fb      	ldrb	r3, [r7, #3]
 80065b8:	f003 020f 	and.w	r2, r3, #15
 80065bc:	4613      	mov	r3, r2
 80065be:	00db      	lsls	r3, r3, #3
 80065c0:	4413      	add	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	4413      	add	r3, r2
 80065cc:	3304      	adds	r3, #4
 80065ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065dc:	78fb      	ldrb	r3, [r7, #3]
 80065de:	f003 030f 	and.w	r3, r3, #15
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d101      	bne.n	80065f6 <HAL_PCD_EP_ClrStall+0x86>
 80065f2:	2302      	movs	r3, #2
 80065f4:	e00e      	b.n	8006614 <HAL_PCD_EP_ClrStall+0xa4>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68f9      	ldr	r1, [r7, #12]
 8006604:	4618      	mov	r0, r3
 8006606:	f003 f883 	bl	8009710 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006628:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800662c:	2b00      	cmp	r3, #0
 800662e:	da0c      	bge.n	800664a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	f003 020f 	and.w	r2, r3, #15
 8006636:	4613      	mov	r3, r2
 8006638:	00db      	lsls	r3, r3, #3
 800663a:	4413      	add	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	3338      	adds	r3, #56	; 0x38
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	4413      	add	r3, r2
 8006644:	3304      	adds	r3, #4
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	e00c      	b.n	8006664 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800664a:	78fb      	ldrb	r3, [r7, #3]
 800664c:	f003 020f 	and.w	r2, r3, #15
 8006650:	4613      	mov	r3, r2
 8006652:	00db      	lsls	r3, r3, #3
 8006654:	4413      	add	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	4413      	add	r3, r2
 8006660:	3304      	adds	r3, #4
 8006662:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68f9      	ldr	r1, [r7, #12]
 800666a:	4618      	mov	r0, r3
 800666c:	f002 fea2 	bl	80093b4 <USB_EPStopXfer>
 8006670:	4603      	mov	r3, r0
 8006672:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006674:	7afb      	ldrb	r3, [r7, #11]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b08a      	sub	sp, #40	; 0x28
 8006682:	af02      	add	r7, sp, #8
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	4613      	mov	r3, r2
 8006696:	00db      	lsls	r3, r3, #3
 8006698:	4413      	add	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	3338      	adds	r3, #56	; 0x38
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	4413      	add	r3, r2
 80066a2:	3304      	adds	r3, #4
 80066a4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6a1a      	ldr	r2, [r3, #32]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d901      	bls.n	80066b6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e06c      	b.n	8006790 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	699a      	ldr	r2, [r3, #24]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	69fa      	ldr	r2, [r7, #28]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d902      	bls.n	80066d2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	3303      	adds	r3, #3
 80066d6:	089b      	lsrs	r3, r3, #2
 80066d8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066da:	e02b      	b.n	8006734 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	699a      	ldr	r2, [r3, #24]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	69fa      	ldr	r2, [r7, #28]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d902      	bls.n	80066f8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	3303      	adds	r3, #3
 80066fc:	089b      	lsrs	r3, r3, #2
 80066fe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6919      	ldr	r1, [r3, #16]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	b2da      	uxtb	r2, r3
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006710:	b2db      	uxtb	r3, r3
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	4603      	mov	r3, r0
 8006716:	6978      	ldr	r0, [r7, #20]
 8006718:	f002 fef6 	bl	8009508 <USB_WritePacket>

    ep->xfer_buff  += len;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	691a      	ldr	r2, [r3, #16]
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	441a      	add	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a1a      	ldr	r2, [r3, #32]
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	441a      	add	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	b29b      	uxth	r3, r3
 8006744:	69ba      	ldr	r2, [r7, #24]
 8006746:	429a      	cmp	r2, r3
 8006748:	d809      	bhi.n	800675e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6a1a      	ldr	r2, [r3, #32]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006752:	429a      	cmp	r2, r3
 8006754:	d203      	bcs.n	800675e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1be      	bne.n	80066dc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	699a      	ldr	r2, [r3, #24]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	429a      	cmp	r2, r3
 8006768:	d811      	bhi.n	800678e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	f003 030f 	and.w	r3, r3, #15
 8006770:	2201      	movs	r2, #1
 8006772:	fa02 f303 	lsl.w	r3, r2, r3
 8006776:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	43db      	mvns	r3, r3
 8006784:	6939      	ldr	r1, [r7, #16]
 8006786:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800678a:	4013      	ands	r3, r2
 800678c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3720      	adds	r7, #32
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b088      	sub	sp, #32
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	333c      	adds	r3, #60	; 0x3c
 80067b0:	3304      	adds	r3, #4
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d17b      	bne.n	80068c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f003 0308 	and.w	r3, r3, #8
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d015      	beq.n	8006804 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	4a61      	ldr	r2, [pc, #388]	; (8006960 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	f240 80b9 	bls.w	8006954 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 80b3 	beq.w	8006954 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fa:	461a      	mov	r2, r3
 80067fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006800:	6093      	str	r3, [r2, #8]
 8006802:	e0a7      	b.n	8006954 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	f003 0320 	and.w	r3, r3, #32
 800680a:	2b00      	cmp	r3, #0
 800680c:	d009      	beq.n	8006822 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800681a:	461a      	mov	r2, r3
 800681c:	2320      	movs	r3, #32
 800681e:	6093      	str	r3, [r2, #8]
 8006820:	e098      	b.n	8006954 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006828:	2b00      	cmp	r3, #0
 800682a:	f040 8093 	bne.w	8006954 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	4a4b      	ldr	r2, [pc, #300]	; (8006960 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d90f      	bls.n	8006856 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00a      	beq.n	8006856 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	4413      	add	r3, r2
 8006848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800684c:	461a      	mov	r2, r3
 800684e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006852:	6093      	str	r3, [r2, #8]
 8006854:	e07e      	b.n	8006954 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	4613      	mov	r3, r2
 800685a:	00db      	lsls	r3, r3, #3
 800685c:	4413      	add	r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	4413      	add	r3, r2
 8006868:	3304      	adds	r3, #4
 800686a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	69da      	ldr	r2, [r3, #28]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	0159      	lsls	r1, r3, #5
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	440b      	add	r3, r1
 8006878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006882:	1ad2      	subs	r2, r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d114      	bne.n	80068b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d109      	bne.n	80068aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6818      	ldr	r0, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80068a0:	461a      	mov	r2, r3
 80068a2:	2101      	movs	r1, #1
 80068a4:	f003 f8c6 	bl	8009a34 <USB_EP0_OutStart>
 80068a8:	e006      	b.n	80068b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	691a      	ldr	r2, [r3, #16]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	441a      	add	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f008 fd72 	bl	800f3a8 <HAL_PCD_DataOutStageCallback>
 80068c4:	e046      	b.n	8006954 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	4a26      	ldr	r2, [pc, #152]	; (8006964 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d124      	bne.n	8006918 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00a      	beq.n	80068ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e4:	461a      	mov	r2, r3
 80068e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ea:	6093      	str	r3, [r2, #8]
 80068ec:	e032      	b.n	8006954 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f003 0320 	and.w	r3, r3, #32
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d008      	beq.n	800690a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006904:	461a      	mov	r2, r3
 8006906:	2320      	movs	r3, #32
 8006908:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	b2db      	uxtb	r3, r3
 800690e:	4619      	mov	r1, r3
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f008 fd49 	bl	800f3a8 <HAL_PCD_DataOutStageCallback>
 8006916:	e01d      	b.n	8006954 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d114      	bne.n	8006948 <PCD_EP_OutXfrComplete_int+0x1b0>
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	4613      	mov	r3, r2
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	4413      	add	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	440b      	add	r3, r1
 800692c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d108      	bne.n	8006948 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6818      	ldr	r0, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006940:	461a      	mov	r2, r3
 8006942:	2100      	movs	r1, #0
 8006944:	f003 f876 	bl	8009a34 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	b2db      	uxtb	r3, r3
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f008 fd2a 	bl	800f3a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3720      	adds	r7, #32
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	4f54300a 	.word	0x4f54300a
 8006964:	4f54310a 	.word	0x4f54310a

08006968 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	333c      	adds	r3, #60	; 0x3c
 8006980:	3304      	adds	r3, #4
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	4413      	add	r3, r2
 800698e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4a15      	ldr	r2, [pc, #84]	; (80069f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d90e      	bls.n	80069bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d009      	beq.n	80069bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b4:	461a      	mov	r2, r3
 80069b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f008 fce1 	bl	800f384 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	4a0a      	ldr	r2, [pc, #40]	; (80069f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d90c      	bls.n	80069e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d108      	bne.n	80069e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6818      	ldr	r0, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80069dc:	461a      	mov	r2, r3
 80069de:	2101      	movs	r1, #1
 80069e0:	f003 f828 	bl	8009a34 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3718      	adds	r7, #24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	4f54300a 	.word	0x4f54300a

080069f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	460b      	mov	r3, r1
 80069fe:	70fb      	strb	r3, [r7, #3]
 8006a00:	4613      	mov	r3, r2
 8006a02:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006a0c:	78fb      	ldrb	r3, [r7, #3]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d107      	bne.n	8006a22 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006a12:	883b      	ldrh	r3, [r7, #0]
 8006a14:	0419      	lsls	r1, r3, #16
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	629a      	str	r2, [r3, #40]	; 0x28
 8006a20:	e028      	b.n	8006a74 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a28:	0c1b      	lsrs	r3, r3, #16
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a30:	2300      	movs	r3, #0
 8006a32:	73fb      	strb	r3, [r7, #15]
 8006a34:	e00d      	b.n	8006a52 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
 8006a3c:	3340      	adds	r3, #64	; 0x40
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	0c1b      	lsrs	r3, r3, #16
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	4413      	add	r3, r2
 8006a4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	73fb      	strb	r3, [r7, #15]
 8006a52:	7bfa      	ldrb	r2, [r7, #15]
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d3ec      	bcc.n	8006a36 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006a5c:	883b      	ldrh	r3, [r7, #0]
 8006a5e:	0418      	lsls	r0, r3, #16
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6819      	ldr	r1, [r3, #0]
 8006a64:	78fb      	ldrb	r3, [r7, #3]
 8006a66:	3b01      	subs	r3, #1
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	4302      	orrs	r2, r0
 8006a6c:	3340      	adds	r3, #64	; 0x40
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	440b      	add	r3, r1
 8006a72:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3714      	adds	r7, #20
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b083      	sub	sp, #12
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	887a      	ldrh	r2, [r7, #2]
 8006a94:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	460b      	mov	r3, r1
 8006aae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e267      	b.n	8006f9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d075      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ada:	4b88      	ldr	r3, [pc, #544]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f003 030c 	and.w	r3, r3, #12
 8006ae2:	2b04      	cmp	r3, #4
 8006ae4:	d00c      	beq.n	8006b00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ae6:	4b85      	ldr	r3, [pc, #532]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006aee:	2b08      	cmp	r3, #8
 8006af0:	d112      	bne.n	8006b18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006af2:	4b82      	ldr	r3, [pc, #520]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006afe:	d10b      	bne.n	8006b18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b00:	4b7e      	ldr	r3, [pc, #504]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d05b      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x108>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d157      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e242      	b.n	8006f9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b20:	d106      	bne.n	8006b30 <HAL_RCC_OscConfig+0x74>
 8006b22:	4b76      	ldr	r3, [pc, #472]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a75      	ldr	r2, [pc, #468]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	e01d      	b.n	8006b6c <HAL_RCC_OscConfig+0xb0>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b38:	d10c      	bne.n	8006b54 <HAL_RCC_OscConfig+0x98>
 8006b3a:	4b70      	ldr	r3, [pc, #448]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a6f      	ldr	r2, [pc, #444]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b44:	6013      	str	r3, [r2, #0]
 8006b46:	4b6d      	ldr	r3, [pc, #436]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a6c      	ldr	r2, [pc, #432]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b50:	6013      	str	r3, [r2, #0]
 8006b52:	e00b      	b.n	8006b6c <HAL_RCC_OscConfig+0xb0>
 8006b54:	4b69      	ldr	r3, [pc, #420]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a68      	ldr	r2, [pc, #416]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b5e:	6013      	str	r3, [r2, #0]
 8006b60:	4b66      	ldr	r3, [pc, #408]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a65      	ldr	r2, [pc, #404]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d013      	beq.n	8006b9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b74:	f7fc f9fa 	bl	8002f6c <HAL_GetTick>
 8006b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b7a:	e008      	b.n	8006b8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b7c:	f7fc f9f6 	bl	8002f6c <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b64      	cmp	r3, #100	; 0x64
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e207      	b.n	8006f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b8e:	4b5b      	ldr	r3, [pc, #364]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0f0      	beq.n	8006b7c <HAL_RCC_OscConfig+0xc0>
 8006b9a:	e014      	b.n	8006bc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b9c:	f7fc f9e6 	bl	8002f6c <HAL_GetTick>
 8006ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ba2:	e008      	b.n	8006bb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ba4:	f7fc f9e2 	bl	8002f6c <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b64      	cmp	r3, #100	; 0x64
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e1f3      	b.n	8006f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bb6:	4b51      	ldr	r3, [pc, #324]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1f0      	bne.n	8006ba4 <HAL_RCC_OscConfig+0xe8>
 8006bc2:	e000      	b.n	8006bc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0302 	and.w	r3, r3, #2
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d063      	beq.n	8006c9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bd2:	4b4a      	ldr	r3, [pc, #296]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f003 030c 	and.w	r3, r3, #12
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00b      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bde:	4b47      	ldr	r3, [pc, #284]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006be6:	2b08      	cmp	r3, #8
 8006be8:	d11c      	bne.n	8006c24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bea:	4b44      	ldr	r3, [pc, #272]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d116      	bne.n	8006c24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bf6:	4b41      	ldr	r3, [pc, #260]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d005      	beq.n	8006c0e <HAL_RCC_OscConfig+0x152>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d001      	beq.n	8006c0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e1c7      	b.n	8006f9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c0e:	4b3b      	ldr	r3, [pc, #236]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	00db      	lsls	r3, r3, #3
 8006c1c:	4937      	ldr	r1, [pc, #220]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c22:	e03a      	b.n	8006c9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d020      	beq.n	8006c6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c2c:	4b34      	ldr	r3, [pc, #208]	; (8006d00 <HAL_RCC_OscConfig+0x244>)
 8006c2e:	2201      	movs	r2, #1
 8006c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c32:	f7fc f99b 	bl	8002f6c <HAL_GetTick>
 8006c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c38:	e008      	b.n	8006c4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c3a:	f7fc f997 	bl	8002f6c <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d901      	bls.n	8006c4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e1a8      	b.n	8006f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c4c:	4b2b      	ldr	r3, [pc, #172]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0f0      	beq.n	8006c3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c58:	4b28      	ldr	r3, [pc, #160]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	00db      	lsls	r3, r3, #3
 8006c66:	4925      	ldr	r1, [pc, #148]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	600b      	str	r3, [r1, #0]
 8006c6c:	e015      	b.n	8006c9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c6e:	4b24      	ldr	r3, [pc, #144]	; (8006d00 <HAL_RCC_OscConfig+0x244>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c74:	f7fc f97a 	bl	8002f6c <HAL_GetTick>
 8006c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c7a:	e008      	b.n	8006c8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c7c:	f7fc f976 	bl	8002f6c <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d901      	bls.n	8006c8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e187      	b.n	8006f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c8e:	4b1b      	ldr	r3, [pc, #108]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1f0      	bne.n	8006c7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0308 	and.w	r3, r3, #8
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d036      	beq.n	8006d14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d016      	beq.n	8006cdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cae:	4b15      	ldr	r3, [pc, #84]	; (8006d04 <HAL_RCC_OscConfig+0x248>)
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb4:	f7fc f95a 	bl	8002f6c <HAL_GetTick>
 8006cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cba:	e008      	b.n	8006cce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cbc:	f7fc f956 	bl	8002f6c <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e167      	b.n	8006f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cce:	4b0b      	ldr	r3, [pc, #44]	; (8006cfc <HAL_RCC_OscConfig+0x240>)
 8006cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0f0      	beq.n	8006cbc <HAL_RCC_OscConfig+0x200>
 8006cda:	e01b      	b.n	8006d14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cdc:	4b09      	ldr	r3, [pc, #36]	; (8006d04 <HAL_RCC_OscConfig+0x248>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ce2:	f7fc f943 	bl	8002f6c <HAL_GetTick>
 8006ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ce8:	e00e      	b.n	8006d08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cea:	f7fc f93f 	bl	8002f6c <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d907      	bls.n	8006d08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e150      	b.n	8006f9e <HAL_RCC_OscConfig+0x4e2>
 8006cfc:	40023800 	.word	0x40023800
 8006d00:	42470000 	.word	0x42470000
 8006d04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d08:	4b88      	ldr	r3, [pc, #544]	; (8006f2c <HAL_RCC_OscConfig+0x470>)
 8006d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d0c:	f003 0302 	and.w	r3, r3, #2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1ea      	bne.n	8006cea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0304 	and.w	r3, r3, #4
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 8097 	beq.w	8006e50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d22:	2300      	movs	r3, #0
 8006d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d26:	4b81      	ldr	r3, [pc, #516]	; (8006f2c <HAL_RCC_OscConfig+0x470>)
 8006d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10f      	bne.n	8006d52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d32:	2300      	movs	r3, #0
 8006d34:	60bb      	str	r3, [r7, #8]
 8006d36:	4b7d      	ldr	r3, [pc, #500]	; (8006f2c <HAL_RCC_OscConfig+0x470>)
 8006d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3a:	4a7c      	ldr	r2, [pc, #496]	; (8006f2c <HAL_RCC_OscConfig+0x470>)
 8006d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d40:	6413      	str	r3, [r2, #64]	; 0x40
 8006d42:	4b7a      	ldr	r3, [pc, #488]	; (8006f2c <HAL_RCC_OscConfig+0x470>)
 8006d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d4a:	60bb      	str	r3, [r7, #8]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d52:	4b77      	ldr	r3, [pc, #476]	; (8006f30 <HAL_RCC_OscConfig+0x474>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d118      	bne.n	8006d90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d5e:	4b74      	ldr	r3, [pc, #464]	; (8006f30 <HAL_RCC_OscConfig+0x474>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a73      	ldr	r2, [pc, #460]	; (8006f30 <HAL_RCC_OscConfig+0x474>)
 8006d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d6a:	f7fc f8ff 	bl	8002f6c <HAL_GetTick>
 8006d6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d70:	e008      	b.n	8006d84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d72:	f7fc f8fb 	bl	8002f6c <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d901      	bls.n	8006d84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e10c      	b.n	8006f9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d84:	4b6a      	ldr	r3, [pc, #424]	; (8006f30 <HAL_RCC_OscConfig+0x474>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d0f0      	beq.n	8006d72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d106      	bne.n	8006da6 <HAL_RCC_OscConfig+0x2ea>
 8006d98:	4b64      	ldr	r3, [pc, #400]	; (8006f2c <HAL_RCC_OscConfig+0x470>)
 8006d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9c:	4a63      	ldr	r2, [pc, #396]	; (8006f2c <HAL_RCC_OscConfig+0x470>)
 8006d9e:	f043 0301 	orr.w	r3, r3, #1
 8006da2:	6713      	str	r3, [r2, #112]	; 0x70
 8006da4:	e01c      	b.n	8006de0 <HAL_RCC_OscConfig+0x324>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	2b05      	cmp	r3, #5
 8006dac:	d10c      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x30c>
 8006dae:	4b5f      	ldr	r3, [pc, #380]	; (8006f2c <HAL_RCC_OscConfig+0x470>)
 8006db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db2:	4a5e      	ldr	r2, [pc, #376]	; (8006f2c <HAL_RCC_OscConfig+0x470>)
 8006db4:	f043 0304 	orr.w	r3, r3, #4
 8006db8:	6713      	str	r3, [r2, #112]	; 0x70
 8006dba:	4b5c      	ldr	r3, [pc, #368]	; (8006f2c <HAL_RCC_OscConfig+0x470>)
 8006dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dbe:	4a5b      	ldr	r2, [pc, #364]	; (8006f2c <HAL_RCC_OscConfig+0x470>)
 8006dc0:	f043 0301 	orr.w	r3, r3, #1
 8006dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8006dc6:	e00b      	b.n	8006de0 <HAL_RCC_OscConfig+0x324>
 8006dc8:	4b58      	ldr	r3, [pc, #352]	; (8006f2c <HAL_RCC_OscConfig+0x470>)
 8006dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dcc:	4a57      	ldr	r2, [pc, #348]	; (8006f2c <HAL_RCC_OscConfig+0x470>)
 8006dce:	f023 0301 	bic.w	r3, r3, #1
 8006dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8006dd4:	4b55      	ldr	r3, [pc, #340]	; (8006f2c <HAL_RCC_OscConfig+0x470>)
 8006dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd8:	4a54      	ldr	r2, [pc, #336]	; (8006f2c <HAL_RCC_OscConfig+0x470>)
 8006dda:	f023 0304 	bic.w	r3, r3, #4
 8006dde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d015      	beq.n	8006e14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006de8:	f7fc f8c0 	bl	8002f6c <HAL_GetTick>
 8006dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dee:	e00a      	b.n	8006e06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006df0:	f7fc f8bc 	bl	8002f6c <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e0cb      	b.n	8006f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e06:	4b49      	ldr	r3, [pc, #292]	; (8006f2c <HAL_RCC_OscConfig+0x470>)
 8006e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0ee      	beq.n	8006df0 <HAL_RCC_OscConfig+0x334>
 8006e12:	e014      	b.n	8006e3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e14:	f7fc f8aa 	bl	8002f6c <HAL_GetTick>
 8006e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e1a:	e00a      	b.n	8006e32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e1c:	f7fc f8a6 	bl	8002f6c <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e0b5      	b.n	8006f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e32:	4b3e      	ldr	r3, [pc, #248]	; (8006f2c <HAL_RCC_OscConfig+0x470>)
 8006e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1ee      	bne.n	8006e1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e3e:	7dfb      	ldrb	r3, [r7, #23]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d105      	bne.n	8006e50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e44:	4b39      	ldr	r3, [pc, #228]	; (8006f2c <HAL_RCC_OscConfig+0x470>)
 8006e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e48:	4a38      	ldr	r2, [pc, #224]	; (8006f2c <HAL_RCC_OscConfig+0x470>)
 8006e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 80a1 	beq.w	8006f9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e5a:	4b34      	ldr	r3, [pc, #208]	; (8006f2c <HAL_RCC_OscConfig+0x470>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f003 030c 	and.w	r3, r3, #12
 8006e62:	2b08      	cmp	r3, #8
 8006e64:	d05c      	beq.n	8006f20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d141      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e6e:	4b31      	ldr	r3, [pc, #196]	; (8006f34 <HAL_RCC_OscConfig+0x478>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e74:	f7fc f87a 	bl	8002f6c <HAL_GetTick>
 8006e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e7a:	e008      	b.n	8006e8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e7c:	f7fc f876 	bl	8002f6c <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d901      	bls.n	8006e8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e087      	b.n	8006f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e8e:	4b27      	ldr	r3, [pc, #156]	; (8006f2c <HAL_RCC_OscConfig+0x470>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1f0      	bne.n	8006e7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	69da      	ldr	r2, [r3, #28]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea8:	019b      	lsls	r3, r3, #6
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb0:	085b      	lsrs	r3, r3, #1
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	041b      	lsls	r3, r3, #16
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebc:	061b      	lsls	r3, r3, #24
 8006ebe:	491b      	ldr	r1, [pc, #108]	; (8006f2c <HAL_RCC_OscConfig+0x470>)
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ec4:	4b1b      	ldr	r3, [pc, #108]	; (8006f34 <HAL_RCC_OscConfig+0x478>)
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eca:	f7fc f84f 	bl	8002f6c <HAL_GetTick>
 8006ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ed0:	e008      	b.n	8006ee4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ed2:	f7fc f84b 	bl	8002f6c <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d901      	bls.n	8006ee4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e05c      	b.n	8006f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ee4:	4b11      	ldr	r3, [pc, #68]	; (8006f2c <HAL_RCC_OscConfig+0x470>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d0f0      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x416>
 8006ef0:	e054      	b.n	8006f9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ef2:	4b10      	ldr	r3, [pc, #64]	; (8006f34 <HAL_RCC_OscConfig+0x478>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ef8:	f7fc f838 	bl	8002f6c <HAL_GetTick>
 8006efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006efe:	e008      	b.n	8006f12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f00:	f7fc f834 	bl	8002f6c <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d901      	bls.n	8006f12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e045      	b.n	8006f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f12:	4b06      	ldr	r3, [pc, #24]	; (8006f2c <HAL_RCC_OscConfig+0x470>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1f0      	bne.n	8006f00 <HAL_RCC_OscConfig+0x444>
 8006f1e:	e03d      	b.n	8006f9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d107      	bne.n	8006f38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e038      	b.n	8006f9e <HAL_RCC_OscConfig+0x4e2>
 8006f2c:	40023800 	.word	0x40023800
 8006f30:	40007000 	.word	0x40007000
 8006f34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f38:	4b1b      	ldr	r3, [pc, #108]	; (8006fa8 <HAL_RCC_OscConfig+0x4ec>)
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d028      	beq.n	8006f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d121      	bne.n	8006f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d11a      	bne.n	8006f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f68:	4013      	ands	r3, r2
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d111      	bne.n	8006f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7e:	085b      	lsrs	r3, r3, #1
 8006f80:	3b01      	subs	r3, #1
 8006f82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d107      	bne.n	8006f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d001      	beq.n	8006f9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e000      	b.n	8006f9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3718      	adds	r7, #24
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	40023800 	.word	0x40023800

08006fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d101      	bne.n	8006fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e0cc      	b.n	800715a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fc0:	4b68      	ldr	r3, [pc, #416]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0307 	and.w	r3, r3, #7
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d90c      	bls.n	8006fe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fce:	4b65      	ldr	r3, [pc, #404]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	b2d2      	uxtb	r2, r2
 8006fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fd6:	4b63      	ldr	r3, [pc, #396]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0307 	and.w	r3, r3, #7
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d001      	beq.n	8006fe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e0b8      	b.n	800715a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d020      	beq.n	8007036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0304 	and.w	r3, r3, #4
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d005      	beq.n	800700c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007000:	4b59      	ldr	r3, [pc, #356]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	4a58      	ldr	r2, [pc, #352]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 8007006:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800700a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0308 	and.w	r3, r3, #8
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007018:	4b53      	ldr	r3, [pc, #332]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	4a52      	ldr	r2, [pc, #328]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 800701e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007022:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007024:	4b50      	ldr	r3, [pc, #320]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	494d      	ldr	r1, [pc, #308]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 8007032:	4313      	orrs	r3, r2
 8007034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	d044      	beq.n	80070cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d107      	bne.n	800705a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800704a:	4b47      	ldr	r3, [pc, #284]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d119      	bne.n	800708a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e07f      	b.n	800715a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	2b02      	cmp	r3, #2
 8007060:	d003      	beq.n	800706a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007066:	2b03      	cmp	r3, #3
 8007068:	d107      	bne.n	800707a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800706a:	4b3f      	ldr	r3, [pc, #252]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d109      	bne.n	800708a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e06f      	b.n	800715a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800707a:	4b3b      	ldr	r3, [pc, #236]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d101      	bne.n	800708a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e067      	b.n	800715a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800708a:	4b37      	ldr	r3, [pc, #220]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f023 0203 	bic.w	r2, r3, #3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	4934      	ldr	r1, [pc, #208]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 8007098:	4313      	orrs	r3, r2
 800709a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800709c:	f7fb ff66 	bl	8002f6c <HAL_GetTick>
 80070a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070a2:	e00a      	b.n	80070ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070a4:	f7fb ff62 	bl	8002f6c <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e04f      	b.n	800715a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ba:	4b2b      	ldr	r3, [pc, #172]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f003 020c 	and.w	r2, r3, #12
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d1eb      	bne.n	80070a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070cc:	4b25      	ldr	r3, [pc, #148]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0307 	and.w	r3, r3, #7
 80070d4:	683a      	ldr	r2, [r7, #0]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d20c      	bcs.n	80070f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070da:	4b22      	ldr	r3, [pc, #136]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	b2d2      	uxtb	r2, r2
 80070e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070e2:	4b20      	ldr	r3, [pc, #128]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0307 	and.w	r3, r3, #7
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d001      	beq.n	80070f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e032      	b.n	800715a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d008      	beq.n	8007112 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007100:	4b19      	ldr	r3, [pc, #100]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	4916      	ldr	r1, [pc, #88]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 800710e:	4313      	orrs	r3, r2
 8007110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0308 	and.w	r3, r3, #8
 800711a:	2b00      	cmp	r3, #0
 800711c:	d009      	beq.n	8007132 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800711e:	4b12      	ldr	r3, [pc, #72]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	00db      	lsls	r3, r3, #3
 800712c:	490e      	ldr	r1, [pc, #56]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 800712e:	4313      	orrs	r3, r2
 8007130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007132:	f000 f821 	bl	8007178 <HAL_RCC_GetSysClockFreq>
 8007136:	4602      	mov	r2, r0
 8007138:	4b0b      	ldr	r3, [pc, #44]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	091b      	lsrs	r3, r3, #4
 800713e:	f003 030f 	and.w	r3, r3, #15
 8007142:	490a      	ldr	r1, [pc, #40]	; (800716c <HAL_RCC_ClockConfig+0x1c0>)
 8007144:	5ccb      	ldrb	r3, [r1, r3]
 8007146:	fa22 f303 	lsr.w	r3, r2, r3
 800714a:	4a09      	ldr	r2, [pc, #36]	; (8007170 <HAL_RCC_ClockConfig+0x1c4>)
 800714c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800714e:	4b09      	ldr	r3, [pc, #36]	; (8007174 <HAL_RCC_ClockConfig+0x1c8>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4618      	mov	r0, r3
 8007154:	f7fb fb6e 	bl	8002834 <HAL_InitTick>

  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	40023c00 	.word	0x40023c00
 8007168:	40023800 	.word	0x40023800
 800716c:	08010d10 	.word	0x08010d10
 8007170:	20000034 	.word	0x20000034
 8007174:	20000038 	.word	0x20000038

08007178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800717c:	b090      	sub	sp, #64	; 0x40
 800717e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007180:	2300      	movs	r3, #0
 8007182:	637b      	str	r3, [r7, #52]	; 0x34
 8007184:	2300      	movs	r3, #0
 8007186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007188:	2300      	movs	r3, #0
 800718a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007190:	4b59      	ldr	r3, [pc, #356]	; (80072f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f003 030c 	and.w	r3, r3, #12
 8007198:	2b08      	cmp	r3, #8
 800719a:	d00d      	beq.n	80071b8 <HAL_RCC_GetSysClockFreq+0x40>
 800719c:	2b08      	cmp	r3, #8
 800719e:	f200 80a1 	bhi.w	80072e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d002      	beq.n	80071ac <HAL_RCC_GetSysClockFreq+0x34>
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d003      	beq.n	80071b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80071aa:	e09b      	b.n	80072e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071ac:	4b53      	ldr	r3, [pc, #332]	; (80072fc <HAL_RCC_GetSysClockFreq+0x184>)
 80071ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80071b0:	e09b      	b.n	80072ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071b2:	4b53      	ldr	r3, [pc, #332]	; (8007300 <HAL_RCC_GetSysClockFreq+0x188>)
 80071b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071b6:	e098      	b.n	80072ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071b8:	4b4f      	ldr	r3, [pc, #316]	; (80072f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071c2:	4b4d      	ldr	r3, [pc, #308]	; (80072f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d028      	beq.n	8007220 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071ce:	4b4a      	ldr	r3, [pc, #296]	; (80072f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	099b      	lsrs	r3, r3, #6
 80071d4:	2200      	movs	r2, #0
 80071d6:	623b      	str	r3, [r7, #32]
 80071d8:	627a      	str	r2, [r7, #36]	; 0x24
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80071e0:	2100      	movs	r1, #0
 80071e2:	4b47      	ldr	r3, [pc, #284]	; (8007300 <HAL_RCC_GetSysClockFreq+0x188>)
 80071e4:	fb03 f201 	mul.w	r2, r3, r1
 80071e8:	2300      	movs	r3, #0
 80071ea:	fb00 f303 	mul.w	r3, r0, r3
 80071ee:	4413      	add	r3, r2
 80071f0:	4a43      	ldr	r2, [pc, #268]	; (8007300 <HAL_RCC_GetSysClockFreq+0x188>)
 80071f2:	fba0 1202 	umull	r1, r2, r0, r2
 80071f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071f8:	460a      	mov	r2, r1
 80071fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80071fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071fe:	4413      	add	r3, r2
 8007200:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007204:	2200      	movs	r2, #0
 8007206:	61bb      	str	r3, [r7, #24]
 8007208:	61fa      	str	r2, [r7, #28]
 800720a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800720e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007212:	f7f9 fbfb 	bl	8000a0c <__aeabi_uldivmod>
 8007216:	4602      	mov	r2, r0
 8007218:	460b      	mov	r3, r1
 800721a:	4613      	mov	r3, r2
 800721c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800721e:	e053      	b.n	80072c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007220:	4b35      	ldr	r3, [pc, #212]	; (80072f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	099b      	lsrs	r3, r3, #6
 8007226:	2200      	movs	r2, #0
 8007228:	613b      	str	r3, [r7, #16]
 800722a:	617a      	str	r2, [r7, #20]
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007232:	f04f 0b00 	mov.w	fp, #0
 8007236:	4652      	mov	r2, sl
 8007238:	465b      	mov	r3, fp
 800723a:	f04f 0000 	mov.w	r0, #0
 800723e:	f04f 0100 	mov.w	r1, #0
 8007242:	0159      	lsls	r1, r3, #5
 8007244:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007248:	0150      	lsls	r0, r2, #5
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	ebb2 080a 	subs.w	r8, r2, sl
 8007252:	eb63 090b 	sbc.w	r9, r3, fp
 8007256:	f04f 0200 	mov.w	r2, #0
 800725a:	f04f 0300 	mov.w	r3, #0
 800725e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007262:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007266:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800726a:	ebb2 0408 	subs.w	r4, r2, r8
 800726e:	eb63 0509 	sbc.w	r5, r3, r9
 8007272:	f04f 0200 	mov.w	r2, #0
 8007276:	f04f 0300 	mov.w	r3, #0
 800727a:	00eb      	lsls	r3, r5, #3
 800727c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007280:	00e2      	lsls	r2, r4, #3
 8007282:	4614      	mov	r4, r2
 8007284:	461d      	mov	r5, r3
 8007286:	eb14 030a 	adds.w	r3, r4, sl
 800728a:	603b      	str	r3, [r7, #0]
 800728c:	eb45 030b 	adc.w	r3, r5, fp
 8007290:	607b      	str	r3, [r7, #4]
 8007292:	f04f 0200 	mov.w	r2, #0
 8007296:	f04f 0300 	mov.w	r3, #0
 800729a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800729e:	4629      	mov	r1, r5
 80072a0:	028b      	lsls	r3, r1, #10
 80072a2:	4621      	mov	r1, r4
 80072a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072a8:	4621      	mov	r1, r4
 80072aa:	028a      	lsls	r2, r1, #10
 80072ac:	4610      	mov	r0, r2
 80072ae:	4619      	mov	r1, r3
 80072b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b2:	2200      	movs	r2, #0
 80072b4:	60bb      	str	r3, [r7, #8]
 80072b6:	60fa      	str	r2, [r7, #12]
 80072b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072bc:	f7f9 fba6 	bl	8000a0c <__aeabi_uldivmod>
 80072c0:	4602      	mov	r2, r0
 80072c2:	460b      	mov	r3, r1
 80072c4:	4613      	mov	r3, r2
 80072c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072c8:	4b0b      	ldr	r3, [pc, #44]	; (80072f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	0c1b      	lsrs	r3, r3, #16
 80072ce:	f003 0303 	and.w	r3, r3, #3
 80072d2:	3301      	adds	r3, #1
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80072d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80072da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80072e2:	e002      	b.n	80072ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072e4:	4b05      	ldr	r3, [pc, #20]	; (80072fc <HAL_RCC_GetSysClockFreq+0x184>)
 80072e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80072e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3740      	adds	r7, #64	; 0x40
 80072f0:	46bd      	mov	sp, r7
 80072f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072f6:	bf00      	nop
 80072f8:	40023800 	.word	0x40023800
 80072fc:	00f42400 	.word	0x00f42400
 8007300:	017d7840 	.word	0x017d7840

08007304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007304:	b480      	push	{r7}
 8007306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007308:	4b03      	ldr	r3, [pc, #12]	; (8007318 <HAL_RCC_GetHCLKFreq+0x14>)
 800730a:	681b      	ldr	r3, [r3, #0]
}
 800730c:	4618      	mov	r0, r3
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	20000034 	.word	0x20000034

0800731c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007320:	f7ff fff0 	bl	8007304 <HAL_RCC_GetHCLKFreq>
 8007324:	4602      	mov	r2, r0
 8007326:	4b05      	ldr	r3, [pc, #20]	; (800733c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	0a9b      	lsrs	r3, r3, #10
 800732c:	f003 0307 	and.w	r3, r3, #7
 8007330:	4903      	ldr	r1, [pc, #12]	; (8007340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007332:	5ccb      	ldrb	r3, [r1, r3]
 8007334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007338:	4618      	mov	r0, r3
 800733a:	bd80      	pop	{r7, pc}
 800733c:	40023800 	.word	0x40023800
 8007340:	08010d20 	.word	0x08010d20

08007344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007348:	f7ff ffdc 	bl	8007304 <HAL_RCC_GetHCLKFreq>
 800734c:	4602      	mov	r2, r0
 800734e:	4b05      	ldr	r3, [pc, #20]	; (8007364 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	0b5b      	lsrs	r3, r3, #13
 8007354:	f003 0307 	and.w	r3, r3, #7
 8007358:	4903      	ldr	r1, [pc, #12]	; (8007368 <HAL_RCC_GetPCLK2Freq+0x24>)
 800735a:	5ccb      	ldrb	r3, [r1, r3]
 800735c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007360:	4618      	mov	r0, r3
 8007362:	bd80      	pop	{r7, pc}
 8007364:	40023800 	.word	0x40023800
 8007368:	08010d20 	.word	0x08010d20

0800736c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	220f      	movs	r2, #15
 800737a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800737c:	4b12      	ldr	r3, [pc, #72]	; (80073c8 <HAL_RCC_GetClockConfig+0x5c>)
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f003 0203 	and.w	r2, r3, #3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007388:	4b0f      	ldr	r3, [pc, #60]	; (80073c8 <HAL_RCC_GetClockConfig+0x5c>)
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007394:	4b0c      	ldr	r3, [pc, #48]	; (80073c8 <HAL_RCC_GetClockConfig+0x5c>)
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80073a0:	4b09      	ldr	r3, [pc, #36]	; (80073c8 <HAL_RCC_GetClockConfig+0x5c>)
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	08db      	lsrs	r3, r3, #3
 80073a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80073ae:	4b07      	ldr	r3, [pc, #28]	; (80073cc <HAL_RCC_GetClockConfig+0x60>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0207 	and.w	r2, r3, #7
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	601a      	str	r2, [r3, #0]
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	40023800 	.word	0x40023800
 80073cc:	40023c00 	.word	0x40023c00

080073d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d101      	bne.n	80073e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e07b      	b.n	80074da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d108      	bne.n	80073fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073f2:	d009      	beq.n	8007408 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	61da      	str	r2, [r3, #28]
 80073fa:	e005      	b.n	8007408 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d106      	bne.n	8007428 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7fb f926 	bl	8002674 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2202      	movs	r2, #2
 800742c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800743e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007450:	431a      	orrs	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800745a:	431a      	orrs	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	f003 0302 	and.w	r3, r3, #2
 8007464:	431a      	orrs	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	431a      	orrs	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007478:	431a      	orrs	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007482:	431a      	orrs	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800748c:	ea42 0103 	orr.w	r1, r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007494:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	430a      	orrs	r2, r1
 800749e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	0c1b      	lsrs	r3, r3, #16
 80074a6:	f003 0104 	and.w	r1, r3, #4
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ae:	f003 0210 	and.w	r2, r3, #16
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	430a      	orrs	r2, r1
 80074b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	69da      	ldr	r2, [r3, #28]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b082      	sub	sp, #8
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e041      	b.n	8007578 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d106      	bne.n	800750e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7fb f8fb 	bl	8002704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2202      	movs	r2, #2
 8007512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	3304      	adds	r3, #4
 800751e:	4619      	mov	r1, r3
 8007520:	4610      	mov	r0, r2
 8007522:	f000 fba3 	bl	8007c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b01      	cmp	r3, #1
 8007592:	d001      	beq.n	8007598 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e044      	b.n	8007622 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2202      	movs	r2, #2
 800759c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68da      	ldr	r2, [r3, #12]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f042 0201 	orr.w	r2, r2, #1
 80075ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a1e      	ldr	r2, [pc, #120]	; (8007630 <HAL_TIM_Base_Start_IT+0xb0>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d018      	beq.n	80075ec <HAL_TIM_Base_Start_IT+0x6c>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075c2:	d013      	beq.n	80075ec <HAL_TIM_Base_Start_IT+0x6c>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a1a      	ldr	r2, [pc, #104]	; (8007634 <HAL_TIM_Base_Start_IT+0xb4>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d00e      	beq.n	80075ec <HAL_TIM_Base_Start_IT+0x6c>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a19      	ldr	r2, [pc, #100]	; (8007638 <HAL_TIM_Base_Start_IT+0xb8>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d009      	beq.n	80075ec <HAL_TIM_Base_Start_IT+0x6c>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a17      	ldr	r2, [pc, #92]	; (800763c <HAL_TIM_Base_Start_IT+0xbc>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d004      	beq.n	80075ec <HAL_TIM_Base_Start_IT+0x6c>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a16      	ldr	r2, [pc, #88]	; (8007640 <HAL_TIM_Base_Start_IT+0xc0>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d111      	bne.n	8007610 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f003 0307 	and.w	r3, r3, #7
 80075f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2b06      	cmp	r3, #6
 80075fc:	d010      	beq.n	8007620 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f042 0201 	orr.w	r2, r2, #1
 800760c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800760e:	e007      	b.n	8007620 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 0201 	orr.w	r2, r2, #1
 800761e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3714      	adds	r7, #20
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	40010000 	.word	0x40010000
 8007634:	40000400 	.word	0x40000400
 8007638:	40000800 	.word	0x40000800
 800763c:	40000c00 	.word	0x40000c00
 8007640:	40014000 	.word	0x40014000

08007644 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e041      	b.n	80076da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d106      	bne.n	8007670 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f839 	bl	80076e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3304      	adds	r3, #4
 8007680:	4619      	mov	r1, r3
 8007682:	4610      	mov	r0, r2
 8007684:	f000 faf2 	bl	8007c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b083      	sub	sp, #12
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80076ea:	bf00      	nop
 80076ec:	370c      	adds	r7, #12
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b082      	sub	sp, #8
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	2b02      	cmp	r3, #2
 800770a:	d122      	bne.n	8007752 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f003 0302 	and.w	r3, r3, #2
 8007716:	2b02      	cmp	r3, #2
 8007718:	d11b      	bne.n	8007752 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f06f 0202 	mvn.w	r2, #2
 8007722:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	f003 0303 	and.w	r3, r3, #3
 8007734:	2b00      	cmp	r3, #0
 8007736:	d003      	beq.n	8007740 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fa78 	bl	8007c2e <HAL_TIM_IC_CaptureCallback>
 800773e:	e005      	b.n	800774c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fa6a 	bl	8007c1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fa7b 	bl	8007c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	f003 0304 	and.w	r3, r3, #4
 800775c:	2b04      	cmp	r3, #4
 800775e:	d122      	bne.n	80077a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f003 0304 	and.w	r3, r3, #4
 800776a:	2b04      	cmp	r3, #4
 800776c:	d11b      	bne.n	80077a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f06f 0204 	mvn.w	r2, #4
 8007776:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2202      	movs	r2, #2
 800777c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fa4e 	bl	8007c2e <HAL_TIM_IC_CaptureCallback>
 8007792:	e005      	b.n	80077a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fa40 	bl	8007c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fa51 	bl	8007c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	f003 0308 	and.w	r3, r3, #8
 80077b0:	2b08      	cmp	r3, #8
 80077b2:	d122      	bne.n	80077fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	f003 0308 	and.w	r3, r3, #8
 80077be:	2b08      	cmp	r3, #8
 80077c0:	d11b      	bne.n	80077fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f06f 0208 	mvn.w	r2, #8
 80077ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2204      	movs	r2, #4
 80077d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	69db      	ldr	r3, [r3, #28]
 80077d8:	f003 0303 	and.w	r3, r3, #3
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d003      	beq.n	80077e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fa24 	bl	8007c2e <HAL_TIM_IC_CaptureCallback>
 80077e6:	e005      	b.n	80077f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fa16 	bl	8007c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fa27 	bl	8007c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	f003 0310 	and.w	r3, r3, #16
 8007804:	2b10      	cmp	r3, #16
 8007806:	d122      	bne.n	800784e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f003 0310 	and.w	r3, r3, #16
 8007812:	2b10      	cmp	r3, #16
 8007814:	d11b      	bne.n	800784e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f06f 0210 	mvn.w	r2, #16
 800781e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2208      	movs	r2, #8
 8007824:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007830:	2b00      	cmp	r3, #0
 8007832:	d003      	beq.n	800783c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f9fa 	bl	8007c2e <HAL_TIM_IC_CaptureCallback>
 800783a:	e005      	b.n	8007848 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f9ec 	bl	8007c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f9fd 	bl	8007c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	f003 0301 	and.w	r3, r3, #1
 8007858:	2b01      	cmp	r3, #1
 800785a:	d10e      	bne.n	800787a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b01      	cmp	r3, #1
 8007868:	d107      	bne.n	800787a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f06f 0201 	mvn.w	r2, #1
 8007872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7fa fe71 	bl	800255c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007884:	2b80      	cmp	r3, #128	; 0x80
 8007886:	d10e      	bne.n	80078a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007892:	2b80      	cmp	r3, #128	; 0x80
 8007894:	d107      	bne.n	80078a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800789e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fd01 	bl	80082a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b0:	2b40      	cmp	r3, #64	; 0x40
 80078b2:	d10e      	bne.n	80078d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078be:	2b40      	cmp	r3, #64	; 0x40
 80078c0:	d107      	bne.n	80078d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f9c2 	bl	8007c56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	f003 0320 	and.w	r3, r3, #32
 80078dc:	2b20      	cmp	r3, #32
 80078de:	d10e      	bne.n	80078fe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	f003 0320 	and.w	r3, r3, #32
 80078ea:	2b20      	cmp	r3, #32
 80078ec:	d107      	bne.n	80078fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f06f 0220 	mvn.w	r2, #32
 80078f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fccb 	bl	8008294 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078fe:	bf00      	nop
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
	...

08007908 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007914:	2300      	movs	r3, #0
 8007916:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800791e:	2b01      	cmp	r3, #1
 8007920:	d101      	bne.n	8007926 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007922:	2302      	movs	r3, #2
 8007924:	e0ae      	b.n	8007a84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2b0c      	cmp	r3, #12
 8007932:	f200 809f 	bhi.w	8007a74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007936:	a201      	add	r2, pc, #4	; (adr r2, 800793c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793c:	08007971 	.word	0x08007971
 8007940:	08007a75 	.word	0x08007a75
 8007944:	08007a75 	.word	0x08007a75
 8007948:	08007a75 	.word	0x08007a75
 800794c:	080079b1 	.word	0x080079b1
 8007950:	08007a75 	.word	0x08007a75
 8007954:	08007a75 	.word	0x08007a75
 8007958:	08007a75 	.word	0x08007a75
 800795c:	080079f3 	.word	0x080079f3
 8007960:	08007a75 	.word	0x08007a75
 8007964:	08007a75 	.word	0x08007a75
 8007968:	08007a75 	.word	0x08007a75
 800796c:	08007a33 	.word	0x08007a33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68b9      	ldr	r1, [r7, #8]
 8007976:	4618      	mov	r0, r3
 8007978:	f000 f9f8 	bl	8007d6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	699a      	ldr	r2, [r3, #24]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f042 0208 	orr.w	r2, r2, #8
 800798a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	699a      	ldr	r2, [r3, #24]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f022 0204 	bic.w	r2, r2, #4
 800799a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6999      	ldr	r1, [r3, #24]
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	691a      	ldr	r2, [r3, #16]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	430a      	orrs	r2, r1
 80079ac:	619a      	str	r2, [r3, #24]
      break;
 80079ae:	e064      	b.n	8007a7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68b9      	ldr	r1, [r7, #8]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 fa3e 	bl	8007e38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	699a      	ldr	r2, [r3, #24]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699a      	ldr	r2, [r3, #24]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	6999      	ldr	r1, [r3, #24]
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	021a      	lsls	r2, r3, #8
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	430a      	orrs	r2, r1
 80079ee:	619a      	str	r2, [r3, #24]
      break;
 80079f0:	e043      	b.n	8007a7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68b9      	ldr	r1, [r7, #8]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 fa89 	bl	8007f10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	69da      	ldr	r2, [r3, #28]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f042 0208 	orr.w	r2, r2, #8
 8007a0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	69da      	ldr	r2, [r3, #28]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f022 0204 	bic.w	r2, r2, #4
 8007a1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	69d9      	ldr	r1, [r3, #28]
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	691a      	ldr	r2, [r3, #16]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	61da      	str	r2, [r3, #28]
      break;
 8007a30:	e023      	b.n	8007a7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68b9      	ldr	r1, [r7, #8]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f000 fad3 	bl	8007fe4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	69da      	ldr	r2, [r3, #28]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	69da      	ldr	r2, [r3, #28]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	69d9      	ldr	r1, [r3, #28]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	021a      	lsls	r2, r3, #8
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	61da      	str	r2, [r3, #28]
      break;
 8007a72:	e002      	b.n	8007a7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	75fb      	strb	r3, [r7, #23]
      break;
 8007a78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3718      	adds	r7, #24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a96:	2300      	movs	r3, #0
 8007a98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d101      	bne.n	8007aa8 <HAL_TIM_ConfigClockSource+0x1c>
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	e0b4      	b.n	8007c12 <HAL_TIM_ConfigClockSource+0x186>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ace:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ae0:	d03e      	beq.n	8007b60 <HAL_TIM_ConfigClockSource+0xd4>
 8007ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ae6:	f200 8087 	bhi.w	8007bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8007aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aee:	f000 8086 	beq.w	8007bfe <HAL_TIM_ConfigClockSource+0x172>
 8007af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007af6:	d87f      	bhi.n	8007bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8007af8:	2b70      	cmp	r3, #112	; 0x70
 8007afa:	d01a      	beq.n	8007b32 <HAL_TIM_ConfigClockSource+0xa6>
 8007afc:	2b70      	cmp	r3, #112	; 0x70
 8007afe:	d87b      	bhi.n	8007bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8007b00:	2b60      	cmp	r3, #96	; 0x60
 8007b02:	d050      	beq.n	8007ba6 <HAL_TIM_ConfigClockSource+0x11a>
 8007b04:	2b60      	cmp	r3, #96	; 0x60
 8007b06:	d877      	bhi.n	8007bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8007b08:	2b50      	cmp	r3, #80	; 0x50
 8007b0a:	d03c      	beq.n	8007b86 <HAL_TIM_ConfigClockSource+0xfa>
 8007b0c:	2b50      	cmp	r3, #80	; 0x50
 8007b0e:	d873      	bhi.n	8007bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8007b10:	2b40      	cmp	r3, #64	; 0x40
 8007b12:	d058      	beq.n	8007bc6 <HAL_TIM_ConfigClockSource+0x13a>
 8007b14:	2b40      	cmp	r3, #64	; 0x40
 8007b16:	d86f      	bhi.n	8007bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8007b18:	2b30      	cmp	r3, #48	; 0x30
 8007b1a:	d064      	beq.n	8007be6 <HAL_TIM_ConfigClockSource+0x15a>
 8007b1c:	2b30      	cmp	r3, #48	; 0x30
 8007b1e:	d86b      	bhi.n	8007bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8007b20:	2b20      	cmp	r3, #32
 8007b22:	d060      	beq.n	8007be6 <HAL_TIM_ConfigClockSource+0x15a>
 8007b24:	2b20      	cmp	r3, #32
 8007b26:	d867      	bhi.n	8007bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d05c      	beq.n	8007be6 <HAL_TIM_ConfigClockSource+0x15a>
 8007b2c:	2b10      	cmp	r3, #16
 8007b2e:	d05a      	beq.n	8007be6 <HAL_TIM_ConfigClockSource+0x15a>
 8007b30:	e062      	b.n	8007bf8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6818      	ldr	r0, [r3, #0]
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	6899      	ldr	r1, [r3, #8]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	f000 fb19 	bl	8008178 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68ba      	ldr	r2, [r7, #8]
 8007b5c:	609a      	str	r2, [r3, #8]
      break;
 8007b5e:	e04f      	b.n	8007c00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6818      	ldr	r0, [r3, #0]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	6899      	ldr	r1, [r3, #8]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	f000 fb02 	bl	8008178 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689a      	ldr	r2, [r3, #8]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b82:	609a      	str	r2, [r3, #8]
      break;
 8007b84:	e03c      	b.n	8007c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6818      	ldr	r0, [r3, #0]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	6859      	ldr	r1, [r3, #4]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	461a      	mov	r2, r3
 8007b94:	f000 fa76 	bl	8008084 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2150      	movs	r1, #80	; 0x50
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f000 facf 	bl	8008142 <TIM_ITRx_SetConfig>
      break;
 8007ba4:	e02c      	b.n	8007c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6818      	ldr	r0, [r3, #0]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	6859      	ldr	r1, [r3, #4]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	f000 fa95 	bl	80080e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2160      	movs	r1, #96	; 0x60
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 fabf 	bl	8008142 <TIM_ITRx_SetConfig>
      break;
 8007bc4:	e01c      	b.n	8007c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6818      	ldr	r0, [r3, #0]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	6859      	ldr	r1, [r3, #4]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	f000 fa56 	bl	8008084 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2140      	movs	r1, #64	; 0x40
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 faaf 	bl	8008142 <TIM_ITRx_SetConfig>
      break;
 8007be4:	e00c      	b.n	8007c00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4619      	mov	r1, r3
 8007bf0:	4610      	mov	r0, r2
 8007bf2:	f000 faa6 	bl	8008142 <TIM_ITRx_SetConfig>
      break;
 8007bf6:	e003      	b.n	8007c00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8007bfc:	e000      	b.n	8007c00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007bfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b083      	sub	sp, #12
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c22:	bf00      	nop
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b083      	sub	sp, #12
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c36:	bf00      	nop
 8007c38:	370c      	adds	r7, #12
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c42:	b480      	push	{r7}
 8007c44:	b083      	sub	sp, #12
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c4a:	bf00      	nop
 8007c4c:	370c      	adds	r7, #12
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c56:	b480      	push	{r7}
 8007c58:	b083      	sub	sp, #12
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c5e:	bf00      	nop
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
	...

08007c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a34      	ldr	r2, [pc, #208]	; (8007d50 <TIM_Base_SetConfig+0xe4>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d00f      	beq.n	8007ca4 <TIM_Base_SetConfig+0x38>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c8a:	d00b      	beq.n	8007ca4 <TIM_Base_SetConfig+0x38>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a31      	ldr	r2, [pc, #196]	; (8007d54 <TIM_Base_SetConfig+0xe8>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d007      	beq.n	8007ca4 <TIM_Base_SetConfig+0x38>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a30      	ldr	r2, [pc, #192]	; (8007d58 <TIM_Base_SetConfig+0xec>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d003      	beq.n	8007ca4 <TIM_Base_SetConfig+0x38>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a2f      	ldr	r2, [pc, #188]	; (8007d5c <TIM_Base_SetConfig+0xf0>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d108      	bne.n	8007cb6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a25      	ldr	r2, [pc, #148]	; (8007d50 <TIM_Base_SetConfig+0xe4>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d01b      	beq.n	8007cf6 <TIM_Base_SetConfig+0x8a>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc4:	d017      	beq.n	8007cf6 <TIM_Base_SetConfig+0x8a>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a22      	ldr	r2, [pc, #136]	; (8007d54 <TIM_Base_SetConfig+0xe8>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d013      	beq.n	8007cf6 <TIM_Base_SetConfig+0x8a>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a21      	ldr	r2, [pc, #132]	; (8007d58 <TIM_Base_SetConfig+0xec>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d00f      	beq.n	8007cf6 <TIM_Base_SetConfig+0x8a>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a20      	ldr	r2, [pc, #128]	; (8007d5c <TIM_Base_SetConfig+0xf0>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d00b      	beq.n	8007cf6 <TIM_Base_SetConfig+0x8a>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a1f      	ldr	r2, [pc, #124]	; (8007d60 <TIM_Base_SetConfig+0xf4>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d007      	beq.n	8007cf6 <TIM_Base_SetConfig+0x8a>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a1e      	ldr	r2, [pc, #120]	; (8007d64 <TIM_Base_SetConfig+0xf8>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d003      	beq.n	8007cf6 <TIM_Base_SetConfig+0x8a>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a1d      	ldr	r2, [pc, #116]	; (8007d68 <TIM_Base_SetConfig+0xfc>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d108      	bne.n	8007d08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	689a      	ldr	r2, [r3, #8]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a08      	ldr	r2, [pc, #32]	; (8007d50 <TIM_Base_SetConfig+0xe4>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d103      	bne.n	8007d3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	691a      	ldr	r2, [r3, #16]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	615a      	str	r2, [r3, #20]
}
 8007d42:	bf00      	nop
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	40010000 	.word	0x40010000
 8007d54:	40000400 	.word	0x40000400
 8007d58:	40000800 	.word	0x40000800
 8007d5c:	40000c00 	.word	0x40000c00
 8007d60:	40014000 	.word	0x40014000
 8007d64:	40014400 	.word	0x40014400
 8007d68:	40014800 	.word	0x40014800

08007d6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b087      	sub	sp, #28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	f023 0201 	bic.w	r2, r3, #1
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f023 0303 	bic.w	r3, r3, #3
 8007da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f023 0302 	bic.w	r3, r3, #2
 8007db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a1c      	ldr	r2, [pc, #112]	; (8007e34 <TIM_OC1_SetConfig+0xc8>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d10c      	bne.n	8007de2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f023 0308 	bic.w	r3, r3, #8
 8007dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f023 0304 	bic.w	r3, r3, #4
 8007de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a13      	ldr	r2, [pc, #76]	; (8007e34 <TIM_OC1_SetConfig+0xc8>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d111      	bne.n	8007e0e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	697a      	ldr	r2, [r7, #20]
 8007e26:	621a      	str	r2, [r3, #32]
}
 8007e28:	bf00      	nop
 8007e2a:	371c      	adds	r7, #28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	40010000 	.word	0x40010000

08007e38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b087      	sub	sp, #28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	f023 0210 	bic.w	r2, r3, #16
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	021b      	lsls	r3, r3, #8
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f023 0320 	bic.w	r3, r3, #32
 8007e82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	011b      	lsls	r3, r3, #4
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a1e      	ldr	r2, [pc, #120]	; (8007f0c <TIM_OC2_SetConfig+0xd4>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d10d      	bne.n	8007eb4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	011b      	lsls	r3, r3, #4
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a15      	ldr	r2, [pc, #84]	; (8007f0c <TIM_OC2_SetConfig+0xd4>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d113      	bne.n	8007ee4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ec2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007eca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	693a      	ldr	r2, [r7, #16]
 8007ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	621a      	str	r2, [r3, #32]
}
 8007efe:	bf00      	nop
 8007f00:	371c      	adds	r7, #28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	40010000 	.word	0x40010000

08007f10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b087      	sub	sp, #28
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a1b      	ldr	r3, [r3, #32]
 8007f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	69db      	ldr	r3, [r3, #28]
 8007f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f023 0303 	bic.w	r3, r3, #3
 8007f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	021b      	lsls	r3, r3, #8
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a1d      	ldr	r2, [pc, #116]	; (8007fe0 <TIM_OC3_SetConfig+0xd0>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d10d      	bne.n	8007f8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	021b      	lsls	r3, r3, #8
 8007f7c:	697a      	ldr	r2, [r7, #20]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a14      	ldr	r2, [pc, #80]	; (8007fe0 <TIM_OC3_SetConfig+0xd0>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d113      	bne.n	8007fba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	695b      	ldr	r3, [r3, #20]
 8007fa6:	011b      	lsls	r3, r3, #4
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	011b      	lsls	r3, r3, #4
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	685a      	ldr	r2, [r3, #4]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	621a      	str	r2, [r3, #32]
}
 8007fd4:	bf00      	nop
 8007fd6:	371c      	adds	r7, #28
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr
 8007fe0:	40010000 	.word	0x40010000

08007fe4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a1b      	ldr	r3, [r3, #32]
 8007ff2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	69db      	ldr	r3, [r3, #28]
 800800a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800801a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	021b      	lsls	r3, r3, #8
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	4313      	orrs	r3, r2
 8008026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800802e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	031b      	lsls	r3, r3, #12
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	4313      	orrs	r3, r2
 800803a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a10      	ldr	r2, [pc, #64]	; (8008080 <TIM_OC4_SetConfig+0x9c>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d109      	bne.n	8008058 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800804a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	695b      	ldr	r3, [r3, #20]
 8008050:	019b      	lsls	r3, r3, #6
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	4313      	orrs	r3, r2
 8008056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	685a      	ldr	r2, [r3, #4]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	621a      	str	r2, [r3, #32]
}
 8008072:	bf00      	nop
 8008074:	371c      	adds	r7, #28
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	40010000 	.word	0x40010000

08008084 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008084:	b480      	push	{r7}
 8008086:	b087      	sub	sp, #28
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6a1b      	ldr	r3, [r3, #32]
 8008094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	f023 0201 	bic.w	r2, r3, #1
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	011b      	lsls	r3, r3, #4
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	f023 030a 	bic.w	r3, r3, #10
 80080c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	621a      	str	r2, [r3, #32]
}
 80080d6:	bf00      	nop
 80080d8:	371c      	adds	r7, #28
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080e2:	b480      	push	{r7}
 80080e4:	b087      	sub	sp, #28
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	60f8      	str	r0, [r7, #12]
 80080ea:	60b9      	str	r1, [r7, #8]
 80080ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	f023 0210 	bic.w	r2, r3, #16
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6a1b      	ldr	r3, [r3, #32]
 8008104:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800810c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	031b      	lsls	r3, r3, #12
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	4313      	orrs	r3, r2
 8008116:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800811e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	011b      	lsls	r3, r3, #4
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	4313      	orrs	r3, r2
 8008128:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	693a      	ldr	r2, [r7, #16]
 8008134:	621a      	str	r2, [r3, #32]
}
 8008136:	bf00      	nop
 8008138:	371c      	adds	r7, #28
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008142:	b480      	push	{r7}
 8008144:	b085      	sub	sp, #20
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008158:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	4313      	orrs	r3, r2
 8008160:	f043 0307 	orr.w	r3, r3, #7
 8008164:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	609a      	str	r2, [r3, #8]
}
 800816c:	bf00      	nop
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
 8008184:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008192:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	021a      	lsls	r2, r3, #8
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	431a      	orrs	r2, r3
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	4313      	orrs	r3, r2
 80081a0:	697a      	ldr	r2, [r7, #20]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	609a      	str	r2, [r3, #8]
}
 80081ac:	bf00      	nop
 80081ae:	371c      	adds	r7, #28
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d101      	bne.n	80081d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081cc:	2302      	movs	r3, #2
 80081ce:	e050      	b.n	8008272 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2202      	movs	r2, #2
 80081dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	4313      	orrs	r3, r2
 8008200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a1c      	ldr	r2, [pc, #112]	; (8008280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d018      	beq.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800821c:	d013      	beq.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a18      	ldr	r2, [pc, #96]	; (8008284 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d00e      	beq.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a16      	ldr	r2, [pc, #88]	; (8008288 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d009      	beq.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a15      	ldr	r2, [pc, #84]	; (800828c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d004      	beq.n	8008246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a13      	ldr	r2, [pc, #76]	; (8008290 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d10c      	bne.n	8008260 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800824c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	4313      	orrs	r3, r2
 8008256:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	40010000 	.word	0x40010000
 8008284:	40000400 	.word	0x40000400
 8008288:	40000800 	.word	0x40000800
 800828c:	40000c00 	.word	0x40000c00
 8008290:	40014000 	.word	0x40014000

08008294 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082bc:	b084      	sub	sp, #16
 80082be:	b580      	push	{r7, lr}
 80082c0:	b084      	sub	sp, #16
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	f107 001c 	add.w	r0, r7, #28
 80082ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80082ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d122      	bne.n	800831a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80082e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80082fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d105      	bne.n	800830e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f001 fbee 	bl	8009af0 <USB_CoreReset>
 8008314:	4603      	mov	r3, r0
 8008316:	73fb      	strb	r3, [r7, #15]
 8008318:	e01a      	b.n	8008350 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f001 fbe2 	bl	8009af0 <USB_CoreReset>
 800832c:	4603      	mov	r3, r0
 800832e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008332:	2b00      	cmp	r3, #0
 8008334:	d106      	bne.n	8008344 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	639a      	str	r2, [r3, #56]	; 0x38
 8008342:	e005      	b.n	8008350 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008348:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008352:	2b01      	cmp	r3, #1
 8008354:	d10b      	bne.n	800836e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	f043 0206 	orr.w	r2, r3, #6
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	f043 0220 	orr.w	r2, r3, #32
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800836e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800837a:	b004      	add	sp, #16
 800837c:	4770      	bx	lr
	...

08008380 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008380:	b480      	push	{r7}
 8008382:	b087      	sub	sp, #28
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	4613      	mov	r3, r2
 800838c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800838e:	79fb      	ldrb	r3, [r7, #7]
 8008390:	2b02      	cmp	r3, #2
 8008392:	d165      	bne.n	8008460 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	4a41      	ldr	r2, [pc, #260]	; (800849c <USB_SetTurnaroundTime+0x11c>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d906      	bls.n	80083aa <USB_SetTurnaroundTime+0x2a>
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	4a40      	ldr	r2, [pc, #256]	; (80084a0 <USB_SetTurnaroundTime+0x120>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d202      	bcs.n	80083aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80083a4:	230f      	movs	r3, #15
 80083a6:	617b      	str	r3, [r7, #20]
 80083a8:	e062      	b.n	8008470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	4a3c      	ldr	r2, [pc, #240]	; (80084a0 <USB_SetTurnaroundTime+0x120>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d306      	bcc.n	80083c0 <USB_SetTurnaroundTime+0x40>
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	4a3b      	ldr	r2, [pc, #236]	; (80084a4 <USB_SetTurnaroundTime+0x124>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d202      	bcs.n	80083c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80083ba:	230e      	movs	r3, #14
 80083bc:	617b      	str	r3, [r7, #20]
 80083be:	e057      	b.n	8008470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	4a38      	ldr	r2, [pc, #224]	; (80084a4 <USB_SetTurnaroundTime+0x124>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d306      	bcc.n	80083d6 <USB_SetTurnaroundTime+0x56>
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	4a37      	ldr	r2, [pc, #220]	; (80084a8 <USB_SetTurnaroundTime+0x128>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d202      	bcs.n	80083d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80083d0:	230d      	movs	r3, #13
 80083d2:	617b      	str	r3, [r7, #20]
 80083d4:	e04c      	b.n	8008470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	4a33      	ldr	r2, [pc, #204]	; (80084a8 <USB_SetTurnaroundTime+0x128>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d306      	bcc.n	80083ec <USB_SetTurnaroundTime+0x6c>
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	4a32      	ldr	r2, [pc, #200]	; (80084ac <USB_SetTurnaroundTime+0x12c>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d802      	bhi.n	80083ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80083e6:	230c      	movs	r3, #12
 80083e8:	617b      	str	r3, [r7, #20]
 80083ea:	e041      	b.n	8008470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	4a2f      	ldr	r2, [pc, #188]	; (80084ac <USB_SetTurnaroundTime+0x12c>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d906      	bls.n	8008402 <USB_SetTurnaroundTime+0x82>
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	4a2e      	ldr	r2, [pc, #184]	; (80084b0 <USB_SetTurnaroundTime+0x130>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d802      	bhi.n	8008402 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80083fc:	230b      	movs	r3, #11
 80083fe:	617b      	str	r3, [r7, #20]
 8008400:	e036      	b.n	8008470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	4a2a      	ldr	r2, [pc, #168]	; (80084b0 <USB_SetTurnaroundTime+0x130>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d906      	bls.n	8008418 <USB_SetTurnaroundTime+0x98>
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	4a29      	ldr	r2, [pc, #164]	; (80084b4 <USB_SetTurnaroundTime+0x134>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d802      	bhi.n	8008418 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008412:	230a      	movs	r3, #10
 8008414:	617b      	str	r3, [r7, #20]
 8008416:	e02b      	b.n	8008470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	4a26      	ldr	r2, [pc, #152]	; (80084b4 <USB_SetTurnaroundTime+0x134>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d906      	bls.n	800842e <USB_SetTurnaroundTime+0xae>
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	4a25      	ldr	r2, [pc, #148]	; (80084b8 <USB_SetTurnaroundTime+0x138>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d202      	bcs.n	800842e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008428:	2309      	movs	r3, #9
 800842a:	617b      	str	r3, [r7, #20]
 800842c:	e020      	b.n	8008470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	4a21      	ldr	r2, [pc, #132]	; (80084b8 <USB_SetTurnaroundTime+0x138>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d306      	bcc.n	8008444 <USB_SetTurnaroundTime+0xc4>
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	4a20      	ldr	r2, [pc, #128]	; (80084bc <USB_SetTurnaroundTime+0x13c>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d802      	bhi.n	8008444 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800843e:	2308      	movs	r3, #8
 8008440:	617b      	str	r3, [r7, #20]
 8008442:	e015      	b.n	8008470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	4a1d      	ldr	r2, [pc, #116]	; (80084bc <USB_SetTurnaroundTime+0x13c>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d906      	bls.n	800845a <USB_SetTurnaroundTime+0xda>
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	4a1c      	ldr	r2, [pc, #112]	; (80084c0 <USB_SetTurnaroundTime+0x140>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d202      	bcs.n	800845a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008454:	2307      	movs	r3, #7
 8008456:	617b      	str	r3, [r7, #20]
 8008458:	e00a      	b.n	8008470 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800845a:	2306      	movs	r3, #6
 800845c:	617b      	str	r3, [r7, #20]
 800845e:	e007      	b.n	8008470 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008460:	79fb      	ldrb	r3, [r7, #7]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d102      	bne.n	800846c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008466:	2309      	movs	r3, #9
 8008468:	617b      	str	r3, [r7, #20]
 800846a:	e001      	b.n	8008470 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800846c:	2309      	movs	r3, #9
 800846e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	68da      	ldr	r2, [r3, #12]
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	029b      	lsls	r3, r3, #10
 8008484:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008488:	431a      	orrs	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	371c      	adds	r7, #28
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	00d8acbf 	.word	0x00d8acbf
 80084a0:	00e4e1c0 	.word	0x00e4e1c0
 80084a4:	00f42400 	.word	0x00f42400
 80084a8:	01067380 	.word	0x01067380
 80084ac:	011a499f 	.word	0x011a499f
 80084b0:	01312cff 	.word	0x01312cff
 80084b4:	014ca43f 	.word	0x014ca43f
 80084b8:	016e3600 	.word	0x016e3600
 80084bc:	01a6ab1f 	.word	0x01a6ab1f
 80084c0:	01e84800 	.word	0x01e84800

080084c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	f043 0201 	orr.w	r2, r3, #1
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b083      	sub	sp, #12
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	f023 0201 	bic.w	r2, r3, #1
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	460b      	mov	r3, r1
 8008512:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008514:	2300      	movs	r3, #0
 8008516:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008524:	78fb      	ldrb	r3, [r7, #3]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d115      	bne.n	8008556 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008536:	2001      	movs	r0, #1
 8008538:	f7fa fd24 	bl	8002f84 <HAL_Delay>
      ms++;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	3301      	adds	r3, #1
 8008540:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f001 fa45 	bl	80099d2 <USB_GetMode>
 8008548:	4603      	mov	r3, r0
 800854a:	2b01      	cmp	r3, #1
 800854c:	d01e      	beq.n	800858c <USB_SetCurrentMode+0x84>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2b31      	cmp	r3, #49	; 0x31
 8008552:	d9f0      	bls.n	8008536 <USB_SetCurrentMode+0x2e>
 8008554:	e01a      	b.n	800858c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008556:	78fb      	ldrb	r3, [r7, #3]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d115      	bne.n	8008588 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008568:	2001      	movs	r0, #1
 800856a:	f7fa fd0b 	bl	8002f84 <HAL_Delay>
      ms++;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	3301      	adds	r3, #1
 8008572:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f001 fa2c 	bl	80099d2 <USB_GetMode>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d005      	beq.n	800858c <USB_SetCurrentMode+0x84>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2b31      	cmp	r3, #49	; 0x31
 8008584:	d9f0      	bls.n	8008568 <USB_SetCurrentMode+0x60>
 8008586:	e001      	b.n	800858c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e005      	b.n	8008598 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2b32      	cmp	r3, #50	; 0x32
 8008590:	d101      	bne.n	8008596 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e000      	b.n	8008598 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3710      	adds	r7, #16
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085a0:	b084      	sub	sp, #16
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b086      	sub	sp, #24
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80085ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80085ba:	2300      	movs	r3, #0
 80085bc:	613b      	str	r3, [r7, #16]
 80085be:	e009      	b.n	80085d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	3340      	adds	r3, #64	; 0x40
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4413      	add	r3, r2
 80085ca:	2200      	movs	r2, #0
 80085cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	3301      	adds	r3, #1
 80085d2:	613b      	str	r3, [r7, #16]
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	2b0e      	cmp	r3, #14
 80085d8:	d9f2      	bls.n	80085c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80085da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d11c      	bne.n	800861a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085ee:	f043 0302 	orr.w	r3, r3, #2
 80085f2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008604:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008610:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	639a      	str	r2, [r3, #56]	; 0x38
 8008618:	e00b      	b.n	8008632 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800862a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008638:	461a      	mov	r2, r3
 800863a:	2300      	movs	r3, #0
 800863c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008644:	4619      	mov	r1, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800864c:	461a      	mov	r2, r3
 800864e:	680b      	ldr	r3, [r1, #0]
 8008650:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008654:	2b01      	cmp	r3, #1
 8008656:	d10c      	bne.n	8008672 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865a:	2b00      	cmp	r3, #0
 800865c:	d104      	bne.n	8008668 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800865e:	2100      	movs	r1, #0
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f965 	bl	8008930 <USB_SetDevSpeed>
 8008666:	e008      	b.n	800867a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008668:	2101      	movs	r1, #1
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f960 	bl	8008930 <USB_SetDevSpeed>
 8008670:	e003      	b.n	800867a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008672:	2103      	movs	r1, #3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f95b 	bl	8008930 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800867a:	2110      	movs	r1, #16
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f8f3 	bl	8008868 <USB_FlushTxFifo>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d001      	beq.n	800868c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f91f 	bl	80088d0 <USB_FlushRxFifo>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d001      	beq.n	800869c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086a2:	461a      	mov	r2, r3
 80086a4:	2300      	movs	r3, #0
 80086a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ae:	461a      	mov	r2, r3
 80086b0:	2300      	movs	r3, #0
 80086b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ba:	461a      	mov	r2, r3
 80086bc:	2300      	movs	r3, #0
 80086be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086c0:	2300      	movs	r3, #0
 80086c2:	613b      	str	r3, [r7, #16]
 80086c4:	e043      	b.n	800874e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	015a      	lsls	r2, r3, #5
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	4413      	add	r3, r2
 80086ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086dc:	d118      	bne.n	8008710 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d10a      	bne.n	80086fa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	015a      	lsls	r2, r3, #5
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	4413      	add	r3, r2
 80086ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f0:	461a      	mov	r2, r3
 80086f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80086f6:	6013      	str	r3, [r2, #0]
 80086f8:	e013      	b.n	8008722 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	015a      	lsls	r2, r3, #5
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4413      	add	r3, r2
 8008702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008706:	461a      	mov	r2, r3
 8008708:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800870c:	6013      	str	r3, [r2, #0]
 800870e:	e008      	b.n	8008722 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	015a      	lsls	r2, r3, #5
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	4413      	add	r3, r2
 8008718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800871c:	461a      	mov	r2, r3
 800871e:	2300      	movs	r3, #0
 8008720:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	015a      	lsls	r2, r3, #5
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	4413      	add	r3, r2
 800872a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800872e:	461a      	mov	r2, r3
 8008730:	2300      	movs	r3, #0
 8008732:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	015a      	lsls	r2, r3, #5
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	4413      	add	r3, r2
 800873c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008740:	461a      	mov	r2, r3
 8008742:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008746:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	3301      	adds	r3, #1
 800874c:	613b      	str	r3, [r7, #16]
 800874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	429a      	cmp	r2, r3
 8008754:	d3b7      	bcc.n	80086c6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008756:	2300      	movs	r3, #0
 8008758:	613b      	str	r3, [r7, #16]
 800875a:	e043      	b.n	80087e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	015a      	lsls	r2, r3, #5
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	4413      	add	r3, r2
 8008764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800876e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008772:	d118      	bne.n	80087a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10a      	bne.n	8008790 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	015a      	lsls	r2, r3, #5
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	4413      	add	r3, r2
 8008782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008786:	461a      	mov	r2, r3
 8008788:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800878c:	6013      	str	r3, [r2, #0]
 800878e:	e013      	b.n	80087b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	015a      	lsls	r2, r3, #5
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	4413      	add	r3, r2
 8008798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800879c:	461a      	mov	r2, r3
 800879e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80087a2:	6013      	str	r3, [r2, #0]
 80087a4:	e008      	b.n	80087b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	015a      	lsls	r2, r3, #5
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	4413      	add	r3, r2
 80087ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b2:	461a      	mov	r2, r3
 80087b4:	2300      	movs	r3, #0
 80087b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	015a      	lsls	r2, r3, #5
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	4413      	add	r3, r2
 80087c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c4:	461a      	mov	r2, r3
 80087c6:	2300      	movs	r3, #0
 80087c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	015a      	lsls	r2, r3, #5
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	4413      	add	r3, r2
 80087d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d6:	461a      	mov	r2, r3
 80087d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80087dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	3301      	adds	r3, #1
 80087e2:	613b      	str	r3, [r7, #16]
 80087e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d3b7      	bcc.n	800875c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800880c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008810:	2b00      	cmp	r3, #0
 8008812:	d105      	bne.n	8008820 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	f043 0210 	orr.w	r2, r3, #16
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	699a      	ldr	r2, [r3, #24]
 8008824:	4b0f      	ldr	r3, [pc, #60]	; (8008864 <USB_DevInit+0x2c4>)
 8008826:	4313      	orrs	r3, r2
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800882c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800882e:	2b00      	cmp	r3, #0
 8008830:	d005      	beq.n	800883e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	699b      	ldr	r3, [r3, #24]
 8008836:	f043 0208 	orr.w	r2, r3, #8
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800883e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008840:	2b01      	cmp	r3, #1
 8008842:	d107      	bne.n	8008854 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	699b      	ldr	r3, [r3, #24]
 8008848:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800884c:	f043 0304 	orr.w	r3, r3, #4
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008854:	7dfb      	ldrb	r3, [r7, #23]
}
 8008856:	4618      	mov	r0, r3
 8008858:	3718      	adds	r7, #24
 800885a:	46bd      	mov	sp, r7
 800885c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008860:	b004      	add	sp, #16
 8008862:	4770      	bx	lr
 8008864:	803c3800 	.word	0x803c3800

08008868 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008872:	2300      	movs	r3, #0
 8008874:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	3301      	adds	r3, #1
 800887a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	4a13      	ldr	r2, [pc, #76]	; (80088cc <USB_FlushTxFifo+0x64>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d901      	bls.n	8008888 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008884:	2303      	movs	r3, #3
 8008886:	e01b      	b.n	80088c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	2b00      	cmp	r3, #0
 800888e:	daf2      	bge.n	8008876 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008890:	2300      	movs	r3, #0
 8008892:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	019b      	lsls	r3, r3, #6
 8008898:	f043 0220 	orr.w	r2, r3, #32
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	3301      	adds	r3, #1
 80088a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	4a08      	ldr	r2, [pc, #32]	; (80088cc <USB_FlushTxFifo+0x64>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d901      	bls.n	80088b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e006      	b.n	80088c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	f003 0320 	and.w	r3, r3, #32
 80088ba:	2b20      	cmp	r3, #32
 80088bc:	d0f0      	beq.n	80088a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3714      	adds	r7, #20
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr
 80088cc:	00030d40 	.word	0x00030d40

080088d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088d8:	2300      	movs	r3, #0
 80088da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	3301      	adds	r3, #1
 80088e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	4a11      	ldr	r2, [pc, #68]	; (800892c <USB_FlushRxFifo+0x5c>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d901      	bls.n	80088ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	e018      	b.n	8008920 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	daf2      	bge.n	80088dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80088f6:	2300      	movs	r3, #0
 80088f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2210      	movs	r2, #16
 80088fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	3301      	adds	r3, #1
 8008904:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	4a08      	ldr	r2, [pc, #32]	; (800892c <USB_FlushRxFifo+0x5c>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d901      	bls.n	8008912 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	e006      	b.n	8008920 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	f003 0310 	and.w	r3, r3, #16
 800891a:	2b10      	cmp	r3, #16
 800891c:	d0f0      	beq.n	8008900 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3714      	adds	r7, #20
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr
 800892c:	00030d40 	.word	0x00030d40

08008930 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	460b      	mov	r3, r1
 800893a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	78fb      	ldrb	r3, [r7, #3]
 800894a:	68f9      	ldr	r1, [r7, #12]
 800894c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008950:	4313      	orrs	r3, r2
 8008952:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3714      	adds	r7, #20
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr

08008962 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008962:	b480      	push	{r7}
 8008964:	b087      	sub	sp, #28
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	f003 0306 	and.w	r3, r3, #6
 800897a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d102      	bne.n	8008988 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008982:	2300      	movs	r3, #0
 8008984:	75fb      	strb	r3, [r7, #23]
 8008986:	e00a      	b.n	800899e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2b02      	cmp	r3, #2
 800898c:	d002      	beq.n	8008994 <USB_GetDevSpeed+0x32>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2b06      	cmp	r3, #6
 8008992:	d102      	bne.n	800899a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008994:	2302      	movs	r3, #2
 8008996:	75fb      	strb	r3, [r7, #23]
 8008998:	e001      	b.n	800899e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800899a:	230f      	movs	r3, #15
 800899c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800899e:	7dfb      	ldrb	r3, [r7, #23]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	371c      	adds	r7, #28
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	785b      	ldrb	r3, [r3, #1]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d13a      	bne.n	8008a3e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ce:	69da      	ldr	r2, [r3, #28]
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	f003 030f 	and.w	r3, r3, #15
 80089d8:	2101      	movs	r1, #1
 80089da:	fa01 f303 	lsl.w	r3, r1, r3
 80089de:	b29b      	uxth	r3, r3
 80089e0:	68f9      	ldr	r1, [r7, #12]
 80089e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089e6:	4313      	orrs	r3, r2
 80089e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	015a      	lsls	r2, r3, #5
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	4413      	add	r3, r2
 80089f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d155      	bne.n	8008aac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	015a      	lsls	r2, r3, #5
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	4413      	add	r3, r2
 8008a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	791b      	ldrb	r3, [r3, #4]
 8008a1a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a1c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	059b      	lsls	r3, r3, #22
 8008a22:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a24:	4313      	orrs	r3, r2
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	0151      	lsls	r1, r2, #5
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	440a      	add	r2, r1
 8008a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a3a:	6013      	str	r3, [r2, #0]
 8008a3c:	e036      	b.n	8008aac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a44:	69da      	ldr	r2, [r3, #28]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	f003 030f 	and.w	r3, r3, #15
 8008a4e:	2101      	movs	r1, #1
 8008a50:	fa01 f303 	lsl.w	r3, r1, r3
 8008a54:	041b      	lsls	r3, r3, #16
 8008a56:	68f9      	ldr	r1, [r7, #12]
 8008a58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	015a      	lsls	r2, r3, #5
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	4413      	add	r3, r2
 8008a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d11a      	bne.n	8008aac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	015a      	lsls	r2, r3, #5
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	791b      	ldrb	r3, [r3, #4]
 8008a90:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a92:	430b      	orrs	r3, r1
 8008a94:	4313      	orrs	r3, r2
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	0151      	lsls	r1, r2, #5
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	440a      	add	r2, r1
 8008a9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aaa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
	...

08008abc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	785b      	ldrb	r3, [r3, #1]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d161      	bne.n	8008b9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	015a      	lsls	r2, r3, #5
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	4413      	add	r3, r2
 8008ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008aea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008aee:	d11f      	bne.n	8008b30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	015a      	lsls	r2, r3, #5
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	4413      	add	r3, r2
 8008af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	0151      	lsls	r1, r2, #5
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	440a      	add	r2, r1
 8008b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	015a      	lsls	r2, r3, #5
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	0151      	lsls	r1, r2, #5
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	440a      	add	r2, r1
 8008b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	f003 030f 	and.w	r3, r3, #15
 8008b40:	2101      	movs	r1, #1
 8008b42:	fa01 f303 	lsl.w	r3, r1, r3
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	43db      	mvns	r3, r3
 8008b4a:	68f9      	ldr	r1, [r7, #12]
 8008b4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b50:	4013      	ands	r3, r2
 8008b52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b5a:	69da      	ldr	r2, [r3, #28]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	f003 030f 	and.w	r3, r3, #15
 8008b64:	2101      	movs	r1, #1
 8008b66:	fa01 f303 	lsl.w	r3, r1, r3
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	43db      	mvns	r3, r3
 8008b6e:	68f9      	ldr	r1, [r7, #12]
 8008b70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b74:	4013      	ands	r3, r2
 8008b76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	015a      	lsls	r2, r3, #5
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	4413      	add	r3, r2
 8008b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	0159      	lsls	r1, r3, #5
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	440b      	add	r3, r1
 8008b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b92:	4619      	mov	r1, r3
 8008b94:	4b35      	ldr	r3, [pc, #212]	; (8008c6c <USB_DeactivateEndpoint+0x1b0>)
 8008b96:	4013      	ands	r3, r2
 8008b98:	600b      	str	r3, [r1, #0]
 8008b9a:	e060      	b.n	8008c5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	015a      	lsls	r2, r3, #5
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bb2:	d11f      	bne.n	8008bf4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	0151      	lsls	r1, r2, #5
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	440a      	add	r2, r1
 8008bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008bd2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	015a      	lsls	r2, r3, #5
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	4413      	add	r3, r2
 8008bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68ba      	ldr	r2, [r7, #8]
 8008be4:	0151      	lsls	r1, r2, #5
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	440a      	add	r2, r1
 8008bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bf2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	f003 030f 	and.w	r3, r3, #15
 8008c04:	2101      	movs	r1, #1
 8008c06:	fa01 f303 	lsl.w	r3, r1, r3
 8008c0a:	041b      	lsls	r3, r3, #16
 8008c0c:	43db      	mvns	r3, r3
 8008c0e:	68f9      	ldr	r1, [r7, #12]
 8008c10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c14:	4013      	ands	r3, r2
 8008c16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c1e:	69da      	ldr	r2, [r3, #28]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	f003 030f 	and.w	r3, r3, #15
 8008c28:	2101      	movs	r1, #1
 8008c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8008c2e:	041b      	lsls	r3, r3, #16
 8008c30:	43db      	mvns	r3, r3
 8008c32:	68f9      	ldr	r1, [r7, #12]
 8008c34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c38:	4013      	ands	r3, r2
 8008c3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	015a      	lsls	r2, r3, #5
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	4413      	add	r3, r2
 8008c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	0159      	lsls	r1, r3, #5
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	440b      	add	r3, r1
 8008c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c56:	4619      	mov	r1, r3
 8008c58:	4b05      	ldr	r3, [pc, #20]	; (8008c70 <USB_DeactivateEndpoint+0x1b4>)
 8008c5a:	4013      	ands	r3, r2
 8008c5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3714      	adds	r7, #20
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	ec337800 	.word	0xec337800
 8008c70:	eff37800 	.word	0xeff37800

08008c74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b08a      	sub	sp, #40	; 0x28
 8008c78:	af02      	add	r7, sp, #8
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	785b      	ldrb	r3, [r3, #1]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	f040 815c 	bne.w	8008f4e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d132      	bne.n	8008d04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	015a      	lsls	r2, r3, #5
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	69ba      	ldr	r2, [r7, #24]
 8008cae:	0151      	lsls	r1, r2, #5
 8008cb0:	69fa      	ldr	r2, [r7, #28]
 8008cb2:	440a      	add	r2, r1
 8008cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008cbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008cc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	015a      	lsls	r2, r3, #5
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	69ba      	ldr	r2, [r7, #24]
 8008cd2:	0151      	lsls	r1, r2, #5
 8008cd4:	69fa      	ldr	r2, [r7, #28]
 8008cd6:	440a      	add	r2, r1
 8008cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ce0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	015a      	lsls	r2, r3, #5
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	4413      	add	r3, r2
 8008cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	69ba      	ldr	r2, [r7, #24]
 8008cf2:	0151      	lsls	r1, r2, #5
 8008cf4:	69fa      	ldr	r2, [r7, #28]
 8008cf6:	440a      	add	r2, r1
 8008cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cfc:	0cdb      	lsrs	r3, r3, #19
 8008cfe:	04db      	lsls	r3, r3, #19
 8008d00:	6113      	str	r3, [r2, #16]
 8008d02:	e074      	b.n	8008dee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	015a      	lsls	r2, r3, #5
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	0151      	lsls	r1, r2, #5
 8008d16:	69fa      	ldr	r2, [r7, #28]
 8008d18:	440a      	add	r2, r1
 8008d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d1e:	0cdb      	lsrs	r3, r3, #19
 8008d20:	04db      	lsls	r3, r3, #19
 8008d22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	015a      	lsls	r2, r3, #5
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	69ba      	ldr	r2, [r7, #24]
 8008d34:	0151      	lsls	r1, r2, #5
 8008d36:	69fa      	ldr	r2, [r7, #28]
 8008d38:	440a      	add	r2, r1
 8008d3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	015a      	lsls	r2, r3, #5
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	4413      	add	r3, r2
 8008d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d54:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	6999      	ldr	r1, [r3, #24]
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	440b      	add	r3, r1
 8008d60:	1e59      	subs	r1, r3, #1
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	fbb1 f3f3 	udiv	r3, r1, r3
 8008d6a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008d6c:	4b9d      	ldr	r3, [pc, #628]	; (8008fe4 <USB_EPStartXfer+0x370>)
 8008d6e:	400b      	ands	r3, r1
 8008d70:	69b9      	ldr	r1, [r7, #24]
 8008d72:	0148      	lsls	r0, r1, #5
 8008d74:	69f9      	ldr	r1, [r7, #28]
 8008d76:	4401      	add	r1, r0
 8008d78:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	015a      	lsls	r2, r3, #5
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	4413      	add	r3, r2
 8008d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d8c:	691a      	ldr	r2, [r3, #16]
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	699b      	ldr	r3, [r3, #24]
 8008d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d96:	69b9      	ldr	r1, [r7, #24]
 8008d98:	0148      	lsls	r0, r1, #5
 8008d9a:	69f9      	ldr	r1, [r7, #28]
 8008d9c:	4401      	add	r1, r0
 8008d9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008da2:	4313      	orrs	r3, r2
 8008da4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	791b      	ldrb	r3, [r3, #4]
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d11f      	bne.n	8008dee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	015a      	lsls	r2, r3, #5
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	4413      	add	r3, r2
 8008db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	69ba      	ldr	r2, [r7, #24]
 8008dbe:	0151      	lsls	r1, r2, #5
 8008dc0:	69fa      	ldr	r2, [r7, #28]
 8008dc2:	440a      	add	r2, r1
 8008dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dc8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008dcc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	015a      	lsls	r2, r3, #5
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	69ba      	ldr	r2, [r7, #24]
 8008dde:	0151      	lsls	r1, r2, #5
 8008de0:	69fa      	ldr	r2, [r7, #28]
 8008de2:	440a      	add	r2, r1
 8008de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008de8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008dec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008dee:	79fb      	ldrb	r3, [r7, #7]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d14b      	bne.n	8008e8c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	695b      	ldr	r3, [r3, #20]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d009      	beq.n	8008e10 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	015a      	lsls	r2, r3, #5
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	4413      	add	r3, r2
 8008e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e08:	461a      	mov	r2, r3
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	695b      	ldr	r3, [r3, #20]
 8008e0e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	791b      	ldrb	r3, [r3, #4]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d128      	bne.n	8008e6a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d110      	bne.n	8008e4a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	015a      	lsls	r2, r3, #5
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	4413      	add	r3, r2
 8008e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	69ba      	ldr	r2, [r7, #24]
 8008e38:	0151      	lsls	r1, r2, #5
 8008e3a:	69fa      	ldr	r2, [r7, #28]
 8008e3c:	440a      	add	r2, r1
 8008e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e46:	6013      	str	r3, [r2, #0]
 8008e48:	e00f      	b.n	8008e6a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	015a      	lsls	r2, r3, #5
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	4413      	add	r3, r2
 8008e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	69ba      	ldr	r2, [r7, #24]
 8008e5a:	0151      	lsls	r1, r2, #5
 8008e5c:	69fa      	ldr	r2, [r7, #28]
 8008e5e:	440a      	add	r2, r1
 8008e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e68:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	015a      	lsls	r2, r3, #5
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	4413      	add	r3, r2
 8008e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	69ba      	ldr	r2, [r7, #24]
 8008e7a:	0151      	lsls	r1, r2, #5
 8008e7c:	69fa      	ldr	r2, [r7, #28]
 8008e7e:	440a      	add	r2, r1
 8008e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e88:	6013      	str	r3, [r2, #0]
 8008e8a:	e133      	b.n	80090f4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	015a      	lsls	r2, r3, #5
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	4413      	add	r3, r2
 8008e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	69ba      	ldr	r2, [r7, #24]
 8008e9c:	0151      	lsls	r1, r2, #5
 8008e9e:	69fa      	ldr	r2, [r7, #28]
 8008ea0:	440a      	add	r2, r1
 8008ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ea6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008eaa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	791b      	ldrb	r3, [r3, #4]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d015      	beq.n	8008ee0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f000 811b 	beq.w	80090f4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	f003 030f 	and.w	r3, r3, #15
 8008ece:	2101      	movs	r1, #1
 8008ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ed4:	69f9      	ldr	r1, [r7, #28]
 8008ed6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008eda:	4313      	orrs	r3, r2
 8008edc:	634b      	str	r3, [r1, #52]	; 0x34
 8008ede:	e109      	b.n	80090f4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d110      	bne.n	8008f12 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	015a      	lsls	r2, r3, #5
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	69ba      	ldr	r2, [r7, #24]
 8008f00:	0151      	lsls	r1, r2, #5
 8008f02:	69fa      	ldr	r2, [r7, #28]
 8008f04:	440a      	add	r2, r1
 8008f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f0e:	6013      	str	r3, [r2, #0]
 8008f10:	e00f      	b.n	8008f32 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	69ba      	ldr	r2, [r7, #24]
 8008f22:	0151      	lsls	r1, r2, #5
 8008f24:	69fa      	ldr	r2, [r7, #28]
 8008f26:	440a      	add	r2, r1
 8008f28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f30:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	6919      	ldr	r1, [r3, #16]
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	781a      	ldrb	r2, [r3, #0]
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	b298      	uxth	r0, r3
 8008f40:	79fb      	ldrb	r3, [r7, #7]
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	4603      	mov	r3, r0
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f000 fade 	bl	8009508 <USB_WritePacket>
 8008f4c:	e0d2      	b.n	80090f4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	015a      	lsls	r2, r3, #5
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	4413      	add	r3, r2
 8008f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	69ba      	ldr	r2, [r7, #24]
 8008f5e:	0151      	lsls	r1, r2, #5
 8008f60:	69fa      	ldr	r2, [r7, #28]
 8008f62:	440a      	add	r2, r1
 8008f64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f68:	0cdb      	lsrs	r3, r3, #19
 8008f6a:	04db      	lsls	r3, r3, #19
 8008f6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	015a      	lsls	r2, r3, #5
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	4413      	add	r3, r2
 8008f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f7a:	691b      	ldr	r3, [r3, #16]
 8008f7c:	69ba      	ldr	r2, [r7, #24]
 8008f7e:	0151      	lsls	r1, r2, #5
 8008f80:	69fa      	ldr	r2, [r7, #28]
 8008f82:	440a      	add	r2, r1
 8008f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f90:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	699b      	ldr	r3, [r3, #24]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d126      	bne.n	8008fe8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	015a      	lsls	r2, r3, #5
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa6:	691a      	ldr	r2, [r3, #16]
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fb0:	69b9      	ldr	r1, [r7, #24]
 8008fb2:	0148      	lsls	r0, r1, #5
 8008fb4:	69f9      	ldr	r1, [r7, #28]
 8008fb6:	4401      	add	r1, r0
 8008fb8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	015a      	lsls	r2, r3, #5
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	69ba      	ldr	r2, [r7, #24]
 8008fd0:	0151      	lsls	r1, r2, #5
 8008fd2:	69fa      	ldr	r2, [r7, #28]
 8008fd4:	440a      	add	r2, r1
 8008fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fde:	6113      	str	r3, [r2, #16]
 8008fe0:	e03a      	b.n	8009058 <USB_EPStartXfer+0x3e4>
 8008fe2:	bf00      	nop
 8008fe4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	699a      	ldr	r2, [r3, #24]
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	1e5a      	subs	r2, r3, #1
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ffc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	8afa      	ldrh	r2, [r7, #22]
 8009004:	fb03 f202 	mul.w	r2, r3, r2
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	015a      	lsls	r2, r3, #5
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	4413      	add	r3, r2
 8009014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009018:	691a      	ldr	r2, [r3, #16]
 800901a:	8afb      	ldrh	r3, [r7, #22]
 800901c:	04d9      	lsls	r1, r3, #19
 800901e:	4b38      	ldr	r3, [pc, #224]	; (8009100 <USB_EPStartXfer+0x48c>)
 8009020:	400b      	ands	r3, r1
 8009022:	69b9      	ldr	r1, [r7, #24]
 8009024:	0148      	lsls	r0, r1, #5
 8009026:	69f9      	ldr	r1, [r7, #28]
 8009028:	4401      	add	r1, r0
 800902a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800902e:	4313      	orrs	r3, r2
 8009030:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	015a      	lsls	r2, r3, #5
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	4413      	add	r3, r2
 800903a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800903e:	691a      	ldr	r2, [r3, #16]
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	69db      	ldr	r3, [r3, #28]
 8009044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009048:	69b9      	ldr	r1, [r7, #24]
 800904a:	0148      	lsls	r0, r1, #5
 800904c:	69f9      	ldr	r1, [r7, #28]
 800904e:	4401      	add	r1, r0
 8009050:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009054:	4313      	orrs	r3, r2
 8009056:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009058:	79fb      	ldrb	r3, [r7, #7]
 800905a:	2b01      	cmp	r3, #1
 800905c:	d10d      	bne.n	800907a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d009      	beq.n	800907a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	6919      	ldr	r1, [r3, #16]
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	015a      	lsls	r2, r3, #5
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	4413      	add	r3, r2
 8009072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009076:	460a      	mov	r2, r1
 8009078:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	791b      	ldrb	r3, [r3, #4]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d128      	bne.n	80090d4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800908e:	2b00      	cmp	r3, #0
 8009090:	d110      	bne.n	80090b4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	015a      	lsls	r2, r3, #5
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	4413      	add	r3, r2
 800909a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	69ba      	ldr	r2, [r7, #24]
 80090a2:	0151      	lsls	r1, r2, #5
 80090a4:	69fa      	ldr	r2, [r7, #28]
 80090a6:	440a      	add	r2, r1
 80090a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80090b0:	6013      	str	r3, [r2, #0]
 80090b2:	e00f      	b.n	80090d4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	015a      	lsls	r2, r3, #5
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	69ba      	ldr	r2, [r7, #24]
 80090c4:	0151      	lsls	r1, r2, #5
 80090c6:	69fa      	ldr	r2, [r7, #28]
 80090c8:	440a      	add	r2, r1
 80090ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	015a      	lsls	r2, r3, #5
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	4413      	add	r3, r2
 80090dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	69ba      	ldr	r2, [r7, #24]
 80090e4:	0151      	lsls	r1, r2, #5
 80090e6:	69fa      	ldr	r2, [r7, #28]
 80090e8:	440a      	add	r2, r1
 80090ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80090f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3720      	adds	r7, #32
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	1ff80000 	.word	0x1ff80000

08009104 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009104:	b480      	push	{r7}
 8009106:	b087      	sub	sp, #28
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	4613      	mov	r3, r2
 8009110:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	785b      	ldrb	r3, [r3, #1]
 8009120:	2b01      	cmp	r3, #1
 8009122:	f040 80ce 	bne.w	80092c2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d132      	bne.n	8009194 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	015a      	lsls	r2, r3, #5
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	4413      	add	r3, r2
 8009136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	0151      	lsls	r1, r2, #5
 8009140:	697a      	ldr	r2, [r7, #20]
 8009142:	440a      	add	r2, r1
 8009144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009148:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800914c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009150:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	015a      	lsls	r2, r3, #5
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	4413      	add	r3, r2
 800915a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	693a      	ldr	r2, [r7, #16]
 8009162:	0151      	lsls	r1, r2, #5
 8009164:	697a      	ldr	r2, [r7, #20]
 8009166:	440a      	add	r2, r1
 8009168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800916c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009170:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	015a      	lsls	r2, r3, #5
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	4413      	add	r3, r2
 800917a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800917e:	691b      	ldr	r3, [r3, #16]
 8009180:	693a      	ldr	r2, [r7, #16]
 8009182:	0151      	lsls	r1, r2, #5
 8009184:	697a      	ldr	r2, [r7, #20]
 8009186:	440a      	add	r2, r1
 8009188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800918c:	0cdb      	lsrs	r3, r3, #19
 800918e:	04db      	lsls	r3, r3, #19
 8009190:	6113      	str	r3, [r2, #16]
 8009192:	e04e      	b.n	8009232 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	015a      	lsls	r2, r3, #5
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	4413      	add	r3, r2
 800919c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	0151      	lsls	r1, r2, #5
 80091a6:	697a      	ldr	r2, [r7, #20]
 80091a8:	440a      	add	r2, r1
 80091aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ae:	0cdb      	lsrs	r3, r3, #19
 80091b0:	04db      	lsls	r3, r3, #19
 80091b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	015a      	lsls	r2, r3, #5
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	4413      	add	r3, r2
 80091bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	0151      	lsls	r1, r2, #5
 80091c6:	697a      	ldr	r2, [r7, #20]
 80091c8:	440a      	add	r2, r1
 80091ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80091d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80091d6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	699a      	ldr	r2, [r3, #24]
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d903      	bls.n	80091ec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	68da      	ldr	r2, [r3, #12]
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	015a      	lsls	r2, r3, #5
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	4413      	add	r3, r2
 80091f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	693a      	ldr	r2, [r7, #16]
 80091fc:	0151      	lsls	r1, r2, #5
 80091fe:	697a      	ldr	r2, [r7, #20]
 8009200:	440a      	add	r2, r1
 8009202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009206:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800920a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	015a      	lsls	r2, r3, #5
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	4413      	add	r3, r2
 8009214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009218:	691a      	ldr	r2, [r3, #16]
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009222:	6939      	ldr	r1, [r7, #16]
 8009224:	0148      	lsls	r0, r1, #5
 8009226:	6979      	ldr	r1, [r7, #20]
 8009228:	4401      	add	r1, r0
 800922a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800922e:	4313      	orrs	r3, r2
 8009230:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009232:	79fb      	ldrb	r3, [r7, #7]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d11e      	bne.n	8009276 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	695b      	ldr	r3, [r3, #20]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d009      	beq.n	8009254 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	015a      	lsls	r2, r3, #5
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	4413      	add	r3, r2
 8009248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800924c:	461a      	mov	r2, r3
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	695b      	ldr	r3, [r3, #20]
 8009252:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	015a      	lsls	r2, r3, #5
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	4413      	add	r3, r2
 800925c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	693a      	ldr	r2, [r7, #16]
 8009264:	0151      	lsls	r1, r2, #5
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	440a      	add	r2, r1
 800926a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800926e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009272:	6013      	str	r3, [r2, #0]
 8009274:	e097      	b.n	80093a6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	015a      	lsls	r2, r3, #5
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	4413      	add	r3, r2
 800927e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	693a      	ldr	r2, [r7, #16]
 8009286:	0151      	lsls	r1, r2, #5
 8009288:	697a      	ldr	r2, [r7, #20]
 800928a:	440a      	add	r2, r1
 800928c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009290:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009294:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	2b00      	cmp	r3, #0
 800929c:	f000 8083 	beq.w	80093a6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	f003 030f 	and.w	r3, r3, #15
 80092b0:	2101      	movs	r1, #1
 80092b2:	fa01 f303 	lsl.w	r3, r1, r3
 80092b6:	6979      	ldr	r1, [r7, #20]
 80092b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092bc:	4313      	orrs	r3, r2
 80092be:	634b      	str	r3, [r1, #52]	; 0x34
 80092c0:	e071      	b.n	80093a6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	015a      	lsls	r2, r3, #5
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	4413      	add	r3, r2
 80092ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	693a      	ldr	r2, [r7, #16]
 80092d2:	0151      	lsls	r1, r2, #5
 80092d4:	697a      	ldr	r2, [r7, #20]
 80092d6:	440a      	add	r2, r1
 80092d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092dc:	0cdb      	lsrs	r3, r3, #19
 80092de:	04db      	lsls	r3, r3, #19
 80092e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	015a      	lsls	r2, r3, #5
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	4413      	add	r3, r2
 80092ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	693a      	ldr	r2, [r7, #16]
 80092f2:	0151      	lsls	r1, r2, #5
 80092f4:	697a      	ldr	r2, [r7, #20]
 80092f6:	440a      	add	r2, r1
 80092f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009300:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009304:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d003      	beq.n	8009316 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	68da      	ldr	r2, [r3, #12]
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	68da      	ldr	r2, [r3, #12]
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	015a      	lsls	r2, r3, #5
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	4413      	add	r3, r2
 8009326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	693a      	ldr	r2, [r7, #16]
 800932e:	0151      	lsls	r1, r2, #5
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	440a      	add	r2, r1
 8009334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009338:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800933c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	015a      	lsls	r2, r3, #5
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	4413      	add	r3, r2
 8009346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800934a:	691a      	ldr	r2, [r3, #16]
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	69db      	ldr	r3, [r3, #28]
 8009350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009354:	6939      	ldr	r1, [r7, #16]
 8009356:	0148      	lsls	r0, r1, #5
 8009358:	6979      	ldr	r1, [r7, #20]
 800935a:	4401      	add	r1, r0
 800935c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009360:	4313      	orrs	r3, r2
 8009362:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009364:	79fb      	ldrb	r3, [r7, #7]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d10d      	bne.n	8009386 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d009      	beq.n	8009386 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	6919      	ldr	r1, [r3, #16]
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	015a      	lsls	r2, r3, #5
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	4413      	add	r3, r2
 800937e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009382:	460a      	mov	r2, r1
 8009384:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	015a      	lsls	r2, r3, #5
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	4413      	add	r3, r2
 800938e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	693a      	ldr	r2, [r7, #16]
 8009396:	0151      	lsls	r1, r2, #5
 8009398:	697a      	ldr	r2, [r7, #20]
 800939a:	440a      	add	r2, r1
 800939c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80093a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	371c      	adds	r7, #28
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b087      	sub	sp, #28
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80093be:	2300      	movs	r3, #0
 80093c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80093c2:	2300      	movs	r3, #0
 80093c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	785b      	ldrb	r3, [r3, #1]
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d14a      	bne.n	8009468 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093ea:	f040 8086 	bne.w	80094fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	015a      	lsls	r2, r3, #5
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	4413      	add	r3, r2
 80093f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	683a      	ldr	r2, [r7, #0]
 8009400:	7812      	ldrb	r2, [r2, #0]
 8009402:	0151      	lsls	r1, r2, #5
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	440a      	add	r2, r1
 8009408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800940c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009410:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	015a      	lsls	r2, r3, #5
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	4413      	add	r3, r2
 800941c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	7812      	ldrb	r2, [r2, #0]
 8009426:	0151      	lsls	r1, r2, #5
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	440a      	add	r2, r1
 800942c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009430:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009434:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	3301      	adds	r3, #1
 800943a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009442:	4293      	cmp	r3, r2
 8009444:	d902      	bls.n	800944c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	75fb      	strb	r3, [r7, #23]
          break;
 800944a:	e056      	b.n	80094fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	015a      	lsls	r2, r3, #5
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	4413      	add	r3, r2
 8009456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009460:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009464:	d0e7      	beq.n	8009436 <USB_EPStopXfer+0x82>
 8009466:	e048      	b.n	80094fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	015a      	lsls	r2, r3, #5
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	4413      	add	r3, r2
 8009472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800947c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009480:	d13b      	bne.n	80094fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	015a      	lsls	r2, r3, #5
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	4413      	add	r3, r2
 800948c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	683a      	ldr	r2, [r7, #0]
 8009494:	7812      	ldrb	r2, [r2, #0]
 8009496:	0151      	lsls	r1, r2, #5
 8009498:	693a      	ldr	r2, [r7, #16]
 800949a:	440a      	add	r2, r1
 800949c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80094a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	015a      	lsls	r2, r3, #5
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	4413      	add	r3, r2
 80094b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	683a      	ldr	r2, [r7, #0]
 80094b8:	7812      	ldrb	r2, [r2, #0]
 80094ba:	0151      	lsls	r1, r2, #5
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	440a      	add	r2, r1
 80094c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	3301      	adds	r3, #1
 80094ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d902      	bls.n	80094e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	75fb      	strb	r3, [r7, #23]
          break;
 80094de:	e00c      	b.n	80094fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	015a      	lsls	r2, r3, #5
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094f8:	d0e7      	beq.n	80094ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80094fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	371c      	adds	r7, #28
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009508:	b480      	push	{r7}
 800950a:	b089      	sub	sp, #36	; 0x24
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	4611      	mov	r1, r2
 8009514:	461a      	mov	r2, r3
 8009516:	460b      	mov	r3, r1
 8009518:	71fb      	strb	r3, [r7, #7]
 800951a:	4613      	mov	r3, r2
 800951c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009526:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800952a:	2b00      	cmp	r3, #0
 800952c:	d123      	bne.n	8009576 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800952e:	88bb      	ldrh	r3, [r7, #4]
 8009530:	3303      	adds	r3, #3
 8009532:	089b      	lsrs	r3, r3, #2
 8009534:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009536:	2300      	movs	r3, #0
 8009538:	61bb      	str	r3, [r7, #24]
 800953a:	e018      	b.n	800956e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800953c:	79fb      	ldrb	r3, [r7, #7]
 800953e:	031a      	lsls	r2, r3, #12
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	4413      	add	r3, r2
 8009544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009548:	461a      	mov	r2, r3
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	3301      	adds	r3, #1
 8009554:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	3301      	adds	r3, #1
 800955a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	3301      	adds	r3, #1
 8009560:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	3301      	adds	r3, #1
 8009566:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	3301      	adds	r3, #1
 800956c:	61bb      	str	r3, [r7, #24]
 800956e:	69ba      	ldr	r2, [r7, #24]
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	429a      	cmp	r2, r3
 8009574:	d3e2      	bcc.n	800953c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3724      	adds	r7, #36	; 0x24
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009584:	b480      	push	{r7}
 8009586:	b08b      	sub	sp, #44	; 0x2c
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	4613      	mov	r3, r2
 8009590:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800959a:	88fb      	ldrh	r3, [r7, #6]
 800959c:	089b      	lsrs	r3, r3, #2
 800959e:	b29b      	uxth	r3, r3
 80095a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80095a2:	88fb      	ldrh	r3, [r7, #6]
 80095a4:	f003 0303 	and.w	r3, r3, #3
 80095a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80095aa:	2300      	movs	r3, #0
 80095ac:	623b      	str	r3, [r7, #32]
 80095ae:	e014      	b.n	80095da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80095bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095be:	3301      	adds	r3, #1
 80095c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80095c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c4:	3301      	adds	r3, #1
 80095c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80095c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ca:	3301      	adds	r3, #1
 80095cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80095ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d0:	3301      	adds	r3, #1
 80095d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80095d4:	6a3b      	ldr	r3, [r7, #32]
 80095d6:	3301      	adds	r3, #1
 80095d8:	623b      	str	r3, [r7, #32]
 80095da:	6a3a      	ldr	r2, [r7, #32]
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d3e6      	bcc.n	80095b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80095e2:	8bfb      	ldrh	r3, [r7, #30]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d01e      	beq.n	8009626 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80095e8:	2300      	movs	r3, #0
 80095ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095f2:	461a      	mov	r2, r3
 80095f4:	f107 0310 	add.w	r3, r7, #16
 80095f8:	6812      	ldr	r2, [r2, #0]
 80095fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80095fc:	693a      	ldr	r2, [r7, #16]
 80095fe:	6a3b      	ldr	r3, [r7, #32]
 8009600:	b2db      	uxtb	r3, r3
 8009602:	00db      	lsls	r3, r3, #3
 8009604:	fa22 f303 	lsr.w	r3, r2, r3
 8009608:	b2da      	uxtb	r2, r3
 800960a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960c:	701a      	strb	r2, [r3, #0]
      i++;
 800960e:	6a3b      	ldr	r3, [r7, #32]
 8009610:	3301      	adds	r3, #1
 8009612:	623b      	str	r3, [r7, #32]
      pDest++;
 8009614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009616:	3301      	adds	r3, #1
 8009618:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800961a:	8bfb      	ldrh	r3, [r7, #30]
 800961c:	3b01      	subs	r3, #1
 800961e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009620:	8bfb      	ldrh	r3, [r7, #30]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1ea      	bne.n	80095fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009628:	4618      	mov	r0, r3
 800962a:	372c      	adds	r7, #44	; 0x2c
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009634:	b480      	push	{r7}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	785b      	ldrb	r3, [r3, #1]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d12c      	bne.n	80096aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	015a      	lsls	r2, r3, #5
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	4413      	add	r3, r2
 8009658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	db12      	blt.n	8009688 <USB_EPSetStall+0x54>
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00f      	beq.n	8009688 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	015a      	lsls	r2, r3, #5
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	4413      	add	r3, r2
 8009670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	0151      	lsls	r1, r2, #5
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	440a      	add	r2, r1
 800967e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009682:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009686:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	015a      	lsls	r2, r3, #5
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	4413      	add	r3, r2
 8009690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68ba      	ldr	r2, [r7, #8]
 8009698:	0151      	lsls	r1, r2, #5
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	440a      	add	r2, r1
 800969e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80096a6:	6013      	str	r3, [r2, #0]
 80096a8:	e02b      	b.n	8009702 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	015a      	lsls	r2, r3, #5
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	4413      	add	r3, r2
 80096b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	db12      	blt.n	80096e2 <USB_EPSetStall+0xae>
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00f      	beq.n	80096e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	015a      	lsls	r2, r3, #5
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	4413      	add	r3, r2
 80096ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68ba      	ldr	r2, [r7, #8]
 80096d2:	0151      	lsls	r1, r2, #5
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	440a      	add	r2, r1
 80096d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80096e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	015a      	lsls	r2, r3, #5
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	4413      	add	r3, r2
 80096ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	68ba      	ldr	r2, [r7, #8]
 80096f2:	0151      	lsls	r1, r2, #5
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	440a      	add	r2, r1
 80096f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009700:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009702:	2300      	movs	r3, #0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3714      	adds	r7, #20
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009710:	b480      	push	{r7}
 8009712:	b085      	sub	sp, #20
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	785b      	ldrb	r3, [r3, #1]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d128      	bne.n	800977e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	015a      	lsls	r2, r3, #5
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	4413      	add	r3, r2
 8009734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	68ba      	ldr	r2, [r7, #8]
 800973c:	0151      	lsls	r1, r2, #5
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	440a      	add	r2, r1
 8009742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009746:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800974a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	791b      	ldrb	r3, [r3, #4]
 8009750:	2b03      	cmp	r3, #3
 8009752:	d003      	beq.n	800975c <USB_EPClearStall+0x4c>
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	791b      	ldrb	r3, [r3, #4]
 8009758:	2b02      	cmp	r3, #2
 800975a:	d138      	bne.n	80097ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	015a      	lsls	r2, r3, #5
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	4413      	add	r3, r2
 8009764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	0151      	lsls	r1, r2, #5
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	440a      	add	r2, r1
 8009772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800977a:	6013      	str	r3, [r2, #0]
 800977c:	e027      	b.n	80097ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	015a      	lsls	r2, r3, #5
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	4413      	add	r3, r2
 8009786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	68ba      	ldr	r2, [r7, #8]
 800978e:	0151      	lsls	r1, r2, #5
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	440a      	add	r2, r1
 8009794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009798:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800979c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	791b      	ldrb	r3, [r3, #4]
 80097a2:	2b03      	cmp	r3, #3
 80097a4:	d003      	beq.n	80097ae <USB_EPClearStall+0x9e>
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	791b      	ldrb	r3, [r3, #4]
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d10f      	bne.n	80097ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	015a      	lsls	r2, r3, #5
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	4413      	add	r3, r2
 80097b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68ba      	ldr	r2, [r7, #8]
 80097be:	0151      	lsls	r1, r2, #5
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	440a      	add	r2, r1
 80097c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80097dc:	b480      	push	{r7}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	460b      	mov	r3, r1
 80097e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80097fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	78fb      	ldrb	r3, [r7, #3]
 800980a:	011b      	lsls	r3, r3, #4
 800980c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009810:	68f9      	ldr	r1, [r7, #12]
 8009812:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009816:	4313      	orrs	r3, r2
 8009818:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3714      	adds	r7, #20
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009842:	f023 0303 	bic.w	r3, r3, #3
 8009846:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	68fa      	ldr	r2, [r7, #12]
 8009852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009856:	f023 0302 	bic.w	r3, r3, #2
 800985a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3714      	adds	r7, #20
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr

0800986a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800986a:	b480      	push	{r7}
 800986c:	b085      	sub	sp, #20
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009884:	f023 0303 	bic.w	r3, r3, #3
 8009888:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009898:	f043 0302 	orr.w	r3, r3, #2
 800989c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3714      	adds	r7, #20
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	695b      	ldr	r3, [r3, #20]
 80098b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	699b      	ldr	r3, [r3, #24]
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	4013      	ands	r3, r2
 80098c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80098c4:	68fb      	ldr	r3, [r7, #12]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3714      	adds	r7, #20
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80098d2:	b480      	push	{r7}
 80098d4:	b085      	sub	sp, #20
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098e4:	699b      	ldr	r3, [r3, #24]
 80098e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ee:	69db      	ldr	r3, [r3, #28]
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	4013      	ands	r3, r2
 80098f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	0c1b      	lsrs	r3, r3, #16
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009906:	b480      	push	{r7}
 8009908:	b085      	sub	sp, #20
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009918:	699b      	ldr	r3, [r3, #24]
 800991a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009922:	69db      	ldr	r3, [r3, #28]
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	4013      	ands	r3, r2
 8009928:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	b29b      	uxth	r3, r3
}
 800992e:	4618      	mov	r0, r3
 8009930:	3714      	adds	r7, #20
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr

0800993a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800993a:	b480      	push	{r7}
 800993c:	b085      	sub	sp, #20
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
 8009942:	460b      	mov	r3, r1
 8009944:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800994a:	78fb      	ldrb	r3, [r7, #3]
 800994c:	015a      	lsls	r2, r3, #5
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	4413      	add	r3, r2
 8009952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009960:	695b      	ldr	r3, [r3, #20]
 8009962:	68ba      	ldr	r2, [r7, #8]
 8009964:	4013      	ands	r3, r2
 8009966:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009968:	68bb      	ldr	r3, [r7, #8]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3714      	adds	r7, #20
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr

08009976 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009976:	b480      	push	{r7}
 8009978:	b087      	sub	sp, #28
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	460b      	mov	r3, r1
 8009980:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009998:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800999a:	78fb      	ldrb	r3, [r7, #3]
 800999c:	f003 030f 	and.w	r3, r3, #15
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	fa22 f303 	lsr.w	r3, r2, r3
 80099a6:	01db      	lsls	r3, r3, #7
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	693a      	ldr	r2, [r7, #16]
 80099ac:	4313      	orrs	r3, r2
 80099ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80099b0:	78fb      	ldrb	r3, [r7, #3]
 80099b2:	015a      	lsls	r2, r3, #5
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	4413      	add	r3, r2
 80099b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	693a      	ldr	r2, [r7, #16]
 80099c0:	4013      	ands	r3, r2
 80099c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80099c4:	68bb      	ldr	r3, [r7, #8]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	371c      	adds	r7, #28
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b083      	sub	sp, #12
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	695b      	ldr	r3, [r3, #20]
 80099de:	f003 0301 	and.w	r3, r3, #1
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	370c      	adds	r7, #12
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr

080099ee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80099ee:	b480      	push	{r7}
 80099f0:	b085      	sub	sp, #20
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a08:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009a0c:	f023 0307 	bic.w	r3, r3, #7
 8009a10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b087      	sub	sp, #28
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	607a      	str	r2, [r7, #4]
 8009a40:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	333c      	adds	r3, #60	; 0x3c
 8009a4a:	3304      	adds	r3, #4
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	4a26      	ldr	r2, [pc, #152]	; (8009aec <USB_EP0_OutStart+0xb8>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d90a      	bls.n	8009a6e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a68:	d101      	bne.n	8009a6e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	e037      	b.n	8009ade <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a74:	461a      	mov	r2, r3
 8009a76:	2300      	movs	r3, #0
 8009a78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a80:	691b      	ldr	r3, [r3, #16]
 8009a82:	697a      	ldr	r2, [r7, #20]
 8009a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	697a      	ldr	r2, [r7, #20]
 8009a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a9c:	f043 0318 	orr.w	r3, r3, #24
 8009aa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ab0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009ab4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009ab6:	7afb      	ldrb	r3, [r7, #11]
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d10f      	bne.n	8009adc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	697a      	ldr	r2, [r7, #20]
 8009ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ad6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009ada:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	371c      	adds	r7, #28
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	4f54300a 	.word	0x4f54300a

08009af0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b085      	sub	sp, #20
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009af8:	2300      	movs	r3, #0
 8009afa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	3301      	adds	r3, #1
 8009b00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	4a13      	ldr	r2, [pc, #76]	; (8009b54 <USB_CoreReset+0x64>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d901      	bls.n	8009b0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	e01b      	b.n	8009b46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	daf2      	bge.n	8009afc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009b16:	2300      	movs	r3, #0
 8009b18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	691b      	ldr	r3, [r3, #16]
 8009b1e:	f043 0201 	orr.w	r2, r3, #1
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	4a09      	ldr	r2, [pc, #36]	; (8009b54 <USB_CoreReset+0x64>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d901      	bls.n	8009b38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009b34:	2303      	movs	r3, #3
 8009b36:	e006      	b.n	8009b46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	f003 0301 	and.w	r3, r3, #1
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d0f0      	beq.n	8009b26 <USB_CoreReset+0x36>

  return HAL_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3714      	adds	r7, #20
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr
 8009b52:	bf00      	nop
 8009b54:	00030d40 	.word	0x00030d40

08009b58 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	460b      	mov	r3, r1
 8009b62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009b64:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009b68:	f005 fe7e 	bl	800f868 <USBD_static_malloc>
 8009b6c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d109      	bne.n	8009b88 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	32b0      	adds	r2, #176	; 0xb0
 8009b7e:	2100      	movs	r1, #0
 8009b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009b84:	2302      	movs	r3, #2
 8009b86:	e0d4      	b.n	8009d32 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009b88:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	f005 ff0a 	bl	800f9a8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	32b0      	adds	r2, #176	; 0xb0
 8009b9e:	68f9      	ldr	r1, [r7, #12]
 8009ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	32b0      	adds	r2, #176	; 0xb0
 8009bae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	7c1b      	ldrb	r3, [r3, #16]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d138      	bne.n	8009c32 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009bc0:	4b5e      	ldr	r3, [pc, #376]	; (8009d3c <USBD_CDC_Init+0x1e4>)
 8009bc2:	7819      	ldrb	r1, [r3, #0]
 8009bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bc8:	2202      	movs	r2, #2
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f005 fd29 	bl	800f622 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009bd0:	4b5a      	ldr	r3, [pc, #360]	; (8009d3c <USBD_CDC_Init+0x1e4>)
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	f003 020f 	and.w	r2, r3, #15
 8009bd8:	6879      	ldr	r1, [r7, #4]
 8009bda:	4613      	mov	r3, r2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	4413      	add	r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	440b      	add	r3, r1
 8009be4:	3324      	adds	r3, #36	; 0x24
 8009be6:	2201      	movs	r2, #1
 8009be8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009bea:	4b55      	ldr	r3, [pc, #340]	; (8009d40 <USBD_CDC_Init+0x1e8>)
 8009bec:	7819      	ldrb	r1, [r3, #0]
 8009bee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bf2:	2202      	movs	r2, #2
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f005 fd14 	bl	800f622 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009bfa:	4b51      	ldr	r3, [pc, #324]	; (8009d40 <USBD_CDC_Init+0x1e8>)
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	f003 020f 	and.w	r2, r3, #15
 8009c02:	6879      	ldr	r1, [r7, #4]
 8009c04:	4613      	mov	r3, r2
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	4413      	add	r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	440b      	add	r3, r1
 8009c0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c12:	2201      	movs	r2, #1
 8009c14:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009c16:	4b4b      	ldr	r3, [pc, #300]	; (8009d44 <USBD_CDC_Init+0x1ec>)
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	f003 020f 	and.w	r2, r3, #15
 8009c1e:	6879      	ldr	r1, [r7, #4]
 8009c20:	4613      	mov	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4413      	add	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	440b      	add	r3, r1
 8009c2a:	3326      	adds	r3, #38	; 0x26
 8009c2c:	2210      	movs	r2, #16
 8009c2e:	801a      	strh	r2, [r3, #0]
 8009c30:	e035      	b.n	8009c9e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009c32:	4b42      	ldr	r3, [pc, #264]	; (8009d3c <USBD_CDC_Init+0x1e4>)
 8009c34:	7819      	ldrb	r1, [r3, #0]
 8009c36:	2340      	movs	r3, #64	; 0x40
 8009c38:	2202      	movs	r2, #2
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f005 fcf1 	bl	800f622 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009c40:	4b3e      	ldr	r3, [pc, #248]	; (8009d3c <USBD_CDC_Init+0x1e4>)
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	f003 020f 	and.w	r2, r3, #15
 8009c48:	6879      	ldr	r1, [r7, #4]
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	4413      	add	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	440b      	add	r3, r1
 8009c54:	3324      	adds	r3, #36	; 0x24
 8009c56:	2201      	movs	r2, #1
 8009c58:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009c5a:	4b39      	ldr	r3, [pc, #228]	; (8009d40 <USBD_CDC_Init+0x1e8>)
 8009c5c:	7819      	ldrb	r1, [r3, #0]
 8009c5e:	2340      	movs	r3, #64	; 0x40
 8009c60:	2202      	movs	r2, #2
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f005 fcdd 	bl	800f622 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c68:	4b35      	ldr	r3, [pc, #212]	; (8009d40 <USBD_CDC_Init+0x1e8>)
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	f003 020f 	and.w	r2, r3, #15
 8009c70:	6879      	ldr	r1, [r7, #4]
 8009c72:	4613      	mov	r3, r2
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4413      	add	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	440b      	add	r3, r1
 8009c7c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c80:	2201      	movs	r2, #1
 8009c82:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009c84:	4b2f      	ldr	r3, [pc, #188]	; (8009d44 <USBD_CDC_Init+0x1ec>)
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	f003 020f 	and.w	r2, r3, #15
 8009c8c:	6879      	ldr	r1, [r7, #4]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4413      	add	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	440b      	add	r3, r1
 8009c98:	3326      	adds	r3, #38	; 0x26
 8009c9a:	2210      	movs	r2, #16
 8009c9c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c9e:	4b29      	ldr	r3, [pc, #164]	; (8009d44 <USBD_CDC_Init+0x1ec>)
 8009ca0:	7819      	ldrb	r1, [r3, #0]
 8009ca2:	2308      	movs	r3, #8
 8009ca4:	2203      	movs	r2, #3
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f005 fcbb 	bl	800f622 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009cac:	4b25      	ldr	r3, [pc, #148]	; (8009d44 <USBD_CDC_Init+0x1ec>)
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	f003 020f 	and.w	r2, r3, #15
 8009cb4:	6879      	ldr	r1, [r7, #4]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	4413      	add	r3, r2
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	440b      	add	r3, r1
 8009cc0:	3324      	adds	r3, #36	; 0x24
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	33b0      	adds	r3, #176	; 0xb0
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d101      	bne.n	8009d00 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	e018      	b.n	8009d32 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	7c1b      	ldrb	r3, [r3, #16]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d10a      	bne.n	8009d1e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d08:	4b0d      	ldr	r3, [pc, #52]	; (8009d40 <USBD_CDC_Init+0x1e8>)
 8009d0a:	7819      	ldrb	r1, [r3, #0]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f005 fd72 	bl	800f800 <USBD_LL_PrepareReceive>
 8009d1c:	e008      	b.n	8009d30 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d1e:	4b08      	ldr	r3, [pc, #32]	; (8009d40 <USBD_CDC_Init+0x1e8>)
 8009d20:	7819      	ldrb	r1, [r3, #0]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d28:	2340      	movs	r3, #64	; 0x40
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f005 fd68 	bl	800f800 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	200000c7 	.word	0x200000c7
 8009d40:	200000c8 	.word	0x200000c8
 8009d44:	200000c9 	.word	0x200000c9

08009d48 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	460b      	mov	r3, r1
 8009d52:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009d54:	4b3a      	ldr	r3, [pc, #232]	; (8009e40 <USBD_CDC_DeInit+0xf8>)
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	4619      	mov	r1, r3
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f005 fc87 	bl	800f66e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009d60:	4b37      	ldr	r3, [pc, #220]	; (8009e40 <USBD_CDC_DeInit+0xf8>)
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	f003 020f 	and.w	r2, r3, #15
 8009d68:	6879      	ldr	r1, [r7, #4]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	4413      	add	r3, r2
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	440b      	add	r3, r1
 8009d74:	3324      	adds	r3, #36	; 0x24
 8009d76:	2200      	movs	r2, #0
 8009d78:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009d7a:	4b32      	ldr	r3, [pc, #200]	; (8009e44 <USBD_CDC_DeInit+0xfc>)
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	4619      	mov	r1, r3
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f005 fc74 	bl	800f66e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009d86:	4b2f      	ldr	r3, [pc, #188]	; (8009e44 <USBD_CDC_DeInit+0xfc>)
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	f003 020f 	and.w	r2, r3, #15
 8009d8e:	6879      	ldr	r1, [r7, #4]
 8009d90:	4613      	mov	r3, r2
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4413      	add	r3, r2
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	440b      	add	r3, r1
 8009d9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d9e:	2200      	movs	r2, #0
 8009da0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009da2:	4b29      	ldr	r3, [pc, #164]	; (8009e48 <USBD_CDC_DeInit+0x100>)
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	4619      	mov	r1, r3
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f005 fc60 	bl	800f66e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009dae:	4b26      	ldr	r3, [pc, #152]	; (8009e48 <USBD_CDC_DeInit+0x100>)
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	f003 020f 	and.w	r2, r3, #15
 8009db6:	6879      	ldr	r1, [r7, #4]
 8009db8:	4613      	mov	r3, r2
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	4413      	add	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	440b      	add	r3, r1
 8009dc2:	3324      	adds	r3, #36	; 0x24
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009dc8:	4b1f      	ldr	r3, [pc, #124]	; (8009e48 <USBD_CDC_DeInit+0x100>)
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	f003 020f 	and.w	r2, r3, #15
 8009dd0:	6879      	ldr	r1, [r7, #4]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4413      	add	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	440b      	add	r3, r1
 8009ddc:	3326      	adds	r3, #38	; 0x26
 8009dde:	2200      	movs	r2, #0
 8009de0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	32b0      	adds	r2, #176	; 0xb0
 8009dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d01f      	beq.n	8009e34 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	33b0      	adds	r3, #176	; 0xb0
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	4413      	add	r3, r2
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	32b0      	adds	r2, #176	; 0xb0
 8009e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e16:	4618      	mov	r0, r3
 8009e18:	f005 fd34 	bl	800f884 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	32b0      	adds	r2, #176	; 0xb0
 8009e26:	2100      	movs	r1, #0
 8009e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3708      	adds	r7, #8
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	200000c7 	.word	0x200000c7
 8009e44:	200000c8 	.word	0x200000c8
 8009e48:	200000c9 	.word	0x200000c9

08009e4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b086      	sub	sp, #24
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	32b0      	adds	r2, #176	; 0xb0
 8009e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e64:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009e66:	2300      	movs	r3, #0
 8009e68:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d101      	bne.n	8009e7c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009e78:	2303      	movs	r3, #3
 8009e7a:	e0bf      	b.n	8009ffc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d050      	beq.n	8009f2a <USBD_CDC_Setup+0xde>
 8009e88:	2b20      	cmp	r3, #32
 8009e8a:	f040 80af 	bne.w	8009fec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	88db      	ldrh	r3, [r3, #6]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d03a      	beq.n	8009f0c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	b25b      	sxtb	r3, r3
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	da1b      	bge.n	8009ed8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	33b0      	adds	r3, #176	; 0xb0
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	4413      	add	r3, r2
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	683a      	ldr	r2, [r7, #0]
 8009eb4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009eb6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009eb8:	683a      	ldr	r2, [r7, #0]
 8009eba:	88d2      	ldrh	r2, [r2, #6]
 8009ebc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	88db      	ldrh	r3, [r3, #6]
 8009ec2:	2b07      	cmp	r3, #7
 8009ec4:	bf28      	it	cs
 8009ec6:	2307      	movcs	r3, #7
 8009ec8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	89fa      	ldrh	r2, [r7, #14]
 8009ece:	4619      	mov	r1, r3
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f001 fd89 	bl	800b9e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009ed6:	e090      	b.n	8009ffa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	785a      	ldrb	r2, [r3, #1]
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	88db      	ldrh	r3, [r3, #6]
 8009ee6:	2b3f      	cmp	r3, #63	; 0x3f
 8009ee8:	d803      	bhi.n	8009ef2 <USBD_CDC_Setup+0xa6>
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	88db      	ldrh	r3, [r3, #6]
 8009eee:	b2da      	uxtb	r2, r3
 8009ef0:	e000      	b.n	8009ef4 <USBD_CDC_Setup+0xa8>
 8009ef2:	2240      	movs	r2, #64	; 0x40
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009efa:	6939      	ldr	r1, [r7, #16]
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009f02:	461a      	mov	r2, r3
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f001 fd9b 	bl	800ba40 <USBD_CtlPrepareRx>
      break;
 8009f0a:	e076      	b.n	8009ffa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	33b0      	adds	r3, #176	; 0xb0
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	4413      	add	r3, r2
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	683a      	ldr	r2, [r7, #0]
 8009f20:	7850      	ldrb	r0, [r2, #1]
 8009f22:	2200      	movs	r2, #0
 8009f24:	6839      	ldr	r1, [r7, #0]
 8009f26:	4798      	blx	r3
      break;
 8009f28:	e067      	b.n	8009ffa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	785b      	ldrb	r3, [r3, #1]
 8009f2e:	2b0b      	cmp	r3, #11
 8009f30:	d851      	bhi.n	8009fd6 <USBD_CDC_Setup+0x18a>
 8009f32:	a201      	add	r2, pc, #4	; (adr r2, 8009f38 <USBD_CDC_Setup+0xec>)
 8009f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f38:	08009f69 	.word	0x08009f69
 8009f3c:	08009fe5 	.word	0x08009fe5
 8009f40:	08009fd7 	.word	0x08009fd7
 8009f44:	08009fd7 	.word	0x08009fd7
 8009f48:	08009fd7 	.word	0x08009fd7
 8009f4c:	08009fd7 	.word	0x08009fd7
 8009f50:	08009fd7 	.word	0x08009fd7
 8009f54:	08009fd7 	.word	0x08009fd7
 8009f58:	08009fd7 	.word	0x08009fd7
 8009f5c:	08009fd7 	.word	0x08009fd7
 8009f60:	08009f93 	.word	0x08009f93
 8009f64:	08009fbd 	.word	0x08009fbd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	2b03      	cmp	r3, #3
 8009f72:	d107      	bne.n	8009f84 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009f74:	f107 030a 	add.w	r3, r7, #10
 8009f78:	2202      	movs	r2, #2
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f001 fd33 	bl	800b9e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f82:	e032      	b.n	8009fea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f84:	6839      	ldr	r1, [r7, #0]
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f001 fcbd 	bl	800b906 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	75fb      	strb	r3, [r7, #23]
          break;
 8009f90:	e02b      	b.n	8009fea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	2b03      	cmp	r3, #3
 8009f9c:	d107      	bne.n	8009fae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009f9e:	f107 030d 	add.w	r3, r7, #13
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f001 fd1e 	bl	800b9e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009fac:	e01d      	b.n	8009fea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f001 fca8 	bl	800b906 <USBD_CtlError>
            ret = USBD_FAIL;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	75fb      	strb	r3, [r7, #23]
          break;
 8009fba:	e016      	b.n	8009fea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	2b03      	cmp	r3, #3
 8009fc6:	d00f      	beq.n	8009fe8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009fc8:	6839      	ldr	r1, [r7, #0]
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f001 fc9b 	bl	800b906 <USBD_CtlError>
            ret = USBD_FAIL;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009fd4:	e008      	b.n	8009fe8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009fd6:	6839      	ldr	r1, [r7, #0]
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f001 fc94 	bl	800b906 <USBD_CtlError>
          ret = USBD_FAIL;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	75fb      	strb	r3, [r7, #23]
          break;
 8009fe2:	e002      	b.n	8009fea <USBD_CDC_Setup+0x19e>
          break;
 8009fe4:	bf00      	nop
 8009fe6:	e008      	b.n	8009ffa <USBD_CDC_Setup+0x1ae>
          break;
 8009fe8:	bf00      	nop
      }
      break;
 8009fea:	e006      	b.n	8009ffa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009fec:	6839      	ldr	r1, [r7, #0]
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f001 fc89 	bl	800b906 <USBD_CtlError>
      ret = USBD_FAIL;
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ff8:	bf00      	nop
  }

  return (uint8_t)ret;
 8009ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3718      	adds	r7, #24
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	460b      	mov	r3, r1
 800a00e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a016:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	32b0      	adds	r2, #176	; 0xb0
 800a022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d101      	bne.n	800a02e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a02a:	2303      	movs	r3, #3
 800a02c:	e065      	b.n	800a0fa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	32b0      	adds	r2, #176	; 0xb0
 800a038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a03c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a03e:	78fb      	ldrb	r3, [r7, #3]
 800a040:	f003 020f 	and.w	r2, r3, #15
 800a044:	6879      	ldr	r1, [r7, #4]
 800a046:	4613      	mov	r3, r2
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	4413      	add	r3, r2
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	440b      	add	r3, r1
 800a050:	3318      	adds	r3, #24
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d02f      	beq.n	800a0b8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a058:	78fb      	ldrb	r3, [r7, #3]
 800a05a:	f003 020f 	and.w	r2, r3, #15
 800a05e:	6879      	ldr	r1, [r7, #4]
 800a060:	4613      	mov	r3, r2
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4413      	add	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	440b      	add	r3, r1
 800a06a:	3318      	adds	r3, #24
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	78fb      	ldrb	r3, [r7, #3]
 800a070:	f003 010f 	and.w	r1, r3, #15
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	460b      	mov	r3, r1
 800a078:	00db      	lsls	r3, r3, #3
 800a07a:	440b      	add	r3, r1
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	4403      	add	r3, r0
 800a080:	3348      	adds	r3, #72	; 0x48
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	fbb2 f1f3 	udiv	r1, r2, r3
 800a088:	fb01 f303 	mul.w	r3, r1, r3
 800a08c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d112      	bne.n	800a0b8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a092:	78fb      	ldrb	r3, [r7, #3]
 800a094:	f003 020f 	and.w	r2, r3, #15
 800a098:	6879      	ldr	r1, [r7, #4]
 800a09a:	4613      	mov	r3, r2
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	4413      	add	r3, r2
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	440b      	add	r3, r1
 800a0a4:	3318      	adds	r3, #24
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a0aa:	78f9      	ldrb	r1, [r7, #3]
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f005 fb84 	bl	800f7be <USBD_LL_Transmit>
 800a0b6:	e01f      	b.n	800a0f8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	33b0      	adds	r3, #176	; 0xb0
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	4413      	add	r3, r2
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d010      	beq.n	800a0f8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	33b0      	adds	r3, #176	; 0xb0
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	4413      	add	r3, r2
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	68ba      	ldr	r2, [r7, #8]
 800a0ea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a0ee:	68ba      	ldr	r2, [r7, #8]
 800a0f0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a0f4:	78fa      	ldrb	r2, [r7, #3]
 800a0f6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b084      	sub	sp, #16
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
 800a10a:	460b      	mov	r3, r1
 800a10c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	32b0      	adds	r2, #176	; 0xb0
 800a118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a11c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	32b0      	adds	r2, #176	; 0xb0
 800a128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d101      	bne.n	800a134 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a130:	2303      	movs	r3, #3
 800a132:	e01a      	b.n	800a16a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a134:	78fb      	ldrb	r3, [r7, #3]
 800a136:	4619      	mov	r1, r3
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f005 fb82 	bl	800f842 <USBD_LL_GetRxDataSize>
 800a13e:	4602      	mov	r2, r0
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	33b0      	adds	r3, #176	; 0xb0
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	4413      	add	r3, r2
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a15e:	68fa      	ldr	r2, [r7, #12]
 800a160:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a164:	4611      	mov	r1, r2
 800a166:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b084      	sub	sp, #16
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	32b0      	adds	r2, #176	; 0xb0
 800a184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a188:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d101      	bne.n	800a194 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a190:	2303      	movs	r3, #3
 800a192:	e025      	b.n	800a1e0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	33b0      	adds	r3, #176	; 0xb0
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	4413      	add	r3, r2
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d01a      	beq.n	800a1de <USBD_CDC_EP0_RxReady+0x6c>
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a1ae:	2bff      	cmp	r3, #255	; 0xff
 800a1b0:	d015      	beq.n	800a1de <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	33b0      	adds	r3, #176	; 0xb0
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4413      	add	r3, r2
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a1ca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a1d2:	b292      	uxth	r2, r2
 800a1d4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	22ff      	movs	r2, #255	; 0xff
 800a1da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b086      	sub	sp, #24
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a1f0:	2182      	movs	r1, #130	; 0x82
 800a1f2:	4818      	ldr	r0, [pc, #96]	; (800a254 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a1f4:	f000 fd4f 	bl	800ac96 <USBD_GetEpDesc>
 800a1f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a1fa:	2101      	movs	r1, #1
 800a1fc:	4815      	ldr	r0, [pc, #84]	; (800a254 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a1fe:	f000 fd4a 	bl	800ac96 <USBD_GetEpDesc>
 800a202:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a204:	2181      	movs	r1, #129	; 0x81
 800a206:	4813      	ldr	r0, [pc, #76]	; (800a254 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a208:	f000 fd45 	bl	800ac96 <USBD_GetEpDesc>
 800a20c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d002      	beq.n	800a21a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	2210      	movs	r2, #16
 800a218:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d006      	beq.n	800a22e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	2200      	movs	r2, #0
 800a224:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a228:	711a      	strb	r2, [r3, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d006      	beq.n	800a242 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2200      	movs	r2, #0
 800a238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a23c:	711a      	strb	r2, [r3, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2243      	movs	r2, #67	; 0x43
 800a246:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a248:	4b02      	ldr	r3, [pc, #8]	; (800a254 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3718      	adds	r7, #24
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	20000084 	.word	0x20000084

0800a258 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b086      	sub	sp, #24
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a260:	2182      	movs	r1, #130	; 0x82
 800a262:	4818      	ldr	r0, [pc, #96]	; (800a2c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a264:	f000 fd17 	bl	800ac96 <USBD_GetEpDesc>
 800a268:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a26a:	2101      	movs	r1, #1
 800a26c:	4815      	ldr	r0, [pc, #84]	; (800a2c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a26e:	f000 fd12 	bl	800ac96 <USBD_GetEpDesc>
 800a272:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a274:	2181      	movs	r1, #129	; 0x81
 800a276:	4813      	ldr	r0, [pc, #76]	; (800a2c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a278:	f000 fd0d 	bl	800ac96 <USBD_GetEpDesc>
 800a27c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	2210      	movs	r2, #16
 800a288:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d006      	beq.n	800a29e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	2200      	movs	r2, #0
 800a294:	711a      	strb	r2, [r3, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	f042 0202 	orr.w	r2, r2, #2
 800a29c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d006      	beq.n	800a2b2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	711a      	strb	r2, [r3, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f042 0202 	orr.w	r2, r2, #2
 800a2b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2243      	movs	r2, #67	; 0x43
 800a2b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a2b8:	4b02      	ldr	r3, [pc, #8]	; (800a2c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3718      	adds	r7, #24
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	20000084 	.word	0x20000084

0800a2c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a2d0:	2182      	movs	r1, #130	; 0x82
 800a2d2:	4818      	ldr	r0, [pc, #96]	; (800a334 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a2d4:	f000 fcdf 	bl	800ac96 <USBD_GetEpDesc>
 800a2d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a2da:	2101      	movs	r1, #1
 800a2dc:	4815      	ldr	r0, [pc, #84]	; (800a334 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a2de:	f000 fcda 	bl	800ac96 <USBD_GetEpDesc>
 800a2e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a2e4:	2181      	movs	r1, #129	; 0x81
 800a2e6:	4813      	ldr	r0, [pc, #76]	; (800a334 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a2e8:	f000 fcd5 	bl	800ac96 <USBD_GetEpDesc>
 800a2ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d002      	beq.n	800a2fa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	2210      	movs	r2, #16
 800a2f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d006      	beq.n	800a30e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	2200      	movs	r2, #0
 800a304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a308:	711a      	strb	r2, [r3, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d006      	beq.n	800a322 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2200      	movs	r2, #0
 800a318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a31c:	711a      	strb	r2, [r3, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2243      	movs	r2, #67	; 0x43
 800a326:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a328:	4b02      	ldr	r3, [pc, #8]	; (800a334 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3718      	adds	r7, #24
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	20000084 	.word	0x20000084

0800a338 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	220a      	movs	r2, #10
 800a344:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a346:	4b03      	ldr	r3, [pc, #12]	; (800a354 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a348:	4618      	mov	r0, r3
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr
 800a354:	20000040 	.word	0x20000040

0800a358 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d101      	bne.n	800a36c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a368:	2303      	movs	r3, #3
 800a36a:	e009      	b.n	800a380 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	33b0      	adds	r3, #176	; 0xb0
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	4413      	add	r3, r2
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b087      	sub	sp, #28
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	32b0      	adds	r2, #176	; 0xb0
 800a3a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3a6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d101      	bne.n	800a3b2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	e008      	b.n	800a3c4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	68ba      	ldr	r2, [r7, #8]
 800a3b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	371c      	adds	r7, #28
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b085      	sub	sp, #20
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	32b0      	adds	r2, #176	; 0xb0
 800a3e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d101      	bne.n	800a3f4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a3f0:	2303      	movs	r3, #3
 800a3f2:	e004      	b.n	800a3fe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3714      	adds	r7, #20
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr
	...

0800a40c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	32b0      	adds	r2, #176	; 0xb0
 800a41e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a422:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a424:	2301      	movs	r3, #1
 800a426:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	32b0      	adds	r2, #176	; 0xb0
 800a432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d101      	bne.n	800a43e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a43a:	2303      	movs	r3, #3
 800a43c:	e025      	b.n	800a48a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a444:	2b00      	cmp	r3, #0
 800a446:	d11f      	bne.n	800a488 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a450:	4b10      	ldr	r3, [pc, #64]	; (800a494 <USBD_CDC_TransmitPacket+0x88>)
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	f003 020f 	and.w	r2, r3, #15
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	4613      	mov	r3, r2
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	4413      	add	r3, r2
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	4403      	add	r3, r0
 800a46a:	3318      	adds	r3, #24
 800a46c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a46e:	4b09      	ldr	r3, [pc, #36]	; (800a494 <USBD_CDC_TransmitPacket+0x88>)
 800a470:	7819      	ldrb	r1, [r3, #0]
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f005 f99d 	bl	800f7be <USBD_LL_Transmit>

    ret = USBD_OK;
 800a484:	2300      	movs	r3, #0
 800a486:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a488:	7bfb      	ldrb	r3, [r7, #15]
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	200000c7 	.word	0x200000c7

0800a498 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	32b0      	adds	r2, #176	; 0xb0
 800a4aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	32b0      	adds	r2, #176	; 0xb0
 800a4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d101      	bne.n	800a4c6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a4c2:	2303      	movs	r3, #3
 800a4c4:	e018      	b.n	800a4f8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	7c1b      	ldrb	r3, [r3, #16]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d10a      	bne.n	800a4e4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a4ce:	4b0c      	ldr	r3, [pc, #48]	; (800a500 <USBD_CDC_ReceivePacket+0x68>)
 800a4d0:	7819      	ldrb	r1, [r3, #0]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f005 f98f 	bl	800f800 <USBD_LL_PrepareReceive>
 800a4e2:	e008      	b.n	800a4f6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a4e4:	4b06      	ldr	r3, [pc, #24]	; (800a500 <USBD_CDC_ReceivePacket+0x68>)
 800a4e6:	7819      	ldrb	r1, [r3, #0]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4ee:	2340      	movs	r3, #64	; 0x40
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f005 f985 	bl	800f800 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	200000c8 	.word	0x200000c8

0800a504 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b086      	sub	sp, #24
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	4613      	mov	r3, r2
 800a510:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d101      	bne.n	800a51c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a518:	2303      	movs	r3, #3
 800a51a:	e01f      	b.n	800a55c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2200      	movs	r2, #0
 800a520:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2200      	movs	r2, #0
 800a528:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2200      	movs	r2, #0
 800a530:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d003      	beq.n	800a542 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2201      	movs	r2, #1
 800a546:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	79fa      	ldrb	r2, [r7, #7]
 800a54e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f004 ffff 	bl	800f554 <USBD_LL_Init>
 800a556:	4603      	mov	r3, r0
 800a558:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a55a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3718      	adds	r7, #24
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a56e:	2300      	movs	r3, #0
 800a570:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d101      	bne.n	800a57c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a578:	2303      	movs	r3, #3
 800a57a:	e025      	b.n	800a5c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	32ae      	adds	r2, #174	; 0xae
 800a58e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a594:	2b00      	cmp	r3, #0
 800a596:	d00f      	beq.n	800a5b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	32ae      	adds	r2, #174	; 0xae
 800a5a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a8:	f107 020e 	add.w	r2, r7, #14
 800a5ac:	4610      	mov	r0, r2
 800a5ae:	4798      	blx	r3
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a5be:	1c5a      	adds	r2, r3, #1
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f005 f807 	bl	800f5ec <USBD_LL_Start>
 800a5de:	4603      	mov	r3, r0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a5f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	370c      	adds	r7, #12
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr

0800a5fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b084      	sub	sp, #16
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	460b      	mov	r3, r1
 800a608:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a614:	2b00      	cmp	r3, #0
 800a616:	d009      	beq.n	800a62c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	78fa      	ldrb	r2, [r7, #3]
 800a622:	4611      	mov	r1, r2
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	4798      	blx	r3
 800a628:	4603      	mov	r3, r0
 800a62a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b084      	sub	sp, #16
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
 800a63e:	460b      	mov	r3, r1
 800a640:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a642:	2300      	movs	r3, #0
 800a644:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	78fa      	ldrb	r2, [r7, #3]
 800a650:	4611      	mov	r1, r2
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	4798      	blx	r3
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d001      	beq.n	800a660 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a65c:	2303      	movs	r3, #3
 800a65e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a660:	7bfb      	ldrb	r3, [r7, #15]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b084      	sub	sp, #16
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
 800a672:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a67a:	6839      	ldr	r1, [r7, #0]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f001 f908 	bl	800b892 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2201      	movs	r2, #1
 800a686:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a690:	461a      	mov	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a69e:	f003 031f 	and.w	r3, r3, #31
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d01a      	beq.n	800a6dc <USBD_LL_SetupStage+0x72>
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d822      	bhi.n	800a6f0 <USBD_LL_SetupStage+0x86>
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d002      	beq.n	800a6b4 <USBD_LL_SetupStage+0x4a>
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d00a      	beq.n	800a6c8 <USBD_LL_SetupStage+0x5e>
 800a6b2:	e01d      	b.n	800a6f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fb5f 	bl	800ad80 <USBD_StdDevReq>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a6c6:	e020      	b.n	800a70a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 fbc7 	bl	800ae64 <USBD_StdItfReq>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a6da:	e016      	b.n	800a70a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fc29 	bl	800af3c <USBD_StdEPReq>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	73fb      	strb	r3, [r7, #15]
      break;
 800a6ee:	e00c      	b.n	800a70a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a6f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f004 ffd4 	bl	800f6ac <USBD_LL_StallEP>
 800a704:	4603      	mov	r3, r0
 800a706:	73fb      	strb	r3, [r7, #15]
      break;
 800a708:	bf00      	nop
  }

  return ret;
 800a70a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3710      	adds	r7, #16
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b086      	sub	sp, #24
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	460b      	mov	r3, r1
 800a71e:	607a      	str	r2, [r7, #4]
 800a720:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a722:	2300      	movs	r3, #0
 800a724:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a726:	7afb      	ldrb	r3, [r7, #11]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d16e      	bne.n	800a80a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a732:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a73a:	2b03      	cmp	r3, #3
 800a73c:	f040 8098 	bne.w	800a870 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	689a      	ldr	r2, [r3, #8]
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d913      	bls.n	800a774 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	689a      	ldr	r2, [r3, #8]
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	1ad2      	subs	r2, r2, r3
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	68da      	ldr	r2, [r3, #12]
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	4293      	cmp	r3, r2
 800a764:	bf28      	it	cs
 800a766:	4613      	movcs	r3, r2
 800a768:	461a      	mov	r2, r3
 800a76a:	6879      	ldr	r1, [r7, #4]
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f001 f984 	bl	800ba7a <USBD_CtlContinueRx>
 800a772:	e07d      	b.n	800a870 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a77a:	f003 031f 	and.w	r3, r3, #31
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d014      	beq.n	800a7ac <USBD_LL_DataOutStage+0x98>
 800a782:	2b02      	cmp	r3, #2
 800a784:	d81d      	bhi.n	800a7c2 <USBD_LL_DataOutStage+0xae>
 800a786:	2b00      	cmp	r3, #0
 800a788:	d002      	beq.n	800a790 <USBD_LL_DataOutStage+0x7c>
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d003      	beq.n	800a796 <USBD_LL_DataOutStage+0x82>
 800a78e:	e018      	b.n	800a7c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a790:	2300      	movs	r3, #0
 800a792:	75bb      	strb	r3, [r7, #22]
            break;
 800a794:	e018      	b.n	800a7c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	4619      	mov	r1, r3
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f000 fa5e 	bl	800ac62 <USBD_CoreFindIF>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	75bb      	strb	r3, [r7, #22]
            break;
 800a7aa:	e00d      	b.n	800a7c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	f000 fa60 	bl	800ac7c <USBD_CoreFindEP>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	75bb      	strb	r3, [r7, #22]
            break;
 800a7c0:	e002      	b.n	800a7c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	75bb      	strb	r3, [r7, #22]
            break;
 800a7c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a7c8:	7dbb      	ldrb	r3, [r7, #22]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d119      	bne.n	800a802 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	2b03      	cmp	r3, #3
 800a7d8:	d113      	bne.n	800a802 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a7da:	7dba      	ldrb	r2, [r7, #22]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	32ae      	adds	r2, #174	; 0xae
 800a7e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7e4:	691b      	ldr	r3, [r3, #16]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00b      	beq.n	800a802 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a7ea:	7dba      	ldrb	r2, [r7, #22]
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a7f2:	7dba      	ldrb	r2, [r7, #22]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	32ae      	adds	r2, #174	; 0xae
 800a7f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f001 f94a 	bl	800ba9c <USBD_CtlSendStatus>
 800a808:	e032      	b.n	800a870 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a80a:	7afb      	ldrb	r3, [r7, #11]
 800a80c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a810:	b2db      	uxtb	r3, r3
 800a812:	4619      	mov	r1, r3
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	f000 fa31 	bl	800ac7c <USBD_CoreFindEP>
 800a81a:	4603      	mov	r3, r0
 800a81c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a81e:	7dbb      	ldrb	r3, [r7, #22]
 800a820:	2bff      	cmp	r3, #255	; 0xff
 800a822:	d025      	beq.n	800a870 <USBD_LL_DataOutStage+0x15c>
 800a824:	7dbb      	ldrb	r3, [r7, #22]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d122      	bne.n	800a870 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a830:	b2db      	uxtb	r3, r3
 800a832:	2b03      	cmp	r3, #3
 800a834:	d117      	bne.n	800a866 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a836:	7dba      	ldrb	r2, [r7, #22]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	32ae      	adds	r2, #174	; 0xae
 800a83c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a840:	699b      	ldr	r3, [r3, #24]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00f      	beq.n	800a866 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a846:	7dba      	ldrb	r2, [r7, #22]
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a84e:	7dba      	ldrb	r2, [r7, #22]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	32ae      	adds	r2, #174	; 0xae
 800a854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a858:	699b      	ldr	r3, [r3, #24]
 800a85a:	7afa      	ldrb	r2, [r7, #11]
 800a85c:	4611      	mov	r1, r2
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	4798      	blx	r3
 800a862:	4603      	mov	r3, r0
 800a864:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a866:	7dfb      	ldrb	r3, [r7, #23]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d001      	beq.n	800a870 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a86c:	7dfb      	ldrb	r3, [r7, #23]
 800a86e:	e000      	b.n	800a872 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a870:	2300      	movs	r3, #0
}
 800a872:	4618      	mov	r0, r3
 800a874:	3718      	adds	r7, #24
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b086      	sub	sp, #24
 800a87e:	af00      	add	r7, sp, #0
 800a880:	60f8      	str	r0, [r7, #12]
 800a882:	460b      	mov	r3, r1
 800a884:	607a      	str	r2, [r7, #4]
 800a886:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a888:	7afb      	ldrb	r3, [r7, #11]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d16f      	bne.n	800a96e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	3314      	adds	r3, #20
 800a892:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a89a:	2b02      	cmp	r3, #2
 800a89c:	d15a      	bne.n	800a954 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	689a      	ldr	r2, [r3, #8]
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d914      	bls.n	800a8d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	689a      	ldr	r2, [r3, #8]
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	1ad2      	subs	r2, r2, r3
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	461a      	mov	r2, r3
 800a8be:	6879      	ldr	r1, [r7, #4]
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	f001 f8ac 	bl	800ba1e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	2100      	movs	r1, #0
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	f004 ff97 	bl	800f800 <USBD_LL_PrepareReceive>
 800a8d2:	e03f      	b.n	800a954 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	68da      	ldr	r2, [r3, #12]
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d11c      	bne.n	800a91a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	685a      	ldr	r2, [r3, #4]
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d316      	bcc.n	800a91a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	685a      	ldr	r2, [r3, #4]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d20f      	bcs.n	800a91a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	f001 f88d 	bl	800ba1e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a90c:	2300      	movs	r3, #0
 800a90e:	2200      	movs	r2, #0
 800a910:	2100      	movs	r1, #0
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	f004 ff74 	bl	800f800 <USBD_LL_PrepareReceive>
 800a918:	e01c      	b.n	800a954 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a920:	b2db      	uxtb	r3, r3
 800a922:	2b03      	cmp	r3, #3
 800a924:	d10f      	bne.n	800a946 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d009      	beq.n	800a946 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2200      	movs	r2, #0
 800a936:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	68f8      	ldr	r0, [r7, #12]
 800a944:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a946:	2180      	movs	r1, #128	; 0x80
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	f004 feaf 	bl	800f6ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f001 f8b7 	bl	800bac2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d03a      	beq.n	800a9d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f7ff fe42 	bl	800a5e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2200      	movs	r2, #0
 800a968:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a96c:	e032      	b.n	800a9d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a96e:	7afb      	ldrb	r3, [r7, #11]
 800a970:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a974:	b2db      	uxtb	r3, r3
 800a976:	4619      	mov	r1, r3
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	f000 f97f 	bl	800ac7c <USBD_CoreFindEP>
 800a97e:	4603      	mov	r3, r0
 800a980:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a982:	7dfb      	ldrb	r3, [r7, #23]
 800a984:	2bff      	cmp	r3, #255	; 0xff
 800a986:	d025      	beq.n	800a9d4 <USBD_LL_DataInStage+0x15a>
 800a988:	7dfb      	ldrb	r3, [r7, #23]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d122      	bne.n	800a9d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a994:	b2db      	uxtb	r3, r3
 800a996:	2b03      	cmp	r3, #3
 800a998:	d11c      	bne.n	800a9d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a99a:	7dfa      	ldrb	r2, [r7, #23]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	32ae      	adds	r2, #174	; 0xae
 800a9a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9a4:	695b      	ldr	r3, [r3, #20]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d014      	beq.n	800a9d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a9aa:	7dfa      	ldrb	r2, [r7, #23]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a9b2:	7dfa      	ldrb	r2, [r7, #23]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	32ae      	adds	r2, #174	; 0xae
 800a9b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9bc:	695b      	ldr	r3, [r3, #20]
 800a9be:	7afa      	ldrb	r2, [r7, #11]
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	4798      	blx	r3
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a9ca:	7dbb      	ldrb	r3, [r7, #22]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d001      	beq.n	800a9d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a9d0:	7dbb      	ldrb	r3, [r7, #22]
 800a9d2:	e000      	b.n	800a9d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3718      	adds	r7, #24
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b084      	sub	sp, #16
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d014      	beq.n	800aa44 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00e      	beq.n	800aa44 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	6852      	ldr	r2, [r2, #4]
 800aa32:	b2d2      	uxtb	r2, r2
 800aa34:	4611      	mov	r1, r2
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	4798      	blx	r3
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d001      	beq.n	800aa44 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800aa40:	2303      	movs	r3, #3
 800aa42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa44:	2340      	movs	r3, #64	; 0x40
 800aa46:	2200      	movs	r2, #0
 800aa48:	2100      	movs	r1, #0
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f004 fde9 	bl	800f622 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2240      	movs	r2, #64	; 0x40
 800aa5c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa60:	2340      	movs	r3, #64	; 0x40
 800aa62:	2200      	movs	r2, #0
 800aa64:	2180      	movs	r1, #128	; 0x80
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f004 fddb 	bl	800f622 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2240      	movs	r2, #64	; 0x40
 800aa76:	621a      	str	r2, [r3, #32]

  return ret;
 800aa78:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3710      	adds	r7, #16
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aa82:	b480      	push	{r7}
 800aa84:	b083      	sub	sp, #12
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	78fa      	ldrb	r2, [r7, #3]
 800aa92:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	370c      	adds	r7, #12
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr

0800aaa2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aaa2:	b480      	push	{r7}
 800aaa4:	b083      	sub	sp, #12
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aab0:	b2da      	uxtb	r2, r3
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2204      	movs	r2, #4
 800aabc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aac0:	2300      	movs	r3, #0
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	370c      	adds	r7, #12
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr

0800aace <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aace:	b480      	push	{r7}
 800aad0:	b083      	sub	sp, #12
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	2b04      	cmp	r3, #4
 800aae0:	d106      	bne.n	800aaf0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800aae8:	b2da      	uxtb	r2, r3
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aaf0:	2300      	movs	r3, #0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	370c      	adds	r7, #12
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr

0800aafe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b082      	sub	sp, #8
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	2b03      	cmp	r3, #3
 800ab10:	d110      	bne.n	800ab34 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00b      	beq.n	800ab34 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab22:	69db      	ldr	r3, [r3, #28]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d005      	beq.n	800ab34 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab2e:	69db      	ldr	r3, [r3, #28]
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3708      	adds	r7, #8
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b082      	sub	sp, #8
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	460b      	mov	r3, r1
 800ab48:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	32ae      	adds	r2, #174	; 0xae
 800ab54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d101      	bne.n	800ab60 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab5c:	2303      	movs	r3, #3
 800ab5e:	e01c      	b.n	800ab9a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	2b03      	cmp	r3, #3
 800ab6a:	d115      	bne.n	800ab98 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	32ae      	adds	r2, #174	; 0xae
 800ab76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab7a:	6a1b      	ldr	r3, [r3, #32]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d00b      	beq.n	800ab98 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	32ae      	adds	r2, #174	; 0xae
 800ab8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab8e:	6a1b      	ldr	r3, [r3, #32]
 800ab90:	78fa      	ldrb	r2, [r7, #3]
 800ab92:	4611      	mov	r1, r2
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b082      	sub	sp, #8
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
 800abaa:	460b      	mov	r3, r1
 800abac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	32ae      	adds	r2, #174	; 0xae
 800abb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d101      	bne.n	800abc4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800abc0:	2303      	movs	r3, #3
 800abc2:	e01c      	b.n	800abfe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	2b03      	cmp	r3, #3
 800abce:	d115      	bne.n	800abfc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	32ae      	adds	r2, #174	; 0xae
 800abda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00b      	beq.n	800abfc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	32ae      	adds	r2, #174	; 0xae
 800abee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf4:	78fa      	ldrb	r2, [r7, #3]
 800abf6:	4611      	mov	r1, r2
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800abfc:	2300      	movs	r3, #0
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3708      	adds	r7, #8
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ac06:	b480      	push	{r7}
 800ac08:	b083      	sub	sp, #12
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ac24:	2300      	movs	r3, #0
 800ac26:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00e      	beq.n	800ac58 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	6852      	ldr	r2, [r2, #4]
 800ac46:	b2d2      	uxtb	r2, r2
 800ac48:	4611      	mov	r1, r2
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	4798      	blx	r3
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d001      	beq.n	800ac58 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ac54:	2303      	movs	r3, #3
 800ac56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ac58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3710      	adds	r7, #16
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}

0800ac62 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac62:	b480      	push	{r7}
 800ac64:	b083      	sub	sp, #12
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac6e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	460b      	mov	r3, r1
 800ac86:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac88:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	370c      	adds	r7, #12
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b086      	sub	sp, #24
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
 800ac9e:	460b      	mov	r3, r1
 800aca0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800acaa:	2300      	movs	r3, #0
 800acac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	885b      	ldrh	r3, [r3, #2]
 800acb2:	b29a      	uxth	r2, r3
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	b29b      	uxth	r3, r3
 800acba:	429a      	cmp	r2, r3
 800acbc:	d920      	bls.n	800ad00 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800acc6:	e013      	b.n	800acf0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800acc8:	f107 030a 	add.w	r3, r7, #10
 800accc:	4619      	mov	r1, r3
 800acce:	6978      	ldr	r0, [r7, #20]
 800acd0:	f000 f81b 	bl	800ad0a <USBD_GetNextDesc>
 800acd4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	785b      	ldrb	r3, [r3, #1]
 800acda:	2b05      	cmp	r3, #5
 800acdc:	d108      	bne.n	800acf0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	789b      	ldrb	r3, [r3, #2]
 800ace6:	78fa      	ldrb	r2, [r7, #3]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d008      	beq.n	800acfe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800acec:	2300      	movs	r3, #0
 800acee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	885b      	ldrh	r3, [r3, #2]
 800acf4:	b29a      	uxth	r2, r3
 800acf6:	897b      	ldrh	r3, [r7, #10]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d8e5      	bhi.n	800acc8 <USBD_GetEpDesc+0x32>
 800acfc:	e000      	b.n	800ad00 <USBD_GetEpDesc+0x6a>
          break;
 800acfe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ad00:	693b      	ldr	r3, [r7, #16]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3718      	adds	r7, #24
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ad0a:	b480      	push	{r7}
 800ad0c:	b085      	sub	sp, #20
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
 800ad12:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	881a      	ldrh	r2, [r3, #0]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	4413      	add	r3, r2
 800ad24:	b29a      	uxth	r2, r3
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	461a      	mov	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4413      	add	r3, r2
 800ad34:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ad36:	68fb      	ldr	r3, [r7, #12]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3714      	adds	r7, #20
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b087      	sub	sp, #28
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ad62:	8a3b      	ldrh	r3, [r7, #16]
 800ad64:	021b      	lsls	r3, r3, #8
 800ad66:	b21a      	sxth	r2, r3
 800ad68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	b21b      	sxth	r3, r3
 800ad70:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ad72:	89fb      	ldrh	r3, [r7, #14]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	371c      	adds	r7, #28
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad96:	2b40      	cmp	r3, #64	; 0x40
 800ad98:	d005      	beq.n	800ada6 <USBD_StdDevReq+0x26>
 800ad9a:	2b40      	cmp	r3, #64	; 0x40
 800ad9c:	d857      	bhi.n	800ae4e <USBD_StdDevReq+0xce>
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00f      	beq.n	800adc2 <USBD_StdDevReq+0x42>
 800ada2:	2b20      	cmp	r3, #32
 800ada4:	d153      	bne.n	800ae4e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	32ae      	adds	r2, #174	; 0xae
 800adb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	6839      	ldr	r1, [r7, #0]
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	4798      	blx	r3
 800adbc:	4603      	mov	r3, r0
 800adbe:	73fb      	strb	r3, [r7, #15]
      break;
 800adc0:	e04a      	b.n	800ae58 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	785b      	ldrb	r3, [r3, #1]
 800adc6:	2b09      	cmp	r3, #9
 800adc8:	d83b      	bhi.n	800ae42 <USBD_StdDevReq+0xc2>
 800adca:	a201      	add	r2, pc, #4	; (adr r2, 800add0 <USBD_StdDevReq+0x50>)
 800adcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add0:	0800ae25 	.word	0x0800ae25
 800add4:	0800ae39 	.word	0x0800ae39
 800add8:	0800ae43 	.word	0x0800ae43
 800addc:	0800ae2f 	.word	0x0800ae2f
 800ade0:	0800ae43 	.word	0x0800ae43
 800ade4:	0800ae03 	.word	0x0800ae03
 800ade8:	0800adf9 	.word	0x0800adf9
 800adec:	0800ae43 	.word	0x0800ae43
 800adf0:	0800ae1b 	.word	0x0800ae1b
 800adf4:	0800ae0d 	.word	0x0800ae0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800adf8:	6839      	ldr	r1, [r7, #0]
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 fa3c 	bl	800b278 <USBD_GetDescriptor>
          break;
 800ae00:	e024      	b.n	800ae4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ae02:	6839      	ldr	r1, [r7, #0]
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 fba1 	bl	800b54c <USBD_SetAddress>
          break;
 800ae0a:	e01f      	b.n	800ae4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ae0c:	6839      	ldr	r1, [r7, #0]
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 fbe0 	bl	800b5d4 <USBD_SetConfig>
 800ae14:	4603      	mov	r3, r0
 800ae16:	73fb      	strb	r3, [r7, #15]
          break;
 800ae18:	e018      	b.n	800ae4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ae1a:	6839      	ldr	r1, [r7, #0]
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 fc83 	bl	800b728 <USBD_GetConfig>
          break;
 800ae22:	e013      	b.n	800ae4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ae24:	6839      	ldr	r1, [r7, #0]
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 fcb4 	bl	800b794 <USBD_GetStatus>
          break;
 800ae2c:	e00e      	b.n	800ae4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ae2e:	6839      	ldr	r1, [r7, #0]
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 fce3 	bl	800b7fc <USBD_SetFeature>
          break;
 800ae36:	e009      	b.n	800ae4c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ae38:	6839      	ldr	r1, [r7, #0]
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 fd07 	bl	800b84e <USBD_ClrFeature>
          break;
 800ae40:	e004      	b.n	800ae4c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ae42:	6839      	ldr	r1, [r7, #0]
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 fd5e 	bl	800b906 <USBD_CtlError>
          break;
 800ae4a:	bf00      	nop
      }
      break;
 800ae4c:	e004      	b.n	800ae58 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ae4e:	6839      	ldr	r1, [r7, #0]
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 fd58 	bl	800b906 <USBD_CtlError>
      break;
 800ae56:	bf00      	nop
  }

  return ret;
 800ae58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop

0800ae64 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae7a:	2b40      	cmp	r3, #64	; 0x40
 800ae7c:	d005      	beq.n	800ae8a <USBD_StdItfReq+0x26>
 800ae7e:	2b40      	cmp	r3, #64	; 0x40
 800ae80:	d852      	bhi.n	800af28 <USBD_StdItfReq+0xc4>
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d001      	beq.n	800ae8a <USBD_StdItfReq+0x26>
 800ae86:	2b20      	cmp	r3, #32
 800ae88:	d14e      	bne.n	800af28 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae90:	b2db      	uxtb	r3, r3
 800ae92:	3b01      	subs	r3, #1
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	d840      	bhi.n	800af1a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	889b      	ldrh	r3, [r3, #4]
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d836      	bhi.n	800af10 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	889b      	ldrh	r3, [r3, #4]
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	4619      	mov	r1, r3
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f7ff fed9 	bl	800ac62 <USBD_CoreFindIF>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aeb4:	7bbb      	ldrb	r3, [r7, #14]
 800aeb6:	2bff      	cmp	r3, #255	; 0xff
 800aeb8:	d01d      	beq.n	800aef6 <USBD_StdItfReq+0x92>
 800aeba:	7bbb      	ldrb	r3, [r7, #14]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d11a      	bne.n	800aef6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800aec0:	7bba      	ldrb	r2, [r7, #14]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	32ae      	adds	r2, #174	; 0xae
 800aec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d00f      	beq.n	800aef0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800aed0:	7bba      	ldrb	r2, [r7, #14]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aed8:	7bba      	ldrb	r2, [r7, #14]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	32ae      	adds	r2, #174	; 0xae
 800aede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee2:	689b      	ldr	r3, [r3, #8]
 800aee4:	6839      	ldr	r1, [r7, #0]
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	4798      	blx	r3
 800aeea:	4603      	mov	r3, r0
 800aeec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aeee:	e004      	b.n	800aefa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800aef0:	2303      	movs	r3, #3
 800aef2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aef4:	e001      	b.n	800aefa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800aef6:	2303      	movs	r3, #3
 800aef8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	88db      	ldrh	r3, [r3, #6]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d110      	bne.n	800af24 <USBD_StdItfReq+0xc0>
 800af02:	7bfb      	ldrb	r3, [r7, #15]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10d      	bne.n	800af24 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 fdc7 	bl	800ba9c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800af0e:	e009      	b.n	800af24 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800af10:	6839      	ldr	r1, [r7, #0]
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 fcf7 	bl	800b906 <USBD_CtlError>
          break;
 800af18:	e004      	b.n	800af24 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800af1a:	6839      	ldr	r1, [r7, #0]
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f000 fcf2 	bl	800b906 <USBD_CtlError>
          break;
 800af22:	e000      	b.n	800af26 <USBD_StdItfReq+0xc2>
          break;
 800af24:	bf00      	nop
      }
      break;
 800af26:	e004      	b.n	800af32 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800af28:	6839      	ldr	r1, [r7, #0]
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 fceb 	bl	800b906 <USBD_CtlError>
      break;
 800af30:	bf00      	nop
  }

  return ret;
 800af32:	7bfb      	ldrb	r3, [r7, #15]
}
 800af34:	4618      	mov	r0, r3
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800af46:	2300      	movs	r3, #0
 800af48:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	889b      	ldrh	r3, [r3, #4]
 800af4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af58:	2b40      	cmp	r3, #64	; 0x40
 800af5a:	d007      	beq.n	800af6c <USBD_StdEPReq+0x30>
 800af5c:	2b40      	cmp	r3, #64	; 0x40
 800af5e:	f200 817f 	bhi.w	800b260 <USBD_StdEPReq+0x324>
 800af62:	2b00      	cmp	r3, #0
 800af64:	d02a      	beq.n	800afbc <USBD_StdEPReq+0x80>
 800af66:	2b20      	cmp	r3, #32
 800af68:	f040 817a 	bne.w	800b260 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800af6c:	7bbb      	ldrb	r3, [r7, #14]
 800af6e:	4619      	mov	r1, r3
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f7ff fe83 	bl	800ac7c <USBD_CoreFindEP>
 800af76:	4603      	mov	r3, r0
 800af78:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af7a:	7b7b      	ldrb	r3, [r7, #13]
 800af7c:	2bff      	cmp	r3, #255	; 0xff
 800af7e:	f000 8174 	beq.w	800b26a <USBD_StdEPReq+0x32e>
 800af82:	7b7b      	ldrb	r3, [r7, #13]
 800af84:	2b00      	cmp	r3, #0
 800af86:	f040 8170 	bne.w	800b26a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800af8a:	7b7a      	ldrb	r2, [r7, #13]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800af92:	7b7a      	ldrb	r2, [r7, #13]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	32ae      	adds	r2, #174	; 0xae
 800af98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f000 8163 	beq.w	800b26a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800afa4:	7b7a      	ldrb	r2, [r7, #13]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	32ae      	adds	r2, #174	; 0xae
 800afaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	4798      	blx	r3
 800afb6:	4603      	mov	r3, r0
 800afb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800afba:	e156      	b.n	800b26a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	785b      	ldrb	r3, [r3, #1]
 800afc0:	2b03      	cmp	r3, #3
 800afc2:	d008      	beq.n	800afd6 <USBD_StdEPReq+0x9a>
 800afc4:	2b03      	cmp	r3, #3
 800afc6:	f300 8145 	bgt.w	800b254 <USBD_StdEPReq+0x318>
 800afca:	2b00      	cmp	r3, #0
 800afcc:	f000 809b 	beq.w	800b106 <USBD_StdEPReq+0x1ca>
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d03c      	beq.n	800b04e <USBD_StdEPReq+0x112>
 800afd4:	e13e      	b.n	800b254 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	2b02      	cmp	r3, #2
 800afe0:	d002      	beq.n	800afe8 <USBD_StdEPReq+0xac>
 800afe2:	2b03      	cmp	r3, #3
 800afe4:	d016      	beq.n	800b014 <USBD_StdEPReq+0xd8>
 800afe6:	e02c      	b.n	800b042 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afe8:	7bbb      	ldrb	r3, [r7, #14]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00d      	beq.n	800b00a <USBD_StdEPReq+0xce>
 800afee:	7bbb      	ldrb	r3, [r7, #14]
 800aff0:	2b80      	cmp	r3, #128	; 0x80
 800aff2:	d00a      	beq.n	800b00a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aff4:	7bbb      	ldrb	r3, [r7, #14]
 800aff6:	4619      	mov	r1, r3
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f004 fb57 	bl	800f6ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800affe:	2180      	movs	r1, #128	; 0x80
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f004 fb53 	bl	800f6ac <USBD_LL_StallEP>
 800b006:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b008:	e020      	b.n	800b04c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b00a:	6839      	ldr	r1, [r7, #0]
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f000 fc7a 	bl	800b906 <USBD_CtlError>
              break;
 800b012:	e01b      	b.n	800b04c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	885b      	ldrh	r3, [r3, #2]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d10e      	bne.n	800b03a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b01c:	7bbb      	ldrb	r3, [r7, #14]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00b      	beq.n	800b03a <USBD_StdEPReq+0xfe>
 800b022:	7bbb      	ldrb	r3, [r7, #14]
 800b024:	2b80      	cmp	r3, #128	; 0x80
 800b026:	d008      	beq.n	800b03a <USBD_StdEPReq+0xfe>
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	88db      	ldrh	r3, [r3, #6]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d104      	bne.n	800b03a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b030:	7bbb      	ldrb	r3, [r7, #14]
 800b032:	4619      	mov	r1, r3
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f004 fb39 	bl	800f6ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 fd2e 	bl	800ba9c <USBD_CtlSendStatus>

              break;
 800b040:	e004      	b.n	800b04c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b042:	6839      	ldr	r1, [r7, #0]
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 fc5e 	bl	800b906 <USBD_CtlError>
              break;
 800b04a:	bf00      	nop
          }
          break;
 800b04c:	e107      	b.n	800b25e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b054:	b2db      	uxtb	r3, r3
 800b056:	2b02      	cmp	r3, #2
 800b058:	d002      	beq.n	800b060 <USBD_StdEPReq+0x124>
 800b05a:	2b03      	cmp	r3, #3
 800b05c:	d016      	beq.n	800b08c <USBD_StdEPReq+0x150>
 800b05e:	e04b      	b.n	800b0f8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b060:	7bbb      	ldrb	r3, [r7, #14]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00d      	beq.n	800b082 <USBD_StdEPReq+0x146>
 800b066:	7bbb      	ldrb	r3, [r7, #14]
 800b068:	2b80      	cmp	r3, #128	; 0x80
 800b06a:	d00a      	beq.n	800b082 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b06c:	7bbb      	ldrb	r3, [r7, #14]
 800b06e:	4619      	mov	r1, r3
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f004 fb1b 	bl	800f6ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b076:	2180      	movs	r1, #128	; 0x80
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f004 fb17 	bl	800f6ac <USBD_LL_StallEP>
 800b07e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b080:	e040      	b.n	800b104 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b082:	6839      	ldr	r1, [r7, #0]
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f000 fc3e 	bl	800b906 <USBD_CtlError>
              break;
 800b08a:	e03b      	b.n	800b104 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	885b      	ldrh	r3, [r3, #2]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d136      	bne.n	800b102 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b094:	7bbb      	ldrb	r3, [r7, #14]
 800b096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d004      	beq.n	800b0a8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b09e:	7bbb      	ldrb	r3, [r7, #14]
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f004 fb21 	bl	800f6ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 fcf7 	bl	800ba9c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b0ae:	7bbb      	ldrb	r3, [r7, #14]
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f7ff fde2 	bl	800ac7c <USBD_CoreFindEP>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b0bc:	7b7b      	ldrb	r3, [r7, #13]
 800b0be:	2bff      	cmp	r3, #255	; 0xff
 800b0c0:	d01f      	beq.n	800b102 <USBD_StdEPReq+0x1c6>
 800b0c2:	7b7b      	ldrb	r3, [r7, #13]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d11c      	bne.n	800b102 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b0c8:	7b7a      	ldrb	r2, [r7, #13]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b0d0:	7b7a      	ldrb	r2, [r7, #13]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	32ae      	adds	r2, #174	; 0xae
 800b0d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0da:	689b      	ldr	r3, [r3, #8]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d010      	beq.n	800b102 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b0e0:	7b7a      	ldrb	r2, [r7, #13]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	32ae      	adds	r2, #174	; 0xae
 800b0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ea:	689b      	ldr	r3, [r3, #8]
 800b0ec:	6839      	ldr	r1, [r7, #0]
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	4798      	blx	r3
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b0f6:	e004      	b.n	800b102 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b0f8:	6839      	ldr	r1, [r7, #0]
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 fc03 	bl	800b906 <USBD_CtlError>
              break;
 800b100:	e000      	b.n	800b104 <USBD_StdEPReq+0x1c8>
              break;
 800b102:	bf00      	nop
          }
          break;
 800b104:	e0ab      	b.n	800b25e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	2b02      	cmp	r3, #2
 800b110:	d002      	beq.n	800b118 <USBD_StdEPReq+0x1dc>
 800b112:	2b03      	cmp	r3, #3
 800b114:	d032      	beq.n	800b17c <USBD_StdEPReq+0x240>
 800b116:	e097      	b.n	800b248 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b118:	7bbb      	ldrb	r3, [r7, #14]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d007      	beq.n	800b12e <USBD_StdEPReq+0x1f2>
 800b11e:	7bbb      	ldrb	r3, [r7, #14]
 800b120:	2b80      	cmp	r3, #128	; 0x80
 800b122:	d004      	beq.n	800b12e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b124:	6839      	ldr	r1, [r7, #0]
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 fbed 	bl	800b906 <USBD_CtlError>
                break;
 800b12c:	e091      	b.n	800b252 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b12e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b132:	2b00      	cmp	r3, #0
 800b134:	da0b      	bge.n	800b14e <USBD_StdEPReq+0x212>
 800b136:	7bbb      	ldrb	r3, [r7, #14]
 800b138:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b13c:	4613      	mov	r3, r2
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	4413      	add	r3, r2
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	3310      	adds	r3, #16
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	4413      	add	r3, r2
 800b14a:	3304      	adds	r3, #4
 800b14c:	e00b      	b.n	800b166 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b14e:	7bbb      	ldrb	r3, [r7, #14]
 800b150:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b154:	4613      	mov	r3, r2
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	4413      	add	r3, r2
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	4413      	add	r3, r2
 800b164:	3304      	adds	r3, #4
 800b166:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	2200      	movs	r2, #0
 800b16c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	2202      	movs	r2, #2
 800b172:	4619      	mov	r1, r3
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 fc37 	bl	800b9e8 <USBD_CtlSendData>
              break;
 800b17a:	e06a      	b.n	800b252 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b17c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b180:	2b00      	cmp	r3, #0
 800b182:	da11      	bge.n	800b1a8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b184:	7bbb      	ldrb	r3, [r7, #14]
 800b186:	f003 020f 	and.w	r2, r3, #15
 800b18a:	6879      	ldr	r1, [r7, #4]
 800b18c:	4613      	mov	r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	4413      	add	r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	440b      	add	r3, r1
 800b196:	3324      	adds	r3, #36	; 0x24
 800b198:	881b      	ldrh	r3, [r3, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d117      	bne.n	800b1ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b19e:	6839      	ldr	r1, [r7, #0]
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 fbb0 	bl	800b906 <USBD_CtlError>
                  break;
 800b1a6:	e054      	b.n	800b252 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b1a8:	7bbb      	ldrb	r3, [r7, #14]
 800b1aa:	f003 020f 	and.w	r2, r3, #15
 800b1ae:	6879      	ldr	r1, [r7, #4]
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	4413      	add	r3, r2
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	440b      	add	r3, r1
 800b1ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b1be:	881b      	ldrh	r3, [r3, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d104      	bne.n	800b1ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b1c4:	6839      	ldr	r1, [r7, #0]
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 fb9d 	bl	800b906 <USBD_CtlError>
                  break;
 800b1cc:	e041      	b.n	800b252 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	da0b      	bge.n	800b1ee <USBD_StdEPReq+0x2b2>
 800b1d6:	7bbb      	ldrb	r3, [r7, #14]
 800b1d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1dc:	4613      	mov	r3, r2
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	4413      	add	r3, r2
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	3310      	adds	r3, #16
 800b1e6:	687a      	ldr	r2, [r7, #4]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	3304      	adds	r3, #4
 800b1ec:	e00b      	b.n	800b206 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1ee:	7bbb      	ldrb	r3, [r7, #14]
 800b1f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	4413      	add	r3, r2
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	4413      	add	r3, r2
 800b204:	3304      	adds	r3, #4
 800b206:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b208:	7bbb      	ldrb	r3, [r7, #14]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d002      	beq.n	800b214 <USBD_StdEPReq+0x2d8>
 800b20e:	7bbb      	ldrb	r3, [r7, #14]
 800b210:	2b80      	cmp	r3, #128	; 0x80
 800b212:	d103      	bne.n	800b21c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	2200      	movs	r2, #0
 800b218:	601a      	str	r2, [r3, #0]
 800b21a:	e00e      	b.n	800b23a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b21c:	7bbb      	ldrb	r3, [r7, #14]
 800b21e:	4619      	mov	r1, r3
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f004 fa81 	bl	800f728 <USBD_LL_IsStallEP>
 800b226:	4603      	mov	r3, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d003      	beq.n	800b234 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	2201      	movs	r2, #1
 800b230:	601a      	str	r2, [r3, #0]
 800b232:	e002      	b.n	800b23a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	2200      	movs	r2, #0
 800b238:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	2202      	movs	r2, #2
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 fbd1 	bl	800b9e8 <USBD_CtlSendData>
              break;
 800b246:	e004      	b.n	800b252 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b248:	6839      	ldr	r1, [r7, #0]
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 fb5b 	bl	800b906 <USBD_CtlError>
              break;
 800b250:	bf00      	nop
          }
          break;
 800b252:	e004      	b.n	800b25e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b254:	6839      	ldr	r1, [r7, #0]
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 fb55 	bl	800b906 <USBD_CtlError>
          break;
 800b25c:	bf00      	nop
      }
      break;
 800b25e:	e005      	b.n	800b26c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b260:	6839      	ldr	r1, [r7, #0]
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 fb4f 	bl	800b906 <USBD_CtlError>
      break;
 800b268:	e000      	b.n	800b26c <USBD_StdEPReq+0x330>
      break;
 800b26a:	bf00      	nop
  }

  return ret;
 800b26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3710      	adds	r7, #16
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
	...

0800b278 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b282:	2300      	movs	r3, #0
 800b284:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b286:	2300      	movs	r3, #0
 800b288:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b28a:	2300      	movs	r3, #0
 800b28c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	885b      	ldrh	r3, [r3, #2]
 800b292:	0a1b      	lsrs	r3, r3, #8
 800b294:	b29b      	uxth	r3, r3
 800b296:	3b01      	subs	r3, #1
 800b298:	2b06      	cmp	r3, #6
 800b29a:	f200 8128 	bhi.w	800b4ee <USBD_GetDescriptor+0x276>
 800b29e:	a201      	add	r2, pc, #4	; (adr r2, 800b2a4 <USBD_GetDescriptor+0x2c>)
 800b2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a4:	0800b2c1 	.word	0x0800b2c1
 800b2a8:	0800b2d9 	.word	0x0800b2d9
 800b2ac:	0800b319 	.word	0x0800b319
 800b2b0:	0800b4ef 	.word	0x0800b4ef
 800b2b4:	0800b4ef 	.word	0x0800b4ef
 800b2b8:	0800b48f 	.word	0x0800b48f
 800b2bc:	0800b4bb 	.word	0x0800b4bb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	7c12      	ldrb	r2, [r2, #16]
 800b2cc:	f107 0108 	add.w	r1, r7, #8
 800b2d0:	4610      	mov	r0, r2
 800b2d2:	4798      	blx	r3
 800b2d4:	60f8      	str	r0, [r7, #12]
      break;
 800b2d6:	e112      	b.n	800b4fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	7c1b      	ldrb	r3, [r3, #16]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d10d      	bne.n	800b2fc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2e8:	f107 0208 	add.w	r2, r7, #8
 800b2ec:	4610      	mov	r0, r2
 800b2ee:	4798      	blx	r3
 800b2f0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	2202      	movs	r2, #2
 800b2f8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b2fa:	e100      	b.n	800b4fe <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b304:	f107 0208 	add.w	r2, r7, #8
 800b308:	4610      	mov	r0, r2
 800b30a:	4798      	blx	r3
 800b30c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	3301      	adds	r3, #1
 800b312:	2202      	movs	r2, #2
 800b314:	701a      	strb	r2, [r3, #0]
      break;
 800b316:	e0f2      	b.n	800b4fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	885b      	ldrh	r3, [r3, #2]
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	2b05      	cmp	r3, #5
 800b320:	f200 80ac 	bhi.w	800b47c <USBD_GetDescriptor+0x204>
 800b324:	a201      	add	r2, pc, #4	; (adr r2, 800b32c <USBD_GetDescriptor+0xb4>)
 800b326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b32a:	bf00      	nop
 800b32c:	0800b345 	.word	0x0800b345
 800b330:	0800b379 	.word	0x0800b379
 800b334:	0800b3ad 	.word	0x0800b3ad
 800b338:	0800b3e1 	.word	0x0800b3e1
 800b33c:	0800b415 	.word	0x0800b415
 800b340:	0800b449 	.word	0x0800b449
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00b      	beq.n	800b368 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	7c12      	ldrb	r2, [r2, #16]
 800b35c:	f107 0108 	add.w	r1, r7, #8
 800b360:	4610      	mov	r0, r2
 800b362:	4798      	blx	r3
 800b364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b366:	e091      	b.n	800b48c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b368:	6839      	ldr	r1, [r7, #0]
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 facb 	bl	800b906 <USBD_CtlError>
            err++;
 800b370:	7afb      	ldrb	r3, [r7, #11]
 800b372:	3301      	adds	r3, #1
 800b374:	72fb      	strb	r3, [r7, #11]
          break;
 800b376:	e089      	b.n	800b48c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00b      	beq.n	800b39c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	7c12      	ldrb	r2, [r2, #16]
 800b390:	f107 0108 	add.w	r1, r7, #8
 800b394:	4610      	mov	r0, r2
 800b396:	4798      	blx	r3
 800b398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b39a:	e077      	b.n	800b48c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b39c:	6839      	ldr	r1, [r7, #0]
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 fab1 	bl	800b906 <USBD_CtlError>
            err++;
 800b3a4:	7afb      	ldrb	r3, [r7, #11]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	72fb      	strb	r3, [r7, #11]
          break;
 800b3aa:	e06f      	b.n	800b48c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00b      	beq.n	800b3d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	7c12      	ldrb	r2, [r2, #16]
 800b3c4:	f107 0108 	add.w	r1, r7, #8
 800b3c8:	4610      	mov	r0, r2
 800b3ca:	4798      	blx	r3
 800b3cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3ce:	e05d      	b.n	800b48c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3d0:	6839      	ldr	r1, [r7, #0]
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 fa97 	bl	800b906 <USBD_CtlError>
            err++;
 800b3d8:	7afb      	ldrb	r3, [r7, #11]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b3de:	e055      	b.n	800b48c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3e6:	691b      	ldr	r3, [r3, #16]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d00b      	beq.n	800b404 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3f2:	691b      	ldr	r3, [r3, #16]
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	7c12      	ldrb	r2, [r2, #16]
 800b3f8:	f107 0108 	add.w	r1, r7, #8
 800b3fc:	4610      	mov	r0, r2
 800b3fe:	4798      	blx	r3
 800b400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b402:	e043      	b.n	800b48c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b404:	6839      	ldr	r1, [r7, #0]
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 fa7d 	bl	800b906 <USBD_CtlError>
            err++;
 800b40c:	7afb      	ldrb	r3, [r7, #11]
 800b40e:	3301      	adds	r3, #1
 800b410:	72fb      	strb	r3, [r7, #11]
          break;
 800b412:	e03b      	b.n	800b48c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b41a:	695b      	ldr	r3, [r3, #20]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00b      	beq.n	800b438 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b426:	695b      	ldr	r3, [r3, #20]
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	7c12      	ldrb	r2, [r2, #16]
 800b42c:	f107 0108 	add.w	r1, r7, #8
 800b430:	4610      	mov	r0, r2
 800b432:	4798      	blx	r3
 800b434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b436:	e029      	b.n	800b48c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 fa63 	bl	800b906 <USBD_CtlError>
            err++;
 800b440:	7afb      	ldrb	r3, [r7, #11]
 800b442:	3301      	adds	r3, #1
 800b444:	72fb      	strb	r3, [r7, #11]
          break;
 800b446:	e021      	b.n	800b48c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b44e:	699b      	ldr	r3, [r3, #24]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d00b      	beq.n	800b46c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b45a:	699b      	ldr	r3, [r3, #24]
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	7c12      	ldrb	r2, [r2, #16]
 800b460:	f107 0108 	add.w	r1, r7, #8
 800b464:	4610      	mov	r0, r2
 800b466:	4798      	blx	r3
 800b468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b46a:	e00f      	b.n	800b48c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b46c:	6839      	ldr	r1, [r7, #0]
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 fa49 	bl	800b906 <USBD_CtlError>
            err++;
 800b474:	7afb      	ldrb	r3, [r7, #11]
 800b476:	3301      	adds	r3, #1
 800b478:	72fb      	strb	r3, [r7, #11]
          break;
 800b47a:	e007      	b.n	800b48c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b47c:	6839      	ldr	r1, [r7, #0]
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 fa41 	bl	800b906 <USBD_CtlError>
          err++;
 800b484:	7afb      	ldrb	r3, [r7, #11]
 800b486:	3301      	adds	r3, #1
 800b488:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b48a:	bf00      	nop
      }
      break;
 800b48c:	e037      	b.n	800b4fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	7c1b      	ldrb	r3, [r3, #16]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d109      	bne.n	800b4aa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b49c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b49e:	f107 0208 	add.w	r2, r7, #8
 800b4a2:	4610      	mov	r0, r2
 800b4a4:	4798      	blx	r3
 800b4a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4a8:	e029      	b.n	800b4fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b4aa:	6839      	ldr	r1, [r7, #0]
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f000 fa2a 	bl	800b906 <USBD_CtlError>
        err++;
 800b4b2:	7afb      	ldrb	r3, [r7, #11]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	72fb      	strb	r3, [r7, #11]
      break;
 800b4b8:	e021      	b.n	800b4fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	7c1b      	ldrb	r3, [r3, #16]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d10d      	bne.n	800b4de <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ca:	f107 0208 	add.w	r2, r7, #8
 800b4ce:	4610      	mov	r0, r2
 800b4d0:	4798      	blx	r3
 800b4d2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	2207      	movs	r2, #7
 800b4da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4dc:	e00f      	b.n	800b4fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b4de:	6839      	ldr	r1, [r7, #0]
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 fa10 	bl	800b906 <USBD_CtlError>
        err++;
 800b4e6:	7afb      	ldrb	r3, [r7, #11]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	72fb      	strb	r3, [r7, #11]
      break;
 800b4ec:	e007      	b.n	800b4fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b4ee:	6839      	ldr	r1, [r7, #0]
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 fa08 	bl	800b906 <USBD_CtlError>
      err++;
 800b4f6:	7afb      	ldrb	r3, [r7, #11]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	72fb      	strb	r3, [r7, #11]
      break;
 800b4fc:	bf00      	nop
  }

  if (err != 0U)
 800b4fe:	7afb      	ldrb	r3, [r7, #11]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d11e      	bne.n	800b542 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	88db      	ldrh	r3, [r3, #6]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d016      	beq.n	800b53a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b50c:	893b      	ldrh	r3, [r7, #8]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00e      	beq.n	800b530 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	88da      	ldrh	r2, [r3, #6]
 800b516:	893b      	ldrh	r3, [r7, #8]
 800b518:	4293      	cmp	r3, r2
 800b51a:	bf28      	it	cs
 800b51c:	4613      	movcs	r3, r2
 800b51e:	b29b      	uxth	r3, r3
 800b520:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b522:	893b      	ldrh	r3, [r7, #8]
 800b524:	461a      	mov	r2, r3
 800b526:	68f9      	ldr	r1, [r7, #12]
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 fa5d 	bl	800b9e8 <USBD_CtlSendData>
 800b52e:	e009      	b.n	800b544 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b530:	6839      	ldr	r1, [r7, #0]
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 f9e7 	bl	800b906 <USBD_CtlError>
 800b538:	e004      	b.n	800b544 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 faae 	bl	800ba9c <USBD_CtlSendStatus>
 800b540:	e000      	b.n	800b544 <USBD_GetDescriptor+0x2cc>
    return;
 800b542:	bf00      	nop
  }
}
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop

0800b54c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	889b      	ldrh	r3, [r3, #4]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d131      	bne.n	800b5c2 <USBD_SetAddress+0x76>
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	88db      	ldrh	r3, [r3, #6]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d12d      	bne.n	800b5c2 <USBD_SetAddress+0x76>
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	885b      	ldrh	r3, [r3, #2]
 800b56a:	2b7f      	cmp	r3, #127	; 0x7f
 800b56c:	d829      	bhi.n	800b5c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	885b      	ldrh	r3, [r3, #2]
 800b572:	b2db      	uxtb	r3, r3
 800b574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b578:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b580:	b2db      	uxtb	r3, r3
 800b582:	2b03      	cmp	r3, #3
 800b584:	d104      	bne.n	800b590 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b586:	6839      	ldr	r1, [r7, #0]
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 f9bc 	bl	800b906 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b58e:	e01d      	b.n	800b5cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	7bfa      	ldrb	r2, [r7, #15]
 800b594:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b598:	7bfb      	ldrb	r3, [r7, #15]
 800b59a:	4619      	mov	r1, r3
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f004 f8ef 	bl	800f780 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 fa7a 	bl	800ba9c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b5a8:	7bfb      	ldrb	r3, [r7, #15]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d004      	beq.n	800b5b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2202      	movs	r2, #2
 800b5b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5b6:	e009      	b.n	800b5cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5c0:	e004      	b.n	800b5cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b5c2:	6839      	ldr	r1, [r7, #0]
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 f99e 	bl	800b906 <USBD_CtlError>
  }
}
 800b5ca:	bf00      	nop
 800b5cc:	bf00      	nop
 800b5ce:	3710      	adds	r7, #16
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	885b      	ldrh	r3, [r3, #2]
 800b5e6:	b2da      	uxtb	r2, r3
 800b5e8:	4b4e      	ldr	r3, [pc, #312]	; (800b724 <USBD_SetConfig+0x150>)
 800b5ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b5ec:	4b4d      	ldr	r3, [pc, #308]	; (800b724 <USBD_SetConfig+0x150>)
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d905      	bls.n	800b600 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b5f4:	6839      	ldr	r1, [r7, #0]
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 f985 	bl	800b906 <USBD_CtlError>
    return USBD_FAIL;
 800b5fc:	2303      	movs	r3, #3
 800b5fe:	e08c      	b.n	800b71a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b606:	b2db      	uxtb	r3, r3
 800b608:	2b02      	cmp	r3, #2
 800b60a:	d002      	beq.n	800b612 <USBD_SetConfig+0x3e>
 800b60c:	2b03      	cmp	r3, #3
 800b60e:	d029      	beq.n	800b664 <USBD_SetConfig+0x90>
 800b610:	e075      	b.n	800b6fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b612:	4b44      	ldr	r3, [pc, #272]	; (800b724 <USBD_SetConfig+0x150>)
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d020      	beq.n	800b65c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b61a:	4b42      	ldr	r3, [pc, #264]	; (800b724 <USBD_SetConfig+0x150>)
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	461a      	mov	r2, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b624:	4b3f      	ldr	r3, [pc, #252]	; (800b724 <USBD_SetConfig+0x150>)
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	4619      	mov	r1, r3
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f7fe ffe7 	bl	800a5fe <USBD_SetClassConfig>
 800b630:	4603      	mov	r3, r0
 800b632:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b634:	7bfb      	ldrb	r3, [r7, #15]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d008      	beq.n	800b64c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b63a:	6839      	ldr	r1, [r7, #0]
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 f962 	bl	800b906 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2202      	movs	r2, #2
 800b646:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b64a:	e065      	b.n	800b718 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 fa25 	bl	800ba9c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2203      	movs	r2, #3
 800b656:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b65a:	e05d      	b.n	800b718 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 fa1d 	bl	800ba9c <USBD_CtlSendStatus>
      break;
 800b662:	e059      	b.n	800b718 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b664:	4b2f      	ldr	r3, [pc, #188]	; (800b724 <USBD_SetConfig+0x150>)
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d112      	bne.n	800b692 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2202      	movs	r2, #2
 800b670:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b674:	4b2b      	ldr	r3, [pc, #172]	; (800b724 <USBD_SetConfig+0x150>)
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	461a      	mov	r2, r3
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b67e:	4b29      	ldr	r3, [pc, #164]	; (800b724 <USBD_SetConfig+0x150>)
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	4619      	mov	r1, r3
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f7fe ffd6 	bl	800a636 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 fa06 	bl	800ba9c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b690:	e042      	b.n	800b718 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b692:	4b24      	ldr	r3, [pc, #144]	; (800b724 <USBD_SetConfig+0x150>)
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	461a      	mov	r2, r3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d02a      	beq.n	800b6f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f7fe ffc4 	bl	800a636 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b6ae:	4b1d      	ldr	r3, [pc, #116]	; (800b724 <USBD_SetConfig+0x150>)
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b6b8:	4b1a      	ldr	r3, [pc, #104]	; (800b724 <USBD_SetConfig+0x150>)
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	4619      	mov	r1, r3
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f7fe ff9d 	bl	800a5fe <USBD_SetClassConfig>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b6c8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00f      	beq.n	800b6ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b6ce:	6839      	ldr	r1, [r7, #0]
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 f918 	bl	800b906 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	4619      	mov	r1, r3
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f7fe ffa9 	bl	800a636 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2202      	movs	r2, #2
 800b6e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b6ec:	e014      	b.n	800b718 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 f9d4 	bl	800ba9c <USBD_CtlSendStatus>
      break;
 800b6f4:	e010      	b.n	800b718 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 f9d0 	bl	800ba9c <USBD_CtlSendStatus>
      break;
 800b6fc:	e00c      	b.n	800b718 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b6fe:	6839      	ldr	r1, [r7, #0]
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 f900 	bl	800b906 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b706:	4b07      	ldr	r3, [pc, #28]	; (800b724 <USBD_SetConfig+0x150>)
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	4619      	mov	r1, r3
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f7fe ff92 	bl	800a636 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b712:	2303      	movs	r3, #3
 800b714:	73fb      	strb	r3, [r7, #15]
      break;
 800b716:	bf00      	nop
  }

  return ret;
 800b718:	7bfb      	ldrb	r3, [r7, #15]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	20000820 	.word	0x20000820

0800b728 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	88db      	ldrh	r3, [r3, #6]
 800b736:	2b01      	cmp	r3, #1
 800b738:	d004      	beq.n	800b744 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b73a:	6839      	ldr	r1, [r7, #0]
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 f8e2 	bl	800b906 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b742:	e023      	b.n	800b78c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	2b02      	cmp	r3, #2
 800b74e:	dc02      	bgt.n	800b756 <USBD_GetConfig+0x2e>
 800b750:	2b00      	cmp	r3, #0
 800b752:	dc03      	bgt.n	800b75c <USBD_GetConfig+0x34>
 800b754:	e015      	b.n	800b782 <USBD_GetConfig+0x5a>
 800b756:	2b03      	cmp	r3, #3
 800b758:	d00b      	beq.n	800b772 <USBD_GetConfig+0x4a>
 800b75a:	e012      	b.n	800b782 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	3308      	adds	r3, #8
 800b766:	2201      	movs	r2, #1
 800b768:	4619      	mov	r1, r3
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 f93c 	bl	800b9e8 <USBD_CtlSendData>
        break;
 800b770:	e00c      	b.n	800b78c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	3304      	adds	r3, #4
 800b776:	2201      	movs	r2, #1
 800b778:	4619      	mov	r1, r3
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 f934 	bl	800b9e8 <USBD_CtlSendData>
        break;
 800b780:	e004      	b.n	800b78c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b782:	6839      	ldr	r1, [r7, #0]
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 f8be 	bl	800b906 <USBD_CtlError>
        break;
 800b78a:	bf00      	nop
}
 800b78c:	bf00      	nop
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	3b01      	subs	r3, #1
 800b7a8:	2b02      	cmp	r3, #2
 800b7aa:	d81e      	bhi.n	800b7ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	88db      	ldrh	r3, [r3, #6]
 800b7b0:	2b02      	cmp	r3, #2
 800b7b2:	d004      	beq.n	800b7be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b7b4:	6839      	ldr	r1, [r7, #0]
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 f8a5 	bl	800b906 <USBD_CtlError>
        break;
 800b7bc:	e01a      	b.n	800b7f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d005      	beq.n	800b7da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	68db      	ldr	r3, [r3, #12]
 800b7d2:	f043 0202 	orr.w	r2, r3, #2
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	330c      	adds	r3, #12
 800b7de:	2202      	movs	r2, #2
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 f900 	bl	800b9e8 <USBD_CtlSendData>
      break;
 800b7e8:	e004      	b.n	800b7f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b7ea:	6839      	ldr	r1, [r7, #0]
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f000 f88a 	bl	800b906 <USBD_CtlError>
      break;
 800b7f2:	bf00      	nop
  }
}
 800b7f4:	bf00      	nop
 800b7f6:	3708      	adds	r7, #8
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	885b      	ldrh	r3, [r3, #2]
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d107      	bne.n	800b81e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2201      	movs	r2, #1
 800b812:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 f940 	bl	800ba9c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b81c:	e013      	b.n	800b846 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	885b      	ldrh	r3, [r3, #2]
 800b822:	2b02      	cmp	r3, #2
 800b824:	d10b      	bne.n	800b83e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	889b      	ldrh	r3, [r3, #4]
 800b82a:	0a1b      	lsrs	r3, r3, #8
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	b2da      	uxtb	r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 f930 	bl	800ba9c <USBD_CtlSendStatus>
}
 800b83c:	e003      	b.n	800b846 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b83e:	6839      	ldr	r1, [r7, #0]
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 f860 	bl	800b906 <USBD_CtlError>
}
 800b846:	bf00      	nop
 800b848:	3708      	adds	r7, #8
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b84e:	b580      	push	{r7, lr}
 800b850:	b082      	sub	sp, #8
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
 800b856:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b85e:	b2db      	uxtb	r3, r3
 800b860:	3b01      	subs	r3, #1
 800b862:	2b02      	cmp	r3, #2
 800b864:	d80b      	bhi.n	800b87e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	885b      	ldrh	r3, [r3, #2]
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d10c      	bne.n	800b888 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2200      	movs	r2, #0
 800b872:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 f910 	bl	800ba9c <USBD_CtlSendStatus>
      }
      break;
 800b87c:	e004      	b.n	800b888 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b87e:	6839      	ldr	r1, [r7, #0]
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 f840 	bl	800b906 <USBD_CtlError>
      break;
 800b886:	e000      	b.n	800b88a <USBD_ClrFeature+0x3c>
      break;
 800b888:	bf00      	nop
  }
}
 800b88a:	bf00      	nop
 800b88c:	3708      	adds	r7, #8
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}

0800b892 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b892:	b580      	push	{r7, lr}
 800b894:	b084      	sub	sp, #16
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
 800b89a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	781a      	ldrb	r2, [r3, #0]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	781a      	ldrb	r2, [r3, #0]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b8bc:	68f8      	ldr	r0, [r7, #12]
 800b8be:	f7ff fa41 	bl	800ad44 <SWAPBYTE>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b8d6:	68f8      	ldr	r0, [r7, #12]
 800b8d8:	f7ff fa34 	bl	800ad44 <SWAPBYTE>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	461a      	mov	r2, r3
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b8f0:	68f8      	ldr	r0, [r7, #12]
 800b8f2:	f7ff fa27 	bl	800ad44 <SWAPBYTE>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	80da      	strh	r2, [r3, #6]
}
 800b8fe:	bf00      	nop
 800b900:	3710      	adds	r7, #16
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b906:	b580      	push	{r7, lr}
 800b908:	b082      	sub	sp, #8
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
 800b90e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b910:	2180      	movs	r1, #128	; 0x80
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f003 feca 	bl	800f6ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b918:	2100      	movs	r1, #0
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f003 fec6 	bl	800f6ac <USBD_LL_StallEP>
}
 800b920:	bf00      	nop
 800b922:	3708      	adds	r7, #8
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b086      	sub	sp, #24
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b934:	2300      	movs	r3, #0
 800b936:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d036      	beq.n	800b9ac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b942:	6938      	ldr	r0, [r7, #16]
 800b944:	f000 f836 	bl	800b9b4 <USBD_GetLen>
 800b948:	4603      	mov	r3, r0
 800b94a:	3301      	adds	r3, #1
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	005b      	lsls	r3, r3, #1
 800b950:	b29a      	uxth	r2, r3
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b956:	7dfb      	ldrb	r3, [r7, #23]
 800b958:	68ba      	ldr	r2, [r7, #8]
 800b95a:	4413      	add	r3, r2
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	7812      	ldrb	r2, [r2, #0]
 800b960:	701a      	strb	r2, [r3, #0]
  idx++;
 800b962:	7dfb      	ldrb	r3, [r7, #23]
 800b964:	3301      	adds	r3, #1
 800b966:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b968:	7dfb      	ldrb	r3, [r7, #23]
 800b96a:	68ba      	ldr	r2, [r7, #8]
 800b96c:	4413      	add	r3, r2
 800b96e:	2203      	movs	r2, #3
 800b970:	701a      	strb	r2, [r3, #0]
  idx++;
 800b972:	7dfb      	ldrb	r3, [r7, #23]
 800b974:	3301      	adds	r3, #1
 800b976:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b978:	e013      	b.n	800b9a2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b97a:	7dfb      	ldrb	r3, [r7, #23]
 800b97c:	68ba      	ldr	r2, [r7, #8]
 800b97e:	4413      	add	r3, r2
 800b980:	693a      	ldr	r2, [r7, #16]
 800b982:	7812      	ldrb	r2, [r2, #0]
 800b984:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	3301      	adds	r3, #1
 800b98a:	613b      	str	r3, [r7, #16]
    idx++;
 800b98c:	7dfb      	ldrb	r3, [r7, #23]
 800b98e:	3301      	adds	r3, #1
 800b990:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b992:	7dfb      	ldrb	r3, [r7, #23]
 800b994:	68ba      	ldr	r2, [r7, #8]
 800b996:	4413      	add	r3, r2
 800b998:	2200      	movs	r2, #0
 800b99a:	701a      	strb	r2, [r3, #0]
    idx++;
 800b99c:	7dfb      	ldrb	r3, [r7, #23]
 800b99e:	3301      	adds	r3, #1
 800b9a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	781b      	ldrb	r3, [r3, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d1e7      	bne.n	800b97a <USBD_GetString+0x52>
 800b9aa:	e000      	b.n	800b9ae <USBD_GetString+0x86>
    return;
 800b9ac:	bf00      	nop
  }
}
 800b9ae:	3718      	adds	r7, #24
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b085      	sub	sp, #20
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b9c4:	e005      	b.n	800b9d2 <USBD_GetLen+0x1e>
  {
    len++;
 800b9c6:	7bfb      	ldrb	r3, [r7, #15]
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d1f5      	bne.n	800b9c6 <USBD_GetLen+0x12>
  }

  return len;
 800b9da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3714      	adds	r7, #20
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2202      	movs	r2, #2
 800b9f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	68ba      	ldr	r2, [r7, #8]
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	f003 fed5 	bl	800f7be <USBD_LL_Transmit>

  return USBD_OK;
 800ba14:	2300      	movs	r3, #0
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b084      	sub	sp, #16
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	60f8      	str	r0, [r7, #12]
 800ba26:	60b9      	str	r1, [r7, #8]
 800ba28:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	2100      	movs	r1, #0
 800ba30:	68f8      	ldr	r0, [r7, #12]
 800ba32:	f003 fec4 	bl	800f7be <USBD_LL_Transmit>

  return USBD_OK;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3710      	adds	r7, #16
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2203      	movs	r2, #3
 800ba50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	68ba      	ldr	r2, [r7, #8]
 800ba68:	2100      	movs	r1, #0
 800ba6a:	68f8      	ldr	r0, [r7, #12]
 800ba6c:	f003 fec8 	bl	800f800 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba70:	2300      	movs	r3, #0
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3710      	adds	r7, #16
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}

0800ba7a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	b084      	sub	sp, #16
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	60f8      	str	r0, [r7, #12]
 800ba82:	60b9      	str	r1, [r7, #8]
 800ba84:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	68ba      	ldr	r2, [r7, #8]
 800ba8a:	2100      	movs	r1, #0
 800ba8c:	68f8      	ldr	r0, [r7, #12]
 800ba8e:	f003 feb7 	bl	800f800 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba92:	2300      	movs	r3, #0
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3710      	adds	r7, #16
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2204      	movs	r2, #4
 800baa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800baac:	2300      	movs	r3, #0
 800baae:	2200      	movs	r2, #0
 800bab0:	2100      	movs	r1, #0
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f003 fe83 	bl	800f7be <USBD_LL_Transmit>

  return USBD_OK;
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	3708      	adds	r7, #8
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}

0800bac2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bac2:	b580      	push	{r7, lr}
 800bac4:	b082      	sub	sp, #8
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2205      	movs	r2, #5
 800bace:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bad2:	2300      	movs	r3, #0
 800bad4:	2200      	movs	r2, #0
 800bad6:	2100      	movs	r1, #0
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f003 fe91 	bl	800f800 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3708      	adds	r7, #8
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <__NVIC_SetPriority>:
{
 800bae8:	b480      	push	{r7}
 800baea:	b083      	sub	sp, #12
 800baec:	af00      	add	r7, sp, #0
 800baee:	4603      	mov	r3, r0
 800baf0:	6039      	str	r1, [r7, #0]
 800baf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800baf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	db0a      	blt.n	800bb12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	b2da      	uxtb	r2, r3
 800bb00:	490c      	ldr	r1, [pc, #48]	; (800bb34 <__NVIC_SetPriority+0x4c>)
 800bb02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb06:	0112      	lsls	r2, r2, #4
 800bb08:	b2d2      	uxtb	r2, r2
 800bb0a:	440b      	add	r3, r1
 800bb0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bb10:	e00a      	b.n	800bb28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	b2da      	uxtb	r2, r3
 800bb16:	4908      	ldr	r1, [pc, #32]	; (800bb38 <__NVIC_SetPriority+0x50>)
 800bb18:	79fb      	ldrb	r3, [r7, #7]
 800bb1a:	f003 030f 	and.w	r3, r3, #15
 800bb1e:	3b04      	subs	r3, #4
 800bb20:	0112      	lsls	r2, r2, #4
 800bb22:	b2d2      	uxtb	r2, r2
 800bb24:	440b      	add	r3, r1
 800bb26:	761a      	strb	r2, [r3, #24]
}
 800bb28:	bf00      	nop
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr
 800bb34:	e000e100 	.word	0xe000e100
 800bb38:	e000ed00 	.word	0xe000ed00

0800bb3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bb40:	4b05      	ldr	r3, [pc, #20]	; (800bb58 <SysTick_Handler+0x1c>)
 800bb42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bb44:	f002 f85a 	bl	800dbfc <xTaskGetSchedulerState>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b01      	cmp	r3, #1
 800bb4c:	d001      	beq.n	800bb52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bb4e:	f002 ff43 	bl	800e9d8 <xPortSysTickHandler>
  }
}
 800bb52:	bf00      	nop
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	e000e010 	.word	0xe000e010

0800bb5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bb60:	2100      	movs	r1, #0
 800bb62:	f06f 0004 	mvn.w	r0, #4
 800bb66:	f7ff ffbf 	bl	800bae8 <__NVIC_SetPriority>
#endif
}
 800bb6a:	bf00      	nop
 800bb6c:	bd80      	pop	{r7, pc}
	...

0800bb70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bb70:	b480      	push	{r7}
 800bb72:	b083      	sub	sp, #12
 800bb74:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb76:	f3ef 8305 	mrs	r3, IPSR
 800bb7a:	603b      	str	r3, [r7, #0]
  return(result);
 800bb7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d003      	beq.n	800bb8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bb82:	f06f 0305 	mvn.w	r3, #5
 800bb86:	607b      	str	r3, [r7, #4]
 800bb88:	e00c      	b.n	800bba4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bb8a:	4b0a      	ldr	r3, [pc, #40]	; (800bbb4 <osKernelInitialize+0x44>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d105      	bne.n	800bb9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bb92:	4b08      	ldr	r3, [pc, #32]	; (800bbb4 <osKernelInitialize+0x44>)
 800bb94:	2201      	movs	r2, #1
 800bb96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	607b      	str	r3, [r7, #4]
 800bb9c:	e002      	b.n	800bba4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bb9e:	f04f 33ff 	mov.w	r3, #4294967295
 800bba2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bba4:	687b      	ldr	r3, [r7, #4]
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	370c      	adds	r7, #12
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr
 800bbb2:	bf00      	nop
 800bbb4:	20000824 	.word	0x20000824

0800bbb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbbe:	f3ef 8305 	mrs	r3, IPSR
 800bbc2:	603b      	str	r3, [r7, #0]
  return(result);
 800bbc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d003      	beq.n	800bbd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800bbca:	f06f 0305 	mvn.w	r3, #5
 800bbce:	607b      	str	r3, [r7, #4]
 800bbd0:	e010      	b.n	800bbf4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bbd2:	4b0b      	ldr	r3, [pc, #44]	; (800bc00 <osKernelStart+0x48>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	2b01      	cmp	r3, #1
 800bbd8:	d109      	bne.n	800bbee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bbda:	f7ff ffbf 	bl	800bb5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bbde:	4b08      	ldr	r3, [pc, #32]	; (800bc00 <osKernelStart+0x48>)
 800bbe0:	2202      	movs	r2, #2
 800bbe2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bbe4:	f001 fb9e 	bl	800d324 <vTaskStartScheduler>
      stat = osOK;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	607b      	str	r3, [r7, #4]
 800bbec:	e002      	b.n	800bbf4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bbee:	f04f 33ff 	mov.w	r3, #4294967295
 800bbf2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bbf4:	687b      	ldr	r3, [r7, #4]
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3708      	adds	r7, #8
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	20000824 	.word	0x20000824

0800bc04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b08e      	sub	sp, #56	; 0x38
 800bc08:	af04      	add	r7, sp, #16
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bc10:	2300      	movs	r3, #0
 800bc12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc14:	f3ef 8305 	mrs	r3, IPSR
 800bc18:	617b      	str	r3, [r7, #20]
  return(result);
 800bc1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d17e      	bne.n	800bd1e <osThreadNew+0x11a>
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d07b      	beq.n	800bd1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bc26:	2380      	movs	r3, #128	; 0x80
 800bc28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bc2a:	2318      	movs	r3, #24
 800bc2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bc32:	f04f 33ff 	mov.w	r3, #4294967295
 800bc36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d045      	beq.n	800bcca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d002      	beq.n	800bc4c <osThreadNew+0x48>
        name = attr->name;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	699b      	ldr	r3, [r3, #24]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d002      	beq.n	800bc5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	699b      	ldr	r3, [r3, #24]
 800bc58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bc5a:	69fb      	ldr	r3, [r7, #28]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d008      	beq.n	800bc72 <osThreadNew+0x6e>
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	2b38      	cmp	r3, #56	; 0x38
 800bc64:	d805      	bhi.n	800bc72 <osThreadNew+0x6e>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	f003 0301 	and.w	r3, r3, #1
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d001      	beq.n	800bc76 <osThreadNew+0x72>
        return (NULL);
 800bc72:	2300      	movs	r3, #0
 800bc74:	e054      	b.n	800bd20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	695b      	ldr	r3, [r3, #20]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d003      	beq.n	800bc86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	695b      	ldr	r3, [r3, #20]
 800bc82:	089b      	lsrs	r3, r3, #2
 800bc84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d00e      	beq.n	800bcac <osThreadNew+0xa8>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	68db      	ldr	r3, [r3, #12]
 800bc92:	2bbb      	cmp	r3, #187	; 0xbb
 800bc94:	d90a      	bls.n	800bcac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d006      	beq.n	800bcac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	695b      	ldr	r3, [r3, #20]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d002      	beq.n	800bcac <osThreadNew+0xa8>
        mem = 1;
 800bca6:	2301      	movs	r3, #1
 800bca8:	61bb      	str	r3, [r7, #24]
 800bcaa:	e010      	b.n	800bcce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	689b      	ldr	r3, [r3, #8]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d10c      	bne.n	800bcce <osThreadNew+0xca>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	68db      	ldr	r3, [r3, #12]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d108      	bne.n	800bcce <osThreadNew+0xca>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	691b      	ldr	r3, [r3, #16]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d104      	bne.n	800bcce <osThreadNew+0xca>
          mem = 0;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	61bb      	str	r3, [r7, #24]
 800bcc8:	e001      	b.n	800bcce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bcca:	2300      	movs	r3, #0
 800bccc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bcce:	69bb      	ldr	r3, [r7, #24]
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	d110      	bne.n	800bcf6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bcdc:	9202      	str	r2, [sp, #8]
 800bcde:	9301      	str	r3, [sp, #4]
 800bce0:	69fb      	ldr	r3, [r7, #28]
 800bce2:	9300      	str	r3, [sp, #0]
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	6a3a      	ldr	r2, [r7, #32]
 800bce8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bcea:	68f8      	ldr	r0, [r7, #12]
 800bcec:	f001 f92e 	bl	800cf4c <xTaskCreateStatic>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	613b      	str	r3, [r7, #16]
 800bcf4:	e013      	b.n	800bd1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bcf6:	69bb      	ldr	r3, [r7, #24]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d110      	bne.n	800bd1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bcfc:	6a3b      	ldr	r3, [r7, #32]
 800bcfe:	b29a      	uxth	r2, r3
 800bd00:	f107 0310 	add.w	r3, r7, #16
 800bd04:	9301      	str	r3, [sp, #4]
 800bd06:	69fb      	ldr	r3, [r7, #28]
 800bd08:	9300      	str	r3, [sp, #0]
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd0e:	68f8      	ldr	r0, [r7, #12]
 800bd10:	f001 f979 	bl	800d006 <xTaskCreate>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d001      	beq.n	800bd1e <osThreadNew+0x11a>
            hTask = NULL;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bd1e:	693b      	ldr	r3, [r7, #16]
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3728      	adds	r7, #40	; 0x28
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd30:	f3ef 8305 	mrs	r3, IPSR
 800bd34:	60bb      	str	r3, [r7, #8]
  return(result);
 800bd36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d003      	beq.n	800bd44 <osDelay+0x1c>
    stat = osErrorISR;
 800bd3c:	f06f 0305 	mvn.w	r3, #5
 800bd40:	60fb      	str	r3, [r7, #12]
 800bd42:	e007      	b.n	800bd54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bd44:	2300      	movs	r3, #0
 800bd46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d002      	beq.n	800bd54 <osDelay+0x2c>
      vTaskDelay(ticks);
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f001 fab4 	bl	800d2bc <vTaskDelay>
    }
  }

  return (stat);
 800bd54:	68fb      	ldr	r3, [r7, #12]
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3710      	adds	r7, #16
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}

0800bd5e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800bd5e:	b580      	push	{r7, lr}
 800bd60:	b088      	sub	sp, #32
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800bd66:	2300      	movs	r3, #0
 800bd68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd6a:	f3ef 8305 	mrs	r3, IPSR
 800bd6e:	60bb      	str	r3, [r7, #8]
  return(result);
 800bd70:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d174      	bne.n	800be60 <osMutexNew+0x102>
    if (attr != NULL) {
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d003      	beq.n	800bd84 <osMutexNew+0x26>
      type = attr->attr_bits;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	61bb      	str	r3, [r7, #24]
 800bd82:	e001      	b.n	800bd88 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800bd84:	2300      	movs	r3, #0
 800bd86:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	f003 0301 	and.w	r3, r3, #1
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d002      	beq.n	800bd98 <osMutexNew+0x3a>
      rmtx = 1U;
 800bd92:	2301      	movs	r3, #1
 800bd94:	617b      	str	r3, [r7, #20]
 800bd96:	e001      	b.n	800bd9c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800bd9c:	69bb      	ldr	r3, [r7, #24]
 800bd9e:	f003 0308 	and.w	r3, r3, #8
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d15c      	bne.n	800be60 <osMutexNew+0x102>
      mem = -1;
 800bda6:	f04f 33ff 	mov.w	r3, #4294967295
 800bdaa:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d015      	beq.n	800bdde <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	689b      	ldr	r3, [r3, #8]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d006      	beq.n	800bdc8 <osMutexNew+0x6a>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	2b4f      	cmp	r3, #79	; 0x4f
 800bdc0:	d902      	bls.n	800bdc8 <osMutexNew+0x6a>
          mem = 1;
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	613b      	str	r3, [r7, #16]
 800bdc6:	e00c      	b.n	800bde2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d108      	bne.n	800bde2 <osMutexNew+0x84>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	68db      	ldr	r3, [r3, #12]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d104      	bne.n	800bde2 <osMutexNew+0x84>
            mem = 0;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	613b      	str	r3, [r7, #16]
 800bddc:	e001      	b.n	800bde2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800bdde:	2300      	movs	r3, #0
 800bde0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d112      	bne.n	800be0e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d007      	beq.n	800bdfe <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	2004      	movs	r0, #4
 800bdf6:	f000 fb18 	bl	800c42a <xQueueCreateMutexStatic>
 800bdfa:	61f8      	str	r0, [r7, #28]
 800bdfc:	e016      	b.n	800be2c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	689b      	ldr	r3, [r3, #8]
 800be02:	4619      	mov	r1, r3
 800be04:	2001      	movs	r0, #1
 800be06:	f000 fb10 	bl	800c42a <xQueueCreateMutexStatic>
 800be0a:	61f8      	str	r0, [r7, #28]
 800be0c:	e00e      	b.n	800be2c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d10b      	bne.n	800be2c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d004      	beq.n	800be24 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800be1a:	2004      	movs	r0, #4
 800be1c:	f000 faed 	bl	800c3fa <xQueueCreateMutex>
 800be20:	61f8      	str	r0, [r7, #28]
 800be22:	e003      	b.n	800be2c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800be24:	2001      	movs	r0, #1
 800be26:	f000 fae8 	bl	800c3fa <xQueueCreateMutex>
 800be2a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d00c      	beq.n	800be4c <osMutexNew+0xee>
        if (attr != NULL) {
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d003      	beq.n	800be40 <osMutexNew+0xe2>
          name = attr->name;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	60fb      	str	r3, [r7, #12]
 800be3e:	e001      	b.n	800be44 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800be40:	2300      	movs	r3, #0
 800be42:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800be44:	68f9      	ldr	r1, [r7, #12]
 800be46:	69f8      	ldr	r0, [r7, #28]
 800be48:	f001 f822 	bl	800ce90 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800be4c:	69fb      	ldr	r3, [r7, #28]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d006      	beq.n	800be60 <osMutexNew+0x102>
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d003      	beq.n	800be60 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	f043 0301 	orr.w	r3, r3, #1
 800be5e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800be60:	69fb      	ldr	r3, [r7, #28]
}
 800be62:	4618      	mov	r0, r3
 800be64:	3720      	adds	r7, #32
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}

0800be6a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800be6a:	b580      	push	{r7, lr}
 800be6c:	b086      	sub	sp, #24
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
 800be72:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f023 0301 	bic.w	r3, r3, #1
 800be7a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f003 0301 	and.w	r3, r3, #1
 800be82:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800be84:	2300      	movs	r3, #0
 800be86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be88:	f3ef 8305 	mrs	r3, IPSR
 800be8c:	60bb      	str	r3, [r7, #8]
  return(result);
 800be8e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800be90:	2b00      	cmp	r3, #0
 800be92:	d003      	beq.n	800be9c <osMutexAcquire+0x32>
    stat = osErrorISR;
 800be94:	f06f 0305 	mvn.w	r3, #5
 800be98:	617b      	str	r3, [r7, #20]
 800be9a:	e02c      	b.n	800bef6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d103      	bne.n	800beaa <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800bea2:	f06f 0303 	mvn.w	r3, #3
 800bea6:	617b      	str	r3, [r7, #20]
 800bea8:	e025      	b.n	800bef6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d011      	beq.n	800bed4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800beb0:	6839      	ldr	r1, [r7, #0]
 800beb2:	6938      	ldr	r0, [r7, #16]
 800beb4:	f000 fb08 	bl	800c4c8 <xQueueTakeMutexRecursive>
 800beb8:	4603      	mov	r3, r0
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d01b      	beq.n	800bef6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d003      	beq.n	800becc <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800bec4:	f06f 0301 	mvn.w	r3, #1
 800bec8:	617b      	str	r3, [r7, #20]
 800beca:	e014      	b.n	800bef6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800becc:	f06f 0302 	mvn.w	r3, #2
 800bed0:	617b      	str	r3, [r7, #20]
 800bed2:	e010      	b.n	800bef6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800bed4:	6839      	ldr	r1, [r7, #0]
 800bed6:	6938      	ldr	r0, [r7, #16]
 800bed8:	f000 fda6 	bl	800ca28 <xQueueSemaphoreTake>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d009      	beq.n	800bef6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d003      	beq.n	800bef0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800bee8:	f06f 0301 	mvn.w	r3, #1
 800beec:	617b      	str	r3, [r7, #20]
 800beee:	e002      	b.n	800bef6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800bef0:	f06f 0302 	mvn.w	r3, #2
 800bef4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800bef6:	697b      	ldr	r3, [r7, #20]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3718      	adds	r7, #24
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b086      	sub	sp, #24
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f023 0301 	bic.w	r3, r3, #1
 800bf0e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f003 0301 	and.w	r3, r3, #1
 800bf16:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf1c:	f3ef 8305 	mrs	r3, IPSR
 800bf20:	60bb      	str	r3, [r7, #8]
  return(result);
 800bf22:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d003      	beq.n	800bf30 <osMutexRelease+0x30>
    stat = osErrorISR;
 800bf28:	f06f 0305 	mvn.w	r3, #5
 800bf2c:	617b      	str	r3, [r7, #20]
 800bf2e:	e01f      	b.n	800bf70 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d103      	bne.n	800bf3e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800bf36:	f06f 0303 	mvn.w	r3, #3
 800bf3a:	617b      	str	r3, [r7, #20]
 800bf3c:	e018      	b.n	800bf70 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d009      	beq.n	800bf58 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800bf44:	6938      	ldr	r0, [r7, #16]
 800bf46:	f000 fa8b 	bl	800c460 <xQueueGiveMutexRecursive>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d00f      	beq.n	800bf70 <osMutexRelease+0x70>
        stat = osErrorResource;
 800bf50:	f06f 0302 	mvn.w	r3, #2
 800bf54:	617b      	str	r3, [r7, #20]
 800bf56:	e00b      	b.n	800bf70 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800bf58:	2300      	movs	r3, #0
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	2100      	movs	r1, #0
 800bf5e:	6938      	ldr	r0, [r7, #16]
 800bf60:	f000 fae8 	bl	800c534 <xQueueGenericSend>
 800bf64:	4603      	mov	r3, r0
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d002      	beq.n	800bf70 <osMutexRelease+0x70>
        stat = osErrorResource;
 800bf6a:	f06f 0302 	mvn.w	r3, #2
 800bf6e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800bf70:	697b      	ldr	r3, [r7, #20]
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3718      	adds	r7, #24
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
	...

0800bf7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bf7c:	b480      	push	{r7}
 800bf7e:	b085      	sub	sp, #20
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	4a07      	ldr	r2, [pc, #28]	; (800bfa8 <vApplicationGetIdleTaskMemory+0x2c>)
 800bf8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	4a06      	ldr	r2, [pc, #24]	; (800bfac <vApplicationGetIdleTaskMemory+0x30>)
 800bf92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2280      	movs	r2, #128	; 0x80
 800bf98:	601a      	str	r2, [r3, #0]
}
 800bf9a:	bf00      	nop
 800bf9c:	3714      	adds	r7, #20
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop
 800bfa8:	20000828 	.word	0x20000828
 800bfac:	200008e4 	.word	0x200008e4

0800bfb0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bfb0:	b480      	push	{r7}
 800bfb2:	b085      	sub	sp, #20
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	4a07      	ldr	r2, [pc, #28]	; (800bfdc <vApplicationGetTimerTaskMemory+0x2c>)
 800bfc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	4a06      	ldr	r2, [pc, #24]	; (800bfe0 <vApplicationGetTimerTaskMemory+0x30>)
 800bfc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bfce:	601a      	str	r2, [r3, #0]
}
 800bfd0:	bf00      	nop
 800bfd2:	3714      	adds	r7, #20
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr
 800bfdc:	20000ae4 	.word	0x20000ae4
 800bfe0:	20000ba0 	.word	0x20000ba0

0800bfe4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f103 0208 	add.w	r2, r3, #8
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f04f 32ff 	mov.w	r2, #4294967295
 800bffc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f103 0208 	add.w	r2, r3, #8
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f103 0208 	add.w	r2, r3, #8
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2200      	movs	r2, #0
 800c016:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c018:	bf00      	nop
 800c01a:	370c      	adds	r7, #12
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr

0800c024 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2200      	movs	r2, #0
 800c030:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c032:	bf00      	nop
 800c034:	370c      	adds	r7, #12
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr

0800c03e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c03e:	b480      	push	{r7}
 800c040:	b085      	sub	sp, #20
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
 800c046:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	68fa      	ldr	r2, [r7, #12]
 800c052:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	689a      	ldr	r2, [r3, #8]
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	689b      	ldr	r3, [r3, #8]
 800c060:	683a      	ldr	r2, [r7, #0]
 800c062:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	683a      	ldr	r2, [r7, #0]
 800c068:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	1c5a      	adds	r2, r3, #1
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	601a      	str	r2, [r3, #0]
}
 800c07a:	bf00      	nop
 800c07c:	3714      	adds	r7, #20
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr

0800c086 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c086:	b480      	push	{r7}
 800c088:	b085      	sub	sp, #20
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
 800c08e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c09c:	d103      	bne.n	800c0a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	691b      	ldr	r3, [r3, #16]
 800c0a2:	60fb      	str	r3, [r7, #12]
 800c0a4:	e00c      	b.n	800c0c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	3308      	adds	r3, #8
 800c0aa:	60fb      	str	r3, [r7, #12]
 800c0ac:	e002      	b.n	800c0b4 <vListInsert+0x2e>
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	685b      	ldr	r3, [r3, #4]
 800c0b2:	60fb      	str	r3, [r7, #12]
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	68ba      	ldr	r2, [r7, #8]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d2f6      	bcs.n	800c0ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	685a      	ldr	r2, [r3, #4]
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	683a      	ldr	r2, [r7, #0]
 800c0ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	68fa      	ldr	r2, [r7, #12]
 800c0d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	683a      	ldr	r2, [r7, #0]
 800c0da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	1c5a      	adds	r2, r3, #1
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	601a      	str	r2, [r3, #0]
}
 800c0ec:	bf00      	nop
 800c0ee:	3714      	adds	r7, #20
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b085      	sub	sp, #20
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	691b      	ldr	r3, [r3, #16]
 800c104:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	6892      	ldr	r2, [r2, #8]
 800c10e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	689b      	ldr	r3, [r3, #8]
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	6852      	ldr	r2, [r2, #4]
 800c118:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	429a      	cmp	r2, r3
 800c122:	d103      	bne.n	800c12c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	689a      	ldr	r2, [r3, #8]
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	1e5a      	subs	r2, r3, #1
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
}
 800c140:	4618      	mov	r0, r3
 800c142:	3714      	adds	r7, #20
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d10a      	bne.n	800c176 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c164:	f383 8811 	msr	BASEPRI, r3
 800c168:	f3bf 8f6f 	isb	sy
 800c16c:	f3bf 8f4f 	dsb	sy
 800c170:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c172:	bf00      	nop
 800c174:	e7fe      	b.n	800c174 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c176:	f002 fb9d 	bl	800e8b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c182:	68f9      	ldr	r1, [r7, #12]
 800c184:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c186:	fb01 f303 	mul.w	r3, r1, r3
 800c18a:	441a      	add	r2, r3
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2200      	movs	r2, #0
 800c194:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681a      	ldr	r2, [r3, #0]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1a6:	3b01      	subs	r3, #1
 800c1a8:	68f9      	ldr	r1, [r7, #12]
 800c1aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c1ac:	fb01 f303 	mul.w	r3, r1, r3
 800c1b0:	441a      	add	r2, r3
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	22ff      	movs	r2, #255	; 0xff
 800c1ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	22ff      	movs	r2, #255	; 0xff
 800c1c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d114      	bne.n	800c1f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	691b      	ldr	r3, [r3, #16]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d01a      	beq.n	800c20a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	3310      	adds	r3, #16
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f001 fb3d 	bl	800d858 <xTaskRemoveFromEventList>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d012      	beq.n	800c20a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c1e4:	4b0c      	ldr	r3, [pc, #48]	; (800c218 <xQueueGenericReset+0xcc>)
 800c1e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1ea:	601a      	str	r2, [r3, #0]
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	f3bf 8f6f 	isb	sy
 800c1f4:	e009      	b.n	800c20a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	3310      	adds	r3, #16
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7ff fef2 	bl	800bfe4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	3324      	adds	r3, #36	; 0x24
 800c204:	4618      	mov	r0, r3
 800c206:	f7ff feed 	bl	800bfe4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c20a:	f002 fb83 	bl	800e914 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c20e:	2301      	movs	r3, #1
}
 800c210:	4618      	mov	r0, r3
 800c212:	3710      	adds	r7, #16
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}
 800c218:	e000ed04 	.word	0xe000ed04

0800c21c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b08e      	sub	sp, #56	; 0x38
 800c220:	af02      	add	r7, sp, #8
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
 800c228:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d10a      	bne.n	800c246 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c234:	f383 8811 	msr	BASEPRI, r3
 800c238:	f3bf 8f6f 	isb	sy
 800c23c:	f3bf 8f4f 	dsb	sy
 800c240:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c242:	bf00      	nop
 800c244:	e7fe      	b.n	800c244 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d10a      	bne.n	800c262 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c250:	f383 8811 	msr	BASEPRI, r3
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	f3bf 8f4f 	dsb	sy
 800c25c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c25e:	bf00      	nop
 800c260:	e7fe      	b.n	800c260 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d002      	beq.n	800c26e <xQueueGenericCreateStatic+0x52>
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d001      	beq.n	800c272 <xQueueGenericCreateStatic+0x56>
 800c26e:	2301      	movs	r3, #1
 800c270:	e000      	b.n	800c274 <xQueueGenericCreateStatic+0x58>
 800c272:	2300      	movs	r3, #0
 800c274:	2b00      	cmp	r3, #0
 800c276:	d10a      	bne.n	800c28e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27c:	f383 8811 	msr	BASEPRI, r3
 800c280:	f3bf 8f6f 	isb	sy
 800c284:	f3bf 8f4f 	dsb	sy
 800c288:	623b      	str	r3, [r7, #32]
}
 800c28a:	bf00      	nop
 800c28c:	e7fe      	b.n	800c28c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d102      	bne.n	800c29a <xQueueGenericCreateStatic+0x7e>
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d101      	bne.n	800c29e <xQueueGenericCreateStatic+0x82>
 800c29a:	2301      	movs	r3, #1
 800c29c:	e000      	b.n	800c2a0 <xQueueGenericCreateStatic+0x84>
 800c29e:	2300      	movs	r3, #0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d10a      	bne.n	800c2ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a8:	f383 8811 	msr	BASEPRI, r3
 800c2ac:	f3bf 8f6f 	isb	sy
 800c2b0:	f3bf 8f4f 	dsb	sy
 800c2b4:	61fb      	str	r3, [r7, #28]
}
 800c2b6:	bf00      	nop
 800c2b8:	e7fe      	b.n	800c2b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c2ba:	2350      	movs	r3, #80	; 0x50
 800c2bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	2b50      	cmp	r3, #80	; 0x50
 800c2c2:	d00a      	beq.n	800c2da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c8:	f383 8811 	msr	BASEPRI, r3
 800c2cc:	f3bf 8f6f 	isb	sy
 800c2d0:	f3bf 8f4f 	dsb	sy
 800c2d4:	61bb      	str	r3, [r7, #24]
}
 800c2d6:	bf00      	nop
 800c2d8:	e7fe      	b.n	800c2d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c2da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d00d      	beq.n	800c302 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c2ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f4:	9300      	str	r3, [sp, #0]
 800c2f6:	4613      	mov	r3, r2
 800c2f8:	687a      	ldr	r2, [r7, #4]
 800c2fa:	68b9      	ldr	r1, [r7, #8]
 800c2fc:	68f8      	ldr	r0, [r7, #12]
 800c2fe:	f000 f83f 	bl	800c380 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c304:	4618      	mov	r0, r3
 800c306:	3730      	adds	r7, #48	; 0x30
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b08a      	sub	sp, #40	; 0x28
 800c310:	af02      	add	r7, sp, #8
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	4613      	mov	r3, r2
 800c318:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d10a      	bne.n	800c336 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c324:	f383 8811 	msr	BASEPRI, r3
 800c328:	f3bf 8f6f 	isb	sy
 800c32c:	f3bf 8f4f 	dsb	sy
 800c330:	613b      	str	r3, [r7, #16]
}
 800c332:	bf00      	nop
 800c334:	e7fe      	b.n	800c334 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	68ba      	ldr	r2, [r7, #8]
 800c33a:	fb02 f303 	mul.w	r3, r2, r3
 800c33e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c340:	69fb      	ldr	r3, [r7, #28]
 800c342:	3350      	adds	r3, #80	; 0x50
 800c344:	4618      	mov	r0, r3
 800c346:	f002 fbd7 	bl	800eaf8 <pvPortMalloc>
 800c34a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c34c:	69bb      	ldr	r3, [r7, #24]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d011      	beq.n	800c376 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c352:	69bb      	ldr	r3, [r7, #24]
 800c354:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	3350      	adds	r3, #80	; 0x50
 800c35a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	2200      	movs	r2, #0
 800c360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c364:	79fa      	ldrb	r2, [r7, #7]
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	9300      	str	r3, [sp, #0]
 800c36a:	4613      	mov	r3, r2
 800c36c:	697a      	ldr	r2, [r7, #20]
 800c36e:	68b9      	ldr	r1, [r7, #8]
 800c370:	68f8      	ldr	r0, [r7, #12]
 800c372:	f000 f805 	bl	800c380 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c376:	69bb      	ldr	r3, [r7, #24]
	}
 800c378:	4618      	mov	r0, r3
 800c37a:	3720      	adds	r7, #32
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b084      	sub	sp, #16
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
 800c38c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d103      	bne.n	800c39c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c394:	69bb      	ldr	r3, [r7, #24]
 800c396:	69ba      	ldr	r2, [r7, #24]
 800c398:	601a      	str	r2, [r3, #0]
 800c39a:	e002      	b.n	800c3a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c3a2:	69bb      	ldr	r3, [r7, #24]
 800c3a4:	68fa      	ldr	r2, [r7, #12]
 800c3a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c3a8:	69bb      	ldr	r3, [r7, #24]
 800c3aa:	68ba      	ldr	r2, [r7, #8]
 800c3ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c3ae:	2101      	movs	r1, #1
 800c3b0:	69b8      	ldr	r0, [r7, #24]
 800c3b2:	f7ff fecb 	bl	800c14c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	78fa      	ldrb	r2, [r7, #3]
 800c3ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c3be:	bf00      	nop
 800c3c0:	3710      	adds	r7, #16
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}

0800c3c6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c3c6:	b580      	push	{r7, lr}
 800c3c8:	b082      	sub	sp, #8
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d00e      	beq.n	800c3f2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	2100      	movs	r1, #0
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 f8a1 	bl	800c534 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c3f2:	bf00      	nop
 800c3f4:	3708      	adds	r7, #8
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}

0800c3fa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c3fa:	b580      	push	{r7, lr}
 800c3fc:	b086      	sub	sp, #24
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	4603      	mov	r3, r0
 800c402:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c404:	2301      	movs	r3, #1
 800c406:	617b      	str	r3, [r7, #20]
 800c408:	2300      	movs	r3, #0
 800c40a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c40c:	79fb      	ldrb	r3, [r7, #7]
 800c40e:	461a      	mov	r2, r3
 800c410:	6939      	ldr	r1, [r7, #16]
 800c412:	6978      	ldr	r0, [r7, #20]
 800c414:	f7ff ff7a 	bl	800c30c <xQueueGenericCreate>
 800c418:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c41a:	68f8      	ldr	r0, [r7, #12]
 800c41c:	f7ff ffd3 	bl	800c3c6 <prvInitialiseMutex>

		return xNewQueue;
 800c420:	68fb      	ldr	r3, [r7, #12]
	}
 800c422:	4618      	mov	r0, r3
 800c424:	3718      	adds	r7, #24
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}

0800c42a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b088      	sub	sp, #32
 800c42e:	af02      	add	r7, sp, #8
 800c430:	4603      	mov	r3, r0
 800c432:	6039      	str	r1, [r7, #0]
 800c434:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c436:	2301      	movs	r3, #1
 800c438:	617b      	str	r3, [r7, #20]
 800c43a:	2300      	movs	r3, #0
 800c43c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c43e:	79fb      	ldrb	r3, [r7, #7]
 800c440:	9300      	str	r3, [sp, #0]
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	2200      	movs	r2, #0
 800c446:	6939      	ldr	r1, [r7, #16]
 800c448:	6978      	ldr	r0, [r7, #20]
 800c44a:	f7ff fee7 	bl	800c21c <xQueueGenericCreateStatic>
 800c44e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	f7ff ffb8 	bl	800c3c6 <prvInitialiseMutex>

		return xNewQueue;
 800c456:	68fb      	ldr	r3, [r7, #12]
	}
 800c458:	4618      	mov	r0, r3
 800c45a:	3718      	adds	r7, #24
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c460:	b590      	push	{r4, r7, lr}
 800c462:	b087      	sub	sp, #28
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d10a      	bne.n	800c488 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800c472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c476:	f383 8811 	msr	BASEPRI, r3
 800c47a:	f3bf 8f6f 	isb	sy
 800c47e:	f3bf 8f4f 	dsb	sy
 800c482:	60fb      	str	r3, [r7, #12]
}
 800c484:	bf00      	nop
 800c486:	e7fe      	b.n	800c486 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	689c      	ldr	r4, [r3, #8]
 800c48c:	f001 fba6 	bl	800dbdc <xTaskGetCurrentTaskHandle>
 800c490:	4603      	mov	r3, r0
 800c492:	429c      	cmp	r4, r3
 800c494:	d111      	bne.n	800c4ba <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	1e5a      	subs	r2, r3, #1
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	68db      	ldr	r3, [r3, #12]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d105      	bne.n	800c4b4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	6938      	ldr	r0, [r7, #16]
 800c4b0:	f000 f840 	bl	800c534 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	617b      	str	r3, [r7, #20]
 800c4b8:	e001      	b.n	800c4be <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800c4be:	697b      	ldr	r3, [r7, #20]
	}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	371c      	adds	r7, #28
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd90      	pop	{r4, r7, pc}

0800c4c8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800c4c8:	b590      	push	{r4, r7, lr}
 800c4ca:	b087      	sub	sp, #28
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d10a      	bne.n	800c4f2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800c4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e0:	f383 8811 	msr	BASEPRI, r3
 800c4e4:	f3bf 8f6f 	isb	sy
 800c4e8:	f3bf 8f4f 	dsb	sy
 800c4ec:	60fb      	str	r3, [r7, #12]
}
 800c4ee:	bf00      	nop
 800c4f0:	e7fe      	b.n	800c4f0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	689c      	ldr	r4, [r3, #8]
 800c4f6:	f001 fb71 	bl	800dbdc <xTaskGetCurrentTaskHandle>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	429c      	cmp	r4, r3
 800c4fe:	d107      	bne.n	800c510 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	68db      	ldr	r3, [r3, #12]
 800c504:	1c5a      	adds	r2, r3, #1
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800c50a:	2301      	movs	r3, #1
 800c50c:	617b      	str	r3, [r7, #20]
 800c50e:	e00c      	b.n	800c52a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c510:	6839      	ldr	r1, [r7, #0]
 800c512:	6938      	ldr	r0, [r7, #16]
 800c514:	f000 fa88 	bl	800ca28 <xQueueSemaphoreTake>
 800c518:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d004      	beq.n	800c52a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	68db      	ldr	r3, [r3, #12]
 800c524:	1c5a      	adds	r2, r3, #1
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800c52a:	697b      	ldr	r3, [r7, #20]
	}
 800c52c:	4618      	mov	r0, r3
 800c52e:	371c      	adds	r7, #28
 800c530:	46bd      	mov	sp, r7
 800c532:	bd90      	pop	{r4, r7, pc}

0800c534 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b08e      	sub	sp, #56	; 0x38
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	607a      	str	r2, [r7, #4]
 800c540:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c542:	2300      	movs	r3, #0
 800c544:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d10a      	bne.n	800c566 <xQueueGenericSend+0x32>
	__asm volatile
 800c550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c554:	f383 8811 	msr	BASEPRI, r3
 800c558:	f3bf 8f6f 	isb	sy
 800c55c:	f3bf 8f4f 	dsb	sy
 800c560:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c562:	bf00      	nop
 800c564:	e7fe      	b.n	800c564 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d103      	bne.n	800c574 <xQueueGenericSend+0x40>
 800c56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c56e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c570:	2b00      	cmp	r3, #0
 800c572:	d101      	bne.n	800c578 <xQueueGenericSend+0x44>
 800c574:	2301      	movs	r3, #1
 800c576:	e000      	b.n	800c57a <xQueueGenericSend+0x46>
 800c578:	2300      	movs	r3, #0
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d10a      	bne.n	800c594 <xQueueGenericSend+0x60>
	__asm volatile
 800c57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c590:	bf00      	nop
 800c592:	e7fe      	b.n	800c592 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	2b02      	cmp	r3, #2
 800c598:	d103      	bne.n	800c5a2 <xQueueGenericSend+0x6e>
 800c59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d101      	bne.n	800c5a6 <xQueueGenericSend+0x72>
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	e000      	b.n	800c5a8 <xQueueGenericSend+0x74>
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d10a      	bne.n	800c5c2 <xQueueGenericSend+0x8e>
	__asm volatile
 800c5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b0:	f383 8811 	msr	BASEPRI, r3
 800c5b4:	f3bf 8f6f 	isb	sy
 800c5b8:	f3bf 8f4f 	dsb	sy
 800c5bc:	623b      	str	r3, [r7, #32]
}
 800c5be:	bf00      	nop
 800c5c0:	e7fe      	b.n	800c5c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c5c2:	f001 fb1b 	bl	800dbfc <xTaskGetSchedulerState>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d102      	bne.n	800c5d2 <xQueueGenericSend+0x9e>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d101      	bne.n	800c5d6 <xQueueGenericSend+0xa2>
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	e000      	b.n	800c5d8 <xQueueGenericSend+0xa4>
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d10a      	bne.n	800c5f2 <xQueueGenericSend+0xbe>
	__asm volatile
 800c5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e0:	f383 8811 	msr	BASEPRI, r3
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	61fb      	str	r3, [r7, #28]
}
 800c5ee:	bf00      	nop
 800c5f0:	e7fe      	b.n	800c5f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c5f2:	f002 f95f 	bl	800e8b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d302      	bcc.n	800c608 <xQueueGenericSend+0xd4>
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	2b02      	cmp	r3, #2
 800c606:	d129      	bne.n	800c65c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c608:	683a      	ldr	r2, [r7, #0]
 800c60a:	68b9      	ldr	r1, [r7, #8]
 800c60c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c60e:	f000 fb2f 	bl	800cc70 <prvCopyDataToQueue>
 800c612:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d010      	beq.n	800c63e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61e:	3324      	adds	r3, #36	; 0x24
 800c620:	4618      	mov	r0, r3
 800c622:	f001 f919 	bl	800d858 <xTaskRemoveFromEventList>
 800c626:	4603      	mov	r3, r0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d013      	beq.n	800c654 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c62c:	4b3f      	ldr	r3, [pc, #252]	; (800c72c <xQueueGenericSend+0x1f8>)
 800c62e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c632:	601a      	str	r2, [r3, #0]
 800c634:	f3bf 8f4f 	dsb	sy
 800c638:	f3bf 8f6f 	isb	sy
 800c63c:	e00a      	b.n	800c654 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c640:	2b00      	cmp	r3, #0
 800c642:	d007      	beq.n	800c654 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c644:	4b39      	ldr	r3, [pc, #228]	; (800c72c <xQueueGenericSend+0x1f8>)
 800c646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c64a:	601a      	str	r2, [r3, #0]
 800c64c:	f3bf 8f4f 	dsb	sy
 800c650:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c654:	f002 f95e 	bl	800e914 <vPortExitCritical>
				return pdPASS;
 800c658:	2301      	movs	r3, #1
 800c65a:	e063      	b.n	800c724 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d103      	bne.n	800c66a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c662:	f002 f957 	bl	800e914 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c666:	2300      	movs	r3, #0
 800c668:	e05c      	b.n	800c724 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c66a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d106      	bne.n	800c67e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c670:	f107 0314 	add.w	r3, r7, #20
 800c674:	4618      	mov	r0, r3
 800c676:	f001 f953 	bl	800d920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c67a:	2301      	movs	r3, #1
 800c67c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c67e:	f002 f949 	bl	800e914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c682:	f000 febf 	bl	800d404 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c686:	f002 f915 	bl	800e8b4 <vPortEnterCritical>
 800c68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c690:	b25b      	sxtb	r3, r3
 800c692:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c696:	d103      	bne.n	800c6a0 <xQueueGenericSend+0x16c>
 800c698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69a:	2200      	movs	r2, #0
 800c69c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6a6:	b25b      	sxtb	r3, r3
 800c6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ac:	d103      	bne.n	800c6b6 <xQueueGenericSend+0x182>
 800c6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6b6:	f002 f92d 	bl	800e914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6ba:	1d3a      	adds	r2, r7, #4
 800c6bc:	f107 0314 	add.w	r3, r7, #20
 800c6c0:	4611      	mov	r1, r2
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f001 f942 	bl	800d94c <xTaskCheckForTimeOut>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d124      	bne.n	800c718 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c6ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6d0:	f000 fbc6 	bl	800ce60 <prvIsQueueFull>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d018      	beq.n	800c70c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6dc:	3310      	adds	r3, #16
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	4611      	mov	r1, r2
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f001 f868 	bl	800d7b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c6e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6ea:	f000 fb51 	bl	800cd90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c6ee:	f000 fe97 	bl	800d420 <xTaskResumeAll>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	f47f af7c 	bne.w	800c5f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c6fa:	4b0c      	ldr	r3, [pc, #48]	; (800c72c <xQueueGenericSend+0x1f8>)
 800c6fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c700:	601a      	str	r2, [r3, #0]
 800c702:	f3bf 8f4f 	dsb	sy
 800c706:	f3bf 8f6f 	isb	sy
 800c70a:	e772      	b.n	800c5f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c70c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c70e:	f000 fb3f 	bl	800cd90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c712:	f000 fe85 	bl	800d420 <xTaskResumeAll>
 800c716:	e76c      	b.n	800c5f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c71a:	f000 fb39 	bl	800cd90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c71e:	f000 fe7f 	bl	800d420 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c722:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c724:	4618      	mov	r0, r3
 800c726:	3738      	adds	r7, #56	; 0x38
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	e000ed04 	.word	0xe000ed04

0800c730 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b090      	sub	sp, #64	; 0x40
 800c734:	af00      	add	r7, sp, #0
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	60b9      	str	r1, [r7, #8]
 800c73a:	607a      	str	r2, [r7, #4]
 800c73c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c744:	2b00      	cmp	r3, #0
 800c746:	d10a      	bne.n	800c75e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74c:	f383 8811 	msr	BASEPRI, r3
 800c750:	f3bf 8f6f 	isb	sy
 800c754:	f3bf 8f4f 	dsb	sy
 800c758:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c75a:	bf00      	nop
 800c75c:	e7fe      	b.n	800c75c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d103      	bne.n	800c76c <xQueueGenericSendFromISR+0x3c>
 800c764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d101      	bne.n	800c770 <xQueueGenericSendFromISR+0x40>
 800c76c:	2301      	movs	r3, #1
 800c76e:	e000      	b.n	800c772 <xQueueGenericSendFromISR+0x42>
 800c770:	2300      	movs	r3, #0
 800c772:	2b00      	cmp	r3, #0
 800c774:	d10a      	bne.n	800c78c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77a:	f383 8811 	msr	BASEPRI, r3
 800c77e:	f3bf 8f6f 	isb	sy
 800c782:	f3bf 8f4f 	dsb	sy
 800c786:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c788:	bf00      	nop
 800c78a:	e7fe      	b.n	800c78a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	2b02      	cmp	r3, #2
 800c790:	d103      	bne.n	800c79a <xQueueGenericSendFromISR+0x6a>
 800c792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c796:	2b01      	cmp	r3, #1
 800c798:	d101      	bne.n	800c79e <xQueueGenericSendFromISR+0x6e>
 800c79a:	2301      	movs	r3, #1
 800c79c:	e000      	b.n	800c7a0 <xQueueGenericSendFromISR+0x70>
 800c79e:	2300      	movs	r3, #0
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d10a      	bne.n	800c7ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a8:	f383 8811 	msr	BASEPRI, r3
 800c7ac:	f3bf 8f6f 	isb	sy
 800c7b0:	f3bf 8f4f 	dsb	sy
 800c7b4:	623b      	str	r3, [r7, #32]
}
 800c7b6:	bf00      	nop
 800c7b8:	e7fe      	b.n	800c7b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c7ba:	f002 f95d 	bl	800ea78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c7be:	f3ef 8211 	mrs	r2, BASEPRI
 800c7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c6:	f383 8811 	msr	BASEPRI, r3
 800c7ca:	f3bf 8f6f 	isb	sy
 800c7ce:	f3bf 8f4f 	dsb	sy
 800c7d2:	61fa      	str	r2, [r7, #28]
 800c7d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c7d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c7d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d302      	bcc.n	800c7ec <xQueueGenericSendFromISR+0xbc>
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	2b02      	cmp	r3, #2
 800c7ea:	d12f      	bne.n	800c84c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c7fc:	683a      	ldr	r2, [r7, #0]
 800c7fe:	68b9      	ldr	r1, [r7, #8]
 800c800:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c802:	f000 fa35 	bl	800cc70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c806:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c80a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c80e:	d112      	bne.n	800c836 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c814:	2b00      	cmp	r3, #0
 800c816:	d016      	beq.n	800c846 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81a:	3324      	adds	r3, #36	; 0x24
 800c81c:	4618      	mov	r0, r3
 800c81e:	f001 f81b 	bl	800d858 <xTaskRemoveFromEventList>
 800c822:	4603      	mov	r3, r0
 800c824:	2b00      	cmp	r3, #0
 800c826:	d00e      	beq.n	800c846 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d00b      	beq.n	800c846 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2201      	movs	r2, #1
 800c832:	601a      	str	r2, [r3, #0]
 800c834:	e007      	b.n	800c846 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c836:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c83a:	3301      	adds	r3, #1
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	b25a      	sxtb	r2, r3
 800c840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c846:	2301      	movs	r3, #1
 800c848:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c84a:	e001      	b.n	800c850 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c84c:	2300      	movs	r3, #0
 800c84e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c852:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c85a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3740      	adds	r7, #64	; 0x40
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
	...

0800c868 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b08c      	sub	sp, #48	; 0x30
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c874:	2300      	movs	r3, #0
 800c876:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d10a      	bne.n	800c898 <xQueueReceive+0x30>
	__asm volatile
 800c882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c886:	f383 8811 	msr	BASEPRI, r3
 800c88a:	f3bf 8f6f 	isb	sy
 800c88e:	f3bf 8f4f 	dsb	sy
 800c892:	623b      	str	r3, [r7, #32]
}
 800c894:	bf00      	nop
 800c896:	e7fe      	b.n	800c896 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d103      	bne.n	800c8a6 <xQueueReceive+0x3e>
 800c89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d101      	bne.n	800c8aa <xQueueReceive+0x42>
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	e000      	b.n	800c8ac <xQueueReceive+0x44>
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d10a      	bne.n	800c8c6 <xQueueReceive+0x5e>
	__asm volatile
 800c8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b4:	f383 8811 	msr	BASEPRI, r3
 800c8b8:	f3bf 8f6f 	isb	sy
 800c8bc:	f3bf 8f4f 	dsb	sy
 800c8c0:	61fb      	str	r3, [r7, #28]
}
 800c8c2:	bf00      	nop
 800c8c4:	e7fe      	b.n	800c8c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c8c6:	f001 f999 	bl	800dbfc <xTaskGetSchedulerState>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d102      	bne.n	800c8d6 <xQueueReceive+0x6e>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d101      	bne.n	800c8da <xQueueReceive+0x72>
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	e000      	b.n	800c8dc <xQueueReceive+0x74>
 800c8da:	2300      	movs	r3, #0
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d10a      	bne.n	800c8f6 <xQueueReceive+0x8e>
	__asm volatile
 800c8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e4:	f383 8811 	msr	BASEPRI, r3
 800c8e8:	f3bf 8f6f 	isb	sy
 800c8ec:	f3bf 8f4f 	dsb	sy
 800c8f0:	61bb      	str	r3, [r7, #24]
}
 800c8f2:	bf00      	nop
 800c8f4:	e7fe      	b.n	800c8f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c8f6:	f001 ffdd 	bl	800e8b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c902:	2b00      	cmp	r3, #0
 800c904:	d01f      	beq.n	800c946 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c906:	68b9      	ldr	r1, [r7, #8]
 800c908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c90a:	f000 fa1b 	bl	800cd44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c910:	1e5a      	subs	r2, r3, #1
 800c912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c914:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c918:	691b      	ldr	r3, [r3, #16]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d00f      	beq.n	800c93e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c920:	3310      	adds	r3, #16
 800c922:	4618      	mov	r0, r3
 800c924:	f000 ff98 	bl	800d858 <xTaskRemoveFromEventList>
 800c928:	4603      	mov	r3, r0
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d007      	beq.n	800c93e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c92e:	4b3d      	ldr	r3, [pc, #244]	; (800ca24 <xQueueReceive+0x1bc>)
 800c930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c934:	601a      	str	r2, [r3, #0]
 800c936:	f3bf 8f4f 	dsb	sy
 800c93a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c93e:	f001 ffe9 	bl	800e914 <vPortExitCritical>
				return pdPASS;
 800c942:	2301      	movs	r3, #1
 800c944:	e069      	b.n	800ca1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d103      	bne.n	800c954 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c94c:	f001 ffe2 	bl	800e914 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c950:	2300      	movs	r3, #0
 800c952:	e062      	b.n	800ca1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c956:	2b00      	cmp	r3, #0
 800c958:	d106      	bne.n	800c968 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c95a:	f107 0310 	add.w	r3, r7, #16
 800c95e:	4618      	mov	r0, r3
 800c960:	f000 ffde 	bl	800d920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c964:	2301      	movs	r3, #1
 800c966:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c968:	f001 ffd4 	bl	800e914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c96c:	f000 fd4a 	bl	800d404 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c970:	f001 ffa0 	bl	800e8b4 <vPortEnterCritical>
 800c974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c976:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c97a:	b25b      	sxtb	r3, r3
 800c97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c980:	d103      	bne.n	800c98a <xQueueReceive+0x122>
 800c982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c984:	2200      	movs	r2, #0
 800c986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c990:	b25b      	sxtb	r3, r3
 800c992:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c996:	d103      	bne.n	800c9a0 <xQueueReceive+0x138>
 800c998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99a:	2200      	movs	r2, #0
 800c99c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c9a0:	f001 ffb8 	bl	800e914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c9a4:	1d3a      	adds	r2, r7, #4
 800c9a6:	f107 0310 	add.w	r3, r7, #16
 800c9aa:	4611      	mov	r1, r2
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f000 ffcd 	bl	800d94c <xTaskCheckForTimeOut>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d123      	bne.n	800ca00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c9b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9ba:	f000 fa3b 	bl	800ce34 <prvIsQueueEmpty>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d017      	beq.n	800c9f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c6:	3324      	adds	r3, #36	; 0x24
 800c9c8:	687a      	ldr	r2, [r7, #4]
 800c9ca:	4611      	mov	r1, r2
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f000 fef3 	bl	800d7b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c9d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9d4:	f000 f9dc 	bl	800cd90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c9d8:	f000 fd22 	bl	800d420 <xTaskResumeAll>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d189      	bne.n	800c8f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c9e2:	4b10      	ldr	r3, [pc, #64]	; (800ca24 <xQueueReceive+0x1bc>)
 800c9e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9e8:	601a      	str	r2, [r3, #0]
 800c9ea:	f3bf 8f4f 	dsb	sy
 800c9ee:	f3bf 8f6f 	isb	sy
 800c9f2:	e780      	b.n	800c8f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c9f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9f6:	f000 f9cb 	bl	800cd90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c9fa:	f000 fd11 	bl	800d420 <xTaskResumeAll>
 800c9fe:	e77a      	b.n	800c8f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ca00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca02:	f000 f9c5 	bl	800cd90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca06:	f000 fd0b 	bl	800d420 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca0c:	f000 fa12 	bl	800ce34 <prvIsQueueEmpty>
 800ca10:	4603      	mov	r3, r0
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	f43f af6f 	beq.w	800c8f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ca18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3730      	adds	r7, #48	; 0x30
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop
 800ca24:	e000ed04 	.word	0xe000ed04

0800ca28 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b08e      	sub	sp, #56	; 0x38
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ca32:	2300      	movs	r3, #0
 800ca34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ca3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d10a      	bne.n	800ca5a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ca44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca48:	f383 8811 	msr	BASEPRI, r3
 800ca4c:	f3bf 8f6f 	isb	sy
 800ca50:	f3bf 8f4f 	dsb	sy
 800ca54:	623b      	str	r3, [r7, #32]
}
 800ca56:	bf00      	nop
 800ca58:	e7fe      	b.n	800ca58 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ca5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d00a      	beq.n	800ca78 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ca62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca66:	f383 8811 	msr	BASEPRI, r3
 800ca6a:	f3bf 8f6f 	isb	sy
 800ca6e:	f3bf 8f4f 	dsb	sy
 800ca72:	61fb      	str	r3, [r7, #28]
}
 800ca74:	bf00      	nop
 800ca76:	e7fe      	b.n	800ca76 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca78:	f001 f8c0 	bl	800dbfc <xTaskGetSchedulerState>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d102      	bne.n	800ca88 <xQueueSemaphoreTake+0x60>
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d101      	bne.n	800ca8c <xQueueSemaphoreTake+0x64>
 800ca88:	2301      	movs	r3, #1
 800ca8a:	e000      	b.n	800ca8e <xQueueSemaphoreTake+0x66>
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d10a      	bne.n	800caa8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ca92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca96:	f383 8811 	msr	BASEPRI, r3
 800ca9a:	f3bf 8f6f 	isb	sy
 800ca9e:	f3bf 8f4f 	dsb	sy
 800caa2:	61bb      	str	r3, [r7, #24]
}
 800caa4:	bf00      	nop
 800caa6:	e7fe      	b.n	800caa6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800caa8:	f001 ff04 	bl	800e8b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800caac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cab0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d024      	beq.n	800cb02 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caba:	1e5a      	subs	r2, r3, #1
 800cabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cabe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d104      	bne.n	800cad2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cac8:	f001 fa0e 	bl	800dee8 <pvTaskIncrementMutexHeldCount>
 800cacc:	4602      	mov	r2, r0
 800cace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad4:	691b      	ldr	r3, [r3, #16]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d00f      	beq.n	800cafa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cadc:	3310      	adds	r3, #16
 800cade:	4618      	mov	r0, r3
 800cae0:	f000 feba 	bl	800d858 <xTaskRemoveFromEventList>
 800cae4:	4603      	mov	r3, r0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d007      	beq.n	800cafa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800caea:	4b54      	ldr	r3, [pc, #336]	; (800cc3c <xQueueSemaphoreTake+0x214>)
 800caec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caf0:	601a      	str	r2, [r3, #0]
 800caf2:	f3bf 8f4f 	dsb	sy
 800caf6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cafa:	f001 ff0b 	bl	800e914 <vPortExitCritical>
				return pdPASS;
 800cafe:	2301      	movs	r3, #1
 800cb00:	e097      	b.n	800cc32 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d111      	bne.n	800cb2c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d00a      	beq.n	800cb24 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800cb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb12:	f383 8811 	msr	BASEPRI, r3
 800cb16:	f3bf 8f6f 	isb	sy
 800cb1a:	f3bf 8f4f 	dsb	sy
 800cb1e:	617b      	str	r3, [r7, #20]
}
 800cb20:	bf00      	nop
 800cb22:	e7fe      	b.n	800cb22 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cb24:	f001 fef6 	bl	800e914 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	e082      	b.n	800cc32 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d106      	bne.n	800cb40 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb32:	f107 030c 	add.w	r3, r7, #12
 800cb36:	4618      	mov	r0, r3
 800cb38:	f000 fef2 	bl	800d920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb40:	f001 fee8 	bl	800e914 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb44:	f000 fc5e 	bl	800d404 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb48:	f001 feb4 	bl	800e8b4 <vPortEnterCritical>
 800cb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb52:	b25b      	sxtb	r3, r3
 800cb54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb58:	d103      	bne.n	800cb62 <xQueueSemaphoreTake+0x13a>
 800cb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb68:	b25b      	sxtb	r3, r3
 800cb6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb6e:	d103      	bne.n	800cb78 <xQueueSemaphoreTake+0x150>
 800cb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb72:	2200      	movs	r2, #0
 800cb74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb78:	f001 fecc 	bl	800e914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb7c:	463a      	mov	r2, r7
 800cb7e:	f107 030c 	add.w	r3, r7, #12
 800cb82:	4611      	mov	r1, r2
 800cb84:	4618      	mov	r0, r3
 800cb86:	f000 fee1 	bl	800d94c <xTaskCheckForTimeOut>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d132      	bne.n	800cbf6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb92:	f000 f94f 	bl	800ce34 <prvIsQueueEmpty>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d026      	beq.n	800cbea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d109      	bne.n	800cbb8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800cba4:	f001 fe86 	bl	800e8b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbaa:	689b      	ldr	r3, [r3, #8]
 800cbac:	4618      	mov	r0, r3
 800cbae:	f001 f843 	bl	800dc38 <xTaskPriorityInherit>
 800cbb2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cbb4:	f001 feae 	bl	800e914 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbba:	3324      	adds	r3, #36	; 0x24
 800cbbc:	683a      	ldr	r2, [r7, #0]
 800cbbe:	4611      	mov	r1, r2
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f000 fdf9 	bl	800d7b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cbc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbc8:	f000 f8e2 	bl	800cd90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cbcc:	f000 fc28 	bl	800d420 <xTaskResumeAll>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	f47f af68 	bne.w	800caa8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800cbd8:	4b18      	ldr	r3, [pc, #96]	; (800cc3c <xQueueSemaphoreTake+0x214>)
 800cbda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbde:	601a      	str	r2, [r3, #0]
 800cbe0:	f3bf 8f4f 	dsb	sy
 800cbe4:	f3bf 8f6f 	isb	sy
 800cbe8:	e75e      	b.n	800caa8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cbea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbec:	f000 f8d0 	bl	800cd90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cbf0:	f000 fc16 	bl	800d420 <xTaskResumeAll>
 800cbf4:	e758      	b.n	800caa8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cbf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbf8:	f000 f8ca 	bl	800cd90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cbfc:	f000 fc10 	bl	800d420 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc02:	f000 f917 	bl	800ce34 <prvIsQueueEmpty>
 800cc06:	4603      	mov	r3, r0
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f43f af4d 	beq.w	800caa8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d00d      	beq.n	800cc30 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800cc14:	f001 fe4e 	bl	800e8b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cc18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc1a:	f000 f811 	bl	800cc40 <prvGetDisinheritPriorityAfterTimeout>
 800cc1e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc22:	689b      	ldr	r3, [r3, #8]
 800cc24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc26:	4618      	mov	r0, r3
 800cc28:	f001 f8dc 	bl	800dde4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cc2c:	f001 fe72 	bl	800e914 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cc30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3738      	adds	r7, #56	; 0x38
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	e000ed04 	.word	0xe000ed04

0800cc40 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cc40:	b480      	push	{r7}
 800cc42:	b085      	sub	sp, #20
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d006      	beq.n	800cc5e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800cc5a:	60fb      	str	r3, [r7, #12]
 800cc5c:	e001      	b.n	800cc62 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cc62:	68fb      	ldr	r3, [r7, #12]
	}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3714      	adds	r7, #20
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6e:	4770      	bx	lr

0800cc70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b086      	sub	sp, #24
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	60f8      	str	r0, [r7, #12]
 800cc78:	60b9      	str	r1, [r7, #8]
 800cc7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d10d      	bne.n	800ccaa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d14d      	bne.n	800cd32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f001 f834 	bl	800dd08 <xTaskPriorityDisinherit>
 800cca0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2200      	movs	r2, #0
 800cca6:	609a      	str	r2, [r3, #8]
 800cca8:	e043      	b.n	800cd32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d119      	bne.n	800cce4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	6858      	ldr	r0, [r3, #4]
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccb8:	461a      	mov	r2, r3
 800ccba:	68b9      	ldr	r1, [r7, #8]
 800ccbc:	f002 fe66 	bl	800f98c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	685a      	ldr	r2, [r3, #4]
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccc8:	441a      	add	r2, r3
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	685a      	ldr	r2, [r3, #4]
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	689b      	ldr	r3, [r3, #8]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d32b      	bcc.n	800cd32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	605a      	str	r2, [r3, #4]
 800cce2:	e026      	b.n	800cd32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	68d8      	ldr	r0, [r3, #12]
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccec:	461a      	mov	r2, r3
 800ccee:	68b9      	ldr	r1, [r7, #8]
 800ccf0:	f002 fe4c 	bl	800f98c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	68da      	ldr	r2, [r3, #12]
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccfc:	425b      	negs	r3, r3
 800ccfe:	441a      	add	r2, r3
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	68da      	ldr	r2, [r3, #12]
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d207      	bcs.n	800cd20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	689a      	ldr	r2, [r3, #8]
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd18:	425b      	negs	r3, r3
 800cd1a:	441a      	add	r2, r3
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2b02      	cmp	r3, #2
 800cd24:	d105      	bne.n	800cd32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d002      	beq.n	800cd32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	3b01      	subs	r3, #1
 800cd30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	1c5a      	adds	r2, r3, #1
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cd3a:	697b      	ldr	r3, [r7, #20]
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3718      	adds	r7, #24
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b082      	sub	sp, #8
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d018      	beq.n	800cd88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	68da      	ldr	r2, [r3, #12]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd5e:	441a      	add	r2, r3
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	68da      	ldr	r2, [r3, #12]
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	689b      	ldr	r3, [r3, #8]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d303      	bcc.n	800cd78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681a      	ldr	r2, [r3, #0]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	68d9      	ldr	r1, [r3, #12]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd80:	461a      	mov	r2, r3
 800cd82:	6838      	ldr	r0, [r7, #0]
 800cd84:	f002 fe02 	bl	800f98c <memcpy>
	}
}
 800cd88:	bf00      	nop
 800cd8a:	3708      	adds	r7, #8
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b084      	sub	sp, #16
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cd98:	f001 fd8c 	bl	800e8b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cda2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cda4:	e011      	b.n	800cdca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d012      	beq.n	800cdd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	3324      	adds	r3, #36	; 0x24
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f000 fd50 	bl	800d858 <xTaskRemoveFromEventList>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d001      	beq.n	800cdc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cdbe:	f000 fe27 	bl	800da10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cdc2:	7bfb      	ldrb	r3, [r7, #15]
 800cdc4:	3b01      	subs	r3, #1
 800cdc6:	b2db      	uxtb	r3, r3
 800cdc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cdca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	dce9      	bgt.n	800cda6 <prvUnlockQueue+0x16>
 800cdd2:	e000      	b.n	800cdd6 <prvUnlockQueue+0x46>
					break;
 800cdd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	22ff      	movs	r2, #255	; 0xff
 800cdda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cdde:	f001 fd99 	bl	800e914 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cde2:	f001 fd67 	bl	800e8b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cdee:	e011      	b.n	800ce14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	691b      	ldr	r3, [r3, #16]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d012      	beq.n	800ce1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	3310      	adds	r3, #16
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f000 fd2b 	bl	800d858 <xTaskRemoveFromEventList>
 800ce02:	4603      	mov	r3, r0
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d001      	beq.n	800ce0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ce08:	f000 fe02 	bl	800da10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ce0c:	7bbb      	ldrb	r3, [r7, #14]
 800ce0e:	3b01      	subs	r3, #1
 800ce10:	b2db      	uxtb	r3, r3
 800ce12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	dce9      	bgt.n	800cdf0 <prvUnlockQueue+0x60>
 800ce1c:	e000      	b.n	800ce20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ce1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	22ff      	movs	r2, #255	; 0xff
 800ce24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ce28:	f001 fd74 	bl	800e914 <vPortExitCritical>
}
 800ce2c:	bf00      	nop
 800ce2e:	3710      	adds	r7, #16
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}

0800ce34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b084      	sub	sp, #16
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ce3c:	f001 fd3a 	bl	800e8b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d102      	bne.n	800ce4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ce48:	2301      	movs	r3, #1
 800ce4a:	60fb      	str	r3, [r7, #12]
 800ce4c:	e001      	b.n	800ce52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ce52:	f001 fd5f 	bl	800e914 <vPortExitCritical>

	return xReturn;
 800ce56:	68fb      	ldr	r3, [r7, #12]
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3710      	adds	r7, #16
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}

0800ce60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b084      	sub	sp, #16
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ce68:	f001 fd24 	bl	800e8b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d102      	bne.n	800ce7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ce78:	2301      	movs	r3, #1
 800ce7a:	60fb      	str	r3, [r7, #12]
 800ce7c:	e001      	b.n	800ce82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ce82:	f001 fd47 	bl	800e914 <vPortExitCritical>

	return xReturn;
 800ce86:	68fb      	ldr	r3, [r7, #12]
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3710      	adds	r7, #16
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ce90:	b480      	push	{r7}
 800ce92:	b085      	sub	sp, #20
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	60fb      	str	r3, [r7, #12]
 800ce9e:	e014      	b.n	800ceca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cea0:	4a0f      	ldr	r2, [pc, #60]	; (800cee0 <vQueueAddToRegistry+0x50>)
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d10b      	bne.n	800cec4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ceac:	490c      	ldr	r1, [pc, #48]	; (800cee0 <vQueueAddToRegistry+0x50>)
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	683a      	ldr	r2, [r7, #0]
 800ceb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ceb6:	4a0a      	ldr	r2, [pc, #40]	; (800cee0 <vQueueAddToRegistry+0x50>)
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	00db      	lsls	r3, r3, #3
 800cebc:	4413      	add	r3, r2
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cec2:	e006      	b.n	800ced2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	3301      	adds	r3, #1
 800cec8:	60fb      	str	r3, [r7, #12]
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2b07      	cmp	r3, #7
 800cece:	d9e7      	bls.n	800cea0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ced0:	bf00      	nop
 800ced2:	bf00      	nop
 800ced4:	3714      	adds	r7, #20
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr
 800cede:	bf00      	nop
 800cee0:	20000fa0 	.word	0x20000fa0

0800cee4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b086      	sub	sp, #24
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cef4:	f001 fcde 	bl	800e8b4 <vPortEnterCritical>
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cefe:	b25b      	sxtb	r3, r3
 800cf00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf04:	d103      	bne.n	800cf0e <vQueueWaitForMessageRestricted+0x2a>
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf14:	b25b      	sxtb	r3, r3
 800cf16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf1a:	d103      	bne.n	800cf24 <vQueueWaitForMessageRestricted+0x40>
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf24:	f001 fcf6 	bl	800e914 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d106      	bne.n	800cf3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	3324      	adds	r3, #36	; 0x24
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	68b9      	ldr	r1, [r7, #8]
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f000 fc61 	bl	800d800 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cf3e:	6978      	ldr	r0, [r7, #20]
 800cf40:	f7ff ff26 	bl	800cd90 <prvUnlockQueue>
	}
 800cf44:	bf00      	nop
 800cf46:	3718      	adds	r7, #24
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b08e      	sub	sp, #56	; 0x38
 800cf50:	af04      	add	r7, sp, #16
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	60b9      	str	r1, [r7, #8]
 800cf56:	607a      	str	r2, [r7, #4]
 800cf58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cf5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d10a      	bne.n	800cf76 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf64:	f383 8811 	msr	BASEPRI, r3
 800cf68:	f3bf 8f6f 	isb	sy
 800cf6c:	f3bf 8f4f 	dsb	sy
 800cf70:	623b      	str	r3, [r7, #32]
}
 800cf72:	bf00      	nop
 800cf74:	e7fe      	b.n	800cf74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cf76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d10a      	bne.n	800cf92 <xTaskCreateStatic+0x46>
	__asm volatile
 800cf7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf80:	f383 8811 	msr	BASEPRI, r3
 800cf84:	f3bf 8f6f 	isb	sy
 800cf88:	f3bf 8f4f 	dsb	sy
 800cf8c:	61fb      	str	r3, [r7, #28]
}
 800cf8e:	bf00      	nop
 800cf90:	e7fe      	b.n	800cf90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cf92:	23bc      	movs	r3, #188	; 0xbc
 800cf94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	2bbc      	cmp	r3, #188	; 0xbc
 800cf9a:	d00a      	beq.n	800cfb2 <xTaskCreateStatic+0x66>
	__asm volatile
 800cf9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa0:	f383 8811 	msr	BASEPRI, r3
 800cfa4:	f3bf 8f6f 	isb	sy
 800cfa8:	f3bf 8f4f 	dsb	sy
 800cfac:	61bb      	str	r3, [r7, #24]
}
 800cfae:	bf00      	nop
 800cfb0:	e7fe      	b.n	800cfb0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cfb2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d01e      	beq.n	800cff8 <xTaskCreateStatic+0xac>
 800cfba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d01b      	beq.n	800cff8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfc8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfcc:	2202      	movs	r2, #2
 800cfce:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	9303      	str	r3, [sp, #12]
 800cfd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd8:	9302      	str	r3, [sp, #8]
 800cfda:	f107 0314 	add.w	r3, r7, #20
 800cfde:	9301      	str	r3, [sp, #4]
 800cfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe2:	9300      	str	r3, [sp, #0]
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	687a      	ldr	r2, [r7, #4]
 800cfe8:	68b9      	ldr	r1, [r7, #8]
 800cfea:	68f8      	ldr	r0, [r7, #12]
 800cfec:	f000 f850 	bl	800d090 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cff0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cff2:	f000 f8f3 	bl	800d1dc <prvAddNewTaskToReadyList>
 800cff6:	e001      	b.n	800cffc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cff8:	2300      	movs	r3, #0
 800cffa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cffc:	697b      	ldr	r3, [r7, #20]
	}
 800cffe:	4618      	mov	r0, r3
 800d000:	3728      	adds	r7, #40	; 0x28
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d006:	b580      	push	{r7, lr}
 800d008:	b08c      	sub	sp, #48	; 0x30
 800d00a:	af04      	add	r7, sp, #16
 800d00c:	60f8      	str	r0, [r7, #12]
 800d00e:	60b9      	str	r1, [r7, #8]
 800d010:	603b      	str	r3, [r7, #0]
 800d012:	4613      	mov	r3, r2
 800d014:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d016:	88fb      	ldrh	r3, [r7, #6]
 800d018:	009b      	lsls	r3, r3, #2
 800d01a:	4618      	mov	r0, r3
 800d01c:	f001 fd6c 	bl	800eaf8 <pvPortMalloc>
 800d020:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d00e      	beq.n	800d046 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d028:	20bc      	movs	r0, #188	; 0xbc
 800d02a:	f001 fd65 	bl	800eaf8 <pvPortMalloc>
 800d02e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d030:	69fb      	ldr	r3, [r7, #28]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d003      	beq.n	800d03e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d036:	69fb      	ldr	r3, [r7, #28]
 800d038:	697a      	ldr	r2, [r7, #20]
 800d03a:	631a      	str	r2, [r3, #48]	; 0x30
 800d03c:	e005      	b.n	800d04a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d03e:	6978      	ldr	r0, [r7, #20]
 800d040:	f001 fe26 	bl	800ec90 <vPortFree>
 800d044:	e001      	b.n	800d04a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d046:	2300      	movs	r3, #0
 800d048:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d04a:	69fb      	ldr	r3, [r7, #28]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d017      	beq.n	800d080 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d050:	69fb      	ldr	r3, [r7, #28]
 800d052:	2200      	movs	r2, #0
 800d054:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d058:	88fa      	ldrh	r2, [r7, #6]
 800d05a:	2300      	movs	r3, #0
 800d05c:	9303      	str	r3, [sp, #12]
 800d05e:	69fb      	ldr	r3, [r7, #28]
 800d060:	9302      	str	r3, [sp, #8]
 800d062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d064:	9301      	str	r3, [sp, #4]
 800d066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d068:	9300      	str	r3, [sp, #0]
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	68b9      	ldr	r1, [r7, #8]
 800d06e:	68f8      	ldr	r0, [r7, #12]
 800d070:	f000 f80e 	bl	800d090 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d074:	69f8      	ldr	r0, [r7, #28]
 800d076:	f000 f8b1 	bl	800d1dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d07a:	2301      	movs	r3, #1
 800d07c:	61bb      	str	r3, [r7, #24]
 800d07e:	e002      	b.n	800d086 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d080:	f04f 33ff 	mov.w	r3, #4294967295
 800d084:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d086:	69bb      	ldr	r3, [r7, #24]
	}
 800d088:	4618      	mov	r0, r3
 800d08a:	3720      	adds	r7, #32
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}

0800d090 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b088      	sub	sp, #32
 800d094:	af00      	add	r7, sp, #0
 800d096:	60f8      	str	r0, [r7, #12]
 800d098:	60b9      	str	r1, [r7, #8]
 800d09a:	607a      	str	r2, [r7, #4]
 800d09c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	009b      	lsls	r3, r3, #2
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	21a5      	movs	r1, #165	; 0xa5
 800d0aa:	f002 fc7d 	bl	800f9a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d0b8:	3b01      	subs	r3, #1
 800d0ba:	009b      	lsls	r3, r3, #2
 800d0bc:	4413      	add	r3, r2
 800d0be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	f023 0307 	bic.w	r3, r3, #7
 800d0c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d0c8:	69bb      	ldr	r3, [r7, #24]
 800d0ca:	f003 0307 	and.w	r3, r3, #7
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d00a      	beq.n	800d0e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d6:	f383 8811 	msr	BASEPRI, r3
 800d0da:	f3bf 8f6f 	isb	sy
 800d0de:	f3bf 8f4f 	dsb	sy
 800d0e2:	617b      	str	r3, [r7, #20]
}
 800d0e4:	bf00      	nop
 800d0e6:	e7fe      	b.n	800d0e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d01f      	beq.n	800d12e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	61fb      	str	r3, [r7, #28]
 800d0f2:	e012      	b.n	800d11a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d0f4:	68ba      	ldr	r2, [r7, #8]
 800d0f6:	69fb      	ldr	r3, [r7, #28]
 800d0f8:	4413      	add	r3, r2
 800d0fa:	7819      	ldrb	r1, [r3, #0]
 800d0fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0fe:	69fb      	ldr	r3, [r7, #28]
 800d100:	4413      	add	r3, r2
 800d102:	3334      	adds	r3, #52	; 0x34
 800d104:	460a      	mov	r2, r1
 800d106:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d108:	68ba      	ldr	r2, [r7, #8]
 800d10a:	69fb      	ldr	r3, [r7, #28]
 800d10c:	4413      	add	r3, r2
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d006      	beq.n	800d122 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d114:	69fb      	ldr	r3, [r7, #28]
 800d116:	3301      	adds	r3, #1
 800d118:	61fb      	str	r3, [r7, #28]
 800d11a:	69fb      	ldr	r3, [r7, #28]
 800d11c:	2b0f      	cmp	r3, #15
 800d11e:	d9e9      	bls.n	800d0f4 <prvInitialiseNewTask+0x64>
 800d120:	e000      	b.n	800d124 <prvInitialiseNewTask+0x94>
			{
				break;
 800d122:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d126:	2200      	movs	r2, #0
 800d128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d12c:	e003      	b.n	800d136 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d130:	2200      	movs	r2, #0
 800d132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d138:	2b37      	cmp	r3, #55	; 0x37
 800d13a:	d901      	bls.n	800d140 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d13c:	2337      	movs	r3, #55	; 0x37
 800d13e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d144:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d14a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d14e:	2200      	movs	r2, #0
 800d150:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d154:	3304      	adds	r3, #4
 800d156:	4618      	mov	r0, r3
 800d158:	f7fe ff64 	bl	800c024 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d15e:	3318      	adds	r3, #24
 800d160:	4618      	mov	r0, r3
 800d162:	f7fe ff5f 	bl	800c024 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d16a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d174:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d17a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17e:	2200      	movs	r2, #0
 800d180:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d186:	2200      	movs	r2, #0
 800d188:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d18e:	3354      	adds	r3, #84	; 0x54
 800d190:	2260      	movs	r2, #96	; 0x60
 800d192:	2100      	movs	r1, #0
 800d194:	4618      	mov	r0, r3
 800d196:	f002 fc07 	bl	800f9a8 <memset>
 800d19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d19c:	4a0c      	ldr	r2, [pc, #48]	; (800d1d0 <prvInitialiseNewTask+0x140>)
 800d19e:	659a      	str	r2, [r3, #88]	; 0x58
 800d1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a2:	4a0c      	ldr	r2, [pc, #48]	; (800d1d4 <prvInitialiseNewTask+0x144>)
 800d1a4:	65da      	str	r2, [r3, #92]	; 0x5c
 800d1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a8:	4a0b      	ldr	r2, [pc, #44]	; (800d1d8 <prvInitialiseNewTask+0x148>)
 800d1aa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d1ac:	683a      	ldr	r2, [r7, #0]
 800d1ae:	68f9      	ldr	r1, [r7, #12]
 800d1b0:	69b8      	ldr	r0, [r7, #24]
 800d1b2:	f001 fa4f 	bl	800e654 <pxPortInitialiseStack>
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d002      	beq.n	800d1c8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1c8:	bf00      	nop
 800d1ca:	3720      	adds	r7, #32
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}
 800d1d0:	08010d98 	.word	0x08010d98
 800d1d4:	08010db8 	.word	0x08010db8
 800d1d8:	08010d78 	.word	0x08010d78

0800d1dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d1e4:	f001 fb66 	bl	800e8b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d1e8:	4b2d      	ldr	r3, [pc, #180]	; (800d2a0 <prvAddNewTaskToReadyList+0xc4>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	4a2c      	ldr	r2, [pc, #176]	; (800d2a0 <prvAddNewTaskToReadyList+0xc4>)
 800d1f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d1f2:	4b2c      	ldr	r3, [pc, #176]	; (800d2a4 <prvAddNewTaskToReadyList+0xc8>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d109      	bne.n	800d20e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d1fa:	4a2a      	ldr	r2, [pc, #168]	; (800d2a4 <prvAddNewTaskToReadyList+0xc8>)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d200:	4b27      	ldr	r3, [pc, #156]	; (800d2a0 <prvAddNewTaskToReadyList+0xc4>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	2b01      	cmp	r3, #1
 800d206:	d110      	bne.n	800d22a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d208:	f000 fc26 	bl	800da58 <prvInitialiseTaskLists>
 800d20c:	e00d      	b.n	800d22a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d20e:	4b26      	ldr	r3, [pc, #152]	; (800d2a8 <prvAddNewTaskToReadyList+0xcc>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d109      	bne.n	800d22a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d216:	4b23      	ldr	r3, [pc, #140]	; (800d2a4 <prvAddNewTaskToReadyList+0xc8>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d220:	429a      	cmp	r2, r3
 800d222:	d802      	bhi.n	800d22a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d224:	4a1f      	ldr	r2, [pc, #124]	; (800d2a4 <prvAddNewTaskToReadyList+0xc8>)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d22a:	4b20      	ldr	r3, [pc, #128]	; (800d2ac <prvAddNewTaskToReadyList+0xd0>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	3301      	adds	r3, #1
 800d230:	4a1e      	ldr	r2, [pc, #120]	; (800d2ac <prvAddNewTaskToReadyList+0xd0>)
 800d232:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d234:	4b1d      	ldr	r3, [pc, #116]	; (800d2ac <prvAddNewTaskToReadyList+0xd0>)
 800d236:	681a      	ldr	r2, [r3, #0]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d240:	4b1b      	ldr	r3, [pc, #108]	; (800d2b0 <prvAddNewTaskToReadyList+0xd4>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	429a      	cmp	r2, r3
 800d246:	d903      	bls.n	800d250 <prvAddNewTaskToReadyList+0x74>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d24c:	4a18      	ldr	r2, [pc, #96]	; (800d2b0 <prvAddNewTaskToReadyList+0xd4>)
 800d24e:	6013      	str	r3, [r2, #0]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d254:	4613      	mov	r3, r2
 800d256:	009b      	lsls	r3, r3, #2
 800d258:	4413      	add	r3, r2
 800d25a:	009b      	lsls	r3, r3, #2
 800d25c:	4a15      	ldr	r2, [pc, #84]	; (800d2b4 <prvAddNewTaskToReadyList+0xd8>)
 800d25e:	441a      	add	r2, r3
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	3304      	adds	r3, #4
 800d264:	4619      	mov	r1, r3
 800d266:	4610      	mov	r0, r2
 800d268:	f7fe fee9 	bl	800c03e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d26c:	f001 fb52 	bl	800e914 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d270:	4b0d      	ldr	r3, [pc, #52]	; (800d2a8 <prvAddNewTaskToReadyList+0xcc>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d00e      	beq.n	800d296 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d278:	4b0a      	ldr	r3, [pc, #40]	; (800d2a4 <prvAddNewTaskToReadyList+0xc8>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d282:	429a      	cmp	r2, r3
 800d284:	d207      	bcs.n	800d296 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d286:	4b0c      	ldr	r3, [pc, #48]	; (800d2b8 <prvAddNewTaskToReadyList+0xdc>)
 800d288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d28c:	601a      	str	r2, [r3, #0]
 800d28e:	f3bf 8f4f 	dsb	sy
 800d292:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d296:	bf00      	nop
 800d298:	3708      	adds	r7, #8
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}
 800d29e:	bf00      	nop
 800d2a0:	200014b4 	.word	0x200014b4
 800d2a4:	20000fe0 	.word	0x20000fe0
 800d2a8:	200014c0 	.word	0x200014c0
 800d2ac:	200014d0 	.word	0x200014d0
 800d2b0:	200014bc 	.word	0x200014bc
 800d2b4:	20000fe4 	.word	0x20000fe4
 800d2b8:	e000ed04 	.word	0xe000ed04

0800d2bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b084      	sub	sp, #16
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d017      	beq.n	800d2fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d2ce:	4b13      	ldr	r3, [pc, #76]	; (800d31c <vTaskDelay+0x60>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00a      	beq.n	800d2ec <vTaskDelay+0x30>
	__asm volatile
 800d2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2da:	f383 8811 	msr	BASEPRI, r3
 800d2de:	f3bf 8f6f 	isb	sy
 800d2e2:	f3bf 8f4f 	dsb	sy
 800d2e6:	60bb      	str	r3, [r7, #8]
}
 800d2e8:	bf00      	nop
 800d2ea:	e7fe      	b.n	800d2ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d2ec:	f000 f88a 	bl	800d404 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d2f0:	2100      	movs	r1, #0
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f000 fe0c 	bl	800df10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d2f8:	f000 f892 	bl	800d420 <xTaskResumeAll>
 800d2fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d107      	bne.n	800d314 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d304:	4b06      	ldr	r3, [pc, #24]	; (800d320 <vTaskDelay+0x64>)
 800d306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d30a:	601a      	str	r2, [r3, #0]
 800d30c:	f3bf 8f4f 	dsb	sy
 800d310:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d314:	bf00      	nop
 800d316:	3710      	adds	r7, #16
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}
 800d31c:	200014dc 	.word	0x200014dc
 800d320:	e000ed04 	.word	0xe000ed04

0800d324 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b08a      	sub	sp, #40	; 0x28
 800d328:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d32a:	2300      	movs	r3, #0
 800d32c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d32e:	2300      	movs	r3, #0
 800d330:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d332:	463a      	mov	r2, r7
 800d334:	1d39      	adds	r1, r7, #4
 800d336:	f107 0308 	add.w	r3, r7, #8
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7fe fe1e 	bl	800bf7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d340:	6839      	ldr	r1, [r7, #0]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	68ba      	ldr	r2, [r7, #8]
 800d346:	9202      	str	r2, [sp, #8]
 800d348:	9301      	str	r3, [sp, #4]
 800d34a:	2300      	movs	r3, #0
 800d34c:	9300      	str	r3, [sp, #0]
 800d34e:	2300      	movs	r3, #0
 800d350:	460a      	mov	r2, r1
 800d352:	4924      	ldr	r1, [pc, #144]	; (800d3e4 <vTaskStartScheduler+0xc0>)
 800d354:	4824      	ldr	r0, [pc, #144]	; (800d3e8 <vTaskStartScheduler+0xc4>)
 800d356:	f7ff fdf9 	bl	800cf4c <xTaskCreateStatic>
 800d35a:	4603      	mov	r3, r0
 800d35c:	4a23      	ldr	r2, [pc, #140]	; (800d3ec <vTaskStartScheduler+0xc8>)
 800d35e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d360:	4b22      	ldr	r3, [pc, #136]	; (800d3ec <vTaskStartScheduler+0xc8>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d002      	beq.n	800d36e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d368:	2301      	movs	r3, #1
 800d36a:	617b      	str	r3, [r7, #20]
 800d36c:	e001      	b.n	800d372 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d36e:	2300      	movs	r3, #0
 800d370:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	2b01      	cmp	r3, #1
 800d376:	d102      	bne.n	800d37e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d378:	f000 fe1e 	bl	800dfb8 <xTimerCreateTimerTask>
 800d37c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	2b01      	cmp	r3, #1
 800d382:	d11b      	bne.n	800d3bc <vTaskStartScheduler+0x98>
	__asm volatile
 800d384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d388:	f383 8811 	msr	BASEPRI, r3
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	613b      	str	r3, [r7, #16]
}
 800d396:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d398:	4b15      	ldr	r3, [pc, #84]	; (800d3f0 <vTaskStartScheduler+0xcc>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	3354      	adds	r3, #84	; 0x54
 800d39e:	4a15      	ldr	r2, [pc, #84]	; (800d3f4 <vTaskStartScheduler+0xd0>)
 800d3a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d3a2:	4b15      	ldr	r3, [pc, #84]	; (800d3f8 <vTaskStartScheduler+0xd4>)
 800d3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d3aa:	4b14      	ldr	r3, [pc, #80]	; (800d3fc <vTaskStartScheduler+0xd8>)
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d3b0:	4b13      	ldr	r3, [pc, #76]	; (800d400 <vTaskStartScheduler+0xdc>)
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d3b6:	f001 f9db 	bl	800e770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d3ba:	e00e      	b.n	800d3da <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3c2:	d10a      	bne.n	800d3da <vTaskStartScheduler+0xb6>
	__asm volatile
 800d3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c8:	f383 8811 	msr	BASEPRI, r3
 800d3cc:	f3bf 8f6f 	isb	sy
 800d3d0:	f3bf 8f4f 	dsb	sy
 800d3d4:	60fb      	str	r3, [r7, #12]
}
 800d3d6:	bf00      	nop
 800d3d8:	e7fe      	b.n	800d3d8 <vTaskStartScheduler+0xb4>
}
 800d3da:	bf00      	nop
 800d3dc:	3718      	adds	r7, #24
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	0800ff20 	.word	0x0800ff20
 800d3e8:	0800da29 	.word	0x0800da29
 800d3ec:	200014d8 	.word	0x200014d8
 800d3f0:	20000fe0 	.word	0x20000fe0
 800d3f4:	20000134 	.word	0x20000134
 800d3f8:	200014d4 	.word	0x200014d4
 800d3fc:	200014c0 	.word	0x200014c0
 800d400:	200014b8 	.word	0x200014b8

0800d404 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d404:	b480      	push	{r7}
 800d406:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d408:	4b04      	ldr	r3, [pc, #16]	; (800d41c <vTaskSuspendAll+0x18>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	3301      	adds	r3, #1
 800d40e:	4a03      	ldr	r2, [pc, #12]	; (800d41c <vTaskSuspendAll+0x18>)
 800d410:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d412:	bf00      	nop
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr
 800d41c:	200014dc 	.word	0x200014dc

0800d420 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b084      	sub	sp, #16
 800d424:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d426:	2300      	movs	r3, #0
 800d428:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d42a:	2300      	movs	r3, #0
 800d42c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d42e:	4b42      	ldr	r3, [pc, #264]	; (800d538 <xTaskResumeAll+0x118>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d10a      	bne.n	800d44c <xTaskResumeAll+0x2c>
	__asm volatile
 800d436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43a:	f383 8811 	msr	BASEPRI, r3
 800d43e:	f3bf 8f6f 	isb	sy
 800d442:	f3bf 8f4f 	dsb	sy
 800d446:	603b      	str	r3, [r7, #0]
}
 800d448:	bf00      	nop
 800d44a:	e7fe      	b.n	800d44a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d44c:	f001 fa32 	bl	800e8b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d450:	4b39      	ldr	r3, [pc, #228]	; (800d538 <xTaskResumeAll+0x118>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	3b01      	subs	r3, #1
 800d456:	4a38      	ldr	r2, [pc, #224]	; (800d538 <xTaskResumeAll+0x118>)
 800d458:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d45a:	4b37      	ldr	r3, [pc, #220]	; (800d538 <xTaskResumeAll+0x118>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d162      	bne.n	800d528 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d462:	4b36      	ldr	r3, [pc, #216]	; (800d53c <xTaskResumeAll+0x11c>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d05e      	beq.n	800d528 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d46a:	e02f      	b.n	800d4cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d46c:	4b34      	ldr	r3, [pc, #208]	; (800d540 <xTaskResumeAll+0x120>)
 800d46e:	68db      	ldr	r3, [r3, #12]
 800d470:	68db      	ldr	r3, [r3, #12]
 800d472:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	3318      	adds	r3, #24
 800d478:	4618      	mov	r0, r3
 800d47a:	f7fe fe3d 	bl	800c0f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	3304      	adds	r3, #4
 800d482:	4618      	mov	r0, r3
 800d484:	f7fe fe38 	bl	800c0f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d48c:	4b2d      	ldr	r3, [pc, #180]	; (800d544 <xTaskResumeAll+0x124>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	429a      	cmp	r2, r3
 800d492:	d903      	bls.n	800d49c <xTaskResumeAll+0x7c>
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d498:	4a2a      	ldr	r2, [pc, #168]	; (800d544 <xTaskResumeAll+0x124>)
 800d49a:	6013      	str	r3, [r2, #0]
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4a0:	4613      	mov	r3, r2
 800d4a2:	009b      	lsls	r3, r3, #2
 800d4a4:	4413      	add	r3, r2
 800d4a6:	009b      	lsls	r3, r3, #2
 800d4a8:	4a27      	ldr	r2, [pc, #156]	; (800d548 <xTaskResumeAll+0x128>)
 800d4aa:	441a      	add	r2, r3
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	3304      	adds	r3, #4
 800d4b0:	4619      	mov	r1, r3
 800d4b2:	4610      	mov	r0, r2
 800d4b4:	f7fe fdc3 	bl	800c03e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4bc:	4b23      	ldr	r3, [pc, #140]	; (800d54c <xTaskResumeAll+0x12c>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d302      	bcc.n	800d4cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d4c6:	4b22      	ldr	r3, [pc, #136]	; (800d550 <xTaskResumeAll+0x130>)
 800d4c8:	2201      	movs	r2, #1
 800d4ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d4cc:	4b1c      	ldr	r3, [pc, #112]	; (800d540 <xTaskResumeAll+0x120>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d1cb      	bne.n	800d46c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d001      	beq.n	800d4de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d4da:	f000 fb5f 	bl	800db9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d4de:	4b1d      	ldr	r3, [pc, #116]	; (800d554 <xTaskResumeAll+0x134>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d010      	beq.n	800d50c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d4ea:	f000 f847 	bl	800d57c <xTaskIncrementTick>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d002      	beq.n	800d4fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d4f4:	4b16      	ldr	r3, [pc, #88]	; (800d550 <xTaskResumeAll+0x130>)
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	3b01      	subs	r3, #1
 800d4fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d1f1      	bne.n	800d4ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d506:	4b13      	ldr	r3, [pc, #76]	; (800d554 <xTaskResumeAll+0x134>)
 800d508:	2200      	movs	r2, #0
 800d50a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d50c:	4b10      	ldr	r3, [pc, #64]	; (800d550 <xTaskResumeAll+0x130>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d009      	beq.n	800d528 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d514:	2301      	movs	r3, #1
 800d516:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d518:	4b0f      	ldr	r3, [pc, #60]	; (800d558 <xTaskResumeAll+0x138>)
 800d51a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d51e:	601a      	str	r2, [r3, #0]
 800d520:	f3bf 8f4f 	dsb	sy
 800d524:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d528:	f001 f9f4 	bl	800e914 <vPortExitCritical>

	return xAlreadyYielded;
 800d52c:	68bb      	ldr	r3, [r7, #8]
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3710      	adds	r7, #16
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	200014dc 	.word	0x200014dc
 800d53c:	200014b4 	.word	0x200014b4
 800d540:	20001474 	.word	0x20001474
 800d544:	200014bc 	.word	0x200014bc
 800d548:	20000fe4 	.word	0x20000fe4
 800d54c:	20000fe0 	.word	0x20000fe0
 800d550:	200014c8 	.word	0x200014c8
 800d554:	200014c4 	.word	0x200014c4
 800d558:	e000ed04 	.word	0xe000ed04

0800d55c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d55c:	b480      	push	{r7}
 800d55e:	b083      	sub	sp, #12
 800d560:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d562:	4b05      	ldr	r3, [pc, #20]	; (800d578 <xTaskGetTickCount+0x1c>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d568:	687b      	ldr	r3, [r7, #4]
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	370c      	adds	r7, #12
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr
 800d576:	bf00      	nop
 800d578:	200014b8 	.word	0x200014b8

0800d57c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b086      	sub	sp, #24
 800d580:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d582:	2300      	movs	r3, #0
 800d584:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d586:	4b4f      	ldr	r3, [pc, #316]	; (800d6c4 <xTaskIncrementTick+0x148>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	f040 808f 	bne.w	800d6ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d590:	4b4d      	ldr	r3, [pc, #308]	; (800d6c8 <xTaskIncrementTick+0x14c>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	3301      	adds	r3, #1
 800d596:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d598:	4a4b      	ldr	r2, [pc, #300]	; (800d6c8 <xTaskIncrementTick+0x14c>)
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d120      	bne.n	800d5e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d5a4:	4b49      	ldr	r3, [pc, #292]	; (800d6cc <xTaskIncrementTick+0x150>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d00a      	beq.n	800d5c4 <xTaskIncrementTick+0x48>
	__asm volatile
 800d5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b2:	f383 8811 	msr	BASEPRI, r3
 800d5b6:	f3bf 8f6f 	isb	sy
 800d5ba:	f3bf 8f4f 	dsb	sy
 800d5be:	603b      	str	r3, [r7, #0]
}
 800d5c0:	bf00      	nop
 800d5c2:	e7fe      	b.n	800d5c2 <xTaskIncrementTick+0x46>
 800d5c4:	4b41      	ldr	r3, [pc, #260]	; (800d6cc <xTaskIncrementTick+0x150>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	60fb      	str	r3, [r7, #12]
 800d5ca:	4b41      	ldr	r3, [pc, #260]	; (800d6d0 <xTaskIncrementTick+0x154>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	4a3f      	ldr	r2, [pc, #252]	; (800d6cc <xTaskIncrementTick+0x150>)
 800d5d0:	6013      	str	r3, [r2, #0]
 800d5d2:	4a3f      	ldr	r2, [pc, #252]	; (800d6d0 <xTaskIncrementTick+0x154>)
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	6013      	str	r3, [r2, #0]
 800d5d8:	4b3e      	ldr	r3, [pc, #248]	; (800d6d4 <xTaskIncrementTick+0x158>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	3301      	adds	r3, #1
 800d5de:	4a3d      	ldr	r2, [pc, #244]	; (800d6d4 <xTaskIncrementTick+0x158>)
 800d5e0:	6013      	str	r3, [r2, #0]
 800d5e2:	f000 fadb 	bl	800db9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d5e6:	4b3c      	ldr	r3, [pc, #240]	; (800d6d8 <xTaskIncrementTick+0x15c>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	693a      	ldr	r2, [r7, #16]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d349      	bcc.n	800d684 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5f0:	4b36      	ldr	r3, [pc, #216]	; (800d6cc <xTaskIncrementTick+0x150>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d104      	bne.n	800d604 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5fa:	4b37      	ldr	r3, [pc, #220]	; (800d6d8 <xTaskIncrementTick+0x15c>)
 800d5fc:	f04f 32ff 	mov.w	r2, #4294967295
 800d600:	601a      	str	r2, [r3, #0]
					break;
 800d602:	e03f      	b.n	800d684 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d604:	4b31      	ldr	r3, [pc, #196]	; (800d6cc <xTaskIncrementTick+0x150>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	68db      	ldr	r3, [r3, #12]
 800d60a:	68db      	ldr	r3, [r3, #12]
 800d60c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d614:	693a      	ldr	r2, [r7, #16]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	429a      	cmp	r2, r3
 800d61a:	d203      	bcs.n	800d624 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d61c:	4a2e      	ldr	r2, [pc, #184]	; (800d6d8 <xTaskIncrementTick+0x15c>)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d622:	e02f      	b.n	800d684 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	3304      	adds	r3, #4
 800d628:	4618      	mov	r0, r3
 800d62a:	f7fe fd65 	bl	800c0f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d632:	2b00      	cmp	r3, #0
 800d634:	d004      	beq.n	800d640 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	3318      	adds	r3, #24
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7fe fd5c 	bl	800c0f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d644:	4b25      	ldr	r3, [pc, #148]	; (800d6dc <xTaskIncrementTick+0x160>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	429a      	cmp	r2, r3
 800d64a:	d903      	bls.n	800d654 <xTaskIncrementTick+0xd8>
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d650:	4a22      	ldr	r2, [pc, #136]	; (800d6dc <xTaskIncrementTick+0x160>)
 800d652:	6013      	str	r3, [r2, #0]
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d658:	4613      	mov	r3, r2
 800d65a:	009b      	lsls	r3, r3, #2
 800d65c:	4413      	add	r3, r2
 800d65e:	009b      	lsls	r3, r3, #2
 800d660:	4a1f      	ldr	r2, [pc, #124]	; (800d6e0 <xTaskIncrementTick+0x164>)
 800d662:	441a      	add	r2, r3
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	3304      	adds	r3, #4
 800d668:	4619      	mov	r1, r3
 800d66a:	4610      	mov	r0, r2
 800d66c:	f7fe fce7 	bl	800c03e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d674:	4b1b      	ldr	r3, [pc, #108]	; (800d6e4 <xTaskIncrementTick+0x168>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d3b8      	bcc.n	800d5f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d67e:	2301      	movs	r3, #1
 800d680:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d682:	e7b5      	b.n	800d5f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d684:	4b17      	ldr	r3, [pc, #92]	; (800d6e4 <xTaskIncrementTick+0x168>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d68a:	4915      	ldr	r1, [pc, #84]	; (800d6e0 <xTaskIncrementTick+0x164>)
 800d68c:	4613      	mov	r3, r2
 800d68e:	009b      	lsls	r3, r3, #2
 800d690:	4413      	add	r3, r2
 800d692:	009b      	lsls	r3, r3, #2
 800d694:	440b      	add	r3, r1
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d901      	bls.n	800d6a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d69c:	2301      	movs	r3, #1
 800d69e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d6a0:	4b11      	ldr	r3, [pc, #68]	; (800d6e8 <xTaskIncrementTick+0x16c>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d007      	beq.n	800d6b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	617b      	str	r3, [r7, #20]
 800d6ac:	e004      	b.n	800d6b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d6ae:	4b0f      	ldr	r3, [pc, #60]	; (800d6ec <xTaskIncrementTick+0x170>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	4a0d      	ldr	r2, [pc, #52]	; (800d6ec <xTaskIncrementTick+0x170>)
 800d6b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d6b8:	697b      	ldr	r3, [r7, #20]
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3718      	adds	r7, #24
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
 800d6c2:	bf00      	nop
 800d6c4:	200014dc 	.word	0x200014dc
 800d6c8:	200014b8 	.word	0x200014b8
 800d6cc:	2000146c 	.word	0x2000146c
 800d6d0:	20001470 	.word	0x20001470
 800d6d4:	200014cc 	.word	0x200014cc
 800d6d8:	200014d4 	.word	0x200014d4
 800d6dc:	200014bc 	.word	0x200014bc
 800d6e0:	20000fe4 	.word	0x20000fe4
 800d6e4:	20000fe0 	.word	0x20000fe0
 800d6e8:	200014c8 	.word	0x200014c8
 800d6ec:	200014c4 	.word	0x200014c4

0800d6f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b085      	sub	sp, #20
 800d6f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d6f6:	4b2a      	ldr	r3, [pc, #168]	; (800d7a0 <vTaskSwitchContext+0xb0>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d003      	beq.n	800d706 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d6fe:	4b29      	ldr	r3, [pc, #164]	; (800d7a4 <vTaskSwitchContext+0xb4>)
 800d700:	2201      	movs	r2, #1
 800d702:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d704:	e046      	b.n	800d794 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d706:	4b27      	ldr	r3, [pc, #156]	; (800d7a4 <vTaskSwitchContext+0xb4>)
 800d708:	2200      	movs	r2, #0
 800d70a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d70c:	4b26      	ldr	r3, [pc, #152]	; (800d7a8 <vTaskSwitchContext+0xb8>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	60fb      	str	r3, [r7, #12]
 800d712:	e010      	b.n	800d736 <vTaskSwitchContext+0x46>
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d10a      	bne.n	800d730 <vTaskSwitchContext+0x40>
	__asm volatile
 800d71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71e:	f383 8811 	msr	BASEPRI, r3
 800d722:	f3bf 8f6f 	isb	sy
 800d726:	f3bf 8f4f 	dsb	sy
 800d72a:	607b      	str	r3, [r7, #4]
}
 800d72c:	bf00      	nop
 800d72e:	e7fe      	b.n	800d72e <vTaskSwitchContext+0x3e>
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	3b01      	subs	r3, #1
 800d734:	60fb      	str	r3, [r7, #12]
 800d736:	491d      	ldr	r1, [pc, #116]	; (800d7ac <vTaskSwitchContext+0xbc>)
 800d738:	68fa      	ldr	r2, [r7, #12]
 800d73a:	4613      	mov	r3, r2
 800d73c:	009b      	lsls	r3, r3, #2
 800d73e:	4413      	add	r3, r2
 800d740:	009b      	lsls	r3, r3, #2
 800d742:	440b      	add	r3, r1
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d0e4      	beq.n	800d714 <vTaskSwitchContext+0x24>
 800d74a:	68fa      	ldr	r2, [r7, #12]
 800d74c:	4613      	mov	r3, r2
 800d74e:	009b      	lsls	r3, r3, #2
 800d750:	4413      	add	r3, r2
 800d752:	009b      	lsls	r3, r3, #2
 800d754:	4a15      	ldr	r2, [pc, #84]	; (800d7ac <vTaskSwitchContext+0xbc>)
 800d756:	4413      	add	r3, r2
 800d758:	60bb      	str	r3, [r7, #8]
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	685a      	ldr	r2, [r3, #4]
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	605a      	str	r2, [r3, #4]
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	685a      	ldr	r2, [r3, #4]
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	3308      	adds	r3, #8
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d104      	bne.n	800d77a <vTaskSwitchContext+0x8a>
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	685a      	ldr	r2, [r3, #4]
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	605a      	str	r2, [r3, #4]
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	685b      	ldr	r3, [r3, #4]
 800d77e:	68db      	ldr	r3, [r3, #12]
 800d780:	4a0b      	ldr	r2, [pc, #44]	; (800d7b0 <vTaskSwitchContext+0xc0>)
 800d782:	6013      	str	r3, [r2, #0]
 800d784:	4a08      	ldr	r2, [pc, #32]	; (800d7a8 <vTaskSwitchContext+0xb8>)
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d78a:	4b09      	ldr	r3, [pc, #36]	; (800d7b0 <vTaskSwitchContext+0xc0>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	3354      	adds	r3, #84	; 0x54
 800d790:	4a08      	ldr	r2, [pc, #32]	; (800d7b4 <vTaskSwitchContext+0xc4>)
 800d792:	6013      	str	r3, [r2, #0]
}
 800d794:	bf00      	nop
 800d796:	3714      	adds	r7, #20
 800d798:	46bd      	mov	sp, r7
 800d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79e:	4770      	bx	lr
 800d7a0:	200014dc 	.word	0x200014dc
 800d7a4:	200014c8 	.word	0x200014c8
 800d7a8:	200014bc 	.word	0x200014bc
 800d7ac:	20000fe4 	.word	0x20000fe4
 800d7b0:	20000fe0 	.word	0x20000fe0
 800d7b4:	20000134 	.word	0x20000134

0800d7b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d10a      	bne.n	800d7de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7cc:	f383 8811 	msr	BASEPRI, r3
 800d7d0:	f3bf 8f6f 	isb	sy
 800d7d4:	f3bf 8f4f 	dsb	sy
 800d7d8:	60fb      	str	r3, [r7, #12]
}
 800d7da:	bf00      	nop
 800d7dc:	e7fe      	b.n	800d7dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d7de:	4b07      	ldr	r3, [pc, #28]	; (800d7fc <vTaskPlaceOnEventList+0x44>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	3318      	adds	r3, #24
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f7fe fc4d 	bl	800c086 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d7ec:	2101      	movs	r1, #1
 800d7ee:	6838      	ldr	r0, [r7, #0]
 800d7f0:	f000 fb8e 	bl	800df10 <prvAddCurrentTaskToDelayedList>
}
 800d7f4:	bf00      	nop
 800d7f6:	3710      	adds	r7, #16
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}
 800d7fc:	20000fe0 	.word	0x20000fe0

0800d800 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d800:	b580      	push	{r7, lr}
 800d802:	b086      	sub	sp, #24
 800d804:	af00      	add	r7, sp, #0
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d10a      	bne.n	800d828 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d816:	f383 8811 	msr	BASEPRI, r3
 800d81a:	f3bf 8f6f 	isb	sy
 800d81e:	f3bf 8f4f 	dsb	sy
 800d822:	617b      	str	r3, [r7, #20]
}
 800d824:	bf00      	nop
 800d826:	e7fe      	b.n	800d826 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d828:	4b0a      	ldr	r3, [pc, #40]	; (800d854 <vTaskPlaceOnEventListRestricted+0x54>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	3318      	adds	r3, #24
 800d82e:	4619      	mov	r1, r3
 800d830:	68f8      	ldr	r0, [r7, #12]
 800d832:	f7fe fc04 	bl	800c03e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d002      	beq.n	800d842 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d83c:	f04f 33ff 	mov.w	r3, #4294967295
 800d840:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d842:	6879      	ldr	r1, [r7, #4]
 800d844:	68b8      	ldr	r0, [r7, #8]
 800d846:	f000 fb63 	bl	800df10 <prvAddCurrentTaskToDelayedList>
	}
 800d84a:	bf00      	nop
 800d84c:	3718      	adds	r7, #24
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	20000fe0 	.word	0x20000fe0

0800d858 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b086      	sub	sp, #24
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	68db      	ldr	r3, [r3, #12]
 800d864:	68db      	ldr	r3, [r3, #12]
 800d866:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d10a      	bne.n	800d884 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d872:	f383 8811 	msr	BASEPRI, r3
 800d876:	f3bf 8f6f 	isb	sy
 800d87a:	f3bf 8f4f 	dsb	sy
 800d87e:	60fb      	str	r3, [r7, #12]
}
 800d880:	bf00      	nop
 800d882:	e7fe      	b.n	800d882 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	3318      	adds	r3, #24
 800d888:	4618      	mov	r0, r3
 800d88a:	f7fe fc35 	bl	800c0f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d88e:	4b1e      	ldr	r3, [pc, #120]	; (800d908 <xTaskRemoveFromEventList+0xb0>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d11d      	bne.n	800d8d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	3304      	adds	r3, #4
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7fe fc2c 	bl	800c0f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8a4:	4b19      	ldr	r3, [pc, #100]	; (800d90c <xTaskRemoveFromEventList+0xb4>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d903      	bls.n	800d8b4 <xTaskRemoveFromEventList+0x5c>
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b0:	4a16      	ldr	r2, [pc, #88]	; (800d90c <xTaskRemoveFromEventList+0xb4>)
 800d8b2:	6013      	str	r3, [r2, #0]
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8b8:	4613      	mov	r3, r2
 800d8ba:	009b      	lsls	r3, r3, #2
 800d8bc:	4413      	add	r3, r2
 800d8be:	009b      	lsls	r3, r3, #2
 800d8c0:	4a13      	ldr	r2, [pc, #76]	; (800d910 <xTaskRemoveFromEventList+0xb8>)
 800d8c2:	441a      	add	r2, r3
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	3304      	adds	r3, #4
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	4610      	mov	r0, r2
 800d8cc:	f7fe fbb7 	bl	800c03e <vListInsertEnd>
 800d8d0:	e005      	b.n	800d8de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	3318      	adds	r3, #24
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	480e      	ldr	r0, [pc, #56]	; (800d914 <xTaskRemoveFromEventList+0xbc>)
 800d8da:	f7fe fbb0 	bl	800c03e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8e2:	4b0d      	ldr	r3, [pc, #52]	; (800d918 <xTaskRemoveFromEventList+0xc0>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	d905      	bls.n	800d8f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d8f0:	4b0a      	ldr	r3, [pc, #40]	; (800d91c <xTaskRemoveFromEventList+0xc4>)
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	601a      	str	r2, [r3, #0]
 800d8f6:	e001      	b.n	800d8fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d8fc:	697b      	ldr	r3, [r7, #20]
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3718      	adds	r7, #24
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}
 800d906:	bf00      	nop
 800d908:	200014dc 	.word	0x200014dc
 800d90c:	200014bc 	.word	0x200014bc
 800d910:	20000fe4 	.word	0x20000fe4
 800d914:	20001474 	.word	0x20001474
 800d918:	20000fe0 	.word	0x20000fe0
 800d91c:	200014c8 	.word	0x200014c8

0800d920 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d920:	b480      	push	{r7}
 800d922:	b083      	sub	sp, #12
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d928:	4b06      	ldr	r3, [pc, #24]	; (800d944 <vTaskInternalSetTimeOutState+0x24>)
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d930:	4b05      	ldr	r3, [pc, #20]	; (800d948 <vTaskInternalSetTimeOutState+0x28>)
 800d932:	681a      	ldr	r2, [r3, #0]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	605a      	str	r2, [r3, #4]
}
 800d938:	bf00      	nop
 800d93a:	370c      	adds	r7, #12
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr
 800d944:	200014cc 	.word	0x200014cc
 800d948:	200014b8 	.word	0x200014b8

0800d94c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b088      	sub	sp, #32
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d10a      	bne.n	800d972 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d960:	f383 8811 	msr	BASEPRI, r3
 800d964:	f3bf 8f6f 	isb	sy
 800d968:	f3bf 8f4f 	dsb	sy
 800d96c:	613b      	str	r3, [r7, #16]
}
 800d96e:	bf00      	nop
 800d970:	e7fe      	b.n	800d970 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d10a      	bne.n	800d98e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97c:	f383 8811 	msr	BASEPRI, r3
 800d980:	f3bf 8f6f 	isb	sy
 800d984:	f3bf 8f4f 	dsb	sy
 800d988:	60fb      	str	r3, [r7, #12]
}
 800d98a:	bf00      	nop
 800d98c:	e7fe      	b.n	800d98c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d98e:	f000 ff91 	bl	800e8b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d992:	4b1d      	ldr	r3, [pc, #116]	; (800da08 <xTaskCheckForTimeOut+0xbc>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	69ba      	ldr	r2, [r7, #24]
 800d99e:	1ad3      	subs	r3, r2, r3
 800d9a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9aa:	d102      	bne.n	800d9b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	61fb      	str	r3, [r7, #28]
 800d9b0:	e023      	b.n	800d9fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681a      	ldr	r2, [r3, #0]
 800d9b6:	4b15      	ldr	r3, [pc, #84]	; (800da0c <xTaskCheckForTimeOut+0xc0>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d007      	beq.n	800d9ce <xTaskCheckForTimeOut+0x82>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	685b      	ldr	r3, [r3, #4]
 800d9c2:	69ba      	ldr	r2, [r7, #24]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d302      	bcc.n	800d9ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	61fb      	str	r3, [r7, #28]
 800d9cc:	e015      	b.n	800d9fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	697a      	ldr	r2, [r7, #20]
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d20b      	bcs.n	800d9f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	1ad2      	subs	r2, r2, r3
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f7ff ff9b 	bl	800d920 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	61fb      	str	r3, [r7, #28]
 800d9ee:	e004      	b.n	800d9fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d9fa:	f000 ff8b 	bl	800e914 <vPortExitCritical>

	return xReturn;
 800d9fe:	69fb      	ldr	r3, [r7, #28]
}
 800da00:	4618      	mov	r0, r3
 800da02:	3720      	adds	r7, #32
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}
 800da08:	200014b8 	.word	0x200014b8
 800da0c:	200014cc 	.word	0x200014cc

0800da10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800da10:	b480      	push	{r7}
 800da12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800da14:	4b03      	ldr	r3, [pc, #12]	; (800da24 <vTaskMissedYield+0x14>)
 800da16:	2201      	movs	r2, #1
 800da18:	601a      	str	r2, [r3, #0]
}
 800da1a:	bf00      	nop
 800da1c:	46bd      	mov	sp, r7
 800da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da22:	4770      	bx	lr
 800da24:	200014c8 	.word	0x200014c8

0800da28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800da30:	f000 f852 	bl	800dad8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800da34:	4b06      	ldr	r3, [pc, #24]	; (800da50 <prvIdleTask+0x28>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	2b01      	cmp	r3, #1
 800da3a:	d9f9      	bls.n	800da30 <prvIdleTask+0x8>
			{
				taskYIELD();
 800da3c:	4b05      	ldr	r3, [pc, #20]	; (800da54 <prvIdleTask+0x2c>)
 800da3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da42:	601a      	str	r2, [r3, #0]
 800da44:	f3bf 8f4f 	dsb	sy
 800da48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800da4c:	e7f0      	b.n	800da30 <prvIdleTask+0x8>
 800da4e:	bf00      	nop
 800da50:	20000fe4 	.word	0x20000fe4
 800da54:	e000ed04 	.word	0xe000ed04

0800da58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b082      	sub	sp, #8
 800da5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800da5e:	2300      	movs	r3, #0
 800da60:	607b      	str	r3, [r7, #4]
 800da62:	e00c      	b.n	800da7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	4613      	mov	r3, r2
 800da68:	009b      	lsls	r3, r3, #2
 800da6a:	4413      	add	r3, r2
 800da6c:	009b      	lsls	r3, r3, #2
 800da6e:	4a12      	ldr	r2, [pc, #72]	; (800dab8 <prvInitialiseTaskLists+0x60>)
 800da70:	4413      	add	r3, r2
 800da72:	4618      	mov	r0, r3
 800da74:	f7fe fab6 	bl	800bfe4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	3301      	adds	r3, #1
 800da7c:	607b      	str	r3, [r7, #4]
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2b37      	cmp	r3, #55	; 0x37
 800da82:	d9ef      	bls.n	800da64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800da84:	480d      	ldr	r0, [pc, #52]	; (800dabc <prvInitialiseTaskLists+0x64>)
 800da86:	f7fe faad 	bl	800bfe4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800da8a:	480d      	ldr	r0, [pc, #52]	; (800dac0 <prvInitialiseTaskLists+0x68>)
 800da8c:	f7fe faaa 	bl	800bfe4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800da90:	480c      	ldr	r0, [pc, #48]	; (800dac4 <prvInitialiseTaskLists+0x6c>)
 800da92:	f7fe faa7 	bl	800bfe4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800da96:	480c      	ldr	r0, [pc, #48]	; (800dac8 <prvInitialiseTaskLists+0x70>)
 800da98:	f7fe faa4 	bl	800bfe4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800da9c:	480b      	ldr	r0, [pc, #44]	; (800dacc <prvInitialiseTaskLists+0x74>)
 800da9e:	f7fe faa1 	bl	800bfe4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800daa2:	4b0b      	ldr	r3, [pc, #44]	; (800dad0 <prvInitialiseTaskLists+0x78>)
 800daa4:	4a05      	ldr	r2, [pc, #20]	; (800dabc <prvInitialiseTaskLists+0x64>)
 800daa6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800daa8:	4b0a      	ldr	r3, [pc, #40]	; (800dad4 <prvInitialiseTaskLists+0x7c>)
 800daaa:	4a05      	ldr	r2, [pc, #20]	; (800dac0 <prvInitialiseTaskLists+0x68>)
 800daac:	601a      	str	r2, [r3, #0]
}
 800daae:	bf00      	nop
 800dab0:	3708      	adds	r7, #8
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	bf00      	nop
 800dab8:	20000fe4 	.word	0x20000fe4
 800dabc:	20001444 	.word	0x20001444
 800dac0:	20001458 	.word	0x20001458
 800dac4:	20001474 	.word	0x20001474
 800dac8:	20001488 	.word	0x20001488
 800dacc:	200014a0 	.word	0x200014a0
 800dad0:	2000146c 	.word	0x2000146c
 800dad4:	20001470 	.word	0x20001470

0800dad8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b082      	sub	sp, #8
 800dadc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dade:	e019      	b.n	800db14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dae0:	f000 fee8 	bl	800e8b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dae4:	4b10      	ldr	r3, [pc, #64]	; (800db28 <prvCheckTasksWaitingTermination+0x50>)
 800dae6:	68db      	ldr	r3, [r3, #12]
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	3304      	adds	r3, #4
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7fe fb01 	bl	800c0f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800daf6:	4b0d      	ldr	r3, [pc, #52]	; (800db2c <prvCheckTasksWaitingTermination+0x54>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	3b01      	subs	r3, #1
 800dafc:	4a0b      	ldr	r2, [pc, #44]	; (800db2c <prvCheckTasksWaitingTermination+0x54>)
 800dafe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800db00:	4b0b      	ldr	r3, [pc, #44]	; (800db30 <prvCheckTasksWaitingTermination+0x58>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	3b01      	subs	r3, #1
 800db06:	4a0a      	ldr	r2, [pc, #40]	; (800db30 <prvCheckTasksWaitingTermination+0x58>)
 800db08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800db0a:	f000 ff03 	bl	800e914 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f000 f810 	bl	800db34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800db14:	4b06      	ldr	r3, [pc, #24]	; (800db30 <prvCheckTasksWaitingTermination+0x58>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d1e1      	bne.n	800dae0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800db1c:	bf00      	nop
 800db1e:	bf00      	nop
 800db20:	3708      	adds	r7, #8
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	20001488 	.word	0x20001488
 800db2c:	200014b4 	.word	0x200014b4
 800db30:	2000149c 	.word	0x2000149c

0800db34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	3354      	adds	r3, #84	; 0x54
 800db40:	4618      	mov	r0, r3
 800db42:	f002 f827 	bl	800fb94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d108      	bne.n	800db62 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db54:	4618      	mov	r0, r3
 800db56:	f001 f89b 	bl	800ec90 <vPortFree>
				vPortFree( pxTCB );
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f001 f898 	bl	800ec90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800db60:	e018      	b.n	800db94 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d103      	bne.n	800db74 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f001 f88f 	bl	800ec90 <vPortFree>
	}
 800db72:	e00f      	b.n	800db94 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800db7a:	2b02      	cmp	r3, #2
 800db7c:	d00a      	beq.n	800db94 <prvDeleteTCB+0x60>
	__asm volatile
 800db7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db82:	f383 8811 	msr	BASEPRI, r3
 800db86:	f3bf 8f6f 	isb	sy
 800db8a:	f3bf 8f4f 	dsb	sy
 800db8e:	60fb      	str	r3, [r7, #12]
}
 800db90:	bf00      	nop
 800db92:	e7fe      	b.n	800db92 <prvDeleteTCB+0x5e>
	}
 800db94:	bf00      	nop
 800db96:	3710      	adds	r7, #16
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800db9c:	b480      	push	{r7}
 800db9e:	b083      	sub	sp, #12
 800dba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dba2:	4b0c      	ldr	r3, [pc, #48]	; (800dbd4 <prvResetNextTaskUnblockTime+0x38>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d104      	bne.n	800dbb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dbac:	4b0a      	ldr	r3, [pc, #40]	; (800dbd8 <prvResetNextTaskUnblockTime+0x3c>)
 800dbae:	f04f 32ff 	mov.w	r2, #4294967295
 800dbb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dbb4:	e008      	b.n	800dbc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbb6:	4b07      	ldr	r3, [pc, #28]	; (800dbd4 <prvResetNextTaskUnblockTime+0x38>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	68db      	ldr	r3, [r3, #12]
 800dbbc:	68db      	ldr	r3, [r3, #12]
 800dbbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	4a04      	ldr	r2, [pc, #16]	; (800dbd8 <prvResetNextTaskUnblockTime+0x3c>)
 800dbc6:	6013      	str	r3, [r2, #0]
}
 800dbc8:	bf00      	nop
 800dbca:	370c      	adds	r7, #12
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd2:	4770      	bx	lr
 800dbd4:	2000146c 	.word	0x2000146c
 800dbd8:	200014d4 	.word	0x200014d4

0800dbdc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800dbdc:	b480      	push	{r7}
 800dbde:	b083      	sub	sp, #12
 800dbe0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800dbe2:	4b05      	ldr	r3, [pc, #20]	; (800dbf8 <xTaskGetCurrentTaskHandle+0x1c>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800dbe8:	687b      	ldr	r3, [r7, #4]
	}
 800dbea:	4618      	mov	r0, r3
 800dbec:	370c      	adds	r7, #12
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf4:	4770      	bx	lr
 800dbf6:	bf00      	nop
 800dbf8:	20000fe0 	.word	0x20000fe0

0800dbfc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b083      	sub	sp, #12
 800dc00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dc02:	4b0b      	ldr	r3, [pc, #44]	; (800dc30 <xTaskGetSchedulerState+0x34>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d102      	bne.n	800dc10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	607b      	str	r3, [r7, #4]
 800dc0e:	e008      	b.n	800dc22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc10:	4b08      	ldr	r3, [pc, #32]	; (800dc34 <xTaskGetSchedulerState+0x38>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d102      	bne.n	800dc1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dc18:	2302      	movs	r3, #2
 800dc1a:	607b      	str	r3, [r7, #4]
 800dc1c:	e001      	b.n	800dc22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dc22:	687b      	ldr	r3, [r7, #4]
	}
 800dc24:	4618      	mov	r0, r3
 800dc26:	370c      	adds	r7, #12
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2e:	4770      	bx	lr
 800dc30:	200014c0 	.word	0x200014c0
 800dc34:	200014dc 	.word	0x200014dc

0800dc38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b084      	sub	sp, #16
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dc44:	2300      	movs	r3, #0
 800dc46:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d051      	beq.n	800dcf2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc52:	4b2a      	ldr	r3, [pc, #168]	; (800dcfc <xTaskPriorityInherit+0xc4>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d241      	bcs.n	800dce0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	699b      	ldr	r3, [r3, #24]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	db06      	blt.n	800dc72 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc64:	4b25      	ldr	r3, [pc, #148]	; (800dcfc <xTaskPriorityInherit+0xc4>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	6959      	ldr	r1, [r3, #20]
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc7a:	4613      	mov	r3, r2
 800dc7c:	009b      	lsls	r3, r3, #2
 800dc7e:	4413      	add	r3, r2
 800dc80:	009b      	lsls	r3, r3, #2
 800dc82:	4a1f      	ldr	r2, [pc, #124]	; (800dd00 <xTaskPriorityInherit+0xc8>)
 800dc84:	4413      	add	r3, r2
 800dc86:	4299      	cmp	r1, r3
 800dc88:	d122      	bne.n	800dcd0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	3304      	adds	r3, #4
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7fe fa32 	bl	800c0f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dc94:	4b19      	ldr	r3, [pc, #100]	; (800dcfc <xTaskPriorityInherit+0xc4>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dca2:	4b18      	ldr	r3, [pc, #96]	; (800dd04 <xTaskPriorityInherit+0xcc>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d903      	bls.n	800dcb2 <xTaskPriorityInherit+0x7a>
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcae:	4a15      	ldr	r2, [pc, #84]	; (800dd04 <xTaskPriorityInherit+0xcc>)
 800dcb0:	6013      	str	r3, [r2, #0]
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcb6:	4613      	mov	r3, r2
 800dcb8:	009b      	lsls	r3, r3, #2
 800dcba:	4413      	add	r3, r2
 800dcbc:	009b      	lsls	r3, r3, #2
 800dcbe:	4a10      	ldr	r2, [pc, #64]	; (800dd00 <xTaskPriorityInherit+0xc8>)
 800dcc0:	441a      	add	r2, r3
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	3304      	adds	r3, #4
 800dcc6:	4619      	mov	r1, r3
 800dcc8:	4610      	mov	r0, r2
 800dcca:	f7fe f9b8 	bl	800c03e <vListInsertEnd>
 800dcce:	e004      	b.n	800dcda <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dcd0:	4b0a      	ldr	r3, [pc, #40]	; (800dcfc <xTaskPriorityInherit+0xc4>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dcda:	2301      	movs	r3, #1
 800dcdc:	60fb      	str	r3, [r7, #12]
 800dcde:	e008      	b.n	800dcf2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dce4:	4b05      	ldr	r3, [pc, #20]	; (800dcfc <xTaskPriorityInherit+0xc4>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d201      	bcs.n	800dcf2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dcee:	2301      	movs	r3, #1
 800dcf0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
	}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3710      	adds	r7, #16
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}
 800dcfc:	20000fe0 	.word	0x20000fe0
 800dd00:	20000fe4 	.word	0x20000fe4
 800dd04:	200014bc 	.word	0x200014bc

0800dd08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b086      	sub	sp, #24
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dd14:	2300      	movs	r3, #0
 800dd16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d056      	beq.n	800ddcc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dd1e:	4b2e      	ldr	r3, [pc, #184]	; (800ddd8 <xTaskPriorityDisinherit+0xd0>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	693a      	ldr	r2, [r7, #16]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d00a      	beq.n	800dd3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800dd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd2c:	f383 8811 	msr	BASEPRI, r3
 800dd30:	f3bf 8f6f 	isb	sy
 800dd34:	f3bf 8f4f 	dsb	sy
 800dd38:	60fb      	str	r3, [r7, #12]
}
 800dd3a:	bf00      	nop
 800dd3c:	e7fe      	b.n	800dd3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d10a      	bne.n	800dd5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800dd46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd4a:	f383 8811 	msr	BASEPRI, r3
 800dd4e:	f3bf 8f6f 	isb	sy
 800dd52:	f3bf 8f4f 	dsb	sy
 800dd56:	60bb      	str	r3, [r7, #8]
}
 800dd58:	bf00      	nop
 800dd5a:	e7fe      	b.n	800dd5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd60:	1e5a      	subs	r2, r3, #1
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d02c      	beq.n	800ddcc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d128      	bne.n	800ddcc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	3304      	adds	r3, #4
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7fe f9ba 	bl	800c0f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd9c:	4b0f      	ldr	r3, [pc, #60]	; (800dddc <xTaskPriorityDisinherit+0xd4>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d903      	bls.n	800ddac <xTaskPriorityDisinherit+0xa4>
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dda8:	4a0c      	ldr	r2, [pc, #48]	; (800dddc <xTaskPriorityDisinherit+0xd4>)
 800ddaa:	6013      	str	r3, [r2, #0]
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddb0:	4613      	mov	r3, r2
 800ddb2:	009b      	lsls	r3, r3, #2
 800ddb4:	4413      	add	r3, r2
 800ddb6:	009b      	lsls	r3, r3, #2
 800ddb8:	4a09      	ldr	r2, [pc, #36]	; (800dde0 <xTaskPriorityDisinherit+0xd8>)
 800ddba:	441a      	add	r2, r3
 800ddbc:	693b      	ldr	r3, [r7, #16]
 800ddbe:	3304      	adds	r3, #4
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	4610      	mov	r0, r2
 800ddc4:	f7fe f93b 	bl	800c03e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ddc8:	2301      	movs	r3, #1
 800ddca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ddcc:	697b      	ldr	r3, [r7, #20]
	}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3718      	adds	r7, #24
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	bf00      	nop
 800ddd8:	20000fe0 	.word	0x20000fe0
 800dddc:	200014bc 	.word	0x200014bc
 800dde0:	20000fe4 	.word	0x20000fe4

0800dde4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b088      	sub	sp, #32
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d06a      	beq.n	800ded2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ddfc:	69bb      	ldr	r3, [r7, #24]
 800ddfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de00:	2b00      	cmp	r3, #0
 800de02:	d10a      	bne.n	800de1a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800de04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de08:	f383 8811 	msr	BASEPRI, r3
 800de0c:	f3bf 8f6f 	isb	sy
 800de10:	f3bf 8f4f 	dsb	sy
 800de14:	60fb      	str	r3, [r7, #12]
}
 800de16:	bf00      	nop
 800de18:	e7fe      	b.n	800de18 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800de1a:	69bb      	ldr	r3, [r7, #24]
 800de1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de1e:	683a      	ldr	r2, [r7, #0]
 800de20:	429a      	cmp	r2, r3
 800de22:	d902      	bls.n	800de2a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	61fb      	str	r3, [r7, #28]
 800de28:	e002      	b.n	800de30 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800de2a:	69bb      	ldr	r3, [r7, #24]
 800de2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de2e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800de30:	69bb      	ldr	r3, [r7, #24]
 800de32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de34:	69fa      	ldr	r2, [r7, #28]
 800de36:	429a      	cmp	r2, r3
 800de38:	d04b      	beq.n	800ded2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800de3a:	69bb      	ldr	r3, [r7, #24]
 800de3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de3e:	697a      	ldr	r2, [r7, #20]
 800de40:	429a      	cmp	r2, r3
 800de42:	d146      	bne.n	800ded2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800de44:	4b25      	ldr	r3, [pc, #148]	; (800dedc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	69ba      	ldr	r2, [r7, #24]
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d10a      	bne.n	800de64 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800de4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de52:	f383 8811 	msr	BASEPRI, r3
 800de56:	f3bf 8f6f 	isb	sy
 800de5a:	f3bf 8f4f 	dsb	sy
 800de5e:	60bb      	str	r3, [r7, #8]
}
 800de60:	bf00      	nop
 800de62:	e7fe      	b.n	800de62 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800de64:	69bb      	ldr	r3, [r7, #24]
 800de66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de68:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800de6a:	69bb      	ldr	r3, [r7, #24]
 800de6c:	69fa      	ldr	r2, [r7, #28]
 800de6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800de70:	69bb      	ldr	r3, [r7, #24]
 800de72:	699b      	ldr	r3, [r3, #24]
 800de74:	2b00      	cmp	r3, #0
 800de76:	db04      	blt.n	800de82 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de78:	69fb      	ldr	r3, [r7, #28]
 800de7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800de7e:	69bb      	ldr	r3, [r7, #24]
 800de80:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800de82:	69bb      	ldr	r3, [r7, #24]
 800de84:	6959      	ldr	r1, [r3, #20]
 800de86:	693a      	ldr	r2, [r7, #16]
 800de88:	4613      	mov	r3, r2
 800de8a:	009b      	lsls	r3, r3, #2
 800de8c:	4413      	add	r3, r2
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	4a13      	ldr	r2, [pc, #76]	; (800dee0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800de92:	4413      	add	r3, r2
 800de94:	4299      	cmp	r1, r3
 800de96:	d11c      	bne.n	800ded2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de98:	69bb      	ldr	r3, [r7, #24]
 800de9a:	3304      	adds	r3, #4
 800de9c:	4618      	mov	r0, r3
 800de9e:	f7fe f92b 	bl	800c0f8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dea2:	69bb      	ldr	r3, [r7, #24]
 800dea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dea6:	4b0f      	ldr	r3, [pc, #60]	; (800dee4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d903      	bls.n	800deb6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800deae:	69bb      	ldr	r3, [r7, #24]
 800deb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deb2:	4a0c      	ldr	r2, [pc, #48]	; (800dee4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800deb4:	6013      	str	r3, [r2, #0]
 800deb6:	69bb      	ldr	r3, [r7, #24]
 800deb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deba:	4613      	mov	r3, r2
 800debc:	009b      	lsls	r3, r3, #2
 800debe:	4413      	add	r3, r2
 800dec0:	009b      	lsls	r3, r3, #2
 800dec2:	4a07      	ldr	r2, [pc, #28]	; (800dee0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dec4:	441a      	add	r2, r3
 800dec6:	69bb      	ldr	r3, [r7, #24]
 800dec8:	3304      	adds	r3, #4
 800deca:	4619      	mov	r1, r3
 800decc:	4610      	mov	r0, r2
 800dece:	f7fe f8b6 	bl	800c03e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ded2:	bf00      	nop
 800ded4:	3720      	adds	r7, #32
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
 800deda:	bf00      	nop
 800dedc:	20000fe0 	.word	0x20000fe0
 800dee0:	20000fe4 	.word	0x20000fe4
 800dee4:	200014bc 	.word	0x200014bc

0800dee8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dee8:	b480      	push	{r7}
 800deea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800deec:	4b07      	ldr	r3, [pc, #28]	; (800df0c <pvTaskIncrementMutexHeldCount+0x24>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d004      	beq.n	800defe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800def4:	4b05      	ldr	r3, [pc, #20]	; (800df0c <pvTaskIncrementMutexHeldCount+0x24>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800defa:	3201      	adds	r2, #1
 800defc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800defe:	4b03      	ldr	r3, [pc, #12]	; (800df0c <pvTaskIncrementMutexHeldCount+0x24>)
 800df00:	681b      	ldr	r3, [r3, #0]
	}
 800df02:	4618      	mov	r0, r3
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr
 800df0c:	20000fe0 	.word	0x20000fe0

0800df10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800df1a:	4b21      	ldr	r3, [pc, #132]	; (800dfa0 <prvAddCurrentTaskToDelayedList+0x90>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df20:	4b20      	ldr	r3, [pc, #128]	; (800dfa4 <prvAddCurrentTaskToDelayedList+0x94>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	3304      	adds	r3, #4
 800df26:	4618      	mov	r0, r3
 800df28:	f7fe f8e6 	bl	800c0f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df32:	d10a      	bne.n	800df4a <prvAddCurrentTaskToDelayedList+0x3a>
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d007      	beq.n	800df4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df3a:	4b1a      	ldr	r3, [pc, #104]	; (800dfa4 <prvAddCurrentTaskToDelayedList+0x94>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	3304      	adds	r3, #4
 800df40:	4619      	mov	r1, r3
 800df42:	4819      	ldr	r0, [pc, #100]	; (800dfa8 <prvAddCurrentTaskToDelayedList+0x98>)
 800df44:	f7fe f87b 	bl	800c03e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800df48:	e026      	b.n	800df98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800df4a:	68fa      	ldr	r2, [r7, #12]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	4413      	add	r3, r2
 800df50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800df52:	4b14      	ldr	r3, [pc, #80]	; (800dfa4 <prvAddCurrentTaskToDelayedList+0x94>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	68ba      	ldr	r2, [r7, #8]
 800df58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800df5a:	68ba      	ldr	r2, [r7, #8]
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	429a      	cmp	r2, r3
 800df60:	d209      	bcs.n	800df76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df62:	4b12      	ldr	r3, [pc, #72]	; (800dfac <prvAddCurrentTaskToDelayedList+0x9c>)
 800df64:	681a      	ldr	r2, [r3, #0]
 800df66:	4b0f      	ldr	r3, [pc, #60]	; (800dfa4 <prvAddCurrentTaskToDelayedList+0x94>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	3304      	adds	r3, #4
 800df6c:	4619      	mov	r1, r3
 800df6e:	4610      	mov	r0, r2
 800df70:	f7fe f889 	bl	800c086 <vListInsert>
}
 800df74:	e010      	b.n	800df98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df76:	4b0e      	ldr	r3, [pc, #56]	; (800dfb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800df78:	681a      	ldr	r2, [r3, #0]
 800df7a:	4b0a      	ldr	r3, [pc, #40]	; (800dfa4 <prvAddCurrentTaskToDelayedList+0x94>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	3304      	adds	r3, #4
 800df80:	4619      	mov	r1, r3
 800df82:	4610      	mov	r0, r2
 800df84:	f7fe f87f 	bl	800c086 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800df88:	4b0a      	ldr	r3, [pc, #40]	; (800dfb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	68ba      	ldr	r2, [r7, #8]
 800df8e:	429a      	cmp	r2, r3
 800df90:	d202      	bcs.n	800df98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800df92:	4a08      	ldr	r2, [pc, #32]	; (800dfb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	6013      	str	r3, [r2, #0]
}
 800df98:	bf00      	nop
 800df9a:	3710      	adds	r7, #16
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	200014b8 	.word	0x200014b8
 800dfa4:	20000fe0 	.word	0x20000fe0
 800dfa8:	200014a0 	.word	0x200014a0
 800dfac:	20001470 	.word	0x20001470
 800dfb0:	2000146c 	.word	0x2000146c
 800dfb4:	200014d4 	.word	0x200014d4

0800dfb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b08a      	sub	sp, #40	; 0x28
 800dfbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dfc2:	f000 fb07 	bl	800e5d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dfc6:	4b1c      	ldr	r3, [pc, #112]	; (800e038 <xTimerCreateTimerTask+0x80>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d021      	beq.n	800e012 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dfd6:	1d3a      	adds	r2, r7, #4
 800dfd8:	f107 0108 	add.w	r1, r7, #8
 800dfdc:	f107 030c 	add.w	r3, r7, #12
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f7fd ffe5 	bl	800bfb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dfe6:	6879      	ldr	r1, [r7, #4]
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	68fa      	ldr	r2, [r7, #12]
 800dfec:	9202      	str	r2, [sp, #8]
 800dfee:	9301      	str	r3, [sp, #4]
 800dff0:	2302      	movs	r3, #2
 800dff2:	9300      	str	r3, [sp, #0]
 800dff4:	2300      	movs	r3, #0
 800dff6:	460a      	mov	r2, r1
 800dff8:	4910      	ldr	r1, [pc, #64]	; (800e03c <xTimerCreateTimerTask+0x84>)
 800dffa:	4811      	ldr	r0, [pc, #68]	; (800e040 <xTimerCreateTimerTask+0x88>)
 800dffc:	f7fe ffa6 	bl	800cf4c <xTaskCreateStatic>
 800e000:	4603      	mov	r3, r0
 800e002:	4a10      	ldr	r2, [pc, #64]	; (800e044 <xTimerCreateTimerTask+0x8c>)
 800e004:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e006:	4b0f      	ldr	r3, [pc, #60]	; (800e044 <xTimerCreateTimerTask+0x8c>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d001      	beq.n	800e012 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e00e:	2301      	movs	r3, #1
 800e010:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d10a      	bne.n	800e02e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e01c:	f383 8811 	msr	BASEPRI, r3
 800e020:	f3bf 8f6f 	isb	sy
 800e024:	f3bf 8f4f 	dsb	sy
 800e028:	613b      	str	r3, [r7, #16]
}
 800e02a:	bf00      	nop
 800e02c:	e7fe      	b.n	800e02c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e02e:	697b      	ldr	r3, [r7, #20]
}
 800e030:	4618      	mov	r0, r3
 800e032:	3718      	adds	r7, #24
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}
 800e038:	20001510 	.word	0x20001510
 800e03c:	0800ff28 	.word	0x0800ff28
 800e040:	0800e17d 	.word	0x0800e17d
 800e044:	20001514 	.word	0x20001514

0800e048 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b08a      	sub	sp, #40	; 0x28
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	60f8      	str	r0, [r7, #12]
 800e050:	60b9      	str	r1, [r7, #8]
 800e052:	607a      	str	r2, [r7, #4]
 800e054:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e056:	2300      	movs	r3, #0
 800e058:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d10a      	bne.n	800e076 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e064:	f383 8811 	msr	BASEPRI, r3
 800e068:	f3bf 8f6f 	isb	sy
 800e06c:	f3bf 8f4f 	dsb	sy
 800e070:	623b      	str	r3, [r7, #32]
}
 800e072:	bf00      	nop
 800e074:	e7fe      	b.n	800e074 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e076:	4b1a      	ldr	r3, [pc, #104]	; (800e0e0 <xTimerGenericCommand+0x98>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d02a      	beq.n	800e0d4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	2b05      	cmp	r3, #5
 800e08e:	dc18      	bgt.n	800e0c2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e090:	f7ff fdb4 	bl	800dbfc <xTaskGetSchedulerState>
 800e094:	4603      	mov	r3, r0
 800e096:	2b02      	cmp	r3, #2
 800e098:	d109      	bne.n	800e0ae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e09a:	4b11      	ldr	r3, [pc, #68]	; (800e0e0 <xTimerGenericCommand+0x98>)
 800e09c:	6818      	ldr	r0, [r3, #0]
 800e09e:	f107 0110 	add.w	r1, r7, #16
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0a6:	f7fe fa45 	bl	800c534 <xQueueGenericSend>
 800e0aa:	6278      	str	r0, [r7, #36]	; 0x24
 800e0ac:	e012      	b.n	800e0d4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e0ae:	4b0c      	ldr	r3, [pc, #48]	; (800e0e0 <xTimerGenericCommand+0x98>)
 800e0b0:	6818      	ldr	r0, [r3, #0]
 800e0b2:	f107 0110 	add.w	r1, r7, #16
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	f7fe fa3b 	bl	800c534 <xQueueGenericSend>
 800e0be:	6278      	str	r0, [r7, #36]	; 0x24
 800e0c0:	e008      	b.n	800e0d4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e0c2:	4b07      	ldr	r3, [pc, #28]	; (800e0e0 <xTimerGenericCommand+0x98>)
 800e0c4:	6818      	ldr	r0, [r3, #0]
 800e0c6:	f107 0110 	add.w	r1, r7, #16
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	683a      	ldr	r2, [r7, #0]
 800e0ce:	f7fe fb2f 	bl	800c730 <xQueueGenericSendFromISR>
 800e0d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3728      	adds	r7, #40	; 0x28
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}
 800e0de:	bf00      	nop
 800e0e0:	20001510 	.word	0x20001510

0800e0e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b088      	sub	sp, #32
 800e0e8:	af02      	add	r7, sp, #8
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0ee:	4b22      	ldr	r3, [pc, #136]	; (800e178 <prvProcessExpiredTimer+0x94>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	68db      	ldr	r3, [r3, #12]
 800e0f4:	68db      	ldr	r3, [r3, #12]
 800e0f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	3304      	adds	r3, #4
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7fd fffb 	bl	800c0f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e108:	f003 0304 	and.w	r3, r3, #4
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d022      	beq.n	800e156 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	699a      	ldr	r2, [r3, #24]
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	18d1      	adds	r1, r2, r3
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	683a      	ldr	r2, [r7, #0]
 800e11c:	6978      	ldr	r0, [r7, #20]
 800e11e:	f000 f8d1 	bl	800e2c4 <prvInsertTimerInActiveList>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d01f      	beq.n	800e168 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e128:	2300      	movs	r3, #0
 800e12a:	9300      	str	r3, [sp, #0]
 800e12c:	2300      	movs	r3, #0
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	2100      	movs	r1, #0
 800e132:	6978      	ldr	r0, [r7, #20]
 800e134:	f7ff ff88 	bl	800e048 <xTimerGenericCommand>
 800e138:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d113      	bne.n	800e168 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e144:	f383 8811 	msr	BASEPRI, r3
 800e148:	f3bf 8f6f 	isb	sy
 800e14c:	f3bf 8f4f 	dsb	sy
 800e150:	60fb      	str	r3, [r7, #12]
}
 800e152:	bf00      	nop
 800e154:	e7fe      	b.n	800e154 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e15c:	f023 0301 	bic.w	r3, r3, #1
 800e160:	b2da      	uxtb	r2, r3
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	6a1b      	ldr	r3, [r3, #32]
 800e16c:	6978      	ldr	r0, [r7, #20]
 800e16e:	4798      	blx	r3
}
 800e170:	bf00      	nop
 800e172:	3718      	adds	r7, #24
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}
 800e178:	20001508 	.word	0x20001508

0800e17c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b084      	sub	sp, #16
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e184:	f107 0308 	add.w	r3, r7, #8
 800e188:	4618      	mov	r0, r3
 800e18a:	f000 f857 	bl	800e23c <prvGetNextExpireTime>
 800e18e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	4619      	mov	r1, r3
 800e194:	68f8      	ldr	r0, [r7, #12]
 800e196:	f000 f803 	bl	800e1a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e19a:	f000 f8d5 	bl	800e348 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e19e:	e7f1      	b.n	800e184 <prvTimerTask+0x8>

0800e1a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e1aa:	f7ff f92b 	bl	800d404 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e1ae:	f107 0308 	add.w	r3, r7, #8
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f000 f866 	bl	800e284 <prvSampleTimeNow>
 800e1b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d130      	bne.n	800e222 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d10a      	bne.n	800e1dc <prvProcessTimerOrBlockTask+0x3c>
 800e1c6:	687a      	ldr	r2, [r7, #4]
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d806      	bhi.n	800e1dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e1ce:	f7ff f927 	bl	800d420 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e1d2:	68f9      	ldr	r1, [r7, #12]
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f7ff ff85 	bl	800e0e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e1da:	e024      	b.n	800e226 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d008      	beq.n	800e1f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e1e2:	4b13      	ldr	r3, [pc, #76]	; (800e230 <prvProcessTimerOrBlockTask+0x90>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d101      	bne.n	800e1f0 <prvProcessTimerOrBlockTask+0x50>
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	e000      	b.n	800e1f2 <prvProcessTimerOrBlockTask+0x52>
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e1f4:	4b0f      	ldr	r3, [pc, #60]	; (800e234 <prvProcessTimerOrBlockTask+0x94>)
 800e1f6:	6818      	ldr	r0, [r3, #0]
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	1ad3      	subs	r3, r2, r3
 800e1fe:	683a      	ldr	r2, [r7, #0]
 800e200:	4619      	mov	r1, r3
 800e202:	f7fe fe6f 	bl	800cee4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e206:	f7ff f90b 	bl	800d420 <xTaskResumeAll>
 800e20a:	4603      	mov	r3, r0
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d10a      	bne.n	800e226 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e210:	4b09      	ldr	r3, [pc, #36]	; (800e238 <prvProcessTimerOrBlockTask+0x98>)
 800e212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e216:	601a      	str	r2, [r3, #0]
 800e218:	f3bf 8f4f 	dsb	sy
 800e21c:	f3bf 8f6f 	isb	sy
}
 800e220:	e001      	b.n	800e226 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e222:	f7ff f8fd 	bl	800d420 <xTaskResumeAll>
}
 800e226:	bf00      	nop
 800e228:	3710      	adds	r7, #16
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}
 800e22e:	bf00      	nop
 800e230:	2000150c 	.word	0x2000150c
 800e234:	20001510 	.word	0x20001510
 800e238:	e000ed04 	.word	0xe000ed04

0800e23c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e23c:	b480      	push	{r7}
 800e23e:	b085      	sub	sp, #20
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e244:	4b0e      	ldr	r3, [pc, #56]	; (800e280 <prvGetNextExpireTime+0x44>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d101      	bne.n	800e252 <prvGetNextExpireTime+0x16>
 800e24e:	2201      	movs	r2, #1
 800e250:	e000      	b.n	800e254 <prvGetNextExpireTime+0x18>
 800e252:	2200      	movs	r2, #0
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d105      	bne.n	800e26c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e260:	4b07      	ldr	r3, [pc, #28]	; (800e280 <prvGetNextExpireTime+0x44>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	68db      	ldr	r3, [r3, #12]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	60fb      	str	r3, [r7, #12]
 800e26a:	e001      	b.n	800e270 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e26c:	2300      	movs	r3, #0
 800e26e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e270:	68fb      	ldr	r3, [r7, #12]
}
 800e272:	4618      	mov	r0, r3
 800e274:	3714      	adds	r7, #20
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr
 800e27e:	bf00      	nop
 800e280:	20001508 	.word	0x20001508

0800e284 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b084      	sub	sp, #16
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e28c:	f7ff f966 	bl	800d55c <xTaskGetTickCount>
 800e290:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e292:	4b0b      	ldr	r3, [pc, #44]	; (800e2c0 <prvSampleTimeNow+0x3c>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	68fa      	ldr	r2, [r7, #12]
 800e298:	429a      	cmp	r2, r3
 800e29a:	d205      	bcs.n	800e2a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e29c:	f000 f936 	bl	800e50c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2201      	movs	r2, #1
 800e2a4:	601a      	str	r2, [r3, #0]
 800e2a6:	e002      	b.n	800e2ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e2ae:	4a04      	ldr	r2, [pc, #16]	; (800e2c0 <prvSampleTimeNow+0x3c>)
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3710      	adds	r7, #16
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	20001518 	.word	0x20001518

0800e2c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b086      	sub	sp, #24
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	60f8      	str	r0, [r7, #12]
 800e2cc:	60b9      	str	r1, [r7, #8]
 800e2ce:	607a      	str	r2, [r7, #4]
 800e2d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	68ba      	ldr	r2, [r7, #8]
 800e2da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	68fa      	ldr	r2, [r7, #12]
 800e2e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e2e2:	68ba      	ldr	r2, [r7, #8]
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d812      	bhi.n	800e310 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2ea:	687a      	ldr	r2, [r7, #4]
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	1ad2      	subs	r2, r2, r3
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	699b      	ldr	r3, [r3, #24]
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d302      	bcc.n	800e2fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	617b      	str	r3, [r7, #20]
 800e2fc:	e01b      	b.n	800e336 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e2fe:	4b10      	ldr	r3, [pc, #64]	; (800e340 <prvInsertTimerInActiveList+0x7c>)
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	3304      	adds	r3, #4
 800e306:	4619      	mov	r1, r3
 800e308:	4610      	mov	r0, r2
 800e30a:	f7fd febc 	bl	800c086 <vListInsert>
 800e30e:	e012      	b.n	800e336 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	429a      	cmp	r2, r3
 800e316:	d206      	bcs.n	800e326 <prvInsertTimerInActiveList+0x62>
 800e318:	68ba      	ldr	r2, [r7, #8]
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d302      	bcc.n	800e326 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e320:	2301      	movs	r3, #1
 800e322:	617b      	str	r3, [r7, #20]
 800e324:	e007      	b.n	800e336 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e326:	4b07      	ldr	r3, [pc, #28]	; (800e344 <prvInsertTimerInActiveList+0x80>)
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	3304      	adds	r3, #4
 800e32e:	4619      	mov	r1, r3
 800e330:	4610      	mov	r0, r2
 800e332:	f7fd fea8 	bl	800c086 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e336:	697b      	ldr	r3, [r7, #20]
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3718      	adds	r7, #24
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}
 800e340:	2000150c 	.word	0x2000150c
 800e344:	20001508 	.word	0x20001508

0800e348 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b08e      	sub	sp, #56	; 0x38
 800e34c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e34e:	e0ca      	b.n	800e4e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2b00      	cmp	r3, #0
 800e354:	da18      	bge.n	800e388 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e356:	1d3b      	adds	r3, r7, #4
 800e358:	3304      	adds	r3, #4
 800e35a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d10a      	bne.n	800e378 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e366:	f383 8811 	msr	BASEPRI, r3
 800e36a:	f3bf 8f6f 	isb	sy
 800e36e:	f3bf 8f4f 	dsb	sy
 800e372:	61fb      	str	r3, [r7, #28]
}
 800e374:	bf00      	nop
 800e376:	e7fe      	b.n	800e376 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e37e:	6850      	ldr	r0, [r2, #4]
 800e380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e382:	6892      	ldr	r2, [r2, #8]
 800e384:	4611      	mov	r1, r2
 800e386:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	f2c0 80aa 	blt.w	800e4e4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e396:	695b      	ldr	r3, [r3, #20]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d004      	beq.n	800e3a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e39e:	3304      	adds	r3, #4
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7fd fea9 	bl	800c0f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e3a6:	463b      	mov	r3, r7
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f7ff ff6b 	bl	800e284 <prvSampleTimeNow>
 800e3ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2b09      	cmp	r3, #9
 800e3b4:	f200 8097 	bhi.w	800e4e6 <prvProcessReceivedCommands+0x19e>
 800e3b8:	a201      	add	r2, pc, #4	; (adr r2, 800e3c0 <prvProcessReceivedCommands+0x78>)
 800e3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3be:	bf00      	nop
 800e3c0:	0800e3e9 	.word	0x0800e3e9
 800e3c4:	0800e3e9 	.word	0x0800e3e9
 800e3c8:	0800e3e9 	.word	0x0800e3e9
 800e3cc:	0800e45d 	.word	0x0800e45d
 800e3d0:	0800e471 	.word	0x0800e471
 800e3d4:	0800e4bb 	.word	0x0800e4bb
 800e3d8:	0800e3e9 	.word	0x0800e3e9
 800e3dc:	0800e3e9 	.word	0x0800e3e9
 800e3e0:	0800e45d 	.word	0x0800e45d
 800e3e4:	0800e471 	.word	0x0800e471
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3ee:	f043 0301 	orr.w	r3, r3, #1
 800e3f2:	b2da      	uxtb	r2, r3
 800e3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e3fa:	68ba      	ldr	r2, [r7, #8]
 800e3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3fe:	699b      	ldr	r3, [r3, #24]
 800e400:	18d1      	adds	r1, r2, r3
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e408:	f7ff ff5c 	bl	800e2c4 <prvInsertTimerInActiveList>
 800e40c:	4603      	mov	r3, r0
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d069      	beq.n	800e4e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e414:	6a1b      	ldr	r3, [r3, #32]
 800e416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e418:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e420:	f003 0304 	and.w	r3, r3, #4
 800e424:	2b00      	cmp	r3, #0
 800e426:	d05e      	beq.n	800e4e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e428:	68ba      	ldr	r2, [r7, #8]
 800e42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42c:	699b      	ldr	r3, [r3, #24]
 800e42e:	441a      	add	r2, r3
 800e430:	2300      	movs	r3, #0
 800e432:	9300      	str	r3, [sp, #0]
 800e434:	2300      	movs	r3, #0
 800e436:	2100      	movs	r1, #0
 800e438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e43a:	f7ff fe05 	bl	800e048 <xTimerGenericCommand>
 800e43e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e440:	6a3b      	ldr	r3, [r7, #32]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d14f      	bne.n	800e4e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e44a:	f383 8811 	msr	BASEPRI, r3
 800e44e:	f3bf 8f6f 	isb	sy
 800e452:	f3bf 8f4f 	dsb	sy
 800e456:	61bb      	str	r3, [r7, #24]
}
 800e458:	bf00      	nop
 800e45a:	e7fe      	b.n	800e45a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e462:	f023 0301 	bic.w	r3, r3, #1
 800e466:	b2da      	uxtb	r2, r3
 800e468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e46a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e46e:	e03a      	b.n	800e4e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e476:	f043 0301 	orr.w	r3, r3, #1
 800e47a:	b2da      	uxtb	r2, r3
 800e47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e482:	68ba      	ldr	r2, [r7, #8]
 800e484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e486:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48a:	699b      	ldr	r3, [r3, #24]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d10a      	bne.n	800e4a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e494:	f383 8811 	msr	BASEPRI, r3
 800e498:	f3bf 8f6f 	isb	sy
 800e49c:	f3bf 8f4f 	dsb	sy
 800e4a0:	617b      	str	r3, [r7, #20]
}
 800e4a2:	bf00      	nop
 800e4a4:	e7fe      	b.n	800e4a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a8:	699a      	ldr	r2, [r3, #24]
 800e4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ac:	18d1      	adds	r1, r2, r3
 800e4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4b4:	f7ff ff06 	bl	800e2c4 <prvInsertTimerInActiveList>
					break;
 800e4b8:	e015      	b.n	800e4e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4c0:	f003 0302 	and.w	r3, r3, #2
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d103      	bne.n	800e4d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e4c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4ca:	f000 fbe1 	bl	800ec90 <vPortFree>
 800e4ce:	e00a      	b.n	800e4e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4d6:	f023 0301 	bic.w	r3, r3, #1
 800e4da:	b2da      	uxtb	r2, r3
 800e4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e4e2:	e000      	b.n	800e4e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e4e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e4e6:	4b08      	ldr	r3, [pc, #32]	; (800e508 <prvProcessReceivedCommands+0x1c0>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	1d39      	adds	r1, r7, #4
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7fe f9ba 	bl	800c868 <xQueueReceive>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	f47f af2a 	bne.w	800e350 <prvProcessReceivedCommands+0x8>
	}
}
 800e4fc:	bf00      	nop
 800e4fe:	bf00      	nop
 800e500:	3730      	adds	r7, #48	; 0x30
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
 800e506:	bf00      	nop
 800e508:	20001510 	.word	0x20001510

0800e50c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b088      	sub	sp, #32
 800e510:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e512:	e048      	b.n	800e5a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e514:	4b2d      	ldr	r3, [pc, #180]	; (800e5cc <prvSwitchTimerLists+0xc0>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	68db      	ldr	r3, [r3, #12]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e51e:	4b2b      	ldr	r3, [pc, #172]	; (800e5cc <prvSwitchTimerLists+0xc0>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	68db      	ldr	r3, [r3, #12]
 800e524:	68db      	ldr	r3, [r3, #12]
 800e526:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	3304      	adds	r3, #4
 800e52c:	4618      	mov	r0, r3
 800e52e:	f7fd fde3 	bl	800c0f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	6a1b      	ldr	r3, [r3, #32]
 800e536:	68f8      	ldr	r0, [r7, #12]
 800e538:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e540:	f003 0304 	and.w	r3, r3, #4
 800e544:	2b00      	cmp	r3, #0
 800e546:	d02e      	beq.n	800e5a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	699b      	ldr	r3, [r3, #24]
 800e54c:	693a      	ldr	r2, [r7, #16]
 800e54e:	4413      	add	r3, r2
 800e550:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e552:	68ba      	ldr	r2, [r7, #8]
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	429a      	cmp	r2, r3
 800e558:	d90e      	bls.n	800e578 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	68ba      	ldr	r2, [r7, #8]
 800e55e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	68fa      	ldr	r2, [r7, #12]
 800e564:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e566:	4b19      	ldr	r3, [pc, #100]	; (800e5cc <prvSwitchTimerLists+0xc0>)
 800e568:	681a      	ldr	r2, [r3, #0]
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	3304      	adds	r3, #4
 800e56e:	4619      	mov	r1, r3
 800e570:	4610      	mov	r0, r2
 800e572:	f7fd fd88 	bl	800c086 <vListInsert>
 800e576:	e016      	b.n	800e5a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e578:	2300      	movs	r3, #0
 800e57a:	9300      	str	r3, [sp, #0]
 800e57c:	2300      	movs	r3, #0
 800e57e:	693a      	ldr	r2, [r7, #16]
 800e580:	2100      	movs	r1, #0
 800e582:	68f8      	ldr	r0, [r7, #12]
 800e584:	f7ff fd60 	bl	800e048 <xTimerGenericCommand>
 800e588:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d10a      	bne.n	800e5a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e594:	f383 8811 	msr	BASEPRI, r3
 800e598:	f3bf 8f6f 	isb	sy
 800e59c:	f3bf 8f4f 	dsb	sy
 800e5a0:	603b      	str	r3, [r7, #0]
}
 800e5a2:	bf00      	nop
 800e5a4:	e7fe      	b.n	800e5a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e5a6:	4b09      	ldr	r3, [pc, #36]	; (800e5cc <prvSwitchTimerLists+0xc0>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d1b1      	bne.n	800e514 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e5b0:	4b06      	ldr	r3, [pc, #24]	; (800e5cc <prvSwitchTimerLists+0xc0>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e5b6:	4b06      	ldr	r3, [pc, #24]	; (800e5d0 <prvSwitchTimerLists+0xc4>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	4a04      	ldr	r2, [pc, #16]	; (800e5cc <prvSwitchTimerLists+0xc0>)
 800e5bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e5be:	4a04      	ldr	r2, [pc, #16]	; (800e5d0 <prvSwitchTimerLists+0xc4>)
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	6013      	str	r3, [r2, #0]
}
 800e5c4:	bf00      	nop
 800e5c6:	3718      	adds	r7, #24
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}
 800e5cc:	20001508 	.word	0x20001508
 800e5d0:	2000150c 	.word	0x2000150c

0800e5d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b082      	sub	sp, #8
 800e5d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e5da:	f000 f96b 	bl	800e8b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e5de:	4b15      	ldr	r3, [pc, #84]	; (800e634 <prvCheckForValidListAndQueue+0x60>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d120      	bne.n	800e628 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e5e6:	4814      	ldr	r0, [pc, #80]	; (800e638 <prvCheckForValidListAndQueue+0x64>)
 800e5e8:	f7fd fcfc 	bl	800bfe4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e5ec:	4813      	ldr	r0, [pc, #76]	; (800e63c <prvCheckForValidListAndQueue+0x68>)
 800e5ee:	f7fd fcf9 	bl	800bfe4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e5f2:	4b13      	ldr	r3, [pc, #76]	; (800e640 <prvCheckForValidListAndQueue+0x6c>)
 800e5f4:	4a10      	ldr	r2, [pc, #64]	; (800e638 <prvCheckForValidListAndQueue+0x64>)
 800e5f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e5f8:	4b12      	ldr	r3, [pc, #72]	; (800e644 <prvCheckForValidListAndQueue+0x70>)
 800e5fa:	4a10      	ldr	r2, [pc, #64]	; (800e63c <prvCheckForValidListAndQueue+0x68>)
 800e5fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e5fe:	2300      	movs	r3, #0
 800e600:	9300      	str	r3, [sp, #0]
 800e602:	4b11      	ldr	r3, [pc, #68]	; (800e648 <prvCheckForValidListAndQueue+0x74>)
 800e604:	4a11      	ldr	r2, [pc, #68]	; (800e64c <prvCheckForValidListAndQueue+0x78>)
 800e606:	2110      	movs	r1, #16
 800e608:	200a      	movs	r0, #10
 800e60a:	f7fd fe07 	bl	800c21c <xQueueGenericCreateStatic>
 800e60e:	4603      	mov	r3, r0
 800e610:	4a08      	ldr	r2, [pc, #32]	; (800e634 <prvCheckForValidListAndQueue+0x60>)
 800e612:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e614:	4b07      	ldr	r3, [pc, #28]	; (800e634 <prvCheckForValidListAndQueue+0x60>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d005      	beq.n	800e628 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e61c:	4b05      	ldr	r3, [pc, #20]	; (800e634 <prvCheckForValidListAndQueue+0x60>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	490b      	ldr	r1, [pc, #44]	; (800e650 <prvCheckForValidListAndQueue+0x7c>)
 800e622:	4618      	mov	r0, r3
 800e624:	f7fe fc34 	bl	800ce90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e628:	f000 f974 	bl	800e914 <vPortExitCritical>
}
 800e62c:	bf00      	nop
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}
 800e632:	bf00      	nop
 800e634:	20001510 	.word	0x20001510
 800e638:	200014e0 	.word	0x200014e0
 800e63c:	200014f4 	.word	0x200014f4
 800e640:	20001508 	.word	0x20001508
 800e644:	2000150c 	.word	0x2000150c
 800e648:	200015bc 	.word	0x200015bc
 800e64c:	2000151c 	.word	0x2000151c
 800e650:	0800ff30 	.word	0x0800ff30

0800e654 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e654:	b480      	push	{r7}
 800e656:	b085      	sub	sp, #20
 800e658:	af00      	add	r7, sp, #0
 800e65a:	60f8      	str	r0, [r7, #12]
 800e65c:	60b9      	str	r1, [r7, #8]
 800e65e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	3b04      	subs	r3, #4
 800e664:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e66c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	3b04      	subs	r3, #4
 800e672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	f023 0201 	bic.w	r2, r3, #1
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	3b04      	subs	r3, #4
 800e682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e684:	4a0c      	ldr	r2, [pc, #48]	; (800e6b8 <pxPortInitialiseStack+0x64>)
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	3b14      	subs	r3, #20
 800e68e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e690:	687a      	ldr	r2, [r7, #4]
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	3b04      	subs	r3, #4
 800e69a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	f06f 0202 	mvn.w	r2, #2
 800e6a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	3b20      	subs	r3, #32
 800e6a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3714      	adds	r7, #20
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b6:	4770      	bx	lr
 800e6b8:	0800e6bd 	.word	0x0800e6bd

0800e6bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b085      	sub	sp, #20
 800e6c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e6c6:	4b12      	ldr	r3, [pc, #72]	; (800e710 <prvTaskExitError+0x54>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6ce:	d00a      	beq.n	800e6e6 <prvTaskExitError+0x2a>
	__asm volatile
 800e6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d4:	f383 8811 	msr	BASEPRI, r3
 800e6d8:	f3bf 8f6f 	isb	sy
 800e6dc:	f3bf 8f4f 	dsb	sy
 800e6e0:	60fb      	str	r3, [r7, #12]
}
 800e6e2:	bf00      	nop
 800e6e4:	e7fe      	b.n	800e6e4 <prvTaskExitError+0x28>
	__asm volatile
 800e6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ea:	f383 8811 	msr	BASEPRI, r3
 800e6ee:	f3bf 8f6f 	isb	sy
 800e6f2:	f3bf 8f4f 	dsb	sy
 800e6f6:	60bb      	str	r3, [r7, #8]
}
 800e6f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e6fa:	bf00      	nop
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d0fc      	beq.n	800e6fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e702:	bf00      	nop
 800e704:	bf00      	nop
 800e706:	3714      	adds	r7, #20
 800e708:	46bd      	mov	sp, r7
 800e70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70e:	4770      	bx	lr
 800e710:	200000cc 	.word	0x200000cc
	...

0800e720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e720:	4b07      	ldr	r3, [pc, #28]	; (800e740 <pxCurrentTCBConst2>)
 800e722:	6819      	ldr	r1, [r3, #0]
 800e724:	6808      	ldr	r0, [r1, #0]
 800e726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e72a:	f380 8809 	msr	PSP, r0
 800e72e:	f3bf 8f6f 	isb	sy
 800e732:	f04f 0000 	mov.w	r0, #0
 800e736:	f380 8811 	msr	BASEPRI, r0
 800e73a:	4770      	bx	lr
 800e73c:	f3af 8000 	nop.w

0800e740 <pxCurrentTCBConst2>:
 800e740:	20000fe0 	.word	0x20000fe0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e744:	bf00      	nop
 800e746:	bf00      	nop

0800e748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e748:	4808      	ldr	r0, [pc, #32]	; (800e76c <prvPortStartFirstTask+0x24>)
 800e74a:	6800      	ldr	r0, [r0, #0]
 800e74c:	6800      	ldr	r0, [r0, #0]
 800e74e:	f380 8808 	msr	MSP, r0
 800e752:	f04f 0000 	mov.w	r0, #0
 800e756:	f380 8814 	msr	CONTROL, r0
 800e75a:	b662      	cpsie	i
 800e75c:	b661      	cpsie	f
 800e75e:	f3bf 8f4f 	dsb	sy
 800e762:	f3bf 8f6f 	isb	sy
 800e766:	df00      	svc	0
 800e768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e76a:	bf00      	nop
 800e76c:	e000ed08 	.word	0xe000ed08

0800e770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b086      	sub	sp, #24
 800e774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e776:	4b46      	ldr	r3, [pc, #280]	; (800e890 <xPortStartScheduler+0x120>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	4a46      	ldr	r2, [pc, #280]	; (800e894 <xPortStartScheduler+0x124>)
 800e77c:	4293      	cmp	r3, r2
 800e77e:	d10a      	bne.n	800e796 <xPortStartScheduler+0x26>
	__asm volatile
 800e780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e784:	f383 8811 	msr	BASEPRI, r3
 800e788:	f3bf 8f6f 	isb	sy
 800e78c:	f3bf 8f4f 	dsb	sy
 800e790:	613b      	str	r3, [r7, #16]
}
 800e792:	bf00      	nop
 800e794:	e7fe      	b.n	800e794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e796:	4b3e      	ldr	r3, [pc, #248]	; (800e890 <xPortStartScheduler+0x120>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	4a3f      	ldr	r2, [pc, #252]	; (800e898 <xPortStartScheduler+0x128>)
 800e79c:	4293      	cmp	r3, r2
 800e79e:	d10a      	bne.n	800e7b6 <xPortStartScheduler+0x46>
	__asm volatile
 800e7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a4:	f383 8811 	msr	BASEPRI, r3
 800e7a8:	f3bf 8f6f 	isb	sy
 800e7ac:	f3bf 8f4f 	dsb	sy
 800e7b0:	60fb      	str	r3, [r7, #12]
}
 800e7b2:	bf00      	nop
 800e7b4:	e7fe      	b.n	800e7b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e7b6:	4b39      	ldr	r3, [pc, #228]	; (800e89c <xPortStartScheduler+0x12c>)
 800e7b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	b2db      	uxtb	r3, r3
 800e7c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	22ff      	movs	r2, #255	; 0xff
 800e7c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	b2db      	uxtb	r3, r3
 800e7ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e7d0:	78fb      	ldrb	r3, [r7, #3]
 800e7d2:	b2db      	uxtb	r3, r3
 800e7d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e7d8:	b2da      	uxtb	r2, r3
 800e7da:	4b31      	ldr	r3, [pc, #196]	; (800e8a0 <xPortStartScheduler+0x130>)
 800e7dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e7de:	4b31      	ldr	r3, [pc, #196]	; (800e8a4 <xPortStartScheduler+0x134>)
 800e7e0:	2207      	movs	r2, #7
 800e7e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e7e4:	e009      	b.n	800e7fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e7e6:	4b2f      	ldr	r3, [pc, #188]	; (800e8a4 <xPortStartScheduler+0x134>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	3b01      	subs	r3, #1
 800e7ec:	4a2d      	ldr	r2, [pc, #180]	; (800e8a4 <xPortStartScheduler+0x134>)
 800e7ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e7f0:	78fb      	ldrb	r3, [r7, #3]
 800e7f2:	b2db      	uxtb	r3, r3
 800e7f4:	005b      	lsls	r3, r3, #1
 800e7f6:	b2db      	uxtb	r3, r3
 800e7f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e7fa:	78fb      	ldrb	r3, [r7, #3]
 800e7fc:	b2db      	uxtb	r3, r3
 800e7fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e802:	2b80      	cmp	r3, #128	; 0x80
 800e804:	d0ef      	beq.n	800e7e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e806:	4b27      	ldr	r3, [pc, #156]	; (800e8a4 <xPortStartScheduler+0x134>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f1c3 0307 	rsb	r3, r3, #7
 800e80e:	2b04      	cmp	r3, #4
 800e810:	d00a      	beq.n	800e828 <xPortStartScheduler+0xb8>
	__asm volatile
 800e812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e816:	f383 8811 	msr	BASEPRI, r3
 800e81a:	f3bf 8f6f 	isb	sy
 800e81e:	f3bf 8f4f 	dsb	sy
 800e822:	60bb      	str	r3, [r7, #8]
}
 800e824:	bf00      	nop
 800e826:	e7fe      	b.n	800e826 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e828:	4b1e      	ldr	r3, [pc, #120]	; (800e8a4 <xPortStartScheduler+0x134>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	021b      	lsls	r3, r3, #8
 800e82e:	4a1d      	ldr	r2, [pc, #116]	; (800e8a4 <xPortStartScheduler+0x134>)
 800e830:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e832:	4b1c      	ldr	r3, [pc, #112]	; (800e8a4 <xPortStartScheduler+0x134>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e83a:	4a1a      	ldr	r2, [pc, #104]	; (800e8a4 <xPortStartScheduler+0x134>)
 800e83c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	b2da      	uxtb	r2, r3
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e846:	4b18      	ldr	r3, [pc, #96]	; (800e8a8 <xPortStartScheduler+0x138>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	4a17      	ldr	r2, [pc, #92]	; (800e8a8 <xPortStartScheduler+0x138>)
 800e84c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e852:	4b15      	ldr	r3, [pc, #84]	; (800e8a8 <xPortStartScheduler+0x138>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	4a14      	ldr	r2, [pc, #80]	; (800e8a8 <xPortStartScheduler+0x138>)
 800e858:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e85c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e85e:	f000 f8dd 	bl	800ea1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e862:	4b12      	ldr	r3, [pc, #72]	; (800e8ac <xPortStartScheduler+0x13c>)
 800e864:	2200      	movs	r2, #0
 800e866:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e868:	f000 f8fc 	bl	800ea64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e86c:	4b10      	ldr	r3, [pc, #64]	; (800e8b0 <xPortStartScheduler+0x140>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4a0f      	ldr	r2, [pc, #60]	; (800e8b0 <xPortStartScheduler+0x140>)
 800e872:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e876:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e878:	f7ff ff66 	bl	800e748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e87c:	f7fe ff38 	bl	800d6f0 <vTaskSwitchContext>
	prvTaskExitError();
 800e880:	f7ff ff1c 	bl	800e6bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e884:	2300      	movs	r3, #0
}
 800e886:	4618      	mov	r0, r3
 800e888:	3718      	adds	r7, #24
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	e000ed00 	.word	0xe000ed00
 800e894:	410fc271 	.word	0x410fc271
 800e898:	410fc270 	.word	0x410fc270
 800e89c:	e000e400 	.word	0xe000e400
 800e8a0:	2000160c 	.word	0x2000160c
 800e8a4:	20001610 	.word	0x20001610
 800e8a8:	e000ed20 	.word	0xe000ed20
 800e8ac:	200000cc 	.word	0x200000cc
 800e8b0:	e000ef34 	.word	0xe000ef34

0800e8b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b083      	sub	sp, #12
 800e8b8:	af00      	add	r7, sp, #0
	__asm volatile
 800e8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8be:	f383 8811 	msr	BASEPRI, r3
 800e8c2:	f3bf 8f6f 	isb	sy
 800e8c6:	f3bf 8f4f 	dsb	sy
 800e8ca:	607b      	str	r3, [r7, #4]
}
 800e8cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e8ce:	4b0f      	ldr	r3, [pc, #60]	; (800e90c <vPortEnterCritical+0x58>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	3301      	adds	r3, #1
 800e8d4:	4a0d      	ldr	r2, [pc, #52]	; (800e90c <vPortEnterCritical+0x58>)
 800e8d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e8d8:	4b0c      	ldr	r3, [pc, #48]	; (800e90c <vPortEnterCritical+0x58>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d10f      	bne.n	800e900 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e8e0:	4b0b      	ldr	r3, [pc, #44]	; (800e910 <vPortEnterCritical+0x5c>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	b2db      	uxtb	r3, r3
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d00a      	beq.n	800e900 <vPortEnterCritical+0x4c>
	__asm volatile
 800e8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ee:	f383 8811 	msr	BASEPRI, r3
 800e8f2:	f3bf 8f6f 	isb	sy
 800e8f6:	f3bf 8f4f 	dsb	sy
 800e8fa:	603b      	str	r3, [r7, #0]
}
 800e8fc:	bf00      	nop
 800e8fe:	e7fe      	b.n	800e8fe <vPortEnterCritical+0x4a>
	}
}
 800e900:	bf00      	nop
 800e902:	370c      	adds	r7, #12
 800e904:	46bd      	mov	sp, r7
 800e906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90a:	4770      	bx	lr
 800e90c:	200000cc 	.word	0x200000cc
 800e910:	e000ed04 	.word	0xe000ed04

0800e914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e914:	b480      	push	{r7}
 800e916:	b083      	sub	sp, #12
 800e918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e91a:	4b12      	ldr	r3, [pc, #72]	; (800e964 <vPortExitCritical+0x50>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d10a      	bne.n	800e938 <vPortExitCritical+0x24>
	__asm volatile
 800e922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e926:	f383 8811 	msr	BASEPRI, r3
 800e92a:	f3bf 8f6f 	isb	sy
 800e92e:	f3bf 8f4f 	dsb	sy
 800e932:	607b      	str	r3, [r7, #4]
}
 800e934:	bf00      	nop
 800e936:	e7fe      	b.n	800e936 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e938:	4b0a      	ldr	r3, [pc, #40]	; (800e964 <vPortExitCritical+0x50>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	3b01      	subs	r3, #1
 800e93e:	4a09      	ldr	r2, [pc, #36]	; (800e964 <vPortExitCritical+0x50>)
 800e940:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e942:	4b08      	ldr	r3, [pc, #32]	; (800e964 <vPortExitCritical+0x50>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d105      	bne.n	800e956 <vPortExitCritical+0x42>
 800e94a:	2300      	movs	r3, #0
 800e94c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	f383 8811 	msr	BASEPRI, r3
}
 800e954:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e956:	bf00      	nop
 800e958:	370c      	adds	r7, #12
 800e95a:	46bd      	mov	sp, r7
 800e95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e960:	4770      	bx	lr
 800e962:	bf00      	nop
 800e964:	200000cc 	.word	0x200000cc
	...

0800e970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e970:	f3ef 8009 	mrs	r0, PSP
 800e974:	f3bf 8f6f 	isb	sy
 800e978:	4b15      	ldr	r3, [pc, #84]	; (800e9d0 <pxCurrentTCBConst>)
 800e97a:	681a      	ldr	r2, [r3, #0]
 800e97c:	f01e 0f10 	tst.w	lr, #16
 800e980:	bf08      	it	eq
 800e982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e98a:	6010      	str	r0, [r2, #0]
 800e98c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e990:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e994:	f380 8811 	msr	BASEPRI, r0
 800e998:	f3bf 8f4f 	dsb	sy
 800e99c:	f3bf 8f6f 	isb	sy
 800e9a0:	f7fe fea6 	bl	800d6f0 <vTaskSwitchContext>
 800e9a4:	f04f 0000 	mov.w	r0, #0
 800e9a8:	f380 8811 	msr	BASEPRI, r0
 800e9ac:	bc09      	pop	{r0, r3}
 800e9ae:	6819      	ldr	r1, [r3, #0]
 800e9b0:	6808      	ldr	r0, [r1, #0]
 800e9b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b6:	f01e 0f10 	tst.w	lr, #16
 800e9ba:	bf08      	it	eq
 800e9bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e9c0:	f380 8809 	msr	PSP, r0
 800e9c4:	f3bf 8f6f 	isb	sy
 800e9c8:	4770      	bx	lr
 800e9ca:	bf00      	nop
 800e9cc:	f3af 8000 	nop.w

0800e9d0 <pxCurrentTCBConst>:
 800e9d0:	20000fe0 	.word	0x20000fe0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e9d4:	bf00      	nop
 800e9d6:	bf00      	nop

0800e9d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
	__asm volatile
 800e9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e2:	f383 8811 	msr	BASEPRI, r3
 800e9e6:	f3bf 8f6f 	isb	sy
 800e9ea:	f3bf 8f4f 	dsb	sy
 800e9ee:	607b      	str	r3, [r7, #4]
}
 800e9f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e9f2:	f7fe fdc3 	bl	800d57c <xTaskIncrementTick>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d003      	beq.n	800ea04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e9fc:	4b06      	ldr	r3, [pc, #24]	; (800ea18 <xPortSysTickHandler+0x40>)
 800e9fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea02:	601a      	str	r2, [r3, #0]
 800ea04:	2300      	movs	r3, #0
 800ea06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	f383 8811 	msr	BASEPRI, r3
}
 800ea0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ea10:	bf00      	nop
 800ea12:	3708      	adds	r7, #8
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}
 800ea18:	e000ed04 	.word	0xe000ed04

0800ea1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ea20:	4b0b      	ldr	r3, [pc, #44]	; (800ea50 <vPortSetupTimerInterrupt+0x34>)
 800ea22:	2200      	movs	r2, #0
 800ea24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ea26:	4b0b      	ldr	r3, [pc, #44]	; (800ea54 <vPortSetupTimerInterrupt+0x38>)
 800ea28:	2200      	movs	r2, #0
 800ea2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ea2c:	4b0a      	ldr	r3, [pc, #40]	; (800ea58 <vPortSetupTimerInterrupt+0x3c>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	4a0a      	ldr	r2, [pc, #40]	; (800ea5c <vPortSetupTimerInterrupt+0x40>)
 800ea32:	fba2 2303 	umull	r2, r3, r2, r3
 800ea36:	099b      	lsrs	r3, r3, #6
 800ea38:	4a09      	ldr	r2, [pc, #36]	; (800ea60 <vPortSetupTimerInterrupt+0x44>)
 800ea3a:	3b01      	subs	r3, #1
 800ea3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ea3e:	4b04      	ldr	r3, [pc, #16]	; (800ea50 <vPortSetupTimerInterrupt+0x34>)
 800ea40:	2207      	movs	r2, #7
 800ea42:	601a      	str	r2, [r3, #0]
}
 800ea44:	bf00      	nop
 800ea46:	46bd      	mov	sp, r7
 800ea48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4c:	4770      	bx	lr
 800ea4e:	bf00      	nop
 800ea50:	e000e010 	.word	0xe000e010
 800ea54:	e000e018 	.word	0xe000e018
 800ea58:	20000034 	.word	0x20000034
 800ea5c:	10624dd3 	.word	0x10624dd3
 800ea60:	e000e014 	.word	0xe000e014

0800ea64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ea64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ea74 <vPortEnableVFP+0x10>
 800ea68:	6801      	ldr	r1, [r0, #0]
 800ea6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ea6e:	6001      	str	r1, [r0, #0]
 800ea70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ea72:	bf00      	nop
 800ea74:	e000ed88 	.word	0xe000ed88

0800ea78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ea78:	b480      	push	{r7}
 800ea7a:	b085      	sub	sp, #20
 800ea7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ea7e:	f3ef 8305 	mrs	r3, IPSR
 800ea82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	2b0f      	cmp	r3, #15
 800ea88:	d914      	bls.n	800eab4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ea8a:	4a17      	ldr	r2, [pc, #92]	; (800eae8 <vPortValidateInterruptPriority+0x70>)
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	4413      	add	r3, r2
 800ea90:	781b      	ldrb	r3, [r3, #0]
 800ea92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ea94:	4b15      	ldr	r3, [pc, #84]	; (800eaec <vPortValidateInterruptPriority+0x74>)
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	7afa      	ldrb	r2, [r7, #11]
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d20a      	bcs.n	800eab4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ea9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa2:	f383 8811 	msr	BASEPRI, r3
 800eaa6:	f3bf 8f6f 	isb	sy
 800eaaa:	f3bf 8f4f 	dsb	sy
 800eaae:	607b      	str	r3, [r7, #4]
}
 800eab0:	bf00      	nop
 800eab2:	e7fe      	b.n	800eab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eab4:	4b0e      	ldr	r3, [pc, #56]	; (800eaf0 <vPortValidateInterruptPriority+0x78>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eabc:	4b0d      	ldr	r3, [pc, #52]	; (800eaf4 <vPortValidateInterruptPriority+0x7c>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d90a      	bls.n	800eada <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800eac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac8:	f383 8811 	msr	BASEPRI, r3
 800eacc:	f3bf 8f6f 	isb	sy
 800ead0:	f3bf 8f4f 	dsb	sy
 800ead4:	603b      	str	r3, [r7, #0]
}
 800ead6:	bf00      	nop
 800ead8:	e7fe      	b.n	800ead8 <vPortValidateInterruptPriority+0x60>
	}
 800eada:	bf00      	nop
 800eadc:	3714      	adds	r7, #20
 800eade:	46bd      	mov	sp, r7
 800eae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae4:	4770      	bx	lr
 800eae6:	bf00      	nop
 800eae8:	e000e3f0 	.word	0xe000e3f0
 800eaec:	2000160c 	.word	0x2000160c
 800eaf0:	e000ed0c 	.word	0xe000ed0c
 800eaf4:	20001610 	.word	0x20001610

0800eaf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b08a      	sub	sp, #40	; 0x28
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eb00:	2300      	movs	r3, #0
 800eb02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eb04:	f7fe fc7e 	bl	800d404 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eb08:	4b5b      	ldr	r3, [pc, #364]	; (800ec78 <pvPortMalloc+0x180>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d101      	bne.n	800eb14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eb10:	f000 f920 	bl	800ed54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eb14:	4b59      	ldr	r3, [pc, #356]	; (800ec7c <pvPortMalloc+0x184>)
 800eb16:	681a      	ldr	r2, [r3, #0]
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	4013      	ands	r3, r2
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	f040 8093 	bne.w	800ec48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d01d      	beq.n	800eb64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800eb28:	2208      	movs	r2, #8
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	4413      	add	r3, r2
 800eb2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f003 0307 	and.w	r3, r3, #7
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d014      	beq.n	800eb64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f023 0307 	bic.w	r3, r3, #7
 800eb40:	3308      	adds	r3, #8
 800eb42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f003 0307 	and.w	r3, r3, #7
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d00a      	beq.n	800eb64 <pvPortMalloc+0x6c>
	__asm volatile
 800eb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb52:	f383 8811 	msr	BASEPRI, r3
 800eb56:	f3bf 8f6f 	isb	sy
 800eb5a:	f3bf 8f4f 	dsb	sy
 800eb5e:	617b      	str	r3, [r7, #20]
}
 800eb60:	bf00      	nop
 800eb62:	e7fe      	b.n	800eb62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d06e      	beq.n	800ec48 <pvPortMalloc+0x150>
 800eb6a:	4b45      	ldr	r3, [pc, #276]	; (800ec80 <pvPortMalloc+0x188>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	687a      	ldr	r2, [r7, #4]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d869      	bhi.n	800ec48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eb74:	4b43      	ldr	r3, [pc, #268]	; (800ec84 <pvPortMalloc+0x18c>)
 800eb76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eb78:	4b42      	ldr	r3, [pc, #264]	; (800ec84 <pvPortMalloc+0x18c>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb7e:	e004      	b.n	800eb8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800eb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	687a      	ldr	r2, [r7, #4]
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d903      	bls.n	800eb9c <pvPortMalloc+0xa4>
 800eb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d1f1      	bne.n	800eb80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800eb9c:	4b36      	ldr	r3, [pc, #216]	; (800ec78 <pvPortMalloc+0x180>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d050      	beq.n	800ec48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eba6:	6a3b      	ldr	r3, [r7, #32]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	2208      	movs	r2, #8
 800ebac:	4413      	add	r3, r2
 800ebae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ebb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb2:	681a      	ldr	r2, [r3, #0]
 800ebb4:	6a3b      	ldr	r3, [r7, #32]
 800ebb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ebb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebba:	685a      	ldr	r2, [r3, #4]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	1ad2      	subs	r2, r2, r3
 800ebc0:	2308      	movs	r3, #8
 800ebc2:	005b      	lsls	r3, r3, #1
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d91f      	bls.n	800ec08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ebc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	4413      	add	r3, r2
 800ebce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ebd0:	69bb      	ldr	r3, [r7, #24]
 800ebd2:	f003 0307 	and.w	r3, r3, #7
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d00a      	beq.n	800ebf0 <pvPortMalloc+0xf8>
	__asm volatile
 800ebda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebde:	f383 8811 	msr	BASEPRI, r3
 800ebe2:	f3bf 8f6f 	isb	sy
 800ebe6:	f3bf 8f4f 	dsb	sy
 800ebea:	613b      	str	r3, [r7, #16]
}
 800ebec:	bf00      	nop
 800ebee:	e7fe      	b.n	800ebee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ebf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf2:	685a      	ldr	r2, [r3, #4]
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	1ad2      	subs	r2, r2, r3
 800ebf8:	69bb      	ldr	r3, [r7, #24]
 800ebfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ebfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebfe:	687a      	ldr	r2, [r7, #4]
 800ec00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ec02:	69b8      	ldr	r0, [r7, #24]
 800ec04:	f000 f908 	bl	800ee18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ec08:	4b1d      	ldr	r3, [pc, #116]	; (800ec80 <pvPortMalloc+0x188>)
 800ec0a:	681a      	ldr	r2, [r3, #0]
 800ec0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0e:	685b      	ldr	r3, [r3, #4]
 800ec10:	1ad3      	subs	r3, r2, r3
 800ec12:	4a1b      	ldr	r2, [pc, #108]	; (800ec80 <pvPortMalloc+0x188>)
 800ec14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ec16:	4b1a      	ldr	r3, [pc, #104]	; (800ec80 <pvPortMalloc+0x188>)
 800ec18:	681a      	ldr	r2, [r3, #0]
 800ec1a:	4b1b      	ldr	r3, [pc, #108]	; (800ec88 <pvPortMalloc+0x190>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d203      	bcs.n	800ec2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ec22:	4b17      	ldr	r3, [pc, #92]	; (800ec80 <pvPortMalloc+0x188>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	4a18      	ldr	r2, [pc, #96]	; (800ec88 <pvPortMalloc+0x190>)
 800ec28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ec2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec2c:	685a      	ldr	r2, [r3, #4]
 800ec2e:	4b13      	ldr	r3, [pc, #76]	; (800ec7c <pvPortMalloc+0x184>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	431a      	orrs	r2, r3
 800ec34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ec38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ec3e:	4b13      	ldr	r3, [pc, #76]	; (800ec8c <pvPortMalloc+0x194>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	3301      	adds	r3, #1
 800ec44:	4a11      	ldr	r2, [pc, #68]	; (800ec8c <pvPortMalloc+0x194>)
 800ec46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ec48:	f7fe fbea 	bl	800d420 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec4c:	69fb      	ldr	r3, [r7, #28]
 800ec4e:	f003 0307 	and.w	r3, r3, #7
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d00a      	beq.n	800ec6c <pvPortMalloc+0x174>
	__asm volatile
 800ec56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec5a:	f383 8811 	msr	BASEPRI, r3
 800ec5e:	f3bf 8f6f 	isb	sy
 800ec62:	f3bf 8f4f 	dsb	sy
 800ec66:	60fb      	str	r3, [r7, #12]
}
 800ec68:	bf00      	nop
 800ec6a:	e7fe      	b.n	800ec6a <pvPortMalloc+0x172>
	return pvReturn;
 800ec6c:	69fb      	ldr	r3, [r7, #28]
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3728      	adds	r7, #40	; 0x28
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
 800ec76:	bf00      	nop
 800ec78:	2000521c 	.word	0x2000521c
 800ec7c:	20005230 	.word	0x20005230
 800ec80:	20005220 	.word	0x20005220
 800ec84:	20005214 	.word	0x20005214
 800ec88:	20005224 	.word	0x20005224
 800ec8c:	20005228 	.word	0x20005228

0800ec90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b086      	sub	sp, #24
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d04d      	beq.n	800ed3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eca2:	2308      	movs	r3, #8
 800eca4:	425b      	negs	r3, r3
 800eca6:	697a      	ldr	r2, [r7, #20]
 800eca8:	4413      	add	r3, r2
 800ecaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	685a      	ldr	r2, [r3, #4]
 800ecb4:	4b24      	ldr	r3, [pc, #144]	; (800ed48 <vPortFree+0xb8>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	4013      	ands	r3, r2
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d10a      	bne.n	800ecd4 <vPortFree+0x44>
	__asm volatile
 800ecbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecc2:	f383 8811 	msr	BASEPRI, r3
 800ecc6:	f3bf 8f6f 	isb	sy
 800ecca:	f3bf 8f4f 	dsb	sy
 800ecce:	60fb      	str	r3, [r7, #12]
}
 800ecd0:	bf00      	nop
 800ecd2:	e7fe      	b.n	800ecd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d00a      	beq.n	800ecf2 <vPortFree+0x62>
	__asm volatile
 800ecdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ece0:	f383 8811 	msr	BASEPRI, r3
 800ece4:	f3bf 8f6f 	isb	sy
 800ece8:	f3bf 8f4f 	dsb	sy
 800ecec:	60bb      	str	r3, [r7, #8]
}
 800ecee:	bf00      	nop
 800ecf0:	e7fe      	b.n	800ecf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	685a      	ldr	r2, [r3, #4]
 800ecf6:	4b14      	ldr	r3, [pc, #80]	; (800ed48 <vPortFree+0xb8>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	4013      	ands	r3, r2
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d01e      	beq.n	800ed3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ed00:	693b      	ldr	r3, [r7, #16]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d11a      	bne.n	800ed3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	685a      	ldr	r2, [r3, #4]
 800ed0c:	4b0e      	ldr	r3, [pc, #56]	; (800ed48 <vPortFree+0xb8>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	43db      	mvns	r3, r3
 800ed12:	401a      	ands	r2, r3
 800ed14:	693b      	ldr	r3, [r7, #16]
 800ed16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ed18:	f7fe fb74 	bl	800d404 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	685a      	ldr	r2, [r3, #4]
 800ed20:	4b0a      	ldr	r3, [pc, #40]	; (800ed4c <vPortFree+0xbc>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	4413      	add	r3, r2
 800ed26:	4a09      	ldr	r2, [pc, #36]	; (800ed4c <vPortFree+0xbc>)
 800ed28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ed2a:	6938      	ldr	r0, [r7, #16]
 800ed2c:	f000 f874 	bl	800ee18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ed30:	4b07      	ldr	r3, [pc, #28]	; (800ed50 <vPortFree+0xc0>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	3301      	adds	r3, #1
 800ed36:	4a06      	ldr	r2, [pc, #24]	; (800ed50 <vPortFree+0xc0>)
 800ed38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ed3a:	f7fe fb71 	bl	800d420 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ed3e:	bf00      	nop
 800ed40:	3718      	adds	r7, #24
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	bf00      	nop
 800ed48:	20005230 	.word	0x20005230
 800ed4c:	20005220 	.word	0x20005220
 800ed50:	2000522c 	.word	0x2000522c

0800ed54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ed54:	b480      	push	{r7}
 800ed56:	b085      	sub	sp, #20
 800ed58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ed5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ed5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ed60:	4b27      	ldr	r3, [pc, #156]	; (800ee00 <prvHeapInit+0xac>)
 800ed62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	f003 0307 	and.w	r3, r3, #7
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d00c      	beq.n	800ed88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	3307      	adds	r3, #7
 800ed72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f023 0307 	bic.w	r3, r3, #7
 800ed7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ed7c:	68ba      	ldr	r2, [r7, #8]
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	1ad3      	subs	r3, r2, r3
 800ed82:	4a1f      	ldr	r2, [pc, #124]	; (800ee00 <prvHeapInit+0xac>)
 800ed84:	4413      	add	r3, r2
 800ed86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ed8c:	4a1d      	ldr	r2, [pc, #116]	; (800ee04 <prvHeapInit+0xb0>)
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ed92:	4b1c      	ldr	r3, [pc, #112]	; (800ee04 <prvHeapInit+0xb0>)
 800ed94:	2200      	movs	r2, #0
 800ed96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	68ba      	ldr	r2, [r7, #8]
 800ed9c:	4413      	add	r3, r2
 800ed9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eda0:	2208      	movs	r2, #8
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	1a9b      	subs	r3, r3, r2
 800eda6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	f023 0307 	bic.w	r3, r3, #7
 800edae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	4a15      	ldr	r2, [pc, #84]	; (800ee08 <prvHeapInit+0xb4>)
 800edb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800edb6:	4b14      	ldr	r3, [pc, #80]	; (800ee08 <prvHeapInit+0xb4>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	2200      	movs	r2, #0
 800edbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800edbe:	4b12      	ldr	r3, [pc, #72]	; (800ee08 <prvHeapInit+0xb4>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	2200      	movs	r2, #0
 800edc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	68fa      	ldr	r2, [r7, #12]
 800edce:	1ad2      	subs	r2, r2, r3
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800edd4:	4b0c      	ldr	r3, [pc, #48]	; (800ee08 <prvHeapInit+0xb4>)
 800edd6:	681a      	ldr	r2, [r3, #0]
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	685b      	ldr	r3, [r3, #4]
 800ede0:	4a0a      	ldr	r2, [pc, #40]	; (800ee0c <prvHeapInit+0xb8>)
 800ede2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	4a09      	ldr	r2, [pc, #36]	; (800ee10 <prvHeapInit+0xbc>)
 800edea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800edec:	4b09      	ldr	r3, [pc, #36]	; (800ee14 <prvHeapInit+0xc0>)
 800edee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800edf2:	601a      	str	r2, [r3, #0]
}
 800edf4:	bf00      	nop
 800edf6:	3714      	adds	r7, #20
 800edf8:	46bd      	mov	sp, r7
 800edfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfe:	4770      	bx	lr
 800ee00:	20001614 	.word	0x20001614
 800ee04:	20005214 	.word	0x20005214
 800ee08:	2000521c 	.word	0x2000521c
 800ee0c:	20005224 	.word	0x20005224
 800ee10:	20005220 	.word	0x20005220
 800ee14:	20005230 	.word	0x20005230

0800ee18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ee18:	b480      	push	{r7}
 800ee1a:	b085      	sub	sp, #20
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ee20:	4b28      	ldr	r3, [pc, #160]	; (800eec4 <prvInsertBlockIntoFreeList+0xac>)
 800ee22:	60fb      	str	r3, [r7, #12]
 800ee24:	e002      	b.n	800ee2c <prvInsertBlockIntoFreeList+0x14>
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	60fb      	str	r3, [r7, #12]
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	687a      	ldr	r2, [r7, #4]
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d8f7      	bhi.n	800ee26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	685b      	ldr	r3, [r3, #4]
 800ee3e:	68ba      	ldr	r2, [r7, #8]
 800ee40:	4413      	add	r3, r2
 800ee42:	687a      	ldr	r2, [r7, #4]
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d108      	bne.n	800ee5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	685a      	ldr	r2, [r3, #4]
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	685b      	ldr	r3, [r3, #4]
 800ee50:	441a      	add	r2, r3
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	685b      	ldr	r3, [r3, #4]
 800ee62:	68ba      	ldr	r2, [r7, #8]
 800ee64:	441a      	add	r2, r3
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	d118      	bne.n	800eea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	681a      	ldr	r2, [r3, #0]
 800ee72:	4b15      	ldr	r3, [pc, #84]	; (800eec8 <prvInsertBlockIntoFreeList+0xb0>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	429a      	cmp	r2, r3
 800ee78:	d00d      	beq.n	800ee96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	685a      	ldr	r2, [r3, #4]
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	685b      	ldr	r3, [r3, #4]
 800ee84:	441a      	add	r2, r3
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	601a      	str	r2, [r3, #0]
 800ee94:	e008      	b.n	800eea8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ee96:	4b0c      	ldr	r3, [pc, #48]	; (800eec8 <prvInsertBlockIntoFreeList+0xb0>)
 800ee98:	681a      	ldr	r2, [r3, #0]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	601a      	str	r2, [r3, #0]
 800ee9e:	e003      	b.n	800eea8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	681a      	ldr	r2, [r3, #0]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eea8:	68fa      	ldr	r2, [r7, #12]
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d002      	beq.n	800eeb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	687a      	ldr	r2, [r7, #4]
 800eeb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eeb6:	bf00      	nop
 800eeb8:	3714      	adds	r7, #20
 800eeba:	46bd      	mov	sp, r7
 800eebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec0:	4770      	bx	lr
 800eec2:	bf00      	nop
 800eec4:	20005214 	.word	0x20005214
 800eec8:	2000521c 	.word	0x2000521c

0800eecc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800eed0:	2200      	movs	r2, #0
 800eed2:	4912      	ldr	r1, [pc, #72]	; (800ef1c <MX_USB_DEVICE_Init+0x50>)
 800eed4:	4812      	ldr	r0, [pc, #72]	; (800ef20 <MX_USB_DEVICE_Init+0x54>)
 800eed6:	f7fb fb15 	bl	800a504 <USBD_Init>
 800eeda:	4603      	mov	r3, r0
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d001      	beq.n	800eee4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800eee0:	f7f3 fb4e 	bl	8002580 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800eee4:	490f      	ldr	r1, [pc, #60]	; (800ef24 <MX_USB_DEVICE_Init+0x58>)
 800eee6:	480e      	ldr	r0, [pc, #56]	; (800ef20 <MX_USB_DEVICE_Init+0x54>)
 800eee8:	f7fb fb3c 	bl	800a564 <USBD_RegisterClass>
 800eeec:	4603      	mov	r3, r0
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d001      	beq.n	800eef6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800eef2:	f7f3 fb45 	bl	8002580 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800eef6:	490c      	ldr	r1, [pc, #48]	; (800ef28 <MX_USB_DEVICE_Init+0x5c>)
 800eef8:	4809      	ldr	r0, [pc, #36]	; (800ef20 <MX_USB_DEVICE_Init+0x54>)
 800eefa:	f7fb fa2d 	bl	800a358 <USBD_CDC_RegisterInterface>
 800eefe:	4603      	mov	r3, r0
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d001      	beq.n	800ef08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ef04:	f7f3 fb3c 	bl	8002580 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ef08:	4805      	ldr	r0, [pc, #20]	; (800ef20 <MX_USB_DEVICE_Init+0x54>)
 800ef0a:	f7fb fb61 	bl	800a5d0 <USBD_Start>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d001      	beq.n	800ef18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ef14:	f7f3 fb34 	bl	8002580 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ef18:	bf00      	nop
 800ef1a:	bd80      	pop	{r7, pc}
 800ef1c:	200000e4 	.word	0x200000e4
 800ef20:	20005234 	.word	0x20005234
 800ef24:	2000004c 	.word	0x2000004c
 800ef28:	200000d0 	.word	0x200000d0

0800ef2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ef30:	2200      	movs	r2, #0
 800ef32:	4905      	ldr	r1, [pc, #20]	; (800ef48 <CDC_Init_FS+0x1c>)
 800ef34:	4805      	ldr	r0, [pc, #20]	; (800ef4c <CDC_Init_FS+0x20>)
 800ef36:	f7fb fa29 	bl	800a38c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ef3a:	4905      	ldr	r1, [pc, #20]	; (800ef50 <CDC_Init_FS+0x24>)
 800ef3c:	4803      	ldr	r0, [pc, #12]	; (800ef4c <CDC_Init_FS+0x20>)
 800ef3e:	f7fb fa47 	bl	800a3d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ef42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	bd80      	pop	{r7, pc}
 800ef48:	20005910 	.word	0x20005910
 800ef4c:	20005234 	.word	0x20005234
 800ef50:	20005510 	.word	0x20005510

0800ef54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ef54:	b480      	push	{r7}
 800ef56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ef58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef62:	4770      	bx	lr

0800ef64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b083      	sub	sp, #12
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	6039      	str	r1, [r7, #0]
 800ef6e:	71fb      	strb	r3, [r7, #7]
 800ef70:	4613      	mov	r3, r2
 800ef72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ef74:	79fb      	ldrb	r3, [r7, #7]
 800ef76:	2b23      	cmp	r3, #35	; 0x23
 800ef78:	d84a      	bhi.n	800f010 <CDC_Control_FS+0xac>
 800ef7a:	a201      	add	r2, pc, #4	; (adr r2, 800ef80 <CDC_Control_FS+0x1c>)
 800ef7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef80:	0800f011 	.word	0x0800f011
 800ef84:	0800f011 	.word	0x0800f011
 800ef88:	0800f011 	.word	0x0800f011
 800ef8c:	0800f011 	.word	0x0800f011
 800ef90:	0800f011 	.word	0x0800f011
 800ef94:	0800f011 	.word	0x0800f011
 800ef98:	0800f011 	.word	0x0800f011
 800ef9c:	0800f011 	.word	0x0800f011
 800efa0:	0800f011 	.word	0x0800f011
 800efa4:	0800f011 	.word	0x0800f011
 800efa8:	0800f011 	.word	0x0800f011
 800efac:	0800f011 	.word	0x0800f011
 800efb0:	0800f011 	.word	0x0800f011
 800efb4:	0800f011 	.word	0x0800f011
 800efb8:	0800f011 	.word	0x0800f011
 800efbc:	0800f011 	.word	0x0800f011
 800efc0:	0800f011 	.word	0x0800f011
 800efc4:	0800f011 	.word	0x0800f011
 800efc8:	0800f011 	.word	0x0800f011
 800efcc:	0800f011 	.word	0x0800f011
 800efd0:	0800f011 	.word	0x0800f011
 800efd4:	0800f011 	.word	0x0800f011
 800efd8:	0800f011 	.word	0x0800f011
 800efdc:	0800f011 	.word	0x0800f011
 800efe0:	0800f011 	.word	0x0800f011
 800efe4:	0800f011 	.word	0x0800f011
 800efe8:	0800f011 	.word	0x0800f011
 800efec:	0800f011 	.word	0x0800f011
 800eff0:	0800f011 	.word	0x0800f011
 800eff4:	0800f011 	.word	0x0800f011
 800eff8:	0800f011 	.word	0x0800f011
 800effc:	0800f011 	.word	0x0800f011
 800f000:	0800f011 	.word	0x0800f011
 800f004:	0800f011 	.word	0x0800f011
 800f008:	0800f011 	.word	0x0800f011
 800f00c:	0800f011 	.word	0x0800f011
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f010:	bf00      	nop
  }

  return (USBD_OK);
 800f012:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f014:	4618      	mov	r0, r3
 800f016:	370c      	adds	r7, #12
 800f018:	46bd      	mov	sp, r7
 800f01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01e:	4770      	bx	lr

0800f020 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b082      	sub	sp, #8
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
 800f028:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 command_CMD[0] = Buf[0];
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	781a      	ldrb	r2, [r3, #0]
 800f02e:	4b05      	ldr	r3, [pc, #20]	; (800f044 <CDC_Receive_FS+0x24>)
 800f030:	701a      	strb	r2, [r3, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f032:	4805      	ldr	r0, [pc, #20]	; (800f048 <CDC_Receive_FS+0x28>)
 800f034:	f7fb fa30 	bl	800a498 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f038:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3708      	adds	r7, #8
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}
 800f042:	bf00      	nop
 800f044:	200007b4 	.word	0x200007b4
 800f048:	20005234 	.word	0x20005234

0800f04c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b084      	sub	sp, #16
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
 800f054:	460b      	mov	r3, r1
 800f056:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f058:	2300      	movs	r3, #0
 800f05a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f05c:	4b0d      	ldr	r3, [pc, #52]	; (800f094 <CDC_Transmit_FS+0x48>)
 800f05e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f062:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d001      	beq.n	800f072 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f06e:	2301      	movs	r3, #1
 800f070:	e00b      	b.n	800f08a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f072:	887b      	ldrh	r3, [r7, #2]
 800f074:	461a      	mov	r2, r3
 800f076:	6879      	ldr	r1, [r7, #4]
 800f078:	4806      	ldr	r0, [pc, #24]	; (800f094 <CDC_Transmit_FS+0x48>)
 800f07a:	f7fb f987 	bl	800a38c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f07e:	4805      	ldr	r0, [pc, #20]	; (800f094 <CDC_Transmit_FS+0x48>)
 800f080:	f7fb f9c4 	bl	800a40c <USBD_CDC_TransmitPacket>
 800f084:	4603      	mov	r3, r0
 800f086:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f088:	7bfb      	ldrb	r3, [r7, #15]
}
 800f08a:	4618      	mov	r0, r3
 800f08c:	3710      	adds	r7, #16
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}
 800f092:	bf00      	nop
 800f094:	20005234 	.word	0x20005234

0800f098 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f098:	b480      	push	{r7}
 800f09a:	b087      	sub	sp, #28
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	60f8      	str	r0, [r7, #12]
 800f0a0:	60b9      	str	r1, [r7, #8]
 800f0a2:	4613      	mov	r3, r2
 800f0a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f0aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	371c      	adds	r7, #28
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b8:	4770      	bx	lr
	...

0800f0bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0bc:	b480      	push	{r7}
 800f0be:	b083      	sub	sp, #12
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	6039      	str	r1, [r7, #0]
 800f0c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	2212      	movs	r2, #18
 800f0cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f0ce:	4b03      	ldr	r3, [pc, #12]	; (800f0dc <USBD_FS_DeviceDescriptor+0x20>)
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	370c      	adds	r7, #12
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr
 800f0dc:	20000100 	.word	0x20000100

0800f0e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0e0:	b480      	push	{r7}
 800f0e2:	b083      	sub	sp, #12
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	6039      	str	r1, [r7, #0]
 800f0ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	2204      	movs	r2, #4
 800f0f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f0f2:	4b03      	ldr	r3, [pc, #12]	; (800f100 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	370c      	adds	r7, #12
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr
 800f100:	20000114 	.word	0x20000114

0800f104 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b082      	sub	sp, #8
 800f108:	af00      	add	r7, sp, #0
 800f10a:	4603      	mov	r3, r0
 800f10c:	6039      	str	r1, [r7, #0]
 800f10e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f110:	79fb      	ldrb	r3, [r7, #7]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d105      	bne.n	800f122 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f116:	683a      	ldr	r2, [r7, #0]
 800f118:	4907      	ldr	r1, [pc, #28]	; (800f138 <USBD_FS_ProductStrDescriptor+0x34>)
 800f11a:	4808      	ldr	r0, [pc, #32]	; (800f13c <USBD_FS_ProductStrDescriptor+0x38>)
 800f11c:	f7fc fc04 	bl	800b928 <USBD_GetString>
 800f120:	e004      	b.n	800f12c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f122:	683a      	ldr	r2, [r7, #0]
 800f124:	4904      	ldr	r1, [pc, #16]	; (800f138 <USBD_FS_ProductStrDescriptor+0x34>)
 800f126:	4805      	ldr	r0, [pc, #20]	; (800f13c <USBD_FS_ProductStrDescriptor+0x38>)
 800f128:	f7fc fbfe 	bl	800b928 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f12c:	4b02      	ldr	r3, [pc, #8]	; (800f138 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3708      	adds	r7, #8
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
 800f136:	bf00      	nop
 800f138:	20005d10 	.word	0x20005d10
 800f13c:	0800ff38 	.word	0x0800ff38

0800f140 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b082      	sub	sp, #8
 800f144:	af00      	add	r7, sp, #0
 800f146:	4603      	mov	r3, r0
 800f148:	6039      	str	r1, [r7, #0]
 800f14a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f14c:	683a      	ldr	r2, [r7, #0]
 800f14e:	4904      	ldr	r1, [pc, #16]	; (800f160 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f150:	4804      	ldr	r0, [pc, #16]	; (800f164 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f152:	f7fc fbe9 	bl	800b928 <USBD_GetString>
  return USBD_StrDesc;
 800f156:	4b02      	ldr	r3, [pc, #8]	; (800f160 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f158:	4618      	mov	r0, r3
 800f15a:	3708      	adds	r7, #8
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}
 800f160:	20005d10 	.word	0x20005d10
 800f164:	0800ff50 	.word	0x0800ff50

0800f168 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b082      	sub	sp, #8
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	4603      	mov	r3, r0
 800f170:	6039      	str	r1, [r7, #0]
 800f172:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	221a      	movs	r2, #26
 800f178:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f17a:	f000 f843 	bl	800f204 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f17e:	4b02      	ldr	r3, [pc, #8]	; (800f188 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f180:	4618      	mov	r0, r3
 800f182:	3708      	adds	r7, #8
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}
 800f188:	20000118 	.word	0x20000118

0800f18c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b082      	sub	sp, #8
 800f190:	af00      	add	r7, sp, #0
 800f192:	4603      	mov	r3, r0
 800f194:	6039      	str	r1, [r7, #0]
 800f196:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f198:	79fb      	ldrb	r3, [r7, #7]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d105      	bne.n	800f1aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f19e:	683a      	ldr	r2, [r7, #0]
 800f1a0:	4907      	ldr	r1, [pc, #28]	; (800f1c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f1a2:	4808      	ldr	r0, [pc, #32]	; (800f1c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f1a4:	f7fc fbc0 	bl	800b928 <USBD_GetString>
 800f1a8:	e004      	b.n	800f1b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f1aa:	683a      	ldr	r2, [r7, #0]
 800f1ac:	4904      	ldr	r1, [pc, #16]	; (800f1c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f1ae:	4805      	ldr	r0, [pc, #20]	; (800f1c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f1b0:	f7fc fbba 	bl	800b928 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f1b4:	4b02      	ldr	r3, [pc, #8]	; (800f1c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3708      	adds	r7, #8
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
 800f1be:	bf00      	nop
 800f1c0:	20005d10 	.word	0x20005d10
 800f1c4:	0800ff64 	.word	0x0800ff64

0800f1c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b082      	sub	sp, #8
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	6039      	str	r1, [r7, #0]
 800f1d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f1d4:	79fb      	ldrb	r3, [r7, #7]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d105      	bne.n	800f1e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f1da:	683a      	ldr	r2, [r7, #0]
 800f1dc:	4907      	ldr	r1, [pc, #28]	; (800f1fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f1de:	4808      	ldr	r0, [pc, #32]	; (800f200 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f1e0:	f7fc fba2 	bl	800b928 <USBD_GetString>
 800f1e4:	e004      	b.n	800f1f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f1e6:	683a      	ldr	r2, [r7, #0]
 800f1e8:	4904      	ldr	r1, [pc, #16]	; (800f1fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f1ea:	4805      	ldr	r0, [pc, #20]	; (800f200 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f1ec:	f7fc fb9c 	bl	800b928 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f1f0:	4b02      	ldr	r3, [pc, #8]	; (800f1fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3708      	adds	r7, #8
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}
 800f1fa:	bf00      	nop
 800f1fc:	20005d10 	.word	0x20005d10
 800f200:	0800ff70 	.word	0x0800ff70

0800f204 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b084      	sub	sp, #16
 800f208:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f20a:	4b0f      	ldr	r3, [pc, #60]	; (800f248 <Get_SerialNum+0x44>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f210:	4b0e      	ldr	r3, [pc, #56]	; (800f24c <Get_SerialNum+0x48>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f216:	4b0e      	ldr	r3, [pc, #56]	; (800f250 <Get_SerialNum+0x4c>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f21c:	68fa      	ldr	r2, [r7, #12]
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	4413      	add	r3, r2
 800f222:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d009      	beq.n	800f23e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f22a:	2208      	movs	r2, #8
 800f22c:	4909      	ldr	r1, [pc, #36]	; (800f254 <Get_SerialNum+0x50>)
 800f22e:	68f8      	ldr	r0, [r7, #12]
 800f230:	f000 f814 	bl	800f25c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f234:	2204      	movs	r2, #4
 800f236:	4908      	ldr	r1, [pc, #32]	; (800f258 <Get_SerialNum+0x54>)
 800f238:	68b8      	ldr	r0, [r7, #8]
 800f23a:	f000 f80f 	bl	800f25c <IntToUnicode>
  }
}
 800f23e:	bf00      	nop
 800f240:	3710      	adds	r7, #16
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
 800f246:	bf00      	nop
 800f248:	1fff7a10 	.word	0x1fff7a10
 800f24c:	1fff7a14 	.word	0x1fff7a14
 800f250:	1fff7a18 	.word	0x1fff7a18
 800f254:	2000011a 	.word	0x2000011a
 800f258:	2000012a 	.word	0x2000012a

0800f25c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f25c:	b480      	push	{r7}
 800f25e:	b087      	sub	sp, #28
 800f260:	af00      	add	r7, sp, #0
 800f262:	60f8      	str	r0, [r7, #12]
 800f264:	60b9      	str	r1, [r7, #8]
 800f266:	4613      	mov	r3, r2
 800f268:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f26a:	2300      	movs	r3, #0
 800f26c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f26e:	2300      	movs	r3, #0
 800f270:	75fb      	strb	r3, [r7, #23]
 800f272:	e027      	b.n	800f2c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	0f1b      	lsrs	r3, r3, #28
 800f278:	2b09      	cmp	r3, #9
 800f27a:	d80b      	bhi.n	800f294 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	0f1b      	lsrs	r3, r3, #28
 800f280:	b2da      	uxtb	r2, r3
 800f282:	7dfb      	ldrb	r3, [r7, #23]
 800f284:	005b      	lsls	r3, r3, #1
 800f286:	4619      	mov	r1, r3
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	440b      	add	r3, r1
 800f28c:	3230      	adds	r2, #48	; 0x30
 800f28e:	b2d2      	uxtb	r2, r2
 800f290:	701a      	strb	r2, [r3, #0]
 800f292:	e00a      	b.n	800f2aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	0f1b      	lsrs	r3, r3, #28
 800f298:	b2da      	uxtb	r2, r3
 800f29a:	7dfb      	ldrb	r3, [r7, #23]
 800f29c:	005b      	lsls	r3, r3, #1
 800f29e:	4619      	mov	r1, r3
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	440b      	add	r3, r1
 800f2a4:	3237      	adds	r2, #55	; 0x37
 800f2a6:	b2d2      	uxtb	r2, r2
 800f2a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	011b      	lsls	r3, r3, #4
 800f2ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f2b0:	7dfb      	ldrb	r3, [r7, #23]
 800f2b2:	005b      	lsls	r3, r3, #1
 800f2b4:	3301      	adds	r3, #1
 800f2b6:	68ba      	ldr	r2, [r7, #8]
 800f2b8:	4413      	add	r3, r2
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f2be:	7dfb      	ldrb	r3, [r7, #23]
 800f2c0:	3301      	adds	r3, #1
 800f2c2:	75fb      	strb	r3, [r7, #23]
 800f2c4:	7dfa      	ldrb	r2, [r7, #23]
 800f2c6:	79fb      	ldrb	r3, [r7, #7]
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	d3d3      	bcc.n	800f274 <IntToUnicode+0x18>
  }
}
 800f2cc:	bf00      	nop
 800f2ce:	bf00      	nop
 800f2d0:	371c      	adds	r7, #28
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d8:	4770      	bx	lr
	...

0800f2dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b08a      	sub	sp, #40	; 0x28
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f2e4:	f107 0314 	add.w	r3, r7, #20
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	601a      	str	r2, [r3, #0]
 800f2ec:	605a      	str	r2, [r3, #4]
 800f2ee:	609a      	str	r2, [r3, #8]
 800f2f0:	60da      	str	r2, [r3, #12]
 800f2f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f2fc:	d13a      	bne.n	800f374 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f2fe:	2300      	movs	r3, #0
 800f300:	613b      	str	r3, [r7, #16]
 800f302:	4b1e      	ldr	r3, [pc, #120]	; (800f37c <HAL_PCD_MspInit+0xa0>)
 800f304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f306:	4a1d      	ldr	r2, [pc, #116]	; (800f37c <HAL_PCD_MspInit+0xa0>)
 800f308:	f043 0301 	orr.w	r3, r3, #1
 800f30c:	6313      	str	r3, [r2, #48]	; 0x30
 800f30e:	4b1b      	ldr	r3, [pc, #108]	; (800f37c <HAL_PCD_MspInit+0xa0>)
 800f310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f312:	f003 0301 	and.w	r3, r3, #1
 800f316:	613b      	str	r3, [r7, #16]
 800f318:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f31a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f31e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f320:	2302      	movs	r3, #2
 800f322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f324:	2300      	movs	r3, #0
 800f326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f328:	2303      	movs	r3, #3
 800f32a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f32c:	230a      	movs	r3, #10
 800f32e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f330:	f107 0314 	add.w	r3, r7, #20
 800f334:	4619      	mov	r1, r3
 800f336:	4812      	ldr	r0, [pc, #72]	; (800f380 <HAL_PCD_MspInit+0xa4>)
 800f338:	f7f4 fa14 	bl	8003764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f33c:	4b0f      	ldr	r3, [pc, #60]	; (800f37c <HAL_PCD_MspInit+0xa0>)
 800f33e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f340:	4a0e      	ldr	r2, [pc, #56]	; (800f37c <HAL_PCD_MspInit+0xa0>)
 800f342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f346:	6353      	str	r3, [r2, #52]	; 0x34
 800f348:	2300      	movs	r3, #0
 800f34a:	60fb      	str	r3, [r7, #12]
 800f34c:	4b0b      	ldr	r3, [pc, #44]	; (800f37c <HAL_PCD_MspInit+0xa0>)
 800f34e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f350:	4a0a      	ldr	r2, [pc, #40]	; (800f37c <HAL_PCD_MspInit+0xa0>)
 800f352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f356:	6453      	str	r3, [r2, #68]	; 0x44
 800f358:	4b08      	ldr	r3, [pc, #32]	; (800f37c <HAL_PCD_MspInit+0xa0>)
 800f35a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f35c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f360:	60fb      	str	r3, [r7, #12]
 800f362:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f364:	2200      	movs	r2, #0
 800f366:	2105      	movs	r1, #5
 800f368:	2043      	movs	r0, #67	; 0x43
 800f36a:	f7f3 fee7 	bl	800313c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f36e:	2043      	movs	r0, #67	; 0x43
 800f370:	f7f3 ff00 	bl	8003174 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f374:	bf00      	nop
 800f376:	3728      	adds	r7, #40	; 0x28
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}
 800f37c:	40023800 	.word	0x40023800
 800f380:	40020000 	.word	0x40020000

0800f384 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b082      	sub	sp, #8
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f398:	4619      	mov	r1, r3
 800f39a:	4610      	mov	r0, r2
 800f39c:	f7fb f965 	bl	800a66a <USBD_LL_SetupStage>
}
 800f3a0:	bf00      	nop
 800f3a2:	3708      	adds	r7, #8
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}

0800f3a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b082      	sub	sp, #8
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	460b      	mov	r3, r1
 800f3b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f3ba:	78fa      	ldrb	r2, [r7, #3]
 800f3bc:	6879      	ldr	r1, [r7, #4]
 800f3be:	4613      	mov	r3, r2
 800f3c0:	00db      	lsls	r3, r3, #3
 800f3c2:	4413      	add	r3, r2
 800f3c4:	009b      	lsls	r3, r3, #2
 800f3c6:	440b      	add	r3, r1
 800f3c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f3cc:	681a      	ldr	r2, [r3, #0]
 800f3ce:	78fb      	ldrb	r3, [r7, #3]
 800f3d0:	4619      	mov	r1, r3
 800f3d2:	f7fb f99f 	bl	800a714 <USBD_LL_DataOutStage>
}
 800f3d6:	bf00      	nop
 800f3d8:	3708      	adds	r7, #8
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}

0800f3de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3de:	b580      	push	{r7, lr}
 800f3e0:	b082      	sub	sp, #8
 800f3e2:	af00      	add	r7, sp, #0
 800f3e4:	6078      	str	r0, [r7, #4]
 800f3e6:	460b      	mov	r3, r1
 800f3e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f3f0:	78fa      	ldrb	r2, [r7, #3]
 800f3f2:	6879      	ldr	r1, [r7, #4]
 800f3f4:	4613      	mov	r3, r2
 800f3f6:	00db      	lsls	r3, r3, #3
 800f3f8:	4413      	add	r3, r2
 800f3fa:	009b      	lsls	r3, r3, #2
 800f3fc:	440b      	add	r3, r1
 800f3fe:	334c      	adds	r3, #76	; 0x4c
 800f400:	681a      	ldr	r2, [r3, #0]
 800f402:	78fb      	ldrb	r3, [r7, #3]
 800f404:	4619      	mov	r1, r3
 800f406:	f7fb fa38 	bl	800a87a <USBD_LL_DataInStage>
}
 800f40a:	bf00      	nop
 800f40c:	3708      	adds	r7, #8
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}

0800f412 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f412:	b580      	push	{r7, lr}
 800f414:	b082      	sub	sp, #8
 800f416:	af00      	add	r7, sp, #0
 800f418:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f420:	4618      	mov	r0, r3
 800f422:	f7fb fb6c 	bl	800aafe <USBD_LL_SOF>
}
 800f426:	bf00      	nop
 800f428:	3708      	adds	r7, #8
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}

0800f42e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f42e:	b580      	push	{r7, lr}
 800f430:	b084      	sub	sp, #16
 800f432:	af00      	add	r7, sp, #0
 800f434:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f436:	2301      	movs	r3, #1
 800f438:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	68db      	ldr	r3, [r3, #12]
 800f43e:	2b02      	cmp	r3, #2
 800f440:	d001      	beq.n	800f446 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f442:	f7f3 f89d 	bl	8002580 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f44c:	7bfa      	ldrb	r2, [r7, #15]
 800f44e:	4611      	mov	r1, r2
 800f450:	4618      	mov	r0, r3
 800f452:	f7fb fb16 	bl	800aa82 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f45c:	4618      	mov	r0, r3
 800f45e:	f7fb fabe 	bl	800a9de <USBD_LL_Reset>
}
 800f462:	bf00      	nop
 800f464:	3710      	adds	r7, #16
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}
	...

0800f46c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7fb fb11 	bl	800aaa2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	687a      	ldr	r2, [r7, #4]
 800f48c:	6812      	ldr	r2, [r2, #0]
 800f48e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f492:	f043 0301 	orr.w	r3, r3, #1
 800f496:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	6a1b      	ldr	r3, [r3, #32]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d005      	beq.n	800f4ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f4a0:	4b04      	ldr	r3, [pc, #16]	; (800f4b4 <HAL_PCD_SuspendCallback+0x48>)
 800f4a2:	691b      	ldr	r3, [r3, #16]
 800f4a4:	4a03      	ldr	r2, [pc, #12]	; (800f4b4 <HAL_PCD_SuspendCallback+0x48>)
 800f4a6:	f043 0306 	orr.w	r3, r3, #6
 800f4aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f4ac:	bf00      	nop
 800f4ae:	3708      	adds	r7, #8
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}
 800f4b4:	e000ed00 	.word	0xe000ed00

0800f4b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b082      	sub	sp, #8
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f7fb fb01 	bl	800aace <USBD_LL_Resume>
}
 800f4cc:	bf00      	nop
 800f4ce:	3708      	adds	r7, #8
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b082      	sub	sp, #8
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	460b      	mov	r3, r1
 800f4de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f4e6:	78fa      	ldrb	r2, [r7, #3]
 800f4e8:	4611      	mov	r1, r2
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7fb fb59 	bl	800aba2 <USBD_LL_IsoOUTIncomplete>
}
 800f4f0:	bf00      	nop
 800f4f2:	3708      	adds	r7, #8
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}

0800f4f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b082      	sub	sp, #8
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
 800f500:	460b      	mov	r3, r1
 800f502:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f50a:	78fa      	ldrb	r2, [r7, #3]
 800f50c:	4611      	mov	r1, r2
 800f50e:	4618      	mov	r0, r3
 800f510:	f7fb fb15 	bl	800ab3e <USBD_LL_IsoINIncomplete>
}
 800f514:	bf00      	nop
 800f516:	3708      	adds	r7, #8
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}

0800f51c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b082      	sub	sp, #8
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7fb fb6b 	bl	800ac06 <USBD_LL_DevConnected>
}
 800f530:	bf00      	nop
 800f532:	3708      	adds	r7, #8
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}

0800f538 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b082      	sub	sp, #8
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f546:	4618      	mov	r0, r3
 800f548:	f7fb fb68 	bl	800ac1c <USBD_LL_DevDisconnected>
}
 800f54c:	bf00      	nop
 800f54e:	3708      	adds	r7, #8
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}

0800f554 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b082      	sub	sp, #8
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d13c      	bne.n	800f5de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f564:	4a20      	ldr	r2, [pc, #128]	; (800f5e8 <USBD_LL_Init+0x94>)
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	4a1e      	ldr	r2, [pc, #120]	; (800f5e8 <USBD_LL_Init+0x94>)
 800f570:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f574:	4b1c      	ldr	r3, [pc, #112]	; (800f5e8 <USBD_LL_Init+0x94>)
 800f576:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f57a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f57c:	4b1a      	ldr	r3, [pc, #104]	; (800f5e8 <USBD_LL_Init+0x94>)
 800f57e:	2204      	movs	r2, #4
 800f580:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f582:	4b19      	ldr	r3, [pc, #100]	; (800f5e8 <USBD_LL_Init+0x94>)
 800f584:	2202      	movs	r2, #2
 800f586:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f588:	4b17      	ldr	r3, [pc, #92]	; (800f5e8 <USBD_LL_Init+0x94>)
 800f58a:	2200      	movs	r2, #0
 800f58c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f58e:	4b16      	ldr	r3, [pc, #88]	; (800f5e8 <USBD_LL_Init+0x94>)
 800f590:	2202      	movs	r2, #2
 800f592:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f594:	4b14      	ldr	r3, [pc, #80]	; (800f5e8 <USBD_LL_Init+0x94>)
 800f596:	2200      	movs	r2, #0
 800f598:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f59a:	4b13      	ldr	r3, [pc, #76]	; (800f5e8 <USBD_LL_Init+0x94>)
 800f59c:	2200      	movs	r2, #0
 800f59e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f5a0:	4b11      	ldr	r3, [pc, #68]	; (800f5e8 <USBD_LL_Init+0x94>)
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f5a6:	4b10      	ldr	r3, [pc, #64]	; (800f5e8 <USBD_LL_Init+0x94>)
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f5ac:	4b0e      	ldr	r3, [pc, #56]	; (800f5e8 <USBD_LL_Init+0x94>)
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f5b2:	480d      	ldr	r0, [pc, #52]	; (800f5e8 <USBD_LL_Init+0x94>)
 800f5b4:	f7f6 f805 	bl	80055c2 <HAL_PCD_Init>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d001      	beq.n	800f5c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f5be:	f7f2 ffdf 	bl	8002580 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f5c2:	2180      	movs	r1, #128	; 0x80
 800f5c4:	4808      	ldr	r0, [pc, #32]	; (800f5e8 <USBD_LL_Init+0x94>)
 800f5c6:	f7f7 fa5c 	bl	8006a82 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f5ca:	2240      	movs	r2, #64	; 0x40
 800f5cc:	2100      	movs	r1, #0
 800f5ce:	4806      	ldr	r0, [pc, #24]	; (800f5e8 <USBD_LL_Init+0x94>)
 800f5d0:	f7f7 fa10 	bl	80069f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f5d4:	2280      	movs	r2, #128	; 0x80
 800f5d6:	2101      	movs	r1, #1
 800f5d8:	4803      	ldr	r0, [pc, #12]	; (800f5e8 <USBD_LL_Init+0x94>)
 800f5da:	f7f7 fa0b 	bl	80069f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f5de:	2300      	movs	r3, #0
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3708      	adds	r7, #8
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	20005f10 	.word	0x20005f10

0800f5ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b084      	sub	sp, #16
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f602:	4618      	mov	r0, r3
 800f604:	f7f6 f8fa 	bl	80057fc <HAL_PCD_Start>
 800f608:	4603      	mov	r3, r0
 800f60a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f60c:	7bfb      	ldrb	r3, [r7, #15]
 800f60e:	4618      	mov	r0, r3
 800f610:	f000 f942 	bl	800f898 <USBD_Get_USB_Status>
 800f614:	4603      	mov	r3, r0
 800f616:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f618:	7bbb      	ldrb	r3, [r7, #14]
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3710      	adds	r7, #16
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}

0800f622 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f622:	b580      	push	{r7, lr}
 800f624:	b084      	sub	sp, #16
 800f626:	af00      	add	r7, sp, #0
 800f628:	6078      	str	r0, [r7, #4]
 800f62a:	4608      	mov	r0, r1
 800f62c:	4611      	mov	r1, r2
 800f62e:	461a      	mov	r2, r3
 800f630:	4603      	mov	r3, r0
 800f632:	70fb      	strb	r3, [r7, #3]
 800f634:	460b      	mov	r3, r1
 800f636:	70bb      	strb	r3, [r7, #2]
 800f638:	4613      	mov	r3, r2
 800f63a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f63c:	2300      	movs	r3, #0
 800f63e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f640:	2300      	movs	r3, #0
 800f642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f64a:	78bb      	ldrb	r3, [r7, #2]
 800f64c:	883a      	ldrh	r2, [r7, #0]
 800f64e:	78f9      	ldrb	r1, [r7, #3]
 800f650:	f7f6 fdcb 	bl	80061ea <HAL_PCD_EP_Open>
 800f654:	4603      	mov	r3, r0
 800f656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f658:	7bfb      	ldrb	r3, [r7, #15]
 800f65a:	4618      	mov	r0, r3
 800f65c:	f000 f91c 	bl	800f898 <USBD_Get_USB_Status>
 800f660:	4603      	mov	r3, r0
 800f662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f664:	7bbb      	ldrb	r3, [r7, #14]
}
 800f666:	4618      	mov	r0, r3
 800f668:	3710      	adds	r7, #16
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}

0800f66e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f66e:	b580      	push	{r7, lr}
 800f670:	b084      	sub	sp, #16
 800f672:	af00      	add	r7, sp, #0
 800f674:	6078      	str	r0, [r7, #4]
 800f676:	460b      	mov	r3, r1
 800f678:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f67a:	2300      	movs	r3, #0
 800f67c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f67e:	2300      	movs	r3, #0
 800f680:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f688:	78fa      	ldrb	r2, [r7, #3]
 800f68a:	4611      	mov	r1, r2
 800f68c:	4618      	mov	r0, r3
 800f68e:	f7f6 fe14 	bl	80062ba <HAL_PCD_EP_Close>
 800f692:	4603      	mov	r3, r0
 800f694:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f696:	7bfb      	ldrb	r3, [r7, #15]
 800f698:	4618      	mov	r0, r3
 800f69a:	f000 f8fd 	bl	800f898 <USBD_Get_USB_Status>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3710      	adds	r7, #16
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b084      	sub	sp, #16
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	460b      	mov	r3, r1
 800f6b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6bc:	2300      	movs	r3, #0
 800f6be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f6c6:	78fa      	ldrb	r2, [r7, #3]
 800f6c8:	4611      	mov	r1, r2
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7f6 feec 	bl	80064a8 <HAL_PCD_EP_SetStall>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6d4:	7bfb      	ldrb	r3, [r7, #15]
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f000 f8de 	bl	800f898 <USBD_Get_USB_Status>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3710      	adds	r7, #16
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}

0800f6ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6ea:	b580      	push	{r7, lr}
 800f6ec:	b084      	sub	sp, #16
 800f6ee:	af00      	add	r7, sp, #0
 800f6f0:	6078      	str	r0, [r7, #4]
 800f6f2:	460b      	mov	r3, r1
 800f6f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f704:	78fa      	ldrb	r2, [r7, #3]
 800f706:	4611      	mov	r1, r2
 800f708:	4618      	mov	r0, r3
 800f70a:	f7f6 ff31 	bl	8006570 <HAL_PCD_EP_ClrStall>
 800f70e:	4603      	mov	r3, r0
 800f710:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f712:	7bfb      	ldrb	r3, [r7, #15]
 800f714:	4618      	mov	r0, r3
 800f716:	f000 f8bf 	bl	800f898 <USBD_Get_USB_Status>
 800f71a:	4603      	mov	r3, r0
 800f71c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f71e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f720:	4618      	mov	r0, r3
 800f722:	3710      	adds	r7, #16
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}

0800f728 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f728:	b480      	push	{r7}
 800f72a:	b085      	sub	sp, #20
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
 800f730:	460b      	mov	r3, r1
 800f732:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f73a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f73c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f740:	2b00      	cmp	r3, #0
 800f742:	da0b      	bge.n	800f75c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f744:	78fb      	ldrb	r3, [r7, #3]
 800f746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f74a:	68f9      	ldr	r1, [r7, #12]
 800f74c:	4613      	mov	r3, r2
 800f74e:	00db      	lsls	r3, r3, #3
 800f750:	4413      	add	r3, r2
 800f752:	009b      	lsls	r3, r3, #2
 800f754:	440b      	add	r3, r1
 800f756:	333e      	adds	r3, #62	; 0x3e
 800f758:	781b      	ldrb	r3, [r3, #0]
 800f75a:	e00b      	b.n	800f774 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f75c:	78fb      	ldrb	r3, [r7, #3]
 800f75e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f762:	68f9      	ldr	r1, [r7, #12]
 800f764:	4613      	mov	r3, r2
 800f766:	00db      	lsls	r3, r3, #3
 800f768:	4413      	add	r3, r2
 800f76a:	009b      	lsls	r3, r3, #2
 800f76c:	440b      	add	r3, r1
 800f76e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f772:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f774:	4618      	mov	r0, r3
 800f776:	3714      	adds	r7, #20
 800f778:	46bd      	mov	sp, r7
 800f77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77e:	4770      	bx	lr

0800f780 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b084      	sub	sp, #16
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	460b      	mov	r3, r1
 800f78a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f78c:	2300      	movs	r3, #0
 800f78e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f790:	2300      	movs	r3, #0
 800f792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f79a:	78fa      	ldrb	r2, [r7, #3]
 800f79c:	4611      	mov	r1, r2
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7f6 fcfe 	bl	80061a0 <HAL_PCD_SetAddress>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7a8:	7bfb      	ldrb	r3, [r7, #15]
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f000 f874 	bl	800f898 <USBD_Get_USB_Status>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	3710      	adds	r7, #16
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd80      	pop	{r7, pc}

0800f7be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f7be:	b580      	push	{r7, lr}
 800f7c0:	b086      	sub	sp, #24
 800f7c2:	af00      	add	r7, sp, #0
 800f7c4:	60f8      	str	r0, [r7, #12]
 800f7c6:	607a      	str	r2, [r7, #4]
 800f7c8:	603b      	str	r3, [r7, #0]
 800f7ca:	460b      	mov	r3, r1
 800f7cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f7dc:	7af9      	ldrb	r1, [r7, #11]
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	687a      	ldr	r2, [r7, #4]
 800f7e2:	f7f6 fe17 	bl	8006414 <HAL_PCD_EP_Transmit>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7ea:	7dfb      	ldrb	r3, [r7, #23]
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f000 f853 	bl	800f898 <USBD_Get_USB_Status>
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f7f6:	7dbb      	ldrb	r3, [r7, #22]
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3718      	adds	r7, #24
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}

0800f800 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b086      	sub	sp, #24
 800f804:	af00      	add	r7, sp, #0
 800f806:	60f8      	str	r0, [r7, #12]
 800f808:	607a      	str	r2, [r7, #4]
 800f80a:	603b      	str	r3, [r7, #0]
 800f80c:	460b      	mov	r3, r1
 800f80e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f810:	2300      	movs	r3, #0
 800f812:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f814:	2300      	movs	r3, #0
 800f816:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f81e:	7af9      	ldrb	r1, [r7, #11]
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	687a      	ldr	r2, [r7, #4]
 800f824:	f7f6 fd93 	bl	800634e <HAL_PCD_EP_Receive>
 800f828:	4603      	mov	r3, r0
 800f82a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f82c:	7dfb      	ldrb	r3, [r7, #23]
 800f82e:	4618      	mov	r0, r3
 800f830:	f000 f832 	bl	800f898 <USBD_Get_USB_Status>
 800f834:	4603      	mov	r3, r0
 800f836:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f838:	7dbb      	ldrb	r3, [r7, #22]
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	3718      	adds	r7, #24
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}

0800f842 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f842:	b580      	push	{r7, lr}
 800f844:	b082      	sub	sp, #8
 800f846:	af00      	add	r7, sp, #0
 800f848:	6078      	str	r0, [r7, #4]
 800f84a:	460b      	mov	r3, r1
 800f84c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f854:	78fa      	ldrb	r2, [r7, #3]
 800f856:	4611      	mov	r1, r2
 800f858:	4618      	mov	r0, r3
 800f85a:	f7f6 fdc3 	bl	80063e4 <HAL_PCD_EP_GetRxCount>
 800f85e:	4603      	mov	r3, r0
}
 800f860:	4618      	mov	r0, r3
 800f862:	3708      	adds	r7, #8
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}

0800f868 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f868:	b480      	push	{r7}
 800f86a:	b083      	sub	sp, #12
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f870:	4b03      	ldr	r3, [pc, #12]	; (800f880 <USBD_static_malloc+0x18>)
}
 800f872:	4618      	mov	r0, r3
 800f874:	370c      	adds	r7, #12
 800f876:	46bd      	mov	sp, r7
 800f878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87c:	4770      	bx	lr
 800f87e:	bf00      	nop
 800f880:	2000641c 	.word	0x2000641c

0800f884 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f884:	b480      	push	{r7}
 800f886:	b083      	sub	sp, #12
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]

}
 800f88c:	bf00      	nop
 800f88e:	370c      	adds	r7, #12
 800f890:	46bd      	mov	sp, r7
 800f892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f896:	4770      	bx	lr

0800f898 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f898:	b480      	push	{r7}
 800f89a:	b085      	sub	sp, #20
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	4603      	mov	r3, r0
 800f8a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f8a6:	79fb      	ldrb	r3, [r7, #7]
 800f8a8:	2b03      	cmp	r3, #3
 800f8aa:	d817      	bhi.n	800f8dc <USBD_Get_USB_Status+0x44>
 800f8ac:	a201      	add	r2, pc, #4	; (adr r2, 800f8b4 <USBD_Get_USB_Status+0x1c>)
 800f8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8b2:	bf00      	nop
 800f8b4:	0800f8c5 	.word	0x0800f8c5
 800f8b8:	0800f8cb 	.word	0x0800f8cb
 800f8bc:	0800f8d1 	.word	0x0800f8d1
 800f8c0:	0800f8d7 	.word	0x0800f8d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	73fb      	strb	r3, [r7, #15]
    break;
 800f8c8:	e00b      	b.n	800f8e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f8ca:	2303      	movs	r3, #3
 800f8cc:	73fb      	strb	r3, [r7, #15]
    break;
 800f8ce:	e008      	b.n	800f8e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	73fb      	strb	r3, [r7, #15]
    break;
 800f8d4:	e005      	b.n	800f8e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f8d6:	2303      	movs	r3, #3
 800f8d8:	73fb      	strb	r3, [r7, #15]
    break;
 800f8da:	e002      	b.n	800f8e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f8dc:	2303      	movs	r3, #3
 800f8de:	73fb      	strb	r3, [r7, #15]
    break;
 800f8e0:	bf00      	nop
  }
  return usb_status;
 800f8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3714      	adds	r7, #20
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ee:	4770      	bx	lr

0800f8f0 <__errno>:
 800f8f0:	4b01      	ldr	r3, [pc, #4]	; (800f8f8 <__errno+0x8>)
 800f8f2:	6818      	ldr	r0, [r3, #0]
 800f8f4:	4770      	bx	lr
 800f8f6:	bf00      	nop
 800f8f8:	20000134 	.word	0x20000134

0800f8fc <__libc_init_array>:
 800f8fc:	b570      	push	{r4, r5, r6, lr}
 800f8fe:	4d0d      	ldr	r5, [pc, #52]	; (800f934 <__libc_init_array+0x38>)
 800f900:	4c0d      	ldr	r4, [pc, #52]	; (800f938 <__libc_init_array+0x3c>)
 800f902:	1b64      	subs	r4, r4, r5
 800f904:	10a4      	asrs	r4, r4, #2
 800f906:	2600      	movs	r6, #0
 800f908:	42a6      	cmp	r6, r4
 800f90a:	d109      	bne.n	800f920 <__libc_init_array+0x24>
 800f90c:	4d0b      	ldr	r5, [pc, #44]	; (800f93c <__libc_init_array+0x40>)
 800f90e:	4c0c      	ldr	r4, [pc, #48]	; (800f940 <__libc_init_array+0x44>)
 800f910:	f000 f9fa 	bl	800fd08 <_init>
 800f914:	1b64      	subs	r4, r4, r5
 800f916:	10a4      	asrs	r4, r4, #2
 800f918:	2600      	movs	r6, #0
 800f91a:	42a6      	cmp	r6, r4
 800f91c:	d105      	bne.n	800f92a <__libc_init_array+0x2e>
 800f91e:	bd70      	pop	{r4, r5, r6, pc}
 800f920:	f855 3b04 	ldr.w	r3, [r5], #4
 800f924:	4798      	blx	r3
 800f926:	3601      	adds	r6, #1
 800f928:	e7ee      	b.n	800f908 <__libc_init_array+0xc>
 800f92a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f92e:	4798      	blx	r3
 800f930:	3601      	adds	r6, #1
 800f932:	e7f2      	b.n	800f91a <__libc_init_array+0x1e>
 800f934:	08010e08 	.word	0x08010e08
 800f938:	08010e08 	.word	0x08010e08
 800f93c:	08010e08 	.word	0x08010e08
 800f940:	08010e0c 	.word	0x08010e0c

0800f944 <__itoa>:
 800f944:	1e93      	subs	r3, r2, #2
 800f946:	2b22      	cmp	r3, #34	; 0x22
 800f948:	b510      	push	{r4, lr}
 800f94a:	460c      	mov	r4, r1
 800f94c:	d904      	bls.n	800f958 <__itoa+0x14>
 800f94e:	2300      	movs	r3, #0
 800f950:	700b      	strb	r3, [r1, #0]
 800f952:	461c      	mov	r4, r3
 800f954:	4620      	mov	r0, r4
 800f956:	bd10      	pop	{r4, pc}
 800f958:	2a0a      	cmp	r2, #10
 800f95a:	d109      	bne.n	800f970 <__itoa+0x2c>
 800f95c:	2800      	cmp	r0, #0
 800f95e:	da07      	bge.n	800f970 <__itoa+0x2c>
 800f960:	232d      	movs	r3, #45	; 0x2d
 800f962:	700b      	strb	r3, [r1, #0]
 800f964:	4240      	negs	r0, r0
 800f966:	2101      	movs	r1, #1
 800f968:	4421      	add	r1, r4
 800f96a:	f000 f97f 	bl	800fc6c <__utoa>
 800f96e:	e7f1      	b.n	800f954 <__itoa+0x10>
 800f970:	2100      	movs	r1, #0
 800f972:	e7f9      	b.n	800f968 <__itoa+0x24>

0800f974 <itoa>:
 800f974:	f7ff bfe6 	b.w	800f944 <__itoa>

0800f978 <__retarget_lock_acquire_recursive>:
 800f978:	4770      	bx	lr

0800f97a <__retarget_lock_release_recursive>:
 800f97a:	4770      	bx	lr

0800f97c <malloc>:
 800f97c:	4b02      	ldr	r3, [pc, #8]	; (800f988 <malloc+0xc>)
 800f97e:	4601      	mov	r1, r0
 800f980:	6818      	ldr	r0, [r3, #0]
 800f982:	f000 b885 	b.w	800fa90 <_malloc_r>
 800f986:	bf00      	nop
 800f988:	20000134 	.word	0x20000134

0800f98c <memcpy>:
 800f98c:	440a      	add	r2, r1
 800f98e:	4291      	cmp	r1, r2
 800f990:	f100 33ff 	add.w	r3, r0, #4294967295
 800f994:	d100      	bne.n	800f998 <memcpy+0xc>
 800f996:	4770      	bx	lr
 800f998:	b510      	push	{r4, lr}
 800f99a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f99e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f9a2:	4291      	cmp	r1, r2
 800f9a4:	d1f9      	bne.n	800f99a <memcpy+0xe>
 800f9a6:	bd10      	pop	{r4, pc}

0800f9a8 <memset>:
 800f9a8:	4402      	add	r2, r0
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	4293      	cmp	r3, r2
 800f9ae:	d100      	bne.n	800f9b2 <memset+0xa>
 800f9b0:	4770      	bx	lr
 800f9b2:	f803 1b01 	strb.w	r1, [r3], #1
 800f9b6:	e7f9      	b.n	800f9ac <memset+0x4>

0800f9b8 <_free_r>:
 800f9b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f9ba:	2900      	cmp	r1, #0
 800f9bc:	d044      	beq.n	800fa48 <_free_r+0x90>
 800f9be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9c2:	9001      	str	r0, [sp, #4]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	f1a1 0404 	sub.w	r4, r1, #4
 800f9ca:	bfb8      	it	lt
 800f9cc:	18e4      	addlt	r4, r4, r3
 800f9ce:	f000 f98f 	bl	800fcf0 <__malloc_lock>
 800f9d2:	4a1e      	ldr	r2, [pc, #120]	; (800fa4c <_free_r+0x94>)
 800f9d4:	9801      	ldr	r0, [sp, #4]
 800f9d6:	6813      	ldr	r3, [r2, #0]
 800f9d8:	b933      	cbnz	r3, 800f9e8 <_free_r+0x30>
 800f9da:	6063      	str	r3, [r4, #4]
 800f9dc:	6014      	str	r4, [r2, #0]
 800f9de:	b003      	add	sp, #12
 800f9e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f9e4:	f000 b98a 	b.w	800fcfc <__malloc_unlock>
 800f9e8:	42a3      	cmp	r3, r4
 800f9ea:	d908      	bls.n	800f9fe <_free_r+0x46>
 800f9ec:	6825      	ldr	r5, [r4, #0]
 800f9ee:	1961      	adds	r1, r4, r5
 800f9f0:	428b      	cmp	r3, r1
 800f9f2:	bf01      	itttt	eq
 800f9f4:	6819      	ldreq	r1, [r3, #0]
 800f9f6:	685b      	ldreq	r3, [r3, #4]
 800f9f8:	1949      	addeq	r1, r1, r5
 800f9fa:	6021      	streq	r1, [r4, #0]
 800f9fc:	e7ed      	b.n	800f9da <_free_r+0x22>
 800f9fe:	461a      	mov	r2, r3
 800fa00:	685b      	ldr	r3, [r3, #4]
 800fa02:	b10b      	cbz	r3, 800fa08 <_free_r+0x50>
 800fa04:	42a3      	cmp	r3, r4
 800fa06:	d9fa      	bls.n	800f9fe <_free_r+0x46>
 800fa08:	6811      	ldr	r1, [r2, #0]
 800fa0a:	1855      	adds	r5, r2, r1
 800fa0c:	42a5      	cmp	r5, r4
 800fa0e:	d10b      	bne.n	800fa28 <_free_r+0x70>
 800fa10:	6824      	ldr	r4, [r4, #0]
 800fa12:	4421      	add	r1, r4
 800fa14:	1854      	adds	r4, r2, r1
 800fa16:	42a3      	cmp	r3, r4
 800fa18:	6011      	str	r1, [r2, #0]
 800fa1a:	d1e0      	bne.n	800f9de <_free_r+0x26>
 800fa1c:	681c      	ldr	r4, [r3, #0]
 800fa1e:	685b      	ldr	r3, [r3, #4]
 800fa20:	6053      	str	r3, [r2, #4]
 800fa22:	4421      	add	r1, r4
 800fa24:	6011      	str	r1, [r2, #0]
 800fa26:	e7da      	b.n	800f9de <_free_r+0x26>
 800fa28:	d902      	bls.n	800fa30 <_free_r+0x78>
 800fa2a:	230c      	movs	r3, #12
 800fa2c:	6003      	str	r3, [r0, #0]
 800fa2e:	e7d6      	b.n	800f9de <_free_r+0x26>
 800fa30:	6825      	ldr	r5, [r4, #0]
 800fa32:	1961      	adds	r1, r4, r5
 800fa34:	428b      	cmp	r3, r1
 800fa36:	bf04      	itt	eq
 800fa38:	6819      	ldreq	r1, [r3, #0]
 800fa3a:	685b      	ldreq	r3, [r3, #4]
 800fa3c:	6063      	str	r3, [r4, #4]
 800fa3e:	bf04      	itt	eq
 800fa40:	1949      	addeq	r1, r1, r5
 800fa42:	6021      	streq	r1, [r4, #0]
 800fa44:	6054      	str	r4, [r2, #4]
 800fa46:	e7ca      	b.n	800f9de <_free_r+0x26>
 800fa48:	b003      	add	sp, #12
 800fa4a:	bd30      	pop	{r4, r5, pc}
 800fa4c:	20006640 	.word	0x20006640

0800fa50 <sbrk_aligned>:
 800fa50:	b570      	push	{r4, r5, r6, lr}
 800fa52:	4e0e      	ldr	r6, [pc, #56]	; (800fa8c <sbrk_aligned+0x3c>)
 800fa54:	460c      	mov	r4, r1
 800fa56:	6831      	ldr	r1, [r6, #0]
 800fa58:	4605      	mov	r5, r0
 800fa5a:	b911      	cbnz	r1, 800fa62 <sbrk_aligned+0x12>
 800fa5c:	f000 f8f6 	bl	800fc4c <_sbrk_r>
 800fa60:	6030      	str	r0, [r6, #0]
 800fa62:	4621      	mov	r1, r4
 800fa64:	4628      	mov	r0, r5
 800fa66:	f000 f8f1 	bl	800fc4c <_sbrk_r>
 800fa6a:	1c43      	adds	r3, r0, #1
 800fa6c:	d00a      	beq.n	800fa84 <sbrk_aligned+0x34>
 800fa6e:	1cc4      	adds	r4, r0, #3
 800fa70:	f024 0403 	bic.w	r4, r4, #3
 800fa74:	42a0      	cmp	r0, r4
 800fa76:	d007      	beq.n	800fa88 <sbrk_aligned+0x38>
 800fa78:	1a21      	subs	r1, r4, r0
 800fa7a:	4628      	mov	r0, r5
 800fa7c:	f000 f8e6 	bl	800fc4c <_sbrk_r>
 800fa80:	3001      	adds	r0, #1
 800fa82:	d101      	bne.n	800fa88 <sbrk_aligned+0x38>
 800fa84:	f04f 34ff 	mov.w	r4, #4294967295
 800fa88:	4620      	mov	r0, r4
 800fa8a:	bd70      	pop	{r4, r5, r6, pc}
 800fa8c:	20006644 	.word	0x20006644

0800fa90 <_malloc_r>:
 800fa90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa94:	1ccd      	adds	r5, r1, #3
 800fa96:	f025 0503 	bic.w	r5, r5, #3
 800fa9a:	3508      	adds	r5, #8
 800fa9c:	2d0c      	cmp	r5, #12
 800fa9e:	bf38      	it	cc
 800faa0:	250c      	movcc	r5, #12
 800faa2:	2d00      	cmp	r5, #0
 800faa4:	4607      	mov	r7, r0
 800faa6:	db01      	blt.n	800faac <_malloc_r+0x1c>
 800faa8:	42a9      	cmp	r1, r5
 800faaa:	d905      	bls.n	800fab8 <_malloc_r+0x28>
 800faac:	230c      	movs	r3, #12
 800faae:	603b      	str	r3, [r7, #0]
 800fab0:	2600      	movs	r6, #0
 800fab2:	4630      	mov	r0, r6
 800fab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fab8:	4e2e      	ldr	r6, [pc, #184]	; (800fb74 <_malloc_r+0xe4>)
 800faba:	f000 f919 	bl	800fcf0 <__malloc_lock>
 800fabe:	6833      	ldr	r3, [r6, #0]
 800fac0:	461c      	mov	r4, r3
 800fac2:	bb34      	cbnz	r4, 800fb12 <_malloc_r+0x82>
 800fac4:	4629      	mov	r1, r5
 800fac6:	4638      	mov	r0, r7
 800fac8:	f7ff ffc2 	bl	800fa50 <sbrk_aligned>
 800facc:	1c43      	adds	r3, r0, #1
 800face:	4604      	mov	r4, r0
 800fad0:	d14d      	bne.n	800fb6e <_malloc_r+0xde>
 800fad2:	6834      	ldr	r4, [r6, #0]
 800fad4:	4626      	mov	r6, r4
 800fad6:	2e00      	cmp	r6, #0
 800fad8:	d140      	bne.n	800fb5c <_malloc_r+0xcc>
 800fada:	6823      	ldr	r3, [r4, #0]
 800fadc:	4631      	mov	r1, r6
 800fade:	4638      	mov	r0, r7
 800fae0:	eb04 0803 	add.w	r8, r4, r3
 800fae4:	f000 f8b2 	bl	800fc4c <_sbrk_r>
 800fae8:	4580      	cmp	r8, r0
 800faea:	d13a      	bne.n	800fb62 <_malloc_r+0xd2>
 800faec:	6821      	ldr	r1, [r4, #0]
 800faee:	3503      	adds	r5, #3
 800faf0:	1a6d      	subs	r5, r5, r1
 800faf2:	f025 0503 	bic.w	r5, r5, #3
 800faf6:	3508      	adds	r5, #8
 800faf8:	2d0c      	cmp	r5, #12
 800fafa:	bf38      	it	cc
 800fafc:	250c      	movcc	r5, #12
 800fafe:	4629      	mov	r1, r5
 800fb00:	4638      	mov	r0, r7
 800fb02:	f7ff ffa5 	bl	800fa50 <sbrk_aligned>
 800fb06:	3001      	adds	r0, #1
 800fb08:	d02b      	beq.n	800fb62 <_malloc_r+0xd2>
 800fb0a:	6823      	ldr	r3, [r4, #0]
 800fb0c:	442b      	add	r3, r5
 800fb0e:	6023      	str	r3, [r4, #0]
 800fb10:	e00e      	b.n	800fb30 <_malloc_r+0xa0>
 800fb12:	6822      	ldr	r2, [r4, #0]
 800fb14:	1b52      	subs	r2, r2, r5
 800fb16:	d41e      	bmi.n	800fb56 <_malloc_r+0xc6>
 800fb18:	2a0b      	cmp	r2, #11
 800fb1a:	d916      	bls.n	800fb4a <_malloc_r+0xba>
 800fb1c:	1961      	adds	r1, r4, r5
 800fb1e:	42a3      	cmp	r3, r4
 800fb20:	6025      	str	r5, [r4, #0]
 800fb22:	bf18      	it	ne
 800fb24:	6059      	strne	r1, [r3, #4]
 800fb26:	6863      	ldr	r3, [r4, #4]
 800fb28:	bf08      	it	eq
 800fb2a:	6031      	streq	r1, [r6, #0]
 800fb2c:	5162      	str	r2, [r4, r5]
 800fb2e:	604b      	str	r3, [r1, #4]
 800fb30:	4638      	mov	r0, r7
 800fb32:	f104 060b 	add.w	r6, r4, #11
 800fb36:	f000 f8e1 	bl	800fcfc <__malloc_unlock>
 800fb3a:	f026 0607 	bic.w	r6, r6, #7
 800fb3e:	1d23      	adds	r3, r4, #4
 800fb40:	1af2      	subs	r2, r6, r3
 800fb42:	d0b6      	beq.n	800fab2 <_malloc_r+0x22>
 800fb44:	1b9b      	subs	r3, r3, r6
 800fb46:	50a3      	str	r3, [r4, r2]
 800fb48:	e7b3      	b.n	800fab2 <_malloc_r+0x22>
 800fb4a:	6862      	ldr	r2, [r4, #4]
 800fb4c:	42a3      	cmp	r3, r4
 800fb4e:	bf0c      	ite	eq
 800fb50:	6032      	streq	r2, [r6, #0]
 800fb52:	605a      	strne	r2, [r3, #4]
 800fb54:	e7ec      	b.n	800fb30 <_malloc_r+0xa0>
 800fb56:	4623      	mov	r3, r4
 800fb58:	6864      	ldr	r4, [r4, #4]
 800fb5a:	e7b2      	b.n	800fac2 <_malloc_r+0x32>
 800fb5c:	4634      	mov	r4, r6
 800fb5e:	6876      	ldr	r6, [r6, #4]
 800fb60:	e7b9      	b.n	800fad6 <_malloc_r+0x46>
 800fb62:	230c      	movs	r3, #12
 800fb64:	603b      	str	r3, [r7, #0]
 800fb66:	4638      	mov	r0, r7
 800fb68:	f000 f8c8 	bl	800fcfc <__malloc_unlock>
 800fb6c:	e7a1      	b.n	800fab2 <_malloc_r+0x22>
 800fb6e:	6025      	str	r5, [r4, #0]
 800fb70:	e7de      	b.n	800fb30 <_malloc_r+0xa0>
 800fb72:	bf00      	nop
 800fb74:	20006640 	.word	0x20006640

0800fb78 <cleanup_glue>:
 800fb78:	b538      	push	{r3, r4, r5, lr}
 800fb7a:	460c      	mov	r4, r1
 800fb7c:	6809      	ldr	r1, [r1, #0]
 800fb7e:	4605      	mov	r5, r0
 800fb80:	b109      	cbz	r1, 800fb86 <cleanup_glue+0xe>
 800fb82:	f7ff fff9 	bl	800fb78 <cleanup_glue>
 800fb86:	4621      	mov	r1, r4
 800fb88:	4628      	mov	r0, r5
 800fb8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb8e:	f7ff bf13 	b.w	800f9b8 <_free_r>
	...

0800fb94 <_reclaim_reent>:
 800fb94:	4b2c      	ldr	r3, [pc, #176]	; (800fc48 <_reclaim_reent+0xb4>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	4283      	cmp	r3, r0
 800fb9a:	b570      	push	{r4, r5, r6, lr}
 800fb9c:	4604      	mov	r4, r0
 800fb9e:	d051      	beq.n	800fc44 <_reclaim_reent+0xb0>
 800fba0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fba2:	b143      	cbz	r3, 800fbb6 <_reclaim_reent+0x22>
 800fba4:	68db      	ldr	r3, [r3, #12]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d14a      	bne.n	800fc40 <_reclaim_reent+0xac>
 800fbaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbac:	6819      	ldr	r1, [r3, #0]
 800fbae:	b111      	cbz	r1, 800fbb6 <_reclaim_reent+0x22>
 800fbb0:	4620      	mov	r0, r4
 800fbb2:	f7ff ff01 	bl	800f9b8 <_free_r>
 800fbb6:	6961      	ldr	r1, [r4, #20]
 800fbb8:	b111      	cbz	r1, 800fbc0 <_reclaim_reent+0x2c>
 800fbba:	4620      	mov	r0, r4
 800fbbc:	f7ff fefc 	bl	800f9b8 <_free_r>
 800fbc0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fbc2:	b111      	cbz	r1, 800fbca <_reclaim_reent+0x36>
 800fbc4:	4620      	mov	r0, r4
 800fbc6:	f7ff fef7 	bl	800f9b8 <_free_r>
 800fbca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fbcc:	b111      	cbz	r1, 800fbd4 <_reclaim_reent+0x40>
 800fbce:	4620      	mov	r0, r4
 800fbd0:	f7ff fef2 	bl	800f9b8 <_free_r>
 800fbd4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fbd6:	b111      	cbz	r1, 800fbde <_reclaim_reent+0x4a>
 800fbd8:	4620      	mov	r0, r4
 800fbda:	f7ff feed 	bl	800f9b8 <_free_r>
 800fbde:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fbe0:	b111      	cbz	r1, 800fbe8 <_reclaim_reent+0x54>
 800fbe2:	4620      	mov	r0, r4
 800fbe4:	f7ff fee8 	bl	800f9b8 <_free_r>
 800fbe8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800fbea:	b111      	cbz	r1, 800fbf2 <_reclaim_reent+0x5e>
 800fbec:	4620      	mov	r0, r4
 800fbee:	f7ff fee3 	bl	800f9b8 <_free_r>
 800fbf2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800fbf4:	b111      	cbz	r1, 800fbfc <_reclaim_reent+0x68>
 800fbf6:	4620      	mov	r0, r4
 800fbf8:	f7ff fede 	bl	800f9b8 <_free_r>
 800fbfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fbfe:	b111      	cbz	r1, 800fc06 <_reclaim_reent+0x72>
 800fc00:	4620      	mov	r0, r4
 800fc02:	f7ff fed9 	bl	800f9b8 <_free_r>
 800fc06:	69a3      	ldr	r3, [r4, #24]
 800fc08:	b1e3      	cbz	r3, 800fc44 <_reclaim_reent+0xb0>
 800fc0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fc0c:	4620      	mov	r0, r4
 800fc0e:	4798      	blx	r3
 800fc10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fc12:	b1b9      	cbz	r1, 800fc44 <_reclaim_reent+0xb0>
 800fc14:	4620      	mov	r0, r4
 800fc16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc1a:	f7ff bfad 	b.w	800fb78 <cleanup_glue>
 800fc1e:	5949      	ldr	r1, [r1, r5]
 800fc20:	b941      	cbnz	r1, 800fc34 <_reclaim_reent+0xa0>
 800fc22:	3504      	adds	r5, #4
 800fc24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc26:	2d80      	cmp	r5, #128	; 0x80
 800fc28:	68d9      	ldr	r1, [r3, #12]
 800fc2a:	d1f8      	bne.n	800fc1e <_reclaim_reent+0x8a>
 800fc2c:	4620      	mov	r0, r4
 800fc2e:	f7ff fec3 	bl	800f9b8 <_free_r>
 800fc32:	e7ba      	b.n	800fbaa <_reclaim_reent+0x16>
 800fc34:	680e      	ldr	r6, [r1, #0]
 800fc36:	4620      	mov	r0, r4
 800fc38:	f7ff febe 	bl	800f9b8 <_free_r>
 800fc3c:	4631      	mov	r1, r6
 800fc3e:	e7ef      	b.n	800fc20 <_reclaim_reent+0x8c>
 800fc40:	2500      	movs	r5, #0
 800fc42:	e7ef      	b.n	800fc24 <_reclaim_reent+0x90>
 800fc44:	bd70      	pop	{r4, r5, r6, pc}
 800fc46:	bf00      	nop
 800fc48:	20000134 	.word	0x20000134

0800fc4c <_sbrk_r>:
 800fc4c:	b538      	push	{r3, r4, r5, lr}
 800fc4e:	4d06      	ldr	r5, [pc, #24]	; (800fc68 <_sbrk_r+0x1c>)
 800fc50:	2300      	movs	r3, #0
 800fc52:	4604      	mov	r4, r0
 800fc54:	4608      	mov	r0, r1
 800fc56:	602b      	str	r3, [r5, #0]
 800fc58:	f7f2 fe9a 	bl	8002990 <_sbrk>
 800fc5c:	1c43      	adds	r3, r0, #1
 800fc5e:	d102      	bne.n	800fc66 <_sbrk_r+0x1a>
 800fc60:	682b      	ldr	r3, [r5, #0]
 800fc62:	b103      	cbz	r3, 800fc66 <_sbrk_r+0x1a>
 800fc64:	6023      	str	r3, [r4, #0]
 800fc66:	bd38      	pop	{r3, r4, r5, pc}
 800fc68:	20006648 	.word	0x20006648

0800fc6c <__utoa>:
 800fc6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc6e:	4c1f      	ldr	r4, [pc, #124]	; (800fcec <__utoa+0x80>)
 800fc70:	b08b      	sub	sp, #44	; 0x2c
 800fc72:	4605      	mov	r5, r0
 800fc74:	460b      	mov	r3, r1
 800fc76:	466e      	mov	r6, sp
 800fc78:	f104 0c20 	add.w	ip, r4, #32
 800fc7c:	6820      	ldr	r0, [r4, #0]
 800fc7e:	6861      	ldr	r1, [r4, #4]
 800fc80:	4637      	mov	r7, r6
 800fc82:	c703      	stmia	r7!, {r0, r1}
 800fc84:	3408      	adds	r4, #8
 800fc86:	4564      	cmp	r4, ip
 800fc88:	463e      	mov	r6, r7
 800fc8a:	d1f7      	bne.n	800fc7c <__utoa+0x10>
 800fc8c:	7921      	ldrb	r1, [r4, #4]
 800fc8e:	7139      	strb	r1, [r7, #4]
 800fc90:	1e91      	subs	r1, r2, #2
 800fc92:	6820      	ldr	r0, [r4, #0]
 800fc94:	6038      	str	r0, [r7, #0]
 800fc96:	2922      	cmp	r1, #34	; 0x22
 800fc98:	f04f 0100 	mov.w	r1, #0
 800fc9c:	d904      	bls.n	800fca8 <__utoa+0x3c>
 800fc9e:	7019      	strb	r1, [r3, #0]
 800fca0:	460b      	mov	r3, r1
 800fca2:	4618      	mov	r0, r3
 800fca4:	b00b      	add	sp, #44	; 0x2c
 800fca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fca8:	1e58      	subs	r0, r3, #1
 800fcaa:	4684      	mov	ip, r0
 800fcac:	fbb5 f7f2 	udiv	r7, r5, r2
 800fcb0:	fb02 5617 	mls	r6, r2, r7, r5
 800fcb4:	3628      	adds	r6, #40	; 0x28
 800fcb6:	446e      	add	r6, sp
 800fcb8:	460c      	mov	r4, r1
 800fcba:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800fcbe:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800fcc2:	462e      	mov	r6, r5
 800fcc4:	42b2      	cmp	r2, r6
 800fcc6:	f101 0101 	add.w	r1, r1, #1
 800fcca:	463d      	mov	r5, r7
 800fccc:	d9ee      	bls.n	800fcac <__utoa+0x40>
 800fcce:	2200      	movs	r2, #0
 800fcd0:	545a      	strb	r2, [r3, r1]
 800fcd2:	1919      	adds	r1, r3, r4
 800fcd4:	1aa5      	subs	r5, r4, r2
 800fcd6:	42aa      	cmp	r2, r5
 800fcd8:	dae3      	bge.n	800fca2 <__utoa+0x36>
 800fcda:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800fcde:	780e      	ldrb	r6, [r1, #0]
 800fce0:	7006      	strb	r6, [r0, #0]
 800fce2:	3201      	adds	r2, #1
 800fce4:	f801 5901 	strb.w	r5, [r1], #-1
 800fce8:	e7f4      	b.n	800fcd4 <__utoa+0x68>
 800fcea:	bf00      	nop
 800fcec:	08010dd8 	.word	0x08010dd8

0800fcf0 <__malloc_lock>:
 800fcf0:	4801      	ldr	r0, [pc, #4]	; (800fcf8 <__malloc_lock+0x8>)
 800fcf2:	f7ff be41 	b.w	800f978 <__retarget_lock_acquire_recursive>
 800fcf6:	bf00      	nop
 800fcf8:	2000663c 	.word	0x2000663c

0800fcfc <__malloc_unlock>:
 800fcfc:	4801      	ldr	r0, [pc, #4]	; (800fd04 <__malloc_unlock+0x8>)
 800fcfe:	f7ff be3c 	b.w	800f97a <__retarget_lock_release_recursive>
 800fd02:	bf00      	nop
 800fd04:	2000663c 	.word	0x2000663c

0800fd08 <_init>:
 800fd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd0a:	bf00      	nop
 800fd0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd0e:	bc08      	pop	{r3}
 800fd10:	469e      	mov	lr, r3
 800fd12:	4770      	bx	lr

0800fd14 <_fini>:
 800fd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd16:	bf00      	nop
 800fd18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd1a:	bc08      	pop	{r3}
 800fd1c:	469e      	mov	lr, r3
 800fd1e:	4770      	bx	lr
