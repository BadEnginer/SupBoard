
SUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000052c0  0800e598  0800e598  0001e598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013858  08013858  0003018c  2**0
                  CONTENTS
  4 .ARM          00000008  08013858  08013858  00023858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013860  08013860  0003018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013860  08013860  00023860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013864  08013864  00023864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08013868  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006808  2000018c  080139f4  0003018c  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20006994  080139f4  00036994  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028576  00000000  00000000  000301bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b07  00000000  00000000  00058732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020c0  00000000  00000000  0005e240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001df8  00000000  00000000  00060300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001da31  00000000  00000000  000620f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000287d1  00000000  00000000  0007fb29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a15ac  00000000  00000000  000a82fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001498a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ff4  00000000  00000000  001498f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000018c 	.word	0x2000018c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e580 	.word	0x0800e580

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000190 	.word	0x20000190
 80001dc:	0800e580 	.word	0x0800e580

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <DEV_SPI_WriteByte>:
#include "DEV_Config.h"
#include "stm32f4xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 800058e:	1df9      	adds	r1, r7, #7
 8000590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000594:	2201      	movs	r2, #1
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <DEV_SPI_WriteByte+0x20>)
 8000598:	f004 ffc5 	bl	8005526 <HAL_SPI_Transmit>
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000214 	.word	0x20000214

080005a8 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2104      	movs	r1, #4
 80005b0:	4807      	ldr	r0, [pc, #28]	; (80005d0 <DEV_Module_Init+0x28>)
 80005b2:	f002 fec9 	bl	8003348 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2101      	movs	r1, #1
 80005ba:	4805      	ldr	r0, [pc, #20]	; (80005d0 <DEV_Module_Init+0x28>)
 80005bc:	f002 fec4 	bl	8003348 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2102      	movs	r1, #2
 80005c4:	4802      	ldr	r0, [pc, #8]	; (80005d0 <DEV_Module_Init+0x28>)
 80005c6:	f002 febf 	bl	8003348 <HAL_GPIO_WritePin>
		return 0;
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40020400 	.word	0x40020400

080005d4 <DEV_Module_Exit>:

void DEV_Module_Exit(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80005d8:	2200      	movs	r2, #0
 80005da:	2104      	movs	r1, #4
 80005dc:	4807      	ldr	r0, [pc, #28]	; (80005fc <DEV_Module_Exit+0x28>)
 80005de:	f002 feb3 	bl	8003348 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2101      	movs	r1, #1
 80005e6:	4805      	ldr	r0, [pc, #20]	; (80005fc <DEV_Module_Exit+0x28>)
 80005e8:	f002 feae 	bl	8003348 <HAL_GPIO_WritePin>

    //close 5V
    DEV_Digital_Write(EPD_RST_PIN, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2102      	movs	r1, #2
 80005f0:	4802      	ldr	r0, [pc, #8]	; (80005fc <DEV_Module_Exit+0x28>)
 80005f2:	f002 fea9 	bl	8003348 <HAL_GPIO_WritePin>
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40020400 	.word	0x40020400

08000600 <EPD_2IN9B_V3_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_2IN9B_V3_Reset(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8000604:	2201      	movs	r2, #1
 8000606:	2102      	movs	r1, #2
 8000608:	480b      	ldr	r0, [pc, #44]	; (8000638 <EPD_2IN9B_V3_Reset+0x38>)
 800060a:	f002 fe9d 	bl	8003348 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 800060e:	20c8      	movs	r0, #200	; 0xc8
 8000610:	f002 f90e 	bl	8002830 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2102      	movs	r1, #2
 8000618:	4807      	ldr	r0, [pc, #28]	; (8000638 <EPD_2IN9B_V3_Reset+0x38>)
 800061a:	f002 fe95 	bl	8003348 <HAL_GPIO_WritePin>
    DEV_Delay_ms(5);
 800061e:	2005      	movs	r0, #5
 8000620:	f002 f906 	bl	8002830 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8000624:	2201      	movs	r2, #1
 8000626:	2102      	movs	r1, #2
 8000628:	4803      	ldr	r0, [pc, #12]	; (8000638 <EPD_2IN9B_V3_Reset+0x38>)
 800062a:	f002 fe8d 	bl	8003348 <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 800062e:	20c8      	movs	r0, #200	; 0xc8
 8000630:	f002 f8fe 	bl	8002830 <HAL_Delay>
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40020400 	.word	0x40020400

0800063c <EPD_2IN9B_V3_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_2IN9B_V3_SendCommand(UBYTE Reg)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2104      	movs	r1, #4
 800064a:	480a      	ldr	r0, [pc, #40]	; (8000674 <EPD_2IN9B_V3_SendCommand+0x38>)
 800064c:	f002 fe7c 	bl	8003348 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	2101      	movs	r1, #1
 8000654:	4807      	ldr	r0, [pc, #28]	; (8000674 <EPD_2IN9B_V3_SendCommand+0x38>)
 8000656:	f002 fe77 	bl	8003348 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff91 	bl	8000584 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8000662:	2201      	movs	r2, #1
 8000664:	2101      	movs	r1, #1
 8000666:	4803      	ldr	r0, [pc, #12]	; (8000674 <EPD_2IN9B_V3_SendCommand+0x38>)
 8000668:	f002 fe6e 	bl	8003348 <HAL_GPIO_WritePin>
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40020400 	.word	0x40020400

08000678 <EPD_2IN9B_V3_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_2IN9B_V3_SendData(UBYTE Data)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8000682:	2201      	movs	r2, #1
 8000684:	2104      	movs	r1, #4
 8000686:	480a      	ldr	r0, [pc, #40]	; (80006b0 <EPD_2IN9B_V3_SendData+0x38>)
 8000688:	f002 fe5e 	bl	8003348 <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800068c:	2200      	movs	r2, #0
 800068e:	2101      	movs	r1, #1
 8000690:	4807      	ldr	r0, [pc, #28]	; (80006b0 <EPD_2IN9B_V3_SendData+0x38>)
 8000692:	f002 fe59 	bl	8003348 <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff73 	bl	8000584 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800069e:	2201      	movs	r2, #1
 80006a0:	2101      	movs	r1, #1
 80006a2:	4803      	ldr	r0, [pc, #12]	; (80006b0 <EPD_2IN9B_V3_SendData+0x38>)
 80006a4:	f002 fe50 	bl	8003348 <HAL_GPIO_WritePin>
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40020400 	.word	0x40020400

080006b4 <EPD_2IN9B_V3_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
void EPD_2IN9B_V3_ReadBusy(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 80006ba:	4811      	ldr	r0, [pc, #68]	; (8000700 <EPD_2IN9B_V3_ReadBusy+0x4c>)
 80006bc:	f00d f950 	bl	800d960 <puts>
    UBYTE busy;
	do
	{
		EPD_2IN9B_V3_SendCommand(0x71);
 80006c0:	2071      	movs	r0, #113	; 0x71
 80006c2:	f7ff ffbb 	bl	800063c <EPD_2IN9B_V3_SendCommand>
		busy = DEV_Digital_Read(EPD_BUSY_PIN);
 80006c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ca:	480e      	ldr	r0, [pc, #56]	; (8000704 <EPD_2IN9B_V3_ReadBusy+0x50>)
 80006cc:	f002 fe24 	bl	8003318 <HAL_GPIO_ReadPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	71fb      	strb	r3, [r7, #7]
		busy =!(busy & 0x01);        
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	2b00      	cmp	r3, #0
 80006dc:	bf0c      	ite	eq
 80006de:	2301      	moveq	r3, #1
 80006e0:	2300      	movne	r3, #0
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	71fb      	strb	r3, [r7, #7]
	}
	while(busy); 
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d1e9      	bne.n	80006c0 <EPD_2IN9B_V3_ReadBusy+0xc>
    Debug("e-Paper busy release\r\n");
 80006ec:	4806      	ldr	r0, [pc, #24]	; (8000708 <EPD_2IN9B_V3_ReadBusy+0x54>)
 80006ee:	f00d f937 	bl	800d960 <puts>
    DEV_Delay_ms(200);
 80006f2:	20c8      	movs	r0, #200	; 0xc8
 80006f4:	f002 f89c 	bl	8002830 <HAL_Delay>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	0800e598 	.word	0x0800e598
 8000704:	40020400 	.word	0x40020400
 8000708:	0800e5b0 	.word	0x0800e5b0

0800070c <EPD_2IN9B_V3_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_2IN9B_V3_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
    EPD_2IN9B_V3_Reset();
 8000710:	f7ff ff76 	bl	8000600 <EPD_2IN9B_V3_Reset>

    EPD_2IN9B_V3_SendCommand(0x04);  
 8000714:	2004      	movs	r0, #4
 8000716:	f7ff ff91 	bl	800063c <EPD_2IN9B_V3_SendCommand>
    EPD_2IN9B_V3_ReadBusy();//waiting for the electronic paper IC to release the idle signal
 800071a:	f7ff ffcb 	bl	80006b4 <EPD_2IN9B_V3_ReadBusy>

    EPD_2IN9B_V3_SendCommand(0x00);//panel setting
 800071e:	2000      	movs	r0, #0
 8000720:	f7ff ff8c 	bl	800063c <EPD_2IN9B_V3_SendCommand>
    EPD_2IN9B_V3_SendData(0x0f);//LUT from OTP，128x296
 8000724:	200f      	movs	r0, #15
 8000726:	f7ff ffa7 	bl	8000678 <EPD_2IN9B_V3_SendData>
    EPD_2IN9B_V3_SendData(0x89);//Temperature sensor, boost and other related timing settings
 800072a:	2089      	movs	r0, #137	; 0x89
 800072c:	f7ff ffa4 	bl	8000678 <EPD_2IN9B_V3_SendData>

    EPD_2IN9B_V3_SendCommand(0x61);//resolution setting
 8000730:	2061      	movs	r0, #97	; 0x61
 8000732:	f7ff ff83 	bl	800063c <EPD_2IN9B_V3_SendCommand>
    EPD_2IN9B_V3_SendData (0x80);
 8000736:	2080      	movs	r0, #128	; 0x80
 8000738:	f7ff ff9e 	bl	8000678 <EPD_2IN9B_V3_SendData>
    EPD_2IN9B_V3_SendData (0x01);
 800073c:	2001      	movs	r0, #1
 800073e:	f7ff ff9b 	bl	8000678 <EPD_2IN9B_V3_SendData>
    EPD_2IN9B_V3_SendData (0x28);
 8000742:	2028      	movs	r0, #40	; 0x28
 8000744:	f7ff ff98 	bl	8000678 <EPD_2IN9B_V3_SendData>

    EPD_2IN9B_V3_SendCommand(0X50);//VCOM AND DATA INTERVAL SETTING			
 8000748:	2050      	movs	r0, #80	; 0x50
 800074a:	f7ff ff77 	bl	800063c <EPD_2IN9B_V3_SendCommand>
    EPD_2IN9B_V3_SendData(0x77);//WBmode:VBDF 17|D7 VBDW 97 VBDB 57		
 800074e:	2077      	movs	r0, #119	; 0x77
 8000750:	f7ff ff92 	bl	8000678 <EPD_2IN9B_V3_SendData>
                            //WBRmode:VBDF F7 VBDW 77 VBDB 37  VBDR B7
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <EPD_2IN9B_V3_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_2IN9B_V3_Clear(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
    UWORD Width = (EPD_2IN9B_V3_WIDTH % 8 == 0)? (EPD_2IN9B_V3_WIDTH / 8 ): (EPD_2IN9B_V3_WIDTH / 8 + 1);
 800075e:	2310      	movs	r3, #16
 8000760:	80fb      	strh	r3, [r7, #6]
    UWORD Height = EPD_2IN9B_V3_HEIGHT;
 8000762:	f44f 7394 	mov.w	r3, #296	; 0x128
 8000766:	80bb      	strh	r3, [r7, #4]

    //send black data
    EPD_2IN9B_V3_SendCommand(0x10);
 8000768:	2010      	movs	r0, #16
 800076a:	f7ff ff67 	bl	800063c <EPD_2IN9B_V3_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 800076e:	2300      	movs	r3, #0
 8000770:	81fb      	strh	r3, [r7, #14]
 8000772:	e00f      	b.n	8000794 <EPD_2IN9B_V3_Clear+0x3c>
        for (UWORD i = 0; i < Width; i++) {
 8000774:	2300      	movs	r3, #0
 8000776:	81bb      	strh	r3, [r7, #12]
 8000778:	e005      	b.n	8000786 <EPD_2IN9B_V3_Clear+0x2e>
            EPD_2IN9B_V3_SendData(0xFF);
 800077a:	20ff      	movs	r0, #255	; 0xff
 800077c:	f7ff ff7c 	bl	8000678 <EPD_2IN9B_V3_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8000780:	89bb      	ldrh	r3, [r7, #12]
 8000782:	3301      	adds	r3, #1
 8000784:	81bb      	strh	r3, [r7, #12]
 8000786:	89ba      	ldrh	r2, [r7, #12]
 8000788:	88fb      	ldrh	r3, [r7, #6]
 800078a:	429a      	cmp	r2, r3
 800078c:	d3f5      	bcc.n	800077a <EPD_2IN9B_V3_Clear+0x22>
    for (UWORD j = 0; j < Height; j++) {
 800078e:	89fb      	ldrh	r3, [r7, #14]
 8000790:	3301      	adds	r3, #1
 8000792:	81fb      	strh	r3, [r7, #14]
 8000794:	89fa      	ldrh	r2, [r7, #14]
 8000796:	88bb      	ldrh	r3, [r7, #4]
 8000798:	429a      	cmp	r2, r3
 800079a:	d3eb      	bcc.n	8000774 <EPD_2IN9B_V3_Clear+0x1c>
        }
    }

    //send red data
    EPD_2IN9B_V3_SendCommand(0x13);
 800079c:	2013      	movs	r0, #19
 800079e:	f7ff ff4d 	bl	800063c <EPD_2IN9B_V3_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80007a2:	2300      	movs	r3, #0
 80007a4:	817b      	strh	r3, [r7, #10]
 80007a6:	e00f      	b.n	80007c8 <EPD_2IN9B_V3_Clear+0x70>
        for (UWORD i = 0; i < Width; i++) {
 80007a8:	2300      	movs	r3, #0
 80007aa:	813b      	strh	r3, [r7, #8]
 80007ac:	e005      	b.n	80007ba <EPD_2IN9B_V3_Clear+0x62>
            EPD_2IN9B_V3_SendData(0xFF);
 80007ae:	20ff      	movs	r0, #255	; 0xff
 80007b0:	f7ff ff62 	bl	8000678 <EPD_2IN9B_V3_SendData>
        for (UWORD i = 0; i < Width; i++) {
 80007b4:	893b      	ldrh	r3, [r7, #8]
 80007b6:	3301      	adds	r3, #1
 80007b8:	813b      	strh	r3, [r7, #8]
 80007ba:	893a      	ldrh	r2, [r7, #8]
 80007bc:	88fb      	ldrh	r3, [r7, #6]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d3f5      	bcc.n	80007ae <EPD_2IN9B_V3_Clear+0x56>
    for (UWORD j = 0; j < Height; j++) {
 80007c2:	897b      	ldrh	r3, [r7, #10]
 80007c4:	3301      	adds	r3, #1
 80007c6:	817b      	strh	r3, [r7, #10]
 80007c8:	897a      	ldrh	r2, [r7, #10]
 80007ca:	88bb      	ldrh	r3, [r7, #4]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d3eb      	bcc.n	80007a8 <EPD_2IN9B_V3_Clear+0x50>
        }
    }
    
    EPD_2IN9B_V3_SendCommand(0x12);
 80007d0:	2012      	movs	r0, #18
 80007d2:	f7ff ff33 	bl	800063c <EPD_2IN9B_V3_SendCommand>
    EPD_2IN9B_V3_ReadBusy();
 80007d6:	f7ff ff6d 	bl	80006b4 <EPD_2IN9B_V3_ReadBusy>
}
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <EPD_2IN9B_V3_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_2IN9B_V3_Display(const UBYTE *blackimage, const UBYTE *ryimage)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b086      	sub	sp, #24
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
 80007ea:	6039      	str	r1, [r7, #0]
    UWORD Width, Height;
    Width = (EPD_2IN9B_V3_WIDTH % 8 == 0)? (EPD_2IN9B_V3_WIDTH / 8 ): (EPD_2IN9B_V3_WIDTH / 8 + 1);
 80007ec:	2310      	movs	r3, #16
 80007ee:	81fb      	strh	r3, [r7, #14]
    Height = EPD_2IN9B_V3_HEIGHT;
 80007f0:	f44f 7394 	mov.w	r3, #296	; 0x128
 80007f4:	81bb      	strh	r3, [r7, #12]

	//send black data
    EPD_2IN9B_V3_SendCommand(0x10);
 80007f6:	2010      	movs	r0, #16
 80007f8:	f7ff ff20 	bl	800063c <EPD_2IN9B_V3_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80007fc:	2300      	movs	r3, #0
 80007fe:	82fb      	strh	r3, [r7, #22]
 8000800:	e019      	b.n	8000836 <EPD_2IN9B_V3_Display+0x54>
        for (UWORD i = 0; i < Width; i++) {
 8000802:	2300      	movs	r3, #0
 8000804:	82bb      	strh	r3, [r7, #20]
 8000806:	e00f      	b.n	8000828 <EPD_2IN9B_V3_Display+0x46>
            EPD_2IN9B_V3_SendData(blackimage[i + j * Width]);
 8000808:	8aba      	ldrh	r2, [r7, #20]
 800080a:	8afb      	ldrh	r3, [r7, #22]
 800080c:	89f9      	ldrh	r1, [r7, #14]
 800080e:	fb01 f303 	mul.w	r3, r1, r3
 8000812:	4413      	add	r3, r2
 8000814:	461a      	mov	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff2b 	bl	8000678 <EPD_2IN9B_V3_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8000822:	8abb      	ldrh	r3, [r7, #20]
 8000824:	3301      	adds	r3, #1
 8000826:	82bb      	strh	r3, [r7, #20]
 8000828:	8aba      	ldrh	r2, [r7, #20]
 800082a:	89fb      	ldrh	r3, [r7, #14]
 800082c:	429a      	cmp	r2, r3
 800082e:	d3eb      	bcc.n	8000808 <EPD_2IN9B_V3_Display+0x26>
    for (UWORD j = 0; j < Height; j++) {
 8000830:	8afb      	ldrh	r3, [r7, #22]
 8000832:	3301      	adds	r3, #1
 8000834:	82fb      	strh	r3, [r7, #22]
 8000836:	8afa      	ldrh	r2, [r7, #22]
 8000838:	89bb      	ldrh	r3, [r7, #12]
 800083a:	429a      	cmp	r2, r3
 800083c:	d3e1      	bcc.n	8000802 <EPD_2IN9B_V3_Display+0x20>
        }
    }
    EPD_2IN9B_V3_SendCommand(0x92);
 800083e:	2092      	movs	r0, #146	; 0x92
 8000840:	f7ff fefc 	bl	800063c <EPD_2IN9B_V3_SendCommand>
    
	//send red data
    EPD_2IN9B_V3_SendCommand(0x13);
 8000844:	2013      	movs	r0, #19
 8000846:	f7ff fef9 	bl	800063c <EPD_2IN9B_V3_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 800084a:	2300      	movs	r3, #0
 800084c:	827b      	strh	r3, [r7, #18]
 800084e:	e019      	b.n	8000884 <EPD_2IN9B_V3_Display+0xa2>
        for (UWORD i = 0; i < Width; i++) {
 8000850:	2300      	movs	r3, #0
 8000852:	823b      	strh	r3, [r7, #16]
 8000854:	e00f      	b.n	8000876 <EPD_2IN9B_V3_Display+0x94>
            EPD_2IN9B_V3_SendData(ryimage[i + j * Width]);
 8000856:	8a3a      	ldrh	r2, [r7, #16]
 8000858:	8a7b      	ldrh	r3, [r7, #18]
 800085a:	89f9      	ldrh	r1, [r7, #14]
 800085c:	fb01 f303 	mul.w	r3, r1, r3
 8000860:	4413      	add	r3, r2
 8000862:	461a      	mov	r2, r3
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	4413      	add	r3, r2
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff04 	bl	8000678 <EPD_2IN9B_V3_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8000870:	8a3b      	ldrh	r3, [r7, #16]
 8000872:	3301      	adds	r3, #1
 8000874:	823b      	strh	r3, [r7, #16]
 8000876:	8a3a      	ldrh	r2, [r7, #16]
 8000878:	89fb      	ldrh	r3, [r7, #14]
 800087a:	429a      	cmp	r2, r3
 800087c:	d3eb      	bcc.n	8000856 <EPD_2IN9B_V3_Display+0x74>
    for (UWORD j = 0; j < Height; j++) {
 800087e:	8a7b      	ldrh	r3, [r7, #18]
 8000880:	3301      	adds	r3, #1
 8000882:	827b      	strh	r3, [r7, #18]
 8000884:	8a7a      	ldrh	r2, [r7, #18]
 8000886:	89bb      	ldrh	r3, [r7, #12]
 8000888:	429a      	cmp	r2, r3
 800088a:	d3e1      	bcc.n	8000850 <EPD_2IN9B_V3_Display+0x6e>
        }
    }
    EPD_2IN9B_V3_SendCommand(0x92);
 800088c:	2092      	movs	r0, #146	; 0x92
 800088e:	f7ff fed5 	bl	800063c <EPD_2IN9B_V3_SendCommand>

    EPD_2IN9B_V3_SendCommand(0x12);
 8000892:	2012      	movs	r0, #18
 8000894:	f7ff fed2 	bl	800063c <EPD_2IN9B_V3_SendCommand>
    EPD_2IN9B_V3_ReadBusy();
 8000898:	f7ff ff0c 	bl	80006b4 <EPD_2IN9B_V3_ReadBusy>
}
 800089c:	bf00      	nop
 800089e:	3718      	adds	r7, #24
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <EPD_2IN9B_V3_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_2IN9B_V3_Sleep(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
    EPD_2IN9B_V3_SendCommand(0x02); // POWER_OFF
 80008a8:	2002      	movs	r0, #2
 80008aa:	f7ff fec7 	bl	800063c <EPD_2IN9B_V3_SendCommand>
    EPD_2IN9B_V3_ReadBusy();
 80008ae:	f7ff ff01 	bl	80006b4 <EPD_2IN9B_V3_ReadBusy>
    EPD_2IN9B_V3_SendCommand(0x07); // DEEP_SLEEP
 80008b2:	2007      	movs	r0, #7
 80008b4:	f7ff fec2 	bl	800063c <EPD_2IN9B_V3_SendCommand>
    EPD_2IN9B_V3_SendData(0xA5); // check code
 80008b8:	20a5      	movs	r0, #165	; 0xa5
 80008ba:	f7ff fedd 	bl	8000678 <EPD_2IN9B_V3_SendData>
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <EPD_test>:
******************************************************************************/
#include "EPD_Test.h"
#include "EPD_2IN9B_V3.h"

int EPD_test(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af04      	add	r7, sp, #16
    printf("EPD_2IN9B_V3_test Demo\r\n");
 80008ca:	48a6      	ldr	r0, [pc, #664]	; (8000b64 <EPD_test+0x2a0>)
 80008cc:	f00d f848 	bl	800d960 <puts>
    DEV_Module_Init();
 80008d0:	f7ff fe6a 	bl	80005a8 <DEV_Module_Init>

    printf("e-Paper Init and Clear...\r\n");
 80008d4:	48a4      	ldr	r0, [pc, #656]	; (8000b68 <EPD_test+0x2a4>)
 80008d6:	f00d f843 	bl	800d960 <puts>
    EPD_2IN9B_V3_Init();
 80008da:	f7ff ff17 	bl	800070c <EPD_2IN9B_V3_Init>
    EPD_2IN9B_V3_Clear();
 80008de:	f7ff ff3b 	bl	8000758 <EPD_2IN9B_V3_Clear>
    DEV_Delay_ms(500);
 80008e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008e6:	f001 ffa3 	bl	8002830 <HAL_Delay>

    //Create a new image cache named IMAGE_BW and fill it with white
    UBYTE *BlackImage, *RYImage; // Red or Yellow
    UWORD Imagesize = ((EPD_2IN9B_V3_WIDTH % 8 == 0)? (EPD_2IN9B_V3_WIDTH / 8 ): (EPD_2IN9B_V3_WIDTH / 8 + 1)) * EPD_2IN9B_V3_HEIGHT;
 80008ea:	f44f 5394 	mov.w	r3, #4736	; 0x1280
 80008ee:	81fb      	strh	r3, [r7, #14]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 80008f0:	89fb      	ldrh	r3, [r7, #14]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f00c fea8 	bl	800d648 <malloc>
 80008f8:	4603      	mov	r3, r0
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d105      	bne.n	800090e <EPD_test+0x4a>
        printf("Failed to apply for black memory...\r\n");
 8000902:	489a      	ldr	r0, [pc, #616]	; (8000b6c <EPD_test+0x2a8>)
 8000904:	f00d f82c 	bl	800d960 <puts>
        return -1;
 8000908:	f04f 33ff 	mov.w	r3, #4294967295
 800090c:	e125      	b.n	8000b5a <EPD_test+0x296>
    }
    if((RYImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 800090e:	89fb      	ldrh	r3, [r7, #14]
 8000910:	4618      	mov	r0, r3
 8000912:	f00c fe99 	bl	800d648 <malloc>
 8000916:	4603      	mov	r3, r0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d105      	bne.n	800092c <EPD_test+0x68>
        printf("Failed to apply for red memory...\r\n");
 8000920:	4893      	ldr	r0, [pc, #588]	; (8000b70 <EPD_test+0x2ac>)
 8000922:	f00d f81d 	bl	800d960 <puts>
        return -1;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
 800092a:	e116      	b.n	8000b5a <EPD_test+0x296>
    }
    printf("NewImage:BlackImage and RYImage\r\n");
 800092c:	4891      	ldr	r0, [pc, #580]	; (8000b74 <EPD_test+0x2b0>)
 800092e:	f00d f817 	bl	800d960 <puts>
    Paint_NewImage(BlackImage, EPD_2IN9B_V3_WIDTH, EPD_2IN9B_V3_HEIGHT, 270, WHITE);
 8000932:	23ff      	movs	r3, #255	; 0xff
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800093a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800093e:	2180      	movs	r1, #128	; 0x80
 8000940:	68b8      	ldr	r0, [r7, #8]
 8000942:	f000 f93b 	bl	8000bbc <Paint_NewImage>
    Paint_NewImage(RYImage, EPD_2IN9B_V3_WIDTH, EPD_2IN9B_V3_HEIGHT, 270, WHITE);
 8000946:	23ff      	movs	r3, #255	; 0xff
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800094e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8000952:	2180      	movs	r1, #128	; 0x80
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f000 f931 	bl	8000bbc <Paint_NewImage>

    //Select Image
    Paint_SelectImage(BlackImage);
 800095a:	68b8      	ldr	r0, [r7, #8]
 800095c:	f000 f984 	bl	8000c68 <Paint_SelectImage>
    Paint_Clear(WHITE);
 8000960:	20ff      	movs	r0, #255	; 0xff
 8000962:	f000 fadd 	bl	8000f20 <Paint_Clear>
    Paint_SelectImage(RYImage);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 f97e 	bl	8000c68 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800096c:	20ff      	movs	r0, #255	; 0xff
 800096e:	f000 fad7 	bl	8000f20 <Paint_Clear>

#if 1   // show image for array    
    printf("show image for array\r\n");
 8000972:	4881      	ldr	r0, [pc, #516]	; (8000b78 <EPD_test+0x2b4>)
 8000974:	f00c fff4 	bl	800d960 <puts>
    EPD_2IN9B_V3_Display(gImage_2in9bc_b, gImage_2in9bc_ry);
 8000978:	4980      	ldr	r1, [pc, #512]	; (8000b7c <EPD_test+0x2b8>)
 800097a:	4881      	ldr	r0, [pc, #516]	; (8000b80 <EPD_test+0x2bc>)
 800097c:	f7ff ff31 	bl	80007e2 <EPD_2IN9B_V3_Display>
    DEV_Delay_ms(5000);
 8000980:	f241 3088 	movw	r0, #5000	; 0x1388
 8000984:	f001 ff54 	bl	8002830 <HAL_Delay>
#endif

#if 1   // Drawing on the image
    /*Horizontal screen*/
    //1.Draw black image
    Paint_SelectImage(BlackImage);
 8000988:	68b8      	ldr	r0, [r7, #8]
 800098a:	f000 f96d 	bl	8000c68 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800098e:	20ff      	movs	r0, #255	; 0xff
 8000990:	f000 fac6 	bl	8000f20 <Paint_Clear>
    Paint_DrawPoint(10, 80, BLACK, DOT_PIXEL_1X1, DOT_STYLE_DFT);
 8000994:	2301      	movs	r3, #1
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	2301      	movs	r3, #1
 800099a:	2200      	movs	r2, #0
 800099c:	2150      	movs	r1, #80	; 0x50
 800099e:	200a      	movs	r0, #10
 80009a0:	f000 fb5e 	bl	8001060 <Paint_DrawPoint>
    Paint_DrawPoint(10, 90, BLACK, DOT_PIXEL_2X2, DOT_STYLE_DFT);
 80009a4:	2301      	movs	r3, #1
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	2302      	movs	r3, #2
 80009aa:	2200      	movs	r2, #0
 80009ac:	215a      	movs	r1, #90	; 0x5a
 80009ae:	200a      	movs	r0, #10
 80009b0:	f000 fb56 	bl	8001060 <Paint_DrawPoint>
    Paint_DrawPoint(10, 100, BLACK, DOT_PIXEL_3X3, DOT_STYLE_DFT);
 80009b4:	2301      	movs	r3, #1
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	2303      	movs	r3, #3
 80009ba:	2200      	movs	r2, #0
 80009bc:	2164      	movs	r1, #100	; 0x64
 80009be:	200a      	movs	r0, #10
 80009c0:	f000 fb4e 	bl	8001060 <Paint_DrawPoint>
    Paint_DrawPoint(10, 110, BLACK, DOT_PIXEL_3X3, DOT_STYLE_DFT);
 80009c4:	2301      	movs	r3, #1
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	2303      	movs	r3, #3
 80009ca:	2200      	movs	r2, #0
 80009cc:	216e      	movs	r1, #110	; 0x6e
 80009ce:	200a      	movs	r0, #10
 80009d0:	f000 fb46 	bl	8001060 <Paint_DrawPoint>
    Paint_DrawLine(20, 70, 70, 120, BLACK, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 80009d4:	2300      	movs	r3, #0
 80009d6:	9302      	str	r3, [sp, #8]
 80009d8:	2301      	movs	r3, #1
 80009da:	9301      	str	r3, [sp, #4]
 80009dc:	2300      	movs	r3, #0
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	2378      	movs	r3, #120	; 0x78
 80009e2:	2246      	movs	r2, #70	; 0x46
 80009e4:	2146      	movs	r1, #70	; 0x46
 80009e6:	2014      	movs	r0, #20
 80009e8:	f000 fbe6 	bl	80011b8 <Paint_DrawLine>
    Paint_DrawLine(70, 70, 20, 120, BLACK, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 80009ec:	2300      	movs	r3, #0
 80009ee:	9302      	str	r3, [sp, #8]
 80009f0:	2301      	movs	r3, #1
 80009f2:	9301      	str	r3, [sp, #4]
 80009f4:	2300      	movs	r3, #0
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	2378      	movs	r3, #120	; 0x78
 80009fa:	2214      	movs	r2, #20
 80009fc:	2146      	movs	r1, #70	; 0x46
 80009fe:	2046      	movs	r0, #70	; 0x46
 8000a00:	f000 fbda 	bl	80011b8 <Paint_DrawLine>
    Paint_DrawRectangle(20, 70, 70, 120, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8000a04:	2300      	movs	r3, #0
 8000a06:	9302      	str	r3, [sp, #8]
 8000a08:	2301      	movs	r3, #1
 8000a0a:	9301      	str	r3, [sp, #4]
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2378      	movs	r3, #120	; 0x78
 8000a12:	2246      	movs	r2, #70	; 0x46
 8000a14:	2146      	movs	r1, #70	; 0x46
 8000a16:	2014      	movs	r0, #20
 8000a18:	f000 fc7a 	bl	8001310 <Paint_DrawRectangle>
    Paint_DrawRectangle(80, 70, 130, 120, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	9302      	str	r3, [sp, #8]
 8000a20:	2301      	movs	r3, #1
 8000a22:	9301      	str	r3, [sp, #4]
 8000a24:	2300      	movs	r3, #0
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2378      	movs	r3, #120	; 0x78
 8000a2a:	2282      	movs	r2, #130	; 0x82
 8000a2c:	2146      	movs	r1, #70	; 0x46
 8000a2e:	2050      	movs	r0, #80	; 0x50
 8000a30:	f000 fc6e 	bl	8001310 <Paint_DrawRectangle>
    Paint_DrawString_EN(10, 0, "ebat", &Font16, BLACK, WHITE);
 8000a34:	23ff      	movs	r3, #255	; 0xff
 8000a36:	9301      	str	r3, [sp, #4]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	4b51      	ldr	r3, [pc, #324]	; (8000b84 <EPD_test+0x2c0>)
 8000a3e:	4a52      	ldr	r2, [pc, #328]	; (8000b88 <EPD_test+0x2c4>)
 8000a40:	2100      	movs	r1, #0
 8000a42:	200a      	movs	r0, #10
 8000a44:	f000 ff1c 	bl	8001880 <Paint_DrawString_EN>
    Paint_DrawString_CN(130, 20, "suka", &Font24CN, WHITE, BLACK);
 8000a48:	2300      	movs	r3, #0
 8000a4a:	9301      	str	r3, [sp, #4]
 8000a4c:	23ff      	movs	r3, #255	; 0xff
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	4b4e      	ldr	r3, [pc, #312]	; (8000b8c <EPD_test+0x2c8>)
 8000a52:	4a4f      	ldr	r2, [pc, #316]	; (8000b90 <EPD_test+0x2cc>)
 8000a54:	2114      	movs	r1, #20
 8000a56:	2082      	movs	r0, #130	; 0x82
 8000a58:	f000 ff66 	bl	8001928 <Paint_DrawString_CN>
    Paint_DrawNum(10, 50, 987654321, &Font16, WHITE, BLACK);
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	9301      	str	r3, [sp, #4]
 8000a60:	23ff      	movs	r3, #255	; 0xff
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	4b47      	ldr	r3, [pc, #284]	; (8000b84 <EPD_test+0x2c0>)
 8000a66:	4a4b      	ldr	r2, [pc, #300]	; (8000b94 <EPD_test+0x2d0>)
 8000a68:	2132      	movs	r1, #50	; 0x32
 8000a6a:	200a      	movs	r0, #10
 8000a6c:	f001 f8f4 	bl	8001c58 <Paint_DrawNum>

    //2.Draw red image
    Paint_SelectImage(RYImage);
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f000 f8f9 	bl	8000c68 <Paint_SelectImage>
    Paint_Clear(WHITE);
 8000a76:	20ff      	movs	r0, #255	; 0xff
 8000a78:	f000 fa52 	bl	8000f20 <Paint_Clear>
    Paint_DrawCircle(160, 95, 20, BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	9301      	str	r3, [sp, #4]
 8000a80:	2301      	movs	r3, #1
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2300      	movs	r3, #0
 8000a86:	2214      	movs	r2, #20
 8000a88:	215f      	movs	r1, #95	; 0x5f
 8000a8a:	20a0      	movs	r0, #160	; 0xa0
 8000a8c:	f000 fcc4 	bl	8001418 <Paint_DrawCircle>
    Paint_DrawCircle(210, 95, 20, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8000a90:	2301      	movs	r3, #1
 8000a92:	9301      	str	r3, [sp, #4]
 8000a94:	2301      	movs	r3, #1
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	2300      	movs	r3, #0
 8000a9a:	2214      	movs	r2, #20
 8000a9c:	215f      	movs	r1, #95	; 0x5f
 8000a9e:	20d2      	movs	r0, #210	; 0xd2
 8000aa0:	f000 fcba 	bl	8001418 <Paint_DrawCircle>
    Paint_DrawLine(85, 95, 125, 95, BLACK, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	9302      	str	r3, [sp, #8]
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	9301      	str	r3, [sp, #4]
 8000aac:	2300      	movs	r3, #0
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	235f      	movs	r3, #95	; 0x5f
 8000ab2:	227d      	movs	r2, #125	; 0x7d
 8000ab4:	215f      	movs	r1, #95	; 0x5f
 8000ab6:	2055      	movs	r0, #85	; 0x55
 8000ab8:	f000 fb7e 	bl	80011b8 <Paint_DrawLine>
    Paint_DrawLine(105, 75, 105, 115, BLACK, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 8000abc:	2301      	movs	r3, #1
 8000abe:	9302      	str	r3, [sp, #8]
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	9301      	str	r3, [sp, #4]
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	2373      	movs	r3, #115	; 0x73
 8000aca:	2269      	movs	r2, #105	; 0x69
 8000acc:	214b      	movs	r1, #75	; 0x4b
 8000ace:	2069      	movs	r0, #105	; 0x69
 8000ad0:	f000 fb72 	bl	80011b8 <Paint_DrawLine>
    Paint_DrawString_CN(130, 0,"Da", &Font12CN, BLACK, WHITE);
 8000ad4:	23ff      	movs	r3, #255	; 0xff
 8000ad6:	9301      	str	r3, [sp, #4]
 8000ad8:	2300      	movs	r3, #0
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	4b2e      	ldr	r3, [pc, #184]	; (8000b98 <EPD_test+0x2d4>)
 8000ade:	4a2f      	ldr	r2, [pc, #188]	; (8000b9c <EPD_test+0x2d8>)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2082      	movs	r0, #130	; 0x82
 8000ae4:	f000 ff20 	bl	8001928 <Paint_DrawString_CN>
    Paint_DrawString_EN(10, 20, "nihao", &Font12, WHITE, BLACK);
 8000ae8:	2300      	movs	r3, #0
 8000aea:	9301      	str	r3, [sp, #4]
 8000aec:	23ff      	movs	r3, #255	; 0xff
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	4b2b      	ldr	r3, [pc, #172]	; (8000ba0 <EPD_test+0x2dc>)
 8000af2:	4a2c      	ldr	r2, [pc, #176]	; (8000ba4 <EPD_test+0x2e0>)
 8000af4:	2114      	movs	r1, #20
 8000af6:	200a      	movs	r0, #10
 8000af8:	f000 fec2 	bl	8001880 <Paint_DrawString_EN>
    Paint_DrawNum(10, 33, 123456789, &Font12, BLACK, WHITE);
 8000afc:	23ff      	movs	r3, #255	; 0xff
 8000afe:	9301      	str	r3, [sp, #4]
 8000b00:	2300      	movs	r3, #0
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	4b26      	ldr	r3, [pc, #152]	; (8000ba0 <EPD_test+0x2dc>)
 8000b06:	4a28      	ldr	r2, [pc, #160]	; (8000ba8 <EPD_test+0x2e4>)
 8000b08:	2121      	movs	r1, #33	; 0x21
 8000b0a:	200a      	movs	r0, #10
 8000b0c:	f001 f8a4 	bl	8001c58 <Paint_DrawNum>

    printf("EPD_Display\r\n");
 8000b10:	4826      	ldr	r0, [pc, #152]	; (8000bac <EPD_test+0x2e8>)
 8000b12:	f00c ff25 	bl	800d960 <puts>
    EPD_2IN9B_V3_Display(BlackImage, RYImage);
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	68b8      	ldr	r0, [r7, #8]
 8000b1a:	f7ff fe62 	bl	80007e2 <EPD_2IN9B_V3_Display>
    DEV_Delay_ms(5000);
 8000b1e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b22:	f001 fe85 	bl	8002830 <HAL_Delay>
#endif
	// clear EPD
    printf("Clear...\r\n");
 8000b26:	4822      	ldr	r0, [pc, #136]	; (8000bb0 <EPD_test+0x2ec>)
 8000b28:	f00c ff1a 	bl	800d960 <puts>
    EPD_2IN9B_V3_Clear();
 8000b2c:	f7ff fe14 	bl	8000758 <EPD_2IN9B_V3_Clear>
	//deep sleep mode, free heap ram
    printf("Goto Sleep...\r\n");
 8000b30:	4820      	ldr	r0, [pc, #128]	; (8000bb4 <EPD_test+0x2f0>)
 8000b32:	f00c ff15 	bl	800d960 <puts>
    EPD_2IN9B_V3_Sleep();
 8000b36:	f7ff feb5 	bl	80008a4 <EPD_2IN9B_V3_Sleep>
    free(BlackImage);
 8000b3a:	68b8      	ldr	r0, [r7, #8]
 8000b3c:	f00c fd8c 	bl	800d658 <free>
    free(RYImage);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f00c fd89 	bl	800d658 <free>
    BlackImage = NULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
    RYImage = NULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]

    // close 5V
    printf("close 5V, Module enters 0 power consumption ...\r\n");
 8000b4e:	481a      	ldr	r0, [pc, #104]	; (8000bb8 <EPD_test+0x2f4>)
 8000b50:	f00c ff06 	bl	800d960 <puts>
    DEV_Module_Exit();
 8000b54:	f7ff fd3e 	bl	80005d4 <DEV_Module_Exit>
    
    return 0;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	0800e5d0 	.word	0x0800e5d0
 8000b68:	0800e5e8 	.word	0x0800e5e8
 8000b6c:	0800e604 	.word	0x0800e604
 8000b70:	0800e62c 	.word	0x0800e62c
 8000b74:	0800e650 	.word	0x0800e650
 8000b78:	0800e674 	.word	0x0800e674
 8000b7c:	0800fd4c 	.word	0x0800fd4c
 8000b80:	0800eacc 	.word	0x0800eacc
 8000b84:	20000014 	.word	0x20000014
 8000b88:	0800e68c 	.word	0x0800e68c
 8000b8c:	2000001c 	.word	0x2000001c
 8000b90:	0800e694 	.word	0x0800e694
 8000b94:	3ade68b1 	.word	0x3ade68b1
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	0800e69c 	.word	0x0800e69c
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	0800e6a0 	.word	0x0800e6a0
 8000ba8:	075bcd15 	.word	0x075bcd15
 8000bac:	0800e6a8 	.word	0x0800e6a8
 8000bb0:	0800e6b8 	.word	0x0800e6b8
 8000bb4:	0800e6c4 	.word	0x0800e6c4
 8000bb8:	0800e6d4 	.word	0x0800e6d4

08000bbc <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	4608      	mov	r0, r1
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4603      	mov	r3, r0
 8000bcc:	817b      	strh	r3, [r7, #10]
 8000bce:	460b      	mov	r3, r1
 8000bd0:	813b      	strh	r3, [r7, #8]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 8000bd6:	4b23      	ldr	r3, [pc, #140]	; (8000c64 <Paint_NewImage+0xa8>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8000bdc:	4a21      	ldr	r2, [pc, #132]	; (8000c64 <Paint_NewImage+0xa8>)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 8000be2:	4a20      	ldr	r2, [pc, #128]	; (8000c64 <Paint_NewImage+0xa8>)
 8000be4:	897b      	ldrh	r3, [r7, #10]
 8000be6:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000be8:	4a1e      	ldr	r2, [pc, #120]	; (8000c64 <Paint_NewImage+0xa8>)
 8000bea:	893b      	ldrh	r3, [r7, #8]
 8000bec:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8000bee:	4a1d      	ldr	r2, [pc, #116]	; (8000c64 <Paint_NewImage+0xa8>)
 8000bf0:	8b3b      	ldrh	r3, [r7, #24]
 8000bf2:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <Paint_NewImage+0xa8>)
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8000bfa:	897b      	ldrh	r3, [r7, #10]
 8000bfc:	f003 0307 	and.w	r3, r3, #7
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d103      	bne.n	8000c0e <Paint_NewImage+0x52>
 8000c06:	897b      	ldrh	r3, [r7, #10]
 8000c08:	08db      	lsrs	r3, r3, #3
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	e004      	b.n	8000c18 <Paint_NewImage+0x5c>
 8000c0e:	897b      	ldrh	r3, [r7, #10]
 8000c10:	08db      	lsrs	r3, r3, #3
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	3301      	adds	r3, #1
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <Paint_NewImage+0xa8>)
 8000c1a:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8000c1c:	4a11      	ldr	r2, [pc, #68]	; (8000c64 <Paint_NewImage+0xa8>)
 8000c1e:	893b      	ldrh	r3, [r7, #8]
 8000c20:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 8000c22:	4a10      	ldr	r2, [pc, #64]	; (8000c64 <Paint_NewImage+0xa8>)
 8000c24:	88fb      	ldrh	r3, [r7, #6]
 8000c26:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <Paint_NewImage+0xa8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d002      	beq.n	8000c3a <Paint_NewImage+0x7e>
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	2bb4      	cmp	r3, #180	; 0xb4
 8000c38:	d106      	bne.n	8000c48 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <Paint_NewImage+0xa8>)
 8000c3c:	897b      	ldrh	r3, [r7, #10]
 8000c3e:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000c40:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <Paint_NewImage+0xa8>)
 8000c42:	893b      	ldrh	r3, [r7, #8]
 8000c44:	80d3      	strh	r3, [r2, #6]
 8000c46:	e006      	b.n	8000c56 <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <Paint_NewImage+0xa8>)
 8000c4a:	893b      	ldrh	r3, [r7, #8]
 8000c4c:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <Paint_NewImage+0xa8>)
 8000c50:	897b      	ldrh	r3, [r7, #10]
 8000c52:	80d3      	strh	r3, [r2, #6]
    }
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	200001a8 	.word	0x200001a8

08000c68 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 8000c70:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <Paint_SelectImage+0x1c>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	200001a8 	.word	0x200001a8

08000c88 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	80fb      	strh	r3, [r7, #6]
 8000c92:	460b      	mov	r3, r1
 8000c94:	80bb      	strh	r3, [r7, #4]
 8000c96:	4613      	mov	r3, r2
 8000c98:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000c9a:	4b9f      	ldr	r3, [pc, #636]	; (8000f18 <Paint_SetPixel+0x290>)
 8000c9c:	889b      	ldrh	r3, [r3, #4]
 8000c9e:	88fa      	ldrh	r2, [r7, #6]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d804      	bhi.n	8000cae <Paint_SetPixel+0x26>
 8000ca4:	4b9c      	ldr	r3, [pc, #624]	; (8000f18 <Paint_SetPixel+0x290>)
 8000ca6:	88db      	ldrh	r3, [r3, #6]
 8000ca8:	88ba      	ldrh	r2, [r7, #4]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d903      	bls.n	8000cb6 <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 8000cae:	489b      	ldr	r0, [pc, #620]	; (8000f1c <Paint_SetPixel+0x294>)
 8000cb0:	f00c fe56 	bl	800d960 <puts>
        return;
 8000cb4:	e12d      	b.n	8000f12 <Paint_SetPixel+0x28a>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8000cb6:	4b98      	ldr	r3, [pc, #608]	; (8000f18 <Paint_SetPixel+0x290>)
 8000cb8:	89db      	ldrh	r3, [r3, #14]
 8000cba:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000cbe:	d02b      	beq.n	8000d18 <Paint_SetPixel+0x90>
 8000cc0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000cc4:	f300 8122 	bgt.w	8000f0c <Paint_SetPixel+0x284>
 8000cc8:	2bb4      	cmp	r3, #180	; 0xb4
 8000cca:	d016      	beq.n	8000cfa <Paint_SetPixel+0x72>
 8000ccc:	2bb4      	cmp	r3, #180	; 0xb4
 8000cce:	f300 811d 	bgt.w	8000f0c <Paint_SetPixel+0x284>
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d002      	beq.n	8000cdc <Paint_SetPixel+0x54>
 8000cd6:	2b5a      	cmp	r3, #90	; 0x5a
 8000cd8:	d005      	beq.n	8000ce6 <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 8000cda:	e117      	b.n	8000f0c <Paint_SetPixel+0x284>
        X = Xpoint;
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;  
 8000ce0:	88bb      	ldrh	r3, [r7, #4]
 8000ce2:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000ce4:	e022      	b.n	8000d2c <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 8000ce6:	4b8c      	ldr	r3, [pc, #560]	; (8000f18 <Paint_SetPixel+0x290>)
 8000ce8:	891a      	ldrh	r2, [r3, #8]
 8000cea:	88bb      	ldrh	r3, [r7, #4]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000cf8:	e018      	b.n	8000d2c <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 8000cfa:	4b87      	ldr	r3, [pc, #540]	; (8000f18 <Paint_SetPixel+0x290>)
 8000cfc:	891a      	ldrh	r2, [r3, #8]
 8000cfe:	88fb      	ldrh	r3, [r7, #6]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	3b01      	subs	r3, #1
 8000d06:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 8000d08:	4b83      	ldr	r3, [pc, #524]	; (8000f18 <Paint_SetPixel+0x290>)
 8000d0a:	895a      	ldrh	r2, [r3, #10]
 8000d0c:	88bb      	ldrh	r3, [r7, #4]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	3b01      	subs	r3, #1
 8000d14:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000d16:	e009      	b.n	8000d2c <Paint_SetPixel+0xa4>
        X = Ypoint;
 8000d18:	88bb      	ldrh	r3, [r7, #4]
 8000d1a:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 8000d1c:	4b7e      	ldr	r3, [pc, #504]	; (8000f18 <Paint_SetPixel+0x290>)
 8000d1e:	895a      	ldrh	r2, [r3, #10]
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	3b01      	subs	r3, #1
 8000d28:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000d2a:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8000d2c:	4b7a      	ldr	r3, [pc, #488]	; (8000f18 <Paint_SetPixel+0x290>)
 8000d2e:	8a1b      	ldrh	r3, [r3, #16]
 8000d30:	2b03      	cmp	r3, #3
 8000d32:	f200 80ed 	bhi.w	8000f10 <Paint_SetPixel+0x288>
 8000d36:	a201      	add	r2, pc, #4	; (adr r2, 8000d3c <Paint_SetPixel+0xb4>)
 8000d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3c:	08000d8b 	.word	0x08000d8b
 8000d40:	08000d4d 	.word	0x08000d4d
 8000d44:	08000d5d 	.word	0x08000d5d
 8000d48:	08000d6d 	.word	0x08000d6d
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8000d4c:	4b72      	ldr	r3, [pc, #456]	; (8000f18 <Paint_SetPixel+0x290>)
 8000d4e:	891a      	ldrh	r2, [r3, #8]
 8000d50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	3b01      	subs	r3, #1
 8000d58:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 8000d5a:	e017      	b.n	8000d8c <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8000d5c:	4b6e      	ldr	r3, [pc, #440]	; (8000f18 <Paint_SetPixel+0x290>)
 8000d5e:	895a      	ldrh	r2, [r3, #10]
 8000d60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	3b01      	subs	r3, #1
 8000d68:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000d6a:	e00f      	b.n	8000d8c <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8000d6c:	4b6a      	ldr	r3, [pc, #424]	; (8000f18 <Paint_SetPixel+0x290>)
 8000d6e:	891a      	ldrh	r2, [r3, #8]
 8000d70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	3b01      	subs	r3, #1
 8000d78:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 8000d7a:	4b67      	ldr	r3, [pc, #412]	; (8000f18 <Paint_SetPixel+0x290>)
 8000d7c:	895a      	ldrh	r2, [r3, #10]
 8000d7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	3b01      	subs	r3, #1
 8000d86:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000d88:	e000      	b.n	8000d8c <Paint_SetPixel+0x104>
        break;
 8000d8a:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8000d8c:	4b62      	ldr	r3, [pc, #392]	; (8000f18 <Paint_SetPixel+0x290>)
 8000d8e:	891b      	ldrh	r3, [r3, #8]
 8000d90:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d804      	bhi.n	8000da0 <Paint_SetPixel+0x118>
 8000d96:	4b60      	ldr	r3, [pc, #384]	; (8000f18 <Paint_SetPixel+0x290>)
 8000d98:	895b      	ldrh	r3, [r3, #10]
 8000d9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d903      	bls.n	8000da8 <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 8000da0:	485e      	ldr	r0, [pc, #376]	; (8000f1c <Paint_SetPixel+0x294>)
 8000da2:	f00c fddd 	bl	800d960 <puts>
        return;
 8000da6:	e0b4      	b.n	8000f12 <Paint_SetPixel+0x28a>
    }
    
    if(Paint.Scale == 2){
 8000da8:	4b5b      	ldr	r3, [pc, #364]	; (8000f18 <Paint_SetPixel+0x290>)
 8000daa:	8adb      	ldrh	r3, [r3, #22]
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d139      	bne.n	8000e24 <Paint_SetPixel+0x19c>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8000db0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000db2:	08db      	lsrs	r3, r3, #3
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	4619      	mov	r1, r3
 8000db8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000dba:	4a57      	ldr	r2, [pc, #348]	; (8000f18 <Paint_SetPixel+0x290>)
 8000dbc:	8a52      	ldrh	r2, [r2, #18]
 8000dbe:	fb02 f303 	mul.w	r3, r2, r3
 8000dc2:	440b      	add	r3, r1
 8000dc4:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 8000dc6:	4b54      	ldr	r3, [pc, #336]	; (8000f18 <Paint_SetPixel+0x290>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	4413      	add	r3, r2
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 8000dd2:	887b      	ldrh	r3, [r7, #2]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d113      	bne.n	8000e00 <Paint_SetPixel+0x178>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8000dd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	2280      	movs	r2, #128	; 0x80
 8000de0:	fa42 f303 	asr.w	r3, r2, r3
 8000de4:	b25b      	sxtb	r3, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	b25a      	sxtb	r2, r3
 8000dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dee:	4013      	ands	r3, r2
 8000df0:	b259      	sxtb	r1, r3
 8000df2:	4b49      	ldr	r3, [pc, #292]	; (8000f18 <Paint_SetPixel+0x290>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	4413      	add	r3, r2
 8000dfa:	b2ca      	uxtb	r2, r1
 8000dfc:	701a      	strb	r2, [r3, #0]
 8000dfe:	e088      	b.n	8000f12 <Paint_SetPixel+0x28a>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8000e00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	2280      	movs	r2, #128	; 0x80
 8000e08:	fa42 f303 	asr.w	r3, r2, r3
 8000e0c:	b25a      	sxtb	r2, r3
 8000e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	b259      	sxtb	r1, r3
 8000e16:	4b40      	ldr	r3, [pc, #256]	; (8000f18 <Paint_SetPixel+0x290>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	b2ca      	uxtb	r2, r1
 8000e20:	701a      	strb	r2, [r3, #0]
 8000e22:	e076      	b.n	8000f12 <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 4){
 8000e24:	4b3c      	ldr	r3, [pc, #240]	; (8000f18 <Paint_SetPixel+0x290>)
 8000e26:	8adb      	ldrh	r3, [r3, #22]
 8000e28:	2b04      	cmp	r3, #4
 8000e2a:	d137      	bne.n	8000e9c <Paint_SetPixel+0x214>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8000e2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e2e:	089b      	lsrs	r3, r3, #2
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	4619      	mov	r1, r3
 8000e34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e36:	4a38      	ldr	r2, [pc, #224]	; (8000f18 <Paint_SetPixel+0x290>)
 8000e38:	8a52      	ldrh	r2, [r2, #18]
 8000e3a:	fb02 f303 	mul.w	r3, r2, r3
 8000e3e:	440b      	add	r3, r1
 8000e40:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 8000e42:	887b      	ldrh	r3, [r7, #2]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 8000e4a:	4b33      	ldr	r3, [pc, #204]	; (8000f18 <Paint_SetPixel+0x290>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	4413      	add	r3, r2
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	75fb      	strb	r3, [r7, #23]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8000e56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	22c0      	movs	r2, #192	; 0xc0
 8000e60:	fa42 f303 	asr.w	r3, r2, r3
 8000e64:	b25b      	sxtb	r3, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	b25a      	sxtb	r2, r3
 8000e6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8000e74:	887b      	ldrh	r3, [r7, #2]
 8000e76:	019a      	lsls	r2, r3, #6
 8000e78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa42 f303 	asr.w	r3, r2, r3
 8000e84:	b25a      	sxtb	r2, r3
 8000e86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	b259      	sxtb	r1, r3
 8000e8e:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <Paint_SetPixel+0x290>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	4413      	add	r3, r2
 8000e96:	b2ca      	uxtb	r2, r1
 8000e98:	701a      	strb	r2, [r3, #0]
 8000e9a:	e03a      	b.n	8000f12 <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 7){
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <Paint_SetPixel+0x290>)
 8000e9e:	8adb      	ldrh	r3, [r3, #22]
 8000ea0:	2b07      	cmp	r3, #7
 8000ea2:	d136      	bne.n	8000f12 <Paint_SetPixel+0x28a>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 8000ea4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ea6:	085b      	lsrs	r3, r3, #1
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	4619      	mov	r1, r3
 8000eac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000eae:	4a1a      	ldr	r2, [pc, #104]	; (8000f18 <Paint_SetPixel+0x290>)
 8000eb0:	8a52      	ldrh	r2, [r2, #18]
 8000eb2:	fb02 f303 	mul.w	r3, r2, r3
 8000eb6:	440b      	add	r3, r1
 8000eb8:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <Paint_SetPixel+0x290>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	6a3b      	ldr	r3, [r7, #32]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 8000ec6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	22f0      	movs	r2, #240	; 0xf0
 8000ed0:	fa42 f303 	asr.w	r3, r2, r3
 8000ed4:	b25b      	sxtb	r3, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	b25a      	sxtb	r2, r3
 8000eda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 8000ee4:	887b      	ldrh	r3, [r7, #2]
 8000ee6:	011a      	lsls	r2, r3, #4
 8000ee8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	fa42 f303 	asr.w	r3, r2, r3
 8000ef4:	b25a      	sxtb	r2, r3
 8000ef6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b259      	sxtb	r1, r3
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <Paint_SetPixel+0x290>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	6a3b      	ldr	r3, [r7, #32]
 8000f04:	4413      	add	r3, r2
 8000f06:	b2ca      	uxtb	r2, r1
 8000f08:	701a      	strb	r2, [r3, #0]
 8000f0a:	e002      	b.n	8000f12 <Paint_SetPixel+0x28a>
        return;
 8000f0c:	bf00      	nop
 8000f0e:	e000      	b.n	8000f12 <Paint_SetPixel+0x28a>
        return;
 8000f10:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 8000f12:	3728      	adds	r7, #40	; 0x28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200001a8 	.word	0x200001a8
 8000f1c:	0800e830 	.word	0x0800e830

08000f20 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	; 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2) {
 8000f2a:	4b4c      	ldr	r3, [pc, #304]	; (800105c <Paint_Clear+0x13c>)
 8000f2c:	8adb      	ldrh	r3, [r3, #22]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d125      	bne.n	8000f7e <Paint_Clear+0x5e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000f32:	2300      	movs	r3, #0
 8000f34:	83fb      	strh	r3, [r7, #30]
 8000f36:	e01c      	b.n	8000f72 <Paint_Clear+0x52>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000f38:	2300      	movs	r3, #0
 8000f3a:	83bb      	strh	r3, [r7, #28]
 8000f3c:	e011      	b.n	8000f62 <Paint_Clear+0x42>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8000f3e:	8bba      	ldrh	r2, [r7, #28]
 8000f40:	8bfb      	ldrh	r3, [r7, #30]
 8000f42:	4946      	ldr	r1, [pc, #280]	; (800105c <Paint_Clear+0x13c>)
 8000f44:	8a49      	ldrh	r1, [r1, #18]
 8000f46:	fb01 f303 	mul.w	r3, r1, r3
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8000f4e:	4b43      	ldr	r3, [pc, #268]	; (800105c <Paint_Clear+0x13c>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	4413      	add	r3, r2
 8000f56:	88fa      	ldrh	r2, [r7, #6]
 8000f58:	b2d2      	uxtb	r2, r2
 8000f5a:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000f5c:	8bbb      	ldrh	r3, [r7, #28]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	83bb      	strh	r3, [r7, #28]
 8000f62:	4b3e      	ldr	r3, [pc, #248]	; (800105c <Paint_Clear+0x13c>)
 8000f64:	8a5b      	ldrh	r3, [r3, #18]
 8000f66:	8bba      	ldrh	r2, [r7, #28]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d3e8      	bcc.n	8000f3e <Paint_Clear+0x1e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000f6c:	8bfb      	ldrh	r3, [r7, #30]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	83fb      	strh	r3, [r7, #30]
 8000f72:	4b3a      	ldr	r3, [pc, #232]	; (800105c <Paint_Clear+0x13c>)
 8000f74:	8a9b      	ldrh	r3, [r3, #20]
 8000f76:	8bfa      	ldrh	r2, [r7, #30]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d3dd      	bcc.n	8000f38 <Paint_Clear+0x18>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = (Color<<4)|Color;
			}
		}		
	}
}
 8000f7c:	e068      	b.n	8001050 <Paint_Clear+0x130>
    }else if(Paint.Scale == 4) {
 8000f7e:	4b37      	ldr	r3, [pc, #220]	; (800105c <Paint_Clear+0x13c>)
 8000f80:	8adb      	ldrh	r3, [r3, #22]
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	d135      	bne.n	8000ff2 <Paint_Clear+0xd2>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000f86:	2300      	movs	r3, #0
 8000f88:	837b      	strh	r3, [r7, #26]
 8000f8a:	e02c      	b.n	8000fe6 <Paint_Clear+0xc6>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	833b      	strh	r3, [r7, #24]
 8000f90:	e021      	b.n	8000fd6 <Paint_Clear+0xb6>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8000f92:	8b3a      	ldrh	r2, [r7, #24]
 8000f94:	8b7b      	ldrh	r3, [r7, #26]
 8000f96:	4931      	ldr	r1, [pc, #196]	; (800105c <Paint_Clear+0x13c>)
 8000f98:	8a49      	ldrh	r1, [r1, #18]
 8000f9a:	fb01 f303 	mul.w	r3, r1, r3
 8000f9e:	4413      	add	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	019b      	lsls	r3, r3, #6
 8000fa6:	b25a      	sxtb	r2, r3
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	b25b      	sxtb	r3, r3
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b25a      	sxtb	r2, r3
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	b25b      	sxtb	r3, r3
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b25a      	sxtb	r2, r3
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	b25b      	sxtb	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b259      	sxtb	r1, r3
 8000fc4:	4b25      	ldr	r3, [pc, #148]	; (800105c <Paint_Clear+0x13c>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	b2ca      	uxtb	r2, r1
 8000fce:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8000fd0:	8b3b      	ldrh	r3, [r7, #24]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	833b      	strh	r3, [r7, #24]
 8000fd6:	4b21      	ldr	r3, [pc, #132]	; (800105c <Paint_Clear+0x13c>)
 8000fd8:	8a5b      	ldrh	r3, [r3, #18]
 8000fda:	8b3a      	ldrh	r2, [r7, #24]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d3d8      	bcc.n	8000f92 <Paint_Clear+0x72>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000fe0:	8b7b      	ldrh	r3, [r7, #26]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	837b      	strh	r3, [r7, #26]
 8000fe6:	4b1d      	ldr	r3, [pc, #116]	; (800105c <Paint_Clear+0x13c>)
 8000fe8:	8a9b      	ldrh	r3, [r3, #20]
 8000fea:	8b7a      	ldrh	r2, [r7, #26]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d3cd      	bcc.n	8000f8c <Paint_Clear+0x6c>
}
 8000ff0:	e02e      	b.n	8001050 <Paint_Clear+0x130>
	}else if(Paint.Scale == 7) {
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <Paint_Clear+0x13c>)
 8000ff4:	8adb      	ldrh	r3, [r3, #22]
 8000ff6:	2b07      	cmp	r3, #7
 8000ff8:	d12a      	bne.n	8001050 <Paint_Clear+0x130>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	82fb      	strh	r3, [r7, #22]
 8000ffe:	e022      	b.n	8001046 <Paint_Clear+0x126>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8001000:	2300      	movs	r3, #0
 8001002:	82bb      	strh	r3, [r7, #20]
 8001004:	e017      	b.n	8001036 <Paint_Clear+0x116>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8001006:	8aba      	ldrh	r2, [r7, #20]
 8001008:	8afb      	ldrh	r3, [r7, #22]
 800100a:	4914      	ldr	r1, [pc, #80]	; (800105c <Paint_Clear+0x13c>)
 800100c:	8a49      	ldrh	r1, [r1, #18]
 800100e:	fb01 f303 	mul.w	r3, r1, r3
 8001012:	4413      	add	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
				Paint.Image[Addr] = (Color<<4)|Color;
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	011b      	lsls	r3, r3, #4
 800101a:	b25a      	sxtb	r2, r3
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	b25b      	sxtb	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b259      	sxtb	r1, r3
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <Paint_Clear+0x13c>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4413      	add	r3, r2
 800102c:	b2ca      	uxtb	r2, r1
 800102e:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8001030:	8abb      	ldrh	r3, [r7, #20]
 8001032:	3301      	adds	r3, #1
 8001034:	82bb      	strh	r3, [r7, #20]
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <Paint_Clear+0x13c>)
 8001038:	8a5b      	ldrh	r3, [r3, #18]
 800103a:	8aba      	ldrh	r2, [r7, #20]
 800103c:	429a      	cmp	r2, r3
 800103e:	d3e2      	bcc.n	8001006 <Paint_Clear+0xe6>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001040:	8afb      	ldrh	r3, [r7, #22]
 8001042:	3301      	adds	r3, #1
 8001044:	82fb      	strh	r3, [r7, #22]
 8001046:	4b05      	ldr	r3, [pc, #20]	; (800105c <Paint_Clear+0x13c>)
 8001048:	8a9b      	ldrh	r3, [r3, #20]
 800104a:	8afa      	ldrh	r2, [r7, #22]
 800104c:	429a      	cmp	r2, r3
 800104e:	d3d7      	bcc.n	8001000 <Paint_Clear+0xe0>
}
 8001050:	bf00      	nop
 8001052:	3724      	adds	r7, #36	; 0x24
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	200001a8 	.word	0x200001a8

08001060 <Paint_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	4604      	mov	r4, r0
 8001068:	4608      	mov	r0, r1
 800106a:	4611      	mov	r1, r2
 800106c:	461a      	mov	r2, r3
 800106e:	4623      	mov	r3, r4
 8001070:	80fb      	strh	r3, [r7, #6]
 8001072:	4603      	mov	r3, r0
 8001074:	80bb      	strh	r3, [r7, #4]
 8001076:	460b      	mov	r3, r1
 8001078:	807b      	strh	r3, [r7, #2]
 800107a:	4613      	mov	r3, r2
 800107c:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800107e:	4b4a      	ldr	r3, [pc, #296]	; (80011a8 <Paint_DrawPoint+0x148>)
 8001080:	889b      	ldrh	r3, [r3, #4]
 8001082:	88fa      	ldrh	r2, [r7, #6]
 8001084:	429a      	cmp	r2, r3
 8001086:	d804      	bhi.n	8001092 <Paint_DrawPoint+0x32>
 8001088:	4b47      	ldr	r3, [pc, #284]	; (80011a8 <Paint_DrawPoint+0x148>)
 800108a:	88db      	ldrh	r3, [r3, #6]
 800108c:	88ba      	ldrh	r2, [r7, #4]
 800108e:	429a      	cmp	r2, r3
 8001090:	d911      	bls.n	80010b6 <Paint_DrawPoint+0x56>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 8001092:	4846      	ldr	r0, [pc, #280]	; (80011ac <Paint_DrawPoint+0x14c>)
 8001094:	f00c fc64 	bl	800d960 <puts>
				printf("Xpoint = %d , Paint.Width = %d  \r\n ",Xpoint,Paint.Width);
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	4a43      	ldr	r2, [pc, #268]	; (80011a8 <Paint_DrawPoint+0x148>)
 800109c:	8892      	ldrh	r2, [r2, #4]
 800109e:	4619      	mov	r1, r3
 80010a0:	4843      	ldr	r0, [pc, #268]	; (80011b0 <Paint_DrawPoint+0x150>)
 80010a2:	f00c fbd7 	bl	800d854 <iprintf>
				printf("Ypoint = %d , Paint.Height = %d  \r\n ",Ypoint,Paint.Height);
 80010a6:	88bb      	ldrh	r3, [r7, #4]
 80010a8:	4a3f      	ldr	r2, [pc, #252]	; (80011a8 <Paint_DrawPoint+0x148>)
 80010aa:	88d2      	ldrh	r2, [r2, #6]
 80010ac:	4619      	mov	r1, r3
 80010ae:	4841      	ldr	r0, [pc, #260]	; (80011b4 <Paint_DrawPoint+0x154>)
 80010b0:	f00c fbd0 	bl	800d854 <iprintf>
        return;
 80010b4:	e074      	b.n	80011a0 <Paint_DrawPoint+0x140>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND) {
 80010b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d144      	bne.n	8001148 <Paint_DrawPoint+0xe8>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 80010be:	2300      	movs	r3, #0
 80010c0:	81fb      	strh	r3, [r7, #14]
 80010c2:	e039      	b.n	8001138 <Paint_DrawPoint+0xd8>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80010c4:	2300      	movs	r3, #0
 80010c6:	81bb      	strh	r3, [r7, #12]
 80010c8:	e029      	b.n	800111e <Paint_DrawPoint+0xbe>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 80010ca:	88fa      	ldrh	r2, [r7, #6]
 80010cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010d0:	441a      	add	r2, r3
 80010d2:	787b      	ldrb	r3, [r7, #1]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	db28      	blt.n	800112c <Paint_DrawPoint+0xcc>
 80010da:	88ba      	ldrh	r2, [r7, #4]
 80010dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010e0:	441a      	add	r2, r3
 80010e2:	787b      	ldrb	r3, [r7, #1]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	db20      	blt.n	800112c <Paint_DrawPoint+0xcc>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 80010ea:	89fa      	ldrh	r2, [r7, #14]
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	4413      	add	r3, r2
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	787b      	ldrb	r3, [r7, #1]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	b298      	uxth	r0, r3
 80010fa:	89ba      	ldrh	r2, [r7, #12]
 80010fc:	88bb      	ldrh	r3, [r7, #4]
 80010fe:	4413      	add	r3, r2
 8001100:	b29a      	uxth	r2, r3
 8001102:	787b      	ldrb	r3, [r7, #1]
 8001104:	b29b      	uxth	r3, r3
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	b29b      	uxth	r3, r3
 800110a:	887a      	ldrh	r2, [r7, #2]
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff fdbb 	bl	8000c88 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8001112:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001116:	b29b      	uxth	r3, r3
 8001118:	3301      	adds	r3, #1
 800111a:	b29b      	uxth	r3, r3
 800111c:	81bb      	strh	r3, [r7, #12]
 800111e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001122:	787b      	ldrb	r3, [r7, #1]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	3b01      	subs	r3, #1
 8001128:	429a      	cmp	r2, r3
 800112a:	dbce      	blt.n	80010ca <Paint_DrawPoint+0x6a>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800112c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001130:	b29b      	uxth	r3, r3
 8001132:	3301      	adds	r3, #1
 8001134:	b29b      	uxth	r3, r3
 8001136:	81fb      	strh	r3, [r7, #14]
 8001138:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800113c:	787b      	ldrb	r3, [r7, #1]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	3b01      	subs	r3, #1
 8001142:	429a      	cmp	r2, r3
 8001144:	dbbe      	blt.n	80010c4 <Paint_DrawPoint+0x64>
 8001146:	e02b      	b.n	80011a0 <Paint_DrawPoint+0x140>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8001148:	2300      	movs	r3, #0
 800114a:	81fb      	strh	r3, [r7, #14]
 800114c:	e023      	b.n	8001196 <Paint_DrawPoint+0x136>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800114e:	2300      	movs	r3, #0
 8001150:	81bb      	strh	r3, [r7, #12]
 8001152:	e015      	b.n	8001180 <Paint_DrawPoint+0x120>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8001154:	89fa      	ldrh	r2, [r7, #14]
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	4413      	add	r3, r2
 800115a:	b29b      	uxth	r3, r3
 800115c:	3b01      	subs	r3, #1
 800115e:	b298      	uxth	r0, r3
 8001160:	89ba      	ldrh	r2, [r7, #12]
 8001162:	88bb      	ldrh	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	b29b      	uxth	r3, r3
 8001168:	3b01      	subs	r3, #1
 800116a:	b29b      	uxth	r3, r3
 800116c:	887a      	ldrh	r2, [r7, #2]
 800116e:	4619      	mov	r1, r3
 8001170:	f7ff fd8a 	bl	8000c88 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8001174:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001178:	b29b      	uxth	r3, r3
 800117a:	3301      	adds	r3, #1
 800117c:	b29b      	uxth	r3, r3
 800117e:	81bb      	strh	r3, [r7, #12]
 8001180:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001184:	787b      	ldrb	r3, [r7, #1]
 8001186:	429a      	cmp	r2, r3
 8001188:	dbe4      	blt.n	8001154 <Paint_DrawPoint+0xf4>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800118a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800118e:	b29b      	uxth	r3, r3
 8001190:	3301      	adds	r3, #1
 8001192:	b29b      	uxth	r3, r3
 8001194:	81fb      	strh	r3, [r7, #14]
 8001196:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800119a:	787b      	ldrb	r3, [r7, #1]
 800119c:	429a      	cmp	r2, r3
 800119e:	dbd6      	blt.n	800114e <Paint_DrawPoint+0xee>
            }
        }
    }
}
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd90      	pop	{r4, r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200001a8 	.word	0x200001a8
 80011ac:	0800e858 	.word	0x0800e858
 80011b0:	0800e898 	.word	0x0800e898
 80011b4:	0800e8bc 	.word	0x0800e8bc

080011b8 <Paint_DrawLine>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b08d      	sub	sp, #52	; 0x34
 80011bc:	af02      	add	r7, sp, #8
 80011be:	4604      	mov	r4, r0
 80011c0:	4608      	mov	r0, r1
 80011c2:	4611      	mov	r1, r2
 80011c4:	461a      	mov	r2, r3
 80011c6:	4623      	mov	r3, r4
 80011c8:	80fb      	strh	r3, [r7, #6]
 80011ca:	4603      	mov	r3, r0
 80011cc:	80bb      	strh	r3, [r7, #4]
 80011ce:	460b      	mov	r3, r1
 80011d0:	807b      	strh	r3, [r7, #2]
 80011d2:	4613      	mov	r3, r2
 80011d4:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80011d6:	4b4b      	ldr	r3, [pc, #300]	; (8001304 <Paint_DrawLine+0x14c>)
 80011d8:	889b      	ldrh	r3, [r3, #4]
 80011da:	88fa      	ldrh	r2, [r7, #6]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d80e      	bhi.n	80011fe <Paint_DrawLine+0x46>
 80011e0:	4b48      	ldr	r3, [pc, #288]	; (8001304 <Paint_DrawLine+0x14c>)
 80011e2:	88db      	ldrh	r3, [r3, #6]
 80011e4:	88ba      	ldrh	r2, [r7, #4]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d809      	bhi.n	80011fe <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 80011ea:	4b46      	ldr	r3, [pc, #280]	; (8001304 <Paint_DrawLine+0x14c>)
 80011ec:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d804      	bhi.n	80011fe <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 80011f4:	4b43      	ldr	r3, [pc, #268]	; (8001304 <Paint_DrawLine+0x14c>)
 80011f6:	88db      	ldrh	r3, [r3, #6]
 80011f8:	883a      	ldrh	r2, [r7, #0]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d903      	bls.n	8001206 <Paint_DrawLine+0x4e>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 80011fe:	4842      	ldr	r0, [pc, #264]	; (8001308 <Paint_DrawLine+0x150>)
 8001200:	f00c fbae 	bl	800d960 <puts>
        return;
 8001204:	e07a      	b.n	80012fc <Paint_DrawLine+0x144>
    }

    UWORD Xpoint = Xstart;
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 800120a:	88bb      	ldrh	r3, [r7, #4]
 800120c:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	bfb8      	it	lt
 8001218:	425b      	neglt	r3, r3
 800121a:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800121c:	883a      	ldrh	r2, [r7, #0]
 800121e:	88bb      	ldrh	r3, [r7, #4]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	bfb8      	it	lt
 8001226:	425b      	neglt	r3, r3
 8001228:	425b      	negs	r3, r3
 800122a:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 800122c:	88fa      	ldrh	r2, [r7, #6]
 800122e:	887b      	ldrh	r3, [r7, #2]
 8001230:	429a      	cmp	r2, r3
 8001232:	d201      	bcs.n	8001238 <Paint_DrawLine+0x80>
 8001234:	2301      	movs	r3, #1
 8001236:	e001      	b.n	800123c <Paint_DrawLine+0x84>
 8001238:	f04f 33ff 	mov.w	r3, #4294967295
 800123c:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 800123e:	88ba      	ldrh	r2, [r7, #4]
 8001240:	883b      	ldrh	r3, [r7, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	d201      	bcs.n	800124a <Paint_DrawLine+0x92>
 8001246:	2301      	movs	r3, #1
 8001248:	e001      	b.n	800124e <Paint_DrawLine+0x96>
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	4413      	add	r3, r2
 8001256:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 800125c:	7ffb      	ldrb	r3, [r7, #31]
 800125e:	3301      	adds	r3, #1
 8001260:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 8001262:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001266:	2b01      	cmp	r3, #1
 8001268:	d117      	bne.n	800129a <Paint_DrawLine+0xe2>
 800126a:	7ffa      	ldrb	r2, [r7, #31]
 800126c:	4b27      	ldr	r3, [pc, #156]	; (800130c <Paint_DrawLine+0x154>)
 800126e:	fba3 1302 	umull	r1, r3, r3, r2
 8001272:	0859      	lsrs	r1, r3, #1
 8001274:	460b      	mov	r3, r1
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	440b      	add	r3, r1
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10b      	bne.n	800129a <Paint_DrawLine+0xe2>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 8001282:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001286:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001288:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800128a:	2201      	movs	r2, #1
 800128c:	9200      	str	r2, [sp, #0]
 800128e:	22ff      	movs	r2, #255	; 0xff
 8001290:	f7ff fee6 	bl	8001060 <Paint_DrawPoint>
            Dotted_Len = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	77fb      	strb	r3, [r7, #31]
 8001298:	e008      	b.n	80012ac <Paint_DrawLine+0xf4>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 800129a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800129e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80012a0:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80012a2:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80012a4:	2401      	movs	r4, #1
 80012a6:	9400      	str	r4, [sp, #0]
 80012a8:	f7ff feda 	bl	8001060 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	dc0c      	bgt.n	80012d0 <Paint_DrawLine+0x118>
            if (Xpoint == Xend)
 80012b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d01b      	beq.n	80012f6 <Paint_DrawLine+0x13e>
                break;
            Esp += dy;
 80012be:	6a3a      	ldr	r2, [r7, #32]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	4413      	add	r3, r2
 80012c4:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012cc:	4413      	add	r3, r2
 80012ce:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 80012d0:	6a3b      	ldr	r3, [r7, #32]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	dbc0      	blt.n	800125c <Paint_DrawLine+0xa4>
            if (Ypoint == Yend)
 80012da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80012dc:	883b      	ldrh	r3, [r7, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d00b      	beq.n	80012fa <Paint_DrawLine+0x142>
                break;
            Esp += dx;
 80012e2:	6a3a      	ldr	r2, [r7, #32]
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	4413      	add	r3, r2
 80012e8:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012f0:	4413      	add	r3, r2
 80012f2:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 80012f4:	e7b2      	b.n	800125c <Paint_DrawLine+0xa4>
                break;
 80012f6:	bf00      	nop
 80012f8:	e000      	b.n	80012fc <Paint_DrawLine+0x144>
                break;
 80012fa:	bf00      	nop
        }
    }
}
 80012fc:	372c      	adds	r7, #44	; 0x2c
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd90      	pop	{r4, r7, pc}
 8001302:	bf00      	nop
 8001304:	200001a8 	.word	0x200001a8
 8001308:	0800e8e4 	.word	0x0800e8e4
 800130c:	aaaaaaab 	.word	0xaaaaaaab

08001310 <Paint_DrawRectangle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the rectangle
******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                         UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b089      	sub	sp, #36	; 0x24
 8001314:	af04      	add	r7, sp, #16
 8001316:	4604      	mov	r4, r0
 8001318:	4608      	mov	r0, r1
 800131a:	4611      	mov	r1, r2
 800131c:	461a      	mov	r2, r3
 800131e:	4623      	mov	r3, r4
 8001320:	80fb      	strh	r3, [r7, #6]
 8001322:	4603      	mov	r3, r0
 8001324:	80bb      	strh	r3, [r7, #4]
 8001326:	460b      	mov	r3, r1
 8001328:	807b      	strh	r3, [r7, #2]
 800132a:	4613      	mov	r3, r2
 800132c:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800132e:	4b38      	ldr	r3, [pc, #224]	; (8001410 <Paint_DrawRectangle+0x100>)
 8001330:	889b      	ldrh	r3, [r3, #4]
 8001332:	88fa      	ldrh	r2, [r7, #6]
 8001334:	429a      	cmp	r2, r3
 8001336:	d80e      	bhi.n	8001356 <Paint_DrawRectangle+0x46>
 8001338:	4b35      	ldr	r3, [pc, #212]	; (8001410 <Paint_DrawRectangle+0x100>)
 800133a:	88db      	ldrh	r3, [r3, #6]
 800133c:	88ba      	ldrh	r2, [r7, #4]
 800133e:	429a      	cmp	r2, r3
 8001340:	d809      	bhi.n	8001356 <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 8001342:	4b33      	ldr	r3, [pc, #204]	; (8001410 <Paint_DrawRectangle+0x100>)
 8001344:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8001346:	887a      	ldrh	r2, [r7, #2]
 8001348:	429a      	cmp	r2, r3
 800134a:	d804      	bhi.n	8001356 <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800134c:	4b30      	ldr	r3, [pc, #192]	; (8001410 <Paint_DrawRectangle+0x100>)
 800134e:	88db      	ldrh	r3, [r3, #6]
 8001350:	883a      	ldrh	r2, [r7, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	d903      	bls.n	800135e <Paint_DrawRectangle+0x4e>
        Debug("Input exceeds the normal display range\r\n");
 8001356:	482f      	ldr	r0, [pc, #188]	; (8001414 <Paint_DrawRectangle+0x104>)
 8001358:	f00c fb02 	bl	800d960 <puts>
        return;
 800135c:	e054      	b.n	8001408 <Paint_DrawRectangle+0xf8>
    }

    if (Draw_Fill) {
 800135e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001362:	2b00      	cmp	r3, #0
 8001364:	d018      	beq.n	8001398 <Paint_DrawRectangle+0x88>
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 8001366:	88bb      	ldrh	r3, [r7, #4]
 8001368:	81fb      	strh	r3, [r7, #14]
 800136a:	e010      	b.n	800138e <Paint_DrawRectangle+0x7e>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , Line_width, LINE_STYLE_SOLID);
 800136c:	89fc      	ldrh	r4, [r7, #14]
 800136e:	887a      	ldrh	r2, [r7, #2]
 8001370:	89f9      	ldrh	r1, [r7, #14]
 8001372:	88f8      	ldrh	r0, [r7, #6]
 8001374:	2300      	movs	r3, #0
 8001376:	9302      	str	r3, [sp, #8]
 8001378:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	8c3b      	ldrh	r3, [r7, #32]
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	4623      	mov	r3, r4
 8001384:	f7ff ff18 	bl	80011b8 <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 8001388:	89fb      	ldrh	r3, [r7, #14]
 800138a:	3301      	adds	r3, #1
 800138c:	81fb      	strh	r3, [r7, #14]
 800138e:	89fa      	ldrh	r2, [r7, #14]
 8001390:	883b      	ldrh	r3, [r7, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d3ea      	bcc.n	800136c <Paint_DrawRectangle+0x5c>
 8001396:	e037      	b.n	8001408 <Paint_DrawRectangle+0xf8>
        }
    } else {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 8001398:	88bc      	ldrh	r4, [r7, #4]
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	88b9      	ldrh	r1, [r7, #4]
 800139e:	88f8      	ldrh	r0, [r7, #6]
 80013a0:	2300      	movs	r3, #0
 80013a2:	9302      	str	r3, [sp, #8]
 80013a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	8c3b      	ldrh	r3, [r7, #32]
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	4623      	mov	r3, r4
 80013b0:	f7ff ff02 	bl	80011b8 <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 80013b4:	883c      	ldrh	r4, [r7, #0]
 80013b6:	88fa      	ldrh	r2, [r7, #6]
 80013b8:	88b9      	ldrh	r1, [r7, #4]
 80013ba:	88f8      	ldrh	r0, [r7, #6]
 80013bc:	2300      	movs	r3, #0
 80013be:	9302      	str	r3, [sp, #8]
 80013c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013c4:	9301      	str	r3, [sp, #4]
 80013c6:	8c3b      	ldrh	r3, [r7, #32]
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	4623      	mov	r3, r4
 80013cc:	f7ff fef4 	bl	80011b8 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 80013d0:	88bc      	ldrh	r4, [r7, #4]
 80013d2:	887a      	ldrh	r2, [r7, #2]
 80013d4:	8839      	ldrh	r1, [r7, #0]
 80013d6:	8878      	ldrh	r0, [r7, #2]
 80013d8:	2300      	movs	r3, #0
 80013da:	9302      	str	r3, [sp, #8]
 80013dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	8c3b      	ldrh	r3, [r7, #32]
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	4623      	mov	r3, r4
 80013e8:	f7ff fee6 	bl	80011b8 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 80013ec:	883c      	ldrh	r4, [r7, #0]
 80013ee:	88fa      	ldrh	r2, [r7, #6]
 80013f0:	8839      	ldrh	r1, [r7, #0]
 80013f2:	8878      	ldrh	r0, [r7, #2]
 80013f4:	2300      	movs	r3, #0
 80013f6:	9302      	str	r3, [sp, #8]
 80013f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013fc:	9301      	str	r3, [sp, #4]
 80013fe:	8c3b      	ldrh	r3, [r7, #32]
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	4623      	mov	r3, r4
 8001404:	f7ff fed8 	bl	80011b8 <Paint_DrawLine>
    }
}
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	bd90      	pop	{r4, r7, pc}
 800140e:	bf00      	nop
 8001410:	200001a8 	.word	0x200001a8
 8001414:	0800e924 	.word	0x0800e924

08001418 <Paint_DrawCircle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the Circle
******************************************************************************/
void Paint_DrawCircle(UWORD X_Center, UWORD Y_Center, UWORD Radius,
                      UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b087      	sub	sp, #28
 800141c:	af02      	add	r7, sp, #8
 800141e:	4604      	mov	r4, r0
 8001420:	4608      	mov	r0, r1
 8001422:	4611      	mov	r1, r2
 8001424:	461a      	mov	r2, r3
 8001426:	4623      	mov	r3, r4
 8001428:	80fb      	strh	r3, [r7, #6]
 800142a:	4603      	mov	r3, r0
 800142c:	80bb      	strh	r3, [r7, #4]
 800142e:	460b      	mov	r3, r1
 8001430:	807b      	strh	r3, [r7, #2]
 8001432:	4613      	mov	r3, r2
 8001434:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 8001436:	4b67      	ldr	r3, [pc, #412]	; (80015d4 <Paint_DrawCircle+0x1bc>)
 8001438:	889b      	ldrh	r3, [r3, #4]
 800143a:	88fa      	ldrh	r2, [r7, #6]
 800143c:	429a      	cmp	r2, r3
 800143e:	d804      	bhi.n	800144a <Paint_DrawCircle+0x32>
 8001440:	4b64      	ldr	r3, [pc, #400]	; (80015d4 <Paint_DrawCircle+0x1bc>)
 8001442:	88db      	ldrh	r3, [r3, #6]
 8001444:	88ba      	ldrh	r2, [r7, #4]
 8001446:	429a      	cmp	r2, r3
 8001448:	d303      	bcc.n	8001452 <Paint_DrawCircle+0x3a>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 800144a:	4863      	ldr	r0, [pc, #396]	; (80015d8 <Paint_DrawCircle+0x1c0>)
 800144c:	f00c fa88 	bl	800d960 <puts>
        return;
 8001450:	e16b      	b.n	800172a <Paint_DrawCircle+0x312>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	b29b      	uxth	r3, r3
 8001460:	f1c3 0303 	rsb	r3, r3, #3
 8001464:	b29b      	uxth	r3, r3
 8001466:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 8001468:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800146c:	2b01      	cmp	r3, #1
 800146e:	f040 8155 	bne.w	800171c <Paint_DrawCircle+0x304>
        while (XCurrent <= YCurrent ) { //Realistic circles
 8001472:	e0a6      	b.n	80015c2 <Paint_DrawCircle+0x1aa>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8001474:	89fb      	ldrh	r3, [r7, #14]
 8001476:	813b      	strh	r3, [r7, #8]
 8001478:	e075      	b.n	8001566 <Paint_DrawCircle+0x14e>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 800147a:	89fa      	ldrh	r2, [r7, #14]
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	4413      	add	r3, r2
 8001480:	b298      	uxth	r0, r3
 8001482:	893a      	ldrh	r2, [r7, #8]
 8001484:	88bb      	ldrh	r3, [r7, #4]
 8001486:	4413      	add	r3, r2
 8001488:	b299      	uxth	r1, r3
 800148a:	883a      	ldrh	r2, [r7, #0]
 800148c:	2301      	movs	r3, #1
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2301      	movs	r3, #1
 8001492:	f7ff fde5 	bl	8001060 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 8001496:	89fb      	ldrh	r3, [r7, #14]
 8001498:	88fa      	ldrh	r2, [r7, #6]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	b298      	uxth	r0, r3
 800149e:	893a      	ldrh	r2, [r7, #8]
 80014a0:	88bb      	ldrh	r3, [r7, #4]
 80014a2:	4413      	add	r3, r2
 80014a4:	b299      	uxth	r1, r3
 80014a6:	883a      	ldrh	r2, [r7, #0]
 80014a8:	2301      	movs	r3, #1
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2301      	movs	r3, #1
 80014ae:	f7ff fdd7 	bl	8001060 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 80014b2:	893b      	ldrh	r3, [r7, #8]
 80014b4:	88fa      	ldrh	r2, [r7, #6]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	b298      	uxth	r0, r3
 80014ba:	89fa      	ldrh	r2, [r7, #14]
 80014bc:	88bb      	ldrh	r3, [r7, #4]
 80014be:	4413      	add	r3, r2
 80014c0:	b299      	uxth	r1, r3
 80014c2:	883a      	ldrh	r2, [r7, #0]
 80014c4:	2301      	movs	r3, #1
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2301      	movs	r3, #1
 80014ca:	f7ff fdc9 	bl	8001060 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 80014ce:	893b      	ldrh	r3, [r7, #8]
 80014d0:	88fa      	ldrh	r2, [r7, #6]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	b298      	uxth	r0, r3
 80014d6:	89fb      	ldrh	r3, [r7, #14]
 80014d8:	88ba      	ldrh	r2, [r7, #4]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	b299      	uxth	r1, r3
 80014de:	883a      	ldrh	r2, [r7, #0]
 80014e0:	2301      	movs	r3, #1
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	2301      	movs	r3, #1
 80014e6:	f7ff fdbb 	bl	8001060 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 80014ea:	89fb      	ldrh	r3, [r7, #14]
 80014ec:	88fa      	ldrh	r2, [r7, #6]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	b298      	uxth	r0, r3
 80014f2:	893b      	ldrh	r3, [r7, #8]
 80014f4:	88ba      	ldrh	r2, [r7, #4]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	b299      	uxth	r1, r3
 80014fa:	883a      	ldrh	r2, [r7, #0]
 80014fc:	2301      	movs	r3, #1
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2301      	movs	r3, #1
 8001502:	f7ff fdad 	bl	8001060 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 8001506:	89fa      	ldrh	r2, [r7, #14]
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	4413      	add	r3, r2
 800150c:	b298      	uxth	r0, r3
 800150e:	893b      	ldrh	r3, [r7, #8]
 8001510:	88ba      	ldrh	r2, [r7, #4]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	b299      	uxth	r1, r3
 8001516:	883a      	ldrh	r2, [r7, #0]
 8001518:	2301      	movs	r3, #1
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2301      	movs	r3, #1
 800151e:	f7ff fd9f 	bl	8001060 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 8001522:	893a      	ldrh	r2, [r7, #8]
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	4413      	add	r3, r2
 8001528:	b298      	uxth	r0, r3
 800152a:	89fb      	ldrh	r3, [r7, #14]
 800152c:	88ba      	ldrh	r2, [r7, #4]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	b299      	uxth	r1, r3
 8001532:	883a      	ldrh	r2, [r7, #0]
 8001534:	2301      	movs	r3, #1
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2301      	movs	r3, #1
 800153a:	f7ff fd91 	bl	8001060 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800153e:	893a      	ldrh	r2, [r7, #8]
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	4413      	add	r3, r2
 8001544:	b298      	uxth	r0, r3
 8001546:	89fa      	ldrh	r2, [r7, #14]
 8001548:	88bb      	ldrh	r3, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	b299      	uxth	r1, r3
 800154e:	883a      	ldrh	r2, [r7, #0]
 8001550:	2301      	movs	r3, #1
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2301      	movs	r3, #1
 8001556:	f7ff fd83 	bl	8001060 <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800155a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800155e:	b29b      	uxth	r3, r3
 8001560:	3301      	adds	r3, #1
 8001562:	b29b      	uxth	r3, r3
 8001564:	813b      	strh	r3, [r7, #8]
 8001566:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800156a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800156e:	429a      	cmp	r2, r3
 8001570:	dd83      	ble.n	800147a <Paint_DrawCircle+0x62>
            }
            if (Esp < 0 )
 8001572:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001576:	2b00      	cmp	r3, #0
 8001578:	da09      	bge.n	800158e <Paint_DrawCircle+0x176>
                Esp += 4 * XCurrent + 6;
 800157a:	89fb      	ldrh	r3, [r7, #14]
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	b29a      	uxth	r2, r3
 8001580:	897b      	ldrh	r3, [r7, #10]
 8001582:	4413      	add	r3, r2
 8001584:	b29b      	uxth	r3, r3
 8001586:	3306      	adds	r3, #6
 8001588:	b29b      	uxth	r3, r3
 800158a:	817b      	strh	r3, [r7, #10]
 800158c:	e013      	b.n	80015b6 <Paint_DrawCircle+0x19e>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 800158e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001592:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	b29b      	uxth	r3, r3
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	b29a      	uxth	r2, r3
 800159e:	897b      	ldrh	r3, [r7, #10]
 80015a0:	4413      	add	r3, r2
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	330a      	adds	r3, #10
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 80015aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	3b01      	subs	r3, #1
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 80015b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	3301      	adds	r3, #1
 80015be:	b29b      	uxth	r3, r3
 80015c0:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 80015c2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	f77f af52 	ble.w	8001474 <Paint_DrawCircle+0x5c>
 80015d0:	e0ab      	b.n	800172a <Paint_DrawCircle+0x312>
 80015d2:	bf00      	nop
 80015d4:	200001a8 	.word	0x200001a8
 80015d8:	0800e954 	.word	0x0800e954
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 80015dc:	89fa      	ldrh	r2, [r7, #14]
 80015de:	88fb      	ldrh	r3, [r7, #6]
 80015e0:	4413      	add	r3, r2
 80015e2:	b298      	uxth	r0, r3
 80015e4:	89ba      	ldrh	r2, [r7, #12]
 80015e6:	88bb      	ldrh	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	b299      	uxth	r1, r3
 80015ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015f0:	883a      	ldrh	r2, [r7, #0]
 80015f2:	2401      	movs	r4, #1
 80015f4:	9400      	str	r4, [sp, #0]
 80015f6:	f7ff fd33 	bl	8001060 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 80015fa:	89fb      	ldrh	r3, [r7, #14]
 80015fc:	88fa      	ldrh	r2, [r7, #6]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	b298      	uxth	r0, r3
 8001602:	89ba      	ldrh	r2, [r7, #12]
 8001604:	88bb      	ldrh	r3, [r7, #4]
 8001606:	4413      	add	r3, r2
 8001608:	b299      	uxth	r1, r3
 800160a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800160e:	883a      	ldrh	r2, [r7, #0]
 8001610:	2401      	movs	r4, #1
 8001612:	9400      	str	r4, [sp, #0]
 8001614:	f7ff fd24 	bl	8001060 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 8001618:	89bb      	ldrh	r3, [r7, #12]
 800161a:	88fa      	ldrh	r2, [r7, #6]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	b298      	uxth	r0, r3
 8001620:	89fa      	ldrh	r2, [r7, #14]
 8001622:	88bb      	ldrh	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	b299      	uxth	r1, r3
 8001628:	f897 3020 	ldrb.w	r3, [r7, #32]
 800162c:	883a      	ldrh	r2, [r7, #0]
 800162e:	2401      	movs	r4, #1
 8001630:	9400      	str	r4, [sp, #0]
 8001632:	f7ff fd15 	bl	8001060 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 8001636:	89bb      	ldrh	r3, [r7, #12]
 8001638:	88fa      	ldrh	r2, [r7, #6]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	b298      	uxth	r0, r3
 800163e:	89fb      	ldrh	r3, [r7, #14]
 8001640:	88ba      	ldrh	r2, [r7, #4]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	b299      	uxth	r1, r3
 8001646:	f897 3020 	ldrb.w	r3, [r7, #32]
 800164a:	883a      	ldrh	r2, [r7, #0]
 800164c:	2401      	movs	r4, #1
 800164e:	9400      	str	r4, [sp, #0]
 8001650:	f7ff fd06 	bl	8001060 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 8001654:	89fb      	ldrh	r3, [r7, #14]
 8001656:	88fa      	ldrh	r2, [r7, #6]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	b298      	uxth	r0, r3
 800165c:	89bb      	ldrh	r3, [r7, #12]
 800165e:	88ba      	ldrh	r2, [r7, #4]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	b299      	uxth	r1, r3
 8001664:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001668:	883a      	ldrh	r2, [r7, #0]
 800166a:	2401      	movs	r4, #1
 800166c:	9400      	str	r4, [sp, #0]
 800166e:	f7ff fcf7 	bl	8001060 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 8001672:	89fa      	ldrh	r2, [r7, #14]
 8001674:	88fb      	ldrh	r3, [r7, #6]
 8001676:	4413      	add	r3, r2
 8001678:	b298      	uxth	r0, r3
 800167a:	89bb      	ldrh	r3, [r7, #12]
 800167c:	88ba      	ldrh	r2, [r7, #4]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	b299      	uxth	r1, r3
 8001682:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001686:	883a      	ldrh	r2, [r7, #0]
 8001688:	2401      	movs	r4, #1
 800168a:	9400      	str	r4, [sp, #0]
 800168c:	f7ff fce8 	bl	8001060 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 8001690:	89ba      	ldrh	r2, [r7, #12]
 8001692:	88fb      	ldrh	r3, [r7, #6]
 8001694:	4413      	add	r3, r2
 8001696:	b298      	uxth	r0, r3
 8001698:	89fb      	ldrh	r3, [r7, #14]
 800169a:	88ba      	ldrh	r2, [r7, #4]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	b299      	uxth	r1, r3
 80016a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016a4:	883a      	ldrh	r2, [r7, #0]
 80016a6:	2401      	movs	r4, #1
 80016a8:	9400      	str	r4, [sp, #0]
 80016aa:	f7ff fcd9 	bl	8001060 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 80016ae:	89ba      	ldrh	r2, [r7, #12]
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	4413      	add	r3, r2
 80016b4:	b298      	uxth	r0, r3
 80016b6:	89fa      	ldrh	r2, [r7, #14]
 80016b8:	88bb      	ldrh	r3, [r7, #4]
 80016ba:	4413      	add	r3, r2
 80016bc:	b299      	uxth	r1, r3
 80016be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016c2:	883a      	ldrh	r2, [r7, #0]
 80016c4:	2401      	movs	r4, #1
 80016c6:	9400      	str	r4, [sp, #0]
 80016c8:	f7ff fcca 	bl	8001060 <Paint_DrawPoint>

            if (Esp < 0 )
 80016cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	da09      	bge.n	80016e8 <Paint_DrawCircle+0x2d0>
                Esp += 4 * XCurrent + 6;
 80016d4:	89fb      	ldrh	r3, [r7, #14]
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	b29a      	uxth	r2, r3
 80016da:	897b      	ldrh	r3, [r7, #10]
 80016dc:	4413      	add	r3, r2
 80016de:	b29b      	uxth	r3, r3
 80016e0:	3306      	adds	r3, #6
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	817b      	strh	r3, [r7, #10]
 80016e6:	e013      	b.n	8001710 <Paint_DrawCircle+0x2f8>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 80016e8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80016ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	897b      	ldrh	r3, [r7, #10]
 80016fa:	4413      	add	r3, r2
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	330a      	adds	r3, #10
 8001700:	b29b      	uxth	r3, r3
 8001702:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8001704:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001708:	b29b      	uxth	r3, r3
 800170a:	3b01      	subs	r3, #1
 800170c:	b29b      	uxth	r3, r3
 800170e:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8001710:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001714:	b29b      	uxth	r3, r3
 8001716:	3301      	adds	r3, #1
 8001718:	b29b      	uxth	r3, r3
 800171a:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 800171c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001720:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001724:	429a      	cmp	r2, r3
 8001726:	f77f af59 	ble.w	80015dc <Paint_DrawCircle+0x1c4>
        }
    }
}
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	bd90      	pop	{r4, r7, pc}

08001730 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	4603      	mov	r3, r0
 800173a:	81fb      	strh	r3, [r7, #14]
 800173c:	460b      	mov	r3, r1
 800173e:	81bb      	strh	r3, [r7, #12]
 8001740:	4613      	mov	r3, r2
 8001742:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001744:	4b4c      	ldr	r3, [pc, #304]	; (8001878 <Paint_DrawChar+0x148>)
 8001746:	889b      	ldrh	r3, [r3, #4]
 8001748:	89fa      	ldrh	r2, [r7, #14]
 800174a:	429a      	cmp	r2, r3
 800174c:	d804      	bhi.n	8001758 <Paint_DrawChar+0x28>
 800174e:	4b4a      	ldr	r3, [pc, #296]	; (8001878 <Paint_DrawChar+0x148>)
 8001750:	88db      	ldrh	r3, [r3, #6]
 8001752:	89ba      	ldrh	r2, [r7, #12]
 8001754:	429a      	cmp	r2, r3
 8001756:	d903      	bls.n	8001760 <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8001758:	4848      	ldr	r0, [pc, #288]	; (800187c <Paint_DrawChar+0x14c>)
 800175a:	f00c f901 	bl	800d960 <puts>
        return;
 800175e:	e087      	b.n	8001870 <Paint_DrawChar+0x140>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8001760:	7afb      	ldrb	r3, [r7, #11]
 8001762:	3b20      	subs	r3, #32
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	88d2      	ldrh	r2, [r2, #6]
 8001768:	fb02 f303 	mul.w	r3, r2, r3
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	8892      	ldrh	r2, [r2, #4]
 8001770:	08d2      	lsrs	r2, r2, #3
 8001772:	b292      	uxth	r2, r2
 8001774:	4611      	mov	r1, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	8892      	ldrh	r2, [r2, #4]
 800177a:	f002 0207 	and.w	r2, r2, #7
 800177e:	b292      	uxth	r2, r2
 8001780:	2a00      	cmp	r2, #0
 8001782:	bf14      	ite	ne
 8001784:	2201      	movne	r2, #1
 8001786:	2200      	moveq	r2, #0
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	440a      	add	r2, r1
 800178c:	fb02 f303 	mul.w	r3, r2, r3
 8001790:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	4413      	add	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 800179c:	2300      	movs	r3, #0
 800179e:	83fb      	strh	r3, [r7, #30]
 80017a0:	e061      	b.n	8001866 <Paint_DrawChar+0x136>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80017a2:	2300      	movs	r3, #0
 80017a4:	83bb      	strh	r3, [r7, #28]
 80017a6:	e04c      	b.n	8001842 <Paint_DrawChar+0x112>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80017a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80017aa:	2bff      	cmp	r3, #255	; 0xff
 80017ac:	d118      	bne.n	80017e0 <Paint_DrawChar+0xb0>
                if (*ptr & (0x80 >> (Column % 8)))
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	4619      	mov	r1, r3
 80017b4:	8bbb      	ldrh	r3, [r7, #28]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	2280      	movs	r2, #128	; 0x80
 80017bc:	fa42 f303 	asr.w	r3, r2, r3
 80017c0:	400b      	ands	r3, r1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d031      	beq.n	800182a <Paint_DrawChar+0xfa>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80017c6:	89fa      	ldrh	r2, [r7, #14]
 80017c8:	8bbb      	ldrh	r3, [r7, #28]
 80017ca:	4413      	add	r3, r2
 80017cc:	b298      	uxth	r0, r3
 80017ce:	89ba      	ldrh	r2, [r7, #12]
 80017d0:	8bfb      	ldrh	r3, [r7, #30]
 80017d2:	4413      	add	r3, r2
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80017d8:	4619      	mov	r1, r3
 80017da:	f7ff fa55 	bl	8000c88 <Paint_SetPixel>
 80017de:	e024      	b.n	800182a <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4619      	mov	r1, r3
 80017e6:	8bbb      	ldrh	r3, [r7, #28]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	2280      	movs	r2, #128	; 0x80
 80017ee:	fa42 f303 	asr.w	r3, r2, r3
 80017f2:	400b      	ands	r3, r1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00c      	beq.n	8001812 <Paint_DrawChar+0xe2>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80017f8:	89fa      	ldrh	r2, [r7, #14]
 80017fa:	8bbb      	ldrh	r3, [r7, #28]
 80017fc:	4413      	add	r3, r2
 80017fe:	b298      	uxth	r0, r3
 8001800:	89ba      	ldrh	r2, [r7, #12]
 8001802:	8bfb      	ldrh	r3, [r7, #30]
 8001804:	4413      	add	r3, r2
 8001806:	b29b      	uxth	r3, r3
 8001808:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800180a:	4619      	mov	r1, r3
 800180c:	f7ff fa3c 	bl	8000c88 <Paint_SetPixel>
 8001810:	e00b      	b.n	800182a <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8001812:	89fa      	ldrh	r2, [r7, #14]
 8001814:	8bbb      	ldrh	r3, [r7, #28]
 8001816:	4413      	add	r3, r2
 8001818:	b298      	uxth	r0, r3
 800181a:	89ba      	ldrh	r2, [r7, #12]
 800181c:	8bfb      	ldrh	r3, [r7, #30]
 800181e:	4413      	add	r3, r2
 8001820:	b29b      	uxth	r3, r3
 8001822:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001824:	4619      	mov	r1, r3
 8001826:	f7ff fa2f 	bl	8000c88 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800182a:	8bbb      	ldrh	r3, [r7, #28]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	b29b      	uxth	r3, r3
 8001832:	2b07      	cmp	r3, #7
 8001834:	d102      	bne.n	800183c <Paint_DrawChar+0x10c>
                ptr++;
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	3301      	adds	r3, #1
 800183a:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800183c:	8bbb      	ldrh	r3, [r7, #28]
 800183e:	3301      	adds	r3, #1
 8001840:	83bb      	strh	r3, [r7, #28]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	889b      	ldrh	r3, [r3, #4]
 8001846:	8bba      	ldrh	r2, [r7, #28]
 8001848:	429a      	cmp	r2, r3
 800184a:	d3ad      	bcc.n	80017a8 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	889b      	ldrh	r3, [r3, #4]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	b29b      	uxth	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <Paint_DrawChar+0x130>
            ptr++;
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	3301      	adds	r3, #1
 800185e:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8001860:	8bfb      	ldrh	r3, [r7, #30]
 8001862:	3301      	adds	r3, #1
 8001864:	83fb      	strh	r3, [r7, #30]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	88db      	ldrh	r3, [r3, #6]
 800186a:	8bfa      	ldrh	r2, [r7, #30]
 800186c:	429a      	cmp	r2, r3
 800186e:	d398      	bcc.n	80017a2 <Paint_DrawChar+0x72>
    }// Write all
}
 8001870:	3720      	adds	r7, #32
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200001a8 	.word	0x200001a8
 800187c:	0800e994 	.word	0x0800e994

08001880 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af02      	add	r7, sp, #8
 8001886:	60ba      	str	r2, [r7, #8]
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	4603      	mov	r3, r0
 800188c:	81fb      	strh	r3, [r7, #14]
 800188e:	460b      	mov	r3, r1
 8001890:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8001892:	89fb      	ldrh	r3, [r7, #14]
 8001894:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8001896:	89bb      	ldrh	r3, [r7, #12]
 8001898:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800189a:	4b21      	ldr	r3, [pc, #132]	; (8001920 <Paint_DrawString_EN+0xa0>)
 800189c:	889b      	ldrh	r3, [r3, #4]
 800189e:	89fa      	ldrh	r2, [r7, #14]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d804      	bhi.n	80018ae <Paint_DrawString_EN+0x2e>
 80018a4:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <Paint_DrawString_EN+0xa0>)
 80018a6:	88db      	ldrh	r3, [r3, #6]
 80018a8:	89ba      	ldrh	r2, [r7, #12]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d931      	bls.n	8001912 <Paint_DrawString_EN+0x92>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 80018ae:	481d      	ldr	r0, [pc, #116]	; (8001924 <Paint_DrawString_EN+0xa4>)
 80018b0:	f00c f856 	bl	800d960 <puts>
        return;
 80018b4:	e031      	b.n	800191a <Paint_DrawString_EN+0x9a>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 80018b6:	8afb      	ldrh	r3, [r7, #22]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	8892      	ldrh	r2, [r2, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	4a18      	ldr	r2, [pc, #96]	; (8001920 <Paint_DrawString_EN+0xa0>)
 80018c0:	8892      	ldrh	r2, [r2, #4]
 80018c2:	4293      	cmp	r3, r2
 80018c4:	dd06      	ble.n	80018d4 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 80018c6:	89fb      	ldrh	r3, [r7, #14]
 80018c8:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	88da      	ldrh	r2, [r3, #6]
 80018ce:	8abb      	ldrh	r3, [r7, #20]
 80018d0:	4413      	add	r3, r2
 80018d2:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 80018d4:	8abb      	ldrh	r3, [r7, #20]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	88d2      	ldrh	r2, [r2, #6]
 80018da:	4413      	add	r3, r2
 80018dc:	4a10      	ldr	r2, [pc, #64]	; (8001920 <Paint_DrawString_EN+0xa0>)
 80018de:	88d2      	ldrh	r2, [r2, #6]
 80018e0:	4293      	cmp	r3, r2
 80018e2:	dd03      	ble.n	80018ec <Paint_DrawString_EN+0x6c>
            Xpoint = Xstart;
 80018e4:	89fb      	ldrh	r3, [r7, #14]
 80018e6:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 80018e8:	89bb      	ldrh	r3, [r7, #12]
 80018ea:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	781a      	ldrb	r2, [r3, #0]
 80018f0:	8ab9      	ldrh	r1, [r7, #20]
 80018f2:	8af8      	ldrh	r0, [r7, #22]
 80018f4:	8c3b      	ldrh	r3, [r7, #32]
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f7ff ff17 	bl	8001730 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	3301      	adds	r3, #1
 8001906:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	889a      	ldrh	r2, [r3, #4]
 800190c:	8afb      	ldrh	r3, [r7, #22]
 800190e:	4413      	add	r3, r2
 8001910:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1cd      	bne.n	80018b6 <Paint_DrawString_EN+0x36>
    }
}
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	200001a8 	.word	0x200001a8
 8001924:	0800e9d4 	.word	0x0800e9d4

08001928 <Paint_DrawString_CN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_CN(UWORD Xstart, UWORD Ystart, const char * pString, cFONT* font,
                        UWORD Color_Foreground, UWORD Color_Background)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08c      	sub	sp, #48	; 0x30
 800192c:	af00      	add	r7, sp, #0
 800192e:	60ba      	str	r2, [r7, #8]
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	4603      	mov	r3, r0
 8001934:	81fb      	strh	r3, [r7, #14]
 8001936:	460b      	mov	r3, r1
 8001938:	81bb      	strh	r3, [r7, #12]
    const char* p_text = pString;
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
    int x = Xstart, y = Ystart;
 800193e:	89fb      	ldrh	r3, [r7, #14]
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
 8001942:	89bb      	ldrh	r3, [r7, #12]
 8001944:	613b      	str	r3, [r7, #16]
    int i, j,Num;

    /* Send the string character by character on EPD */
    while (*p_text != 0) {
 8001946:	e17c      	b.n	8001c42 <Paint_DrawString_CN+0x31a>
        if(*p_text <= 0x7F) {  //ASCII < 126
 8001948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	b25b      	sxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	f2c0 80b5 	blt.w	8001abe <Paint_DrawString_CN+0x196>
            for(Num = 0; Num < font->size; Num++) {
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]
 8001958:	e0a0      	b.n	8001a9c <Paint_DrawString_CN+0x174>
                if(*p_text== font->table[Num].index[0]) {
 800195a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195c:	781a      	ldrb	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6819      	ldr	r1, [r3, #0]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	20a6      	movs	r0, #166	; 0xa6
 8001966:	fb00 f303 	mul.w	r3, r0, r3
 800196a:	440b      	add	r3, r1
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	f040 8091 	bne.w	8001a96 <Paint_DrawString_CN+0x16e>
                    const char* ptr = &font->table[Num].matrix[0];
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	21a6      	movs	r1, #166	; 0xa6
 800197c:	fb01 f303 	mul.w	r3, r1, r3
 8001980:	4413      	add	r3, r2
 8001982:	3302      	adds	r3, #2
 8001984:	61bb      	str	r3, [r7, #24]

                    for (j = 0; j < font->Height; j++) {
 8001986:	2300      	movs	r3, #0
 8001988:	623b      	str	r3, [r7, #32]
 800198a:	e07c      	b.n	8001a86 <Paint_DrawString_CN+0x15e>
                        for (i = 0; i < font->Width; i++) {
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
 8001990:	e066      	b.n	8001a60 <Paint_DrawString_CN+0x138>
                            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001992:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001994:	2bff      	cmp	r3, #255	; 0xff
 8001996:	d121      	bne.n	80019dc <Paint_DrawString_CN+0xb4>
                                if (*ptr & (0x80 >> (i % 8))) {
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	4619      	mov	r1, r3
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	425a      	negs	r2, r3
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	f002 0207 	and.w	r2, r2, #7
 80019aa:	bf58      	it	pl
 80019ac:	4253      	negpl	r3, r2
 80019ae:	2280      	movs	r2, #128	; 0x80
 80019b0:	fa42 f303 	asr.w	r3, r2, r3
 80019b4:	400b      	ands	r3, r1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d042      	beq.n	8001a40 <Paint_DrawString_CN+0x118>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 80019ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019bc:	b29a      	uxth	r2, r3
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	b298      	uxth	r0, r3
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80019d4:	4619      	mov	r1, r3
 80019d6:	f7ff f957 	bl	8000c88 <Paint_SetPixel>
 80019da:	e031      	b.n	8001a40 <Paint_DrawString_CN+0x118>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            } else {
                                if (*ptr & (0x80 >> (i % 8))) {
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	425a      	negs	r2, r3
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	f002 0207 	and.w	r2, r2, #7
 80019ee:	bf58      	it	pl
 80019f0:	4253      	negpl	r3, r2
 80019f2:	2280      	movs	r2, #128	; 0x80
 80019f4:	fa42 f303 	asr.w	r3, r2, r3
 80019f8:	400b      	ands	r3, r1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d010      	beq.n	8001a20 <Paint_DrawString_CN+0xf8>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 80019fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	b298      	uxth	r0, r3
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	4413      	add	r3, r2
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f7ff f935 	bl	8000c88 <Paint_SetPixel>
 8001a1e:	e00f      	b.n	8001a40 <Paint_DrawString_CN+0x118>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                } else {
                                    Paint_SetPixel(x + i, y + j, Color_Background);
 8001a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	4413      	add	r3, r2
 8001a2a:	b298      	uxth	r0, r3
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	6a3b      	ldr	r3, [r7, #32]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f7ff f924 	bl	8000c88 <Paint_SetPixel>
                                    // Paint_DrawPoint(x + i, y + j, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            }
                            if (i % 8 == 7) {
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	425a      	negs	r2, r3
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	f002 0207 	and.w	r2, r2, #7
 8001a4c:	bf58      	it	pl
 8001a4e:	4253      	negpl	r3, r2
 8001a50:	2b07      	cmp	r3, #7
 8001a52:	d102      	bne.n	8001a5a <Paint_DrawString_CN+0x132>
                                ptr++;
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	3301      	adds	r3, #1
 8001a58:	61bb      	str	r3, [r7, #24]
                        for (i = 0; i < font->Width; i++) {
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	891b      	ldrh	r3, [r3, #8]
 8001a64:	461a      	mov	r2, r3
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	db92      	blt.n	8001992 <Paint_DrawString_CN+0x6a>
                            }
                        }
                        if (font->Width % 8 != 0) {
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	891b      	ldrh	r3, [r3, #8]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d002      	beq.n	8001a80 <Paint_DrawString_CN+0x158>
                            ptr++;
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	61bb      	str	r3, [r7, #24]
                    for (j = 0; j < font->Height; j++) {
 8001a80:	6a3b      	ldr	r3, [r7, #32]
 8001a82:	3301      	adds	r3, #1
 8001a84:	623b      	str	r3, [r7, #32]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	895b      	ldrh	r3, [r3, #10]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	f6ff af7c 	blt.w	800198c <Paint_DrawString_CN+0x64>
                        }
                    }
                    break;
 8001a94:	e009      	b.n	8001aaa <Paint_DrawString_CN+0x182>
            for(Num = 0; Num < font->size; Num++) {
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	61fb      	str	r3, [r7, #28]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	889b      	ldrh	r3, [r3, #4]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	f6ff af58 	blt.w	800195a <Paint_DrawString_CN+0x32>
                }
            }
            /* Point on the next character */
            p_text += 1;
 8001aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aac:	3301      	adds	r3, #1
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Decrement the column position by 16 */
            x += font->ASCII_Width;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	88db      	ldrh	r3, [r3, #6]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab8:	4413      	add	r3, r2
 8001aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8001abc:	e0c1      	b.n	8001c42 <Paint_DrawString_CN+0x31a>
        } else {        //Chinese
            for(Num = 0; Num < font->size; Num++) {
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	e0ae      	b.n	8001c22 <Paint_DrawString_CN+0x2fa>
                if((*p_text== font->table[Num].index[0]) && (*(p_text+1) == font->table[Num].index[1])) {
 8001ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac6:	781a      	ldrb	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6819      	ldr	r1, [r3, #0]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	20a6      	movs	r0, #166	; 0xa6
 8001ad0:	fb00 f303 	mul.w	r3, r0, r3
 8001ad4:	440b      	add	r3, r1
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	f040 809f 	bne.w	8001c1c <Paint_DrawString_CN+0x2f4>
 8001ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	781a      	ldrb	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6819      	ldr	r1, [r3, #0]
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	20a6      	movs	r0, #166	; 0xa6
 8001aec:	fb00 f303 	mul.w	r3, r0, r3
 8001af0:	440b      	add	r3, r1
 8001af2:	785b      	ldrb	r3, [r3, #1]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	f040 8091 	bne.w	8001c1c <Paint_DrawString_CN+0x2f4>
                    const char* ptr = &font->table[Num].matrix[0];
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	21a6      	movs	r1, #166	; 0xa6
 8001b02:	fb01 f303 	mul.w	r3, r1, r3
 8001b06:	4413      	add	r3, r2
 8001b08:	3302      	adds	r3, #2
 8001b0a:	617b      	str	r3, [r7, #20]

                    for (j = 0; j < font->Height; j++) {
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	623b      	str	r3, [r7, #32]
 8001b10:	e07c      	b.n	8001c0c <Paint_DrawString_CN+0x2e4>
                        for (i = 0; i < font->Width; i++) {
 8001b12:	2300      	movs	r3, #0
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
 8001b16:	e066      	b.n	8001be6 <Paint_DrawString_CN+0x2be>
                            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001b18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001b1a:	2bff      	cmp	r3, #255	; 0xff
 8001b1c:	d121      	bne.n	8001b62 <Paint_DrawString_CN+0x23a>
                                if (*ptr & (0x80 >> (i % 8))) {
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	4619      	mov	r1, r3
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	425a      	negs	r2, r3
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	f002 0207 	and.w	r2, r2, #7
 8001b30:	bf58      	it	pl
 8001b32:	4253      	negpl	r3, r2
 8001b34:	2280      	movs	r2, #128	; 0x80
 8001b36:	fa42 f303 	asr.w	r3, r2, r3
 8001b3a:	400b      	ands	r3, r1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d042      	beq.n	8001bc6 <Paint_DrawString_CN+0x29e>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8001b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	4413      	add	r3, r2
 8001b4a:	b298      	uxth	r0, r3
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f7ff f894 	bl	8000c88 <Paint_SetPixel>
 8001b60:	e031      	b.n	8001bc6 <Paint_DrawString_CN+0x29e>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            } else {
                                if (*ptr & (0x80 >> (i % 8))) {
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	4619      	mov	r1, r3
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	425a      	negs	r2, r3
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	f002 0207 	and.w	r2, r2, #7
 8001b74:	bf58      	it	pl
 8001b76:	4253      	negpl	r3, r2
 8001b78:	2280      	movs	r2, #128	; 0x80
 8001b7a:	fa42 f303 	asr.w	r3, r2, r3
 8001b7e:	400b      	ands	r3, r1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d010      	beq.n	8001ba6 <Paint_DrawString_CN+0x27e>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8001b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	b298      	uxth	r0, r3
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	4413      	add	r3, r2
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f7ff f872 	bl	8000c88 <Paint_SetPixel>
 8001ba4:	e00f      	b.n	8001bc6 <Paint_DrawString_CN+0x29e>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                } else {
                                    Paint_SetPixel(x + i, y + j, Color_Background);
 8001ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	4413      	add	r3, r2
 8001bb0:	b298      	uxth	r0, r3
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	4413      	add	r3, r2
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f7ff f861 	bl	8000c88 <Paint_SetPixel>
                                    // Paint_DrawPoint(x + i, y + j, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            }
                            if (i % 8 == 7) {
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	425a      	negs	r2, r3
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	f002 0207 	and.w	r2, r2, #7
 8001bd2:	bf58      	it	pl
 8001bd4:	4253      	negpl	r3, r2
 8001bd6:	2b07      	cmp	r3, #7
 8001bd8:	d102      	bne.n	8001be0 <Paint_DrawString_CN+0x2b8>
                                ptr++;
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	617b      	str	r3, [r7, #20]
                        for (i = 0; i < font->Width; i++) {
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	3301      	adds	r3, #1
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	891b      	ldrh	r3, [r3, #8]
 8001bea:	461a      	mov	r2, r3
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	db92      	blt.n	8001b18 <Paint_DrawString_CN+0x1f0>
                            }
                        }
                        if (font->Width % 8 != 0) {
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	891b      	ldrh	r3, [r3, #8]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <Paint_DrawString_CN+0x2de>
                            ptr++;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	3301      	adds	r3, #1
 8001c04:	617b      	str	r3, [r7, #20]
                    for (j = 0; j < font->Height; j++) {
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	623b      	str	r3, [r7, #32]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	895b      	ldrh	r3, [r3, #10]
 8001c10:	461a      	mov	r2, r3
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	4293      	cmp	r3, r2
 8001c16:	f6ff af7c 	blt.w	8001b12 <Paint_DrawString_CN+0x1ea>
                        }
                    }
                    break;
 8001c1a:	e009      	b.n	8001c30 <Paint_DrawString_CN+0x308>
            for(Num = 0; Num < font->size; Num++) {
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	889b      	ldrh	r3, [r3, #4]
 8001c26:	461a      	mov	r2, r3
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	f6ff af4a 	blt.w	8001ac4 <Paint_DrawString_CN+0x19c>
                }
            }
            /* Point on the next character */
            p_text += 2;
 8001c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c32:	3302      	adds	r3, #2
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Decrement the column position by 16 */
            x += font->Width;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	891b      	ldrh	r3, [r3, #8]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3e:	4413      	add	r3, r2
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
    while (*p_text != 0) {
 8001c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f47f ae7e 	bne.w	8001948 <Paint_DrawString_CN+0x20>
        }
    }
}
 8001c4c:	bf00      	nop
 8001c4e:	bf00      	nop
 8001c50:	3730      	adds	r7, #48	; 0x30
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <Paint_DrawNum>:
    Color_Background : Select the background color
******************************************************************************/
#define  ARRAY_LEN 255
void Paint_DrawNum(UWORD Xpoint, UWORD Ypoint, int32_t Nummber,
                   sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8001c5e:	af02      	add	r7, sp, #8
 8001c60:	4604      	mov	r4, r0
 8001c62:	4608      	mov	r0, r1
 8001c64:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8001c68:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 8001c6c:	600a      	str	r2, [r1, #0]
 8001c6e:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001c72:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001c7c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8001c80:	4622      	mov	r2, r4
 8001c82:	801a      	strh	r2, [r3, #0]
 8001c84:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001c88:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	801a      	strh	r2, [r3, #0]

    int16_t Num_Bit = 0, Str_Bit = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8001c96:	2300      	movs	r3, #0
 8001c98:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
    uint8_t Str_Array[ARRAY_LEN] = {0}, Num_Array[ARRAY_LEN] = {0};
 8001c9c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001ca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	22fb      	movs	r2, #251	; 0xfb
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f00b fce8 	bl	800d684 <memset>
 8001cb4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001cb8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	22fb      	movs	r2, #251	; 0xfb
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f00b fcdc 	bl	800d684 <memset>
    uint8_t *pStr = Str_Array;
 8001ccc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001cd0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001cd4:	4b46      	ldr	r3, [pc, #280]	; (8001df0 <Paint_DrawNum+0x198>)
 8001cd6:	889b      	ldrh	r3, [r3, #4]
 8001cd8:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001cdc:	f2a2 220a 	subw	r2, r2, #522	; 0x20a
 8001ce0:	8812      	ldrh	r2, [r2, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d808      	bhi.n	8001cf8 <Paint_DrawNum+0xa0>
 8001ce6:	4b42      	ldr	r3, [pc, #264]	; (8001df0 <Paint_DrawNum+0x198>)
 8001ce8:	88db      	ldrh	r3, [r3, #6]
 8001cea:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001cee:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8001cf2:	8812      	ldrh	r2, [r2, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d903      	bls.n	8001d00 <Paint_DrawNum+0xa8>
        Debug("Paint_DisNum Input exceeds the normal display range\r\n");
 8001cf8:	483e      	ldr	r0, [pc, #248]	; (8001df4 <Paint_DrawNum+0x19c>)
 8001cfa:	f00b fe31 	bl	800d960 <puts>
 8001cfe:	e072      	b.n	8001de6 <Paint_DrawNum+0x18e>
        return;
    }

    //Converts a number to a string
    do {
        Num_Array[Num_Bit] = Nummber % 10 + '0';
 8001d00:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001d04:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4b3b      	ldr	r3, [pc, #236]	; (8001df8 <Paint_DrawNum+0x1a0>)
 8001d0c:	fb83 1302 	smull	r1, r3, r3, r2
 8001d10:	1099      	asrs	r1, r3, #2
 8001d12:	17d3      	asrs	r3, r2, #31
 8001d14:	1ac9      	subs	r1, r1, r3
 8001d16:	460b      	mov	r3, r1
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	1ad1      	subs	r1, r2, r3
 8001d20:	b2ca      	uxtb	r2, r1
 8001d22:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8001d26:	3230      	adds	r2, #48	; 0x30
 8001d28:	b2d1      	uxtb	r1, r2
 8001d2a:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001d2e:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8001d32:	54d1      	strb	r1, [r2, r3]
        Num_Bit++;
 8001d34:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
        Nummber /= 10;
 8001d42:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001d46:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 8001d4a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001d4e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4928      	ldr	r1, [pc, #160]	; (8001df8 <Paint_DrawNum+0x1a0>)
 8001d56:	fb81 0103 	smull	r0, r1, r1, r3
 8001d5a:	1089      	asrs	r1, r1, #2
 8001d5c:	17db      	asrs	r3, r3, #31
 8001d5e:	1acb      	subs	r3, r1, r3
 8001d60:	6013      	str	r3, [r2, #0]
    } while(Nummber);
 8001d62:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001d66:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1c7      	bne.n	8001d00 <Paint_DrawNum+0xa8>
    

    //The string is inverted
    while (Num_Bit > 0) {
 8001d70:	e01c      	b.n	8001dac <Paint_DrawNum+0x154>
        Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 8001d72:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8001d76:	1e5a      	subs	r2, r3, #1
 8001d78:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 8001d7c:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8001d80:	f5a1 7102 	sub.w	r1, r1, #520	; 0x208
 8001d84:	5c89      	ldrb	r1, [r1, r2]
 8001d86:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001d8a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8001d8e:	54d1      	strb	r1, [r2, r3]
        Str_Bit ++;
 8001d90:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3301      	adds	r3, #1
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
        Num_Bit --;
 8001d9e:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    while (Num_Bit > 0) {
 8001dac:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	dcde      	bgt.n	8001d72 <Paint_DrawNum+0x11a>
    }

    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Background, Color_Foreground);
 8001db4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001db8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001dbc:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001dc0:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8001dc4:	8811      	ldrh	r1, [r2, #0]
 8001dc6:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001dca:	f2a2 220a 	subw	r2, r2, #522	; 0x20a
 8001dce:	8810      	ldrh	r0, [r2, #0]
 8001dd0:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 8001dd4:	9201      	str	r2, [sp, #4]
 8001dd6:	f8b7 222c 	ldrh.w	r2, [r7, #556]	; 0x22c
 8001dda:	9200      	str	r2, [sp, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8001de2:	f7ff fd4d 	bl	8001880 <Paint_DrawString_EN>
}
 8001de6:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd90      	pop	{r4, r7, pc}
 8001dee:	bf00      	nop
 8001df0:	200001a8 	.word	0x200001a8
 8001df4:	0800ea18 	.word	0x0800ea18
 8001df8:	66666667 	.word	0x66666667

08001dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e00:	f000 fcd4 	bl	80027ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e04:	f000 f820 	bl	8001e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e08:	f000 f97e 	bl	8002108 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e0c:	f000 f95c 	bl	80020c8 <MX_DMA_Init>
  MX_I2C1_Init();
 8001e10:	f000 f882 	bl	8001f18 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001e14:	f000 f8ae 	bl	8001f74 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001e18:	f000 f8e2 	bl	8001fe0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  EPD_test();
 8001e1c:	f7fe fd52 	bl	80008c4 <EPD_test>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001e20:	f008 f88a 	bl	8009f38 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of InitTask */
  InitTaskHandle = osThreadNew(StartInitTask, NULL, &InitTask_attributes);
 8001e24:	4a05      	ldr	r2, [pc, #20]	; (8001e3c <main+0x40>)
 8001e26:	2100      	movs	r1, #0
 8001e28:	4805      	ldr	r0, [pc, #20]	; (8001e40 <main+0x44>)
 8001e2a:	f008 f8cf 	bl	8009fcc <osThreadNew>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <main+0x48>)
 8001e32:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001e34:	f008 f8a4 	bl	8009f80 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <main+0x3c>
 8001e3a:	bf00      	nop
 8001e3c:	0801377c 	.word	0x0801377c
 8001e40:	080021c5 	.word	0x080021c5
 8001e44:	20000314 	.word	0x20000314

08001e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b094      	sub	sp, #80	; 0x50
 8001e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e4e:	f107 0320 	add.w	r3, r7, #32
 8001e52:	2230      	movs	r2, #48	; 0x30
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f00b fc14 	bl	800d684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <SystemClock_Config+0xc8>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	4a26      	ldr	r2, [pc, #152]	; (8001f10 <SystemClock_Config+0xc8>)
 8001e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7c:	4b24      	ldr	r3, [pc, #144]	; (8001f10 <SystemClock_Config+0xc8>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e88:	2300      	movs	r3, #0
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <SystemClock_Config+0xcc>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a20      	ldr	r2, [pc, #128]	; (8001f14 <SystemClock_Config+0xcc>)
 8001e92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <SystemClock_Config+0xcc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ea8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001eb8:	2319      	movs	r3, #25
 8001eba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001ebc:	23c0      	movs	r3, #192	; 0xc0
 8001ebe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec8:	f107 0320 	add.w	r3, r7, #32
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f002 fe17 	bl	8004b00 <HAL_RCC_OscConfig>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ed8:	f000 f990 	bl	80021fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001edc:	230f      	movs	r3, #15
 8001ede:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ef2:	f107 030c 	add.w	r3, r7, #12
 8001ef6:	2103      	movs	r1, #3
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f003 f879 	bl	8004ff0 <HAL_RCC_ClockConfig>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001f04:	f000 f97a 	bl	80021fc <Error_Handler>
  }
}
 8001f08:	bf00      	nop
 8001f0a:	3750      	adds	r7, #80	; 0x50
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40007000 	.word	0x40007000

08001f18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f1c:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <MX_I2C1_Init+0x50>)
 8001f1e:	4a13      	ldr	r2, [pc, #76]	; (8001f6c <MX_I2C1_Init+0x54>)
 8001f20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <MX_I2C1_Init+0x50>)
 8001f24:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <MX_I2C1_Init+0x58>)
 8001f26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f28:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <MX_I2C1_Init+0x50>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <MX_I2C1_Init+0x50>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <MX_I2C1_Init+0x50>)
 8001f36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <MX_I2C1_Init+0x50>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <MX_I2C1_Init+0x50>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f48:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <MX_I2C1_Init+0x50>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <MX_I2C1_Init+0x50>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f54:	4804      	ldr	r0, [pc, #16]	; (8001f68 <MX_I2C1_Init+0x50>)
 8001f56:	f001 fa11 	bl	800337c <HAL_I2C_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f60:	f000 f94c 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	200001c0 	.word	0x200001c0
 8001f6c:	40005400 	.word	0x40005400
 8001f70:	000186a0 	.word	0x000186a0

08001f74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f78:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <MX_SPI1_Init+0x64>)
 8001f7a:	4a18      	ldr	r2, [pc, #96]	; (8001fdc <MX_SPI1_Init+0x68>)
 8001f7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f7e:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <MX_SPI1_Init+0x64>)
 8001f80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f86:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <MX_SPI1_Init+0x64>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <MX_SPI1_Init+0x64>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <MX_SPI1_Init+0x64>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f98:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <MX_SPI1_Init+0x64>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <MX_SPI1_Init+0x64>)
 8001fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fa4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_SPI1_Init+0x64>)
 8001fa8:	2230      	movs	r2, #48	; 0x30
 8001faa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <MX_SPI1_Init+0x64>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_SPI1_Init+0x64>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fb8:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <MX_SPI1_Init+0x64>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_SPI1_Init+0x64>)
 8001fc0:	220a      	movs	r2, #10
 8001fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fc4:	4804      	ldr	r0, [pc, #16]	; (8001fd8 <MX_SPI1_Init+0x64>)
 8001fc6:	f003 fa25 	bl	8005414 <HAL_SPI_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fd0:	f000 f914 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000214 	.word	0x20000214
 8001fdc:	40013000 	.word	0x40013000

08001fe0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08e      	sub	sp, #56	; 0x38
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fe6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff4:	f107 0320 	add.w	r3, r7, #32
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
 800200c:	615a      	str	r2, [r3, #20]
 800200e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002010:	4b2c      	ldr	r3, [pc, #176]	; (80020c4 <MX_TIM2_Init+0xe4>)
 8002012:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002016:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002018:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <MX_TIM2_Init+0xe4>)
 800201a:	2200      	movs	r2, #0
 800201c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201e:	4b29      	ldr	r3, [pc, #164]	; (80020c4 <MX_TIM2_Init+0xe4>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 119;
 8002024:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <MX_TIM2_Init+0xe4>)
 8002026:	2277      	movs	r2, #119	; 0x77
 8002028:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202a:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <MX_TIM2_Init+0xe4>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002030:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <MX_TIM2_Init+0xe4>)
 8002032:	2200      	movs	r2, #0
 8002034:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002036:	4823      	ldr	r0, [pc, #140]	; (80020c4 <MX_TIM2_Init+0xe4>)
 8002038:	f003 fc7c 	bl	8005934 <HAL_TIM_Base_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002042:	f000 f8db 	bl	80021fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800204c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002050:	4619      	mov	r1, r3
 8002052:	481c      	ldr	r0, [pc, #112]	; (80020c4 <MX_TIM2_Init+0xe4>)
 8002054:	f003 ff44 	bl	8005ee0 <HAL_TIM_ConfigClockSource>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800205e:	f000 f8cd 	bl	80021fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002062:	4818      	ldr	r0, [pc, #96]	; (80020c4 <MX_TIM2_Init+0xe4>)
 8002064:	f003 fd18 	bl	8005a98 <HAL_TIM_PWM_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800206e:	f000 f8c5 	bl	80021fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002076:	2300      	movs	r3, #0
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800207a:	f107 0320 	add.w	r3, r7, #32
 800207e:	4619      	mov	r1, r3
 8002080:	4810      	ldr	r0, [pc, #64]	; (80020c4 <MX_TIM2_Init+0xe4>)
 8002082:	f004 fac3 	bl	800660c <HAL_TIMEx_MasterConfigSynchronization>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800208c:	f000 f8b6 	bl	80021fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002090:	2360      	movs	r3, #96	; 0x60
 8002092:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	2204      	movs	r2, #4
 80020a4:	4619      	mov	r1, r3
 80020a6:	4807      	ldr	r0, [pc, #28]	; (80020c4 <MX_TIM2_Init+0xe4>)
 80020a8:	f003 fe58 	bl	8005d5c <HAL_TIM_PWM_ConfigChannel>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80020b2:	f000 f8a3 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020b6:	4803      	ldr	r0, [pc, #12]	; (80020c4 <MX_TIM2_Init+0xe4>)
 80020b8:	f000 f9ba 	bl	8002430 <HAL_TIM_MspPostInit>

}
 80020bc:	bf00      	nop
 80020be:	3738      	adds	r7, #56	; 0x38
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	2000026c 	.word	0x2000026c

080020c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <MX_DMA_Init+0x3c>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <MX_DMA_Init+0x3c>)
 80020d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <MX_DMA_Init+0x3c>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2105      	movs	r1, #5
 80020ee:	2011      	movs	r0, #17
 80020f0:	f000 fc7a 	bl	80029e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80020f4:	2011      	movs	r0, #17
 80020f6:	f000 fc93 	bl	8002a20 <HAL_NVIC_EnableIRQ>

}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800

08002108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210e:	f107 030c 	add.w	r3, r7, #12
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	60da      	str	r2, [r3, #12]
 800211c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	4b26      	ldr	r3, [pc, #152]	; (80021bc <MX_GPIO_Init+0xb4>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a25      	ldr	r2, [pc, #148]	; (80021bc <MX_GPIO_Init+0xb4>)
 8002128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b23      	ldr	r3, [pc, #140]	; (80021bc <MX_GPIO_Init+0xb4>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	4b1f      	ldr	r3, [pc, #124]	; (80021bc <MX_GPIO_Init+0xb4>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a1e      	ldr	r2, [pc, #120]	; (80021bc <MX_GPIO_Init+0xb4>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <MX_GPIO_Init+0xb4>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	607b      	str	r3, [r7, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	603b      	str	r3, [r7, #0]
 800215a:	4b18      	ldr	r3, [pc, #96]	; (80021bc <MX_GPIO_Init+0xb4>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a17      	ldr	r2, [pc, #92]	; (80021bc <MX_GPIO_Init+0xb4>)
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <MX_GPIO_Init+0xb4>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin, GPIO_PIN_RESET);
 8002172:	2200      	movs	r2, #0
 8002174:	2107      	movs	r1, #7
 8002176:	4812      	ldr	r0, [pc, #72]	; (80021c0 <MX_GPIO_Init+0xb8>)
 8002178:	f001 f8e6 	bl	8003348 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EPD_CS_Pin EPD_Reset_Pin EPD_Data_Control_Pin */
  GPIO_InitStruct.Pin = EPD_CS_Pin|EPD_Reset_Pin|EPD_Data_Control_Pin;
 800217c:	2307      	movs	r3, #7
 800217e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002180:	2301      	movs	r3, #1
 8002182:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002188:	2300      	movs	r3, #0
 800218a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	4619      	mov	r1, r3
 8002192:	480b      	ldr	r0, [pc, #44]	; (80021c0 <MX_GPIO_Init+0xb8>)
 8002194:	f000 ff3c 	bl	8003010 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_Busy_Pin */
  GPIO_InitStruct.Pin = EPD_Busy_Pin;
 8002198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800219c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EPD_Busy_GPIO_Port, &GPIO_InitStruct);
 80021a6:	f107 030c 	add.w	r3, r7, #12
 80021aa:	4619      	mov	r1, r3
 80021ac:	4804      	ldr	r0, [pc, #16]	; (80021c0 <MX_GPIO_Init+0xb8>)
 80021ae:	f000 ff2f 	bl	8003010 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021b2:	bf00      	nop
 80021b4:	3720      	adds	r7, #32
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40020400 	.word	0x40020400

080021c4 <StartInitTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void *argument)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80021cc:	f00a fc2e 	bl	800ca2c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80021d0:	2001      	movs	r0, #1
 80021d2:	f007 ff8d 	bl	800a0f0 <osDelay>
 80021d6:	e7fb      	b.n	80021d0 <StartInitTask+0xc>

080021d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021ea:	f000 fb01 	bl	80027f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40014000 	.word	0x40014000

080021fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002200:	b672      	cpsid	i
}
 8002202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002204:	e7fe      	b.n	8002204 <Error_Handler+0x8>
	...

08002208 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_MspInit+0x54>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	4a11      	ldr	r2, [pc, #68]	; (800225c <HAL_MspInit+0x54>)
 8002218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800221c:	6453      	str	r3, [r2, #68]	; 0x44
 800221e:	4b0f      	ldr	r3, [pc, #60]	; (800225c <HAL_MspInit+0x54>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002226:	607b      	str	r3, [r7, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	603b      	str	r3, [r7, #0]
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_MspInit+0x54>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	4a0a      	ldr	r2, [pc, #40]	; (800225c <HAL_MspInit+0x54>)
 8002234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002238:	6413      	str	r3, [r2, #64]	; 0x40
 800223a:	4b08      	ldr	r3, [pc, #32]	; (800225c <HAL_MspInit+0x54>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	210f      	movs	r1, #15
 800224a:	f06f 0001 	mvn.w	r0, #1
 800224e:	f000 fbcb 	bl	80029e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40023800 	.word	0x40023800

08002260 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	; 0x28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a19      	ldr	r2, [pc, #100]	; (80022e4 <HAL_I2C_MspInit+0x84>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d12b      	bne.n	80022da <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <HAL_I2C_MspInit+0x88>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a17      	ldr	r2, [pc, #92]	; (80022e8 <HAL_I2C_MspInit+0x88>)
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <HAL_I2C_MspInit+0x88>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800229e:	23c0      	movs	r3, #192	; 0xc0
 80022a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022a2:	2312      	movs	r3, #18
 80022a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022aa:	2303      	movs	r3, #3
 80022ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022ae:	2304      	movs	r3, #4
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	4619      	mov	r1, r3
 80022b8:	480c      	ldr	r0, [pc, #48]	; (80022ec <HAL_I2C_MspInit+0x8c>)
 80022ba:	f000 fea9 	bl	8003010 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <HAL_I2C_MspInit+0x88>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	4a08      	ldr	r2, [pc, #32]	; (80022e8 <HAL_I2C_MspInit+0x88>)
 80022c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022cc:	6413      	str	r3, [r2, #64]	; 0x40
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_I2C_MspInit+0x88>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022da:	bf00      	nop
 80022dc:	3728      	adds	r7, #40	; 0x28
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40005400 	.word	0x40005400
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40020400 	.word	0x40020400

080022f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a19      	ldr	r2, [pc, #100]	; (8002374 <HAL_SPI_MspInit+0x84>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d12b      	bne.n	800236a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	4b18      	ldr	r3, [pc, #96]	; (8002378 <HAL_SPI_MspInit+0x88>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	4a17      	ldr	r2, [pc, #92]	; (8002378 <HAL_SPI_MspInit+0x88>)
 800231c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002320:	6453      	str	r3, [r2, #68]	; 0x44
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <HAL_SPI_MspInit+0x88>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <HAL_SPI_MspInit+0x88>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a10      	ldr	r2, [pc, #64]	; (8002378 <HAL_SPI_MspInit+0x88>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <HAL_SPI_MspInit+0x88>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800234a:	23a0      	movs	r3, #160	; 0xa0
 800234c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234e:	2302      	movs	r3, #2
 8002350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002356:	2303      	movs	r3, #3
 8002358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800235a:	2305      	movs	r3, #5
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235e:	f107 0314 	add.w	r3, r7, #20
 8002362:	4619      	mov	r1, r3
 8002364:	4805      	ldr	r0, [pc, #20]	; (800237c <HAL_SPI_MspInit+0x8c>)
 8002366:	f000 fe53 	bl	8003010 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800236a:	bf00      	nop
 800236c:	3728      	adds	r7, #40	; 0x28
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40013000 	.word	0x40013000
 8002378:	40023800 	.word	0x40023800
 800237c:	40020000 	.word	0x40020000

08002380 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002390:	d143      	bne.n	800241a <HAL_TIM_Base_MspInit+0x9a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	4b23      	ldr	r3, [pc, #140]	; (8002424 <HAL_TIM_Base_MspInit+0xa4>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	4a22      	ldr	r2, [pc, #136]	; (8002424 <HAL_TIM_Base_MspInit+0xa4>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6413      	str	r3, [r2, #64]	; 0x40
 80023a2:	4b20      	ldr	r3, [pc, #128]	; (8002424 <HAL_TIM_Base_MspInit+0xa4>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 80023ae:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <HAL_TIM_Base_MspInit+0xa8>)
 80023b0:	4a1e      	ldr	r2, [pc, #120]	; (800242c <HAL_TIM_Base_MspInit+0xac>)
 80023b2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 80023b4:	4b1c      	ldr	r3, [pc, #112]	; (8002428 <HAL_TIM_Base_MspInit+0xa8>)
 80023b6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80023ba:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023bc:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <HAL_TIM_Base_MspInit+0xa8>)
 80023be:	2240      	movs	r2, #64	; 0x40
 80023c0:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c2:	4b19      	ldr	r3, [pc, #100]	; (8002428 <HAL_TIM_Base_MspInit+0xa8>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80023c8:	4b17      	ldr	r3, [pc, #92]	; (8002428 <HAL_TIM_Base_MspInit+0xa8>)
 80023ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023ce:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023d0:	4b15      	ldr	r3, [pc, #84]	; (8002428 <HAL_TIM_Base_MspInit+0xa8>)
 80023d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023d6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023d8:	4b13      	ldr	r3, [pc, #76]	; (8002428 <HAL_TIM_Base_MspInit+0xa8>)
 80023da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023de:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <HAL_TIM_Base_MspInit+0xa8>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <HAL_TIM_Base_MspInit+0xa8>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ec:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <HAL_TIM_Base_MspInit+0xa8>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80023f2:	480d      	ldr	r0, [pc, #52]	; (8002428 <HAL_TIM_Base_MspInit+0xa8>)
 80023f4:	f000 fb22 	bl	8002a3c <HAL_DMA_Init>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80023fe:	f7ff fefd 	bl	80021fc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a08      	ldr	r2, [pc, #32]	; (8002428 <HAL_TIM_Base_MspInit+0xa8>)
 8002406:	629a      	str	r2, [r3, #40]	; 0x28
 8002408:	4a07      	ldr	r2, [pc, #28]	; (8002428 <HAL_TIM_Base_MspInit+0xa8>)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a05      	ldr	r2, [pc, #20]	; (8002428 <HAL_TIM_Base_MspInit+0xa8>)
 8002412:	631a      	str	r2, [r3, #48]	; 0x30
 8002414:	4a04      	ldr	r2, [pc, #16]	; (8002428 <HAL_TIM_Base_MspInit+0xa8>)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800
 8002428:	200002b4 	.word	0x200002b4
 800242c:	400260a0 	.word	0x400260a0

08002430 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 030c 	add.w	r3, r7, #12
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002450:	d11d      	bne.n	800248e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <HAL_TIM_MspPostInit+0x68>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a0f      	ldr	r2, [pc, #60]	; (8002498 <HAL_TIM_MspPostInit+0x68>)
 800245c:	f043 0302 	orr.w	r3, r3, #2
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <HAL_TIM_MspPostInit+0x68>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800246e:	2308      	movs	r3, #8
 8002470:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800247a:	2302      	movs	r3, #2
 800247c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800247e:	2301      	movs	r3, #1
 8002480:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002482:	f107 030c 	add.w	r3, r7, #12
 8002486:	4619      	mov	r1, r3
 8002488:	4804      	ldr	r0, [pc, #16]	; (800249c <HAL_TIM_MspPostInit+0x6c>)
 800248a:	f000 fdc1 	bl	8003010 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800248e:	bf00      	nop
 8002490:	3720      	adds	r7, #32
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800
 800249c:	40020400 	.word	0x40020400

080024a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08c      	sub	sp, #48	; 0x30
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	4b2e      	ldr	r3, [pc, #184]	; (8002570 <HAL_InitTick+0xd0>)
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	4a2d      	ldr	r2, [pc, #180]	; (8002570 <HAL_InitTick+0xd0>)
 80024ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024be:	6453      	str	r3, [r2, #68]	; 0x44
 80024c0:	4b2b      	ldr	r3, [pc, #172]	; (8002570 <HAL_InitTick+0xd0>)
 80024c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024cc:	f107 020c 	add.w	r2, r7, #12
 80024d0:	f107 0310 	add.w	r3, r7, #16
 80024d4:	4611      	mov	r1, r2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f002 ff6a 	bl	80053b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80024dc:	f002 ff54 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 80024e0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e4:	4a23      	ldr	r2, [pc, #140]	; (8002574 <HAL_InitTick+0xd4>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	0c9b      	lsrs	r3, r3, #18
 80024ec:	3b01      	subs	r3, #1
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 80024f0:	4b21      	ldr	r3, [pc, #132]	; (8002578 <HAL_InitTick+0xd8>)
 80024f2:	4a22      	ldr	r2, [pc, #136]	; (800257c <HAL_InitTick+0xdc>)
 80024f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 80024f6:	4b20      	ldr	r3, [pc, #128]	; (8002578 <HAL_InitTick+0xd8>)
 80024f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024fc:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 80024fe:	4a1e      	ldr	r2, [pc, #120]	; (8002578 <HAL_InitTick+0xd8>)
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8002504:	4b1c      	ldr	r3, [pc, #112]	; (8002578 <HAL_InitTick+0xd8>)
 8002506:	2200      	movs	r2, #0
 8002508:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250a:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <HAL_InitTick+0xd8>)
 800250c:	2200      	movs	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002510:	4b19      	ldr	r3, [pc, #100]	; (8002578 <HAL_InitTick+0xd8>)
 8002512:	2200      	movs	r2, #0
 8002514:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8002516:	4818      	ldr	r0, [pc, #96]	; (8002578 <HAL_InitTick+0xd8>)
 8002518:	f003 fa0c 	bl	8005934 <HAL_TIM_Base_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002522:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002526:	2b00      	cmp	r3, #0
 8002528:	d11b      	bne.n	8002562 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 800252a:	4813      	ldr	r0, [pc, #76]	; (8002578 <HAL_InitTick+0xd8>)
 800252c:	f003 fa52 	bl	80059d4 <HAL_TIM_Base_Start_IT>
 8002530:	4603      	mov	r3, r0
 8002532:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002536:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800253a:	2b00      	cmp	r3, #0
 800253c:	d111      	bne.n	8002562 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800253e:	2018      	movs	r0, #24
 8002540:	f000 fa6e 	bl	8002a20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b0f      	cmp	r3, #15
 8002548:	d808      	bhi.n	800255c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 800254a:	2200      	movs	r2, #0
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	2018      	movs	r0, #24
 8002550:	f000 fa4a 	bl	80029e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002554:	4a0a      	ldr	r2, [pc, #40]	; (8002580 <HAL_InitTick+0xe0>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	e002      	b.n	8002562 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002562:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002566:	4618      	mov	r0, r3
 8002568:	3730      	adds	r7, #48	; 0x30
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800
 8002574:	431bde83 	.word	0x431bde83
 8002578:	20000318 	.word	0x20000318
 800257c:	40014000 	.word	0x40014000
 8002580:	2000002c 	.word	0x2000002c

08002584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002588:	e7fe      	b.n	8002588 <NMI_Handler+0x4>

0800258a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800258e:	e7fe      	b.n	800258e <HardFault_Handler+0x4>

08002590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002594:	e7fe      	b.n	8002594 <MemManage_Handler+0x4>

08002596 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800259a:	e7fe      	b.n	800259a <BusFault_Handler+0x4>

0800259c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025a0:	e7fe      	b.n	80025a0 <UsageFault_Handler+0x4>

080025a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80025b4:	4802      	ldr	r0, [pc, #8]	; (80025c0 <DMA1_Stream6_IRQHandler+0x10>)
 80025b6:	f000 faef 	bl	8002b98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	200002b4 	.word	0x200002b4

080025c4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80025c8:	4802      	ldr	r0, [pc, #8]	; (80025d4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80025ca:	f003 fabe 	bl	8005b4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000318 	.word	0x20000318

080025d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <OTG_FS_IRQHandler+0x10>)
 80025de:	f001 f961 	bl	80038a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20006258 	.word	0x20006258

080025ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	e00a      	b.n	8002614 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025fe:	f3af 8000 	nop.w
 8002602:	4601      	mov	r1, r0
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	60ba      	str	r2, [r7, #8]
 800260a:	b2ca      	uxtb	r2, r1
 800260c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	3301      	adds	r3, #1
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	429a      	cmp	r2, r3
 800261a:	dbf0      	blt.n	80025fe <_read+0x12>
	}

return len;
 800261c:	687b      	ldr	r3, [r7, #4]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b086      	sub	sp, #24
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	e009      	b.n	800264c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	60ba      	str	r2, [r7, #8]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	3301      	adds	r3, #1
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	429a      	cmp	r2, r3
 8002652:	dbf1      	blt.n	8002638 <_write+0x12>
	}
	return len;
 8002654:	687b      	ldr	r3, [r7, #4]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <_close>:

int _close(int file)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
	return -1;
 8002666:	f04f 33ff 	mov.w	r3, #4294967295
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002686:	605a      	str	r2, [r3, #4]
	return 0;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <_isatty>:

int _isatty(int file)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
	return 1;
 800269e:	2301      	movs	r3, #1
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
	return 0;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d0:	4a14      	ldr	r2, [pc, #80]	; (8002724 <_sbrk+0x5c>)
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <_sbrk+0x60>)
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026dc:	4b13      	ldr	r3, [pc, #76]	; (800272c <_sbrk+0x64>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d102      	bne.n	80026ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <_sbrk+0x64>)
 80026e6:	4a12      	ldr	r2, [pc, #72]	; (8002730 <_sbrk+0x68>)
 80026e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ea:	4b10      	ldr	r3, [pc, #64]	; (800272c <_sbrk+0x64>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d207      	bcs.n	8002708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f8:	f00a fe82 	bl	800d400 <__errno>
 80026fc:	4603      	mov	r3, r0
 80026fe:	220c      	movs	r2, #12
 8002700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002702:	f04f 33ff 	mov.w	r3, #4294967295
 8002706:	e009      	b.n	800271c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002708:	4b08      	ldr	r3, [pc, #32]	; (800272c <_sbrk+0x64>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <_sbrk+0x64>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	4a05      	ldr	r2, [pc, #20]	; (800272c <_sbrk+0x64>)
 8002718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800271a:	68fb      	ldr	r3, [r7, #12]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20020000 	.word	0x20020000
 8002728:	00004000 	.word	0x00004000
 800272c:	20000360 	.word	0x20000360
 8002730:	20006998 	.word	0x20006998

08002734 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <SystemInit+0x20>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273e:	4a05      	ldr	r2, [pc, #20]	; (8002754 <SystemInit+0x20>)
 8002740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002790 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800275c:	480d      	ldr	r0, [pc, #52]	; (8002794 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800275e:	490e      	ldr	r1, [pc, #56]	; (8002798 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002760:	4a0e      	ldr	r2, [pc, #56]	; (800279c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002764:	e002      	b.n	800276c <LoopCopyDataInit>

08002766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800276a:	3304      	adds	r3, #4

0800276c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800276c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800276e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002770:	d3f9      	bcc.n	8002766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002772:	4a0b      	ldr	r2, [pc, #44]	; (80027a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002774:	4c0b      	ldr	r4, [pc, #44]	; (80027a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002778:	e001      	b.n	800277e <LoopFillZerobss>

0800277a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800277a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800277c:	3204      	adds	r2, #4

0800277e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800277e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002780:	d3fb      	bcc.n	800277a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002782:	f7ff ffd7 	bl	8002734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002786:	f00a ff37 	bl	800d5f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800278a:	f7ff fb37 	bl	8001dfc <main>
  bx  lr    
 800278e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002790:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002798:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 800279c:	08013868 	.word	0x08013868
  ldr r2, =_sbss
 80027a0:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 80027a4:	20006994 	.word	0x20006994

080027a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027a8:	e7fe      	b.n	80027a8 <ADC_IRQHandler>
	...

080027ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027b0:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <HAL_Init+0x40>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <HAL_Init+0x40>)
 80027b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_Init+0x40>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <HAL_Init+0x40>)
 80027c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_Init+0x40>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a07      	ldr	r2, [pc, #28]	; (80027ec <HAL_Init+0x40>)
 80027ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d4:	2003      	movs	r0, #3
 80027d6:	f000 f8fc 	bl	80029d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027da:	2000      	movs	r0, #0
 80027dc:	f7ff fe60 	bl	80024a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027e0:	f7ff fd12 	bl	8002208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40023c00 	.word	0x40023c00

080027f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <HAL_IncTick+0x20>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <HAL_IncTick+0x24>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4413      	add	r3, r2
 8002800:	4a04      	ldr	r2, [pc, #16]	; (8002814 <HAL_IncTick+0x24>)
 8002802:	6013      	str	r3, [r2, #0]
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000030 	.word	0x20000030
 8002814:	20000364 	.word	0x20000364

08002818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return uwTick;
 800281c:	4b03      	ldr	r3, [pc, #12]	; (800282c <HAL_GetTick+0x14>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20000364 	.word	0x20000364

08002830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002838:	f7ff ffee 	bl	8002818 <HAL_GetTick>
 800283c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002848:	d005      	beq.n	8002856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800284a:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <HAL_Delay+0x44>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4413      	add	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002856:	bf00      	nop
 8002858:	f7ff ffde 	bl	8002818 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	429a      	cmp	r2, r3
 8002866:	d8f7      	bhi.n	8002858 <HAL_Delay+0x28>
  {
  }
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000030 	.word	0x20000030

08002878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002888:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <__NVIC_SetPriorityGrouping+0x44>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002894:	4013      	ands	r3, r2
 8002896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028aa:	4a04      	ldr	r2, [pc, #16]	; (80028bc <__NVIC_SetPriorityGrouping+0x44>)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	60d3      	str	r3, [r2, #12]
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c4:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <__NVIC_GetPriorityGrouping+0x18>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	f003 0307 	and.w	r3, r3, #7
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	db0b      	blt.n	8002906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	f003 021f 	and.w	r2, r3, #31
 80028f4:	4907      	ldr	r1, [pc, #28]	; (8002914 <__NVIC_EnableIRQ+0x38>)
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	2001      	movs	r0, #1
 80028fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000e100 	.word	0xe000e100

08002918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	6039      	str	r1, [r7, #0]
 8002922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002928:	2b00      	cmp	r3, #0
 800292a:	db0a      	blt.n	8002942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	b2da      	uxtb	r2, r3
 8002930:	490c      	ldr	r1, [pc, #48]	; (8002964 <__NVIC_SetPriority+0x4c>)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	0112      	lsls	r2, r2, #4
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	440b      	add	r3, r1
 800293c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002940:	e00a      	b.n	8002958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4908      	ldr	r1, [pc, #32]	; (8002968 <__NVIC_SetPriority+0x50>)
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	3b04      	subs	r3, #4
 8002950:	0112      	lsls	r2, r2, #4
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	440b      	add	r3, r1
 8002956:	761a      	strb	r2, [r3, #24]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000e100 	.word	0xe000e100
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800296c:	b480      	push	{r7}
 800296e:	b089      	sub	sp, #36	; 0x24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f1c3 0307 	rsb	r3, r3, #7
 8002986:	2b04      	cmp	r3, #4
 8002988:	bf28      	it	cs
 800298a:	2304      	movcs	r3, #4
 800298c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3304      	adds	r3, #4
 8002992:	2b06      	cmp	r3, #6
 8002994:	d902      	bls.n	800299c <NVIC_EncodePriority+0x30>
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3b03      	subs	r3, #3
 800299a:	e000      	b.n	800299e <NVIC_EncodePriority+0x32>
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	f04f 32ff 	mov.w	r2, #4294967295
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43da      	mvns	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	401a      	ands	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b4:	f04f 31ff 	mov.w	r1, #4294967295
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	fa01 f303 	lsl.w	r3, r1, r3
 80029be:	43d9      	mvns	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c4:	4313      	orrs	r3, r2
         );
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3724      	adds	r7, #36	; 0x24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff ff4c 	bl	8002878 <__NVIC_SetPriorityGrouping>
}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029fa:	f7ff ff61 	bl	80028c0 <__NVIC_GetPriorityGrouping>
 80029fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	6978      	ldr	r0, [r7, #20]
 8002a06:	f7ff ffb1 	bl	800296c <NVIC_EncodePriority>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a10:	4611      	mov	r1, r2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff ff80 	bl	8002918 <__NVIC_SetPriority>
}
 8002a18:	bf00      	nop
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ff54 	bl	80028dc <__NVIC_EnableIRQ>
}
 8002a34:	bf00      	nop
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a48:	f7ff fee6 	bl	8002818 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e099      	b.n	8002b8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a78:	e00f      	b.n	8002a9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a7a:	f7ff fecd 	bl	8002818 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b05      	cmp	r3, #5
 8002a86:	d908      	bls.n	8002a9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2203      	movs	r2, #3
 8002a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e078      	b.n	8002b8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1e8      	bne.n	8002a7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	4b38      	ldr	r3, [pc, #224]	; (8002b94 <HAL_DMA_Init+0x158>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ade:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d107      	bne.n	8002b04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	4313      	orrs	r3, r2
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f023 0307 	bic.w	r3, r3, #7
 8002b1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d117      	bne.n	8002b5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00e      	beq.n	8002b5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f9e9 	bl	8002f18 <DMA_CheckFifoParam>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2240      	movs	r2, #64	; 0x40
 8002b50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e016      	b.n	8002b8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f9a0 	bl	8002eac <DMA_CalcBaseAndBitshift>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b74:	223f      	movs	r2, #63	; 0x3f
 8002b76:	409a      	lsls	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	f010803f 	.word	0xf010803f

08002b98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ba4:	4b8e      	ldr	r3, [pc, #568]	; (8002de0 <HAL_DMA_IRQHandler+0x248>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a8e      	ldr	r2, [pc, #568]	; (8002de4 <HAL_DMA_IRQHandler+0x24c>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	0a9b      	lsrs	r3, r3, #10
 8002bb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc2:	2208      	movs	r2, #8
 8002bc4:	409a      	lsls	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d01a      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d013      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0204 	bic.w	r2, r2, #4
 8002bea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf0:	2208      	movs	r2, #8
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfc:	f043 0201 	orr.w	r2, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c08:	2201      	movs	r2, #1
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d012      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00b      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c26:	2201      	movs	r2, #1
 8002c28:	409a      	lsls	r2, r3
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c32:	f043 0202 	orr.w	r2, r3, #2
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3e:	2204      	movs	r2, #4
 8002c40:	409a      	lsls	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d012      	beq.n	8002c70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00b      	beq.n	8002c70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5c:	2204      	movs	r2, #4
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c68:	f043 0204 	orr.w	r2, r3, #4
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c74:	2210      	movs	r2, #16
 8002c76:	409a      	lsls	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d043      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d03c      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c92:	2210      	movs	r2, #16
 8002c94:	409a      	lsls	r2, r3
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d018      	beq.n	8002cda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d108      	bne.n	8002cc8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d024      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	4798      	blx	r3
 8002cc6:	e01f      	b.n	8002d08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d01b      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	4798      	blx	r3
 8002cd8:	e016      	b.n	8002d08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d107      	bne.n	8002cf8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0208 	bic.w	r2, r2, #8
 8002cf6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 808f 	beq.w	8002e38 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 8087 	beq.w	8002e38 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2e:	2220      	movs	r2, #32
 8002d30:	409a      	lsls	r2, r3
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b05      	cmp	r3, #5
 8002d40:	d136      	bne.n	8002db0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0216 	bic.w	r2, r2, #22
 8002d50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695a      	ldr	r2, [r3, #20]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d103      	bne.n	8002d72 <HAL_DMA_IRQHandler+0x1da>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d007      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0208 	bic.w	r2, r2, #8
 8002d80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d86:	223f      	movs	r2, #63	; 0x3f
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d07e      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	4798      	blx	r3
        }
        return;
 8002dae:	e079      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d01d      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10d      	bne.n	8002de8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d031      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	4798      	blx	r3
 8002ddc:	e02c      	b.n	8002e38 <HAL_DMA_IRQHandler+0x2a0>
 8002dde:	bf00      	nop
 8002de0:	20000028 	.word	0x20000028
 8002de4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d023      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	4798      	blx	r3
 8002df8:	e01e      	b.n	8002e38 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10f      	bne.n	8002e28 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0210 	bic.w	r2, r2, #16
 8002e16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d032      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d022      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2205      	movs	r2, #5
 8002e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0201 	bic.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	3301      	adds	r3, #1
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d307      	bcc.n	8002e80 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f2      	bne.n	8002e64 <HAL_DMA_IRQHandler+0x2cc>
 8002e7e:	e000      	b.n	8002e82 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e80:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d005      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	4798      	blx	r3
 8002ea2:	e000      	b.n	8002ea6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ea4:	bf00      	nop
    }
  }
}
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	3b10      	subs	r3, #16
 8002ebc:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <DMA_CalcBaseAndBitshift+0x64>)
 8002ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec2:	091b      	lsrs	r3, r3, #4
 8002ec4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ec6:	4a13      	ldr	r2, [pc, #76]	; (8002f14 <DMA_CalcBaseAndBitshift+0x68>)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4413      	add	r3, r2
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2b03      	cmp	r3, #3
 8002ed8:	d909      	bls.n	8002eee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ee2:	f023 0303 	bic.w	r3, r3, #3
 8002ee6:	1d1a      	adds	r2, r3, #4
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	659a      	str	r2, [r3, #88]	; 0x58
 8002eec:	e007      	b.n	8002efe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ef6:	f023 0303 	bic.w	r3, r3, #3
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	aaaaaaab 	.word	0xaaaaaaab
 8002f14:	080137b8 	.word	0x080137b8

08002f18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d11f      	bne.n	8002f72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d856      	bhi.n	8002fe6 <DMA_CheckFifoParam+0xce>
 8002f38:	a201      	add	r2, pc, #4	; (adr r2, 8002f40 <DMA_CheckFifoParam+0x28>)
 8002f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3e:	bf00      	nop
 8002f40:	08002f51 	.word	0x08002f51
 8002f44:	08002f63 	.word	0x08002f63
 8002f48:	08002f51 	.word	0x08002f51
 8002f4c:	08002fe7 	.word	0x08002fe7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d046      	beq.n	8002fea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f60:	e043      	b.n	8002fea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f6a:	d140      	bne.n	8002fee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f70:	e03d      	b.n	8002fee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f7a:	d121      	bne.n	8002fc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d837      	bhi.n	8002ff2 <DMA_CheckFifoParam+0xda>
 8002f82:	a201      	add	r2, pc, #4	; (adr r2, 8002f88 <DMA_CheckFifoParam+0x70>)
 8002f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f88:	08002f99 	.word	0x08002f99
 8002f8c:	08002f9f 	.word	0x08002f9f
 8002f90:	08002f99 	.word	0x08002f99
 8002f94:	08002fb1 	.word	0x08002fb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f9c:	e030      	b.n	8003000 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d025      	beq.n	8002ff6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fae:	e022      	b.n	8002ff6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fb8:	d11f      	bne.n	8002ffa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fbe:	e01c      	b.n	8002ffa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d903      	bls.n	8002fce <DMA_CheckFifoParam+0xb6>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	d003      	beq.n	8002fd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fcc:	e018      	b.n	8003000 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd2:	e015      	b.n	8003000 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00e      	beq.n	8002ffe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe4:	e00b      	b.n	8002ffe <DMA_CheckFifoParam+0xe6>
      break;
 8002fe6:	bf00      	nop
 8002fe8:	e00a      	b.n	8003000 <DMA_CheckFifoParam+0xe8>
      break;
 8002fea:	bf00      	nop
 8002fec:	e008      	b.n	8003000 <DMA_CheckFifoParam+0xe8>
      break;
 8002fee:	bf00      	nop
 8002ff0:	e006      	b.n	8003000 <DMA_CheckFifoParam+0xe8>
      break;
 8002ff2:	bf00      	nop
 8002ff4:	e004      	b.n	8003000 <DMA_CheckFifoParam+0xe8>
      break;
 8002ff6:	bf00      	nop
 8002ff8:	e002      	b.n	8003000 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ffa:	bf00      	nop
 8002ffc:	e000      	b.n	8003000 <DMA_CheckFifoParam+0xe8>
      break;
 8002ffe:	bf00      	nop
    }
  } 
  
  return status; 
 8003000:	7bfb      	ldrb	r3, [r7, #15]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop

08003010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003010:	b480      	push	{r7}
 8003012:	b089      	sub	sp, #36	; 0x24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800301e:	2300      	movs	r3, #0
 8003020:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003022:	2300      	movs	r3, #0
 8003024:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
 800302a:	e159      	b.n	80032e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800302c:	2201      	movs	r2, #1
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4013      	ands	r3, r2
 800303e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	429a      	cmp	r2, r3
 8003046:	f040 8148 	bne.w	80032da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b01      	cmp	r3, #1
 8003054:	d005      	beq.n	8003062 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800305e:	2b02      	cmp	r3, #2
 8003060:	d130      	bne.n	80030c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	2203      	movs	r2, #3
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003098:	2201      	movs	r2, #1
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	091b      	lsrs	r3, r3, #4
 80030ae:	f003 0201 	and.w	r2, r3, #1
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d017      	beq.n	8003100 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	2203      	movs	r2, #3
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d123      	bne.n	8003154 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	08da      	lsrs	r2, r3, #3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3208      	adds	r2, #8
 8003114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003118:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	220f      	movs	r2, #15
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4013      	ands	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4313      	orrs	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	08da      	lsrs	r2, r3, #3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3208      	adds	r2, #8
 800314e:	69b9      	ldr	r1, [r7, #24]
 8003150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	2203      	movs	r2, #3
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 0203 	and.w	r2, r3, #3
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 80a2 	beq.w	80032da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	4b57      	ldr	r3, [pc, #348]	; (80032f8 <HAL_GPIO_Init+0x2e8>)
 800319c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319e:	4a56      	ldr	r2, [pc, #344]	; (80032f8 <HAL_GPIO_Init+0x2e8>)
 80031a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031a4:	6453      	str	r3, [r2, #68]	; 0x44
 80031a6:	4b54      	ldr	r3, [pc, #336]	; (80032f8 <HAL_GPIO_Init+0x2e8>)
 80031a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031b2:	4a52      	ldr	r2, [pc, #328]	; (80032fc <HAL_GPIO_Init+0x2ec>)
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	089b      	lsrs	r3, r3, #2
 80031b8:	3302      	adds	r3, #2
 80031ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	220f      	movs	r2, #15
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43db      	mvns	r3, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4013      	ands	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a49      	ldr	r2, [pc, #292]	; (8003300 <HAL_GPIO_Init+0x2f0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d019      	beq.n	8003212 <HAL_GPIO_Init+0x202>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a48      	ldr	r2, [pc, #288]	; (8003304 <HAL_GPIO_Init+0x2f4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d013      	beq.n	800320e <HAL_GPIO_Init+0x1fe>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a47      	ldr	r2, [pc, #284]	; (8003308 <HAL_GPIO_Init+0x2f8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d00d      	beq.n	800320a <HAL_GPIO_Init+0x1fa>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a46      	ldr	r2, [pc, #280]	; (800330c <HAL_GPIO_Init+0x2fc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d007      	beq.n	8003206 <HAL_GPIO_Init+0x1f6>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a45      	ldr	r2, [pc, #276]	; (8003310 <HAL_GPIO_Init+0x300>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d101      	bne.n	8003202 <HAL_GPIO_Init+0x1f2>
 80031fe:	2304      	movs	r3, #4
 8003200:	e008      	b.n	8003214 <HAL_GPIO_Init+0x204>
 8003202:	2307      	movs	r3, #7
 8003204:	e006      	b.n	8003214 <HAL_GPIO_Init+0x204>
 8003206:	2303      	movs	r3, #3
 8003208:	e004      	b.n	8003214 <HAL_GPIO_Init+0x204>
 800320a:	2302      	movs	r3, #2
 800320c:	e002      	b.n	8003214 <HAL_GPIO_Init+0x204>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <HAL_GPIO_Init+0x204>
 8003212:	2300      	movs	r3, #0
 8003214:	69fa      	ldr	r2, [r7, #28]
 8003216:	f002 0203 	and.w	r2, r2, #3
 800321a:	0092      	lsls	r2, r2, #2
 800321c:	4093      	lsls	r3, r2
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4313      	orrs	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003224:	4935      	ldr	r1, [pc, #212]	; (80032fc <HAL_GPIO_Init+0x2ec>)
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	089b      	lsrs	r3, r3, #2
 800322a:	3302      	adds	r3, #2
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003232:	4b38      	ldr	r3, [pc, #224]	; (8003314 <HAL_GPIO_Init+0x304>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	43db      	mvns	r3, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4013      	ands	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003256:	4a2f      	ldr	r2, [pc, #188]	; (8003314 <HAL_GPIO_Init+0x304>)
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800325c:	4b2d      	ldr	r3, [pc, #180]	; (8003314 <HAL_GPIO_Init+0x304>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	43db      	mvns	r3, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003280:	4a24      	ldr	r2, [pc, #144]	; (8003314 <HAL_GPIO_Init+0x304>)
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003286:	4b23      	ldr	r3, [pc, #140]	; (8003314 <HAL_GPIO_Init+0x304>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	43db      	mvns	r3, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4013      	ands	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032aa:	4a1a      	ldr	r2, [pc, #104]	; (8003314 <HAL_GPIO_Init+0x304>)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032b0:	4b18      	ldr	r3, [pc, #96]	; (8003314 <HAL_GPIO_Init+0x304>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	43db      	mvns	r3, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4013      	ands	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032d4:	4a0f      	ldr	r2, [pc, #60]	; (8003314 <HAL_GPIO_Init+0x304>)
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	3301      	adds	r3, #1
 80032de:	61fb      	str	r3, [r7, #28]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	2b0f      	cmp	r3, #15
 80032e4:	f67f aea2 	bls.w	800302c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032e8:	bf00      	nop
 80032ea:	bf00      	nop
 80032ec:	3724      	adds	r7, #36	; 0x24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40013800 	.word	0x40013800
 8003300:	40020000 	.word	0x40020000
 8003304:	40020400 	.word	0x40020400
 8003308:	40020800 	.word	0x40020800
 800330c:	40020c00 	.word	0x40020c00
 8003310:	40021000 	.word	0x40021000
 8003314:	40013c00 	.word	0x40013c00

08003318 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	887b      	ldrh	r3, [r7, #2]
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003330:	2301      	movs	r3, #1
 8003332:	73fb      	strb	r3, [r7, #15]
 8003334:	e001      	b.n	800333a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003336:	2300      	movs	r3, #0
 8003338:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800333a:	7bfb      	ldrb	r3, [r7, #15]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	807b      	strh	r3, [r7, #2]
 8003354:	4613      	mov	r3, r2
 8003356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003358:	787b      	ldrb	r3, [r7, #1]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800335e:	887a      	ldrh	r2, [r7, #2]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003364:	e003      	b.n	800336e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003366:	887b      	ldrh	r3, [r7, #2]
 8003368:	041a      	lsls	r2, r3, #16
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	619a      	str	r2, [r3, #24]
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e12b      	b.n	80035e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7fe ff5c 	bl	8002260 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2224      	movs	r2, #36	; 0x24
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0201 	bic.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033e0:	f001 ffbe 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 80033e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	4a81      	ldr	r2, [pc, #516]	; (80035f0 <HAL_I2C_Init+0x274>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d807      	bhi.n	8003400 <HAL_I2C_Init+0x84>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4a80      	ldr	r2, [pc, #512]	; (80035f4 <HAL_I2C_Init+0x278>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	bf94      	ite	ls
 80033f8:	2301      	movls	r3, #1
 80033fa:	2300      	movhi	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	e006      	b.n	800340e <HAL_I2C_Init+0x92>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4a7d      	ldr	r2, [pc, #500]	; (80035f8 <HAL_I2C_Init+0x27c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	bf94      	ite	ls
 8003408:	2301      	movls	r3, #1
 800340a:	2300      	movhi	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e0e7      	b.n	80035e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4a78      	ldr	r2, [pc, #480]	; (80035fc <HAL_I2C_Init+0x280>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	0c9b      	lsrs	r3, r3, #18
 8003420:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	4a6a      	ldr	r2, [pc, #424]	; (80035f0 <HAL_I2C_Init+0x274>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d802      	bhi.n	8003450 <HAL_I2C_Init+0xd4>
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	3301      	adds	r3, #1
 800344e:	e009      	b.n	8003464 <HAL_I2C_Init+0xe8>
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003456:	fb02 f303 	mul.w	r3, r2, r3
 800345a:	4a69      	ldr	r2, [pc, #420]	; (8003600 <HAL_I2C_Init+0x284>)
 800345c:	fba2 2303 	umull	r2, r3, r2, r3
 8003460:	099b      	lsrs	r3, r3, #6
 8003462:	3301      	adds	r3, #1
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	430b      	orrs	r3, r1
 800346a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003476:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	495c      	ldr	r1, [pc, #368]	; (80035f0 <HAL_I2C_Init+0x274>)
 8003480:	428b      	cmp	r3, r1
 8003482:	d819      	bhi.n	80034b8 <HAL_I2C_Init+0x13c>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	1e59      	subs	r1, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003492:	1c59      	adds	r1, r3, #1
 8003494:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003498:	400b      	ands	r3, r1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_I2C_Init+0x138>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	1e59      	subs	r1, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ac:	3301      	adds	r3, #1
 80034ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b2:	e051      	b.n	8003558 <HAL_I2C_Init+0x1dc>
 80034b4:	2304      	movs	r3, #4
 80034b6:	e04f      	b.n	8003558 <HAL_I2C_Init+0x1dc>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d111      	bne.n	80034e4 <HAL_I2C_Init+0x168>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1e58      	subs	r0, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6859      	ldr	r1, [r3, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	440b      	add	r3, r1
 80034ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80034d2:	3301      	adds	r3, #1
 80034d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bf0c      	ite	eq
 80034dc:	2301      	moveq	r3, #1
 80034de:	2300      	movne	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	e012      	b.n	800350a <HAL_I2C_Init+0x18e>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1e58      	subs	r0, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	0099      	lsls	r1, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034fa:	3301      	adds	r3, #1
 80034fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003500:	2b00      	cmp	r3, #0
 8003502:	bf0c      	ite	eq
 8003504:	2301      	moveq	r3, #1
 8003506:	2300      	movne	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_I2C_Init+0x196>
 800350e:	2301      	movs	r3, #1
 8003510:	e022      	b.n	8003558 <HAL_I2C_Init+0x1dc>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10e      	bne.n	8003538 <HAL_I2C_Init+0x1bc>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1e58      	subs	r0, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6859      	ldr	r1, [r3, #4]
 8003522:	460b      	mov	r3, r1
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	440b      	add	r3, r1
 8003528:	fbb0 f3f3 	udiv	r3, r0, r3
 800352c:	3301      	adds	r3, #1
 800352e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003536:	e00f      	b.n	8003558 <HAL_I2C_Init+0x1dc>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	1e58      	subs	r0, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6859      	ldr	r1, [r3, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	0099      	lsls	r1, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	fbb0 f3f3 	udiv	r3, r0, r3
 800354e:	3301      	adds	r3, #1
 8003550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003554:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	6809      	ldr	r1, [r1, #0]
 800355c:	4313      	orrs	r3, r2
 800355e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69da      	ldr	r2, [r3, #28]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003586:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6911      	ldr	r1, [r2, #16]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68d2      	ldr	r2, [r2, #12]
 8003592:	4311      	orrs	r1, r2
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	430b      	orrs	r3, r1
 800359a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695a      	ldr	r2, [r3, #20]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	000186a0 	.word	0x000186a0
 80035f4:	001e847f 	.word	0x001e847f
 80035f8:	003d08ff 	.word	0x003d08ff
 80035fc:	431bde83 	.word	0x431bde83
 8003600:	10624dd3 	.word	0x10624dd3

08003604 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003606:	b08f      	sub	sp, #60	; 0x3c
 8003608:	af0a      	add	r7, sp, #40	; 0x28
 800360a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e10f      	b.n	8003836 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d106      	bne.n	8003636 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f009 fbdb 	bl	800cdec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2203      	movs	r2, #3
 800363a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d102      	bne.n	8003650 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f003 f970 	bl	800693a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	687e      	ldr	r6, [r7, #4]
 8003662:	466d      	mov	r5, sp
 8003664:	f106 0410 	add.w	r4, r6, #16
 8003668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800366a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800366c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800366e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003670:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003674:	e885 0003 	stmia.w	r5, {r0, r1}
 8003678:	1d33      	adds	r3, r6, #4
 800367a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800367c:	6838      	ldr	r0, [r7, #0]
 800367e:	f003 f847 	bl	8006710 <USB_CoreInit>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0d0      	b.n	8003836 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2100      	movs	r1, #0
 800369a:	4618      	mov	r0, r3
 800369c:	f003 f95e 	bl	800695c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a0:	2300      	movs	r3, #0
 80036a2:	73fb      	strb	r3, [r7, #15]
 80036a4:	e04a      	b.n	800373c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036a6:	7bfa      	ldrb	r2, [r7, #15]
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	333d      	adds	r3, #61	; 0x3d
 80036b6:	2201      	movs	r2, #1
 80036b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036ba:	7bfa      	ldrb	r2, [r7, #15]
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	333c      	adds	r3, #60	; 0x3c
 80036ca:	7bfa      	ldrb	r2, [r7, #15]
 80036cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036ce:	7bfa      	ldrb	r2, [r7, #15]
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	b298      	uxth	r0, r3
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	3344      	adds	r3, #68	; 0x44
 80036e2:	4602      	mov	r2, r0
 80036e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036e6:	7bfa      	ldrb	r2, [r7, #15]
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	440b      	add	r3, r1
 80036f4:	3340      	adds	r3, #64	; 0x40
 80036f6:	2200      	movs	r2, #0
 80036f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036fa:	7bfa      	ldrb	r2, [r7, #15]
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	3348      	adds	r3, #72	; 0x48
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800370e:	7bfa      	ldrb	r2, [r7, #15]
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	334c      	adds	r3, #76	; 0x4c
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003722:	7bfa      	ldrb	r2, [r7, #15]
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	4613      	mov	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	4413      	add	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	440b      	add	r3, r1
 8003730:	3354      	adds	r3, #84	; 0x54
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003736:	7bfb      	ldrb	r3, [r7, #15]
 8003738:	3301      	adds	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
 800373c:	7bfa      	ldrb	r2, [r7, #15]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	429a      	cmp	r2, r3
 8003744:	d3af      	bcc.n	80036a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003746:	2300      	movs	r3, #0
 8003748:	73fb      	strb	r3, [r7, #15]
 800374a:	e044      	b.n	80037d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800374c:	7bfa      	ldrb	r2, [r7, #15]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800375e:	2200      	movs	r2, #0
 8003760:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003762:	7bfa      	ldrb	r2, [r7, #15]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003774:	7bfa      	ldrb	r2, [r7, #15]
 8003776:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003778:	7bfa      	ldrb	r2, [r7, #15]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	4413      	add	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800378a:	2200      	movs	r2, #0
 800378c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800378e:	7bfa      	ldrb	r2, [r7, #15]
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037a4:	7bfa      	ldrb	r2, [r7, #15]
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037ba:	7bfa      	ldrb	r2, [r7, #15]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
 80037d2:	3301      	adds	r3, #1
 80037d4:	73fb      	strb	r3, [r7, #15]
 80037d6:	7bfa      	ldrb	r2, [r7, #15]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d3b5      	bcc.n	800374c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	603b      	str	r3, [r7, #0]
 80037e6:	687e      	ldr	r6, [r7, #4]
 80037e8:	466d      	mov	r5, sp
 80037ea:	f106 0410 	add.w	r4, r6, #16
 80037ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80037fe:	1d33      	adds	r3, r6, #4
 8003800:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003802:	6838      	ldr	r0, [r7, #0]
 8003804:	f003 f8f6 	bl	80069f4 <USB_DevInit>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d005      	beq.n	800381a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2202      	movs	r2, #2
 8003812:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e00d      	b.n	8003836 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f004 fa45 	bl	8007cbe <USB_DevDisconnect>

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800383e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b084      	sub	sp, #16
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_PCD_Start+0x1c>
 8003856:	2302      	movs	r3, #2
 8003858:	e020      	b.n	800389c <HAL_PCD_Start+0x5e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003866:	2b01      	cmp	r3, #1
 8003868:	d109      	bne.n	800387e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800386e:	2b01      	cmp	r3, #1
 8003870:	d005      	beq.n	800387e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003876:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f003 f848 	bl	8006918 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f004 f9f5 	bl	8007c7c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038a4:	b590      	push	{r4, r7, lr}
 80038a6:	b08d      	sub	sp, #52	; 0x34
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f004 fab3 	bl	8007e26 <USB_GetMode>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f040 848a 	bne.w	80041dc <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f004 fa17 	bl	8007d00 <USB_ReadInterrupts>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 8480 	beq.w	80041da <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	0a1b      	lsrs	r3, r3, #8
 80038e4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f004 fa04 	bl	8007d00 <USB_ReadInterrupts>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d107      	bne.n	8003912 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695a      	ldr	r2, [r3, #20]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f002 0202 	and.w	r2, r2, #2
 8003910:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f004 f9f2 	bl	8007d00 <USB_ReadInterrupts>
 800391c:	4603      	mov	r3, r0
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b10      	cmp	r3, #16
 8003924:	d161      	bne.n	80039ea <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	699a      	ldr	r2, [r3, #24]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0210 	bic.w	r2, r2, #16
 8003934:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	f003 020f 	and.w	r2, r3, #15
 8003942:	4613      	mov	r3, r2
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	4413      	add	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	4413      	add	r3, r2
 8003952:	3304      	adds	r3, #4
 8003954:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	0c5b      	lsrs	r3, r3, #17
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	2b02      	cmp	r3, #2
 8003960:	d124      	bne.n	80039ac <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003968:	4013      	ands	r3, r2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d035      	beq.n	80039da <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	091b      	lsrs	r3, r3, #4
 8003976:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003978:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800397c:	b29b      	uxth	r3, r3
 800397e:	461a      	mov	r2, r3
 8003980:	6a38      	ldr	r0, [r7, #32]
 8003982:	f004 f829 	bl	80079d8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	691a      	ldr	r2, [r3, #16]
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	091b      	lsrs	r3, r3, #4
 800398e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003992:	441a      	add	r2, r3
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	6a1a      	ldr	r2, [r3, #32]
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039a4:	441a      	add	r2, r3
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	621a      	str	r2, [r3, #32]
 80039aa:	e016      	b.n	80039da <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	0c5b      	lsrs	r3, r3, #17
 80039b0:	f003 030f 	and.w	r3, r3, #15
 80039b4:	2b06      	cmp	r3, #6
 80039b6:	d110      	bne.n	80039da <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039be:	2208      	movs	r2, #8
 80039c0:	4619      	mov	r1, r3
 80039c2:	6a38      	ldr	r0, [r7, #32]
 80039c4:	f004 f808 	bl	80079d8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	6a1a      	ldr	r2, [r3, #32]
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	091b      	lsrs	r3, r3, #4
 80039d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039d4:	441a      	add	r2, r3
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	699a      	ldr	r2, [r3, #24]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f042 0210 	orr.w	r2, r2, #16
 80039e8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f004 f986 	bl	8007d00 <USB_ReadInterrupts>
 80039f4:	4603      	mov	r3, r0
 80039f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039fe:	f040 80a7 	bne.w	8003b50 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f004 f98b 	bl	8007d26 <USB_ReadDevAllOutEpInterrupt>
 8003a10:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003a12:	e099      	b.n	8003b48 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 808e 	beq.w	8003b3c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	4611      	mov	r1, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f004 f9af 	bl	8007d8e <USB_ReadDevOutEPInterrupt>
 8003a30:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00c      	beq.n	8003a56 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fec3 	bl	80047dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00c      	beq.n	8003a7a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	2308      	movs	r3, #8
 8003a70:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 ff99 	bl	80049ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f003 0310 	and.w	r3, r3, #16
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a90:	461a      	mov	r2, r3
 8003a92:	2310      	movs	r3, #16
 8003a94:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d030      	beq.n	8003b02 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa8:	2b80      	cmp	r3, #128	; 0x80
 8003aaa:	d109      	bne.n	8003ac0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	69fa      	ldr	r2, [r7, #28]
 8003ab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003abe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	78db      	ldrb	r3, [r3, #3]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d108      	bne.n	8003af0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	4619      	mov	r1, r3
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f009 fa7a 	bl	800cfe4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afc:	461a      	mov	r2, r3
 8003afe:	2302      	movs	r3, #2
 8003b00:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b18:	461a      	mov	r2, r3
 8003b1a:	2320      	movs	r3, #32
 8003b1c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d009      	beq.n	8003b3c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b34:	461a      	mov	r2, r3
 8003b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b3a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	3301      	adds	r3, #1
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b44:	085b      	lsrs	r3, r3, #1
 8003b46:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f47f af62 	bne.w	8003a14 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f004 f8d3 	bl	8007d00 <USB_ReadInterrupts>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b64:	f040 80db 	bne.w	8003d1e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f004 f8f4 	bl	8007d5a <USB_ReadDevAllInEpInterrupt>
 8003b72:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003b78:	e0cd      	b.n	8003d16 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 80c2 	beq.w	8003d0a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	4611      	mov	r1, r2
 8003b90:	4618      	mov	r0, r3
 8003b92:	f004 f91a 	bl	8007dca <USB_ReadDevInEPInterrupt>
 8003b96:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d057      	beq.n	8003c52 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	f003 030f 	and.w	r3, r3, #15
 8003ba8:	2201      	movs	r2, #1
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	69f9      	ldr	r1, [r7, #28]
 8003bbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d132      	bne.n	8003c46 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be4:	4613      	mov	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4413      	add	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	334c      	adds	r3, #76	; 0x4c
 8003bf0:	6819      	ldr	r1, [r3, #0]
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4403      	add	r3, r0
 8003c00:	3348      	adds	r3, #72	; 0x48
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4419      	add	r1, r3
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	4413      	add	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4403      	add	r3, r0
 8003c14:	334c      	adds	r3, #76	; 0x4c
 8003c16:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d113      	bne.n	8003c46 <HAL_PCD_IRQHandler+0x3a2>
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c22:	4613      	mov	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	4413      	add	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	3354      	adds	r3, #84	; 0x54
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d108      	bne.n	8003c46 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c3e:	461a      	mov	r2, r3
 8003c40:	2101      	movs	r1, #1
 8003c42:	f004 f921 	bl	8007e88 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f009 f94e 	bl	800ceee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d008      	beq.n	8003c6e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c68:	461a      	mov	r2, r3
 8003c6a:	2308      	movs	r3, #8
 8003c6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c84:	461a      	mov	r2, r3
 8003c86:	2310      	movs	r3, #16
 8003c88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	2340      	movs	r3, #64	; 0x40
 8003ca4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d023      	beq.n	8003cf8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003cb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cb2:	6a38      	ldr	r0, [r7, #32]
 8003cb4:	f003 f802 	bl	8006cbc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cba:	4613      	mov	r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	3338      	adds	r3, #56	; 0x38
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3304      	adds	r3, #4
 8003cca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	78db      	ldrb	r3, [r3, #3]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d108      	bne.n	8003ce6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	4619      	mov	r1, r3
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f009 f991 	bl	800d008 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fcdb 	bl	80046c0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d12:	085b      	lsrs	r3, r3, #1
 8003d14:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f47f af2e 	bne.w	8003b7a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f003 ffec 	bl	8007d00 <USB_ReadInterrupts>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d32:	d122      	bne.n	8003d7a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	69fa      	ldr	r2, [r7, #28]
 8003d3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d42:	f023 0301 	bic.w	r3, r3, #1
 8003d46:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d108      	bne.n	8003d64 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 fec3 	bl	8004ae8 <HAL_PCDEx_LPM_Callback>
 8003d62:	e002      	b.n	8003d6a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f009 f92f 	bl	800cfc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695a      	ldr	r2, [r3, #20]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003d78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f003 ffbe 	bl	8007d00 <USB_ReadInterrupts>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d8e:	d112      	bne.n	8003db6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d102      	bne.n	8003da6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f009 f8eb 	bl	800cf7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695a      	ldr	r2, [r3, #20]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003db4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f003 ffa0 	bl	8007d00 <USB_ReadInterrupts>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dca:	f040 80b7 	bne.w	8003f3c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	69fa      	ldr	r2, [r7, #28]
 8003dd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ddc:	f023 0301 	bic.w	r3, r3, #1
 8003de0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2110      	movs	r1, #16
 8003de8:	4618      	mov	r0, r3
 8003dea:	f002 ff67 	bl	8006cbc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dee:	2300      	movs	r3, #0
 8003df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003df2:	e046      	b.n	8003e82 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e00:	461a      	mov	r2, r3
 8003e02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e06:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e18:	0151      	lsls	r1, r2, #5
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	440a      	add	r2, r1
 8003e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e26:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e34:	461a      	mov	r2, r3
 8003e36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e3a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e4c:	0151      	lsls	r1, r2, #5
 8003e4e:	69fa      	ldr	r2, [r7, #28]
 8003e50:	440a      	add	r2, r1
 8003e52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e5a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e6c:	0151      	lsls	r1, r2, #5
 8003e6e:	69fa      	ldr	r2, [r7, #28]
 8003e70:	440a      	add	r2, r1
 8003e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e7a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7e:	3301      	adds	r3, #1
 8003e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d3b3      	bcc.n	8003df4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	69fa      	ldr	r2, [r7, #28]
 8003e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e9a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003e9e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d016      	beq.n	8003ed6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eb8:	f043 030b 	orr.w	r3, r3, #11
 8003ebc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec8:	69fa      	ldr	r2, [r7, #28]
 8003eca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ece:	f043 030b 	orr.w	r3, r3, #11
 8003ed2:	6453      	str	r3, [r2, #68]	; 0x44
 8003ed4:	e015      	b.n	8003f02 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	69fa      	ldr	r2, [r7, #28]
 8003ee0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ee4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ee8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003eec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003efc:	f043 030b 	orr.w	r3, r3, #11
 8003f00:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69fa      	ldr	r2, [r7, #28]
 8003f0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f10:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003f14:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f26:	461a      	mov	r2, r3
 8003f28:	f003 ffae 	bl	8007e88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695a      	ldr	r2, [r3, #20]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003f3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f003 fedd 	bl	8007d00 <USB_ReadInterrupts>
 8003f46:	4603      	mov	r3, r0
 8003f48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f50:	d124      	bne.n	8003f9c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f003 ff73 	bl	8007e42 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f002 ff28 	bl	8006db6 <USB_GetDevSpeed>
 8003f66:	4603      	mov	r3, r0
 8003f68:	461a      	mov	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681c      	ldr	r4, [r3, #0]
 8003f72:	f001 f9e9 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 8003f76:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4620      	mov	r0, r4
 8003f82:	f002 fc27 	bl	80067d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f008 ffd9 	bl	800cf3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003f9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f003 fead 	bl	8007d00 <USB_ReadInterrupts>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d10a      	bne.n	8003fc6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f008 ffb6 	bl	800cf22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695a      	ldr	r2, [r3, #20]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f002 0208 	and.w	r2, r2, #8
 8003fc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f003 fe98 	bl	8007d00 <USB_ReadInterrupts>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd6:	2b80      	cmp	r3, #128	; 0x80
 8003fd8:	d122      	bne.n	8004020 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fea:	e014      	b.n	8004016 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d105      	bne.n	8004010 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	b2db      	uxtb	r3, r3
 8004008:	4619      	mov	r1, r3
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 fb27 	bl	800465e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	3301      	adds	r3, #1
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401c:	429a      	cmp	r2, r3
 800401e:	d3e5      	bcc.n	8003fec <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f003 fe6b 	bl	8007d00 <USB_ReadInterrupts>
 800402a:	4603      	mov	r3, r0
 800402c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004030:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004034:	d13b      	bne.n	80040ae <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004036:	2301      	movs	r3, #1
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
 800403a:	e02b      	b.n	8004094 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004050:	4613      	mov	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	4413      	add	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	3340      	adds	r3, #64	; 0x40
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d115      	bne.n	800408e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004062:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004064:	2b00      	cmp	r3, #0
 8004066:	da12      	bge.n	800408e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406c:	4613      	mov	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	4413      	add	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	333f      	adds	r3, #63	; 0x3f
 8004078:	2201      	movs	r2, #1
 800407a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	b2db      	uxtb	r3, r3
 8004080:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004084:	b2db      	uxtb	r3, r3
 8004086:	4619      	mov	r1, r3
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fae8 	bl	800465e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	3301      	adds	r3, #1
 8004092:	627b      	str	r3, [r7, #36]	; 0x24
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800409a:	429a      	cmp	r2, r3
 800409c:	d3ce      	bcc.n	800403c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695a      	ldr	r2, [r3, #20]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80040ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f003 fe24 	bl	8007d00 <USB_ReadInterrupts>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040c2:	d155      	bne.n	8004170 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040c4:	2301      	movs	r3, #1
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
 80040c8:	e045      	b.n	8004156 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040de:	4613      	mov	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d12e      	bne.n	8004150 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80040f2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	da2b      	bge.n	8004150 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004104:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004108:	429a      	cmp	r2, r3
 800410a:	d121      	bne.n	8004150 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004110:	4613      	mov	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800411e:	2201      	movs	r2, #1
 8004120:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10a      	bne.n	8004150 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004148:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800414c:	6053      	str	r3, [r2, #4]
            break;
 800414e:	e007      	b.n	8004160 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	3301      	adds	r3, #1
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415c:	429a      	cmp	r2, r3
 800415e:	d3b4      	bcc.n	80040ca <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800416e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4618      	mov	r0, r3
 8004176:	f003 fdc3 	bl	8007d00 <USB_ReadInterrupts>
 800417a:	4603      	mov	r3, r0
 800417c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004184:	d10a      	bne.n	800419c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f008 ff50 	bl	800d02c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695a      	ldr	r2, [r3, #20]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800419a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f003 fdad 	bl	8007d00 <USB_ReadInterrupts>
 80041a6:	4603      	mov	r3, r0
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d115      	bne.n	80041dc <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f008 ff40 	bl	800d048 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6859      	ldr	r1, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	605a      	str	r2, [r3, #4]
 80041d8:	e000      	b.n	80041dc <HAL_PCD_IRQHandler+0x938>
      return;
 80041da:	bf00      	nop
    }
  }
}
 80041dc:	3734      	adds	r7, #52	; 0x34
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd90      	pop	{r4, r7, pc}

080041e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b082      	sub	sp, #8
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	460b      	mov	r3, r1
 80041ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_PCD_SetAddress+0x1a>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e013      	b.n	8004224 <HAL_PCD_SetAddress+0x42>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	78fa      	ldrb	r2, [r7, #3]
 8004208:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	78fa      	ldrb	r2, [r7, #3]
 8004212:	4611      	mov	r1, r2
 8004214:	4618      	mov	r0, r3
 8004216:	f003 fd0b 	bl	8007c30 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	4608      	mov	r0, r1
 8004236:	4611      	mov	r1, r2
 8004238:	461a      	mov	r2, r3
 800423a:	4603      	mov	r3, r0
 800423c:	70fb      	strb	r3, [r7, #3]
 800423e:	460b      	mov	r3, r1
 8004240:	803b      	strh	r3, [r7, #0]
 8004242:	4613      	mov	r3, r2
 8004244:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800424a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800424e:	2b00      	cmp	r3, #0
 8004250:	da0f      	bge.n	8004272 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004252:	78fb      	ldrb	r3, [r7, #3]
 8004254:	f003 020f 	and.w	r2, r3, #15
 8004258:	4613      	mov	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	4413      	add	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	3338      	adds	r3, #56	; 0x38
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	4413      	add	r3, r2
 8004266:	3304      	adds	r3, #4
 8004268:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	705a      	strb	r2, [r3, #1]
 8004270:	e00f      	b.n	8004292 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004272:	78fb      	ldrb	r3, [r7, #3]
 8004274:	f003 020f 	and.w	r2, r3, #15
 8004278:	4613      	mov	r3, r2
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	4413      	add	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	4413      	add	r3, r2
 8004288:	3304      	adds	r3, #4
 800428a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004292:	78fb      	ldrb	r3, [r7, #3]
 8004294:	f003 030f 	and.w	r3, r3, #15
 8004298:	b2da      	uxtb	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800429e:	883a      	ldrh	r2, [r7, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	78ba      	ldrb	r2, [r7, #2]
 80042a8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	785b      	ldrb	r3, [r3, #1]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d004      	beq.n	80042bc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80042bc:	78bb      	ldrb	r3, [r7, #2]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d102      	bne.n	80042c8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <HAL_PCD_EP_Open+0xaa>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e00e      	b.n	80042f4 <HAL_PCD_EP_Open+0xc8>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68f9      	ldr	r1, [r7, #12]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f002 fd8b 	bl	8006e00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80042f2:	7afb      	ldrb	r3, [r7, #11]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004308:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800430c:	2b00      	cmp	r3, #0
 800430e:	da0f      	bge.n	8004330 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004310:	78fb      	ldrb	r3, [r7, #3]
 8004312:	f003 020f 	and.w	r2, r3, #15
 8004316:	4613      	mov	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	3338      	adds	r3, #56	; 0x38
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	4413      	add	r3, r2
 8004324:	3304      	adds	r3, #4
 8004326:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2201      	movs	r2, #1
 800432c:	705a      	strb	r2, [r3, #1]
 800432e:	e00f      	b.n	8004350 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	f003 020f 	and.w	r2, r3, #15
 8004336:	4613      	mov	r3, r2
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	4413      	add	r3, r2
 8004346:	3304      	adds	r3, #4
 8004348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	b2da      	uxtb	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <HAL_PCD_EP_Close+0x6e>
 8004366:	2302      	movs	r3, #2
 8004368:	e00e      	b.n	8004388 <HAL_PCD_EP_Close+0x8c>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68f9      	ldr	r1, [r7, #12]
 8004378:	4618      	mov	r0, r3
 800437a:	f002 fdc9 	bl	8006f10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	607a      	str	r2, [r7, #4]
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	460b      	mov	r3, r1
 800439e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043a0:	7afb      	ldrb	r3, [r7, #11]
 80043a2:	f003 020f 	and.w	r2, r3, #15
 80043a6:	4613      	mov	r3, r2
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	4413      	add	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4413      	add	r3, r2
 80043b6:	3304      	adds	r3, #4
 80043b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2200      	movs	r2, #0
 80043ca:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2200      	movs	r2, #0
 80043d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043d2:	7afb      	ldrb	r3, [r7, #11]
 80043d4:	f003 030f 	and.w	r3, r3, #15
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d102      	bne.n	80043ec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043ec:	7afb      	ldrb	r3, [r7, #11]
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d109      	bne.n	800440a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	461a      	mov	r2, r3
 8004402:	6979      	ldr	r1, [r7, #20]
 8004404:	f003 f8a8 	bl	8007558 <USB_EP0StartXfer>
 8004408:	e008      	b.n	800441c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	b2db      	uxtb	r3, r3
 8004414:	461a      	mov	r2, r3
 8004416:	6979      	ldr	r1, [r7, #20]
 8004418:	f002 fe56 	bl	80070c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	460b      	mov	r3, r1
 8004430:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	f003 020f 	and.w	r2, r3, #15
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	4613      	mov	r3, r2
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	4413      	add	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	440b      	add	r3, r1
 8004444:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004448:	681b      	ldr	r3, [r3, #0]
}
 800444a:	4618      	mov	r0, r3
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b086      	sub	sp, #24
 800445a:	af00      	add	r7, sp, #0
 800445c:	60f8      	str	r0, [r7, #12]
 800445e:	607a      	str	r2, [r7, #4]
 8004460:	603b      	str	r3, [r7, #0]
 8004462:	460b      	mov	r3, r1
 8004464:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004466:	7afb      	ldrb	r3, [r7, #11]
 8004468:	f003 020f 	and.w	r2, r3, #15
 800446c:	4613      	mov	r3, r2
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	3338      	adds	r3, #56	; 0x38
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4413      	add	r3, r2
 800447a:	3304      	adds	r3, #4
 800447c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2200      	movs	r2, #0
 800448e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	2201      	movs	r2, #1
 8004494:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004496:	7afb      	ldrb	r3, [r7, #11]
 8004498:	f003 030f 	and.w	r3, r3, #15
 800449c:	b2da      	uxtb	r2, r3
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d102      	bne.n	80044b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044b0:	7afb      	ldrb	r3, [r7, #11]
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d109      	bne.n	80044ce <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6818      	ldr	r0, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	461a      	mov	r2, r3
 80044c6:	6979      	ldr	r1, [r7, #20]
 80044c8:	f003 f846 	bl	8007558 <USB_EP0StartXfer>
 80044cc:	e008      	b.n	80044e0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6818      	ldr	r0, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	461a      	mov	r2, r3
 80044da:	6979      	ldr	r1, [r7, #20]
 80044dc:	f002 fdf4 	bl	80070c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	460b      	mov	r3, r1
 80044f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80044f6:	78fb      	ldrb	r3, [r7, #3]
 80044f8:	f003 020f 	and.w	r2, r3, #15
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	429a      	cmp	r2, r3
 8004502:	d901      	bls.n	8004508 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e050      	b.n	80045aa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004508:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800450c:	2b00      	cmp	r3, #0
 800450e:	da0f      	bge.n	8004530 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	f003 020f 	and.w	r2, r3, #15
 8004516:	4613      	mov	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	3338      	adds	r3, #56	; 0x38
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	4413      	add	r3, r2
 8004524:	3304      	adds	r3, #4
 8004526:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2201      	movs	r2, #1
 800452c:	705a      	strb	r2, [r3, #1]
 800452e:	e00d      	b.n	800454c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004530:	78fa      	ldrb	r2, [r7, #3]
 8004532:	4613      	mov	r3, r2
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	4413      	add	r3, r2
 8004542:	3304      	adds	r3, #4
 8004544:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2201      	movs	r2, #1
 8004550:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004552:	78fb      	ldrb	r3, [r7, #3]
 8004554:	f003 030f 	and.w	r3, r3, #15
 8004558:	b2da      	uxtb	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_PCD_EP_SetStall+0x82>
 8004568:	2302      	movs	r3, #2
 800456a:	e01e      	b.n	80045aa <HAL_PCD_EP_SetStall+0xc0>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68f9      	ldr	r1, [r7, #12]
 800457a:	4618      	mov	r0, r3
 800457c:	f003 fa84 	bl	8007a88 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	f003 030f 	and.w	r3, r3, #15
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10a      	bne.n	80045a0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6818      	ldr	r0, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	b2d9      	uxtb	r1, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800459a:	461a      	mov	r2, r3
 800459c:	f003 fc74 	bl	8007e88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	460b      	mov	r3, r1
 80045bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80045be:	78fb      	ldrb	r3, [r7, #3]
 80045c0:	f003 020f 	and.w	r2, r3, #15
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d901      	bls.n	80045d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e042      	b.n	8004656 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	da0f      	bge.n	80045f8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045d8:	78fb      	ldrb	r3, [r7, #3]
 80045da:	f003 020f 	and.w	r2, r3, #15
 80045de:	4613      	mov	r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	3338      	adds	r3, #56	; 0x38
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	4413      	add	r3, r2
 80045ec:	3304      	adds	r3, #4
 80045ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2201      	movs	r2, #1
 80045f4:	705a      	strb	r2, [r3, #1]
 80045f6:	e00f      	b.n	8004618 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	f003 020f 	and.w	r2, r3, #15
 80045fe:	4613      	mov	r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	4413      	add	r3, r2
 800460e:	3304      	adds	r3, #4
 8004610:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800461e:	78fb      	ldrb	r3, [r7, #3]
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	b2da      	uxtb	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_PCD_EP_ClrStall+0x86>
 8004634:	2302      	movs	r3, #2
 8004636:	e00e      	b.n	8004656 <HAL_PCD_EP_ClrStall+0xa4>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68f9      	ldr	r1, [r7, #12]
 8004646:	4618      	mov	r0, r3
 8004648:	f003 fa8c 	bl	8007b64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b084      	sub	sp, #16
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	460b      	mov	r3, r1
 8004668:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800466a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800466e:	2b00      	cmp	r3, #0
 8004670:	da0c      	bge.n	800468c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	f003 020f 	and.w	r2, r3, #15
 8004678:	4613      	mov	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	3338      	adds	r3, #56	; 0x38
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	4413      	add	r3, r2
 8004686:	3304      	adds	r3, #4
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	e00c      	b.n	80046a6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800468c:	78fb      	ldrb	r3, [r7, #3]
 800468e:	f003 020f 	and.w	r2, r3, #15
 8004692:	4613      	mov	r3, r2
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	4413      	add	r3, r2
 80046a2:	3304      	adds	r3, #4
 80046a4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68f9      	ldr	r1, [r7, #12]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f003 f8ab 	bl	8007808 <USB_EPStopXfer>
 80046b2:	4603      	mov	r3, r0
 80046b4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80046b6:	7afb      	ldrb	r3, [r7, #11]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08a      	sub	sp, #40	; 0x28
 80046c4:	af02      	add	r7, sp, #8
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	4613      	mov	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	4413      	add	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	3338      	adds	r3, #56	; 0x38
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	4413      	add	r3, r2
 80046e4:	3304      	adds	r3, #4
 80046e6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a1a      	ldr	r2, [r3, #32]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d901      	bls.n	80046f8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e06c      	b.n	80047d2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	699a      	ldr	r2, [r3, #24]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	69fa      	ldr	r2, [r7, #28]
 800470a:	429a      	cmp	r2, r3
 800470c:	d902      	bls.n	8004714 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	3303      	adds	r3, #3
 8004718:	089b      	lsrs	r3, r3, #2
 800471a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800471c:	e02b      	b.n	8004776 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	699a      	ldr	r2, [r3, #24]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	69fa      	ldr	r2, [r7, #28]
 8004730:	429a      	cmp	r2, r3
 8004732:	d902      	bls.n	800473a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	3303      	adds	r3, #3
 800473e:	089b      	lsrs	r3, r3, #2
 8004740:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6919      	ldr	r1, [r3, #16]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	b2da      	uxtb	r2, r3
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004752:	b2db      	uxtb	r3, r3
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	4603      	mov	r3, r0
 8004758:	6978      	ldr	r0, [r7, #20]
 800475a:	f003 f8ff 	bl	800795c <USB_WritePacket>

    ep->xfer_buff  += len;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	441a      	add	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a1a      	ldr	r2, [r3, #32]
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	441a      	add	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	4413      	add	r3, r2
 800477e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	b29b      	uxth	r3, r3
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	429a      	cmp	r2, r3
 800478a:	d809      	bhi.n	80047a0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a1a      	ldr	r2, [r3, #32]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004794:	429a      	cmp	r2, r3
 8004796:	d203      	bcs.n	80047a0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1be      	bne.n	800471e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	699a      	ldr	r2, [r3, #24]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d811      	bhi.n	80047d0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	f003 030f 	and.w	r3, r3, #15
 80047b2:	2201      	movs	r2, #1
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	43db      	mvns	r3, r3
 80047c6:	6939      	ldr	r1, [r7, #16]
 80047c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047cc:	4013      	ands	r3, r2
 80047ce:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3720      	adds	r7, #32
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	333c      	adds	r3, #60	; 0x3c
 80047f4:	3304      	adds	r3, #4
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d17b      	bne.n	800490a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d015      	beq.n	8004848 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	4a61      	ldr	r2, [pc, #388]	; (80049a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004820:	4293      	cmp	r3, r2
 8004822:	f240 80b9 	bls.w	8004998 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 80b3 	beq.w	8004998 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483e:	461a      	mov	r2, r3
 8004840:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004844:	6093      	str	r3, [r2, #8]
 8004846:	e0a7      	b.n	8004998 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b00      	cmp	r3, #0
 8004850:	d009      	beq.n	8004866 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485e:	461a      	mov	r2, r3
 8004860:	2320      	movs	r3, #32
 8004862:	6093      	str	r3, [r2, #8]
 8004864:	e098      	b.n	8004998 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800486c:	2b00      	cmp	r3, #0
 800486e:	f040 8093 	bne.w	8004998 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	4a4b      	ldr	r2, [pc, #300]	; (80049a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d90f      	bls.n	800489a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004890:	461a      	mov	r2, r3
 8004892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004896:	6093      	str	r3, [r2, #8]
 8004898:	e07e      	b.n	8004998 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	4613      	mov	r3, r2
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	4413      	add	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	4413      	add	r3, r2
 80048ac:	3304      	adds	r3, #4
 80048ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	69da      	ldr	r2, [r3, #28]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	0159      	lsls	r1, r3, #5
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	440b      	add	r3, r1
 80048bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048c6:	1ad2      	subs	r2, r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d114      	bne.n	80048fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d109      	bne.n	80048ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80048e4:	461a      	mov	r2, r3
 80048e6:	2101      	movs	r1, #1
 80048e8:	f003 face 	bl	8007e88 <USB_EP0_OutStart>
 80048ec:	e006      	b.n	80048fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	691a      	ldr	r2, [r3, #16]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	441a      	add	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	4619      	mov	r1, r3
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f008 fad8 	bl	800ceb8 <HAL_PCD_DataOutStageCallback>
 8004908:	e046      	b.n	8004998 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	4a26      	ldr	r2, [pc, #152]	; (80049a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d124      	bne.n	800495c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004928:	461a      	mov	r2, r3
 800492a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800492e:	6093      	str	r3, [r2, #8]
 8004930:	e032      	b.n	8004998 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b00      	cmp	r3, #0
 800493a:	d008      	beq.n	800494e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004948:	461a      	mov	r2, r3
 800494a:	2320      	movs	r3, #32
 800494c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	b2db      	uxtb	r3, r3
 8004952:	4619      	mov	r1, r3
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f008 faaf 	bl	800ceb8 <HAL_PCD_DataOutStageCallback>
 800495a:	e01d      	b.n	8004998 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d114      	bne.n	800498c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004962:	6879      	ldr	r1, [r7, #4]
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	4613      	mov	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	4413      	add	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	440b      	add	r3, r1
 8004970:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d108      	bne.n	800498c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004984:	461a      	mov	r2, r3
 8004986:	2100      	movs	r1, #0
 8004988:	f003 fa7e 	bl	8007e88 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	b2db      	uxtb	r3, r3
 8004990:	4619      	mov	r1, r3
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f008 fa90 	bl	800ceb8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3720      	adds	r7, #32
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	4f54300a 	.word	0x4f54300a
 80049a8:	4f54310a 	.word	0x4f54310a

080049ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	333c      	adds	r3, #60	; 0x3c
 80049c4:	3304      	adds	r3, #4
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4a15      	ldr	r2, [pc, #84]	; (8004a34 <PCD_EP_OutSetupPacket_int+0x88>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d90e      	bls.n	8004a00 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d009      	beq.n	8004a00 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f8:	461a      	mov	r2, r3
 80049fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f008 fa47 	bl	800ce94 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4a0a      	ldr	r2, [pc, #40]	; (8004a34 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d90c      	bls.n	8004a28 <PCD_EP_OutSetupPacket_int+0x7c>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d108      	bne.n	8004a28 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6818      	ldr	r0, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a20:	461a      	mov	r2, r3
 8004a22:	2101      	movs	r1, #1
 8004a24:	f003 fa30 	bl	8007e88 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	4f54300a 	.word	0x4f54300a

08004a38 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	460b      	mov	r3, r1
 8004a42:	70fb      	strb	r3, [r7, #3]
 8004a44:	4613      	mov	r3, r2
 8004a46:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d107      	bne.n	8004a66 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004a56:	883b      	ldrh	r3, [r7, #0]
 8004a58:	0419      	lsls	r1, r3, #16
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	629a      	str	r2, [r3, #40]	; 0x28
 8004a64:	e028      	b.n	8004ab8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6c:	0c1b      	lsrs	r3, r3, #16
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	4413      	add	r3, r2
 8004a72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a74:	2300      	movs	r3, #0
 8004a76:	73fb      	strb	r3, [r7, #15]
 8004a78:	e00d      	b.n	8004a96 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
 8004a80:	3340      	adds	r3, #64	; 0x40
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	0c1b      	lsrs	r3, r3, #16
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
 8004a92:	3301      	adds	r3, #1
 8004a94:	73fb      	strb	r3, [r7, #15]
 8004a96:	7bfa      	ldrb	r2, [r7, #15]
 8004a98:	78fb      	ldrb	r3, [r7, #3]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d3ec      	bcc.n	8004a7a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004aa0:	883b      	ldrh	r3, [r7, #0]
 8004aa2:	0418      	lsls	r0, r3, #16
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6819      	ldr	r1, [r3, #0]
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	4302      	orrs	r2, r0
 8004ab0:	3340      	adds	r3, #64	; 0x40
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	460b      	mov	r3, r1
 8004ad0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	887a      	ldrh	r2, [r7, #2]
 8004ad8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e267      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d075      	beq.n	8004c0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b1e:	4b88      	ldr	r3, [pc, #544]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d00c      	beq.n	8004b44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b2a:	4b85      	ldr	r3, [pc, #532]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d112      	bne.n	8004b5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b36:	4b82      	ldr	r3, [pc, #520]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b42:	d10b      	bne.n	8004b5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b44:	4b7e      	ldr	r3, [pc, #504]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d05b      	beq.n	8004c08 <HAL_RCC_OscConfig+0x108>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d157      	bne.n	8004c08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e242      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b64:	d106      	bne.n	8004b74 <HAL_RCC_OscConfig+0x74>
 8004b66:	4b76      	ldr	r3, [pc, #472]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a75      	ldr	r2, [pc, #468]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	e01d      	b.n	8004bb0 <HAL_RCC_OscConfig+0xb0>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b7c:	d10c      	bne.n	8004b98 <HAL_RCC_OscConfig+0x98>
 8004b7e:	4b70      	ldr	r3, [pc, #448]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a6f      	ldr	r2, [pc, #444]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	4b6d      	ldr	r3, [pc, #436]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a6c      	ldr	r2, [pc, #432]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	e00b      	b.n	8004bb0 <HAL_RCC_OscConfig+0xb0>
 8004b98:	4b69      	ldr	r3, [pc, #420]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a68      	ldr	r2, [pc, #416]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	4b66      	ldr	r3, [pc, #408]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a65      	ldr	r2, [pc, #404]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d013      	beq.n	8004be0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb8:	f7fd fe2e 	bl	8002818 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bc0:	f7fd fe2a 	bl	8002818 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b64      	cmp	r3, #100	; 0x64
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e207      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd2:	4b5b      	ldr	r3, [pc, #364]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0f0      	beq.n	8004bc0 <HAL_RCC_OscConfig+0xc0>
 8004bde:	e014      	b.n	8004c0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be0:	f7fd fe1a 	bl	8002818 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004be8:	f7fd fe16 	bl	8002818 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b64      	cmp	r3, #100	; 0x64
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e1f3      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bfa:	4b51      	ldr	r3, [pc, #324]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f0      	bne.n	8004be8 <HAL_RCC_OscConfig+0xe8>
 8004c06:	e000      	b.n	8004c0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d063      	beq.n	8004cde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c16:	4b4a      	ldr	r3, [pc, #296]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 030c 	and.w	r3, r3, #12
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00b      	beq.n	8004c3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c22:	4b47      	ldr	r3, [pc, #284]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d11c      	bne.n	8004c68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c2e:	4b44      	ldr	r3, [pc, #272]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d116      	bne.n	8004c68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c3a:	4b41      	ldr	r3, [pc, #260]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <HAL_RCC_OscConfig+0x152>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d001      	beq.n	8004c52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e1c7      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c52:	4b3b      	ldr	r3, [pc, #236]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	4937      	ldr	r1, [pc, #220]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c66:	e03a      	b.n	8004cde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d020      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c70:	4b34      	ldr	r3, [pc, #208]	; (8004d44 <HAL_RCC_OscConfig+0x244>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c76:	f7fd fdcf 	bl	8002818 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c7e:	f7fd fdcb 	bl	8002818 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e1a8      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c90:	4b2b      	ldr	r3, [pc, #172]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0f0      	beq.n	8004c7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c9c:	4b28      	ldr	r3, [pc, #160]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	4925      	ldr	r1, [pc, #148]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	600b      	str	r3, [r1, #0]
 8004cb0:	e015      	b.n	8004cde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cb2:	4b24      	ldr	r3, [pc, #144]	; (8004d44 <HAL_RCC_OscConfig+0x244>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb8:	f7fd fdae 	bl	8002818 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cc0:	f7fd fdaa 	bl	8002818 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e187      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cd2:	4b1b      	ldr	r3, [pc, #108]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1f0      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d036      	beq.n	8004d58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d016      	beq.n	8004d20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cf2:	4b15      	ldr	r3, [pc, #84]	; (8004d48 <HAL_RCC_OscConfig+0x248>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf8:	f7fd fd8e 	bl	8002818 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d00:	f7fd fd8a 	bl	8002818 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e167      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d12:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <HAL_RCC_OscConfig+0x240>)
 8004d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0f0      	beq.n	8004d00 <HAL_RCC_OscConfig+0x200>
 8004d1e:	e01b      	b.n	8004d58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d20:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <HAL_RCC_OscConfig+0x248>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d26:	f7fd fd77 	bl	8002818 <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d2c:	e00e      	b.n	8004d4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d2e:	f7fd fd73 	bl	8002818 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d907      	bls.n	8004d4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e150      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
 8004d40:	40023800 	.word	0x40023800
 8004d44:	42470000 	.word	0x42470000
 8004d48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d4c:	4b88      	ldr	r3, [pc, #544]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1ea      	bne.n	8004d2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 8097 	beq.w	8004e94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d66:	2300      	movs	r3, #0
 8004d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d6a:	4b81      	ldr	r3, [pc, #516]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10f      	bne.n	8004d96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d76:	2300      	movs	r3, #0
 8004d78:	60bb      	str	r3, [r7, #8]
 8004d7a:	4b7d      	ldr	r3, [pc, #500]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	4a7c      	ldr	r2, [pc, #496]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d84:	6413      	str	r3, [r2, #64]	; 0x40
 8004d86:	4b7a      	ldr	r3, [pc, #488]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8e:	60bb      	str	r3, [r7, #8]
 8004d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d92:	2301      	movs	r3, #1
 8004d94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d96:	4b77      	ldr	r3, [pc, #476]	; (8004f74 <HAL_RCC_OscConfig+0x474>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d118      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004da2:	4b74      	ldr	r3, [pc, #464]	; (8004f74 <HAL_RCC_OscConfig+0x474>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a73      	ldr	r2, [pc, #460]	; (8004f74 <HAL_RCC_OscConfig+0x474>)
 8004da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dae:	f7fd fd33 	bl	8002818 <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004db6:	f7fd fd2f 	bl	8002818 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e10c      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc8:	4b6a      	ldr	r3, [pc, #424]	; (8004f74 <HAL_RCC_OscConfig+0x474>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0f0      	beq.n	8004db6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d106      	bne.n	8004dea <HAL_RCC_OscConfig+0x2ea>
 8004ddc:	4b64      	ldr	r3, [pc, #400]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de0:	4a63      	ldr	r2, [pc, #396]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	6713      	str	r3, [r2, #112]	; 0x70
 8004de8:	e01c      	b.n	8004e24 <HAL_RCC_OscConfig+0x324>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b05      	cmp	r3, #5
 8004df0:	d10c      	bne.n	8004e0c <HAL_RCC_OscConfig+0x30c>
 8004df2:	4b5f      	ldr	r3, [pc, #380]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df6:	4a5e      	ldr	r2, [pc, #376]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004df8:	f043 0304 	orr.w	r3, r3, #4
 8004dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8004dfe:	4b5c      	ldr	r3, [pc, #368]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e02:	4a5b      	ldr	r2, [pc, #364]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e04:	f043 0301 	orr.w	r3, r3, #1
 8004e08:	6713      	str	r3, [r2, #112]	; 0x70
 8004e0a:	e00b      	b.n	8004e24 <HAL_RCC_OscConfig+0x324>
 8004e0c:	4b58      	ldr	r3, [pc, #352]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e10:	4a57      	ldr	r2, [pc, #348]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e12:	f023 0301 	bic.w	r3, r3, #1
 8004e16:	6713      	str	r3, [r2, #112]	; 0x70
 8004e18:	4b55      	ldr	r3, [pc, #340]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1c:	4a54      	ldr	r2, [pc, #336]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e1e:	f023 0304 	bic.w	r3, r3, #4
 8004e22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d015      	beq.n	8004e58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2c:	f7fd fcf4 	bl	8002818 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e32:	e00a      	b.n	8004e4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e34:	f7fd fcf0 	bl	8002818 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e0cb      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e4a:	4b49      	ldr	r3, [pc, #292]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0ee      	beq.n	8004e34 <HAL_RCC_OscConfig+0x334>
 8004e56:	e014      	b.n	8004e82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e58:	f7fd fcde 	bl	8002818 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e5e:	e00a      	b.n	8004e76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e60:	f7fd fcda 	bl	8002818 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e0b5      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e76:	4b3e      	ldr	r3, [pc, #248]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1ee      	bne.n	8004e60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e82:	7dfb      	ldrb	r3, [r7, #23]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d105      	bne.n	8004e94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e88:	4b39      	ldr	r3, [pc, #228]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	4a38      	ldr	r2, [pc, #224]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80a1 	beq.w	8004fe0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e9e:	4b34      	ldr	r3, [pc, #208]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 030c 	and.w	r3, r3, #12
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d05c      	beq.n	8004f64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d141      	bne.n	8004f36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb2:	4b31      	ldr	r3, [pc, #196]	; (8004f78 <HAL_RCC_OscConfig+0x478>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb8:	f7fd fcae 	bl	8002818 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ec0:	f7fd fcaa 	bl	8002818 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e087      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ed2:	4b27      	ldr	r3, [pc, #156]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1f0      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69da      	ldr	r2, [r3, #28]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	019b      	lsls	r3, r3, #6
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	041b      	lsls	r3, r3, #16
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f00:	061b      	lsls	r3, r3, #24
 8004f02:	491b      	ldr	r1, [pc, #108]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f08:	4b1b      	ldr	r3, [pc, #108]	; (8004f78 <HAL_RCC_OscConfig+0x478>)
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0e:	f7fd fc83 	bl	8002818 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f16:	f7fd fc7f 	bl	8002818 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e05c      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f28:	4b11      	ldr	r3, [pc, #68]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0f0      	beq.n	8004f16 <HAL_RCC_OscConfig+0x416>
 8004f34:	e054      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f36:	4b10      	ldr	r3, [pc, #64]	; (8004f78 <HAL_RCC_OscConfig+0x478>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3c:	f7fd fc6c 	bl	8002818 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f44:	f7fd fc68 	bl	8002818 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e045      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f56:	4b06      	ldr	r3, [pc, #24]	; (8004f70 <HAL_RCC_OscConfig+0x470>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCC_OscConfig+0x444>
 8004f62:	e03d      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d107      	bne.n	8004f7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e038      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
 8004f70:	40023800 	.word	0x40023800
 8004f74:	40007000 	.word	0x40007000
 8004f78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f7c:	4b1b      	ldr	r3, [pc, #108]	; (8004fec <HAL_RCC_OscConfig+0x4ec>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d028      	beq.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d121      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d11a      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fac:	4013      	ands	r3, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d111      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc2:	085b      	lsrs	r3, r3, #1
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d107      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d001      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	40023800 	.word	0x40023800

08004ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e0cc      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005004:	4b68      	ldr	r3, [pc, #416]	; (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d90c      	bls.n	800502c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005012:	4b65      	ldr	r3, [pc, #404]	; (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800501a:	4b63      	ldr	r3, [pc, #396]	; (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d001      	beq.n	800502c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e0b8      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d020      	beq.n	800507a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b00      	cmp	r3, #0
 8005042:	d005      	beq.n	8005050 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005044:	4b59      	ldr	r3, [pc, #356]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	4a58      	ldr	r2, [pc, #352]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800504e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b00      	cmp	r3, #0
 800505a:	d005      	beq.n	8005068 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800505c:	4b53      	ldr	r3, [pc, #332]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	4a52      	ldr	r2, [pc, #328]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005066:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005068:	4b50      	ldr	r3, [pc, #320]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	494d      	ldr	r1, [pc, #308]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	4313      	orrs	r3, r2
 8005078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d044      	beq.n	8005110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d107      	bne.n	800509e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800508e:	4b47      	ldr	r3, [pc, #284]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d119      	bne.n	80050ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e07f      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d003      	beq.n	80050ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	d107      	bne.n	80050be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ae:	4b3f      	ldr	r3, [pc, #252]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d109      	bne.n	80050ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e06f      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050be:	4b3b      	ldr	r3, [pc, #236]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e067      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ce:	4b37      	ldr	r3, [pc, #220]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f023 0203 	bic.w	r2, r3, #3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	4934      	ldr	r1, [pc, #208]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050e0:	f7fd fb9a 	bl	8002818 <HAL_GetTick>
 80050e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e6:	e00a      	b.n	80050fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e8:	f7fd fb96 	bl	8002818 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e04f      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fe:	4b2b      	ldr	r3, [pc, #172]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 020c 	and.w	r2, r3, #12
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	429a      	cmp	r2, r3
 800510e:	d1eb      	bne.n	80050e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005110:	4b25      	ldr	r3, [pc, #148]	; (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d20c      	bcs.n	8005138 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511e:	4b22      	ldr	r3, [pc, #136]	; (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005126:	4b20      	ldr	r3, [pc, #128]	; (80051a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0307 	and.w	r3, r3, #7
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d001      	beq.n	8005138 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e032      	b.n	800519e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	d008      	beq.n	8005156 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005144:	4b19      	ldr	r3, [pc, #100]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	4916      	ldr	r1, [pc, #88]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	4313      	orrs	r3, r2
 8005154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b00      	cmp	r3, #0
 8005160:	d009      	beq.n	8005176 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005162:	4b12      	ldr	r3, [pc, #72]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	490e      	ldr	r1, [pc, #56]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	4313      	orrs	r3, r2
 8005174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005176:	f000 f821 	bl	80051bc <HAL_RCC_GetSysClockFreq>
 800517a:	4602      	mov	r2, r0
 800517c:	4b0b      	ldr	r3, [pc, #44]	; (80051ac <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	091b      	lsrs	r3, r3, #4
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	490a      	ldr	r1, [pc, #40]	; (80051b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005188:	5ccb      	ldrb	r3, [r1, r3]
 800518a:	fa22 f303 	lsr.w	r3, r2, r3
 800518e:	4a09      	ldr	r2, [pc, #36]	; (80051b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005192:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f7fd f982 	bl	80024a0 <HAL_InitTick>

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	40023c00 	.word	0x40023c00
 80051ac:	40023800 	.word	0x40023800
 80051b0:	080137a0 	.word	0x080137a0
 80051b4:	20000028 	.word	0x20000028
 80051b8:	2000002c 	.word	0x2000002c

080051bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c0:	b090      	sub	sp, #64	; 0x40
 80051c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	637b      	str	r3, [r7, #52]	; 0x34
 80051c8:	2300      	movs	r3, #0
 80051ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051cc:	2300      	movs	r3, #0
 80051ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051d4:	4b59      	ldr	r3, [pc, #356]	; (800533c <HAL_RCC_GetSysClockFreq+0x180>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 030c 	and.w	r3, r3, #12
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d00d      	beq.n	80051fc <HAL_RCC_GetSysClockFreq+0x40>
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	f200 80a1 	bhi.w	8005328 <HAL_RCC_GetSysClockFreq+0x16c>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <HAL_RCC_GetSysClockFreq+0x34>
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d003      	beq.n	80051f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80051ee:	e09b      	b.n	8005328 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051f0:	4b53      	ldr	r3, [pc, #332]	; (8005340 <HAL_RCC_GetSysClockFreq+0x184>)
 80051f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80051f4:	e09b      	b.n	800532e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051f6:	4b53      	ldr	r3, [pc, #332]	; (8005344 <HAL_RCC_GetSysClockFreq+0x188>)
 80051f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051fa:	e098      	b.n	800532e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051fc:	4b4f      	ldr	r3, [pc, #316]	; (800533c <HAL_RCC_GetSysClockFreq+0x180>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005204:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005206:	4b4d      	ldr	r3, [pc, #308]	; (800533c <HAL_RCC_GetSysClockFreq+0x180>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d028      	beq.n	8005264 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005212:	4b4a      	ldr	r3, [pc, #296]	; (800533c <HAL_RCC_GetSysClockFreq+0x180>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	099b      	lsrs	r3, r3, #6
 8005218:	2200      	movs	r2, #0
 800521a:	623b      	str	r3, [r7, #32]
 800521c:	627a      	str	r2, [r7, #36]	; 0x24
 800521e:	6a3b      	ldr	r3, [r7, #32]
 8005220:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005224:	2100      	movs	r1, #0
 8005226:	4b47      	ldr	r3, [pc, #284]	; (8005344 <HAL_RCC_GetSysClockFreq+0x188>)
 8005228:	fb03 f201 	mul.w	r2, r3, r1
 800522c:	2300      	movs	r3, #0
 800522e:	fb00 f303 	mul.w	r3, r0, r3
 8005232:	4413      	add	r3, r2
 8005234:	4a43      	ldr	r2, [pc, #268]	; (8005344 <HAL_RCC_GetSysClockFreq+0x188>)
 8005236:	fba0 1202 	umull	r1, r2, r0, r2
 800523a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800523c:	460a      	mov	r2, r1
 800523e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005242:	4413      	add	r3, r2
 8005244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005248:	2200      	movs	r2, #0
 800524a:	61bb      	str	r3, [r7, #24]
 800524c:	61fa      	str	r2, [r7, #28]
 800524e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005252:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005256:	f7fb f813 	bl	8000280 <__aeabi_uldivmod>
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	4613      	mov	r3, r2
 8005260:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005262:	e053      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005264:	4b35      	ldr	r3, [pc, #212]	; (800533c <HAL_RCC_GetSysClockFreq+0x180>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	099b      	lsrs	r3, r3, #6
 800526a:	2200      	movs	r2, #0
 800526c:	613b      	str	r3, [r7, #16]
 800526e:	617a      	str	r2, [r7, #20]
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005276:	f04f 0b00 	mov.w	fp, #0
 800527a:	4652      	mov	r2, sl
 800527c:	465b      	mov	r3, fp
 800527e:	f04f 0000 	mov.w	r0, #0
 8005282:	f04f 0100 	mov.w	r1, #0
 8005286:	0159      	lsls	r1, r3, #5
 8005288:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800528c:	0150      	lsls	r0, r2, #5
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	ebb2 080a 	subs.w	r8, r2, sl
 8005296:	eb63 090b 	sbc.w	r9, r3, fp
 800529a:	f04f 0200 	mov.w	r2, #0
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80052a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80052aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80052ae:	ebb2 0408 	subs.w	r4, r2, r8
 80052b2:	eb63 0509 	sbc.w	r5, r3, r9
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	00eb      	lsls	r3, r5, #3
 80052c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052c4:	00e2      	lsls	r2, r4, #3
 80052c6:	4614      	mov	r4, r2
 80052c8:	461d      	mov	r5, r3
 80052ca:	eb14 030a 	adds.w	r3, r4, sl
 80052ce:	603b      	str	r3, [r7, #0]
 80052d0:	eb45 030b 	adc.w	r3, r5, fp
 80052d4:	607b      	str	r3, [r7, #4]
 80052d6:	f04f 0200 	mov.w	r2, #0
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052e2:	4629      	mov	r1, r5
 80052e4:	028b      	lsls	r3, r1, #10
 80052e6:	4621      	mov	r1, r4
 80052e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052ec:	4621      	mov	r1, r4
 80052ee:	028a      	lsls	r2, r1, #10
 80052f0:	4610      	mov	r0, r2
 80052f2:	4619      	mov	r1, r3
 80052f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f6:	2200      	movs	r2, #0
 80052f8:	60bb      	str	r3, [r7, #8]
 80052fa:	60fa      	str	r2, [r7, #12]
 80052fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005300:	f7fa ffbe 	bl	8000280 <__aeabi_uldivmod>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4613      	mov	r3, r2
 800530a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800530c:	4b0b      	ldr	r3, [pc, #44]	; (800533c <HAL_RCC_GetSysClockFreq+0x180>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	0c1b      	lsrs	r3, r3, #16
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	3301      	adds	r3, #1
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800531c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	fbb2 f3f3 	udiv	r3, r2, r3
 8005324:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005326:	e002      	b.n	800532e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005328:	4b05      	ldr	r3, [pc, #20]	; (8005340 <HAL_RCC_GetSysClockFreq+0x184>)
 800532a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800532c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800532e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005330:	4618      	mov	r0, r3
 8005332:	3740      	adds	r7, #64	; 0x40
 8005334:	46bd      	mov	sp, r7
 8005336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800533a:	bf00      	nop
 800533c:	40023800 	.word	0x40023800
 8005340:	00f42400 	.word	0x00f42400
 8005344:	017d7840 	.word	0x017d7840

08005348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800534c:	4b03      	ldr	r3, [pc, #12]	; (800535c <HAL_RCC_GetHCLKFreq+0x14>)
 800534e:	681b      	ldr	r3, [r3, #0]
}
 8005350:	4618      	mov	r0, r3
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	20000028 	.word	0x20000028

08005360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005364:	f7ff fff0 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 8005368:	4602      	mov	r2, r0
 800536a:	4b05      	ldr	r3, [pc, #20]	; (8005380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	0a9b      	lsrs	r3, r3, #10
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	4903      	ldr	r1, [pc, #12]	; (8005384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005376:	5ccb      	ldrb	r3, [r1, r3]
 8005378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800537c:	4618      	mov	r0, r3
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40023800 	.word	0x40023800
 8005384:	080137b0 	.word	0x080137b0

08005388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800538c:	f7ff ffdc 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 8005390:	4602      	mov	r2, r0
 8005392:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	0b5b      	lsrs	r3, r3, #13
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	4903      	ldr	r1, [pc, #12]	; (80053ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800539e:	5ccb      	ldrb	r3, [r1, r3]
 80053a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40023800 	.word	0x40023800
 80053ac:	080137b0 	.word	0x080137b0

080053b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	220f      	movs	r2, #15
 80053be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80053c0:	4b12      	ldr	r3, [pc, #72]	; (800540c <HAL_RCC_GetClockConfig+0x5c>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f003 0203 	and.w	r2, r3, #3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80053cc:	4b0f      	ldr	r3, [pc, #60]	; (800540c <HAL_RCC_GetClockConfig+0x5c>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80053d8:	4b0c      	ldr	r3, [pc, #48]	; (800540c <HAL_RCC_GetClockConfig+0x5c>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80053e4:	4b09      	ldr	r3, [pc, #36]	; (800540c <HAL_RCC_GetClockConfig+0x5c>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	08db      	lsrs	r3, r3, #3
 80053ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053f2:	4b07      	ldr	r3, [pc, #28]	; (8005410 <HAL_RCC_GetClockConfig+0x60>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0207 	and.w	r2, r3, #7
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	601a      	str	r2, [r3, #0]
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40023800 	.word	0x40023800
 8005410:	40023c00 	.word	0x40023c00

08005414 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e07b      	b.n	800551e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	2b00      	cmp	r3, #0
 800542c:	d108      	bne.n	8005440 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005436:	d009      	beq.n	800544c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	61da      	str	r2, [r3, #28]
 800543e:	e005      	b.n	800544c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fc ff42 	bl	80022f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005482:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d0:	ea42 0103 	orr.w	r1, r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	0c1b      	lsrs	r3, r3, #16
 80054ea:	f003 0104 	and.w	r1, r3, #4
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	f003 0210 	and.w	r2, r3, #16
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69da      	ldr	r2, [r3, #28]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800550c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b088      	sub	sp, #32
 800552a:	af00      	add	r7, sp, #0
 800552c:	60f8      	str	r0, [r7, #12]
 800552e:	60b9      	str	r1, [r7, #8]
 8005530:	603b      	str	r3, [r7, #0]
 8005532:	4613      	mov	r3, r2
 8005534:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <HAL_SPI_Transmit+0x22>
 8005544:	2302      	movs	r3, #2
 8005546:	e126      	b.n	8005796 <HAL_SPI_Transmit+0x270>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005550:	f7fd f962 	bl	8002818 <HAL_GetTick>
 8005554:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005556:	88fb      	ldrh	r3, [r7, #6]
 8005558:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b01      	cmp	r3, #1
 8005564:	d002      	beq.n	800556c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005566:	2302      	movs	r3, #2
 8005568:	77fb      	strb	r3, [r7, #31]
    goto error;
 800556a:	e10b      	b.n	8005784 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d002      	beq.n	8005578 <HAL_SPI_Transmit+0x52>
 8005572:	88fb      	ldrh	r3, [r7, #6]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d102      	bne.n	800557e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800557c:	e102      	b.n	8005784 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2203      	movs	r2, #3
 8005582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	88fa      	ldrh	r2, [r7, #6]
 8005596:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	88fa      	ldrh	r2, [r7, #6]
 800559c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055c4:	d10f      	bne.n	80055e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f0:	2b40      	cmp	r3, #64	; 0x40
 80055f2:	d007      	beq.n	8005604 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005602:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800560c:	d14b      	bne.n	80056a6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <HAL_SPI_Transmit+0xf6>
 8005616:	8afb      	ldrh	r3, [r7, #22]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d13e      	bne.n	800569a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005620:	881a      	ldrh	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562c:	1c9a      	adds	r2, r3, #2
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005640:	e02b      	b.n	800569a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b02      	cmp	r3, #2
 800564e:	d112      	bne.n	8005676 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005654:	881a      	ldrh	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005660:	1c9a      	adds	r2, r3, #2
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800566a:	b29b      	uxth	r3, r3
 800566c:	3b01      	subs	r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	86da      	strh	r2, [r3, #54]	; 0x36
 8005674:	e011      	b.n	800569a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005676:	f7fd f8cf 	bl	8002818 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	429a      	cmp	r2, r3
 8005684:	d803      	bhi.n	800568e <HAL_SPI_Transmit+0x168>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568c:	d102      	bne.n	8005694 <HAL_SPI_Transmit+0x16e>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d102      	bne.n	800569a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005698:	e074      	b.n	8005784 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800569e:	b29b      	uxth	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1ce      	bne.n	8005642 <HAL_SPI_Transmit+0x11c>
 80056a4:	e04c      	b.n	8005740 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <HAL_SPI_Transmit+0x18e>
 80056ae:	8afb      	ldrh	r3, [r7, #22]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d140      	bne.n	8005736 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	330c      	adds	r3, #12
 80056be:	7812      	ldrb	r2, [r2, #0]
 80056c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	3b01      	subs	r3, #1
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80056da:	e02c      	b.n	8005736 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d113      	bne.n	8005712 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	330c      	adds	r3, #12
 80056f4:	7812      	ldrb	r2, [r2, #0]
 80056f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	1c5a      	adds	r2, r3, #1
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005706:	b29b      	uxth	r3, r3
 8005708:	3b01      	subs	r3, #1
 800570a:	b29a      	uxth	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005710:	e011      	b.n	8005736 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005712:	f7fd f881 	bl	8002818 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d803      	bhi.n	800572a <HAL_SPI_Transmit+0x204>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005728:	d102      	bne.n	8005730 <HAL_SPI_Transmit+0x20a>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d102      	bne.n	8005736 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005734:	e026      	b.n	8005784 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800573a:	b29b      	uxth	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1cd      	bne.n	80056dc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	6839      	ldr	r1, [r7, #0]
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 f8b3 	bl	80058b0 <SPI_EndRxTxTransaction>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d002      	beq.n	8005756 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2220      	movs	r2, #32
 8005754:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10a      	bne.n	8005774 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800575e:	2300      	movs	r3, #0
 8005760:	613b      	str	r3, [r7, #16]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	613b      	str	r3, [r7, #16]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	613b      	str	r3, [r7, #16]
 8005772:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	77fb      	strb	r3, [r7, #31]
 8005780:	e000      	b.n	8005784 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005782:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005794:	7ffb      	ldrb	r3, [r7, #31]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3720      	adds	r7, #32
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
	...

080057a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b088      	sub	sp, #32
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	603b      	str	r3, [r7, #0]
 80057ac:	4613      	mov	r3, r2
 80057ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80057b0:	f7fd f832 	bl	8002818 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b8:	1a9b      	subs	r3, r3, r2
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	4413      	add	r3, r2
 80057be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80057c0:	f7fd f82a 	bl	8002818 <HAL_GetTick>
 80057c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80057c6:	4b39      	ldr	r3, [pc, #228]	; (80058ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	015b      	lsls	r3, r3, #5
 80057cc:	0d1b      	lsrs	r3, r3, #20
 80057ce:	69fa      	ldr	r2, [r7, #28]
 80057d0:	fb02 f303 	mul.w	r3, r2, r3
 80057d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057d6:	e054      	b.n	8005882 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057de:	d050      	beq.n	8005882 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057e0:	f7fd f81a 	bl	8002818 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d902      	bls.n	80057f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d13d      	bne.n	8005872 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005804:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800580e:	d111      	bne.n	8005834 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005818:	d004      	beq.n	8005824 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005822:	d107      	bne.n	8005834 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005832:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800583c:	d10f      	bne.n	800585e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800585c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e017      	b.n	80058a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	3b01      	subs	r3, #1
 8005880:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	4013      	ands	r3, r2
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	429a      	cmp	r2, r3
 8005890:	bf0c      	ite	eq
 8005892:	2301      	moveq	r3, #1
 8005894:	2300      	movne	r3, #0
 8005896:	b2db      	uxtb	r3, r3
 8005898:	461a      	mov	r2, r3
 800589a:	79fb      	ldrb	r3, [r7, #7]
 800589c:	429a      	cmp	r2, r3
 800589e:	d19b      	bne.n	80057d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3720      	adds	r7, #32
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	20000028 	.word	0x20000028

080058b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af02      	add	r7, sp, #8
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80058bc:	4b1b      	ldr	r3, [pc, #108]	; (800592c <SPI_EndRxTxTransaction+0x7c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a1b      	ldr	r2, [pc, #108]	; (8005930 <SPI_EndRxTxTransaction+0x80>)
 80058c2:	fba2 2303 	umull	r2, r3, r2, r3
 80058c6:	0d5b      	lsrs	r3, r3, #21
 80058c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058cc:	fb02 f303 	mul.w	r3, r2, r3
 80058d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058da:	d112      	bne.n	8005902 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2200      	movs	r2, #0
 80058e4:	2180      	movs	r1, #128	; 0x80
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f7ff ff5a 	bl	80057a0 <SPI_WaitFlagStateUntilTimeout>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d016      	beq.n	8005920 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f6:	f043 0220 	orr.w	r2, r3, #32
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e00f      	b.n	8005922 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00a      	beq.n	800591e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	3b01      	subs	r3, #1
 800590c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005918:	2b80      	cmp	r3, #128	; 0x80
 800591a:	d0f2      	beq.n	8005902 <SPI_EndRxTxTransaction+0x52>
 800591c:	e000      	b.n	8005920 <SPI_EndRxTxTransaction+0x70>
        break;
 800591e:	bf00      	nop
  }

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3718      	adds	r7, #24
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	20000028 	.word	0x20000028
 8005930:	165e9f81 	.word	0x165e9f81

08005934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e041      	b.n	80059ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d106      	bne.n	8005960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7fc fd10 	bl	8002380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	3304      	adds	r3, #4
 8005970:	4619      	mov	r1, r3
 8005972:	4610      	mov	r0, r2
 8005974:	f000 fba4 	bl	80060c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
	...

080059d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d001      	beq.n	80059ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e044      	b.n	8005a76 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0201 	orr.w	r2, r2, #1
 8005a02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a1e      	ldr	r2, [pc, #120]	; (8005a84 <HAL_TIM_Base_Start_IT+0xb0>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d018      	beq.n	8005a40 <HAL_TIM_Base_Start_IT+0x6c>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a16:	d013      	beq.n	8005a40 <HAL_TIM_Base_Start_IT+0x6c>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a1a      	ldr	r2, [pc, #104]	; (8005a88 <HAL_TIM_Base_Start_IT+0xb4>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d00e      	beq.n	8005a40 <HAL_TIM_Base_Start_IT+0x6c>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a19      	ldr	r2, [pc, #100]	; (8005a8c <HAL_TIM_Base_Start_IT+0xb8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d009      	beq.n	8005a40 <HAL_TIM_Base_Start_IT+0x6c>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a17      	ldr	r2, [pc, #92]	; (8005a90 <HAL_TIM_Base_Start_IT+0xbc>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d004      	beq.n	8005a40 <HAL_TIM_Base_Start_IT+0x6c>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a16      	ldr	r2, [pc, #88]	; (8005a94 <HAL_TIM_Base_Start_IT+0xc0>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d111      	bne.n	8005a64 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 0307 	and.w	r3, r3, #7
 8005a4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b06      	cmp	r3, #6
 8005a50:	d010      	beq.n	8005a74 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f042 0201 	orr.w	r2, r2, #1
 8005a60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a62:	e007      	b.n	8005a74 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0201 	orr.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40010000 	.word	0x40010000
 8005a88:	40000400 	.word	0x40000400
 8005a8c:	40000800 	.word	0x40000800
 8005a90:	40000c00 	.word	0x40000c00
 8005a94:	40014000 	.word	0x40014000

08005a98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e041      	b.n	8005b2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d106      	bne.n	8005ac4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f839 	bl	8005b36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	3304      	adds	r3, #4
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4610      	mov	r0, r2
 8005ad8:	f000 faf2 	bl	80060c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b083      	sub	sp, #12
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b3e:	bf00      	nop
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b082      	sub	sp, #8
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d122      	bne.n	8005ba6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d11b      	bne.n	8005ba6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f06f 0202 	mvn.w	r2, #2
 8005b76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	f003 0303 	and.w	r3, r3, #3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fa78 	bl	8006082 <HAL_TIM_IC_CaptureCallback>
 8005b92:	e005      	b.n	8005ba0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 fa6a 	bl	800606e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fa7b 	bl	8006096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d122      	bne.n	8005bfa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d11b      	bne.n	8005bfa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f06f 0204 	mvn.w	r2, #4
 8005bca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 fa4e 	bl	8006082 <HAL_TIM_IC_CaptureCallback>
 8005be6:	e005      	b.n	8005bf4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fa40 	bl	800606e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fa51 	bl	8006096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	f003 0308 	and.w	r3, r3, #8
 8005c04:	2b08      	cmp	r3, #8
 8005c06:	d122      	bne.n	8005c4e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f003 0308 	and.w	r3, r3, #8
 8005c12:	2b08      	cmp	r3, #8
 8005c14:	d11b      	bne.n	8005c4e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f06f 0208 	mvn.w	r2, #8
 8005c1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2204      	movs	r2, #4
 8005c24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	f003 0303 	and.w	r3, r3, #3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fa24 	bl	8006082 <HAL_TIM_IC_CaptureCallback>
 8005c3a:	e005      	b.n	8005c48 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fa16 	bl	800606e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fa27 	bl	8006096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	f003 0310 	and.w	r3, r3, #16
 8005c58:	2b10      	cmp	r3, #16
 8005c5a:	d122      	bne.n	8005ca2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f003 0310 	and.w	r3, r3, #16
 8005c66:	2b10      	cmp	r3, #16
 8005c68:	d11b      	bne.n	8005ca2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f06f 0210 	mvn.w	r2, #16
 8005c72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2208      	movs	r2, #8
 8005c78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f9fa 	bl	8006082 <HAL_TIM_IC_CaptureCallback>
 8005c8e:	e005      	b.n	8005c9c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f9ec 	bl	800606e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f9fd 	bl	8006096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d10e      	bne.n	8005cce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d107      	bne.n	8005cce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f06f 0201 	mvn.w	r2, #1
 8005cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7fc fa85 	bl	80021d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd8:	2b80      	cmp	r3, #128	; 0x80
 8005cda:	d10e      	bne.n	8005cfa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce6:	2b80      	cmp	r3, #128	; 0x80
 8005ce8:	d107      	bne.n	8005cfa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fd01 	bl	80066fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d04:	2b40      	cmp	r3, #64	; 0x40
 8005d06:	d10e      	bne.n	8005d26 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d12:	2b40      	cmp	r3, #64	; 0x40
 8005d14:	d107      	bne.n	8005d26 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 f9c2 	bl	80060aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	f003 0320 	and.w	r3, r3, #32
 8005d30:	2b20      	cmp	r3, #32
 8005d32:	d10e      	bne.n	8005d52 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f003 0320 	and.w	r3, r3, #32
 8005d3e:	2b20      	cmp	r3, #32
 8005d40:	d107      	bne.n	8005d52 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f06f 0220 	mvn.w	r2, #32
 8005d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fccb 	bl	80066e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d52:	bf00      	nop
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
	...

08005d5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d101      	bne.n	8005d7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d76:	2302      	movs	r3, #2
 8005d78:	e0ae      	b.n	8005ed8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b0c      	cmp	r3, #12
 8005d86:	f200 809f 	bhi.w	8005ec8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d8a:	a201      	add	r2, pc, #4	; (adr r2, 8005d90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d90:	08005dc5 	.word	0x08005dc5
 8005d94:	08005ec9 	.word	0x08005ec9
 8005d98:	08005ec9 	.word	0x08005ec9
 8005d9c:	08005ec9 	.word	0x08005ec9
 8005da0:	08005e05 	.word	0x08005e05
 8005da4:	08005ec9 	.word	0x08005ec9
 8005da8:	08005ec9 	.word	0x08005ec9
 8005dac:	08005ec9 	.word	0x08005ec9
 8005db0:	08005e47 	.word	0x08005e47
 8005db4:	08005ec9 	.word	0x08005ec9
 8005db8:	08005ec9 	.word	0x08005ec9
 8005dbc:	08005ec9 	.word	0x08005ec9
 8005dc0:	08005e87 	.word	0x08005e87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68b9      	ldr	r1, [r7, #8]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 f9f8 	bl	80061c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0208 	orr.w	r2, r2, #8
 8005dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0204 	bic.w	r2, r2, #4
 8005dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6999      	ldr	r1, [r3, #24]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	691a      	ldr	r2, [r3, #16]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	619a      	str	r2, [r3, #24]
      break;
 8005e02:	e064      	b.n	8005ece <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68b9      	ldr	r1, [r7, #8]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 fa3e 	bl	800628c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699a      	ldr	r2, [r3, #24]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6999      	ldr	r1, [r3, #24]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	021a      	lsls	r2, r3, #8
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	619a      	str	r2, [r3, #24]
      break;
 8005e44:	e043      	b.n	8005ece <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68b9      	ldr	r1, [r7, #8]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 fa89 	bl	8006364 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	69da      	ldr	r2, [r3, #28]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f042 0208 	orr.w	r2, r2, #8
 8005e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0204 	bic.w	r2, r2, #4
 8005e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69d9      	ldr	r1, [r3, #28]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	691a      	ldr	r2, [r3, #16]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	61da      	str	r2, [r3, #28]
      break;
 8005e84:	e023      	b.n	8005ece <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68b9      	ldr	r1, [r7, #8]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 fad3 	bl	8006438 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69da      	ldr	r2, [r3, #28]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69da      	ldr	r2, [r3, #28]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69d9      	ldr	r1, [r3, #28]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	021a      	lsls	r2, r3, #8
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	61da      	str	r2, [r3, #28]
      break;
 8005ec6:	e002      	b.n	8005ece <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	75fb      	strb	r3, [r7, #23]
      break;
 8005ecc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3718      	adds	r7, #24
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d101      	bne.n	8005efc <HAL_TIM_ConfigClockSource+0x1c>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e0b4      	b.n	8006066 <HAL_TIM_ConfigClockSource+0x186>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f34:	d03e      	beq.n	8005fb4 <HAL_TIM_ConfigClockSource+0xd4>
 8005f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f3a:	f200 8087 	bhi.w	800604c <HAL_TIM_ConfigClockSource+0x16c>
 8005f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f42:	f000 8086 	beq.w	8006052 <HAL_TIM_ConfigClockSource+0x172>
 8005f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f4a:	d87f      	bhi.n	800604c <HAL_TIM_ConfigClockSource+0x16c>
 8005f4c:	2b70      	cmp	r3, #112	; 0x70
 8005f4e:	d01a      	beq.n	8005f86 <HAL_TIM_ConfigClockSource+0xa6>
 8005f50:	2b70      	cmp	r3, #112	; 0x70
 8005f52:	d87b      	bhi.n	800604c <HAL_TIM_ConfigClockSource+0x16c>
 8005f54:	2b60      	cmp	r3, #96	; 0x60
 8005f56:	d050      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x11a>
 8005f58:	2b60      	cmp	r3, #96	; 0x60
 8005f5a:	d877      	bhi.n	800604c <HAL_TIM_ConfigClockSource+0x16c>
 8005f5c:	2b50      	cmp	r3, #80	; 0x50
 8005f5e:	d03c      	beq.n	8005fda <HAL_TIM_ConfigClockSource+0xfa>
 8005f60:	2b50      	cmp	r3, #80	; 0x50
 8005f62:	d873      	bhi.n	800604c <HAL_TIM_ConfigClockSource+0x16c>
 8005f64:	2b40      	cmp	r3, #64	; 0x40
 8005f66:	d058      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x13a>
 8005f68:	2b40      	cmp	r3, #64	; 0x40
 8005f6a:	d86f      	bhi.n	800604c <HAL_TIM_ConfigClockSource+0x16c>
 8005f6c:	2b30      	cmp	r3, #48	; 0x30
 8005f6e:	d064      	beq.n	800603a <HAL_TIM_ConfigClockSource+0x15a>
 8005f70:	2b30      	cmp	r3, #48	; 0x30
 8005f72:	d86b      	bhi.n	800604c <HAL_TIM_ConfigClockSource+0x16c>
 8005f74:	2b20      	cmp	r3, #32
 8005f76:	d060      	beq.n	800603a <HAL_TIM_ConfigClockSource+0x15a>
 8005f78:	2b20      	cmp	r3, #32
 8005f7a:	d867      	bhi.n	800604c <HAL_TIM_ConfigClockSource+0x16c>
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d05c      	beq.n	800603a <HAL_TIM_ConfigClockSource+0x15a>
 8005f80:	2b10      	cmp	r3, #16
 8005f82:	d05a      	beq.n	800603a <HAL_TIM_ConfigClockSource+0x15a>
 8005f84:	e062      	b.n	800604c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6818      	ldr	r0, [r3, #0]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	6899      	ldr	r1, [r3, #8]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	f000 fb19 	bl	80065cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	609a      	str	r2, [r3, #8]
      break;
 8005fb2:	e04f      	b.n	8006054 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6818      	ldr	r0, [r3, #0]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	6899      	ldr	r1, [r3, #8]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f000 fb02 	bl	80065cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689a      	ldr	r2, [r3, #8]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fd6:	609a      	str	r2, [r3, #8]
      break;
 8005fd8:	e03c      	b.n	8006054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6818      	ldr	r0, [r3, #0]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	6859      	ldr	r1, [r3, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f000 fa76 	bl	80064d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2150      	movs	r1, #80	; 0x50
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 facf 	bl	8006596 <TIM_ITRx_SetConfig>
      break;
 8005ff8:	e02c      	b.n	8006054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6818      	ldr	r0, [r3, #0]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	6859      	ldr	r1, [r3, #4]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	461a      	mov	r2, r3
 8006008:	f000 fa95 	bl	8006536 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2160      	movs	r1, #96	; 0x60
 8006012:	4618      	mov	r0, r3
 8006014:	f000 fabf 	bl	8006596 <TIM_ITRx_SetConfig>
      break;
 8006018:	e01c      	b.n	8006054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6818      	ldr	r0, [r3, #0]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	6859      	ldr	r1, [r3, #4]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	461a      	mov	r2, r3
 8006028:	f000 fa56 	bl	80064d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2140      	movs	r1, #64	; 0x40
 8006032:	4618      	mov	r0, r3
 8006034:	f000 faaf 	bl	8006596 <TIM_ITRx_SetConfig>
      break;
 8006038:	e00c      	b.n	8006054 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4619      	mov	r1, r3
 8006044:	4610      	mov	r0, r2
 8006046:	f000 faa6 	bl	8006596 <TIM_ITRx_SetConfig>
      break;
 800604a:	e003      	b.n	8006054 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	73fb      	strb	r3, [r7, #15]
      break;
 8006050:	e000      	b.n	8006054 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006052:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006064:	7bfb      	ldrb	r3, [r7, #15]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800606e:	b480      	push	{r7}
 8006070:	b083      	sub	sp, #12
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006076:	bf00      	nop
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006082:	b480      	push	{r7}
 8006084:	b083      	sub	sp, #12
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800608a:	bf00      	nop
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800609e:	bf00      	nop
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060b2:	bf00      	nop
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
	...

080060c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a34      	ldr	r2, [pc, #208]	; (80061a4 <TIM_Base_SetConfig+0xe4>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d00f      	beq.n	80060f8 <TIM_Base_SetConfig+0x38>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060de:	d00b      	beq.n	80060f8 <TIM_Base_SetConfig+0x38>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a31      	ldr	r2, [pc, #196]	; (80061a8 <TIM_Base_SetConfig+0xe8>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d007      	beq.n	80060f8 <TIM_Base_SetConfig+0x38>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a30      	ldr	r2, [pc, #192]	; (80061ac <TIM_Base_SetConfig+0xec>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d003      	beq.n	80060f8 <TIM_Base_SetConfig+0x38>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a2f      	ldr	r2, [pc, #188]	; (80061b0 <TIM_Base_SetConfig+0xf0>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d108      	bne.n	800610a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	4313      	orrs	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a25      	ldr	r2, [pc, #148]	; (80061a4 <TIM_Base_SetConfig+0xe4>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d01b      	beq.n	800614a <TIM_Base_SetConfig+0x8a>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006118:	d017      	beq.n	800614a <TIM_Base_SetConfig+0x8a>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a22      	ldr	r2, [pc, #136]	; (80061a8 <TIM_Base_SetConfig+0xe8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d013      	beq.n	800614a <TIM_Base_SetConfig+0x8a>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a21      	ldr	r2, [pc, #132]	; (80061ac <TIM_Base_SetConfig+0xec>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d00f      	beq.n	800614a <TIM_Base_SetConfig+0x8a>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a20      	ldr	r2, [pc, #128]	; (80061b0 <TIM_Base_SetConfig+0xf0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d00b      	beq.n	800614a <TIM_Base_SetConfig+0x8a>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a1f      	ldr	r2, [pc, #124]	; (80061b4 <TIM_Base_SetConfig+0xf4>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d007      	beq.n	800614a <TIM_Base_SetConfig+0x8a>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a1e      	ldr	r2, [pc, #120]	; (80061b8 <TIM_Base_SetConfig+0xf8>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d003      	beq.n	800614a <TIM_Base_SetConfig+0x8a>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a1d      	ldr	r2, [pc, #116]	; (80061bc <TIM_Base_SetConfig+0xfc>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d108      	bne.n	800615c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	4313      	orrs	r3, r2
 800615a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	4313      	orrs	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a08      	ldr	r2, [pc, #32]	; (80061a4 <TIM_Base_SetConfig+0xe4>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d103      	bne.n	8006190 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	691a      	ldr	r2, [r3, #16]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	615a      	str	r2, [r3, #20]
}
 8006196:	bf00      	nop
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	40010000 	.word	0x40010000
 80061a8:	40000400 	.word	0x40000400
 80061ac:	40000800 	.word	0x40000800
 80061b0:	40000c00 	.word	0x40000c00
 80061b4:	40014000 	.word	0x40014000
 80061b8:	40014400 	.word	0x40014400
 80061bc:	40014800 	.word	0x40014800

080061c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	f023 0201 	bic.w	r2, r3, #1
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f023 0303 	bic.w	r3, r3, #3
 80061f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f023 0302 	bic.w	r3, r3, #2
 8006208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	4313      	orrs	r3, r2
 8006212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a1c      	ldr	r2, [pc, #112]	; (8006288 <TIM_OC1_SetConfig+0xc8>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d10c      	bne.n	8006236 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f023 0308 	bic.w	r3, r3, #8
 8006222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	4313      	orrs	r3, r2
 800622c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f023 0304 	bic.w	r3, r3, #4
 8006234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a13      	ldr	r2, [pc, #76]	; (8006288 <TIM_OC1_SetConfig+0xc8>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d111      	bne.n	8006262 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800624c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	4313      	orrs	r3, r2
 8006260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	621a      	str	r2, [r3, #32]
}
 800627c:	bf00      	nop
 800627e:	371c      	adds	r7, #28
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	40010000 	.word	0x40010000

0800628c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	f023 0210 	bic.w	r2, r3, #16
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	021b      	lsls	r3, r3, #8
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f023 0320 	bic.w	r3, r3, #32
 80062d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	011b      	lsls	r3, r3, #4
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a1e      	ldr	r2, [pc, #120]	; (8006360 <TIM_OC2_SetConfig+0xd4>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d10d      	bne.n	8006308 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	011b      	lsls	r3, r3, #4
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006306:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a15      	ldr	r2, [pc, #84]	; (8006360 <TIM_OC2_SetConfig+0xd4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d113      	bne.n	8006338 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006316:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800631e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4313      	orrs	r3, r2
 8006336:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	621a      	str	r2, [r3, #32]
}
 8006352:	bf00      	nop
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	40010000 	.word	0x40010000

08006364 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006364:	b480      	push	{r7}
 8006366:	b087      	sub	sp, #28
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f023 0303 	bic.w	r3, r3, #3
 800639a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	021b      	lsls	r3, r3, #8
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a1d      	ldr	r2, [pc, #116]	; (8006434 <TIM_OC3_SetConfig+0xd0>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d10d      	bne.n	80063de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	021b      	lsls	r3, r3, #8
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a14      	ldr	r2, [pc, #80]	; (8006434 <TIM_OC3_SetConfig+0xd0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d113      	bne.n	800640e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	4313      	orrs	r3, r2
 8006400:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	011b      	lsls	r3, r3, #4
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	4313      	orrs	r3, r2
 800640c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	621a      	str	r2, [r3, #32]
}
 8006428:	bf00      	nop
 800642a:	371c      	adds	r7, #28
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	40010000 	.word	0x40010000

08006438 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006438:	b480      	push	{r7}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800646e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	021b      	lsls	r3, r3, #8
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	4313      	orrs	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006482:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	031b      	lsls	r3, r3, #12
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	4313      	orrs	r3, r2
 800648e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a10      	ldr	r2, [pc, #64]	; (80064d4 <TIM_OC4_SetConfig+0x9c>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d109      	bne.n	80064ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800649e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	019b      	lsls	r3, r3, #6
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	621a      	str	r2, [r3, #32]
}
 80064c6:	bf00      	nop
 80064c8:	371c      	adds	r7, #28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	40010000 	.word	0x40010000

080064d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064d8:	b480      	push	{r7}
 80064da:	b087      	sub	sp, #28
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	f023 0201 	bic.w	r2, r3, #1
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	4313      	orrs	r3, r2
 800650c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f023 030a 	bic.w	r3, r3, #10
 8006514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	4313      	orrs	r3, r2
 800651c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	621a      	str	r2, [r3, #32]
}
 800652a:	bf00      	nop
 800652c:	371c      	adds	r7, #28
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006536:	b480      	push	{r7}
 8006538:	b087      	sub	sp, #28
 800653a:	af00      	add	r7, sp, #0
 800653c:	60f8      	str	r0, [r7, #12]
 800653e:	60b9      	str	r1, [r7, #8]
 8006540:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	f023 0210 	bic.w	r2, r3, #16
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006560:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	031b      	lsls	r3, r3, #12
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	4313      	orrs	r3, r2
 800656a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006572:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	011b      	lsls	r3, r3, #4
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	4313      	orrs	r3, r2
 800657c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	621a      	str	r2, [r3, #32]
}
 800658a:	bf00      	nop
 800658c:	371c      	adds	r7, #28
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006596:	b480      	push	{r7}
 8006598:	b085      	sub	sp, #20
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	f043 0307 	orr.w	r3, r3, #7
 80065b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	609a      	str	r2, [r3, #8]
}
 80065c0:	bf00      	nop
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
 80065d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	021a      	lsls	r2, r3, #8
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	431a      	orrs	r2, r3
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	609a      	str	r2, [r3, #8]
}
 8006600:	bf00      	nop
 8006602:	371c      	adds	r7, #28
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800661c:	2b01      	cmp	r3, #1
 800661e:	d101      	bne.n	8006624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006620:	2302      	movs	r3, #2
 8006622:	e050      	b.n	80066c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2202      	movs	r2, #2
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800664a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	4313      	orrs	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a1c      	ldr	r2, [pc, #112]	; (80066d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d018      	beq.n	800669a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006670:	d013      	beq.n	800669a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a18      	ldr	r2, [pc, #96]	; (80066d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d00e      	beq.n	800669a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a16      	ldr	r2, [pc, #88]	; (80066dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d009      	beq.n	800669a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a15      	ldr	r2, [pc, #84]	; (80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d004      	beq.n	800669a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a13      	ldr	r2, [pc, #76]	; (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d10c      	bne.n	80066b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	40010000 	.word	0x40010000
 80066d8:	40000400 	.word	0x40000400
 80066dc:	40000800 	.word	0x40000800
 80066e0:	40000c00 	.word	0x40000c00
 80066e4:	40014000 	.word	0x40014000

080066e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006710:	b084      	sub	sp, #16
 8006712:	b580      	push	{r7, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	f107 001c 	add.w	r0, r7, #28
 800671e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006724:	2b01      	cmp	r3, #1
 8006726:	d122      	bne.n	800676e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800673c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006752:	2b01      	cmp	r3, #1
 8006754:	d105      	bne.n	8006762 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f001 fbee 	bl	8007f44 <USB_CoreReset>
 8006768:	4603      	mov	r3, r0
 800676a:	73fb      	strb	r3, [r7, #15]
 800676c:	e01a      	b.n	80067a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f001 fbe2 	bl	8007f44 <USB_CoreReset>
 8006780:	4603      	mov	r3, r0
 8006782:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006786:	2b00      	cmp	r3, #0
 8006788:	d106      	bne.n	8006798 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	639a      	str	r2, [r3, #56]	; 0x38
 8006796:	e005      	b.n	80067a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80067a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d10b      	bne.n	80067c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f043 0206 	orr.w	r2, r3, #6
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f043 0220 	orr.w	r2, r3, #32
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80067c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067ce:	b004      	add	sp, #16
 80067d0:	4770      	bx	lr
	...

080067d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	4613      	mov	r3, r2
 80067e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80067e2:	79fb      	ldrb	r3, [r7, #7]
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d165      	bne.n	80068b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	4a41      	ldr	r2, [pc, #260]	; (80068f0 <USB_SetTurnaroundTime+0x11c>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d906      	bls.n	80067fe <USB_SetTurnaroundTime+0x2a>
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	4a40      	ldr	r2, [pc, #256]	; (80068f4 <USB_SetTurnaroundTime+0x120>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d202      	bcs.n	80067fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80067f8:	230f      	movs	r3, #15
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	e062      	b.n	80068c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	4a3c      	ldr	r2, [pc, #240]	; (80068f4 <USB_SetTurnaroundTime+0x120>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d306      	bcc.n	8006814 <USB_SetTurnaroundTime+0x40>
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	4a3b      	ldr	r2, [pc, #236]	; (80068f8 <USB_SetTurnaroundTime+0x124>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d202      	bcs.n	8006814 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800680e:	230e      	movs	r3, #14
 8006810:	617b      	str	r3, [r7, #20]
 8006812:	e057      	b.n	80068c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	4a38      	ldr	r2, [pc, #224]	; (80068f8 <USB_SetTurnaroundTime+0x124>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d306      	bcc.n	800682a <USB_SetTurnaroundTime+0x56>
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	4a37      	ldr	r2, [pc, #220]	; (80068fc <USB_SetTurnaroundTime+0x128>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d202      	bcs.n	800682a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006824:	230d      	movs	r3, #13
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	e04c      	b.n	80068c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	4a33      	ldr	r2, [pc, #204]	; (80068fc <USB_SetTurnaroundTime+0x128>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d306      	bcc.n	8006840 <USB_SetTurnaroundTime+0x6c>
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	4a32      	ldr	r2, [pc, #200]	; (8006900 <USB_SetTurnaroundTime+0x12c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d802      	bhi.n	8006840 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800683a:	230c      	movs	r3, #12
 800683c:	617b      	str	r3, [r7, #20]
 800683e:	e041      	b.n	80068c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	4a2f      	ldr	r2, [pc, #188]	; (8006900 <USB_SetTurnaroundTime+0x12c>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d906      	bls.n	8006856 <USB_SetTurnaroundTime+0x82>
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	4a2e      	ldr	r2, [pc, #184]	; (8006904 <USB_SetTurnaroundTime+0x130>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d802      	bhi.n	8006856 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006850:	230b      	movs	r3, #11
 8006852:	617b      	str	r3, [r7, #20]
 8006854:	e036      	b.n	80068c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	4a2a      	ldr	r2, [pc, #168]	; (8006904 <USB_SetTurnaroundTime+0x130>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d906      	bls.n	800686c <USB_SetTurnaroundTime+0x98>
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	4a29      	ldr	r2, [pc, #164]	; (8006908 <USB_SetTurnaroundTime+0x134>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d802      	bhi.n	800686c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006866:	230a      	movs	r3, #10
 8006868:	617b      	str	r3, [r7, #20]
 800686a:	e02b      	b.n	80068c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	4a26      	ldr	r2, [pc, #152]	; (8006908 <USB_SetTurnaroundTime+0x134>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d906      	bls.n	8006882 <USB_SetTurnaroundTime+0xae>
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	4a25      	ldr	r2, [pc, #148]	; (800690c <USB_SetTurnaroundTime+0x138>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d202      	bcs.n	8006882 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800687c:	2309      	movs	r3, #9
 800687e:	617b      	str	r3, [r7, #20]
 8006880:	e020      	b.n	80068c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	4a21      	ldr	r2, [pc, #132]	; (800690c <USB_SetTurnaroundTime+0x138>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d306      	bcc.n	8006898 <USB_SetTurnaroundTime+0xc4>
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	4a20      	ldr	r2, [pc, #128]	; (8006910 <USB_SetTurnaroundTime+0x13c>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d802      	bhi.n	8006898 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006892:	2308      	movs	r3, #8
 8006894:	617b      	str	r3, [r7, #20]
 8006896:	e015      	b.n	80068c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	4a1d      	ldr	r2, [pc, #116]	; (8006910 <USB_SetTurnaroundTime+0x13c>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d906      	bls.n	80068ae <USB_SetTurnaroundTime+0xda>
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	4a1c      	ldr	r2, [pc, #112]	; (8006914 <USB_SetTurnaroundTime+0x140>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d202      	bcs.n	80068ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80068a8:	2307      	movs	r3, #7
 80068aa:	617b      	str	r3, [r7, #20]
 80068ac:	e00a      	b.n	80068c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80068ae:	2306      	movs	r3, #6
 80068b0:	617b      	str	r3, [r7, #20]
 80068b2:	e007      	b.n	80068c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80068b4:	79fb      	ldrb	r3, [r7, #7]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d102      	bne.n	80068c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80068ba:	2309      	movs	r3, #9
 80068bc:	617b      	str	r3, [r7, #20]
 80068be:	e001      	b.n	80068c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80068c0:	2309      	movs	r3, #9
 80068c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	68da      	ldr	r2, [r3, #12]
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	029b      	lsls	r3, r3, #10
 80068d8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80068dc:	431a      	orrs	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	371c      	adds	r7, #28
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	00d8acbf 	.word	0x00d8acbf
 80068f4:	00e4e1c0 	.word	0x00e4e1c0
 80068f8:	00f42400 	.word	0x00f42400
 80068fc:	01067380 	.word	0x01067380
 8006900:	011a499f 	.word	0x011a499f
 8006904:	01312cff 	.word	0x01312cff
 8006908:	014ca43f 	.word	0x014ca43f
 800690c:	016e3600 	.word	0x016e3600
 8006910:	01a6ab1f 	.word	0x01a6ab1f
 8006914:	01e84800 	.word	0x01e84800

08006918 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f043 0201 	orr.w	r2, r3, #1
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f023 0201 	bic.w	r2, r3, #1
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006968:	2300      	movs	r3, #0
 800696a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006978:	78fb      	ldrb	r3, [r7, #3]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d115      	bne.n	80069aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800698a:	2001      	movs	r0, #1
 800698c:	f7fb ff50 	bl	8002830 <HAL_Delay>
      ms++;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	3301      	adds	r3, #1
 8006994:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f001 fa45 	bl	8007e26 <USB_GetMode>
 800699c:	4603      	mov	r3, r0
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d01e      	beq.n	80069e0 <USB_SetCurrentMode+0x84>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2b31      	cmp	r3, #49	; 0x31
 80069a6:	d9f0      	bls.n	800698a <USB_SetCurrentMode+0x2e>
 80069a8:	e01a      	b.n	80069e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80069aa:	78fb      	ldrb	r3, [r7, #3]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d115      	bne.n	80069dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80069bc:	2001      	movs	r0, #1
 80069be:	f7fb ff37 	bl	8002830 <HAL_Delay>
      ms++;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	3301      	adds	r3, #1
 80069c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f001 fa2c 	bl	8007e26 <USB_GetMode>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d005      	beq.n	80069e0 <USB_SetCurrentMode+0x84>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b31      	cmp	r3, #49	; 0x31
 80069d8:	d9f0      	bls.n	80069bc <USB_SetCurrentMode+0x60>
 80069da:	e001      	b.n	80069e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e005      	b.n	80069ec <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2b32      	cmp	r3, #50	; 0x32
 80069e4:	d101      	bne.n	80069ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e000      	b.n	80069ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069f4:	b084      	sub	sp, #16
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b086      	sub	sp, #24
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006a02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a06:	2300      	movs	r3, #0
 8006a08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a0e:	2300      	movs	r3, #0
 8006a10:	613b      	str	r3, [r7, #16]
 8006a12:	e009      	b.n	8006a28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	3340      	adds	r3, #64	; 0x40
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	2200      	movs	r2, #0
 8006a20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	3301      	adds	r3, #1
 8006a26:	613b      	str	r3, [r7, #16]
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	2b0e      	cmp	r3, #14
 8006a2c:	d9f2      	bls.n	8006a14 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d11c      	bne.n	8006a6e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a42:	f043 0302 	orr.w	r3, r3, #2
 8006a46:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a58:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a64:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	639a      	str	r2, [r3, #56]	; 0x38
 8006a6c:	e00b      	b.n	8006a86 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a72:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	2300      	movs	r3, #0
 8006a90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a98:	4619      	mov	r1, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	680b      	ldr	r3, [r1, #0]
 8006aa4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d10c      	bne.n	8006ac6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d104      	bne.n	8006abc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f965 	bl	8006d84 <USB_SetDevSpeed>
 8006aba:	e008      	b.n	8006ace <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006abc:	2101      	movs	r1, #1
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f960 	bl	8006d84 <USB_SetDevSpeed>
 8006ac4:	e003      	b.n	8006ace <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ac6:	2103      	movs	r1, #3
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f95b 	bl	8006d84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ace:	2110      	movs	r1, #16
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f8f3 	bl	8006cbc <USB_FlushTxFifo>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d001      	beq.n	8006ae0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f91f 	bl	8006d24 <USB_FlushRxFifo>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af6:	461a      	mov	r2, r3
 8006af8:	2300      	movs	r3, #0
 8006afa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b02:	461a      	mov	r2, r3
 8006b04:	2300      	movs	r3, #0
 8006b06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0e:	461a      	mov	r2, r3
 8006b10:	2300      	movs	r3, #0
 8006b12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b14:	2300      	movs	r3, #0
 8006b16:	613b      	str	r3, [r7, #16]
 8006b18:	e043      	b.n	8006ba2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b30:	d118      	bne.n	8006b64 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10a      	bne.n	8006b4e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	015a      	lsls	r2, r3, #5
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b44:	461a      	mov	r2, r3
 8006b46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b4a:	6013      	str	r3, [r2, #0]
 8006b4c:	e013      	b.n	8006b76 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b60:	6013      	str	r3, [r2, #0]
 8006b62:	e008      	b.n	8006b76 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b70:	461a      	mov	r2, r3
 8006b72:	2300      	movs	r3, #0
 8006b74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b82:	461a      	mov	r2, r3
 8006b84:	2300      	movs	r3, #0
 8006b86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b94:	461a      	mov	r2, r3
 8006b96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	613b      	str	r3, [r7, #16]
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d3b7      	bcc.n	8006b1a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006baa:	2300      	movs	r3, #0
 8006bac:	613b      	str	r3, [r7, #16]
 8006bae:	e043      	b.n	8006c38 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bc6:	d118      	bne.n	8006bfa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10a      	bne.n	8006be4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bda:	461a      	mov	r2, r3
 8006bdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006be0:	6013      	str	r3, [r2, #0]
 8006be2:	e013      	b.n	8006c0c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006bf6:	6013      	str	r3, [r2, #0]
 8006bf8:	e008      	b.n	8006c0c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c06:	461a      	mov	r2, r3
 8006c08:	2300      	movs	r3, #0
 8006c0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	015a      	lsls	r2, r3, #5
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c18:	461a      	mov	r2, r3
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	3301      	adds	r3, #1
 8006c36:	613b      	str	r3, [r7, #16]
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d3b7      	bcc.n	8006bb0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006c60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d105      	bne.n	8006c74 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	f043 0210 	orr.w	r2, r3, #16
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	699a      	ldr	r2, [r3, #24]
 8006c78:	4b0f      	ldr	r3, [pc, #60]	; (8006cb8 <USB_DevInit+0x2c4>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d005      	beq.n	8006c92 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	f043 0208 	orr.w	r2, r3, #8
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d107      	bne.n	8006ca8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ca0:	f043 0304 	orr.w	r3, r3, #4
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cb4:	b004      	add	sp, #16
 8006cb6:	4770      	bx	lr
 8006cb8:	803c3800 	.word	0x803c3800

08006cbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4a13      	ldr	r2, [pc, #76]	; (8006d20 <USB_FlushTxFifo+0x64>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d901      	bls.n	8006cdc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e01b      	b.n	8006d14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	daf2      	bge.n	8006cca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	019b      	lsls	r3, r3, #6
 8006cec:	f043 0220 	orr.w	r2, r3, #32
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	4a08      	ldr	r2, [pc, #32]	; (8006d20 <USB_FlushTxFifo+0x64>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d901      	bls.n	8006d06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e006      	b.n	8006d14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	f003 0320 	and.w	r3, r3, #32
 8006d0e:	2b20      	cmp	r3, #32
 8006d10:	d0f0      	beq.n	8006cf4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	00030d40 	.word	0x00030d40

08006d24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	3301      	adds	r3, #1
 8006d34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	4a11      	ldr	r2, [pc, #68]	; (8006d80 <USB_FlushRxFifo+0x5c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d901      	bls.n	8006d42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e018      	b.n	8006d74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	daf2      	bge.n	8006d30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2210      	movs	r2, #16
 8006d52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	3301      	adds	r3, #1
 8006d58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	4a08      	ldr	r2, [pc, #32]	; (8006d80 <USB_FlushRxFifo+0x5c>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d901      	bls.n	8006d66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e006      	b.n	8006d74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	f003 0310 	and.w	r3, r3, #16
 8006d6e:	2b10      	cmp	r3, #16
 8006d70:	d0f0      	beq.n	8006d54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	00030d40 	.word	0x00030d40

08006d84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	78fb      	ldrb	r3, [r7, #3]
 8006d9e:	68f9      	ldr	r1, [r7, #12]
 8006da0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006da4:	4313      	orrs	r3, r2
 8006da6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b087      	sub	sp, #28
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 0306 	and.w	r3, r3, #6
 8006dce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d102      	bne.n	8006ddc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	75fb      	strb	r3, [r7, #23]
 8006dda:	e00a      	b.n	8006df2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d002      	beq.n	8006de8 <USB_GetDevSpeed+0x32>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2b06      	cmp	r3, #6
 8006de6:	d102      	bne.n	8006dee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006de8:	2302      	movs	r3, #2
 8006dea:	75fb      	strb	r3, [r7, #23]
 8006dec:	e001      	b.n	8006df2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006dee:	230f      	movs	r3, #15
 8006df0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	371c      	adds	r7, #28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	785b      	ldrb	r3, [r3, #1]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d13a      	bne.n	8006e92 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e22:	69da      	ldr	r2, [r3, #28]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	f003 030f 	and.w	r3, r3, #15
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	68f9      	ldr	r1, [r7, #12]
 8006e36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	015a      	lsls	r2, r3, #5
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d155      	bne.n	8006f00 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	791b      	ldrb	r3, [r3, #4]
 8006e6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	059b      	lsls	r3, r3, #22
 8006e76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	0151      	lsls	r1, r2, #5
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	440a      	add	r2, r1
 8006e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e8e:	6013      	str	r3, [r2, #0]
 8006e90:	e036      	b.n	8006f00 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e98:	69da      	ldr	r2, [r3, #28]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	f003 030f 	and.w	r3, r3, #15
 8006ea2:	2101      	movs	r1, #1
 8006ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea8:	041b      	lsls	r3, r3, #16
 8006eaa:	68f9      	ldr	r1, [r7, #12]
 8006eac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d11a      	bne.n	8006f00 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	791b      	ldrb	r3, [r3, #4]
 8006ee4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006ee6:	430b      	orrs	r3, r1
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	0151      	lsls	r1, r2, #5
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	440a      	add	r2, r1
 8006ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006efe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
	...

08006f10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	785b      	ldrb	r3, [r3, #1]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d161      	bne.n	8006ff0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	015a      	lsls	r2, r3, #5
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	4413      	add	r3, r2
 8006f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f42:	d11f      	bne.n	8006f84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	0151      	lsls	r1, r2, #5
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	440a      	add	r2, r1
 8006f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	0151      	lsls	r1, r2, #5
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	440a      	add	r2, r1
 8006f7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	f003 030f 	and.w	r3, r3, #15
 8006f94:	2101      	movs	r1, #1
 8006f96:	fa01 f303 	lsl.w	r3, r1, r3
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	43db      	mvns	r3, r3
 8006f9e:	68f9      	ldr	r1, [r7, #12]
 8006fa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fae:	69da      	ldr	r2, [r3, #28]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	f003 030f 	and.w	r3, r3, #15
 8006fb8:	2101      	movs	r1, #1
 8006fba:	fa01 f303 	lsl.w	r3, r1, r3
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	43db      	mvns	r3, r3
 8006fc2:	68f9      	ldr	r1, [r7, #12]
 8006fc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fc8:	4013      	ands	r3, r2
 8006fca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	0159      	lsls	r1, r3, #5
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	440b      	add	r3, r1
 8006fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	4b35      	ldr	r3, [pc, #212]	; (80070c0 <USB_DeactivateEndpoint+0x1b0>)
 8006fea:	4013      	ands	r3, r2
 8006fec:	600b      	str	r3, [r1, #0]
 8006fee:	e060      	b.n	80070b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007002:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007006:	d11f      	bne.n	8007048 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	015a      	lsls	r2, r3, #5
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	4413      	add	r3, r2
 8007010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	0151      	lsls	r1, r2, #5
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	440a      	add	r2, r1
 800701e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007022:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007026:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	0151      	lsls	r1, r2, #5
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	440a      	add	r2, r1
 800703e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007042:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007046:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	f003 030f 	and.w	r3, r3, #15
 8007058:	2101      	movs	r1, #1
 800705a:	fa01 f303 	lsl.w	r3, r1, r3
 800705e:	041b      	lsls	r3, r3, #16
 8007060:	43db      	mvns	r3, r3
 8007062:	68f9      	ldr	r1, [r7, #12]
 8007064:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007068:	4013      	ands	r3, r2
 800706a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007072:	69da      	ldr	r2, [r3, #28]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	f003 030f 	and.w	r3, r3, #15
 800707c:	2101      	movs	r1, #1
 800707e:	fa01 f303 	lsl.w	r3, r1, r3
 8007082:	041b      	lsls	r3, r3, #16
 8007084:	43db      	mvns	r3, r3
 8007086:	68f9      	ldr	r1, [r7, #12]
 8007088:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800708c:	4013      	ands	r3, r2
 800708e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	0159      	lsls	r1, r3, #5
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	440b      	add	r3, r1
 80070a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070aa:	4619      	mov	r1, r3
 80070ac:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <USB_DeactivateEndpoint+0x1b4>)
 80070ae:	4013      	ands	r3, r2
 80070b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3714      	adds	r7, #20
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr
 80070c0:	ec337800 	.word	0xec337800
 80070c4:	eff37800 	.word	0xeff37800

080070c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08a      	sub	sp, #40	; 0x28
 80070cc:	af02      	add	r7, sp, #8
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	4613      	mov	r3, r2
 80070d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	785b      	ldrb	r3, [r3, #1]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	f040 815c 	bne.w	80073a2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d132      	bne.n	8007158 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	0151      	lsls	r1, r2, #5
 8007104:	69fa      	ldr	r2, [r7, #28]
 8007106:	440a      	add	r2, r1
 8007108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800710c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007110:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007114:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	69ba      	ldr	r2, [r7, #24]
 8007126:	0151      	lsls	r1, r2, #5
 8007128:	69fa      	ldr	r2, [r7, #28]
 800712a:	440a      	add	r2, r1
 800712c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007130:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007134:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	4413      	add	r3, r2
 800713e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	69ba      	ldr	r2, [r7, #24]
 8007146:	0151      	lsls	r1, r2, #5
 8007148:	69fa      	ldr	r2, [r7, #28]
 800714a:	440a      	add	r2, r1
 800714c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007150:	0cdb      	lsrs	r3, r3, #19
 8007152:	04db      	lsls	r3, r3, #19
 8007154:	6113      	str	r3, [r2, #16]
 8007156:	e074      	b.n	8007242 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	4413      	add	r3, r2
 8007160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	69ba      	ldr	r2, [r7, #24]
 8007168:	0151      	lsls	r1, r2, #5
 800716a:	69fa      	ldr	r2, [r7, #28]
 800716c:	440a      	add	r2, r1
 800716e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007172:	0cdb      	lsrs	r3, r3, #19
 8007174:	04db      	lsls	r3, r3, #19
 8007176:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	4413      	add	r3, r2
 8007180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	69ba      	ldr	r2, [r7, #24]
 8007188:	0151      	lsls	r1, r2, #5
 800718a:	69fa      	ldr	r2, [r7, #28]
 800718c:	440a      	add	r2, r1
 800718e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007192:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007196:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800719a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	6999      	ldr	r1, [r3, #24]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	440b      	add	r3, r1
 80071b4:	1e59      	subs	r1, r3, #1
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80071be:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80071c0:	4b9d      	ldr	r3, [pc, #628]	; (8007438 <USB_EPStartXfer+0x370>)
 80071c2:	400b      	ands	r3, r1
 80071c4:	69b9      	ldr	r1, [r7, #24]
 80071c6:	0148      	lsls	r0, r1, #5
 80071c8:	69f9      	ldr	r1, [r7, #28]
 80071ca:	4401      	add	r1, r0
 80071cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80071d0:	4313      	orrs	r3, r2
 80071d2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e0:	691a      	ldr	r2, [r3, #16]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071ea:	69b9      	ldr	r1, [r7, #24]
 80071ec:	0148      	lsls	r0, r1, #5
 80071ee:	69f9      	ldr	r1, [r7, #28]
 80071f0:	4401      	add	r1, r0
 80071f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80071f6:	4313      	orrs	r3, r2
 80071f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	791b      	ldrb	r3, [r3, #4]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d11f      	bne.n	8007242 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	015a      	lsls	r2, r3, #5
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	4413      	add	r3, r2
 800720a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	69ba      	ldr	r2, [r7, #24]
 8007212:	0151      	lsls	r1, r2, #5
 8007214:	69fa      	ldr	r2, [r7, #28]
 8007216:	440a      	add	r2, r1
 8007218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800721c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007220:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	4413      	add	r3, r2
 800722a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	69ba      	ldr	r2, [r7, #24]
 8007232:	0151      	lsls	r1, r2, #5
 8007234:	69fa      	ldr	r2, [r7, #28]
 8007236:	440a      	add	r2, r1
 8007238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800723c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007240:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007242:	79fb      	ldrb	r3, [r7, #7]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d14b      	bne.n	80072e0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d009      	beq.n	8007264 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	4413      	add	r3, r2
 8007258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800725c:	461a      	mov	r2, r3
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	791b      	ldrb	r3, [r3, #4]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d128      	bne.n	80072be <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007278:	2b00      	cmp	r3, #0
 800727a:	d110      	bne.n	800729e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69ba      	ldr	r2, [r7, #24]
 800728c:	0151      	lsls	r1, r2, #5
 800728e:	69fa      	ldr	r2, [r7, #28]
 8007290:	440a      	add	r2, r1
 8007292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007296:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800729a:	6013      	str	r3, [r2, #0]
 800729c:	e00f      	b.n	80072be <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	69ba      	ldr	r2, [r7, #24]
 80072ae:	0151      	lsls	r1, r2, #5
 80072b0:	69fa      	ldr	r2, [r7, #28]
 80072b2:	440a      	add	r2, r1
 80072b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	69ba      	ldr	r2, [r7, #24]
 80072ce:	0151      	lsls	r1, r2, #5
 80072d0:	69fa      	ldr	r2, [r7, #28]
 80072d2:	440a      	add	r2, r1
 80072d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072dc:	6013      	str	r3, [r2, #0]
 80072de:	e133      	b.n	8007548 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	69ba      	ldr	r2, [r7, #24]
 80072f0:	0151      	lsls	r1, r2, #5
 80072f2:	69fa      	ldr	r2, [r7, #28]
 80072f4:	440a      	add	r2, r1
 80072f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	791b      	ldrb	r3, [r3, #4]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d015      	beq.n	8007334 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 811b 	beq.w	8007548 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	f003 030f 	and.w	r3, r3, #15
 8007322:	2101      	movs	r1, #1
 8007324:	fa01 f303 	lsl.w	r3, r1, r3
 8007328:	69f9      	ldr	r1, [r7, #28]
 800732a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800732e:	4313      	orrs	r3, r2
 8007330:	634b      	str	r3, [r1, #52]	; 0x34
 8007332:	e109      	b.n	8007548 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007340:	2b00      	cmp	r3, #0
 8007342:	d110      	bne.n	8007366 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	69ba      	ldr	r2, [r7, #24]
 8007354:	0151      	lsls	r1, r2, #5
 8007356:	69fa      	ldr	r2, [r7, #28]
 8007358:	440a      	add	r2, r1
 800735a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800735e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007362:	6013      	str	r3, [r2, #0]
 8007364:	e00f      	b.n	8007386 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	015a      	lsls	r2, r3, #5
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	4413      	add	r3, r2
 800736e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	69ba      	ldr	r2, [r7, #24]
 8007376:	0151      	lsls	r1, r2, #5
 8007378:	69fa      	ldr	r2, [r7, #28]
 800737a:	440a      	add	r2, r1
 800737c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007384:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	6919      	ldr	r1, [r3, #16]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	781a      	ldrb	r2, [r3, #0]
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	b298      	uxth	r0, r3
 8007394:	79fb      	ldrb	r3, [r7, #7]
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	4603      	mov	r3, r0
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f000 fade 	bl	800795c <USB_WritePacket>
 80073a0:	e0d2      	b.n	8007548 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	0151      	lsls	r1, r2, #5
 80073b4:	69fa      	ldr	r2, [r7, #28]
 80073b6:	440a      	add	r2, r1
 80073b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073bc:	0cdb      	lsrs	r3, r3, #19
 80073be:	04db      	lsls	r3, r3, #19
 80073c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	015a      	lsls	r2, r3, #5
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	4413      	add	r3, r2
 80073ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	69ba      	ldr	r2, [r7, #24]
 80073d2:	0151      	lsls	r1, r2, #5
 80073d4:	69fa      	ldr	r2, [r7, #28]
 80073d6:	440a      	add	r2, r1
 80073d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d126      	bne.n	800743c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	015a      	lsls	r2, r3, #5
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fa:	691a      	ldr	r2, [r3, #16]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007404:	69b9      	ldr	r1, [r7, #24]
 8007406:	0148      	lsls	r0, r1, #5
 8007408:	69f9      	ldr	r1, [r7, #28]
 800740a:	4401      	add	r1, r0
 800740c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007410:	4313      	orrs	r3, r2
 8007412:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	015a      	lsls	r2, r3, #5
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	4413      	add	r3, r2
 800741c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	69ba      	ldr	r2, [r7, #24]
 8007424:	0151      	lsls	r1, r2, #5
 8007426:	69fa      	ldr	r2, [r7, #28]
 8007428:	440a      	add	r2, r1
 800742a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800742e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007432:	6113      	str	r3, [r2, #16]
 8007434:	e03a      	b.n	80074ac <USB_EPStartXfer+0x3e4>
 8007436:	bf00      	nop
 8007438:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	699a      	ldr	r2, [r3, #24]
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	4413      	add	r3, r2
 8007446:	1e5a      	subs	r2, r3, #1
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007450:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	8afa      	ldrh	r2, [r7, #22]
 8007458:	fb03 f202 	mul.w	r2, r3, r2
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	4413      	add	r3, r2
 8007468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800746c:	691a      	ldr	r2, [r3, #16]
 800746e:	8afb      	ldrh	r3, [r7, #22]
 8007470:	04d9      	lsls	r1, r3, #19
 8007472:	4b38      	ldr	r3, [pc, #224]	; (8007554 <USB_EPStartXfer+0x48c>)
 8007474:	400b      	ands	r3, r1
 8007476:	69b9      	ldr	r1, [r7, #24]
 8007478:	0148      	lsls	r0, r1, #5
 800747a:	69f9      	ldr	r1, [r7, #28]
 800747c:	4401      	add	r1, r0
 800747e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007482:	4313      	orrs	r3, r2
 8007484:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	015a      	lsls	r2, r3, #5
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	4413      	add	r3, r2
 800748e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007492:	691a      	ldr	r2, [r3, #16]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	69db      	ldr	r3, [r3, #28]
 8007498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800749c:	69b9      	ldr	r1, [r7, #24]
 800749e:	0148      	lsls	r0, r1, #5
 80074a0:	69f9      	ldr	r1, [r7, #28]
 80074a2:	4401      	add	r1, r0
 80074a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074a8:	4313      	orrs	r3, r2
 80074aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80074ac:	79fb      	ldrb	r3, [r7, #7]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d10d      	bne.n	80074ce <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d009      	beq.n	80074ce <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	6919      	ldr	r1, [r3, #16]
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ca:	460a      	mov	r2, r1
 80074cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	791b      	ldrb	r3, [r3, #4]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d128      	bne.n	8007528 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d110      	bne.n	8007508 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	0151      	lsls	r1, r2, #5
 80074f8:	69fa      	ldr	r2, [r7, #28]
 80074fa:	440a      	add	r2, r1
 80074fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007500:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007504:	6013      	str	r3, [r2, #0]
 8007506:	e00f      	b.n	8007528 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	015a      	lsls	r2, r3, #5
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	4413      	add	r3, r2
 8007510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	69ba      	ldr	r2, [r7, #24]
 8007518:	0151      	lsls	r1, r2, #5
 800751a:	69fa      	ldr	r2, [r7, #28]
 800751c:	440a      	add	r2, r1
 800751e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007526:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	4413      	add	r3, r2
 8007530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	69ba      	ldr	r2, [r7, #24]
 8007538:	0151      	lsls	r1, r2, #5
 800753a:	69fa      	ldr	r2, [r7, #28]
 800753c:	440a      	add	r2, r1
 800753e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007542:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007546:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3720      	adds	r7, #32
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	1ff80000 	.word	0x1ff80000

08007558 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	4613      	mov	r3, r2
 8007564:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	785b      	ldrb	r3, [r3, #1]
 8007574:	2b01      	cmp	r3, #1
 8007576:	f040 80ce 	bne.w	8007716 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d132      	bne.n	80075e8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	015a      	lsls	r2, r3, #5
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	4413      	add	r3, r2
 800758a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	0151      	lsls	r1, r2, #5
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	440a      	add	r2, r1
 8007598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800759c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80075a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	0151      	lsls	r1, r2, #5
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	440a      	add	r2, r1
 80075bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	015a      	lsls	r2, r3, #5
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	4413      	add	r3, r2
 80075ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	0151      	lsls	r1, r2, #5
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	440a      	add	r2, r1
 80075dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075e0:	0cdb      	lsrs	r3, r3, #19
 80075e2:	04db      	lsls	r3, r3, #19
 80075e4:	6113      	str	r3, [r2, #16]
 80075e6:	e04e      	b.n	8007686 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	015a      	lsls	r2, r3, #5
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	0151      	lsls	r1, r2, #5
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	440a      	add	r2, r1
 80075fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007602:	0cdb      	lsrs	r3, r3, #19
 8007604:	04db      	lsls	r3, r3, #19
 8007606:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	015a      	lsls	r2, r3, #5
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	4413      	add	r3, r2
 8007610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	0151      	lsls	r1, r2, #5
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	440a      	add	r2, r1
 800761e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007622:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007626:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800762a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	699a      	ldr	r2, [r3, #24]
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	429a      	cmp	r2, r3
 8007636:	d903      	bls.n	8007640 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	68da      	ldr	r2, [r3, #12]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	015a      	lsls	r2, r3, #5
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	4413      	add	r3, r2
 8007648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	0151      	lsls	r1, r2, #5
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	440a      	add	r2, r1
 8007656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800765a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800765e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	015a      	lsls	r2, r3, #5
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	4413      	add	r3, r2
 8007668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766c:	691a      	ldr	r2, [r3, #16]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007676:	6939      	ldr	r1, [r7, #16]
 8007678:	0148      	lsls	r0, r1, #5
 800767a:	6979      	ldr	r1, [r7, #20]
 800767c:	4401      	add	r1, r0
 800767e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007682:	4313      	orrs	r3, r2
 8007684:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007686:	79fb      	ldrb	r3, [r7, #7]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d11e      	bne.n	80076ca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d009      	beq.n	80076a8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	015a      	lsls	r2, r3, #5
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	4413      	add	r3, r2
 800769c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a0:	461a      	mov	r2, r3
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	0151      	lsls	r1, r2, #5
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	440a      	add	r2, r1
 80076be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076c6:	6013      	str	r3, [r2, #0]
 80076c8:	e097      	b.n	80077fa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	015a      	lsls	r2, r3, #5
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	0151      	lsls	r1, r2, #5
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	440a      	add	r2, r1
 80076e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076e8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 8083 	beq.w	80077fa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	f003 030f 	and.w	r3, r3, #15
 8007704:	2101      	movs	r1, #1
 8007706:	fa01 f303 	lsl.w	r3, r1, r3
 800770a:	6979      	ldr	r1, [r7, #20]
 800770c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007710:	4313      	orrs	r3, r2
 8007712:	634b      	str	r3, [r1, #52]	; 0x34
 8007714:	e071      	b.n	80077fa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	4413      	add	r3, r2
 800771e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	0151      	lsls	r1, r2, #5
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	440a      	add	r2, r1
 800772c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007730:	0cdb      	lsrs	r3, r3, #19
 8007732:	04db      	lsls	r3, r3, #19
 8007734:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	015a      	lsls	r2, r3, #5
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	4413      	add	r3, r2
 800773e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	0151      	lsls	r1, r2, #5
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	440a      	add	r2, r1
 800774c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007750:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007754:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007758:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	68da      	ldr	r2, [r3, #12]
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	68da      	ldr	r2, [r3, #12]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	015a      	lsls	r2, r3, #5
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	4413      	add	r3, r2
 800777a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	0151      	lsls	r1, r2, #5
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	440a      	add	r2, r1
 8007788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800778c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007790:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	015a      	lsls	r2, r3, #5
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	4413      	add	r3, r2
 800779a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800779e:	691a      	ldr	r2, [r3, #16]
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077a8:	6939      	ldr	r1, [r7, #16]
 80077aa:	0148      	lsls	r0, r1, #5
 80077ac:	6979      	ldr	r1, [r7, #20]
 80077ae:	4401      	add	r1, r0
 80077b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80077b4:	4313      	orrs	r3, r2
 80077b6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80077b8:	79fb      	ldrb	r3, [r7, #7]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d10d      	bne.n	80077da <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d009      	beq.n	80077da <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	6919      	ldr	r1, [r3, #16]
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	015a      	lsls	r2, r3, #5
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	4413      	add	r3, r2
 80077d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d6:	460a      	mov	r2, r1
 80077d8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	015a      	lsls	r2, r3, #5
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	4413      	add	r3, r2
 80077e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	0151      	lsls	r1, r2, #5
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	440a      	add	r2, r1
 80077f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	371c      	adds	r7, #28
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007808:	b480      	push	{r7}
 800780a:	b087      	sub	sp, #28
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007812:	2300      	movs	r3, #0
 8007814:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007816:	2300      	movs	r3, #0
 8007818:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	785b      	ldrb	r3, [r3, #1]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d14a      	bne.n	80078bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	4413      	add	r3, r2
 8007830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800783a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800783e:	f040 8086 	bne.w	800794e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	015a      	lsls	r2, r3, #5
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	4413      	add	r3, r2
 800784c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	7812      	ldrb	r2, [r2, #0]
 8007856:	0151      	lsls	r1, r2, #5
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	440a      	add	r2, r1
 800785c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007860:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007864:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	015a      	lsls	r2, r3, #5
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	4413      	add	r3, r2
 8007870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	683a      	ldr	r2, [r7, #0]
 8007878:	7812      	ldrb	r2, [r2, #0]
 800787a:	0151      	lsls	r1, r2, #5
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	440a      	add	r2, r1
 8007880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007884:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007888:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	3301      	adds	r3, #1
 800788e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f242 7210 	movw	r2, #10000	; 0x2710
 8007896:	4293      	cmp	r3, r2
 8007898:	d902      	bls.n	80078a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	75fb      	strb	r3, [r7, #23]
          break;
 800789e:	e056      	b.n	800794e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	015a      	lsls	r2, r3, #5
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	4413      	add	r3, r2
 80078aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078b8:	d0e7      	beq.n	800788a <USB_EPStopXfer+0x82>
 80078ba:	e048      	b.n	800794e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	015a      	lsls	r2, r3, #5
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	4413      	add	r3, r2
 80078c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078d4:	d13b      	bne.n	800794e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	7812      	ldrb	r2, [r2, #0]
 80078ea:	0151      	lsls	r1, r2, #5
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	440a      	add	r2, r1
 80078f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	015a      	lsls	r2, r3, #5
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	4413      	add	r3, r2
 8007904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	683a      	ldr	r2, [r7, #0]
 800790c:	7812      	ldrb	r2, [r2, #0]
 800790e:	0151      	lsls	r1, r2, #5
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	440a      	add	r2, r1
 8007914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007918:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800791c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3301      	adds	r3, #1
 8007922:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f242 7210 	movw	r2, #10000	; 0x2710
 800792a:	4293      	cmp	r3, r2
 800792c:	d902      	bls.n	8007934 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	75fb      	strb	r3, [r7, #23]
          break;
 8007932:	e00c      	b.n	800794e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	4413      	add	r3, r2
 800793e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007948:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800794c:	d0e7      	beq.n	800791e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800794e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007950:	4618      	mov	r0, r3
 8007952:	371c      	adds	r7, #28
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800795c:	b480      	push	{r7}
 800795e:	b089      	sub	sp, #36	; 0x24
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	4611      	mov	r1, r2
 8007968:	461a      	mov	r2, r3
 800796a:	460b      	mov	r3, r1
 800796c:	71fb      	strb	r3, [r7, #7]
 800796e:	4613      	mov	r3, r2
 8007970:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800797a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800797e:	2b00      	cmp	r3, #0
 8007980:	d123      	bne.n	80079ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007982:	88bb      	ldrh	r3, [r7, #4]
 8007984:	3303      	adds	r3, #3
 8007986:	089b      	lsrs	r3, r3, #2
 8007988:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800798a:	2300      	movs	r3, #0
 800798c:	61bb      	str	r3, [r7, #24]
 800798e:	e018      	b.n	80079c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007990:	79fb      	ldrb	r3, [r7, #7]
 8007992:	031a      	lsls	r2, r3, #12
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	4413      	add	r3, r2
 8007998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800799c:	461a      	mov	r2, r3
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	3301      	adds	r3, #1
 80079a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	3301      	adds	r3, #1
 80079ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	3301      	adds	r3, #1
 80079b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	3301      	adds	r3, #1
 80079ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	3301      	adds	r3, #1
 80079c0:	61bb      	str	r3, [r7, #24]
 80079c2:	69ba      	ldr	r2, [r7, #24]
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d3e2      	bcc.n	8007990 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3724      	adds	r7, #36	; 0x24
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80079d8:	b480      	push	{r7}
 80079da:	b08b      	sub	sp, #44	; 0x2c
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	4613      	mov	r3, r2
 80079e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80079ee:	88fb      	ldrh	r3, [r7, #6]
 80079f0:	089b      	lsrs	r3, r3, #2
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80079f6:	88fb      	ldrh	r3, [r7, #6]
 80079f8:	f003 0303 	and.w	r3, r3, #3
 80079fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80079fe:	2300      	movs	r3, #0
 8007a00:	623b      	str	r3, [r7, #32]
 8007a02:	e014      	b.n	8007a2e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	3301      	adds	r3, #1
 8007a14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a18:	3301      	adds	r3, #1
 8007a1a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1e:	3301      	adds	r3, #1
 8007a20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a24:	3301      	adds	r3, #1
 8007a26:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007a28:	6a3b      	ldr	r3, [r7, #32]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	623b      	str	r3, [r7, #32]
 8007a2e:	6a3a      	ldr	r2, [r7, #32]
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d3e6      	bcc.n	8007a04 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007a36:	8bfb      	ldrh	r3, [r7, #30]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d01e      	beq.n	8007a7a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a46:	461a      	mov	r2, r3
 8007a48:	f107 0310 	add.w	r3, r7, #16
 8007a4c:	6812      	ldr	r2, [r2, #0]
 8007a4e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	6a3b      	ldr	r3, [r7, #32]
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	00db      	lsls	r3, r3, #3
 8007a58:	fa22 f303 	lsr.w	r3, r2, r3
 8007a5c:	b2da      	uxtb	r2, r3
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a60:	701a      	strb	r2, [r3, #0]
      i++;
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	3301      	adds	r3, #1
 8007a66:	623b      	str	r3, [r7, #32]
      pDest++;
 8007a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007a6e:	8bfb      	ldrh	r3, [r7, #30]
 8007a70:	3b01      	subs	r3, #1
 8007a72:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007a74:	8bfb      	ldrh	r3, [r7, #30]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1ea      	bne.n	8007a50 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	372c      	adds	r7, #44	; 0x2c
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	785b      	ldrb	r3, [r3, #1]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d12c      	bne.n	8007afe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	015a      	lsls	r2, r3, #5
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	4413      	add	r3, r2
 8007aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	db12      	blt.n	8007adc <USB_EPSetStall+0x54>
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00f      	beq.n	8007adc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	015a      	lsls	r2, r3, #5
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	0151      	lsls	r1, r2, #5
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	440a      	add	r2, r1
 8007ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ad6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ada:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	0151      	lsls	r1, r2, #5
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	440a      	add	r2, r1
 8007af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007af6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	e02b      	b.n	8007b56 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	015a      	lsls	r2, r3, #5
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	4413      	add	r3, r2
 8007b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	db12      	blt.n	8007b36 <USB_EPSetStall+0xae>
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00f      	beq.n	8007b36 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	015a      	lsls	r2, r3, #5
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	0151      	lsls	r1, r2, #5
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	440a      	add	r2, r1
 8007b2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b34:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	015a      	lsls	r2, r3, #5
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	0151      	lsls	r1, r2, #5
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	440a      	add	r2, r1
 8007b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b54:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3714      	adds	r7, #20
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	785b      	ldrb	r3, [r3, #1]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d128      	bne.n	8007bd2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	015a      	lsls	r2, r3, #5
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	4413      	add	r3, r2
 8007b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	0151      	lsls	r1, r2, #5
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	440a      	add	r2, r1
 8007b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b9e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	791b      	ldrb	r3, [r3, #4]
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	d003      	beq.n	8007bb0 <USB_EPClearStall+0x4c>
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	791b      	ldrb	r3, [r3, #4]
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d138      	bne.n	8007c22 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	015a      	lsls	r2, r3, #5
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	0151      	lsls	r1, r2, #5
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	440a      	add	r2, r1
 8007bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bce:	6013      	str	r3, [r2, #0]
 8007bd0:	e027      	b.n	8007c22 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	0151      	lsls	r1, r2, #5
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	440a      	add	r2, r1
 8007be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bf0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	791b      	ldrb	r3, [r3, #4]
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d003      	beq.n	8007c02 <USB_EPClearStall+0x9e>
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	791b      	ldrb	r3, [r3, #4]
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d10f      	bne.n	8007c22 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	0151      	lsls	r1, r2, #5
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	440a      	add	r2, r1
 8007c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c20:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3714      	adds	r7, #20
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c4e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007c52:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	78fb      	ldrb	r3, [r7, #3]
 8007c5e:	011b      	lsls	r3, r3, #4
 8007c60:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007c64:	68f9      	ldr	r1, [r7, #12]
 8007c66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c96:	f023 0303 	bic.w	r3, r3, #3
 8007c9a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007caa:	f023 0302 	bic.w	r3, r3, #2
 8007cae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b085      	sub	sp, #20
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007cd8:	f023 0303 	bic.w	r3, r3, #3
 8007cdc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cec:	f043 0302 	orr.w	r3, r3, #2
 8007cf0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3714      	adds	r7, #20
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	4013      	ands	r3, r2
 8007d16:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d18:	68fb      	ldr	r3, [r7, #12]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b085      	sub	sp, #20
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d42:	69db      	ldr	r3, [r3, #28]
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	4013      	ands	r3, r2
 8007d48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	0c1b      	lsrs	r3, r3, #16
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3714      	adds	r7, #20
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b085      	sub	sp, #20
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d6c:	699b      	ldr	r3, [r3, #24]
 8007d6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d76:	69db      	ldr	r3, [r3, #28]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	b29b      	uxth	r3, r3
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3714      	adds	r7, #20
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b085      	sub	sp, #20
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	460b      	mov	r3, r1
 8007d98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007d9e:	78fb      	ldrb	r3, [r7, #3]
 8007da0:	015a      	lsls	r2, r3, #5
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	4413      	add	r3, r2
 8007da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	4013      	ands	r3, r2
 8007dba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007dbc:	68bb      	ldr	r3, [r7, #8]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b087      	sub	sp, #28
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007dee:	78fb      	ldrb	r3, [r7, #3]
 8007df0:	f003 030f 	and.w	r3, r3, #15
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	fa22 f303 	lsr.w	r3, r2, r3
 8007dfa:	01db      	lsls	r3, r3, #7
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e04:	78fb      	ldrb	r3, [r7, #3]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	4013      	ands	r3, r2
 8007e16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e18:	68bb      	ldr	r3, [r7, #8]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	371c      	adds	r7, #28
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b083      	sub	sp, #12
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	f003 0301 	and.w	r3, r3, #1
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b085      	sub	sp, #20
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e5c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007e60:	f023 0307 	bic.w	r3, r3, #7
 8007e64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3714      	adds	r7, #20
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b087      	sub	sp, #28
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	460b      	mov	r3, r1
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	333c      	adds	r3, #60	; 0x3c
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	4a26      	ldr	r2, [pc, #152]	; (8007f40 <USB_EP0_OutStart+0xb8>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d90a      	bls.n	8007ec2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ebc:	d101      	bne.n	8007ec2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	e037      	b.n	8007f32 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec8:	461a      	mov	r2, r3
 8007eca:	2300      	movs	r3, #0
 8007ecc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007edc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ee0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ef0:	f043 0318 	orr.w	r3, r3, #24
 8007ef4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f04:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007f08:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007f0a:	7afb      	ldrb	r3, [r7, #11]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d10f      	bne.n	8007f30 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f16:	461a      	mov	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	697a      	ldr	r2, [r7, #20]
 8007f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f2a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007f2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	371c      	adds	r7, #28
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	4f54300a 	.word	0x4f54300a

08007f44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	3301      	adds	r3, #1
 8007f54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	4a13      	ldr	r2, [pc, #76]	; (8007fa8 <USB_CoreReset+0x64>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d901      	bls.n	8007f62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e01b      	b.n	8007f9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	daf2      	bge.n	8007f50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	f043 0201 	orr.w	r2, r3, #1
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4a09      	ldr	r2, [pc, #36]	; (8007fa8 <USB_CoreReset+0x64>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d901      	bls.n	8007f8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	e006      	b.n	8007f9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	f003 0301 	and.w	r3, r3, #1
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d0f0      	beq.n	8007f7a <USB_CoreReset+0x36>

  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3714      	adds	r7, #20
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	00030d40 	.word	0x00030d40

08007fac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007fb8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007fbc:	f005 f9dc 	bl	800d378 <USBD_static_malloc>
 8007fc0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d109      	bne.n	8007fdc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	32b0      	adds	r2, #176	; 0xb0
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007fd8:	2302      	movs	r3, #2
 8007fda:	e0d4      	b.n	8008186 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007fdc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f005 fb4e 	bl	800d684 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	32b0      	adds	r2, #176	; 0xb0
 8007ff2:	68f9      	ldr	r1, [r7, #12]
 8007ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	32b0      	adds	r2, #176	; 0xb0
 8008002:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	7c1b      	ldrb	r3, [r3, #16]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d138      	bne.n	8008086 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008014:	4b5e      	ldr	r3, [pc, #376]	; (8008190 <USBD_CDC_Init+0x1e4>)
 8008016:	7819      	ldrb	r1, [r3, #0]
 8008018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800801c:	2202      	movs	r2, #2
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f005 f887 	bl	800d132 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008024:	4b5a      	ldr	r3, [pc, #360]	; (8008190 <USBD_CDC_Init+0x1e4>)
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	f003 020f 	and.w	r2, r3, #15
 800802c:	6879      	ldr	r1, [r7, #4]
 800802e:	4613      	mov	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	4413      	add	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	440b      	add	r3, r1
 8008038:	3324      	adds	r3, #36	; 0x24
 800803a:	2201      	movs	r2, #1
 800803c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800803e:	4b55      	ldr	r3, [pc, #340]	; (8008194 <USBD_CDC_Init+0x1e8>)
 8008040:	7819      	ldrb	r1, [r3, #0]
 8008042:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008046:	2202      	movs	r2, #2
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f005 f872 	bl	800d132 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800804e:	4b51      	ldr	r3, [pc, #324]	; (8008194 <USBD_CDC_Init+0x1e8>)
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	f003 020f 	and.w	r2, r3, #15
 8008056:	6879      	ldr	r1, [r7, #4]
 8008058:	4613      	mov	r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4413      	add	r3, r2
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	440b      	add	r3, r1
 8008062:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008066:	2201      	movs	r2, #1
 8008068:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800806a:	4b4b      	ldr	r3, [pc, #300]	; (8008198 <USBD_CDC_Init+0x1ec>)
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	f003 020f 	and.w	r2, r3, #15
 8008072:	6879      	ldr	r1, [r7, #4]
 8008074:	4613      	mov	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	440b      	add	r3, r1
 800807e:	3326      	adds	r3, #38	; 0x26
 8008080:	2210      	movs	r2, #16
 8008082:	801a      	strh	r2, [r3, #0]
 8008084:	e035      	b.n	80080f2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008086:	4b42      	ldr	r3, [pc, #264]	; (8008190 <USBD_CDC_Init+0x1e4>)
 8008088:	7819      	ldrb	r1, [r3, #0]
 800808a:	2340      	movs	r3, #64	; 0x40
 800808c:	2202      	movs	r2, #2
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f005 f84f 	bl	800d132 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008094:	4b3e      	ldr	r3, [pc, #248]	; (8008190 <USBD_CDC_Init+0x1e4>)
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	f003 020f 	and.w	r2, r3, #15
 800809c:	6879      	ldr	r1, [r7, #4]
 800809e:	4613      	mov	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4413      	add	r3, r2
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	440b      	add	r3, r1
 80080a8:	3324      	adds	r3, #36	; 0x24
 80080aa:	2201      	movs	r2, #1
 80080ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80080ae:	4b39      	ldr	r3, [pc, #228]	; (8008194 <USBD_CDC_Init+0x1e8>)
 80080b0:	7819      	ldrb	r1, [r3, #0]
 80080b2:	2340      	movs	r3, #64	; 0x40
 80080b4:	2202      	movs	r2, #2
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f005 f83b 	bl	800d132 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80080bc:	4b35      	ldr	r3, [pc, #212]	; (8008194 <USBD_CDC_Init+0x1e8>)
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	f003 020f 	and.w	r2, r3, #15
 80080c4:	6879      	ldr	r1, [r7, #4]
 80080c6:	4613      	mov	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	440b      	add	r3, r1
 80080d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80080d4:	2201      	movs	r2, #1
 80080d6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80080d8:	4b2f      	ldr	r3, [pc, #188]	; (8008198 <USBD_CDC_Init+0x1ec>)
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	f003 020f 	and.w	r2, r3, #15
 80080e0:	6879      	ldr	r1, [r7, #4]
 80080e2:	4613      	mov	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4413      	add	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	440b      	add	r3, r1
 80080ec:	3326      	adds	r3, #38	; 0x26
 80080ee:	2210      	movs	r2, #16
 80080f0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80080f2:	4b29      	ldr	r3, [pc, #164]	; (8008198 <USBD_CDC_Init+0x1ec>)
 80080f4:	7819      	ldrb	r1, [r3, #0]
 80080f6:	2308      	movs	r3, #8
 80080f8:	2203      	movs	r2, #3
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f005 f819 	bl	800d132 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008100:	4b25      	ldr	r3, [pc, #148]	; (8008198 <USBD_CDC_Init+0x1ec>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	f003 020f 	and.w	r2, r3, #15
 8008108:	6879      	ldr	r1, [r7, #4]
 800810a:	4613      	mov	r3, r2
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4413      	add	r3, r2
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	440b      	add	r3, r1
 8008114:	3324      	adds	r3, #36	; 0x24
 8008116:	2201      	movs	r2, #1
 8008118:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	33b0      	adds	r3, #176	; 0xb0
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008150:	2302      	movs	r3, #2
 8008152:	e018      	b.n	8008186 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	7c1b      	ldrb	r3, [r3, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10a      	bne.n	8008172 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800815c:	4b0d      	ldr	r3, [pc, #52]	; (8008194 <USBD_CDC_Init+0x1e8>)
 800815e:	7819      	ldrb	r1, [r3, #0]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008166:	f44f 7300 	mov.w	r3, #512	; 0x200
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f005 f8d0 	bl	800d310 <USBD_LL_PrepareReceive>
 8008170:	e008      	b.n	8008184 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008172:	4b08      	ldr	r3, [pc, #32]	; (8008194 <USBD_CDC_Init+0x1e8>)
 8008174:	7819      	ldrb	r1, [r3, #0]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800817c:	2340      	movs	r3, #64	; 0x40
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f005 f8c6 	bl	800d310 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	200000bb 	.word	0x200000bb
 8008194:	200000bc 	.word	0x200000bc
 8008198:	200000bd 	.word	0x200000bd

0800819c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	460b      	mov	r3, r1
 80081a6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80081a8:	4b3a      	ldr	r3, [pc, #232]	; (8008294 <USBD_CDC_DeInit+0xf8>)
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	4619      	mov	r1, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f004 ffe5 	bl	800d17e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80081b4:	4b37      	ldr	r3, [pc, #220]	; (8008294 <USBD_CDC_DeInit+0xf8>)
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	f003 020f 	and.w	r2, r3, #15
 80081bc:	6879      	ldr	r1, [r7, #4]
 80081be:	4613      	mov	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	440b      	add	r3, r1
 80081c8:	3324      	adds	r3, #36	; 0x24
 80081ca:	2200      	movs	r2, #0
 80081cc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80081ce:	4b32      	ldr	r3, [pc, #200]	; (8008298 <USBD_CDC_DeInit+0xfc>)
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f004 ffd2 	bl	800d17e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80081da:	4b2f      	ldr	r3, [pc, #188]	; (8008298 <USBD_CDC_DeInit+0xfc>)
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	f003 020f 	and.w	r2, r3, #15
 80081e2:	6879      	ldr	r1, [r7, #4]
 80081e4:	4613      	mov	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	440b      	add	r3, r1
 80081ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80081f2:	2200      	movs	r2, #0
 80081f4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80081f6:	4b29      	ldr	r3, [pc, #164]	; (800829c <USBD_CDC_DeInit+0x100>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	4619      	mov	r1, r3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f004 ffbe 	bl	800d17e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008202:	4b26      	ldr	r3, [pc, #152]	; (800829c <USBD_CDC_DeInit+0x100>)
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	f003 020f 	and.w	r2, r3, #15
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	4613      	mov	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	440b      	add	r3, r1
 8008216:	3324      	adds	r3, #36	; 0x24
 8008218:	2200      	movs	r2, #0
 800821a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800821c:	4b1f      	ldr	r3, [pc, #124]	; (800829c <USBD_CDC_DeInit+0x100>)
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	f003 020f 	and.w	r2, r3, #15
 8008224:	6879      	ldr	r1, [r7, #4]
 8008226:	4613      	mov	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4413      	add	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	440b      	add	r3, r1
 8008230:	3326      	adds	r3, #38	; 0x26
 8008232:	2200      	movs	r2, #0
 8008234:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	32b0      	adds	r2, #176	; 0xb0
 8008240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d01f      	beq.n	8008288 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	33b0      	adds	r3, #176	; 0xb0
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4413      	add	r3, r2
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	32b0      	adds	r2, #176	; 0xb0
 8008266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800826a:	4618      	mov	r0, r3
 800826c:	f005 f892 	bl	800d394 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	32b0      	adds	r2, #176	; 0xb0
 800827a:	2100      	movs	r1, #0
 800827c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	200000bb 	.word	0x200000bb
 8008298:	200000bc 	.word	0x200000bc
 800829c:	200000bd 	.word	0x200000bd

080082a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	32b0      	adds	r2, #176	; 0xb0
 80082b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80082be:	2300      	movs	r3, #0
 80082c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e0bf      	b.n	8008450 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d050      	beq.n	800837e <USBD_CDC_Setup+0xde>
 80082dc:	2b20      	cmp	r3, #32
 80082de:	f040 80af 	bne.w	8008440 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	88db      	ldrh	r3, [r3, #6]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d03a      	beq.n	8008360 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	b25b      	sxtb	r3, r3
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	da1b      	bge.n	800832c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	33b0      	adds	r3, #176	; 0xb0
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4413      	add	r3, r2
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800830a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800830c:	683a      	ldr	r2, [r7, #0]
 800830e:	88d2      	ldrh	r2, [r2, #6]
 8008310:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	88db      	ldrh	r3, [r3, #6]
 8008316:	2b07      	cmp	r3, #7
 8008318:	bf28      	it	cs
 800831a:	2307      	movcs	r3, #7
 800831c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	89fa      	ldrh	r2, [r7, #14]
 8008322:	4619      	mov	r1, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f001 fd43 	bl	8009db0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800832a:	e090      	b.n	800844e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	785a      	ldrb	r2, [r3, #1]
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	88db      	ldrh	r3, [r3, #6]
 800833a:	2b3f      	cmp	r3, #63	; 0x3f
 800833c:	d803      	bhi.n	8008346 <USBD_CDC_Setup+0xa6>
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	88db      	ldrh	r3, [r3, #6]
 8008342:	b2da      	uxtb	r2, r3
 8008344:	e000      	b.n	8008348 <USBD_CDC_Setup+0xa8>
 8008346:	2240      	movs	r2, #64	; 0x40
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800834e:	6939      	ldr	r1, [r7, #16]
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008356:	461a      	mov	r2, r3
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f001 fd55 	bl	8009e08 <USBD_CtlPrepareRx>
      break;
 800835e:	e076      	b.n	800844e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	33b0      	adds	r3, #176	; 0xb0
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4413      	add	r3, r2
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	7850      	ldrb	r0, [r2, #1]
 8008376:	2200      	movs	r2, #0
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	4798      	blx	r3
      break;
 800837c:	e067      	b.n	800844e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	785b      	ldrb	r3, [r3, #1]
 8008382:	2b0b      	cmp	r3, #11
 8008384:	d851      	bhi.n	800842a <USBD_CDC_Setup+0x18a>
 8008386:	a201      	add	r2, pc, #4	; (adr r2, 800838c <USBD_CDC_Setup+0xec>)
 8008388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838c:	080083bd 	.word	0x080083bd
 8008390:	08008439 	.word	0x08008439
 8008394:	0800842b 	.word	0x0800842b
 8008398:	0800842b 	.word	0x0800842b
 800839c:	0800842b 	.word	0x0800842b
 80083a0:	0800842b 	.word	0x0800842b
 80083a4:	0800842b 	.word	0x0800842b
 80083a8:	0800842b 	.word	0x0800842b
 80083ac:	0800842b 	.word	0x0800842b
 80083b0:	0800842b 	.word	0x0800842b
 80083b4:	080083e7 	.word	0x080083e7
 80083b8:	08008411 	.word	0x08008411
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d107      	bne.n	80083d8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80083c8:	f107 030a 	add.w	r3, r7, #10
 80083cc:	2202      	movs	r2, #2
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f001 fced 	bl	8009db0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083d6:	e032      	b.n	800843e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80083d8:	6839      	ldr	r1, [r7, #0]
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f001 fc77 	bl	8009cce <USBD_CtlError>
            ret = USBD_FAIL;
 80083e0:	2303      	movs	r3, #3
 80083e2:	75fb      	strb	r3, [r7, #23]
          break;
 80083e4:	e02b      	b.n	800843e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	d107      	bne.n	8008402 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80083f2:	f107 030d 	add.w	r3, r7, #13
 80083f6:	2201      	movs	r2, #1
 80083f8:	4619      	mov	r1, r3
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f001 fcd8 	bl	8009db0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008400:	e01d      	b.n	800843e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f001 fc62 	bl	8009cce <USBD_CtlError>
            ret = USBD_FAIL;
 800840a:	2303      	movs	r3, #3
 800840c:	75fb      	strb	r3, [r7, #23]
          break;
 800840e:	e016      	b.n	800843e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b03      	cmp	r3, #3
 800841a:	d00f      	beq.n	800843c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800841c:	6839      	ldr	r1, [r7, #0]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f001 fc55 	bl	8009cce <USBD_CtlError>
            ret = USBD_FAIL;
 8008424:	2303      	movs	r3, #3
 8008426:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008428:	e008      	b.n	800843c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f001 fc4e 	bl	8009cce <USBD_CtlError>
          ret = USBD_FAIL;
 8008432:	2303      	movs	r3, #3
 8008434:	75fb      	strb	r3, [r7, #23]
          break;
 8008436:	e002      	b.n	800843e <USBD_CDC_Setup+0x19e>
          break;
 8008438:	bf00      	nop
 800843a:	e008      	b.n	800844e <USBD_CDC_Setup+0x1ae>
          break;
 800843c:	bf00      	nop
      }
      break;
 800843e:	e006      	b.n	800844e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008440:	6839      	ldr	r1, [r7, #0]
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f001 fc43 	bl	8009cce <USBD_CtlError>
      ret = USBD_FAIL;
 8008448:	2303      	movs	r3, #3
 800844a:	75fb      	strb	r3, [r7, #23]
      break;
 800844c:	bf00      	nop
  }

  return (uint8_t)ret;
 800844e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3718      	adds	r7, #24
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	460b      	mov	r3, r1
 8008462:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800846a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	32b0      	adds	r2, #176	; 0xb0
 8008476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800847e:	2303      	movs	r3, #3
 8008480:	e065      	b.n	800854e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	32b0      	adds	r2, #176	; 0xb0
 800848c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008490:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008492:	78fb      	ldrb	r3, [r7, #3]
 8008494:	f003 020f 	and.w	r2, r3, #15
 8008498:	6879      	ldr	r1, [r7, #4]
 800849a:	4613      	mov	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4413      	add	r3, r2
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	440b      	add	r3, r1
 80084a4:	3318      	adds	r3, #24
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d02f      	beq.n	800850c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80084ac:	78fb      	ldrb	r3, [r7, #3]
 80084ae:	f003 020f 	and.w	r2, r3, #15
 80084b2:	6879      	ldr	r1, [r7, #4]
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	440b      	add	r3, r1
 80084be:	3318      	adds	r3, #24
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	78fb      	ldrb	r3, [r7, #3]
 80084c4:	f003 010f 	and.w	r1, r3, #15
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	460b      	mov	r3, r1
 80084cc:	00db      	lsls	r3, r3, #3
 80084ce:	440b      	add	r3, r1
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4403      	add	r3, r0
 80084d4:	3348      	adds	r3, #72	; 0x48
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80084dc:	fb01 f303 	mul.w	r3, r1, r3
 80084e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d112      	bne.n	800850c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80084e6:	78fb      	ldrb	r3, [r7, #3]
 80084e8:	f003 020f 	and.w	r2, r3, #15
 80084ec:	6879      	ldr	r1, [r7, #4]
 80084ee:	4613      	mov	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	440b      	add	r3, r1
 80084f8:	3318      	adds	r3, #24
 80084fa:	2200      	movs	r2, #0
 80084fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80084fe:	78f9      	ldrb	r1, [r7, #3]
 8008500:	2300      	movs	r3, #0
 8008502:	2200      	movs	r2, #0
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f004 fee2 	bl	800d2ce <USBD_LL_Transmit>
 800850a:	e01f      	b.n	800854c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	2200      	movs	r2, #0
 8008510:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	33b0      	adds	r3, #176	; 0xb0
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d010      	beq.n	800854c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	33b0      	adds	r3, #176	; 0xb0
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4413      	add	r3, r2
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008548:	78fa      	ldrb	r2, [r7, #3]
 800854a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	460b      	mov	r3, r1
 8008560:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	32b0      	adds	r2, #176	; 0xb0
 800856c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008570:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	32b0      	adds	r2, #176	; 0xb0
 800857c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008584:	2303      	movs	r3, #3
 8008586:	e01a      	b.n	80085be <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008588:	78fb      	ldrb	r3, [r7, #3]
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f004 fee0 	bl	800d352 <USBD_LL_GetRxDataSize>
 8008592:	4602      	mov	r2, r0
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	33b0      	adds	r3, #176	; 0xb0
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4413      	add	r3, r2
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80085b8:	4611      	mov	r1, r2
 80085ba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b084      	sub	sp, #16
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	32b0      	adds	r2, #176	; 0xb0
 80085d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e025      	b.n	8008634 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	33b0      	adds	r3, #176	; 0xb0
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d01a      	beq.n	8008632 <USBD_CDC_EP0_RxReady+0x6c>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008602:	2bff      	cmp	r3, #255	; 0xff
 8008604:	d015      	beq.n	8008632 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	33b0      	adds	r3, #176	; 0xb0
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800861e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008626:	b292      	uxth	r2, r2
 8008628:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	22ff      	movs	r2, #255	; 0xff
 800862e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008644:	2182      	movs	r1, #130	; 0x82
 8008646:	4818      	ldr	r0, [pc, #96]	; (80086a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008648:	f000 fd09 	bl	800905e <USBD_GetEpDesc>
 800864c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800864e:	2101      	movs	r1, #1
 8008650:	4815      	ldr	r0, [pc, #84]	; (80086a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008652:	f000 fd04 	bl	800905e <USBD_GetEpDesc>
 8008656:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008658:	2181      	movs	r1, #129	; 0x81
 800865a:	4813      	ldr	r0, [pc, #76]	; (80086a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800865c:	f000 fcff 	bl	800905e <USBD_GetEpDesc>
 8008660:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d002      	beq.n	800866e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	2210      	movs	r2, #16
 800866c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d006      	beq.n	8008682 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	2200      	movs	r2, #0
 8008678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800867c:	711a      	strb	r2, [r3, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d006      	beq.n	8008696 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008690:	711a      	strb	r2, [r3, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2243      	movs	r2, #67	; 0x43
 800869a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800869c:	4b02      	ldr	r3, [pc, #8]	; (80086a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3718      	adds	r7, #24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	20000078 	.word	0x20000078

080086ac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80086b4:	2182      	movs	r1, #130	; 0x82
 80086b6:	4818      	ldr	r0, [pc, #96]	; (8008718 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80086b8:	f000 fcd1 	bl	800905e <USBD_GetEpDesc>
 80086bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80086be:	2101      	movs	r1, #1
 80086c0:	4815      	ldr	r0, [pc, #84]	; (8008718 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80086c2:	f000 fccc 	bl	800905e <USBD_GetEpDesc>
 80086c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80086c8:	2181      	movs	r1, #129	; 0x81
 80086ca:	4813      	ldr	r0, [pc, #76]	; (8008718 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80086cc:	f000 fcc7 	bl	800905e <USBD_GetEpDesc>
 80086d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d002      	beq.n	80086de <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	2210      	movs	r2, #16
 80086dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d006      	beq.n	80086f2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	2200      	movs	r2, #0
 80086e8:	711a      	strb	r2, [r3, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f042 0202 	orr.w	r2, r2, #2
 80086f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d006      	beq.n	8008706 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	711a      	strb	r2, [r3, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f042 0202 	orr.w	r2, r2, #2
 8008704:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2243      	movs	r2, #67	; 0x43
 800870a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800870c:	4b02      	ldr	r3, [pc, #8]	; (8008718 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800870e:	4618      	mov	r0, r3
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	20000078 	.word	0x20000078

0800871c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008724:	2182      	movs	r1, #130	; 0x82
 8008726:	4818      	ldr	r0, [pc, #96]	; (8008788 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008728:	f000 fc99 	bl	800905e <USBD_GetEpDesc>
 800872c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800872e:	2101      	movs	r1, #1
 8008730:	4815      	ldr	r0, [pc, #84]	; (8008788 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008732:	f000 fc94 	bl	800905e <USBD_GetEpDesc>
 8008736:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008738:	2181      	movs	r1, #129	; 0x81
 800873a:	4813      	ldr	r0, [pc, #76]	; (8008788 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800873c:	f000 fc8f 	bl	800905e <USBD_GetEpDesc>
 8008740:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d002      	beq.n	800874e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	2210      	movs	r2, #16
 800874c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d006      	beq.n	8008762 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	2200      	movs	r2, #0
 8008758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800875c:	711a      	strb	r2, [r3, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d006      	beq.n	8008776 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008770:	711a      	strb	r2, [r3, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2243      	movs	r2, #67	; 0x43
 800877a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800877c:	4b02      	ldr	r3, [pc, #8]	; (8008788 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800877e:	4618      	mov	r0, r3
 8008780:	3718      	adds	r7, #24
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	20000078 	.word	0x20000078

0800878c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	220a      	movs	r2, #10
 8008798:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800879a:	4b03      	ldr	r3, [pc, #12]	; (80087a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800879c:	4618      	mov	r0, r3
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr
 80087a8:	20000034 	.word	0x20000034

080087ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d101      	bne.n	80087c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80087bc:	2303      	movs	r3, #3
 80087be:	e009      	b.n	80087d4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	33b0      	adds	r3, #176	; 0xb0
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b087      	sub	sp, #28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	32b0      	adds	r2, #176	; 0xb0
 80087f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087fa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d101      	bne.n	8008806 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008802:	2303      	movs	r3, #3
 8008804:	e008      	b.n	8008818 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	371c      	adds	r7, #28
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	32b0      	adds	r2, #176	; 0xb0
 8008838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800883c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008844:	2303      	movs	r3, #3
 8008846:	e004      	b.n	8008852 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
	...

08008860 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	32b0      	adds	r2, #176	; 0xb0
 8008872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008876:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	32b0      	adds	r2, #176	; 0xb0
 8008882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d101      	bne.n	800888e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800888a:	2303      	movs	r3, #3
 800888c:	e018      	b.n	80088c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	7c1b      	ldrb	r3, [r3, #16]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10a      	bne.n	80088ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008896:	4b0c      	ldr	r3, [pc, #48]	; (80088c8 <USBD_CDC_ReceivePacket+0x68>)
 8008898:	7819      	ldrb	r1, [r3, #0]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f004 fd33 	bl	800d310 <USBD_LL_PrepareReceive>
 80088aa:	e008      	b.n	80088be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088ac:	4b06      	ldr	r3, [pc, #24]	; (80088c8 <USBD_CDC_ReceivePacket+0x68>)
 80088ae:	7819      	ldrb	r1, [r3, #0]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088b6:	2340      	movs	r3, #64	; 0x40
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f004 fd29 	bl	800d310 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	200000bc 	.word	0x200000bc

080088cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	4613      	mov	r3, r2
 80088d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e01f      	b.n	8008924 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d003      	beq.n	800890a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	79fa      	ldrb	r2, [r7, #7]
 8008916:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f004 fba3 	bl	800d064 <USBD_LL_Init>
 800891e:	4603      	mov	r3, r0
 8008920:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008922:	7dfb      	ldrb	r3, [r7, #23]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3718      	adds	r7, #24
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008936:	2300      	movs	r3, #0
 8008938:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d101      	bne.n	8008944 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008940:	2303      	movs	r3, #3
 8008942:	e025      	b.n	8008990 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	683a      	ldr	r2, [r7, #0]
 8008948:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	32ae      	adds	r2, #174	; 0xae
 8008956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800895a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00f      	beq.n	8008980 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	32ae      	adds	r2, #174	; 0xae
 800896a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800896e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008970:	f107 020e 	add.w	r2, r7, #14
 8008974:	4610      	mov	r0, r2
 8008976:	4798      	blx	r3
 8008978:	4602      	mov	r2, r0
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008986:	1c5a      	adds	r2, r3, #1
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f004 fbab 	bl	800d0fc <USBD_LL_Start>
 80089a6:	4603      	mov	r3, r0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b084      	sub	sp, #16
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
 80089ce:	460b      	mov	r3, r1
 80089d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80089d2:	2300      	movs	r3, #0
 80089d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d009      	beq.n	80089f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	78fa      	ldrb	r2, [r7, #3]
 80089ea:	4611      	mov	r1, r2
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	4798      	blx	r3
 80089f0:	4603      	mov	r3, r0
 80089f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b084      	sub	sp, #16
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	460b      	mov	r3, r1
 8008a08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	78fa      	ldrb	r2, [r7, #3]
 8008a18:	4611      	mov	r1, r2
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	4798      	blx	r3
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d001      	beq.n	8008a28 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008a24:	2303      	movs	r3, #3
 8008a26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b084      	sub	sp, #16
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a42:	6839      	ldr	r1, [r7, #0]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f001 f908 	bl	8009c5a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008a58:	461a      	mov	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a66:	f003 031f 	and.w	r3, r3, #31
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d01a      	beq.n	8008aa4 <USBD_LL_SetupStage+0x72>
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d822      	bhi.n	8008ab8 <USBD_LL_SetupStage+0x86>
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d002      	beq.n	8008a7c <USBD_LL_SetupStage+0x4a>
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d00a      	beq.n	8008a90 <USBD_LL_SetupStage+0x5e>
 8008a7a:	e01d      	b.n	8008ab8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a82:	4619      	mov	r1, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fb5f 	bl	8009148 <USBD_StdDevReq>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a8e:	e020      	b.n	8008ad2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fbc7 	bl	800922c <USBD_StdItfReq>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	73fb      	strb	r3, [r7, #15]
      break;
 8008aa2:	e016      	b.n	8008ad2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fc29 	bl	8009304 <USBD_StdEPReq>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ab6:	e00c      	b.n	8008ad2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008abe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f004 fb78 	bl	800d1bc <USBD_LL_StallEP>
 8008acc:	4603      	mov	r3, r0
 8008ace:	73fb      	strb	r3, [r7, #15]
      break;
 8008ad0:	bf00      	nop
  }

  return ret;
 8008ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	607a      	str	r2, [r7, #4]
 8008ae8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008aee:	7afb      	ldrb	r3, [r7, #11]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d16e      	bne.n	8008bd2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008afa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b02:	2b03      	cmp	r3, #3
 8008b04:	f040 8098 	bne.w	8008c38 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	689a      	ldr	r2, [r3, #8]
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d913      	bls.n	8008b3c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	689a      	ldr	r2, [r3, #8]
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	1ad2      	subs	r2, r2, r3
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	68da      	ldr	r2, [r3, #12]
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	bf28      	it	cs
 8008b2e:	4613      	movcs	r3, r2
 8008b30:	461a      	mov	r2, r3
 8008b32:	6879      	ldr	r1, [r7, #4]
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f001 f984 	bl	8009e42 <USBD_CtlContinueRx>
 8008b3a:	e07d      	b.n	8008c38 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b42:	f003 031f 	and.w	r3, r3, #31
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d014      	beq.n	8008b74 <USBD_LL_DataOutStage+0x98>
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d81d      	bhi.n	8008b8a <USBD_LL_DataOutStage+0xae>
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d002      	beq.n	8008b58 <USBD_LL_DataOutStage+0x7c>
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d003      	beq.n	8008b5e <USBD_LL_DataOutStage+0x82>
 8008b56:	e018      	b.n	8008b8a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	75bb      	strb	r3, [r7, #22]
            break;
 8008b5c:	e018      	b.n	8008b90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	4619      	mov	r1, r3
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f000 fa5e 	bl	800902a <USBD_CoreFindIF>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	75bb      	strb	r3, [r7, #22]
            break;
 8008b72:	e00d      	b.n	8008b90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f000 fa60 	bl	8009044 <USBD_CoreFindEP>
 8008b84:	4603      	mov	r3, r0
 8008b86:	75bb      	strb	r3, [r7, #22]
            break;
 8008b88:	e002      	b.n	8008b90 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	75bb      	strb	r3, [r7, #22]
            break;
 8008b8e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008b90:	7dbb      	ldrb	r3, [r7, #22]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d119      	bne.n	8008bca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b03      	cmp	r3, #3
 8008ba0:	d113      	bne.n	8008bca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008ba2:	7dba      	ldrb	r2, [r7, #22]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	32ae      	adds	r2, #174	; 0xae
 8008ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00b      	beq.n	8008bca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008bb2:	7dba      	ldrb	r2, [r7, #22]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008bba:	7dba      	ldrb	r2, [r7, #22]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	32ae      	adds	r2, #174	; 0xae
 8008bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f001 f94a 	bl	8009e64 <USBD_CtlSendStatus>
 8008bd0:	e032      	b.n	8008c38 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008bd2:	7afb      	ldrb	r3, [r7, #11]
 8008bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	4619      	mov	r1, r3
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f000 fa31 	bl	8009044 <USBD_CoreFindEP>
 8008be2:	4603      	mov	r3, r0
 8008be4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008be6:	7dbb      	ldrb	r3, [r7, #22]
 8008be8:	2bff      	cmp	r3, #255	; 0xff
 8008bea:	d025      	beq.n	8008c38 <USBD_LL_DataOutStage+0x15c>
 8008bec:	7dbb      	ldrb	r3, [r7, #22]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d122      	bne.n	8008c38 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	2b03      	cmp	r3, #3
 8008bfc:	d117      	bne.n	8008c2e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008bfe:	7dba      	ldrb	r2, [r7, #22]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	32ae      	adds	r2, #174	; 0xae
 8008c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00f      	beq.n	8008c2e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008c0e:	7dba      	ldrb	r2, [r7, #22]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008c16:	7dba      	ldrb	r2, [r7, #22]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	32ae      	adds	r2, #174	; 0xae
 8008c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	7afa      	ldrb	r2, [r7, #11]
 8008c24:	4611      	mov	r1, r2
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	4798      	blx	r3
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008c2e:	7dfb      	ldrb	r3, [r7, #23]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d001      	beq.n	8008c38 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008c34:	7dfb      	ldrb	r3, [r7, #23]
 8008c36:	e000      	b.n	8008c3a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3718      	adds	r7, #24
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b086      	sub	sp, #24
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	60f8      	str	r0, [r7, #12]
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	607a      	str	r2, [r7, #4]
 8008c4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008c50:	7afb      	ldrb	r3, [r7, #11]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d16f      	bne.n	8008d36 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	3314      	adds	r3, #20
 8008c5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d15a      	bne.n	8008d1c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	689a      	ldr	r2, [r3, #8]
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d914      	bls.n	8008c9c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	689a      	ldr	r2, [r3, #8]
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	1ad2      	subs	r2, r2, r3
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	461a      	mov	r2, r3
 8008c86:	6879      	ldr	r1, [r7, #4]
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f001 f8ac 	bl	8009de6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c8e:	2300      	movs	r3, #0
 8008c90:	2200      	movs	r2, #0
 8008c92:	2100      	movs	r1, #0
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f004 fb3b 	bl	800d310 <USBD_LL_PrepareReceive>
 8008c9a:	e03f      	b.n	8008d1c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	68da      	ldr	r2, [r3, #12]
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d11c      	bne.n	8008ce2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	685a      	ldr	r2, [r3, #4]
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d316      	bcc.n	8008ce2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	685a      	ldr	r2, [r3, #4]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d20f      	bcs.n	8008ce2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f001 f88d 	bl	8009de6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	2100      	movs	r1, #0
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f004 fb18 	bl	800d310 <USBD_LL_PrepareReceive>
 8008ce0:	e01c      	b.n	8008d1c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	2b03      	cmp	r3, #3
 8008cec:	d10f      	bne.n	8008d0e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d009      	beq.n	8008d0e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d0e:	2180      	movs	r1, #128	; 0x80
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f004 fa53 	bl	800d1bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f001 f8b7 	bl	8009e8a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d03a      	beq.n	8008d9c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f7ff fe42 	bl	80089b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008d34:	e032      	b.n	8008d9c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008d36:	7afb      	ldrb	r3, [r7, #11]
 8008d38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	4619      	mov	r1, r3
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f000 f97f 	bl	8009044 <USBD_CoreFindEP>
 8008d46:	4603      	mov	r3, r0
 8008d48:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
 8008d4c:	2bff      	cmp	r3, #255	; 0xff
 8008d4e:	d025      	beq.n	8008d9c <USBD_LL_DataInStage+0x15a>
 8008d50:	7dfb      	ldrb	r3, [r7, #23]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d122      	bne.n	8008d9c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	d11c      	bne.n	8008d9c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008d62:	7dfa      	ldrb	r2, [r7, #23]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	32ae      	adds	r2, #174	; 0xae
 8008d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d014      	beq.n	8008d9c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008d72:	7dfa      	ldrb	r2, [r7, #23]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008d7a:	7dfa      	ldrb	r2, [r7, #23]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	32ae      	adds	r2, #174	; 0xae
 8008d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	7afa      	ldrb	r2, [r7, #11]
 8008d88:	4611      	mov	r1, r2
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	4798      	blx	r3
 8008d8e:	4603      	mov	r3, r0
 8008d90:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008d92:	7dbb      	ldrb	r3, [r7, #22]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d001      	beq.n	8008d9c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008d98:	7dbb      	ldrb	r3, [r7, #22]
 8008d9a:	e000      	b.n	8008d9e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3718      	adds	r7, #24
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b084      	sub	sp, #16
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dae:	2300      	movs	r3, #0
 8008db0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2201      	movs	r2, #1
 8008db6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d014      	beq.n	8008e0c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00e      	beq.n	8008e0c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	6852      	ldr	r2, [r2, #4]
 8008dfa:	b2d2      	uxtb	r2, r2
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	4798      	blx	r3
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d001      	beq.n	8008e0c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e0c:	2340      	movs	r3, #64	; 0x40
 8008e0e:	2200      	movs	r2, #0
 8008e10:	2100      	movs	r1, #0
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f004 f98d 	bl	800d132 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2240      	movs	r2, #64	; 0x40
 8008e24:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e28:	2340      	movs	r3, #64	; 0x40
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	2180      	movs	r1, #128	; 0x80
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f004 f97f 	bl	800d132 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2240      	movs	r2, #64	; 0x40
 8008e3e:	621a      	str	r2, [r3, #32]

  return ret;
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e4a:	b480      	push	{r7}
 8008e4c:	b083      	sub	sp, #12
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
 8008e52:	460b      	mov	r3, r1
 8008e54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	78fa      	ldrb	r2, [r7, #3]
 8008e5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	370c      	adds	r7, #12
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr

08008e6a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b083      	sub	sp, #12
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e78:	b2da      	uxtb	r2, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2204      	movs	r2, #4
 8008e84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e96:	b480      	push	{r7}
 8008e98:	b083      	sub	sp, #12
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	2b04      	cmp	r3, #4
 8008ea8:	d106      	bne.n	8008eb8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr

08008ec6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b082      	sub	sp, #8
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	2b03      	cmp	r3, #3
 8008ed8:	d110      	bne.n	8008efc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00b      	beq.n	8008efc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d005      	beq.n	8008efc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ef6:	69db      	ldr	r3, [r3, #28]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3708      	adds	r7, #8
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b082      	sub	sp, #8
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
 8008f0e:	460b      	mov	r3, r1
 8008f10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	32ae      	adds	r2, #174	; 0xae
 8008f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f24:	2303      	movs	r3, #3
 8008f26:	e01c      	b.n	8008f62 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	2b03      	cmp	r3, #3
 8008f32:	d115      	bne.n	8008f60 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	32ae      	adds	r2, #174	; 0xae
 8008f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f42:	6a1b      	ldr	r3, [r3, #32]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00b      	beq.n	8008f60 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	32ae      	adds	r2, #174	; 0xae
 8008f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f56:	6a1b      	ldr	r3, [r3, #32]
 8008f58:	78fa      	ldrb	r2, [r7, #3]
 8008f5a:	4611      	mov	r1, r2
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b082      	sub	sp, #8
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
 8008f72:	460b      	mov	r3, r1
 8008f74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	32ae      	adds	r2, #174	; 0xae
 8008f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d101      	bne.n	8008f8c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f88:	2303      	movs	r3, #3
 8008f8a:	e01c      	b.n	8008fc6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	2b03      	cmp	r3, #3
 8008f96:	d115      	bne.n	8008fc4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	32ae      	adds	r2, #174	; 0xae
 8008fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00b      	beq.n	8008fc4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	32ae      	adds	r2, #174	; 0xae
 8008fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbc:	78fa      	ldrb	r2, [r7, #3]
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3708      	adds	r7, #8
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008fce:	b480      	push	{r7}
 8008fd0:	b083      	sub	sp, #12
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00e      	beq.n	8009020 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	6852      	ldr	r2, [r2, #4]
 800900e:	b2d2      	uxtb	r2, r2
 8009010:	4611      	mov	r1, r2
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	4798      	blx	r3
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d001      	beq.n	8009020 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800901c:	2303      	movs	r3, #3
 800901e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009020:	7bfb      	ldrb	r3, [r7, #15]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800902a:	b480      	push	{r7}
 800902c:	b083      	sub	sp, #12
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	460b      	mov	r3, r1
 8009034:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009036:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009038:	4618      	mov	r0, r3
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	460b      	mov	r3, r1
 800904e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009050:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009052:	4618      	mov	r0, r3
 8009054:	370c      	adds	r7, #12
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr

0800905e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b086      	sub	sp, #24
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
 8009066:	460b      	mov	r3, r1
 8009068:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009072:	2300      	movs	r3, #0
 8009074:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	885b      	ldrh	r3, [r3, #2]
 800907a:	b29a      	uxth	r2, r3
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	b29b      	uxth	r3, r3
 8009082:	429a      	cmp	r2, r3
 8009084:	d920      	bls.n	80090c8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	b29b      	uxth	r3, r3
 800908c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800908e:	e013      	b.n	80090b8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009090:	f107 030a 	add.w	r3, r7, #10
 8009094:	4619      	mov	r1, r3
 8009096:	6978      	ldr	r0, [r7, #20]
 8009098:	f000 f81b 	bl	80090d2 <USBD_GetNextDesc>
 800909c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	785b      	ldrb	r3, [r3, #1]
 80090a2:	2b05      	cmp	r3, #5
 80090a4:	d108      	bne.n	80090b8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	789b      	ldrb	r3, [r3, #2]
 80090ae:	78fa      	ldrb	r2, [r7, #3]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d008      	beq.n	80090c6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80090b4:	2300      	movs	r3, #0
 80090b6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	885b      	ldrh	r3, [r3, #2]
 80090bc:	b29a      	uxth	r2, r3
 80090be:	897b      	ldrh	r3, [r7, #10]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d8e5      	bhi.n	8009090 <USBD_GetEpDesc+0x32>
 80090c4:	e000      	b.n	80090c8 <USBD_GetEpDesc+0x6a>
          break;
 80090c6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80090c8:	693b      	ldr	r3, [r7, #16]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3718      	adds	r7, #24
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b085      	sub	sp, #20
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	881a      	ldrh	r2, [r3, #0]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	4413      	add	r3, r2
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	461a      	mov	r2, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4413      	add	r3, r2
 80090fc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80090fe:	68fb      	ldr	r3, [r7, #12]
}
 8009100:	4618      	mov	r0, r3
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800910c:	b480      	push	{r7}
 800910e:	b087      	sub	sp, #28
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	3301      	adds	r3, #1
 8009122:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800912a:	8a3b      	ldrh	r3, [r7, #16]
 800912c:	021b      	lsls	r3, r3, #8
 800912e:	b21a      	sxth	r2, r3
 8009130:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009134:	4313      	orrs	r3, r2
 8009136:	b21b      	sxth	r3, r3
 8009138:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800913a:	89fb      	ldrh	r3, [r7, #14]
}
 800913c:	4618      	mov	r0, r3
 800913e:	371c      	adds	r7, #28
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009152:	2300      	movs	r3, #0
 8009154:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800915e:	2b40      	cmp	r3, #64	; 0x40
 8009160:	d005      	beq.n	800916e <USBD_StdDevReq+0x26>
 8009162:	2b40      	cmp	r3, #64	; 0x40
 8009164:	d857      	bhi.n	8009216 <USBD_StdDevReq+0xce>
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00f      	beq.n	800918a <USBD_StdDevReq+0x42>
 800916a:	2b20      	cmp	r3, #32
 800916c:	d153      	bne.n	8009216 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	32ae      	adds	r2, #174	; 0xae
 8009178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	6839      	ldr	r1, [r7, #0]
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	4798      	blx	r3
 8009184:	4603      	mov	r3, r0
 8009186:	73fb      	strb	r3, [r7, #15]
      break;
 8009188:	e04a      	b.n	8009220 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	785b      	ldrb	r3, [r3, #1]
 800918e:	2b09      	cmp	r3, #9
 8009190:	d83b      	bhi.n	800920a <USBD_StdDevReq+0xc2>
 8009192:	a201      	add	r2, pc, #4	; (adr r2, 8009198 <USBD_StdDevReq+0x50>)
 8009194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009198:	080091ed 	.word	0x080091ed
 800919c:	08009201 	.word	0x08009201
 80091a0:	0800920b 	.word	0x0800920b
 80091a4:	080091f7 	.word	0x080091f7
 80091a8:	0800920b 	.word	0x0800920b
 80091ac:	080091cb 	.word	0x080091cb
 80091b0:	080091c1 	.word	0x080091c1
 80091b4:	0800920b 	.word	0x0800920b
 80091b8:	080091e3 	.word	0x080091e3
 80091bc:	080091d5 	.word	0x080091d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fa3c 	bl	8009640 <USBD_GetDescriptor>
          break;
 80091c8:	e024      	b.n	8009214 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fba1 	bl	8009914 <USBD_SetAddress>
          break;
 80091d2:	e01f      	b.n	8009214 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fbe0 	bl	800999c <USBD_SetConfig>
 80091dc:	4603      	mov	r3, r0
 80091de:	73fb      	strb	r3, [r7, #15]
          break;
 80091e0:	e018      	b.n	8009214 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80091e2:	6839      	ldr	r1, [r7, #0]
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 fc83 	bl	8009af0 <USBD_GetConfig>
          break;
 80091ea:	e013      	b.n	8009214 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80091ec:	6839      	ldr	r1, [r7, #0]
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fcb4 	bl	8009b5c <USBD_GetStatus>
          break;
 80091f4:	e00e      	b.n	8009214 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80091f6:	6839      	ldr	r1, [r7, #0]
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fce3 	bl	8009bc4 <USBD_SetFeature>
          break;
 80091fe:	e009      	b.n	8009214 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009200:	6839      	ldr	r1, [r7, #0]
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fd07 	bl	8009c16 <USBD_ClrFeature>
          break;
 8009208:	e004      	b.n	8009214 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fd5e 	bl	8009cce <USBD_CtlError>
          break;
 8009212:	bf00      	nop
      }
      break;
 8009214:	e004      	b.n	8009220 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 fd58 	bl	8009cce <USBD_CtlError>
      break;
 800921e:	bf00      	nop
  }

  return ret;
 8009220:	7bfb      	ldrb	r3, [r7, #15]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop

0800922c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009236:	2300      	movs	r3, #0
 8009238:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009242:	2b40      	cmp	r3, #64	; 0x40
 8009244:	d005      	beq.n	8009252 <USBD_StdItfReq+0x26>
 8009246:	2b40      	cmp	r3, #64	; 0x40
 8009248:	d852      	bhi.n	80092f0 <USBD_StdItfReq+0xc4>
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <USBD_StdItfReq+0x26>
 800924e:	2b20      	cmp	r3, #32
 8009250:	d14e      	bne.n	80092f0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009258:	b2db      	uxtb	r3, r3
 800925a:	3b01      	subs	r3, #1
 800925c:	2b02      	cmp	r3, #2
 800925e:	d840      	bhi.n	80092e2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	889b      	ldrh	r3, [r3, #4]
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2b01      	cmp	r3, #1
 8009268:	d836      	bhi.n	80092d8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	889b      	ldrh	r3, [r3, #4]
 800926e:	b2db      	uxtb	r3, r3
 8009270:	4619      	mov	r1, r3
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f7ff fed9 	bl	800902a <USBD_CoreFindIF>
 8009278:	4603      	mov	r3, r0
 800927a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800927c:	7bbb      	ldrb	r3, [r7, #14]
 800927e:	2bff      	cmp	r3, #255	; 0xff
 8009280:	d01d      	beq.n	80092be <USBD_StdItfReq+0x92>
 8009282:	7bbb      	ldrb	r3, [r7, #14]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d11a      	bne.n	80092be <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009288:	7bba      	ldrb	r2, [r7, #14]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	32ae      	adds	r2, #174	; 0xae
 800928e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00f      	beq.n	80092b8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009298:	7bba      	ldrb	r2, [r7, #14]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80092a0:	7bba      	ldrb	r2, [r7, #14]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	32ae      	adds	r2, #174	; 0xae
 80092a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	4798      	blx	r3
 80092b2:	4603      	mov	r3, r0
 80092b4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80092b6:	e004      	b.n	80092c2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80092b8:	2303      	movs	r3, #3
 80092ba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80092bc:	e001      	b.n	80092c2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80092be:	2303      	movs	r3, #3
 80092c0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	88db      	ldrh	r3, [r3, #6]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d110      	bne.n	80092ec <USBD_StdItfReq+0xc0>
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d10d      	bne.n	80092ec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 fdc7 	bl	8009e64 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80092d6:	e009      	b.n	80092ec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80092d8:	6839      	ldr	r1, [r7, #0]
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 fcf7 	bl	8009cce <USBD_CtlError>
          break;
 80092e0:	e004      	b.n	80092ec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80092e2:	6839      	ldr	r1, [r7, #0]
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 fcf2 	bl	8009cce <USBD_CtlError>
          break;
 80092ea:	e000      	b.n	80092ee <USBD_StdItfReq+0xc2>
          break;
 80092ec:	bf00      	nop
      }
      break;
 80092ee:	e004      	b.n	80092fa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fceb 	bl	8009cce <USBD_CtlError>
      break;
 80092f8:	bf00      	nop
  }

  return ret;
 80092fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	889b      	ldrh	r3, [r3, #4]
 8009316:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009320:	2b40      	cmp	r3, #64	; 0x40
 8009322:	d007      	beq.n	8009334 <USBD_StdEPReq+0x30>
 8009324:	2b40      	cmp	r3, #64	; 0x40
 8009326:	f200 817f 	bhi.w	8009628 <USBD_StdEPReq+0x324>
 800932a:	2b00      	cmp	r3, #0
 800932c:	d02a      	beq.n	8009384 <USBD_StdEPReq+0x80>
 800932e:	2b20      	cmp	r3, #32
 8009330:	f040 817a 	bne.w	8009628 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009334:	7bbb      	ldrb	r3, [r7, #14]
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f7ff fe83 	bl	8009044 <USBD_CoreFindEP>
 800933e:	4603      	mov	r3, r0
 8009340:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009342:	7b7b      	ldrb	r3, [r7, #13]
 8009344:	2bff      	cmp	r3, #255	; 0xff
 8009346:	f000 8174 	beq.w	8009632 <USBD_StdEPReq+0x32e>
 800934a:	7b7b      	ldrb	r3, [r7, #13]
 800934c:	2b00      	cmp	r3, #0
 800934e:	f040 8170 	bne.w	8009632 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009352:	7b7a      	ldrb	r2, [r7, #13]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800935a:	7b7a      	ldrb	r2, [r7, #13]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	32ae      	adds	r2, #174	; 0xae
 8009360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	2b00      	cmp	r3, #0
 8009368:	f000 8163 	beq.w	8009632 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800936c:	7b7a      	ldrb	r2, [r7, #13]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	32ae      	adds	r2, #174	; 0xae
 8009372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	6839      	ldr	r1, [r7, #0]
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	4798      	blx	r3
 800937e:	4603      	mov	r3, r0
 8009380:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009382:	e156      	b.n	8009632 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	785b      	ldrb	r3, [r3, #1]
 8009388:	2b03      	cmp	r3, #3
 800938a:	d008      	beq.n	800939e <USBD_StdEPReq+0x9a>
 800938c:	2b03      	cmp	r3, #3
 800938e:	f300 8145 	bgt.w	800961c <USBD_StdEPReq+0x318>
 8009392:	2b00      	cmp	r3, #0
 8009394:	f000 809b 	beq.w	80094ce <USBD_StdEPReq+0x1ca>
 8009398:	2b01      	cmp	r3, #1
 800939a:	d03c      	beq.n	8009416 <USBD_StdEPReq+0x112>
 800939c:	e13e      	b.n	800961c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d002      	beq.n	80093b0 <USBD_StdEPReq+0xac>
 80093aa:	2b03      	cmp	r3, #3
 80093ac:	d016      	beq.n	80093dc <USBD_StdEPReq+0xd8>
 80093ae:	e02c      	b.n	800940a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093b0:	7bbb      	ldrb	r3, [r7, #14]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00d      	beq.n	80093d2 <USBD_StdEPReq+0xce>
 80093b6:	7bbb      	ldrb	r3, [r7, #14]
 80093b8:	2b80      	cmp	r3, #128	; 0x80
 80093ba:	d00a      	beq.n	80093d2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80093bc:	7bbb      	ldrb	r3, [r7, #14]
 80093be:	4619      	mov	r1, r3
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f003 fefb 	bl	800d1bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80093c6:	2180      	movs	r1, #128	; 0x80
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f003 fef7 	bl	800d1bc <USBD_LL_StallEP>
 80093ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093d0:	e020      	b.n	8009414 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80093d2:	6839      	ldr	r1, [r7, #0]
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 fc7a 	bl	8009cce <USBD_CtlError>
              break;
 80093da:	e01b      	b.n	8009414 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	885b      	ldrh	r3, [r3, #2]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10e      	bne.n	8009402 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00b      	beq.n	8009402 <USBD_StdEPReq+0xfe>
 80093ea:	7bbb      	ldrb	r3, [r7, #14]
 80093ec:	2b80      	cmp	r3, #128	; 0x80
 80093ee:	d008      	beq.n	8009402 <USBD_StdEPReq+0xfe>
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	88db      	ldrh	r3, [r3, #6]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d104      	bne.n	8009402 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80093f8:	7bbb      	ldrb	r3, [r7, #14]
 80093fa:	4619      	mov	r1, r3
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f003 fedd 	bl	800d1bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fd2e 	bl	8009e64 <USBD_CtlSendStatus>

              break;
 8009408:	e004      	b.n	8009414 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800940a:	6839      	ldr	r1, [r7, #0]
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 fc5e 	bl	8009cce <USBD_CtlError>
              break;
 8009412:	bf00      	nop
          }
          break;
 8009414:	e107      	b.n	8009626 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800941c:	b2db      	uxtb	r3, r3
 800941e:	2b02      	cmp	r3, #2
 8009420:	d002      	beq.n	8009428 <USBD_StdEPReq+0x124>
 8009422:	2b03      	cmp	r3, #3
 8009424:	d016      	beq.n	8009454 <USBD_StdEPReq+0x150>
 8009426:	e04b      	b.n	80094c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009428:	7bbb      	ldrb	r3, [r7, #14]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00d      	beq.n	800944a <USBD_StdEPReq+0x146>
 800942e:	7bbb      	ldrb	r3, [r7, #14]
 8009430:	2b80      	cmp	r3, #128	; 0x80
 8009432:	d00a      	beq.n	800944a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009434:	7bbb      	ldrb	r3, [r7, #14]
 8009436:	4619      	mov	r1, r3
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f003 febf 	bl	800d1bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800943e:	2180      	movs	r1, #128	; 0x80
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f003 febb 	bl	800d1bc <USBD_LL_StallEP>
 8009446:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009448:	e040      	b.n	80094cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800944a:	6839      	ldr	r1, [r7, #0]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fc3e 	bl	8009cce <USBD_CtlError>
              break;
 8009452:	e03b      	b.n	80094cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	885b      	ldrh	r3, [r3, #2]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d136      	bne.n	80094ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800945c:	7bbb      	ldrb	r3, [r7, #14]
 800945e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009462:	2b00      	cmp	r3, #0
 8009464:	d004      	beq.n	8009470 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009466:	7bbb      	ldrb	r3, [r7, #14]
 8009468:	4619      	mov	r1, r3
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f003 fec5 	bl	800d1fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 fcf7 	bl	8009e64 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009476:	7bbb      	ldrb	r3, [r7, #14]
 8009478:	4619      	mov	r1, r3
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f7ff fde2 	bl	8009044 <USBD_CoreFindEP>
 8009480:	4603      	mov	r3, r0
 8009482:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009484:	7b7b      	ldrb	r3, [r7, #13]
 8009486:	2bff      	cmp	r3, #255	; 0xff
 8009488:	d01f      	beq.n	80094ca <USBD_StdEPReq+0x1c6>
 800948a:	7b7b      	ldrb	r3, [r7, #13]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d11c      	bne.n	80094ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009490:	7b7a      	ldrb	r2, [r7, #13]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009498:	7b7a      	ldrb	r2, [r7, #13]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	32ae      	adds	r2, #174	; 0xae
 800949e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d010      	beq.n	80094ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80094a8:	7b7a      	ldrb	r2, [r7, #13]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	32ae      	adds	r2, #174	; 0xae
 80094ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	4798      	blx	r3
 80094ba:	4603      	mov	r3, r0
 80094bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80094be:	e004      	b.n	80094ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80094c0:	6839      	ldr	r1, [r7, #0]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 fc03 	bl	8009cce <USBD_CtlError>
              break;
 80094c8:	e000      	b.n	80094cc <USBD_StdEPReq+0x1c8>
              break;
 80094ca:	bf00      	nop
          }
          break;
 80094cc:	e0ab      	b.n	8009626 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d002      	beq.n	80094e0 <USBD_StdEPReq+0x1dc>
 80094da:	2b03      	cmp	r3, #3
 80094dc:	d032      	beq.n	8009544 <USBD_StdEPReq+0x240>
 80094de:	e097      	b.n	8009610 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094e0:	7bbb      	ldrb	r3, [r7, #14]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d007      	beq.n	80094f6 <USBD_StdEPReq+0x1f2>
 80094e6:	7bbb      	ldrb	r3, [r7, #14]
 80094e8:	2b80      	cmp	r3, #128	; 0x80
 80094ea:	d004      	beq.n	80094f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 fbed 	bl	8009cce <USBD_CtlError>
                break;
 80094f4:	e091      	b.n	800961a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	da0b      	bge.n	8009516 <USBD_StdEPReq+0x212>
 80094fe:	7bbb      	ldrb	r3, [r7, #14]
 8009500:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009504:	4613      	mov	r3, r2
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4413      	add	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	3310      	adds	r3, #16
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	4413      	add	r3, r2
 8009512:	3304      	adds	r3, #4
 8009514:	e00b      	b.n	800952e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009516:	7bbb      	ldrb	r3, [r7, #14]
 8009518:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800951c:	4613      	mov	r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4413      	add	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	4413      	add	r3, r2
 800952c:	3304      	adds	r3, #4
 800952e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	2200      	movs	r2, #0
 8009534:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	2202      	movs	r2, #2
 800953a:	4619      	mov	r1, r3
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fc37 	bl	8009db0 <USBD_CtlSendData>
              break;
 8009542:	e06a      	b.n	800961a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009544:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009548:	2b00      	cmp	r3, #0
 800954a:	da11      	bge.n	8009570 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800954c:	7bbb      	ldrb	r3, [r7, #14]
 800954e:	f003 020f 	and.w	r2, r3, #15
 8009552:	6879      	ldr	r1, [r7, #4]
 8009554:	4613      	mov	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	4413      	add	r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	440b      	add	r3, r1
 800955e:	3324      	adds	r3, #36	; 0x24
 8009560:	881b      	ldrh	r3, [r3, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d117      	bne.n	8009596 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009566:	6839      	ldr	r1, [r7, #0]
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 fbb0 	bl	8009cce <USBD_CtlError>
                  break;
 800956e:	e054      	b.n	800961a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009570:	7bbb      	ldrb	r3, [r7, #14]
 8009572:	f003 020f 	and.w	r2, r3, #15
 8009576:	6879      	ldr	r1, [r7, #4]
 8009578:	4613      	mov	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4413      	add	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	440b      	add	r3, r1
 8009582:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009586:	881b      	ldrh	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d104      	bne.n	8009596 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800958c:	6839      	ldr	r1, [r7, #0]
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 fb9d 	bl	8009cce <USBD_CtlError>
                  break;
 8009594:	e041      	b.n	800961a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009596:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800959a:	2b00      	cmp	r3, #0
 800959c:	da0b      	bge.n	80095b6 <USBD_StdEPReq+0x2b2>
 800959e:	7bbb      	ldrb	r3, [r7, #14]
 80095a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095a4:	4613      	mov	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4413      	add	r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	3310      	adds	r3, #16
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	4413      	add	r3, r2
 80095b2:	3304      	adds	r3, #4
 80095b4:	e00b      	b.n	80095ce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095b6:	7bbb      	ldrb	r3, [r7, #14]
 80095b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095bc:	4613      	mov	r3, r2
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	4413      	add	r3, r2
 80095cc:	3304      	adds	r3, #4
 80095ce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80095d0:	7bbb      	ldrb	r3, [r7, #14]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d002      	beq.n	80095dc <USBD_StdEPReq+0x2d8>
 80095d6:	7bbb      	ldrb	r3, [r7, #14]
 80095d8:	2b80      	cmp	r3, #128	; 0x80
 80095da:	d103      	bne.n	80095e4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	2200      	movs	r2, #0
 80095e0:	601a      	str	r2, [r3, #0]
 80095e2:	e00e      	b.n	8009602 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80095e4:	7bbb      	ldrb	r3, [r7, #14]
 80095e6:	4619      	mov	r1, r3
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f003 fe25 	bl	800d238 <USBD_LL_IsStallEP>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d003      	beq.n	80095fc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	2201      	movs	r2, #1
 80095f8:	601a      	str	r2, [r3, #0]
 80095fa:	e002      	b.n	8009602 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	2200      	movs	r2, #0
 8009600:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	2202      	movs	r2, #2
 8009606:	4619      	mov	r1, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fbd1 	bl	8009db0 <USBD_CtlSendData>
              break;
 800960e:	e004      	b.n	800961a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009610:	6839      	ldr	r1, [r7, #0]
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 fb5b 	bl	8009cce <USBD_CtlError>
              break;
 8009618:	bf00      	nop
          }
          break;
 800961a:	e004      	b.n	8009626 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800961c:	6839      	ldr	r1, [r7, #0]
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fb55 	bl	8009cce <USBD_CtlError>
          break;
 8009624:	bf00      	nop
      }
      break;
 8009626:	e005      	b.n	8009634 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fb4f 	bl	8009cce <USBD_CtlError>
      break;
 8009630:	e000      	b.n	8009634 <USBD_StdEPReq+0x330>
      break;
 8009632:	bf00      	nop
  }

  return ret;
 8009634:	7bfb      	ldrb	r3, [r7, #15]
}
 8009636:	4618      	mov	r0, r3
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
	...

08009640 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800964a:	2300      	movs	r3, #0
 800964c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800964e:	2300      	movs	r3, #0
 8009650:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009652:	2300      	movs	r3, #0
 8009654:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	885b      	ldrh	r3, [r3, #2]
 800965a:	0a1b      	lsrs	r3, r3, #8
 800965c:	b29b      	uxth	r3, r3
 800965e:	3b01      	subs	r3, #1
 8009660:	2b06      	cmp	r3, #6
 8009662:	f200 8128 	bhi.w	80098b6 <USBD_GetDescriptor+0x276>
 8009666:	a201      	add	r2, pc, #4	; (adr r2, 800966c <USBD_GetDescriptor+0x2c>)
 8009668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800966c:	08009689 	.word	0x08009689
 8009670:	080096a1 	.word	0x080096a1
 8009674:	080096e1 	.word	0x080096e1
 8009678:	080098b7 	.word	0x080098b7
 800967c:	080098b7 	.word	0x080098b7
 8009680:	08009857 	.word	0x08009857
 8009684:	08009883 	.word	0x08009883
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	7c12      	ldrb	r2, [r2, #16]
 8009694:	f107 0108 	add.w	r1, r7, #8
 8009698:	4610      	mov	r0, r2
 800969a:	4798      	blx	r3
 800969c:	60f8      	str	r0, [r7, #12]
      break;
 800969e:	e112      	b.n	80098c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	7c1b      	ldrb	r3, [r3, #16]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d10d      	bne.n	80096c4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b0:	f107 0208 	add.w	r2, r7, #8
 80096b4:	4610      	mov	r0, r2
 80096b6:	4798      	blx	r3
 80096b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	3301      	adds	r3, #1
 80096be:	2202      	movs	r2, #2
 80096c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80096c2:	e100      	b.n	80098c6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096cc:	f107 0208 	add.w	r2, r7, #8
 80096d0:	4610      	mov	r0, r2
 80096d2:	4798      	blx	r3
 80096d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	3301      	adds	r3, #1
 80096da:	2202      	movs	r2, #2
 80096dc:	701a      	strb	r2, [r3, #0]
      break;
 80096de:	e0f2      	b.n	80098c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	885b      	ldrh	r3, [r3, #2]
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b05      	cmp	r3, #5
 80096e8:	f200 80ac 	bhi.w	8009844 <USBD_GetDescriptor+0x204>
 80096ec:	a201      	add	r2, pc, #4	; (adr r2, 80096f4 <USBD_GetDescriptor+0xb4>)
 80096ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f2:	bf00      	nop
 80096f4:	0800970d 	.word	0x0800970d
 80096f8:	08009741 	.word	0x08009741
 80096fc:	08009775 	.word	0x08009775
 8009700:	080097a9 	.word	0x080097a9
 8009704:	080097dd 	.word	0x080097dd
 8009708:	08009811 	.word	0x08009811
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00b      	beq.n	8009730 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	7c12      	ldrb	r2, [r2, #16]
 8009724:	f107 0108 	add.w	r1, r7, #8
 8009728:	4610      	mov	r0, r2
 800972a:	4798      	blx	r3
 800972c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800972e:	e091      	b.n	8009854 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009730:	6839      	ldr	r1, [r7, #0]
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 facb 	bl	8009cce <USBD_CtlError>
            err++;
 8009738:	7afb      	ldrb	r3, [r7, #11]
 800973a:	3301      	adds	r3, #1
 800973c:	72fb      	strb	r3, [r7, #11]
          break;
 800973e:	e089      	b.n	8009854 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00b      	beq.n	8009764 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	7c12      	ldrb	r2, [r2, #16]
 8009758:	f107 0108 	add.w	r1, r7, #8
 800975c:	4610      	mov	r0, r2
 800975e:	4798      	blx	r3
 8009760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009762:	e077      	b.n	8009854 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009764:	6839      	ldr	r1, [r7, #0]
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 fab1 	bl	8009cce <USBD_CtlError>
            err++;
 800976c:	7afb      	ldrb	r3, [r7, #11]
 800976e:	3301      	adds	r3, #1
 8009770:	72fb      	strb	r3, [r7, #11]
          break;
 8009772:	e06f      	b.n	8009854 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00b      	beq.n	8009798 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	7c12      	ldrb	r2, [r2, #16]
 800978c:	f107 0108 	add.w	r1, r7, #8
 8009790:	4610      	mov	r0, r2
 8009792:	4798      	blx	r3
 8009794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009796:	e05d      	b.n	8009854 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009798:	6839      	ldr	r1, [r7, #0]
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 fa97 	bl	8009cce <USBD_CtlError>
            err++;
 80097a0:	7afb      	ldrb	r3, [r7, #11]
 80097a2:	3301      	adds	r3, #1
 80097a4:	72fb      	strb	r3, [r7, #11]
          break;
 80097a6:	e055      	b.n	8009854 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00b      	beq.n	80097cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ba:	691b      	ldr	r3, [r3, #16]
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	7c12      	ldrb	r2, [r2, #16]
 80097c0:	f107 0108 	add.w	r1, r7, #8
 80097c4:	4610      	mov	r0, r2
 80097c6:	4798      	blx	r3
 80097c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097ca:	e043      	b.n	8009854 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097cc:	6839      	ldr	r1, [r7, #0]
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 fa7d 	bl	8009cce <USBD_CtlError>
            err++;
 80097d4:	7afb      	ldrb	r3, [r7, #11]
 80097d6:	3301      	adds	r3, #1
 80097d8:	72fb      	strb	r3, [r7, #11]
          break;
 80097da:	e03b      	b.n	8009854 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097e2:	695b      	ldr	r3, [r3, #20]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00b      	beq.n	8009800 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ee:	695b      	ldr	r3, [r3, #20]
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	7c12      	ldrb	r2, [r2, #16]
 80097f4:	f107 0108 	add.w	r1, r7, #8
 80097f8:	4610      	mov	r0, r2
 80097fa:	4798      	blx	r3
 80097fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097fe:	e029      	b.n	8009854 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009800:	6839      	ldr	r1, [r7, #0]
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fa63 	bl	8009cce <USBD_CtlError>
            err++;
 8009808:	7afb      	ldrb	r3, [r7, #11]
 800980a:	3301      	adds	r3, #1
 800980c:	72fb      	strb	r3, [r7, #11]
          break;
 800980e:	e021      	b.n	8009854 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00b      	beq.n	8009834 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	7c12      	ldrb	r2, [r2, #16]
 8009828:	f107 0108 	add.w	r1, r7, #8
 800982c:	4610      	mov	r0, r2
 800982e:	4798      	blx	r3
 8009830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009832:	e00f      	b.n	8009854 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009834:	6839      	ldr	r1, [r7, #0]
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fa49 	bl	8009cce <USBD_CtlError>
            err++;
 800983c:	7afb      	ldrb	r3, [r7, #11]
 800983e:	3301      	adds	r3, #1
 8009840:	72fb      	strb	r3, [r7, #11]
          break;
 8009842:	e007      	b.n	8009854 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fa41 	bl	8009cce <USBD_CtlError>
          err++;
 800984c:	7afb      	ldrb	r3, [r7, #11]
 800984e:	3301      	adds	r3, #1
 8009850:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009852:	bf00      	nop
      }
      break;
 8009854:	e037      	b.n	80098c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	7c1b      	ldrb	r3, [r3, #16]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d109      	bne.n	8009872 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009866:	f107 0208 	add.w	r2, r7, #8
 800986a:	4610      	mov	r0, r2
 800986c:	4798      	blx	r3
 800986e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009870:	e029      	b.n	80098c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009872:	6839      	ldr	r1, [r7, #0]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fa2a 	bl	8009cce <USBD_CtlError>
        err++;
 800987a:	7afb      	ldrb	r3, [r7, #11]
 800987c:	3301      	adds	r3, #1
 800987e:	72fb      	strb	r3, [r7, #11]
      break;
 8009880:	e021      	b.n	80098c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	7c1b      	ldrb	r3, [r3, #16]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d10d      	bne.n	80098a6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009892:	f107 0208 	add.w	r2, r7, #8
 8009896:	4610      	mov	r0, r2
 8009898:	4798      	blx	r3
 800989a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	3301      	adds	r3, #1
 80098a0:	2207      	movs	r2, #7
 80098a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098a4:	e00f      	b.n	80098c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 fa10 	bl	8009cce <USBD_CtlError>
        err++;
 80098ae:	7afb      	ldrb	r3, [r7, #11]
 80098b0:	3301      	adds	r3, #1
 80098b2:	72fb      	strb	r3, [r7, #11]
      break;
 80098b4:	e007      	b.n	80098c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80098b6:	6839      	ldr	r1, [r7, #0]
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 fa08 	bl	8009cce <USBD_CtlError>
      err++;
 80098be:	7afb      	ldrb	r3, [r7, #11]
 80098c0:	3301      	adds	r3, #1
 80098c2:	72fb      	strb	r3, [r7, #11]
      break;
 80098c4:	bf00      	nop
  }

  if (err != 0U)
 80098c6:	7afb      	ldrb	r3, [r7, #11]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d11e      	bne.n	800990a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	88db      	ldrh	r3, [r3, #6]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d016      	beq.n	8009902 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80098d4:	893b      	ldrh	r3, [r7, #8]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00e      	beq.n	80098f8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	88da      	ldrh	r2, [r3, #6]
 80098de:	893b      	ldrh	r3, [r7, #8]
 80098e0:	4293      	cmp	r3, r2
 80098e2:	bf28      	it	cs
 80098e4:	4613      	movcs	r3, r2
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80098ea:	893b      	ldrh	r3, [r7, #8]
 80098ec:	461a      	mov	r2, r3
 80098ee:	68f9      	ldr	r1, [r7, #12]
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 fa5d 	bl	8009db0 <USBD_CtlSendData>
 80098f6:	e009      	b.n	800990c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80098f8:	6839      	ldr	r1, [r7, #0]
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f9e7 	bl	8009cce <USBD_CtlError>
 8009900:	e004      	b.n	800990c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 faae 	bl	8009e64 <USBD_CtlSendStatus>
 8009908:	e000      	b.n	800990c <USBD_GetDescriptor+0x2cc>
    return;
 800990a:	bf00      	nop
  }
}
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop

08009914 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	889b      	ldrh	r3, [r3, #4]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d131      	bne.n	800998a <USBD_SetAddress+0x76>
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	88db      	ldrh	r3, [r3, #6]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d12d      	bne.n	800998a <USBD_SetAddress+0x76>
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	885b      	ldrh	r3, [r3, #2]
 8009932:	2b7f      	cmp	r3, #127	; 0x7f
 8009934:	d829      	bhi.n	800998a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	885b      	ldrh	r3, [r3, #2]
 800993a:	b2db      	uxtb	r3, r3
 800993c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009940:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b03      	cmp	r3, #3
 800994c:	d104      	bne.n	8009958 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800994e:	6839      	ldr	r1, [r7, #0]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 f9bc 	bl	8009cce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009956:	e01d      	b.n	8009994 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	7bfa      	ldrb	r2, [r7, #15]
 800995c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009960:	7bfb      	ldrb	r3, [r7, #15]
 8009962:	4619      	mov	r1, r3
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f003 fc93 	bl	800d290 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fa7a 	bl	8009e64 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009970:	7bfb      	ldrb	r3, [r7, #15]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d004      	beq.n	8009980 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2202      	movs	r2, #2
 800997a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800997e:	e009      	b.n	8009994 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009988:	e004      	b.n	8009994 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800998a:	6839      	ldr	r1, [r7, #0]
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f99e 	bl	8009cce <USBD_CtlError>
  }
}
 8009992:	bf00      	nop
 8009994:	bf00      	nop
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099a6:	2300      	movs	r3, #0
 80099a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	885b      	ldrh	r3, [r3, #2]
 80099ae:	b2da      	uxtb	r2, r3
 80099b0:	4b4e      	ldr	r3, [pc, #312]	; (8009aec <USBD_SetConfig+0x150>)
 80099b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80099b4:	4b4d      	ldr	r3, [pc, #308]	; (8009aec <USBD_SetConfig+0x150>)
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d905      	bls.n	80099c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 f985 	bl	8009cce <USBD_CtlError>
    return USBD_FAIL;
 80099c4:	2303      	movs	r3, #3
 80099c6:	e08c      	b.n	8009ae2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	d002      	beq.n	80099da <USBD_SetConfig+0x3e>
 80099d4:	2b03      	cmp	r3, #3
 80099d6:	d029      	beq.n	8009a2c <USBD_SetConfig+0x90>
 80099d8:	e075      	b.n	8009ac6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80099da:	4b44      	ldr	r3, [pc, #272]	; (8009aec <USBD_SetConfig+0x150>)
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d020      	beq.n	8009a24 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80099e2:	4b42      	ldr	r3, [pc, #264]	; (8009aec <USBD_SetConfig+0x150>)
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	461a      	mov	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80099ec:	4b3f      	ldr	r3, [pc, #252]	; (8009aec <USBD_SetConfig+0x150>)
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	4619      	mov	r1, r3
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f7fe ffe7 	bl	80089c6 <USBD_SetClassConfig>
 80099f8:	4603      	mov	r3, r0
 80099fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80099fc:	7bfb      	ldrb	r3, [r7, #15]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d008      	beq.n	8009a14 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009a02:	6839      	ldr	r1, [r7, #0]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 f962 	bl	8009cce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2202      	movs	r2, #2
 8009a0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a12:	e065      	b.n	8009ae0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fa25 	bl	8009e64 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2203      	movs	r2, #3
 8009a1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009a22:	e05d      	b.n	8009ae0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 fa1d 	bl	8009e64 <USBD_CtlSendStatus>
      break;
 8009a2a:	e059      	b.n	8009ae0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009a2c:	4b2f      	ldr	r3, [pc, #188]	; (8009aec <USBD_SetConfig+0x150>)
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d112      	bne.n	8009a5a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2202      	movs	r2, #2
 8009a38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009a3c:	4b2b      	ldr	r3, [pc, #172]	; (8009aec <USBD_SetConfig+0x150>)
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	461a      	mov	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a46:	4b29      	ldr	r3, [pc, #164]	; (8009aec <USBD_SetConfig+0x150>)
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f7fe ffd6 	bl	80089fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fa06 	bl	8009e64 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a58:	e042      	b.n	8009ae0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009a5a:	4b24      	ldr	r3, [pc, #144]	; (8009aec <USBD_SetConfig+0x150>)
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d02a      	beq.n	8009abe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	4619      	mov	r1, r3
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7fe ffc4 	bl	80089fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a76:	4b1d      	ldr	r3, [pc, #116]	; (8009aec <USBD_SetConfig+0x150>)
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a80:	4b1a      	ldr	r3, [pc, #104]	; (8009aec <USBD_SetConfig+0x150>)
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7fe ff9d 	bl	80089c6 <USBD_SetClassConfig>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009a90:	7bfb      	ldrb	r3, [r7, #15]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00f      	beq.n	8009ab6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009a96:	6839      	ldr	r1, [r7, #0]
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 f918 	bl	8009cce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f7fe ffa9 	bl	80089fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2202      	movs	r2, #2
 8009ab0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009ab4:	e014      	b.n	8009ae0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f9d4 	bl	8009e64 <USBD_CtlSendStatus>
      break;
 8009abc:	e010      	b.n	8009ae0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f9d0 	bl	8009e64 <USBD_CtlSendStatus>
      break;
 8009ac4:	e00c      	b.n	8009ae0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009ac6:	6839      	ldr	r1, [r7, #0]
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 f900 	bl	8009cce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ace:	4b07      	ldr	r3, [pc, #28]	; (8009aec <USBD_SetConfig+0x150>)
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7fe ff92 	bl	80089fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009ada:	2303      	movs	r3, #3
 8009adc:	73fb      	strb	r3, [r7, #15]
      break;
 8009ade:	bf00      	nop
  }

  return ret;
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	20000368 	.word	0x20000368

08009af0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	88db      	ldrh	r3, [r3, #6]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d004      	beq.n	8009b0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b02:	6839      	ldr	r1, [r7, #0]
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 f8e2 	bl	8009cce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009b0a:	e023      	b.n	8009b54 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	dc02      	bgt.n	8009b1e <USBD_GetConfig+0x2e>
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	dc03      	bgt.n	8009b24 <USBD_GetConfig+0x34>
 8009b1c:	e015      	b.n	8009b4a <USBD_GetConfig+0x5a>
 8009b1e:	2b03      	cmp	r3, #3
 8009b20:	d00b      	beq.n	8009b3a <USBD_GetConfig+0x4a>
 8009b22:	e012      	b.n	8009b4a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	3308      	adds	r3, #8
 8009b2e:	2201      	movs	r2, #1
 8009b30:	4619      	mov	r1, r3
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f93c 	bl	8009db0 <USBD_CtlSendData>
        break;
 8009b38:	e00c      	b.n	8009b54 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	2201      	movs	r2, #1
 8009b40:	4619      	mov	r1, r3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 f934 	bl	8009db0 <USBD_CtlSendData>
        break;
 8009b48:	e004      	b.n	8009b54 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009b4a:	6839      	ldr	r1, [r7, #0]
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 f8be 	bl	8009cce <USBD_CtlError>
        break;
 8009b52:	bf00      	nop
}
 8009b54:	bf00      	nop
 8009b56:	3708      	adds	r7, #8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	3b01      	subs	r3, #1
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d81e      	bhi.n	8009bb2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	88db      	ldrh	r3, [r3, #6]
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d004      	beq.n	8009b86 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009b7c:	6839      	ldr	r1, [r7, #0]
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 f8a5 	bl	8009cce <USBD_CtlError>
        break;
 8009b84:	e01a      	b.n	8009bbc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d005      	beq.n	8009ba2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	f043 0202 	orr.w	r2, r3, #2
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	330c      	adds	r3, #12
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	4619      	mov	r1, r3
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 f900 	bl	8009db0 <USBD_CtlSendData>
      break;
 8009bb0:	e004      	b.n	8009bbc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009bb2:	6839      	ldr	r1, [r7, #0]
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 f88a 	bl	8009cce <USBD_CtlError>
      break;
 8009bba:	bf00      	nop
  }
}
 8009bbc:	bf00      	nop
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	885b      	ldrh	r3, [r3, #2]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d107      	bne.n	8009be6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f940 	bl	8009e64 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009be4:	e013      	b.n	8009c0e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	885b      	ldrh	r3, [r3, #2]
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d10b      	bne.n	8009c06 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	889b      	ldrh	r3, [r3, #4]
 8009bf2:	0a1b      	lsrs	r3, r3, #8
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	b2da      	uxtb	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f930 	bl	8009e64 <USBD_CtlSendStatus>
}
 8009c04:	e003      	b.n	8009c0e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009c06:	6839      	ldr	r1, [r7, #0]
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f860 	bl	8009cce <USBD_CtlError>
}
 8009c0e:	bf00      	nop
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b082      	sub	sp, #8
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
 8009c1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d80b      	bhi.n	8009c46 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	885b      	ldrh	r3, [r3, #2]
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d10c      	bne.n	8009c50 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 f910 	bl	8009e64 <USBD_CtlSendStatus>
      }
      break;
 8009c44:	e004      	b.n	8009c50 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 f840 	bl	8009cce <USBD_CtlError>
      break;
 8009c4e:	e000      	b.n	8009c52 <USBD_ClrFeature+0x3c>
      break;
 8009c50:	bf00      	nop
  }
}
 8009c52:	bf00      	nop
 8009c54:	3708      	adds	r7, #8
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b084      	sub	sp, #16
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	781a      	ldrb	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	3301      	adds	r3, #1
 8009c74:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	781a      	ldrb	r2, [r3, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	3301      	adds	r3, #1
 8009c82:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f7ff fa41 	bl	800910c <SWAPBYTE>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	3301      	adds	r3, #1
 8009c96:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009c9e:	68f8      	ldr	r0, [r7, #12]
 8009ca0:	f7ff fa34 	bl	800910c <SWAPBYTE>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f7ff fa27 	bl	800910c <SWAPBYTE>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	80da      	strh	r2, [r3, #6]
}
 8009cc6:	bf00      	nop
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b082      	sub	sp, #8
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cd8:	2180      	movs	r1, #128	; 0x80
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f003 fa6e 	bl	800d1bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f003 fa6a 	bl	800d1bc <USBD_LL_StallEP>
}
 8009ce8:	bf00      	nop
 8009cea:	3708      	adds	r7, #8
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d036      	beq.n	8009d74 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009d0a:	6938      	ldr	r0, [r7, #16]
 8009d0c:	f000 f836 	bl	8009d7c <USBD_GetLen>
 8009d10:	4603      	mov	r3, r0
 8009d12:	3301      	adds	r3, #1
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	005b      	lsls	r3, r3, #1
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009d1e:	7dfb      	ldrb	r3, [r7, #23]
 8009d20:	68ba      	ldr	r2, [r7, #8]
 8009d22:	4413      	add	r3, r2
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	7812      	ldrb	r2, [r2, #0]
 8009d28:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d2a:	7dfb      	ldrb	r3, [r7, #23]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009d30:	7dfb      	ldrb	r3, [r7, #23]
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	4413      	add	r3, r2
 8009d36:	2203      	movs	r2, #3
 8009d38:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d3a:	7dfb      	ldrb	r3, [r7, #23]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009d40:	e013      	b.n	8009d6a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
 8009d44:	68ba      	ldr	r2, [r7, #8]
 8009d46:	4413      	add	r3, r2
 8009d48:	693a      	ldr	r2, [r7, #16]
 8009d4a:	7812      	ldrb	r2, [r2, #0]
 8009d4c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	3301      	adds	r3, #1
 8009d52:	613b      	str	r3, [r7, #16]
    idx++;
 8009d54:	7dfb      	ldrb	r3, [r7, #23]
 8009d56:	3301      	adds	r3, #1
 8009d58:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009d5a:	7dfb      	ldrb	r3, [r7, #23]
 8009d5c:	68ba      	ldr	r2, [r7, #8]
 8009d5e:	4413      	add	r3, r2
 8009d60:	2200      	movs	r2, #0
 8009d62:	701a      	strb	r2, [r3, #0]
    idx++;
 8009d64:	7dfb      	ldrb	r3, [r7, #23]
 8009d66:	3301      	adds	r3, #1
 8009d68:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1e7      	bne.n	8009d42 <USBD_GetString+0x52>
 8009d72:	e000      	b.n	8009d76 <USBD_GetString+0x86>
    return;
 8009d74:	bf00      	nop
  }
}
 8009d76:	3718      	adds	r7, #24
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b085      	sub	sp, #20
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d84:	2300      	movs	r3, #0
 8009d86:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009d8c:	e005      	b.n	8009d9a <USBD_GetLen+0x1e>
  {
    len++;
 8009d8e:	7bfb      	ldrb	r3, [r7, #15]
 8009d90:	3301      	adds	r3, #1
 8009d92:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	3301      	adds	r3, #1
 8009d98:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1f5      	bne.n	8009d8e <USBD_GetLen+0x12>
  }

  return len;
 8009da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3714      	adds	r7, #20
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2202      	movs	r2, #2
 8009dc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f003 fa79 	bl	800d2ce <USBD_LL_Transmit>

  return USBD_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b084      	sub	sp, #16
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	60f8      	str	r0, [r7, #12]
 8009dee:	60b9      	str	r1, [r7, #8]
 8009df0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	2100      	movs	r1, #0
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f003 fa68 	bl	800d2ce <USBD_LL_Transmit>

  return USBD_OK;
 8009dfe:	2300      	movs	r3, #0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3710      	adds	r7, #16
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2203      	movs	r2, #3
 8009e18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	2100      	movs	r1, #0
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f003 fa6c 	bl	800d310 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e38:	2300      	movs	r3, #0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b084      	sub	sp, #16
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	60f8      	str	r0, [r7, #12]
 8009e4a:	60b9      	str	r1, [r7, #8]
 8009e4c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	68ba      	ldr	r2, [r7, #8]
 8009e52:	2100      	movs	r1, #0
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f003 fa5b 	bl	800d310 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e5a:	2300      	movs	r3, #0
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3710      	adds	r7, #16
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2204      	movs	r2, #4
 8009e70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e74:	2300      	movs	r3, #0
 8009e76:	2200      	movs	r2, #0
 8009e78:	2100      	movs	r1, #0
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f003 fa27 	bl	800d2ce <USBD_LL_Transmit>

  return USBD_OK;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b082      	sub	sp, #8
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2205      	movs	r2, #5
 8009e96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f003 fa35 	bl	800d310 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3708      	adds	r7, #8
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <__NVIC_SetPriority>:
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	6039      	str	r1, [r7, #0]
 8009eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	db0a      	blt.n	8009eda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	b2da      	uxtb	r2, r3
 8009ec8:	490c      	ldr	r1, [pc, #48]	; (8009efc <__NVIC_SetPriority+0x4c>)
 8009eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ece:	0112      	lsls	r2, r2, #4
 8009ed0:	b2d2      	uxtb	r2, r2
 8009ed2:	440b      	add	r3, r1
 8009ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009ed8:	e00a      	b.n	8009ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	b2da      	uxtb	r2, r3
 8009ede:	4908      	ldr	r1, [pc, #32]	; (8009f00 <__NVIC_SetPriority+0x50>)
 8009ee0:	79fb      	ldrb	r3, [r7, #7]
 8009ee2:	f003 030f 	and.w	r3, r3, #15
 8009ee6:	3b04      	subs	r3, #4
 8009ee8:	0112      	lsls	r2, r2, #4
 8009eea:	b2d2      	uxtb	r2, r2
 8009eec:	440b      	add	r3, r1
 8009eee:	761a      	strb	r2, [r3, #24]
}
 8009ef0:	bf00      	nop
 8009ef2:	370c      	adds	r7, #12
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr
 8009efc:	e000e100 	.word	0xe000e100
 8009f00:	e000ed00 	.word	0xe000ed00

08009f04 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009f04:	b580      	push	{r7, lr}
 8009f06:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009f08:	4b05      	ldr	r3, [pc, #20]	; (8009f20 <SysTick_Handler+0x1c>)
 8009f0a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009f0c:	f001 fd28 	bl	800b960 <xTaskGetSchedulerState>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d001      	beq.n	8009f1a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009f16:	f002 fb0f 	bl	800c538 <xPortSysTickHandler>
  }
}
 8009f1a:	bf00      	nop
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	e000e010 	.word	0xe000e010

08009f24 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009f24:	b580      	push	{r7, lr}
 8009f26:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009f28:	2100      	movs	r1, #0
 8009f2a:	f06f 0004 	mvn.w	r0, #4
 8009f2e:	f7ff ffbf 	bl	8009eb0 <__NVIC_SetPriority>
#endif
}
 8009f32:	bf00      	nop
 8009f34:	bd80      	pop	{r7, pc}
	...

08009f38 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f3e:	f3ef 8305 	mrs	r3, IPSR
 8009f42:	603b      	str	r3, [r7, #0]
  return(result);
 8009f44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d003      	beq.n	8009f52 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009f4a:	f06f 0305 	mvn.w	r3, #5
 8009f4e:	607b      	str	r3, [r7, #4]
 8009f50:	e00c      	b.n	8009f6c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009f52:	4b0a      	ldr	r3, [pc, #40]	; (8009f7c <osKernelInitialize+0x44>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d105      	bne.n	8009f66 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009f5a:	4b08      	ldr	r3, [pc, #32]	; (8009f7c <osKernelInitialize+0x44>)
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	607b      	str	r3, [r7, #4]
 8009f64:	e002      	b.n	8009f6c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009f66:	f04f 33ff 	mov.w	r3, #4294967295
 8009f6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009f6c:	687b      	ldr	r3, [r7, #4]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	370c      	adds	r7, #12
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	2000036c 	.word	0x2000036c

08009f80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f86:	f3ef 8305 	mrs	r3, IPSR
 8009f8a:	603b      	str	r3, [r7, #0]
  return(result);
 8009f8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d003      	beq.n	8009f9a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009f92:	f06f 0305 	mvn.w	r3, #5
 8009f96:	607b      	str	r3, [r7, #4]
 8009f98:	e010      	b.n	8009fbc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009f9a:	4b0b      	ldr	r3, [pc, #44]	; (8009fc8 <osKernelStart+0x48>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d109      	bne.n	8009fb6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009fa2:	f7ff ffbf 	bl	8009f24 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009fa6:	4b08      	ldr	r3, [pc, #32]	; (8009fc8 <osKernelStart+0x48>)
 8009fa8:	2202      	movs	r2, #2
 8009faa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009fac:	f001 f87c 	bl	800b0a8 <vTaskStartScheduler>
      stat = osOK;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	607b      	str	r3, [r7, #4]
 8009fb4:	e002      	b.n	8009fbc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8009fba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009fbc:	687b      	ldr	r3, [r7, #4]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3708      	adds	r7, #8
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	2000036c 	.word	0x2000036c

08009fcc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b08e      	sub	sp, #56	; 0x38
 8009fd0:	af04      	add	r7, sp, #16
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fdc:	f3ef 8305 	mrs	r3, IPSR
 8009fe0:	617b      	str	r3, [r7, #20]
  return(result);
 8009fe2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d17e      	bne.n	800a0e6 <osThreadNew+0x11a>
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d07b      	beq.n	800a0e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009fee:	2380      	movs	r3, #128	; 0x80
 8009ff0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009ff2:	2318      	movs	r3, #24
 8009ff4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8009ffe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d045      	beq.n	800a092 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d002      	beq.n	800a014 <osThreadNew+0x48>
        name = attr->name;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	699b      	ldr	r3, [r3, #24]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d002      	beq.n	800a022 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	699b      	ldr	r3, [r3, #24]
 800a020:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d008      	beq.n	800a03a <osThreadNew+0x6e>
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	2b38      	cmp	r3, #56	; 0x38
 800a02c:	d805      	bhi.n	800a03a <osThreadNew+0x6e>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	f003 0301 	and.w	r3, r3, #1
 800a036:	2b00      	cmp	r3, #0
 800a038:	d001      	beq.n	800a03e <osThreadNew+0x72>
        return (NULL);
 800a03a:	2300      	movs	r3, #0
 800a03c:	e054      	b.n	800a0e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	695b      	ldr	r3, [r3, #20]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d003      	beq.n	800a04e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	695b      	ldr	r3, [r3, #20]
 800a04a:	089b      	lsrs	r3, r3, #2
 800a04c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00e      	beq.n	800a074 <osThreadNew+0xa8>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	2bbb      	cmp	r3, #187	; 0xbb
 800a05c:	d90a      	bls.n	800a074 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a062:	2b00      	cmp	r3, #0
 800a064:	d006      	beq.n	800a074 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	695b      	ldr	r3, [r3, #20]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d002      	beq.n	800a074 <osThreadNew+0xa8>
        mem = 1;
 800a06e:	2301      	movs	r3, #1
 800a070:	61bb      	str	r3, [r7, #24]
 800a072:	e010      	b.n	800a096 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d10c      	bne.n	800a096 <osThreadNew+0xca>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d108      	bne.n	800a096 <osThreadNew+0xca>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	691b      	ldr	r3, [r3, #16]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d104      	bne.n	800a096 <osThreadNew+0xca>
          mem = 0;
 800a08c:	2300      	movs	r3, #0
 800a08e:	61bb      	str	r3, [r7, #24]
 800a090:	e001      	b.n	800a096 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a092:	2300      	movs	r3, #0
 800a094:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d110      	bne.n	800a0be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a0a4:	9202      	str	r2, [sp, #8]
 800a0a6:	9301      	str	r3, [sp, #4]
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	9300      	str	r3, [sp, #0]
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	6a3a      	ldr	r2, [r7, #32]
 800a0b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f000 fe0c 	bl	800acd0 <xTaskCreateStatic>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	613b      	str	r3, [r7, #16]
 800a0bc:	e013      	b.n	800a0e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d110      	bne.n	800a0e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a0c4:	6a3b      	ldr	r3, [r7, #32]
 800a0c6:	b29a      	uxth	r2, r3
 800a0c8:	f107 0310 	add.w	r3, r7, #16
 800a0cc:	9301      	str	r3, [sp, #4]
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f000 fe57 	bl	800ad8a <xTaskCreate>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d001      	beq.n	800a0e6 <osThreadNew+0x11a>
            hTask = NULL;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a0e6:	693b      	ldr	r3, [r7, #16]
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3728      	adds	r7, #40	; 0x28
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0f8:	f3ef 8305 	mrs	r3, IPSR
 800a0fc:	60bb      	str	r3, [r7, #8]
  return(result);
 800a0fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a100:	2b00      	cmp	r3, #0
 800a102:	d003      	beq.n	800a10c <osDelay+0x1c>
    stat = osErrorISR;
 800a104:	f06f 0305 	mvn.w	r3, #5
 800a108:	60fb      	str	r3, [r7, #12]
 800a10a:	e007      	b.n	800a11c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a10c:	2300      	movs	r3, #0
 800a10e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d002      	beq.n	800a11c <osDelay+0x2c>
      vTaskDelay(ticks);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 ff92 	bl	800b040 <vTaskDelay>
    }
  }

  return (stat);
 800a11c:	68fb      	ldr	r3, [r7, #12]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
	...

0800a128 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	4a07      	ldr	r2, [pc, #28]	; (800a154 <vApplicationGetIdleTaskMemory+0x2c>)
 800a138:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	4a06      	ldr	r2, [pc, #24]	; (800a158 <vApplicationGetIdleTaskMemory+0x30>)
 800a13e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2280      	movs	r2, #128	; 0x80
 800a144:	601a      	str	r2, [r3, #0]
}
 800a146:	bf00      	nop
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	20000370 	.word	0x20000370
 800a158:	2000042c 	.word	0x2000042c

0800a15c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	4a07      	ldr	r2, [pc, #28]	; (800a188 <vApplicationGetTimerTaskMemory+0x2c>)
 800a16c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	4a06      	ldr	r2, [pc, #24]	; (800a18c <vApplicationGetTimerTaskMemory+0x30>)
 800a172:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a17a:	601a      	str	r2, [r3, #0]
}
 800a17c:	bf00      	nop
 800a17e:	3714      	adds	r7, #20
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr
 800a188:	2000062c 	.word	0x2000062c
 800a18c:	200006e8 	.word	0x200006e8

0800a190 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f103 0208 	add.w	r2, r3, #8
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a1a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f103 0208 	add.w	r2, r3, #8
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f103 0208 	add.w	r2, r3, #8
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a1c4:	bf00      	nop
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a1de:	bf00      	nop
 800a1e0:	370c      	adds	r7, #12
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr

0800a1ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1ea:	b480      	push	{r7}
 800a1ec:	b085      	sub	sp, #20
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
 800a1f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	689a      	ldr	r2, [r3, #8]
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	683a      	ldr	r2, [r7, #0]
 800a20e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	683a      	ldr	r2, [r7, #0]
 800a214:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	1c5a      	adds	r2, r3, #1
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	601a      	str	r2, [r3, #0]
}
 800a226:	bf00      	nop
 800a228:	3714      	adds	r7, #20
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr

0800a232 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a232:	b480      	push	{r7}
 800a234:	b085      	sub	sp, #20
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a248:	d103      	bne.n	800a252 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	e00c      	b.n	800a26c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	3308      	adds	r3, #8
 800a256:	60fb      	str	r3, [r7, #12]
 800a258:	e002      	b.n	800a260 <vListInsert+0x2e>
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	60fb      	str	r3, [r7, #12]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d2f6      	bcs.n	800a25a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	685a      	ldr	r2, [r3, #4]
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	683a      	ldr	r2, [r7, #0]
 800a27a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	683a      	ldr	r2, [r7, #0]
 800a286:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	1c5a      	adds	r2, r3, #1
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	601a      	str	r2, [r3, #0]
}
 800a298:	bf00      	nop
 800a29a:	3714      	adds	r7, #20
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	6892      	ldr	r2, [r2, #8]
 800a2ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	6852      	ldr	r2, [r2, #4]
 800a2c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d103      	bne.n	800a2d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	689a      	ldr	r2, [r3, #8]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	1e5a      	subs	r2, r3, #1
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3714      	adds	r7, #20
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10a      	bne.n	800a322 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a310:	f383 8811 	msr	BASEPRI, r3
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	f3bf 8f4f 	dsb	sy
 800a31c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a31e:	bf00      	nop
 800a320:	e7fe      	b.n	800a320 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a322:	f002 f877 	bl	800c414 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a32e:	68f9      	ldr	r1, [r7, #12]
 800a330:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a332:	fb01 f303 	mul.w	r3, r1, r3
 800a336:	441a      	add	r2, r3
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2200      	movs	r2, #0
 800a340:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a352:	3b01      	subs	r3, #1
 800a354:	68f9      	ldr	r1, [r7, #12]
 800a356:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a358:	fb01 f303 	mul.w	r3, r1, r3
 800a35c:	441a      	add	r2, r3
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	22ff      	movs	r2, #255	; 0xff
 800a366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	22ff      	movs	r2, #255	; 0xff
 800a36e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d114      	bne.n	800a3a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d01a      	beq.n	800a3b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	3310      	adds	r3, #16
 800a384:	4618      	mov	r0, r3
 800a386:	f001 f929 	bl	800b5dc <xTaskRemoveFromEventList>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d012      	beq.n	800a3b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a390:	4b0c      	ldr	r3, [pc, #48]	; (800a3c4 <xQueueGenericReset+0xcc>)
 800a392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a396:	601a      	str	r2, [r3, #0]
 800a398:	f3bf 8f4f 	dsb	sy
 800a39c:	f3bf 8f6f 	isb	sy
 800a3a0:	e009      	b.n	800a3b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	3310      	adds	r3, #16
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7ff fef2 	bl	800a190 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	3324      	adds	r3, #36	; 0x24
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7ff feed 	bl	800a190 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a3b6:	f002 f85d 	bl	800c474 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a3ba:	2301      	movs	r3, #1
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3710      	adds	r7, #16
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	e000ed04 	.word	0xe000ed04

0800a3c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b08e      	sub	sp, #56	; 0x38
 800a3cc:	af02      	add	r7, sp, #8
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	607a      	str	r2, [r7, #4]
 800a3d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d10a      	bne.n	800a3f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e0:	f383 8811 	msr	BASEPRI, r3
 800a3e4:	f3bf 8f6f 	isb	sy
 800a3e8:	f3bf 8f4f 	dsb	sy
 800a3ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a3ee:	bf00      	nop
 800a3f0:	e7fe      	b.n	800a3f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d10a      	bne.n	800a40e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fc:	f383 8811 	msr	BASEPRI, r3
 800a400:	f3bf 8f6f 	isb	sy
 800a404:	f3bf 8f4f 	dsb	sy
 800a408:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a40a:	bf00      	nop
 800a40c:	e7fe      	b.n	800a40c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d002      	beq.n	800a41a <xQueueGenericCreateStatic+0x52>
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d001      	beq.n	800a41e <xQueueGenericCreateStatic+0x56>
 800a41a:	2301      	movs	r3, #1
 800a41c:	e000      	b.n	800a420 <xQueueGenericCreateStatic+0x58>
 800a41e:	2300      	movs	r3, #0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d10a      	bne.n	800a43a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a428:	f383 8811 	msr	BASEPRI, r3
 800a42c:	f3bf 8f6f 	isb	sy
 800a430:	f3bf 8f4f 	dsb	sy
 800a434:	623b      	str	r3, [r7, #32]
}
 800a436:	bf00      	nop
 800a438:	e7fe      	b.n	800a438 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d102      	bne.n	800a446 <xQueueGenericCreateStatic+0x7e>
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d101      	bne.n	800a44a <xQueueGenericCreateStatic+0x82>
 800a446:	2301      	movs	r3, #1
 800a448:	e000      	b.n	800a44c <xQueueGenericCreateStatic+0x84>
 800a44a:	2300      	movs	r3, #0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d10a      	bne.n	800a466 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a454:	f383 8811 	msr	BASEPRI, r3
 800a458:	f3bf 8f6f 	isb	sy
 800a45c:	f3bf 8f4f 	dsb	sy
 800a460:	61fb      	str	r3, [r7, #28]
}
 800a462:	bf00      	nop
 800a464:	e7fe      	b.n	800a464 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a466:	2350      	movs	r3, #80	; 0x50
 800a468:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	2b50      	cmp	r3, #80	; 0x50
 800a46e:	d00a      	beq.n	800a486 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	61bb      	str	r3, [r7, #24]
}
 800a482:	bf00      	nop
 800a484:	e7fe      	b.n	800a484 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a486:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00d      	beq.n	800a4ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a494:	2201      	movs	r2, #1
 800a496:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a49a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	68b9      	ldr	r1, [r7, #8]
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f000 f805 	bl	800a4b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3730      	adds	r7, #48	; 0x30
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	607a      	str	r2, [r7, #4]
 800a4c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d103      	bne.n	800a4d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	69ba      	ldr	r2, [r7, #24]
 800a4d0:	601a      	str	r2, [r3, #0]
 800a4d2:	e002      	b.n	800a4da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a4e6:	2101      	movs	r1, #1
 800a4e8:	69b8      	ldr	r0, [r7, #24]
 800a4ea:	f7ff ff05 	bl	800a2f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	78fa      	ldrb	r2, [r7, #3]
 800a4f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a4f6:	bf00      	nop
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
	...

0800a500 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b08e      	sub	sp, #56	; 0x38
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	607a      	str	r2, [r7, #4]
 800a50c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a50e:	2300      	movs	r3, #0
 800a510:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10a      	bne.n	800a532 <xQueueGenericSend+0x32>
	__asm volatile
 800a51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a520:	f383 8811 	msr	BASEPRI, r3
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a52e:	bf00      	nop
 800a530:	e7fe      	b.n	800a530 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d103      	bne.n	800a540 <xQueueGenericSend+0x40>
 800a538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d101      	bne.n	800a544 <xQueueGenericSend+0x44>
 800a540:	2301      	movs	r3, #1
 800a542:	e000      	b.n	800a546 <xQueueGenericSend+0x46>
 800a544:	2300      	movs	r3, #0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d10a      	bne.n	800a560 <xQueueGenericSend+0x60>
	__asm volatile
 800a54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54e:	f383 8811 	msr	BASEPRI, r3
 800a552:	f3bf 8f6f 	isb	sy
 800a556:	f3bf 8f4f 	dsb	sy
 800a55a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a55c:	bf00      	nop
 800a55e:	e7fe      	b.n	800a55e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	2b02      	cmp	r3, #2
 800a564:	d103      	bne.n	800a56e <xQueueGenericSend+0x6e>
 800a566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d101      	bne.n	800a572 <xQueueGenericSend+0x72>
 800a56e:	2301      	movs	r3, #1
 800a570:	e000      	b.n	800a574 <xQueueGenericSend+0x74>
 800a572:	2300      	movs	r3, #0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d10a      	bne.n	800a58e <xQueueGenericSend+0x8e>
	__asm volatile
 800a578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57c:	f383 8811 	msr	BASEPRI, r3
 800a580:	f3bf 8f6f 	isb	sy
 800a584:	f3bf 8f4f 	dsb	sy
 800a588:	623b      	str	r3, [r7, #32]
}
 800a58a:	bf00      	nop
 800a58c:	e7fe      	b.n	800a58c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a58e:	f001 f9e7 	bl	800b960 <xTaskGetSchedulerState>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d102      	bne.n	800a59e <xQueueGenericSend+0x9e>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d101      	bne.n	800a5a2 <xQueueGenericSend+0xa2>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e000      	b.n	800a5a4 <xQueueGenericSend+0xa4>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10a      	bne.n	800a5be <xQueueGenericSend+0xbe>
	__asm volatile
 800a5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ac:	f383 8811 	msr	BASEPRI, r3
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	61fb      	str	r3, [r7, #28]
}
 800a5ba:	bf00      	nop
 800a5bc:	e7fe      	b.n	800a5bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a5be:	f001 ff29 	bl	800c414 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d302      	bcc.n	800a5d4 <xQueueGenericSend+0xd4>
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	2b02      	cmp	r3, #2
 800a5d2:	d129      	bne.n	800a628 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a5d4:	683a      	ldr	r2, [r7, #0]
 800a5d6:	68b9      	ldr	r1, [r7, #8]
 800a5d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5da:	f000 fa0b 	bl	800a9f4 <prvCopyDataToQueue>
 800a5de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d010      	beq.n	800a60a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ea:	3324      	adds	r3, #36	; 0x24
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f000 fff5 	bl	800b5dc <xTaskRemoveFromEventList>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d013      	beq.n	800a620 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a5f8:	4b3f      	ldr	r3, [pc, #252]	; (800a6f8 <xQueueGenericSend+0x1f8>)
 800a5fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5fe:	601a      	str	r2, [r3, #0]
 800a600:	f3bf 8f4f 	dsb	sy
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	e00a      	b.n	800a620 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d007      	beq.n	800a620 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a610:	4b39      	ldr	r3, [pc, #228]	; (800a6f8 <xQueueGenericSend+0x1f8>)
 800a612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a616:	601a      	str	r2, [r3, #0]
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a620:	f001 ff28 	bl	800c474 <vPortExitCritical>
				return pdPASS;
 800a624:	2301      	movs	r3, #1
 800a626:	e063      	b.n	800a6f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d103      	bne.n	800a636 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a62e:	f001 ff21 	bl	800c474 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a632:	2300      	movs	r3, #0
 800a634:	e05c      	b.n	800a6f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d106      	bne.n	800a64a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a63c:	f107 0314 	add.w	r3, r7, #20
 800a640:	4618      	mov	r0, r3
 800a642:	f001 f82f 	bl	800b6a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a646:	2301      	movs	r3, #1
 800a648:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a64a:	f001 ff13 	bl	800c474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a64e:	f000 fd9b 	bl	800b188 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a652:	f001 fedf 	bl	800c414 <vPortEnterCritical>
 800a656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a658:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a65c:	b25b      	sxtb	r3, r3
 800a65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a662:	d103      	bne.n	800a66c <xQueueGenericSend+0x16c>
 800a664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a666:	2200      	movs	r2, #0
 800a668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a672:	b25b      	sxtb	r3, r3
 800a674:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a678:	d103      	bne.n	800a682 <xQueueGenericSend+0x182>
 800a67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a682:	f001 fef7 	bl	800c474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a686:	1d3a      	adds	r2, r7, #4
 800a688:	f107 0314 	add.w	r3, r7, #20
 800a68c:	4611      	mov	r1, r2
 800a68e:	4618      	mov	r0, r3
 800a690:	f001 f81e 	bl	800b6d0 <xTaskCheckForTimeOut>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d124      	bne.n	800a6e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a69a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a69c:	f000 faa2 	bl	800abe4 <prvIsQueueFull>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d018      	beq.n	800a6d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a8:	3310      	adds	r3, #16
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	4611      	mov	r1, r2
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f000 ff44 	bl	800b53c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a6b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6b6:	f000 fa2d 	bl	800ab14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a6ba:	f000 fd73 	bl	800b1a4 <xTaskResumeAll>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	f47f af7c 	bne.w	800a5be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a6c6:	4b0c      	ldr	r3, [pc, #48]	; (800a6f8 <xQueueGenericSend+0x1f8>)
 800a6c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6cc:	601a      	str	r2, [r3, #0]
 800a6ce:	f3bf 8f4f 	dsb	sy
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	e772      	b.n	800a5be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a6d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6da:	f000 fa1b 	bl	800ab14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6de:	f000 fd61 	bl	800b1a4 <xTaskResumeAll>
 800a6e2:	e76c      	b.n	800a5be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a6e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6e6:	f000 fa15 	bl	800ab14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6ea:	f000 fd5b 	bl	800b1a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a6ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3738      	adds	r7, #56	; 0x38
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	e000ed04 	.word	0xe000ed04

0800a6fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b090      	sub	sp, #64	; 0x40
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	607a      	str	r2, [r7, #4]
 800a708:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a710:	2b00      	cmp	r3, #0
 800a712:	d10a      	bne.n	800a72a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a718:	f383 8811 	msr	BASEPRI, r3
 800a71c:	f3bf 8f6f 	isb	sy
 800a720:	f3bf 8f4f 	dsb	sy
 800a724:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a726:	bf00      	nop
 800a728:	e7fe      	b.n	800a728 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d103      	bne.n	800a738 <xQueueGenericSendFromISR+0x3c>
 800a730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a734:	2b00      	cmp	r3, #0
 800a736:	d101      	bne.n	800a73c <xQueueGenericSendFromISR+0x40>
 800a738:	2301      	movs	r3, #1
 800a73a:	e000      	b.n	800a73e <xQueueGenericSendFromISR+0x42>
 800a73c:	2300      	movs	r3, #0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d10a      	bne.n	800a758 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a746:	f383 8811 	msr	BASEPRI, r3
 800a74a:	f3bf 8f6f 	isb	sy
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a754:	bf00      	nop
 800a756:	e7fe      	b.n	800a756 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	2b02      	cmp	r3, #2
 800a75c:	d103      	bne.n	800a766 <xQueueGenericSendFromISR+0x6a>
 800a75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a762:	2b01      	cmp	r3, #1
 800a764:	d101      	bne.n	800a76a <xQueueGenericSendFromISR+0x6e>
 800a766:	2301      	movs	r3, #1
 800a768:	e000      	b.n	800a76c <xQueueGenericSendFromISR+0x70>
 800a76a:	2300      	movs	r3, #0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d10a      	bne.n	800a786 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	623b      	str	r3, [r7, #32]
}
 800a782:	bf00      	nop
 800a784:	e7fe      	b.n	800a784 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a786:	f001 ff27 	bl	800c5d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a78a:	f3ef 8211 	mrs	r2, BASEPRI
 800a78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a792:	f383 8811 	msr	BASEPRI, r3
 800a796:	f3bf 8f6f 	isb	sy
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	61fa      	str	r2, [r7, #28]
 800a7a0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a7a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a7a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d302      	bcc.n	800a7b8 <xQueueGenericSendFromISR+0xbc>
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	2b02      	cmp	r3, #2
 800a7b6:	d12f      	bne.n	800a818 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a7c8:	683a      	ldr	r2, [r7, #0]
 800a7ca:	68b9      	ldr	r1, [r7, #8]
 800a7cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a7ce:	f000 f911 	bl	800a9f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a7d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7da:	d112      	bne.n	800a802 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d016      	beq.n	800a812 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e6:	3324      	adds	r3, #36	; 0x24
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f000 fef7 	bl	800b5dc <xTaskRemoveFromEventList>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d00e      	beq.n	800a812 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d00b      	beq.n	800a812 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	601a      	str	r2, [r3, #0]
 800a800:	e007      	b.n	800a812 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a802:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a806:	3301      	adds	r3, #1
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	b25a      	sxtb	r2, r3
 800a80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a812:	2301      	movs	r3, #1
 800a814:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a816:	e001      	b.n	800a81c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a818:	2300      	movs	r3, #0
 800a81a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a81c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a81e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a826:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3740      	adds	r7, #64	; 0x40
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
	...

0800a834 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b08c      	sub	sp, #48	; 0x30
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a840:	2300      	movs	r3, #0
 800a842:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d10a      	bne.n	800a864 <xQueueReceive+0x30>
	__asm volatile
 800a84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a852:	f383 8811 	msr	BASEPRI, r3
 800a856:	f3bf 8f6f 	isb	sy
 800a85a:	f3bf 8f4f 	dsb	sy
 800a85e:	623b      	str	r3, [r7, #32]
}
 800a860:	bf00      	nop
 800a862:	e7fe      	b.n	800a862 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d103      	bne.n	800a872 <xQueueReceive+0x3e>
 800a86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d101      	bne.n	800a876 <xQueueReceive+0x42>
 800a872:	2301      	movs	r3, #1
 800a874:	e000      	b.n	800a878 <xQueueReceive+0x44>
 800a876:	2300      	movs	r3, #0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d10a      	bne.n	800a892 <xQueueReceive+0x5e>
	__asm volatile
 800a87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a880:	f383 8811 	msr	BASEPRI, r3
 800a884:	f3bf 8f6f 	isb	sy
 800a888:	f3bf 8f4f 	dsb	sy
 800a88c:	61fb      	str	r3, [r7, #28]
}
 800a88e:	bf00      	nop
 800a890:	e7fe      	b.n	800a890 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a892:	f001 f865 	bl	800b960 <xTaskGetSchedulerState>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d102      	bne.n	800a8a2 <xQueueReceive+0x6e>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d101      	bne.n	800a8a6 <xQueueReceive+0x72>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e000      	b.n	800a8a8 <xQueueReceive+0x74>
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d10a      	bne.n	800a8c2 <xQueueReceive+0x8e>
	__asm volatile
 800a8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b0:	f383 8811 	msr	BASEPRI, r3
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	61bb      	str	r3, [r7, #24]
}
 800a8be:	bf00      	nop
 800a8c0:	e7fe      	b.n	800a8c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a8c2:	f001 fda7 	bl	800c414 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d01f      	beq.n	800a912 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a8d2:	68b9      	ldr	r1, [r7, #8]
 800a8d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8d6:	f000 f8f7 	bl	800aac8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8dc:	1e5a      	subs	r2, r3, #1
 800a8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e4:	691b      	ldr	r3, [r3, #16]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d00f      	beq.n	800a90a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ec:	3310      	adds	r3, #16
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f000 fe74 	bl	800b5dc <xTaskRemoveFromEventList>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d007      	beq.n	800a90a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a8fa:	4b3d      	ldr	r3, [pc, #244]	; (800a9f0 <xQueueReceive+0x1bc>)
 800a8fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a900:	601a      	str	r2, [r3, #0]
 800a902:	f3bf 8f4f 	dsb	sy
 800a906:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a90a:	f001 fdb3 	bl	800c474 <vPortExitCritical>
				return pdPASS;
 800a90e:	2301      	movs	r3, #1
 800a910:	e069      	b.n	800a9e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d103      	bne.n	800a920 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a918:	f001 fdac 	bl	800c474 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a91c:	2300      	movs	r3, #0
 800a91e:	e062      	b.n	800a9e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a922:	2b00      	cmp	r3, #0
 800a924:	d106      	bne.n	800a934 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a926:	f107 0310 	add.w	r3, r7, #16
 800a92a:	4618      	mov	r0, r3
 800a92c:	f000 feba 	bl	800b6a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a930:	2301      	movs	r3, #1
 800a932:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a934:	f001 fd9e 	bl	800c474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a938:	f000 fc26 	bl	800b188 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a93c:	f001 fd6a 	bl	800c414 <vPortEnterCritical>
 800a940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a942:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a946:	b25b      	sxtb	r3, r3
 800a948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a94c:	d103      	bne.n	800a956 <xQueueReceive+0x122>
 800a94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a950:	2200      	movs	r2, #0
 800a952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a95c:	b25b      	sxtb	r3, r3
 800a95e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a962:	d103      	bne.n	800a96c <xQueueReceive+0x138>
 800a964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a966:	2200      	movs	r2, #0
 800a968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a96c:	f001 fd82 	bl	800c474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a970:	1d3a      	adds	r2, r7, #4
 800a972:	f107 0310 	add.w	r3, r7, #16
 800a976:	4611      	mov	r1, r2
 800a978:	4618      	mov	r0, r3
 800a97a:	f000 fea9 	bl	800b6d0 <xTaskCheckForTimeOut>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d123      	bne.n	800a9cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a986:	f000 f917 	bl	800abb8 <prvIsQueueEmpty>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d017      	beq.n	800a9c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a992:	3324      	adds	r3, #36	; 0x24
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	4611      	mov	r1, r2
 800a998:	4618      	mov	r0, r3
 800a99a:	f000 fdcf 	bl	800b53c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a99e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9a0:	f000 f8b8 	bl	800ab14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a9a4:	f000 fbfe 	bl	800b1a4 <xTaskResumeAll>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d189      	bne.n	800a8c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a9ae:	4b10      	ldr	r3, [pc, #64]	; (800a9f0 <xQueueReceive+0x1bc>)
 800a9b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9b4:	601a      	str	r2, [r3, #0]
 800a9b6:	f3bf 8f4f 	dsb	sy
 800a9ba:	f3bf 8f6f 	isb	sy
 800a9be:	e780      	b.n	800a8c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a9c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9c2:	f000 f8a7 	bl	800ab14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9c6:	f000 fbed 	bl	800b1a4 <xTaskResumeAll>
 800a9ca:	e77a      	b.n	800a8c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a9cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9ce:	f000 f8a1 	bl	800ab14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9d2:	f000 fbe7 	bl	800b1a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9d8:	f000 f8ee 	bl	800abb8 <prvIsQueueEmpty>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	f43f af6f 	beq.w	800a8c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a9e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3730      	adds	r7, #48	; 0x30
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	e000ed04 	.word	0xe000ed04

0800a9f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b086      	sub	sp, #24
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aa00:	2300      	movs	r3, #0
 800aa02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d10d      	bne.n	800aa2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d14d      	bne.n	800aab6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f000 ffbc 	bl	800b99c <xTaskPriorityDisinherit>
 800aa24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	609a      	str	r2, [r3, #8]
 800aa2c:	e043      	b.n	800aab6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d119      	bne.n	800aa68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6858      	ldr	r0, [r3, #4]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	68b9      	ldr	r1, [r7, #8]
 800aa40:	f002 fe12 	bl	800d668 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	685a      	ldr	r2, [r3, #4]
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4c:	441a      	add	r2, r3
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	685a      	ldr	r2, [r3, #4]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d32b      	bcc.n	800aab6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681a      	ldr	r2, [r3, #0]
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	605a      	str	r2, [r3, #4]
 800aa66:	e026      	b.n	800aab6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	68d8      	ldr	r0, [r3, #12]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa70:	461a      	mov	r2, r3
 800aa72:	68b9      	ldr	r1, [r7, #8]
 800aa74:	f002 fdf8 	bl	800d668 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	68da      	ldr	r2, [r3, #12]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa80:	425b      	negs	r3, r3
 800aa82:	441a      	add	r2, r3
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	68da      	ldr	r2, [r3, #12]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d207      	bcs.n	800aaa4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	689a      	ldr	r2, [r3, #8]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9c:	425b      	negs	r3, r3
 800aa9e:	441a      	add	r2, r3
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	d105      	bne.n	800aab6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d002      	beq.n	800aab6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	3b01      	subs	r3, #1
 800aab4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	1c5a      	adds	r2, r3, #1
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aabe:	697b      	ldr	r3, [r7, #20]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3718      	adds	r7, #24
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d018      	beq.n	800ab0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	68da      	ldr	r2, [r3, #12]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae2:	441a      	add	r2, r3
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	68da      	ldr	r2, [r3, #12]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d303      	bcc.n	800aafc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	68d9      	ldr	r1, [r3, #12]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab04:	461a      	mov	r2, r3
 800ab06:	6838      	ldr	r0, [r7, #0]
 800ab08:	f002 fdae 	bl	800d668 <memcpy>
	}
}
 800ab0c:	bf00      	nop
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ab1c:	f001 fc7a 	bl	800c414 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab28:	e011      	b.n	800ab4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d012      	beq.n	800ab58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	3324      	adds	r3, #36	; 0x24
 800ab36:	4618      	mov	r0, r3
 800ab38:	f000 fd50 	bl	800b5dc <xTaskRemoveFromEventList>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d001      	beq.n	800ab46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ab42:	f000 fe27 	bl	800b794 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ab46:	7bfb      	ldrb	r3, [r7, #15]
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	b2db      	uxtb	r3, r3
 800ab4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	dce9      	bgt.n	800ab2a <prvUnlockQueue+0x16>
 800ab56:	e000      	b.n	800ab5a <prvUnlockQueue+0x46>
					break;
 800ab58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	22ff      	movs	r2, #255	; 0xff
 800ab5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ab62:	f001 fc87 	bl	800c474 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ab66:	f001 fc55 	bl	800c414 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab72:	e011      	b.n	800ab98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d012      	beq.n	800aba2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	3310      	adds	r3, #16
 800ab80:	4618      	mov	r0, r3
 800ab82:	f000 fd2b 	bl	800b5dc <xTaskRemoveFromEventList>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d001      	beq.n	800ab90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ab8c:	f000 fe02 	bl	800b794 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ab90:	7bbb      	ldrb	r3, [r7, #14]
 800ab92:	3b01      	subs	r3, #1
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	dce9      	bgt.n	800ab74 <prvUnlockQueue+0x60>
 800aba0:	e000      	b.n	800aba4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aba2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	22ff      	movs	r2, #255	; 0xff
 800aba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800abac:	f001 fc62 	bl	800c474 <vPortExitCritical>
}
 800abb0:	bf00      	nop
 800abb2:	3710      	adds	r7, #16
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800abc0:	f001 fc28 	bl	800c414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d102      	bne.n	800abd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800abcc:	2301      	movs	r3, #1
 800abce:	60fb      	str	r3, [r7, #12]
 800abd0:	e001      	b.n	800abd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800abd2:	2300      	movs	r3, #0
 800abd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800abd6:	f001 fc4d 	bl	800c474 <vPortExitCritical>

	return xReturn;
 800abda:	68fb      	ldr	r3, [r7, #12]
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3710      	adds	r7, #16
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800abec:	f001 fc12 	bl	800c414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d102      	bne.n	800ac02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800abfc:	2301      	movs	r3, #1
 800abfe:	60fb      	str	r3, [r7, #12]
 800ac00:	e001      	b.n	800ac06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ac02:	2300      	movs	r3, #0
 800ac04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac06:	f001 fc35 	bl	800c474 <vPortExitCritical>

	return xReturn;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ac14:	b480      	push	{r7}
 800ac16:	b085      	sub	sp, #20
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac1e:	2300      	movs	r3, #0
 800ac20:	60fb      	str	r3, [r7, #12]
 800ac22:	e014      	b.n	800ac4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ac24:	4a0f      	ldr	r2, [pc, #60]	; (800ac64 <vQueueAddToRegistry+0x50>)
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d10b      	bne.n	800ac48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ac30:	490c      	ldr	r1, [pc, #48]	; (800ac64 <vQueueAddToRegistry+0x50>)
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	683a      	ldr	r2, [r7, #0]
 800ac36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ac3a:	4a0a      	ldr	r2, [pc, #40]	; (800ac64 <vQueueAddToRegistry+0x50>)
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	00db      	lsls	r3, r3, #3
 800ac40:	4413      	add	r3, r2
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ac46:	e006      	b.n	800ac56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	60fb      	str	r3, [r7, #12]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2b07      	cmp	r3, #7
 800ac52:	d9e7      	bls.n	800ac24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ac54:	bf00      	nop
 800ac56:	bf00      	nop
 800ac58:	3714      	adds	r7, #20
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	20000ae8 	.word	0x20000ae8

0800ac68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b086      	sub	sp, #24
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ac78:	f001 fbcc 	bl	800c414 <vPortEnterCritical>
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac82:	b25b      	sxtb	r3, r3
 800ac84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac88:	d103      	bne.n	800ac92 <vQueueWaitForMessageRestricted+0x2a>
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac98:	b25b      	sxtb	r3, r3
 800ac9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac9e:	d103      	bne.n	800aca8 <vQueueWaitForMessageRestricted+0x40>
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aca8:	f001 fbe4 	bl	800c474 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d106      	bne.n	800acc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	3324      	adds	r3, #36	; 0x24
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	68b9      	ldr	r1, [r7, #8]
 800acbc:	4618      	mov	r0, r3
 800acbe:	f000 fc61 	bl	800b584 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800acc2:	6978      	ldr	r0, [r7, #20]
 800acc4:	f7ff ff26 	bl	800ab14 <prvUnlockQueue>
	}
 800acc8:	bf00      	nop
 800acca:	3718      	adds	r7, #24
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b08e      	sub	sp, #56	; 0x38
 800acd4:	af04      	add	r7, sp, #16
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]
 800acdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800acde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d10a      	bne.n	800acfa <xTaskCreateStatic+0x2a>
	__asm volatile
 800ace4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace8:	f383 8811 	msr	BASEPRI, r3
 800acec:	f3bf 8f6f 	isb	sy
 800acf0:	f3bf 8f4f 	dsb	sy
 800acf4:	623b      	str	r3, [r7, #32]
}
 800acf6:	bf00      	nop
 800acf8:	e7fe      	b.n	800acf8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800acfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d10a      	bne.n	800ad16 <xTaskCreateStatic+0x46>
	__asm volatile
 800ad00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad04:	f383 8811 	msr	BASEPRI, r3
 800ad08:	f3bf 8f6f 	isb	sy
 800ad0c:	f3bf 8f4f 	dsb	sy
 800ad10:	61fb      	str	r3, [r7, #28]
}
 800ad12:	bf00      	nop
 800ad14:	e7fe      	b.n	800ad14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ad16:	23bc      	movs	r3, #188	; 0xbc
 800ad18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	2bbc      	cmp	r3, #188	; 0xbc
 800ad1e:	d00a      	beq.n	800ad36 <xTaskCreateStatic+0x66>
	__asm volatile
 800ad20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad24:	f383 8811 	msr	BASEPRI, r3
 800ad28:	f3bf 8f6f 	isb	sy
 800ad2c:	f3bf 8f4f 	dsb	sy
 800ad30:	61bb      	str	r3, [r7, #24]
}
 800ad32:	bf00      	nop
 800ad34:	e7fe      	b.n	800ad34 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ad36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ad38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d01e      	beq.n	800ad7c <xTaskCreateStatic+0xac>
 800ad3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d01b      	beq.n	800ad7c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ad48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad50:	2202      	movs	r2, #2
 800ad52:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad56:	2300      	movs	r3, #0
 800ad58:	9303      	str	r3, [sp, #12]
 800ad5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5c:	9302      	str	r3, [sp, #8]
 800ad5e:	f107 0314 	add.w	r3, r7, #20
 800ad62:	9301      	str	r3, [sp, #4]
 800ad64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad66:	9300      	str	r3, [sp, #0]
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	68b9      	ldr	r1, [r7, #8]
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	f000 f850 	bl	800ae14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad76:	f000 f8f3 	bl	800af60 <prvAddNewTaskToReadyList>
 800ad7a:	e001      	b.n	800ad80 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ad80:	697b      	ldr	r3, [r7, #20]
	}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3728      	adds	r7, #40	; 0x28
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b08c      	sub	sp, #48	; 0x30
 800ad8e:	af04      	add	r7, sp, #16
 800ad90:	60f8      	str	r0, [r7, #12]
 800ad92:	60b9      	str	r1, [r7, #8]
 800ad94:	603b      	str	r3, [r7, #0]
 800ad96:	4613      	mov	r3, r2
 800ad98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ad9a:	88fb      	ldrh	r3, [r7, #6]
 800ad9c:	009b      	lsls	r3, r3, #2
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f001 fc5a 	bl	800c658 <pvPortMalloc>
 800ada4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00e      	beq.n	800adca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800adac:	20bc      	movs	r0, #188	; 0xbc
 800adae:	f001 fc53 	bl	800c658 <pvPortMalloc>
 800adb2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d003      	beq.n	800adc2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	697a      	ldr	r2, [r7, #20]
 800adbe:	631a      	str	r2, [r3, #48]	; 0x30
 800adc0:	e005      	b.n	800adce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800adc2:	6978      	ldr	r0, [r7, #20]
 800adc4:	f001 fd14 	bl	800c7f0 <vPortFree>
 800adc8:	e001      	b.n	800adce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800adca:	2300      	movs	r3, #0
 800adcc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800adce:	69fb      	ldr	r3, [r7, #28]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d017      	beq.n	800ae04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800add4:	69fb      	ldr	r3, [r7, #28]
 800add6:	2200      	movs	r2, #0
 800add8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800addc:	88fa      	ldrh	r2, [r7, #6]
 800adde:	2300      	movs	r3, #0
 800ade0:	9303      	str	r3, [sp, #12]
 800ade2:	69fb      	ldr	r3, [r7, #28]
 800ade4:	9302      	str	r3, [sp, #8]
 800ade6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade8:	9301      	str	r3, [sp, #4]
 800adea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adec:	9300      	str	r3, [sp, #0]
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	68b9      	ldr	r1, [r7, #8]
 800adf2:	68f8      	ldr	r0, [r7, #12]
 800adf4:	f000 f80e 	bl	800ae14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800adf8:	69f8      	ldr	r0, [r7, #28]
 800adfa:	f000 f8b1 	bl	800af60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800adfe:	2301      	movs	r3, #1
 800ae00:	61bb      	str	r3, [r7, #24]
 800ae02:	e002      	b.n	800ae0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ae04:	f04f 33ff 	mov.w	r3, #4294967295
 800ae08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ae0a:	69bb      	ldr	r3, [r7, #24]
	}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3720      	adds	r7, #32
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b088      	sub	sp, #32
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
 800ae20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ae22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	21a5      	movs	r1, #165	; 0xa5
 800ae2e:	f002 fc29 	bl	800d684 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ae32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ae3c:	3b01      	subs	r3, #1
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	4413      	add	r3, r2
 800ae42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ae44:	69bb      	ldr	r3, [r7, #24]
 800ae46:	f023 0307 	bic.w	r3, r3, #7
 800ae4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ae4c:	69bb      	ldr	r3, [r7, #24]
 800ae4e:	f003 0307 	and.w	r3, r3, #7
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d00a      	beq.n	800ae6c <prvInitialiseNewTask+0x58>
	__asm volatile
 800ae56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae5a:	f383 8811 	msr	BASEPRI, r3
 800ae5e:	f3bf 8f6f 	isb	sy
 800ae62:	f3bf 8f4f 	dsb	sy
 800ae66:	617b      	str	r3, [r7, #20]
}
 800ae68:	bf00      	nop
 800ae6a:	e7fe      	b.n	800ae6a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d01f      	beq.n	800aeb2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae72:	2300      	movs	r3, #0
 800ae74:	61fb      	str	r3, [r7, #28]
 800ae76:	e012      	b.n	800ae9e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae78:	68ba      	ldr	r2, [r7, #8]
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	7819      	ldrb	r1, [r3, #0]
 800ae80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	4413      	add	r3, r2
 800ae86:	3334      	adds	r3, #52	; 0x34
 800ae88:	460a      	mov	r2, r1
 800ae8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ae8c:	68ba      	ldr	r2, [r7, #8]
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	4413      	add	r3, r2
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d006      	beq.n	800aea6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	61fb      	str	r3, [r7, #28]
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	2b0f      	cmp	r3, #15
 800aea2:	d9e9      	bls.n	800ae78 <prvInitialiseNewTask+0x64>
 800aea4:	e000      	b.n	800aea8 <prvInitialiseNewTask+0x94>
			{
				break;
 800aea6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aeb0:	e003      	b.n	800aeba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aeba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aebc:	2b37      	cmp	r3, #55	; 0x37
 800aebe:	d901      	bls.n	800aec4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aec0:	2337      	movs	r3, #55	; 0x37
 800aec2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aec8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aece:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed2:	2200      	movs	r2, #0
 800aed4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed8:	3304      	adds	r3, #4
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7ff f978 	bl	800a1d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee2:	3318      	adds	r3, #24
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7ff f973 	bl	800a1d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aeea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aefe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af02:	2200      	movs	r2, #0
 800af04:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0a:	2200      	movs	r2, #0
 800af0c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800af10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af12:	3354      	adds	r3, #84	; 0x54
 800af14:	2260      	movs	r2, #96	; 0x60
 800af16:	2100      	movs	r1, #0
 800af18:	4618      	mov	r0, r3
 800af1a:	f002 fbb3 	bl	800d684 <memset>
 800af1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af20:	4a0c      	ldr	r2, [pc, #48]	; (800af54 <prvInitialiseNewTask+0x140>)
 800af22:	659a      	str	r2, [r3, #88]	; 0x58
 800af24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af26:	4a0c      	ldr	r2, [pc, #48]	; (800af58 <prvInitialiseNewTask+0x144>)
 800af28:	65da      	str	r2, [r3, #92]	; 0x5c
 800af2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2c:	4a0b      	ldr	r2, [pc, #44]	; (800af5c <prvInitialiseNewTask+0x148>)
 800af2e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800af30:	683a      	ldr	r2, [r7, #0]
 800af32:	68f9      	ldr	r1, [r7, #12]
 800af34:	69b8      	ldr	r0, [r7, #24]
 800af36:	f001 f941 	bl	800c1bc <pxPortInitialiseStack>
 800af3a:	4602      	mov	r2, r0
 800af3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800af40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af42:	2b00      	cmp	r3, #0
 800af44:	d002      	beq.n	800af4c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800af46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af4c:	bf00      	nop
 800af4e:	3720      	adds	r7, #32
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	080137e0 	.word	0x080137e0
 800af58:	08013800 	.word	0x08013800
 800af5c:	080137c0 	.word	0x080137c0

0800af60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800af68:	f001 fa54 	bl	800c414 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800af6c:	4b2d      	ldr	r3, [pc, #180]	; (800b024 <prvAddNewTaskToReadyList+0xc4>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	3301      	adds	r3, #1
 800af72:	4a2c      	ldr	r2, [pc, #176]	; (800b024 <prvAddNewTaskToReadyList+0xc4>)
 800af74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800af76:	4b2c      	ldr	r3, [pc, #176]	; (800b028 <prvAddNewTaskToReadyList+0xc8>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d109      	bne.n	800af92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800af7e:	4a2a      	ldr	r2, [pc, #168]	; (800b028 <prvAddNewTaskToReadyList+0xc8>)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800af84:	4b27      	ldr	r3, [pc, #156]	; (800b024 <prvAddNewTaskToReadyList+0xc4>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d110      	bne.n	800afae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800af8c:	f000 fc26 	bl	800b7dc <prvInitialiseTaskLists>
 800af90:	e00d      	b.n	800afae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800af92:	4b26      	ldr	r3, [pc, #152]	; (800b02c <prvAddNewTaskToReadyList+0xcc>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d109      	bne.n	800afae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800af9a:	4b23      	ldr	r3, [pc, #140]	; (800b028 <prvAddNewTaskToReadyList+0xc8>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d802      	bhi.n	800afae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800afa8:	4a1f      	ldr	r2, [pc, #124]	; (800b028 <prvAddNewTaskToReadyList+0xc8>)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800afae:	4b20      	ldr	r3, [pc, #128]	; (800b030 <prvAddNewTaskToReadyList+0xd0>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	3301      	adds	r3, #1
 800afb4:	4a1e      	ldr	r2, [pc, #120]	; (800b030 <prvAddNewTaskToReadyList+0xd0>)
 800afb6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800afb8:	4b1d      	ldr	r3, [pc, #116]	; (800b030 <prvAddNewTaskToReadyList+0xd0>)
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afc4:	4b1b      	ldr	r3, [pc, #108]	; (800b034 <prvAddNewTaskToReadyList+0xd4>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d903      	bls.n	800afd4 <prvAddNewTaskToReadyList+0x74>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd0:	4a18      	ldr	r2, [pc, #96]	; (800b034 <prvAddNewTaskToReadyList+0xd4>)
 800afd2:	6013      	str	r3, [r2, #0]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afd8:	4613      	mov	r3, r2
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	4413      	add	r3, r2
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	4a15      	ldr	r2, [pc, #84]	; (800b038 <prvAddNewTaskToReadyList+0xd8>)
 800afe2:	441a      	add	r2, r3
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	3304      	adds	r3, #4
 800afe8:	4619      	mov	r1, r3
 800afea:	4610      	mov	r0, r2
 800afec:	f7ff f8fd 	bl	800a1ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aff0:	f001 fa40 	bl	800c474 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aff4:	4b0d      	ldr	r3, [pc, #52]	; (800b02c <prvAddNewTaskToReadyList+0xcc>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00e      	beq.n	800b01a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800affc:	4b0a      	ldr	r3, [pc, #40]	; (800b028 <prvAddNewTaskToReadyList+0xc8>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b006:	429a      	cmp	r2, r3
 800b008:	d207      	bcs.n	800b01a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b00a:	4b0c      	ldr	r3, [pc, #48]	; (800b03c <prvAddNewTaskToReadyList+0xdc>)
 800b00c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b010:	601a      	str	r2, [r3, #0]
 800b012:	f3bf 8f4f 	dsb	sy
 800b016:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b01a:	bf00      	nop
 800b01c:	3708      	adds	r7, #8
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	20000ffc 	.word	0x20000ffc
 800b028:	20000b28 	.word	0x20000b28
 800b02c:	20001008 	.word	0x20001008
 800b030:	20001018 	.word	0x20001018
 800b034:	20001004 	.word	0x20001004
 800b038:	20000b2c 	.word	0x20000b2c
 800b03c:	e000ed04 	.word	0xe000ed04

0800b040 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b048:	2300      	movs	r3, #0
 800b04a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d017      	beq.n	800b082 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b052:	4b13      	ldr	r3, [pc, #76]	; (800b0a0 <vTaskDelay+0x60>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00a      	beq.n	800b070 <vTaskDelay+0x30>
	__asm volatile
 800b05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05e:	f383 8811 	msr	BASEPRI, r3
 800b062:	f3bf 8f6f 	isb	sy
 800b066:	f3bf 8f4f 	dsb	sy
 800b06a:	60bb      	str	r3, [r7, #8]
}
 800b06c:	bf00      	nop
 800b06e:	e7fe      	b.n	800b06e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b070:	f000 f88a 	bl	800b188 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b074:	2100      	movs	r1, #0
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 fcfe 	bl	800ba78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b07c:	f000 f892 	bl	800b1a4 <xTaskResumeAll>
 800b080:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d107      	bne.n	800b098 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b088:	4b06      	ldr	r3, [pc, #24]	; (800b0a4 <vTaskDelay+0x64>)
 800b08a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b08e:	601a      	str	r2, [r3, #0]
 800b090:	f3bf 8f4f 	dsb	sy
 800b094:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b098:	bf00      	nop
 800b09a:	3710      	adds	r7, #16
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	20001024 	.word	0x20001024
 800b0a4:	e000ed04 	.word	0xe000ed04

0800b0a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b08a      	sub	sp, #40	; 0x28
 800b0ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b0b6:	463a      	mov	r2, r7
 800b0b8:	1d39      	adds	r1, r7, #4
 800b0ba:	f107 0308 	add.w	r3, r7, #8
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7ff f832 	bl	800a128 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b0c4:	6839      	ldr	r1, [r7, #0]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	68ba      	ldr	r2, [r7, #8]
 800b0ca:	9202      	str	r2, [sp, #8]
 800b0cc:	9301      	str	r3, [sp, #4]
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	9300      	str	r3, [sp, #0]
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	460a      	mov	r2, r1
 800b0d6:	4924      	ldr	r1, [pc, #144]	; (800b168 <vTaskStartScheduler+0xc0>)
 800b0d8:	4824      	ldr	r0, [pc, #144]	; (800b16c <vTaskStartScheduler+0xc4>)
 800b0da:	f7ff fdf9 	bl	800acd0 <xTaskCreateStatic>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	4a23      	ldr	r2, [pc, #140]	; (800b170 <vTaskStartScheduler+0xc8>)
 800b0e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b0e4:	4b22      	ldr	r3, [pc, #136]	; (800b170 <vTaskStartScheduler+0xc8>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d002      	beq.n	800b0f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	617b      	str	r3, [r7, #20]
 800b0f0:	e001      	b.n	800b0f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d102      	bne.n	800b102 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b0fc:	f000 fd10 	bl	800bb20 <xTimerCreateTimerTask>
 800b100:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	2b01      	cmp	r3, #1
 800b106:	d11b      	bne.n	800b140 <vTaskStartScheduler+0x98>
	__asm volatile
 800b108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10c:	f383 8811 	msr	BASEPRI, r3
 800b110:	f3bf 8f6f 	isb	sy
 800b114:	f3bf 8f4f 	dsb	sy
 800b118:	613b      	str	r3, [r7, #16]
}
 800b11a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b11c:	4b15      	ldr	r3, [pc, #84]	; (800b174 <vTaskStartScheduler+0xcc>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	3354      	adds	r3, #84	; 0x54
 800b122:	4a15      	ldr	r2, [pc, #84]	; (800b178 <vTaskStartScheduler+0xd0>)
 800b124:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b126:	4b15      	ldr	r3, [pc, #84]	; (800b17c <vTaskStartScheduler+0xd4>)
 800b128:	f04f 32ff 	mov.w	r2, #4294967295
 800b12c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b12e:	4b14      	ldr	r3, [pc, #80]	; (800b180 <vTaskStartScheduler+0xd8>)
 800b130:	2201      	movs	r2, #1
 800b132:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b134:	4b13      	ldr	r3, [pc, #76]	; (800b184 <vTaskStartScheduler+0xdc>)
 800b136:	2200      	movs	r2, #0
 800b138:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b13a:	f001 f8c9 	bl	800c2d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b13e:	e00e      	b.n	800b15e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b146:	d10a      	bne.n	800b15e <vTaskStartScheduler+0xb6>
	__asm volatile
 800b148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14c:	f383 8811 	msr	BASEPRI, r3
 800b150:	f3bf 8f6f 	isb	sy
 800b154:	f3bf 8f4f 	dsb	sy
 800b158:	60fb      	str	r3, [r7, #12]
}
 800b15a:	bf00      	nop
 800b15c:	e7fe      	b.n	800b15c <vTaskStartScheduler+0xb4>
}
 800b15e:	bf00      	nop
 800b160:	3718      	adds	r7, #24
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop
 800b168:	0800ea6c 	.word	0x0800ea6c
 800b16c:	0800b7ad 	.word	0x0800b7ad
 800b170:	20001020 	.word	0x20001020
 800b174:	20000b28 	.word	0x20000b28
 800b178:	20000128 	.word	0x20000128
 800b17c:	2000101c 	.word	0x2000101c
 800b180:	20001008 	.word	0x20001008
 800b184:	20001000 	.word	0x20001000

0800b188 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b188:	b480      	push	{r7}
 800b18a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b18c:	4b04      	ldr	r3, [pc, #16]	; (800b1a0 <vTaskSuspendAll+0x18>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	3301      	adds	r3, #1
 800b192:	4a03      	ldr	r2, [pc, #12]	; (800b1a0 <vTaskSuspendAll+0x18>)
 800b194:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b196:	bf00      	nop
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr
 800b1a0:	20001024 	.word	0x20001024

0800b1a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b1b2:	4b42      	ldr	r3, [pc, #264]	; (800b2bc <xTaskResumeAll+0x118>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d10a      	bne.n	800b1d0 <xTaskResumeAll+0x2c>
	__asm volatile
 800b1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1be:	f383 8811 	msr	BASEPRI, r3
 800b1c2:	f3bf 8f6f 	isb	sy
 800b1c6:	f3bf 8f4f 	dsb	sy
 800b1ca:	603b      	str	r3, [r7, #0]
}
 800b1cc:	bf00      	nop
 800b1ce:	e7fe      	b.n	800b1ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b1d0:	f001 f920 	bl	800c414 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b1d4:	4b39      	ldr	r3, [pc, #228]	; (800b2bc <xTaskResumeAll+0x118>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	3b01      	subs	r3, #1
 800b1da:	4a38      	ldr	r2, [pc, #224]	; (800b2bc <xTaskResumeAll+0x118>)
 800b1dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1de:	4b37      	ldr	r3, [pc, #220]	; (800b2bc <xTaskResumeAll+0x118>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d162      	bne.n	800b2ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b1e6:	4b36      	ldr	r3, [pc, #216]	; (800b2c0 <xTaskResumeAll+0x11c>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d05e      	beq.n	800b2ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1ee:	e02f      	b.n	800b250 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1f0:	4b34      	ldr	r3, [pc, #208]	; (800b2c4 <xTaskResumeAll+0x120>)
 800b1f2:	68db      	ldr	r3, [r3, #12]
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	3318      	adds	r3, #24
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7ff f851 	bl	800a2a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	3304      	adds	r3, #4
 800b206:	4618      	mov	r0, r3
 800b208:	f7ff f84c 	bl	800a2a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b210:	4b2d      	ldr	r3, [pc, #180]	; (800b2c8 <xTaskResumeAll+0x124>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	429a      	cmp	r2, r3
 800b216:	d903      	bls.n	800b220 <xTaskResumeAll+0x7c>
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b21c:	4a2a      	ldr	r2, [pc, #168]	; (800b2c8 <xTaskResumeAll+0x124>)
 800b21e:	6013      	str	r3, [r2, #0]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b224:	4613      	mov	r3, r2
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	4413      	add	r3, r2
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	4a27      	ldr	r2, [pc, #156]	; (800b2cc <xTaskResumeAll+0x128>)
 800b22e:	441a      	add	r2, r3
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	3304      	adds	r3, #4
 800b234:	4619      	mov	r1, r3
 800b236:	4610      	mov	r0, r2
 800b238:	f7fe ffd7 	bl	800a1ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b240:	4b23      	ldr	r3, [pc, #140]	; (800b2d0 <xTaskResumeAll+0x12c>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b246:	429a      	cmp	r2, r3
 800b248:	d302      	bcc.n	800b250 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b24a:	4b22      	ldr	r3, [pc, #136]	; (800b2d4 <xTaskResumeAll+0x130>)
 800b24c:	2201      	movs	r2, #1
 800b24e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b250:	4b1c      	ldr	r3, [pc, #112]	; (800b2c4 <xTaskResumeAll+0x120>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d1cb      	bne.n	800b1f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d001      	beq.n	800b262 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b25e:	f000 fb5f 	bl	800b920 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b262:	4b1d      	ldr	r3, [pc, #116]	; (800b2d8 <xTaskResumeAll+0x134>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d010      	beq.n	800b290 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b26e:	f000 f847 	bl	800b300 <xTaskIncrementTick>
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d002      	beq.n	800b27e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b278:	4b16      	ldr	r3, [pc, #88]	; (800b2d4 <xTaskResumeAll+0x130>)
 800b27a:	2201      	movs	r2, #1
 800b27c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	3b01      	subs	r3, #1
 800b282:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d1f1      	bne.n	800b26e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b28a:	4b13      	ldr	r3, [pc, #76]	; (800b2d8 <xTaskResumeAll+0x134>)
 800b28c:	2200      	movs	r2, #0
 800b28e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b290:	4b10      	ldr	r3, [pc, #64]	; (800b2d4 <xTaskResumeAll+0x130>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d009      	beq.n	800b2ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b298:	2301      	movs	r3, #1
 800b29a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b29c:	4b0f      	ldr	r3, [pc, #60]	; (800b2dc <xTaskResumeAll+0x138>)
 800b29e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2a2:	601a      	str	r2, [r3, #0]
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2ac:	f001 f8e2 	bl	800c474 <vPortExitCritical>

	return xAlreadyYielded;
 800b2b0:	68bb      	ldr	r3, [r7, #8]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3710      	adds	r7, #16
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	20001024 	.word	0x20001024
 800b2c0:	20000ffc 	.word	0x20000ffc
 800b2c4:	20000fbc 	.word	0x20000fbc
 800b2c8:	20001004 	.word	0x20001004
 800b2cc:	20000b2c 	.word	0x20000b2c
 800b2d0:	20000b28 	.word	0x20000b28
 800b2d4:	20001010 	.word	0x20001010
 800b2d8:	2000100c 	.word	0x2000100c
 800b2dc:	e000ed04 	.word	0xe000ed04

0800b2e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b2e6:	4b05      	ldr	r3, [pc, #20]	; (800b2fc <xTaskGetTickCount+0x1c>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b2ec:	687b      	ldr	r3, [r7, #4]
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	370c      	adds	r7, #12
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	20001000 	.word	0x20001000

0800b300 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b086      	sub	sp, #24
 800b304:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b306:	2300      	movs	r3, #0
 800b308:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b30a:	4b4f      	ldr	r3, [pc, #316]	; (800b448 <xTaskIncrementTick+0x148>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	f040 808f 	bne.w	800b432 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b314:	4b4d      	ldr	r3, [pc, #308]	; (800b44c <xTaskIncrementTick+0x14c>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	3301      	adds	r3, #1
 800b31a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b31c:	4a4b      	ldr	r2, [pc, #300]	; (800b44c <xTaskIncrementTick+0x14c>)
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d120      	bne.n	800b36a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b328:	4b49      	ldr	r3, [pc, #292]	; (800b450 <xTaskIncrementTick+0x150>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d00a      	beq.n	800b348 <xTaskIncrementTick+0x48>
	__asm volatile
 800b332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b336:	f383 8811 	msr	BASEPRI, r3
 800b33a:	f3bf 8f6f 	isb	sy
 800b33e:	f3bf 8f4f 	dsb	sy
 800b342:	603b      	str	r3, [r7, #0]
}
 800b344:	bf00      	nop
 800b346:	e7fe      	b.n	800b346 <xTaskIncrementTick+0x46>
 800b348:	4b41      	ldr	r3, [pc, #260]	; (800b450 <xTaskIncrementTick+0x150>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	60fb      	str	r3, [r7, #12]
 800b34e:	4b41      	ldr	r3, [pc, #260]	; (800b454 <xTaskIncrementTick+0x154>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4a3f      	ldr	r2, [pc, #252]	; (800b450 <xTaskIncrementTick+0x150>)
 800b354:	6013      	str	r3, [r2, #0]
 800b356:	4a3f      	ldr	r2, [pc, #252]	; (800b454 <xTaskIncrementTick+0x154>)
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	6013      	str	r3, [r2, #0]
 800b35c:	4b3e      	ldr	r3, [pc, #248]	; (800b458 <xTaskIncrementTick+0x158>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	3301      	adds	r3, #1
 800b362:	4a3d      	ldr	r2, [pc, #244]	; (800b458 <xTaskIncrementTick+0x158>)
 800b364:	6013      	str	r3, [r2, #0]
 800b366:	f000 fadb 	bl	800b920 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b36a:	4b3c      	ldr	r3, [pc, #240]	; (800b45c <xTaskIncrementTick+0x15c>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	693a      	ldr	r2, [r7, #16]
 800b370:	429a      	cmp	r2, r3
 800b372:	d349      	bcc.n	800b408 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b374:	4b36      	ldr	r3, [pc, #216]	; (800b450 <xTaskIncrementTick+0x150>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d104      	bne.n	800b388 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b37e:	4b37      	ldr	r3, [pc, #220]	; (800b45c <xTaskIncrementTick+0x15c>)
 800b380:	f04f 32ff 	mov.w	r2, #4294967295
 800b384:	601a      	str	r2, [r3, #0]
					break;
 800b386:	e03f      	b.n	800b408 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b388:	4b31      	ldr	r3, [pc, #196]	; (800b450 <xTaskIncrementTick+0x150>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b398:	693a      	ldr	r2, [r7, #16]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d203      	bcs.n	800b3a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b3a0:	4a2e      	ldr	r2, [pc, #184]	; (800b45c <xTaskIncrementTick+0x15c>)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b3a6:	e02f      	b.n	800b408 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	3304      	adds	r3, #4
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f7fe ff79 	bl	800a2a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d004      	beq.n	800b3c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	3318      	adds	r3, #24
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7fe ff70 	bl	800a2a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3c8:	4b25      	ldr	r3, [pc, #148]	; (800b460 <xTaskIncrementTick+0x160>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d903      	bls.n	800b3d8 <xTaskIncrementTick+0xd8>
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d4:	4a22      	ldr	r2, [pc, #136]	; (800b460 <xTaskIncrementTick+0x160>)
 800b3d6:	6013      	str	r3, [r2, #0]
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3dc:	4613      	mov	r3, r2
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	4413      	add	r3, r2
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	4a1f      	ldr	r2, [pc, #124]	; (800b464 <xTaskIncrementTick+0x164>)
 800b3e6:	441a      	add	r2, r3
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	3304      	adds	r3, #4
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	4610      	mov	r0, r2
 800b3f0:	f7fe fefb 	bl	800a1ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f8:	4b1b      	ldr	r3, [pc, #108]	; (800b468 <xTaskIncrementTick+0x168>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d3b8      	bcc.n	800b374 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b402:	2301      	movs	r3, #1
 800b404:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b406:	e7b5      	b.n	800b374 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b408:	4b17      	ldr	r3, [pc, #92]	; (800b468 <xTaskIncrementTick+0x168>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b40e:	4915      	ldr	r1, [pc, #84]	; (800b464 <xTaskIncrementTick+0x164>)
 800b410:	4613      	mov	r3, r2
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	4413      	add	r3, r2
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	440b      	add	r3, r1
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d901      	bls.n	800b424 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b420:	2301      	movs	r3, #1
 800b422:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b424:	4b11      	ldr	r3, [pc, #68]	; (800b46c <xTaskIncrementTick+0x16c>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d007      	beq.n	800b43c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b42c:	2301      	movs	r3, #1
 800b42e:	617b      	str	r3, [r7, #20]
 800b430:	e004      	b.n	800b43c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b432:	4b0f      	ldr	r3, [pc, #60]	; (800b470 <xTaskIncrementTick+0x170>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	3301      	adds	r3, #1
 800b438:	4a0d      	ldr	r2, [pc, #52]	; (800b470 <xTaskIncrementTick+0x170>)
 800b43a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b43c:	697b      	ldr	r3, [r7, #20]
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3718      	adds	r7, #24
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	20001024 	.word	0x20001024
 800b44c:	20001000 	.word	0x20001000
 800b450:	20000fb4 	.word	0x20000fb4
 800b454:	20000fb8 	.word	0x20000fb8
 800b458:	20001014 	.word	0x20001014
 800b45c:	2000101c 	.word	0x2000101c
 800b460:	20001004 	.word	0x20001004
 800b464:	20000b2c 	.word	0x20000b2c
 800b468:	20000b28 	.word	0x20000b28
 800b46c:	20001010 	.word	0x20001010
 800b470:	2000100c 	.word	0x2000100c

0800b474 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b474:	b480      	push	{r7}
 800b476:	b085      	sub	sp, #20
 800b478:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b47a:	4b2a      	ldr	r3, [pc, #168]	; (800b524 <vTaskSwitchContext+0xb0>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d003      	beq.n	800b48a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b482:	4b29      	ldr	r3, [pc, #164]	; (800b528 <vTaskSwitchContext+0xb4>)
 800b484:	2201      	movs	r2, #1
 800b486:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b488:	e046      	b.n	800b518 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b48a:	4b27      	ldr	r3, [pc, #156]	; (800b528 <vTaskSwitchContext+0xb4>)
 800b48c:	2200      	movs	r2, #0
 800b48e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b490:	4b26      	ldr	r3, [pc, #152]	; (800b52c <vTaskSwitchContext+0xb8>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	60fb      	str	r3, [r7, #12]
 800b496:	e010      	b.n	800b4ba <vTaskSwitchContext+0x46>
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d10a      	bne.n	800b4b4 <vTaskSwitchContext+0x40>
	__asm volatile
 800b49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a2:	f383 8811 	msr	BASEPRI, r3
 800b4a6:	f3bf 8f6f 	isb	sy
 800b4aa:	f3bf 8f4f 	dsb	sy
 800b4ae:	607b      	str	r3, [r7, #4]
}
 800b4b0:	bf00      	nop
 800b4b2:	e7fe      	b.n	800b4b2 <vTaskSwitchContext+0x3e>
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	60fb      	str	r3, [r7, #12]
 800b4ba:	491d      	ldr	r1, [pc, #116]	; (800b530 <vTaskSwitchContext+0xbc>)
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	4613      	mov	r3, r2
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	4413      	add	r3, r2
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	440b      	add	r3, r1
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d0e4      	beq.n	800b498 <vTaskSwitchContext+0x24>
 800b4ce:	68fa      	ldr	r2, [r7, #12]
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	4413      	add	r3, r2
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	4a15      	ldr	r2, [pc, #84]	; (800b530 <vTaskSwitchContext+0xbc>)
 800b4da:	4413      	add	r3, r2
 800b4dc:	60bb      	str	r3, [r7, #8]
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	685a      	ldr	r2, [r3, #4]
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	605a      	str	r2, [r3, #4]
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	685a      	ldr	r2, [r3, #4]
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	3308      	adds	r3, #8
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d104      	bne.n	800b4fe <vTaskSwitchContext+0x8a>
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	685a      	ldr	r2, [r3, #4]
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	605a      	str	r2, [r3, #4]
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	4a0b      	ldr	r2, [pc, #44]	; (800b534 <vTaskSwitchContext+0xc0>)
 800b506:	6013      	str	r3, [r2, #0]
 800b508:	4a08      	ldr	r2, [pc, #32]	; (800b52c <vTaskSwitchContext+0xb8>)
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b50e:	4b09      	ldr	r3, [pc, #36]	; (800b534 <vTaskSwitchContext+0xc0>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	3354      	adds	r3, #84	; 0x54
 800b514:	4a08      	ldr	r2, [pc, #32]	; (800b538 <vTaskSwitchContext+0xc4>)
 800b516:	6013      	str	r3, [r2, #0]
}
 800b518:	bf00      	nop
 800b51a:	3714      	adds	r7, #20
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr
 800b524:	20001024 	.word	0x20001024
 800b528:	20001010 	.word	0x20001010
 800b52c:	20001004 	.word	0x20001004
 800b530:	20000b2c 	.word	0x20000b2c
 800b534:	20000b28 	.word	0x20000b28
 800b538:	20000128 	.word	0x20000128

0800b53c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d10a      	bne.n	800b562 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b550:	f383 8811 	msr	BASEPRI, r3
 800b554:	f3bf 8f6f 	isb	sy
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	60fb      	str	r3, [r7, #12]
}
 800b55e:	bf00      	nop
 800b560:	e7fe      	b.n	800b560 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b562:	4b07      	ldr	r3, [pc, #28]	; (800b580 <vTaskPlaceOnEventList+0x44>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	3318      	adds	r3, #24
 800b568:	4619      	mov	r1, r3
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f7fe fe61 	bl	800a232 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b570:	2101      	movs	r1, #1
 800b572:	6838      	ldr	r0, [r7, #0]
 800b574:	f000 fa80 	bl	800ba78 <prvAddCurrentTaskToDelayedList>
}
 800b578:	bf00      	nop
 800b57a:	3710      	adds	r7, #16
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	20000b28 	.word	0x20000b28

0800b584 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b584:	b580      	push	{r7, lr}
 800b586:	b086      	sub	sp, #24
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d10a      	bne.n	800b5ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59a:	f383 8811 	msr	BASEPRI, r3
 800b59e:	f3bf 8f6f 	isb	sy
 800b5a2:	f3bf 8f4f 	dsb	sy
 800b5a6:	617b      	str	r3, [r7, #20]
}
 800b5a8:	bf00      	nop
 800b5aa:	e7fe      	b.n	800b5aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5ac:	4b0a      	ldr	r3, [pc, #40]	; (800b5d8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	3318      	adds	r3, #24
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	68f8      	ldr	r0, [r7, #12]
 800b5b6:	f7fe fe18 	bl	800a1ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d002      	beq.n	800b5c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b5c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b5c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b5c6:	6879      	ldr	r1, [r7, #4]
 800b5c8:	68b8      	ldr	r0, [r7, #8]
 800b5ca:	f000 fa55 	bl	800ba78 <prvAddCurrentTaskToDelayedList>
	}
 800b5ce:	bf00      	nop
 800b5d0:	3718      	adds	r7, #24
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	20000b28 	.word	0x20000b28

0800b5dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b086      	sub	sp, #24
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d10a      	bne.n	800b608 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f6:	f383 8811 	msr	BASEPRI, r3
 800b5fa:	f3bf 8f6f 	isb	sy
 800b5fe:	f3bf 8f4f 	dsb	sy
 800b602:	60fb      	str	r3, [r7, #12]
}
 800b604:	bf00      	nop
 800b606:	e7fe      	b.n	800b606 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	3318      	adds	r3, #24
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7fe fe49 	bl	800a2a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b612:	4b1e      	ldr	r3, [pc, #120]	; (800b68c <xTaskRemoveFromEventList+0xb0>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d11d      	bne.n	800b656 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	3304      	adds	r3, #4
 800b61e:	4618      	mov	r0, r3
 800b620:	f7fe fe40 	bl	800a2a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b628:	4b19      	ldr	r3, [pc, #100]	; (800b690 <xTaskRemoveFromEventList+0xb4>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d903      	bls.n	800b638 <xTaskRemoveFromEventList+0x5c>
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b634:	4a16      	ldr	r2, [pc, #88]	; (800b690 <xTaskRemoveFromEventList+0xb4>)
 800b636:	6013      	str	r3, [r2, #0]
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b63c:	4613      	mov	r3, r2
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	4413      	add	r3, r2
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	4a13      	ldr	r2, [pc, #76]	; (800b694 <xTaskRemoveFromEventList+0xb8>)
 800b646:	441a      	add	r2, r3
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	3304      	adds	r3, #4
 800b64c:	4619      	mov	r1, r3
 800b64e:	4610      	mov	r0, r2
 800b650:	f7fe fdcb 	bl	800a1ea <vListInsertEnd>
 800b654:	e005      	b.n	800b662 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	3318      	adds	r3, #24
 800b65a:	4619      	mov	r1, r3
 800b65c:	480e      	ldr	r0, [pc, #56]	; (800b698 <xTaskRemoveFromEventList+0xbc>)
 800b65e:	f7fe fdc4 	bl	800a1ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b666:	4b0d      	ldr	r3, [pc, #52]	; (800b69c <xTaskRemoveFromEventList+0xc0>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d905      	bls.n	800b67c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b670:	2301      	movs	r3, #1
 800b672:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b674:	4b0a      	ldr	r3, [pc, #40]	; (800b6a0 <xTaskRemoveFromEventList+0xc4>)
 800b676:	2201      	movs	r2, #1
 800b678:	601a      	str	r2, [r3, #0]
 800b67a:	e001      	b.n	800b680 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b67c:	2300      	movs	r3, #0
 800b67e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b680:	697b      	ldr	r3, [r7, #20]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3718      	adds	r7, #24
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	20001024 	.word	0x20001024
 800b690:	20001004 	.word	0x20001004
 800b694:	20000b2c 	.word	0x20000b2c
 800b698:	20000fbc 	.word	0x20000fbc
 800b69c:	20000b28 	.word	0x20000b28
 800b6a0:	20001010 	.word	0x20001010

0800b6a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b6ac:	4b06      	ldr	r3, [pc, #24]	; (800b6c8 <vTaskInternalSetTimeOutState+0x24>)
 800b6ae:	681a      	ldr	r2, [r3, #0]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b6b4:	4b05      	ldr	r3, [pc, #20]	; (800b6cc <vTaskInternalSetTimeOutState+0x28>)
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	605a      	str	r2, [r3, #4]
}
 800b6bc:	bf00      	nop
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr
 800b6c8:	20001014 	.word	0x20001014
 800b6cc:	20001000 	.word	0x20001000

0800b6d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b088      	sub	sp, #32
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d10a      	bne.n	800b6f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e4:	f383 8811 	msr	BASEPRI, r3
 800b6e8:	f3bf 8f6f 	isb	sy
 800b6ec:	f3bf 8f4f 	dsb	sy
 800b6f0:	613b      	str	r3, [r7, #16]
}
 800b6f2:	bf00      	nop
 800b6f4:	e7fe      	b.n	800b6f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d10a      	bne.n	800b712 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b700:	f383 8811 	msr	BASEPRI, r3
 800b704:	f3bf 8f6f 	isb	sy
 800b708:	f3bf 8f4f 	dsb	sy
 800b70c:	60fb      	str	r3, [r7, #12]
}
 800b70e:	bf00      	nop
 800b710:	e7fe      	b.n	800b710 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b712:	f000 fe7f 	bl	800c414 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b716:	4b1d      	ldr	r3, [pc, #116]	; (800b78c <xTaskCheckForTimeOut+0xbc>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	69ba      	ldr	r2, [r7, #24]
 800b722:	1ad3      	subs	r3, r2, r3
 800b724:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b72e:	d102      	bne.n	800b736 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b730:	2300      	movs	r3, #0
 800b732:	61fb      	str	r3, [r7, #28]
 800b734:	e023      	b.n	800b77e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	4b15      	ldr	r3, [pc, #84]	; (800b790 <xTaskCheckForTimeOut+0xc0>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d007      	beq.n	800b752 <xTaskCheckForTimeOut+0x82>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	69ba      	ldr	r2, [r7, #24]
 800b748:	429a      	cmp	r2, r3
 800b74a:	d302      	bcc.n	800b752 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b74c:	2301      	movs	r3, #1
 800b74e:	61fb      	str	r3, [r7, #28]
 800b750:	e015      	b.n	800b77e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	697a      	ldr	r2, [r7, #20]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d20b      	bcs.n	800b774 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	1ad2      	subs	r2, r2, r3
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f7ff ff9b 	bl	800b6a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b76e:	2300      	movs	r3, #0
 800b770:	61fb      	str	r3, [r7, #28]
 800b772:	e004      	b.n	800b77e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	2200      	movs	r2, #0
 800b778:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b77a:	2301      	movs	r3, #1
 800b77c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b77e:	f000 fe79 	bl	800c474 <vPortExitCritical>

	return xReturn;
 800b782:	69fb      	ldr	r3, [r7, #28]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3720      	adds	r7, #32
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	20001000 	.word	0x20001000
 800b790:	20001014 	.word	0x20001014

0800b794 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b794:	b480      	push	{r7}
 800b796:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b798:	4b03      	ldr	r3, [pc, #12]	; (800b7a8 <vTaskMissedYield+0x14>)
 800b79a:	2201      	movs	r2, #1
 800b79c:	601a      	str	r2, [r3, #0]
}
 800b79e:	bf00      	nop
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr
 800b7a8:	20001010 	.word	0x20001010

0800b7ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b7b4:	f000 f852 	bl	800b85c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b7b8:	4b06      	ldr	r3, [pc, #24]	; (800b7d4 <prvIdleTask+0x28>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d9f9      	bls.n	800b7b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b7c0:	4b05      	ldr	r3, [pc, #20]	; (800b7d8 <prvIdleTask+0x2c>)
 800b7c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7c6:	601a      	str	r2, [r3, #0]
 800b7c8:	f3bf 8f4f 	dsb	sy
 800b7cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b7d0:	e7f0      	b.n	800b7b4 <prvIdleTask+0x8>
 800b7d2:	bf00      	nop
 800b7d4:	20000b2c 	.word	0x20000b2c
 800b7d8:	e000ed04 	.word	0xe000ed04

0800b7dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	607b      	str	r3, [r7, #4]
 800b7e6:	e00c      	b.n	800b802 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b7e8:	687a      	ldr	r2, [r7, #4]
 800b7ea:	4613      	mov	r3, r2
 800b7ec:	009b      	lsls	r3, r3, #2
 800b7ee:	4413      	add	r3, r2
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	4a12      	ldr	r2, [pc, #72]	; (800b83c <prvInitialiseTaskLists+0x60>)
 800b7f4:	4413      	add	r3, r2
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7fe fcca 	bl	800a190 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	3301      	adds	r3, #1
 800b800:	607b      	str	r3, [r7, #4]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2b37      	cmp	r3, #55	; 0x37
 800b806:	d9ef      	bls.n	800b7e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b808:	480d      	ldr	r0, [pc, #52]	; (800b840 <prvInitialiseTaskLists+0x64>)
 800b80a:	f7fe fcc1 	bl	800a190 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b80e:	480d      	ldr	r0, [pc, #52]	; (800b844 <prvInitialiseTaskLists+0x68>)
 800b810:	f7fe fcbe 	bl	800a190 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b814:	480c      	ldr	r0, [pc, #48]	; (800b848 <prvInitialiseTaskLists+0x6c>)
 800b816:	f7fe fcbb 	bl	800a190 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b81a:	480c      	ldr	r0, [pc, #48]	; (800b84c <prvInitialiseTaskLists+0x70>)
 800b81c:	f7fe fcb8 	bl	800a190 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b820:	480b      	ldr	r0, [pc, #44]	; (800b850 <prvInitialiseTaskLists+0x74>)
 800b822:	f7fe fcb5 	bl	800a190 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b826:	4b0b      	ldr	r3, [pc, #44]	; (800b854 <prvInitialiseTaskLists+0x78>)
 800b828:	4a05      	ldr	r2, [pc, #20]	; (800b840 <prvInitialiseTaskLists+0x64>)
 800b82a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b82c:	4b0a      	ldr	r3, [pc, #40]	; (800b858 <prvInitialiseTaskLists+0x7c>)
 800b82e:	4a05      	ldr	r2, [pc, #20]	; (800b844 <prvInitialiseTaskLists+0x68>)
 800b830:	601a      	str	r2, [r3, #0]
}
 800b832:	bf00      	nop
 800b834:	3708      	adds	r7, #8
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	20000b2c 	.word	0x20000b2c
 800b840:	20000f8c 	.word	0x20000f8c
 800b844:	20000fa0 	.word	0x20000fa0
 800b848:	20000fbc 	.word	0x20000fbc
 800b84c:	20000fd0 	.word	0x20000fd0
 800b850:	20000fe8 	.word	0x20000fe8
 800b854:	20000fb4 	.word	0x20000fb4
 800b858:	20000fb8 	.word	0x20000fb8

0800b85c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b862:	e019      	b.n	800b898 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b864:	f000 fdd6 	bl	800c414 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b868:	4b10      	ldr	r3, [pc, #64]	; (800b8ac <prvCheckTasksWaitingTermination+0x50>)
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	3304      	adds	r3, #4
 800b874:	4618      	mov	r0, r3
 800b876:	f7fe fd15 	bl	800a2a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b87a:	4b0d      	ldr	r3, [pc, #52]	; (800b8b0 <prvCheckTasksWaitingTermination+0x54>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	3b01      	subs	r3, #1
 800b880:	4a0b      	ldr	r2, [pc, #44]	; (800b8b0 <prvCheckTasksWaitingTermination+0x54>)
 800b882:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b884:	4b0b      	ldr	r3, [pc, #44]	; (800b8b4 <prvCheckTasksWaitingTermination+0x58>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	3b01      	subs	r3, #1
 800b88a:	4a0a      	ldr	r2, [pc, #40]	; (800b8b4 <prvCheckTasksWaitingTermination+0x58>)
 800b88c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b88e:	f000 fdf1 	bl	800c474 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 f810 	bl	800b8b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b898:	4b06      	ldr	r3, [pc, #24]	; (800b8b4 <prvCheckTasksWaitingTermination+0x58>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d1e1      	bne.n	800b864 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b8a0:	bf00      	nop
 800b8a2:	bf00      	nop
 800b8a4:	3708      	adds	r7, #8
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	20000fd0 	.word	0x20000fd0
 800b8b0:	20000ffc 	.word	0x20000ffc
 800b8b4:	20000fe4 	.word	0x20000fe4

0800b8b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	3354      	adds	r3, #84	; 0x54
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f002 f861 	bl	800d98c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d108      	bne.n	800b8e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f000 ff89 	bl	800c7f0 <vPortFree>
				vPortFree( pxTCB );
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 ff86 	bl	800c7f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b8e4:	e018      	b.n	800b918 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d103      	bne.n	800b8f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 ff7d 	bl	800c7f0 <vPortFree>
	}
 800b8f6:	e00f      	b.n	800b918 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b8fe:	2b02      	cmp	r3, #2
 800b900:	d00a      	beq.n	800b918 <prvDeleteTCB+0x60>
	__asm volatile
 800b902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b906:	f383 8811 	msr	BASEPRI, r3
 800b90a:	f3bf 8f6f 	isb	sy
 800b90e:	f3bf 8f4f 	dsb	sy
 800b912:	60fb      	str	r3, [r7, #12]
}
 800b914:	bf00      	nop
 800b916:	e7fe      	b.n	800b916 <prvDeleteTCB+0x5e>
	}
 800b918:	bf00      	nop
 800b91a:	3710      	adds	r7, #16
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b920:	b480      	push	{r7}
 800b922:	b083      	sub	sp, #12
 800b924:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b926:	4b0c      	ldr	r3, [pc, #48]	; (800b958 <prvResetNextTaskUnblockTime+0x38>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d104      	bne.n	800b93a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b930:	4b0a      	ldr	r3, [pc, #40]	; (800b95c <prvResetNextTaskUnblockTime+0x3c>)
 800b932:	f04f 32ff 	mov.w	r2, #4294967295
 800b936:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b938:	e008      	b.n	800b94c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b93a:	4b07      	ldr	r3, [pc, #28]	; (800b958 <prvResetNextTaskUnblockTime+0x38>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	4a04      	ldr	r2, [pc, #16]	; (800b95c <prvResetNextTaskUnblockTime+0x3c>)
 800b94a:	6013      	str	r3, [r2, #0]
}
 800b94c:	bf00      	nop
 800b94e:	370c      	adds	r7, #12
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr
 800b958:	20000fb4 	.word	0x20000fb4
 800b95c:	2000101c 	.word	0x2000101c

0800b960 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b966:	4b0b      	ldr	r3, [pc, #44]	; (800b994 <xTaskGetSchedulerState+0x34>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d102      	bne.n	800b974 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b96e:	2301      	movs	r3, #1
 800b970:	607b      	str	r3, [r7, #4]
 800b972:	e008      	b.n	800b986 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b974:	4b08      	ldr	r3, [pc, #32]	; (800b998 <xTaskGetSchedulerState+0x38>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d102      	bne.n	800b982 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b97c:	2302      	movs	r3, #2
 800b97e:	607b      	str	r3, [r7, #4]
 800b980:	e001      	b.n	800b986 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b982:	2300      	movs	r3, #0
 800b984:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b986:	687b      	ldr	r3, [r7, #4]
	}
 800b988:	4618      	mov	r0, r3
 800b98a:	370c      	adds	r7, #12
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr
 800b994:	20001008 	.word	0x20001008
 800b998:	20001024 	.word	0x20001024

0800b99c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b086      	sub	sp, #24
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d056      	beq.n	800ba60 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b9b2:	4b2e      	ldr	r3, [pc, #184]	; (800ba6c <xTaskPriorityDisinherit+0xd0>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	693a      	ldr	r2, [r7, #16]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d00a      	beq.n	800b9d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c0:	f383 8811 	msr	BASEPRI, r3
 800b9c4:	f3bf 8f6f 	isb	sy
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	60fb      	str	r3, [r7, #12]
}
 800b9ce:	bf00      	nop
 800b9d0:	e7fe      	b.n	800b9d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d10a      	bne.n	800b9f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9de:	f383 8811 	msr	BASEPRI, r3
 800b9e2:	f3bf 8f6f 	isb	sy
 800b9e6:	f3bf 8f4f 	dsb	sy
 800b9ea:	60bb      	str	r3, [r7, #8]
}
 800b9ec:	bf00      	nop
 800b9ee:	e7fe      	b.n	800b9ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9f4:	1e5a      	subs	r2, r3, #1
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d02c      	beq.n	800ba60 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d128      	bne.n	800ba60 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	3304      	adds	r3, #4
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7fe fc46 	bl	800a2a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba30:	4b0f      	ldr	r3, [pc, #60]	; (800ba70 <xTaskPriorityDisinherit+0xd4>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d903      	bls.n	800ba40 <xTaskPriorityDisinherit+0xa4>
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba3c:	4a0c      	ldr	r2, [pc, #48]	; (800ba70 <xTaskPriorityDisinherit+0xd4>)
 800ba3e:	6013      	str	r3, [r2, #0]
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba44:	4613      	mov	r3, r2
 800ba46:	009b      	lsls	r3, r3, #2
 800ba48:	4413      	add	r3, r2
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	4a09      	ldr	r2, [pc, #36]	; (800ba74 <xTaskPriorityDisinherit+0xd8>)
 800ba4e:	441a      	add	r2, r3
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	3304      	adds	r3, #4
 800ba54:	4619      	mov	r1, r3
 800ba56:	4610      	mov	r0, r2
 800ba58:	f7fe fbc7 	bl	800a1ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba60:	697b      	ldr	r3, [r7, #20]
	}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3718      	adds	r7, #24
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	20000b28 	.word	0x20000b28
 800ba70:	20001004 	.word	0x20001004
 800ba74:	20000b2c 	.word	0x20000b2c

0800ba78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ba82:	4b21      	ldr	r3, [pc, #132]	; (800bb08 <prvAddCurrentTaskToDelayedList+0x90>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba88:	4b20      	ldr	r3, [pc, #128]	; (800bb0c <prvAddCurrentTaskToDelayedList+0x94>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	3304      	adds	r3, #4
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7fe fc08 	bl	800a2a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba9a:	d10a      	bne.n	800bab2 <prvAddCurrentTaskToDelayedList+0x3a>
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d007      	beq.n	800bab2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800baa2:	4b1a      	ldr	r3, [pc, #104]	; (800bb0c <prvAddCurrentTaskToDelayedList+0x94>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	3304      	adds	r3, #4
 800baa8:	4619      	mov	r1, r3
 800baaa:	4819      	ldr	r0, [pc, #100]	; (800bb10 <prvAddCurrentTaskToDelayedList+0x98>)
 800baac:	f7fe fb9d 	bl	800a1ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bab0:	e026      	b.n	800bb00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bab2:	68fa      	ldr	r2, [r7, #12]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	4413      	add	r3, r2
 800bab8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800baba:	4b14      	ldr	r3, [pc, #80]	; (800bb0c <prvAddCurrentTaskToDelayedList+0x94>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	68ba      	ldr	r2, [r7, #8]
 800bac0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d209      	bcs.n	800bade <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800baca:	4b12      	ldr	r3, [pc, #72]	; (800bb14 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bacc:	681a      	ldr	r2, [r3, #0]
 800bace:	4b0f      	ldr	r3, [pc, #60]	; (800bb0c <prvAddCurrentTaskToDelayedList+0x94>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	3304      	adds	r3, #4
 800bad4:	4619      	mov	r1, r3
 800bad6:	4610      	mov	r0, r2
 800bad8:	f7fe fbab 	bl	800a232 <vListInsert>
}
 800badc:	e010      	b.n	800bb00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bade:	4b0e      	ldr	r3, [pc, #56]	; (800bb18 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	4b0a      	ldr	r3, [pc, #40]	; (800bb0c <prvAddCurrentTaskToDelayedList+0x94>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	3304      	adds	r3, #4
 800bae8:	4619      	mov	r1, r3
 800baea:	4610      	mov	r0, r2
 800baec:	f7fe fba1 	bl	800a232 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800baf0:	4b0a      	ldr	r3, [pc, #40]	; (800bb1c <prvAddCurrentTaskToDelayedList+0xa4>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	68ba      	ldr	r2, [r7, #8]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d202      	bcs.n	800bb00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bafa:	4a08      	ldr	r2, [pc, #32]	; (800bb1c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	6013      	str	r3, [r2, #0]
}
 800bb00:	bf00      	nop
 800bb02:	3710      	adds	r7, #16
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	20001000 	.word	0x20001000
 800bb0c:	20000b28 	.word	0x20000b28
 800bb10:	20000fe8 	.word	0x20000fe8
 800bb14:	20000fb8 	.word	0x20000fb8
 800bb18:	20000fb4 	.word	0x20000fb4
 800bb1c:	2000101c 	.word	0x2000101c

0800bb20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b08a      	sub	sp, #40	; 0x28
 800bb24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bb26:	2300      	movs	r3, #0
 800bb28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bb2a:	f000 fb07 	bl	800c13c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bb2e:	4b1c      	ldr	r3, [pc, #112]	; (800bba0 <xTimerCreateTimerTask+0x80>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d021      	beq.n	800bb7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bb36:	2300      	movs	r3, #0
 800bb38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bb3e:	1d3a      	adds	r2, r7, #4
 800bb40:	f107 0108 	add.w	r1, r7, #8
 800bb44:	f107 030c 	add.w	r3, r7, #12
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7fe fb07 	bl	800a15c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bb4e:	6879      	ldr	r1, [r7, #4]
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	9202      	str	r2, [sp, #8]
 800bb56:	9301      	str	r3, [sp, #4]
 800bb58:	2302      	movs	r3, #2
 800bb5a:	9300      	str	r3, [sp, #0]
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	460a      	mov	r2, r1
 800bb60:	4910      	ldr	r1, [pc, #64]	; (800bba4 <xTimerCreateTimerTask+0x84>)
 800bb62:	4811      	ldr	r0, [pc, #68]	; (800bba8 <xTimerCreateTimerTask+0x88>)
 800bb64:	f7ff f8b4 	bl	800acd0 <xTaskCreateStatic>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	4a10      	ldr	r2, [pc, #64]	; (800bbac <xTimerCreateTimerTask+0x8c>)
 800bb6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bb6e:	4b0f      	ldr	r3, [pc, #60]	; (800bbac <xTimerCreateTimerTask+0x8c>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d001      	beq.n	800bb7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bb76:	2301      	movs	r3, #1
 800bb78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d10a      	bne.n	800bb96 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb84:	f383 8811 	msr	BASEPRI, r3
 800bb88:	f3bf 8f6f 	isb	sy
 800bb8c:	f3bf 8f4f 	dsb	sy
 800bb90:	613b      	str	r3, [r7, #16]
}
 800bb92:	bf00      	nop
 800bb94:	e7fe      	b.n	800bb94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bb96:	697b      	ldr	r3, [r7, #20]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3718      	adds	r7, #24
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	20001058 	.word	0x20001058
 800bba4:	0800ea74 	.word	0x0800ea74
 800bba8:	0800bce5 	.word	0x0800bce5
 800bbac:	2000105c 	.word	0x2000105c

0800bbb0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b08a      	sub	sp, #40	; 0x28
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	60b9      	str	r1, [r7, #8]
 800bbba:	607a      	str	r2, [r7, #4]
 800bbbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d10a      	bne.n	800bbde <xTimerGenericCommand+0x2e>
	__asm volatile
 800bbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbcc:	f383 8811 	msr	BASEPRI, r3
 800bbd0:	f3bf 8f6f 	isb	sy
 800bbd4:	f3bf 8f4f 	dsb	sy
 800bbd8:	623b      	str	r3, [r7, #32]
}
 800bbda:	bf00      	nop
 800bbdc:	e7fe      	b.n	800bbdc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bbde:	4b1a      	ldr	r3, [pc, #104]	; (800bc48 <xTimerGenericCommand+0x98>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d02a      	beq.n	800bc3c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	2b05      	cmp	r3, #5
 800bbf6:	dc18      	bgt.n	800bc2a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bbf8:	f7ff feb2 	bl	800b960 <xTaskGetSchedulerState>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	2b02      	cmp	r3, #2
 800bc00:	d109      	bne.n	800bc16 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bc02:	4b11      	ldr	r3, [pc, #68]	; (800bc48 <xTimerGenericCommand+0x98>)
 800bc04:	6818      	ldr	r0, [r3, #0]
 800bc06:	f107 0110 	add.w	r1, r7, #16
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc0e:	f7fe fc77 	bl	800a500 <xQueueGenericSend>
 800bc12:	6278      	str	r0, [r7, #36]	; 0x24
 800bc14:	e012      	b.n	800bc3c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bc16:	4b0c      	ldr	r3, [pc, #48]	; (800bc48 <xTimerGenericCommand+0x98>)
 800bc18:	6818      	ldr	r0, [r3, #0]
 800bc1a:	f107 0110 	add.w	r1, r7, #16
 800bc1e:	2300      	movs	r3, #0
 800bc20:	2200      	movs	r2, #0
 800bc22:	f7fe fc6d 	bl	800a500 <xQueueGenericSend>
 800bc26:	6278      	str	r0, [r7, #36]	; 0x24
 800bc28:	e008      	b.n	800bc3c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bc2a:	4b07      	ldr	r3, [pc, #28]	; (800bc48 <xTimerGenericCommand+0x98>)
 800bc2c:	6818      	ldr	r0, [r3, #0]
 800bc2e:	f107 0110 	add.w	r1, r7, #16
 800bc32:	2300      	movs	r3, #0
 800bc34:	683a      	ldr	r2, [r7, #0]
 800bc36:	f7fe fd61 	bl	800a6fc <xQueueGenericSendFromISR>
 800bc3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3728      	adds	r7, #40	; 0x28
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	20001058 	.word	0x20001058

0800bc4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b088      	sub	sp, #32
 800bc50:	af02      	add	r7, sp, #8
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc56:	4b22      	ldr	r3, [pc, #136]	; (800bce0 <prvProcessExpiredTimer+0x94>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	68db      	ldr	r3, [r3, #12]
 800bc5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	3304      	adds	r3, #4
 800bc64:	4618      	mov	r0, r3
 800bc66:	f7fe fb1d 	bl	800a2a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc70:	f003 0304 	and.w	r3, r3, #4
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d022      	beq.n	800bcbe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	699a      	ldr	r2, [r3, #24]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	18d1      	adds	r1, r2, r3
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	683a      	ldr	r2, [r7, #0]
 800bc84:	6978      	ldr	r0, [r7, #20]
 800bc86:	f000 f8d1 	bl	800be2c <prvInsertTimerInActiveList>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d01f      	beq.n	800bcd0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc90:	2300      	movs	r3, #0
 800bc92:	9300      	str	r3, [sp, #0]
 800bc94:	2300      	movs	r3, #0
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	2100      	movs	r1, #0
 800bc9a:	6978      	ldr	r0, [r7, #20]
 800bc9c:	f7ff ff88 	bl	800bbb0 <xTimerGenericCommand>
 800bca0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d113      	bne.n	800bcd0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcac:	f383 8811 	msr	BASEPRI, r3
 800bcb0:	f3bf 8f6f 	isb	sy
 800bcb4:	f3bf 8f4f 	dsb	sy
 800bcb8:	60fb      	str	r3, [r7, #12]
}
 800bcba:	bf00      	nop
 800bcbc:	e7fe      	b.n	800bcbc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcc4:	f023 0301 	bic.w	r3, r3, #1
 800bcc8:	b2da      	uxtb	r2, r3
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	6a1b      	ldr	r3, [r3, #32]
 800bcd4:	6978      	ldr	r0, [r7, #20]
 800bcd6:	4798      	blx	r3
}
 800bcd8:	bf00      	nop
 800bcda:	3718      	adds	r7, #24
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	20001050 	.word	0x20001050

0800bce4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bcec:	f107 0308 	add.w	r3, r7, #8
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f000 f857 	bl	800bda4 <prvGetNextExpireTime>
 800bcf6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	68f8      	ldr	r0, [r7, #12]
 800bcfe:	f000 f803 	bl	800bd08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bd02:	f000 f8d5 	bl	800beb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd06:	e7f1      	b.n	800bcec <prvTimerTask+0x8>

0800bd08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bd12:	f7ff fa39 	bl	800b188 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd16:	f107 0308 	add.w	r3, r7, #8
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f000 f866 	bl	800bdec <prvSampleTimeNow>
 800bd20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d130      	bne.n	800bd8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d10a      	bne.n	800bd44 <prvProcessTimerOrBlockTask+0x3c>
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d806      	bhi.n	800bd44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bd36:	f7ff fa35 	bl	800b1a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bd3a:	68f9      	ldr	r1, [r7, #12]
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f7ff ff85 	bl	800bc4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bd42:	e024      	b.n	800bd8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d008      	beq.n	800bd5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bd4a:	4b13      	ldr	r3, [pc, #76]	; (800bd98 <prvProcessTimerOrBlockTask+0x90>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d101      	bne.n	800bd58 <prvProcessTimerOrBlockTask+0x50>
 800bd54:	2301      	movs	r3, #1
 800bd56:	e000      	b.n	800bd5a <prvProcessTimerOrBlockTask+0x52>
 800bd58:	2300      	movs	r3, #0
 800bd5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bd5c:	4b0f      	ldr	r3, [pc, #60]	; (800bd9c <prvProcessTimerOrBlockTask+0x94>)
 800bd5e:	6818      	ldr	r0, [r3, #0]
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	1ad3      	subs	r3, r2, r3
 800bd66:	683a      	ldr	r2, [r7, #0]
 800bd68:	4619      	mov	r1, r3
 800bd6a:	f7fe ff7d 	bl	800ac68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bd6e:	f7ff fa19 	bl	800b1a4 <xTaskResumeAll>
 800bd72:	4603      	mov	r3, r0
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d10a      	bne.n	800bd8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bd78:	4b09      	ldr	r3, [pc, #36]	; (800bda0 <prvProcessTimerOrBlockTask+0x98>)
 800bd7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd7e:	601a      	str	r2, [r3, #0]
 800bd80:	f3bf 8f4f 	dsb	sy
 800bd84:	f3bf 8f6f 	isb	sy
}
 800bd88:	e001      	b.n	800bd8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bd8a:	f7ff fa0b 	bl	800b1a4 <xTaskResumeAll>
}
 800bd8e:	bf00      	nop
 800bd90:	3710      	adds	r7, #16
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	20001054 	.word	0x20001054
 800bd9c:	20001058 	.word	0x20001058
 800bda0:	e000ed04 	.word	0xe000ed04

0800bda4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bdac:	4b0e      	ldr	r3, [pc, #56]	; (800bde8 <prvGetNextExpireTime+0x44>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d101      	bne.n	800bdba <prvGetNextExpireTime+0x16>
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	e000      	b.n	800bdbc <prvGetNextExpireTime+0x18>
 800bdba:	2200      	movs	r2, #0
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d105      	bne.n	800bdd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bdc8:	4b07      	ldr	r3, [pc, #28]	; (800bde8 <prvGetNextExpireTime+0x44>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	68db      	ldr	r3, [r3, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	60fb      	str	r3, [r7, #12]
 800bdd2:	e001      	b.n	800bdd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3714      	adds	r7, #20
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr
 800bde6:	bf00      	nop
 800bde8:	20001050 	.word	0x20001050

0800bdec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bdf4:	f7ff fa74 	bl	800b2e0 <xTaskGetTickCount>
 800bdf8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bdfa:	4b0b      	ldr	r3, [pc, #44]	; (800be28 <prvSampleTimeNow+0x3c>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	68fa      	ldr	r2, [r7, #12]
 800be00:	429a      	cmp	r2, r3
 800be02:	d205      	bcs.n	800be10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800be04:	f000 f936 	bl	800c074 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2201      	movs	r2, #1
 800be0c:	601a      	str	r2, [r3, #0]
 800be0e:	e002      	b.n	800be16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800be16:	4a04      	ldr	r2, [pc, #16]	; (800be28 <prvSampleTimeNow+0x3c>)
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800be1c:	68fb      	ldr	r3, [r7, #12]
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	20001060 	.word	0x20001060

0800be2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b086      	sub	sp, #24
 800be30:	af00      	add	r7, sp, #0
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	607a      	str	r2, [r7, #4]
 800be38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800be3a:	2300      	movs	r3, #0
 800be3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	68ba      	ldr	r2, [r7, #8]
 800be42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800be4a:	68ba      	ldr	r2, [r7, #8]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	429a      	cmp	r2, r3
 800be50:	d812      	bhi.n	800be78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	1ad2      	subs	r2, r2, r3
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	699b      	ldr	r3, [r3, #24]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d302      	bcc.n	800be66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800be60:	2301      	movs	r3, #1
 800be62:	617b      	str	r3, [r7, #20]
 800be64:	e01b      	b.n	800be9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800be66:	4b10      	ldr	r3, [pc, #64]	; (800bea8 <prvInsertTimerInActiveList+0x7c>)
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	3304      	adds	r3, #4
 800be6e:	4619      	mov	r1, r3
 800be70:	4610      	mov	r0, r2
 800be72:	f7fe f9de 	bl	800a232 <vListInsert>
 800be76:	e012      	b.n	800be9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d206      	bcs.n	800be8e <prvInsertTimerInActiveList+0x62>
 800be80:	68ba      	ldr	r2, [r7, #8]
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	429a      	cmp	r2, r3
 800be86:	d302      	bcc.n	800be8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800be88:	2301      	movs	r3, #1
 800be8a:	617b      	str	r3, [r7, #20]
 800be8c:	e007      	b.n	800be9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be8e:	4b07      	ldr	r3, [pc, #28]	; (800beac <prvInsertTimerInActiveList+0x80>)
 800be90:	681a      	ldr	r2, [r3, #0]
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	3304      	adds	r3, #4
 800be96:	4619      	mov	r1, r3
 800be98:	4610      	mov	r0, r2
 800be9a:	f7fe f9ca 	bl	800a232 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800be9e:	697b      	ldr	r3, [r7, #20]
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3718      	adds	r7, #24
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	20001054 	.word	0x20001054
 800beac:	20001050 	.word	0x20001050

0800beb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b08e      	sub	sp, #56	; 0x38
 800beb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800beb6:	e0ca      	b.n	800c04e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	da18      	bge.n	800bef0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bebe:	1d3b      	adds	r3, r7, #4
 800bec0:	3304      	adds	r3, #4
 800bec2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d10a      	bne.n	800bee0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800beca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bece:	f383 8811 	msr	BASEPRI, r3
 800bed2:	f3bf 8f6f 	isb	sy
 800bed6:	f3bf 8f4f 	dsb	sy
 800beda:	61fb      	str	r3, [r7, #28]
}
 800bedc:	bf00      	nop
 800bede:	e7fe      	b.n	800bede <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bee6:	6850      	ldr	r0, [r2, #4]
 800bee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800beea:	6892      	ldr	r2, [r2, #8]
 800beec:	4611      	mov	r1, r2
 800beee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	f2c0 80aa 	blt.w	800c04c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800befc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befe:	695b      	ldr	r3, [r3, #20]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d004      	beq.n	800bf0e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf06:	3304      	adds	r3, #4
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7fe f9cb 	bl	800a2a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf0e:	463b      	mov	r3, r7
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7ff ff6b 	bl	800bdec <prvSampleTimeNow>
 800bf16:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2b09      	cmp	r3, #9
 800bf1c:	f200 8097 	bhi.w	800c04e <prvProcessReceivedCommands+0x19e>
 800bf20:	a201      	add	r2, pc, #4	; (adr r2, 800bf28 <prvProcessReceivedCommands+0x78>)
 800bf22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf26:	bf00      	nop
 800bf28:	0800bf51 	.word	0x0800bf51
 800bf2c:	0800bf51 	.word	0x0800bf51
 800bf30:	0800bf51 	.word	0x0800bf51
 800bf34:	0800bfc5 	.word	0x0800bfc5
 800bf38:	0800bfd9 	.word	0x0800bfd9
 800bf3c:	0800c023 	.word	0x0800c023
 800bf40:	0800bf51 	.word	0x0800bf51
 800bf44:	0800bf51 	.word	0x0800bf51
 800bf48:	0800bfc5 	.word	0x0800bfc5
 800bf4c:	0800bfd9 	.word	0x0800bfd9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf56:	f043 0301 	orr.w	r3, r3, #1
 800bf5a:	b2da      	uxtb	r2, r3
 800bf5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bf62:	68ba      	ldr	r2, [r7, #8]
 800bf64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf66:	699b      	ldr	r3, [r3, #24]
 800bf68:	18d1      	adds	r1, r2, r3
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf70:	f7ff ff5c 	bl	800be2c <prvInsertTimerInActiveList>
 800bf74:	4603      	mov	r3, r0
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d069      	beq.n	800c04e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7c:	6a1b      	ldr	r3, [r3, #32]
 800bf7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf88:	f003 0304 	and.w	r3, r3, #4
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d05e      	beq.n	800c04e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bf90:	68ba      	ldr	r2, [r7, #8]
 800bf92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf94:	699b      	ldr	r3, [r3, #24]
 800bf96:	441a      	add	r2, r3
 800bf98:	2300      	movs	r3, #0
 800bf9a:	9300      	str	r3, [sp, #0]
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	2100      	movs	r1, #0
 800bfa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfa2:	f7ff fe05 	bl	800bbb0 <xTimerGenericCommand>
 800bfa6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bfa8:	6a3b      	ldr	r3, [r7, #32]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d14f      	bne.n	800c04e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bfae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb2:	f383 8811 	msr	BASEPRI, r3
 800bfb6:	f3bf 8f6f 	isb	sy
 800bfba:	f3bf 8f4f 	dsb	sy
 800bfbe:	61bb      	str	r3, [r7, #24]
}
 800bfc0:	bf00      	nop
 800bfc2:	e7fe      	b.n	800bfc2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfca:	f023 0301 	bic.w	r3, r3, #1
 800bfce:	b2da      	uxtb	r2, r3
 800bfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bfd6:	e03a      	b.n	800c04e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bfd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfde:	f043 0301 	orr.w	r3, r3, #1
 800bfe2:	b2da      	uxtb	r2, r3
 800bfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bfea:	68ba      	ldr	r2, [r7, #8]
 800bfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff2:	699b      	ldr	r3, [r3, #24]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d10a      	bne.n	800c00e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bffc:	f383 8811 	msr	BASEPRI, r3
 800c000:	f3bf 8f6f 	isb	sy
 800c004:	f3bf 8f4f 	dsb	sy
 800c008:	617b      	str	r3, [r7, #20]
}
 800c00a:	bf00      	nop
 800c00c:	e7fe      	b.n	800c00c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c010:	699a      	ldr	r2, [r3, #24]
 800c012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c014:	18d1      	adds	r1, r2, r3
 800c016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c01a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c01c:	f7ff ff06 	bl	800be2c <prvInsertTimerInActiveList>
					break;
 800c020:	e015      	b.n	800c04e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c024:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c028:	f003 0302 	and.w	r3, r3, #2
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d103      	bne.n	800c038 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c032:	f000 fbdd 	bl	800c7f0 <vPortFree>
 800c036:	e00a      	b.n	800c04e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c03e:	f023 0301 	bic.w	r3, r3, #1
 800c042:	b2da      	uxtb	r2, r3
 800c044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c046:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c04a:	e000      	b.n	800c04e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c04c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c04e:	4b08      	ldr	r3, [pc, #32]	; (800c070 <prvProcessReceivedCommands+0x1c0>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	1d39      	adds	r1, r7, #4
 800c054:	2200      	movs	r2, #0
 800c056:	4618      	mov	r0, r3
 800c058:	f7fe fbec 	bl	800a834 <xQueueReceive>
 800c05c:	4603      	mov	r3, r0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	f47f af2a 	bne.w	800beb8 <prvProcessReceivedCommands+0x8>
	}
}
 800c064:	bf00      	nop
 800c066:	bf00      	nop
 800c068:	3730      	adds	r7, #48	; 0x30
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	20001058 	.word	0x20001058

0800c074 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b088      	sub	sp, #32
 800c078:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c07a:	e048      	b.n	800c10e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c07c:	4b2d      	ldr	r3, [pc, #180]	; (800c134 <prvSwitchTimerLists+0xc0>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c086:	4b2b      	ldr	r3, [pc, #172]	; (800c134 <prvSwitchTimerLists+0xc0>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	68db      	ldr	r3, [r3, #12]
 800c08c:	68db      	ldr	r3, [r3, #12]
 800c08e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	3304      	adds	r3, #4
 800c094:	4618      	mov	r0, r3
 800c096:	f7fe f905 	bl	800a2a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	6a1b      	ldr	r3, [r3, #32]
 800c09e:	68f8      	ldr	r0, [r7, #12]
 800c0a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0a8:	f003 0304 	and.w	r3, r3, #4
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d02e      	beq.n	800c10e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	699b      	ldr	r3, [r3, #24]
 800c0b4:	693a      	ldr	r2, [r7, #16]
 800c0b6:	4413      	add	r3, r2
 800c0b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c0ba:	68ba      	ldr	r2, [r7, #8]
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d90e      	bls.n	800c0e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	68ba      	ldr	r2, [r7, #8]
 800c0c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	68fa      	ldr	r2, [r7, #12]
 800c0cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c0ce:	4b19      	ldr	r3, [pc, #100]	; (800c134 <prvSwitchTimerLists+0xc0>)
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	3304      	adds	r3, #4
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	4610      	mov	r0, r2
 800c0da:	f7fe f8aa 	bl	800a232 <vListInsert>
 800c0de:	e016      	b.n	800c10e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	9300      	str	r3, [sp, #0]
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	693a      	ldr	r2, [r7, #16]
 800c0e8:	2100      	movs	r1, #0
 800c0ea:	68f8      	ldr	r0, [r7, #12]
 800c0ec:	f7ff fd60 	bl	800bbb0 <xTimerGenericCommand>
 800c0f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d10a      	bne.n	800c10e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fc:	f383 8811 	msr	BASEPRI, r3
 800c100:	f3bf 8f6f 	isb	sy
 800c104:	f3bf 8f4f 	dsb	sy
 800c108:	603b      	str	r3, [r7, #0]
}
 800c10a:	bf00      	nop
 800c10c:	e7fe      	b.n	800c10c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c10e:	4b09      	ldr	r3, [pc, #36]	; (800c134 <prvSwitchTimerLists+0xc0>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d1b1      	bne.n	800c07c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c118:	4b06      	ldr	r3, [pc, #24]	; (800c134 <prvSwitchTimerLists+0xc0>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c11e:	4b06      	ldr	r3, [pc, #24]	; (800c138 <prvSwitchTimerLists+0xc4>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4a04      	ldr	r2, [pc, #16]	; (800c134 <prvSwitchTimerLists+0xc0>)
 800c124:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c126:	4a04      	ldr	r2, [pc, #16]	; (800c138 <prvSwitchTimerLists+0xc4>)
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	6013      	str	r3, [r2, #0]
}
 800c12c:	bf00      	nop
 800c12e:	3718      	adds	r7, #24
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}
 800c134:	20001050 	.word	0x20001050
 800c138:	20001054 	.word	0x20001054

0800c13c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c142:	f000 f967 	bl	800c414 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c146:	4b15      	ldr	r3, [pc, #84]	; (800c19c <prvCheckForValidListAndQueue+0x60>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d120      	bne.n	800c190 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c14e:	4814      	ldr	r0, [pc, #80]	; (800c1a0 <prvCheckForValidListAndQueue+0x64>)
 800c150:	f7fe f81e 	bl	800a190 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c154:	4813      	ldr	r0, [pc, #76]	; (800c1a4 <prvCheckForValidListAndQueue+0x68>)
 800c156:	f7fe f81b 	bl	800a190 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c15a:	4b13      	ldr	r3, [pc, #76]	; (800c1a8 <prvCheckForValidListAndQueue+0x6c>)
 800c15c:	4a10      	ldr	r2, [pc, #64]	; (800c1a0 <prvCheckForValidListAndQueue+0x64>)
 800c15e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c160:	4b12      	ldr	r3, [pc, #72]	; (800c1ac <prvCheckForValidListAndQueue+0x70>)
 800c162:	4a10      	ldr	r2, [pc, #64]	; (800c1a4 <prvCheckForValidListAndQueue+0x68>)
 800c164:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c166:	2300      	movs	r3, #0
 800c168:	9300      	str	r3, [sp, #0]
 800c16a:	4b11      	ldr	r3, [pc, #68]	; (800c1b0 <prvCheckForValidListAndQueue+0x74>)
 800c16c:	4a11      	ldr	r2, [pc, #68]	; (800c1b4 <prvCheckForValidListAndQueue+0x78>)
 800c16e:	2110      	movs	r1, #16
 800c170:	200a      	movs	r0, #10
 800c172:	f7fe f929 	bl	800a3c8 <xQueueGenericCreateStatic>
 800c176:	4603      	mov	r3, r0
 800c178:	4a08      	ldr	r2, [pc, #32]	; (800c19c <prvCheckForValidListAndQueue+0x60>)
 800c17a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c17c:	4b07      	ldr	r3, [pc, #28]	; (800c19c <prvCheckForValidListAndQueue+0x60>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d005      	beq.n	800c190 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c184:	4b05      	ldr	r3, [pc, #20]	; (800c19c <prvCheckForValidListAndQueue+0x60>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	490b      	ldr	r1, [pc, #44]	; (800c1b8 <prvCheckForValidListAndQueue+0x7c>)
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7fe fd42 	bl	800ac14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c190:	f000 f970 	bl	800c474 <vPortExitCritical>
}
 800c194:	bf00      	nop
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	20001058 	.word	0x20001058
 800c1a0:	20001028 	.word	0x20001028
 800c1a4:	2000103c 	.word	0x2000103c
 800c1a8:	20001050 	.word	0x20001050
 800c1ac:	20001054 	.word	0x20001054
 800c1b0:	20001104 	.word	0x20001104
 800c1b4:	20001064 	.word	0x20001064
 800c1b8:	0800ea7c 	.word	0x0800ea7c

0800c1bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b085      	sub	sp, #20
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	3b04      	subs	r3, #4
 800c1cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c1d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	3b04      	subs	r3, #4
 800c1da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	f023 0201 	bic.w	r2, r3, #1
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	3b04      	subs	r3, #4
 800c1ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c1ec:	4a0c      	ldr	r2, [pc, #48]	; (800c220 <pxPortInitialiseStack+0x64>)
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	3b14      	subs	r3, #20
 800c1f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	3b04      	subs	r3, #4
 800c202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f06f 0202 	mvn.w	r2, #2
 800c20a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	3b20      	subs	r3, #32
 800c210:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c212:	68fb      	ldr	r3, [r7, #12]
}
 800c214:	4618      	mov	r0, r3
 800c216:	3714      	adds	r7, #20
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr
 800c220:	0800c225 	.word	0x0800c225

0800c224 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c224:	b480      	push	{r7}
 800c226:	b085      	sub	sp, #20
 800c228:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c22a:	2300      	movs	r3, #0
 800c22c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c22e:	4b12      	ldr	r3, [pc, #72]	; (800c278 <prvTaskExitError+0x54>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c236:	d00a      	beq.n	800c24e <prvTaskExitError+0x2a>
	__asm volatile
 800c238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c23c:	f383 8811 	msr	BASEPRI, r3
 800c240:	f3bf 8f6f 	isb	sy
 800c244:	f3bf 8f4f 	dsb	sy
 800c248:	60fb      	str	r3, [r7, #12]
}
 800c24a:	bf00      	nop
 800c24c:	e7fe      	b.n	800c24c <prvTaskExitError+0x28>
	__asm volatile
 800c24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c252:	f383 8811 	msr	BASEPRI, r3
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	60bb      	str	r3, [r7, #8]
}
 800c260:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c262:	bf00      	nop
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d0fc      	beq.n	800c264 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c26a:	bf00      	nop
 800c26c:	bf00      	nop
 800c26e:	3714      	adds	r7, #20
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr
 800c278:	200000c0 	.word	0x200000c0
 800c27c:	00000000 	.word	0x00000000

0800c280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c280:	4b07      	ldr	r3, [pc, #28]	; (800c2a0 <pxCurrentTCBConst2>)
 800c282:	6819      	ldr	r1, [r3, #0]
 800c284:	6808      	ldr	r0, [r1, #0]
 800c286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c28a:	f380 8809 	msr	PSP, r0
 800c28e:	f3bf 8f6f 	isb	sy
 800c292:	f04f 0000 	mov.w	r0, #0
 800c296:	f380 8811 	msr	BASEPRI, r0
 800c29a:	4770      	bx	lr
 800c29c:	f3af 8000 	nop.w

0800c2a0 <pxCurrentTCBConst2>:
 800c2a0:	20000b28 	.word	0x20000b28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c2a4:	bf00      	nop
 800c2a6:	bf00      	nop

0800c2a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c2a8:	4808      	ldr	r0, [pc, #32]	; (800c2cc <prvPortStartFirstTask+0x24>)
 800c2aa:	6800      	ldr	r0, [r0, #0]
 800c2ac:	6800      	ldr	r0, [r0, #0]
 800c2ae:	f380 8808 	msr	MSP, r0
 800c2b2:	f04f 0000 	mov.w	r0, #0
 800c2b6:	f380 8814 	msr	CONTROL, r0
 800c2ba:	b662      	cpsie	i
 800c2bc:	b661      	cpsie	f
 800c2be:	f3bf 8f4f 	dsb	sy
 800c2c2:	f3bf 8f6f 	isb	sy
 800c2c6:	df00      	svc	0
 800c2c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c2ca:	bf00      	nop
 800c2cc:	e000ed08 	.word	0xe000ed08

0800c2d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b086      	sub	sp, #24
 800c2d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c2d6:	4b46      	ldr	r3, [pc, #280]	; (800c3f0 <xPortStartScheduler+0x120>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a46      	ldr	r2, [pc, #280]	; (800c3f4 <xPortStartScheduler+0x124>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d10a      	bne.n	800c2f6 <xPortStartScheduler+0x26>
	__asm volatile
 800c2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e4:	f383 8811 	msr	BASEPRI, r3
 800c2e8:	f3bf 8f6f 	isb	sy
 800c2ec:	f3bf 8f4f 	dsb	sy
 800c2f0:	613b      	str	r3, [r7, #16]
}
 800c2f2:	bf00      	nop
 800c2f4:	e7fe      	b.n	800c2f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c2f6:	4b3e      	ldr	r3, [pc, #248]	; (800c3f0 <xPortStartScheduler+0x120>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4a3f      	ldr	r2, [pc, #252]	; (800c3f8 <xPortStartScheduler+0x128>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d10a      	bne.n	800c316 <xPortStartScheduler+0x46>
	__asm volatile
 800c300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c304:	f383 8811 	msr	BASEPRI, r3
 800c308:	f3bf 8f6f 	isb	sy
 800c30c:	f3bf 8f4f 	dsb	sy
 800c310:	60fb      	str	r3, [r7, #12]
}
 800c312:	bf00      	nop
 800c314:	e7fe      	b.n	800c314 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c316:	4b39      	ldr	r3, [pc, #228]	; (800c3fc <xPortStartScheduler+0x12c>)
 800c318:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	b2db      	uxtb	r3, r3
 800c320:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	22ff      	movs	r2, #255	; 0xff
 800c326:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c330:	78fb      	ldrb	r3, [r7, #3]
 800c332:	b2db      	uxtb	r3, r3
 800c334:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c338:	b2da      	uxtb	r2, r3
 800c33a:	4b31      	ldr	r3, [pc, #196]	; (800c400 <xPortStartScheduler+0x130>)
 800c33c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c33e:	4b31      	ldr	r3, [pc, #196]	; (800c404 <xPortStartScheduler+0x134>)
 800c340:	2207      	movs	r2, #7
 800c342:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c344:	e009      	b.n	800c35a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c346:	4b2f      	ldr	r3, [pc, #188]	; (800c404 <xPortStartScheduler+0x134>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	3b01      	subs	r3, #1
 800c34c:	4a2d      	ldr	r2, [pc, #180]	; (800c404 <xPortStartScheduler+0x134>)
 800c34e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c350:	78fb      	ldrb	r3, [r7, #3]
 800c352:	b2db      	uxtb	r3, r3
 800c354:	005b      	lsls	r3, r3, #1
 800c356:	b2db      	uxtb	r3, r3
 800c358:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c35a:	78fb      	ldrb	r3, [r7, #3]
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c362:	2b80      	cmp	r3, #128	; 0x80
 800c364:	d0ef      	beq.n	800c346 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c366:	4b27      	ldr	r3, [pc, #156]	; (800c404 <xPortStartScheduler+0x134>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f1c3 0307 	rsb	r3, r3, #7
 800c36e:	2b04      	cmp	r3, #4
 800c370:	d00a      	beq.n	800c388 <xPortStartScheduler+0xb8>
	__asm volatile
 800c372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c376:	f383 8811 	msr	BASEPRI, r3
 800c37a:	f3bf 8f6f 	isb	sy
 800c37e:	f3bf 8f4f 	dsb	sy
 800c382:	60bb      	str	r3, [r7, #8]
}
 800c384:	bf00      	nop
 800c386:	e7fe      	b.n	800c386 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c388:	4b1e      	ldr	r3, [pc, #120]	; (800c404 <xPortStartScheduler+0x134>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	021b      	lsls	r3, r3, #8
 800c38e:	4a1d      	ldr	r2, [pc, #116]	; (800c404 <xPortStartScheduler+0x134>)
 800c390:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c392:	4b1c      	ldr	r3, [pc, #112]	; (800c404 <xPortStartScheduler+0x134>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c39a:	4a1a      	ldr	r2, [pc, #104]	; (800c404 <xPortStartScheduler+0x134>)
 800c39c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	b2da      	uxtb	r2, r3
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c3a6:	4b18      	ldr	r3, [pc, #96]	; (800c408 <xPortStartScheduler+0x138>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a17      	ldr	r2, [pc, #92]	; (800c408 <xPortStartScheduler+0x138>)
 800c3ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c3b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c3b2:	4b15      	ldr	r3, [pc, #84]	; (800c408 <xPortStartScheduler+0x138>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4a14      	ldr	r2, [pc, #80]	; (800c408 <xPortStartScheduler+0x138>)
 800c3b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c3bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c3be:	f000 f8dd 	bl	800c57c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c3c2:	4b12      	ldr	r3, [pc, #72]	; (800c40c <xPortStartScheduler+0x13c>)
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c3c8:	f000 f8fc 	bl	800c5c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c3cc:	4b10      	ldr	r3, [pc, #64]	; (800c410 <xPortStartScheduler+0x140>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a0f      	ldr	r2, [pc, #60]	; (800c410 <xPortStartScheduler+0x140>)
 800c3d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c3d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c3d8:	f7ff ff66 	bl	800c2a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c3dc:	f7ff f84a 	bl	800b474 <vTaskSwitchContext>
	prvTaskExitError();
 800c3e0:	f7ff ff20 	bl	800c224 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c3e4:	2300      	movs	r3, #0
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3718      	adds	r7, #24
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	e000ed00 	.word	0xe000ed00
 800c3f4:	410fc271 	.word	0x410fc271
 800c3f8:	410fc270 	.word	0x410fc270
 800c3fc:	e000e400 	.word	0xe000e400
 800c400:	20001154 	.word	0x20001154
 800c404:	20001158 	.word	0x20001158
 800c408:	e000ed20 	.word	0xe000ed20
 800c40c:	200000c0 	.word	0x200000c0
 800c410:	e000ef34 	.word	0xe000ef34

0800c414 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c414:	b480      	push	{r7}
 800c416:	b083      	sub	sp, #12
 800c418:	af00      	add	r7, sp, #0
	__asm volatile
 800c41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41e:	f383 8811 	msr	BASEPRI, r3
 800c422:	f3bf 8f6f 	isb	sy
 800c426:	f3bf 8f4f 	dsb	sy
 800c42a:	607b      	str	r3, [r7, #4]
}
 800c42c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c42e:	4b0f      	ldr	r3, [pc, #60]	; (800c46c <vPortEnterCritical+0x58>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	3301      	adds	r3, #1
 800c434:	4a0d      	ldr	r2, [pc, #52]	; (800c46c <vPortEnterCritical+0x58>)
 800c436:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c438:	4b0c      	ldr	r3, [pc, #48]	; (800c46c <vPortEnterCritical+0x58>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d10f      	bne.n	800c460 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c440:	4b0b      	ldr	r3, [pc, #44]	; (800c470 <vPortEnterCritical+0x5c>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	b2db      	uxtb	r3, r3
 800c446:	2b00      	cmp	r3, #0
 800c448:	d00a      	beq.n	800c460 <vPortEnterCritical+0x4c>
	__asm volatile
 800c44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44e:	f383 8811 	msr	BASEPRI, r3
 800c452:	f3bf 8f6f 	isb	sy
 800c456:	f3bf 8f4f 	dsb	sy
 800c45a:	603b      	str	r3, [r7, #0]
}
 800c45c:	bf00      	nop
 800c45e:	e7fe      	b.n	800c45e <vPortEnterCritical+0x4a>
	}
}
 800c460:	bf00      	nop
 800c462:	370c      	adds	r7, #12
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr
 800c46c:	200000c0 	.word	0x200000c0
 800c470:	e000ed04 	.word	0xe000ed04

0800c474 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c47a:	4b12      	ldr	r3, [pc, #72]	; (800c4c4 <vPortExitCritical+0x50>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d10a      	bne.n	800c498 <vPortExitCritical+0x24>
	__asm volatile
 800c482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c486:	f383 8811 	msr	BASEPRI, r3
 800c48a:	f3bf 8f6f 	isb	sy
 800c48e:	f3bf 8f4f 	dsb	sy
 800c492:	607b      	str	r3, [r7, #4]
}
 800c494:	bf00      	nop
 800c496:	e7fe      	b.n	800c496 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c498:	4b0a      	ldr	r3, [pc, #40]	; (800c4c4 <vPortExitCritical+0x50>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	3b01      	subs	r3, #1
 800c49e:	4a09      	ldr	r2, [pc, #36]	; (800c4c4 <vPortExitCritical+0x50>)
 800c4a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c4a2:	4b08      	ldr	r3, [pc, #32]	; (800c4c4 <vPortExitCritical+0x50>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d105      	bne.n	800c4b6 <vPortExitCritical+0x42>
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	f383 8811 	msr	BASEPRI, r3
}
 800c4b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c4b6:	bf00      	nop
 800c4b8:	370c      	adds	r7, #12
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr
 800c4c2:	bf00      	nop
 800c4c4:	200000c0 	.word	0x200000c0
	...

0800c4d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c4d0:	f3ef 8009 	mrs	r0, PSP
 800c4d4:	f3bf 8f6f 	isb	sy
 800c4d8:	4b15      	ldr	r3, [pc, #84]	; (800c530 <pxCurrentTCBConst>)
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	f01e 0f10 	tst.w	lr, #16
 800c4e0:	bf08      	it	eq
 800c4e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c4e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ea:	6010      	str	r0, [r2, #0]
 800c4ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c4f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c4f4:	f380 8811 	msr	BASEPRI, r0
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	f3bf 8f6f 	isb	sy
 800c500:	f7fe ffb8 	bl	800b474 <vTaskSwitchContext>
 800c504:	f04f 0000 	mov.w	r0, #0
 800c508:	f380 8811 	msr	BASEPRI, r0
 800c50c:	bc09      	pop	{r0, r3}
 800c50e:	6819      	ldr	r1, [r3, #0]
 800c510:	6808      	ldr	r0, [r1, #0]
 800c512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c516:	f01e 0f10 	tst.w	lr, #16
 800c51a:	bf08      	it	eq
 800c51c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c520:	f380 8809 	msr	PSP, r0
 800c524:	f3bf 8f6f 	isb	sy
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	f3af 8000 	nop.w

0800c530 <pxCurrentTCBConst>:
 800c530:	20000b28 	.word	0x20000b28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c534:	bf00      	nop
 800c536:	bf00      	nop

0800c538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
	__asm volatile
 800c53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c542:	f383 8811 	msr	BASEPRI, r3
 800c546:	f3bf 8f6f 	isb	sy
 800c54a:	f3bf 8f4f 	dsb	sy
 800c54e:	607b      	str	r3, [r7, #4]
}
 800c550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c552:	f7fe fed5 	bl	800b300 <xTaskIncrementTick>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d003      	beq.n	800c564 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c55c:	4b06      	ldr	r3, [pc, #24]	; (800c578 <xPortSysTickHandler+0x40>)
 800c55e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c562:	601a      	str	r2, [r3, #0]
 800c564:	2300      	movs	r3, #0
 800c566:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	f383 8811 	msr	BASEPRI, r3
}
 800c56e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c570:	bf00      	nop
 800c572:	3708      	adds	r7, #8
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}
 800c578:	e000ed04 	.word	0xe000ed04

0800c57c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c57c:	b480      	push	{r7}
 800c57e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c580:	4b0b      	ldr	r3, [pc, #44]	; (800c5b0 <vPortSetupTimerInterrupt+0x34>)
 800c582:	2200      	movs	r2, #0
 800c584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c586:	4b0b      	ldr	r3, [pc, #44]	; (800c5b4 <vPortSetupTimerInterrupt+0x38>)
 800c588:	2200      	movs	r2, #0
 800c58a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c58c:	4b0a      	ldr	r3, [pc, #40]	; (800c5b8 <vPortSetupTimerInterrupt+0x3c>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4a0a      	ldr	r2, [pc, #40]	; (800c5bc <vPortSetupTimerInterrupt+0x40>)
 800c592:	fba2 2303 	umull	r2, r3, r2, r3
 800c596:	099b      	lsrs	r3, r3, #6
 800c598:	4a09      	ldr	r2, [pc, #36]	; (800c5c0 <vPortSetupTimerInterrupt+0x44>)
 800c59a:	3b01      	subs	r3, #1
 800c59c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c59e:	4b04      	ldr	r3, [pc, #16]	; (800c5b0 <vPortSetupTimerInterrupt+0x34>)
 800c5a0:	2207      	movs	r2, #7
 800c5a2:	601a      	str	r2, [r3, #0]
}
 800c5a4:	bf00      	nop
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ac:	4770      	bx	lr
 800c5ae:	bf00      	nop
 800c5b0:	e000e010 	.word	0xe000e010
 800c5b4:	e000e018 	.word	0xe000e018
 800c5b8:	20000028 	.word	0x20000028
 800c5bc:	10624dd3 	.word	0x10624dd3
 800c5c0:	e000e014 	.word	0xe000e014

0800c5c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c5c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c5d4 <vPortEnableVFP+0x10>
 800c5c8:	6801      	ldr	r1, [r0, #0]
 800c5ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c5ce:	6001      	str	r1, [r0, #0]
 800c5d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c5d2:	bf00      	nop
 800c5d4:	e000ed88 	.word	0xe000ed88

0800c5d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c5d8:	b480      	push	{r7}
 800c5da:	b085      	sub	sp, #20
 800c5dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c5de:	f3ef 8305 	mrs	r3, IPSR
 800c5e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	2b0f      	cmp	r3, #15
 800c5e8:	d914      	bls.n	800c614 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c5ea:	4a17      	ldr	r2, [pc, #92]	; (800c648 <vPortValidateInterruptPriority+0x70>)
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	4413      	add	r3, r2
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c5f4:	4b15      	ldr	r3, [pc, #84]	; (800c64c <vPortValidateInterruptPriority+0x74>)
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	7afa      	ldrb	r2, [r7, #11]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d20a      	bcs.n	800c614 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c602:	f383 8811 	msr	BASEPRI, r3
 800c606:	f3bf 8f6f 	isb	sy
 800c60a:	f3bf 8f4f 	dsb	sy
 800c60e:	607b      	str	r3, [r7, #4]
}
 800c610:	bf00      	nop
 800c612:	e7fe      	b.n	800c612 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c614:	4b0e      	ldr	r3, [pc, #56]	; (800c650 <vPortValidateInterruptPriority+0x78>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c61c:	4b0d      	ldr	r3, [pc, #52]	; (800c654 <vPortValidateInterruptPriority+0x7c>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	429a      	cmp	r2, r3
 800c622:	d90a      	bls.n	800c63a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c628:	f383 8811 	msr	BASEPRI, r3
 800c62c:	f3bf 8f6f 	isb	sy
 800c630:	f3bf 8f4f 	dsb	sy
 800c634:	603b      	str	r3, [r7, #0]
}
 800c636:	bf00      	nop
 800c638:	e7fe      	b.n	800c638 <vPortValidateInterruptPriority+0x60>
	}
 800c63a:	bf00      	nop
 800c63c:	3714      	adds	r7, #20
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr
 800c646:	bf00      	nop
 800c648:	e000e3f0 	.word	0xe000e3f0
 800c64c:	20001154 	.word	0x20001154
 800c650:	e000ed0c 	.word	0xe000ed0c
 800c654:	20001158 	.word	0x20001158

0800c658 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b08a      	sub	sp, #40	; 0x28
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c660:	2300      	movs	r3, #0
 800c662:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c664:	f7fe fd90 	bl	800b188 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c668:	4b5b      	ldr	r3, [pc, #364]	; (800c7d8 <pvPortMalloc+0x180>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d101      	bne.n	800c674 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c670:	f000 f920 	bl	800c8b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c674:	4b59      	ldr	r3, [pc, #356]	; (800c7dc <pvPortMalloc+0x184>)
 800c676:	681a      	ldr	r2, [r3, #0]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	4013      	ands	r3, r2
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	f040 8093 	bne.w	800c7a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d01d      	beq.n	800c6c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c688:	2208      	movs	r2, #8
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	4413      	add	r3, r2
 800c68e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f003 0307 	and.w	r3, r3, #7
 800c696:	2b00      	cmp	r3, #0
 800c698:	d014      	beq.n	800c6c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f023 0307 	bic.w	r3, r3, #7
 800c6a0:	3308      	adds	r3, #8
 800c6a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f003 0307 	and.w	r3, r3, #7
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00a      	beq.n	800c6c4 <pvPortMalloc+0x6c>
	__asm volatile
 800c6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b2:	f383 8811 	msr	BASEPRI, r3
 800c6b6:	f3bf 8f6f 	isb	sy
 800c6ba:	f3bf 8f4f 	dsb	sy
 800c6be:	617b      	str	r3, [r7, #20]
}
 800c6c0:	bf00      	nop
 800c6c2:	e7fe      	b.n	800c6c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d06e      	beq.n	800c7a8 <pvPortMalloc+0x150>
 800c6ca:	4b45      	ldr	r3, [pc, #276]	; (800c7e0 <pvPortMalloc+0x188>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d869      	bhi.n	800c7a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c6d4:	4b43      	ldr	r3, [pc, #268]	; (800c7e4 <pvPortMalloc+0x18c>)
 800c6d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c6d8:	4b42      	ldr	r3, [pc, #264]	; (800c7e4 <pvPortMalloc+0x18c>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6de:	e004      	b.n	800c6ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d903      	bls.n	800c6fc <pvPortMalloc+0xa4>
 800c6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d1f1      	bne.n	800c6e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c6fc:	4b36      	ldr	r3, [pc, #216]	; (800c7d8 <pvPortMalloc+0x180>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c702:	429a      	cmp	r2, r3
 800c704:	d050      	beq.n	800c7a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c706:	6a3b      	ldr	r3, [r7, #32]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	2208      	movs	r2, #8
 800c70c:	4413      	add	r3, r2
 800c70e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c712:	681a      	ldr	r2, [r3, #0]
 800c714:	6a3b      	ldr	r3, [r7, #32]
 800c716:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71a:	685a      	ldr	r2, [r3, #4]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	1ad2      	subs	r2, r2, r3
 800c720:	2308      	movs	r3, #8
 800c722:	005b      	lsls	r3, r3, #1
 800c724:	429a      	cmp	r2, r3
 800c726:	d91f      	bls.n	800c768 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	4413      	add	r3, r2
 800c72e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c730:	69bb      	ldr	r3, [r7, #24]
 800c732:	f003 0307 	and.w	r3, r3, #7
 800c736:	2b00      	cmp	r3, #0
 800c738:	d00a      	beq.n	800c750 <pvPortMalloc+0xf8>
	__asm volatile
 800c73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73e:	f383 8811 	msr	BASEPRI, r3
 800c742:	f3bf 8f6f 	isb	sy
 800c746:	f3bf 8f4f 	dsb	sy
 800c74a:	613b      	str	r3, [r7, #16]
}
 800c74c:	bf00      	nop
 800c74e:	e7fe      	b.n	800c74e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c752:	685a      	ldr	r2, [r3, #4]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	1ad2      	subs	r2, r2, r3
 800c758:	69bb      	ldr	r3, [r7, #24]
 800c75a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c762:	69b8      	ldr	r0, [r7, #24]
 800c764:	f000 f908 	bl	800c978 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c768:	4b1d      	ldr	r3, [pc, #116]	; (800c7e0 <pvPortMalloc+0x188>)
 800c76a:	681a      	ldr	r2, [r3, #0]
 800c76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	1ad3      	subs	r3, r2, r3
 800c772:	4a1b      	ldr	r2, [pc, #108]	; (800c7e0 <pvPortMalloc+0x188>)
 800c774:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c776:	4b1a      	ldr	r3, [pc, #104]	; (800c7e0 <pvPortMalloc+0x188>)
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	4b1b      	ldr	r3, [pc, #108]	; (800c7e8 <pvPortMalloc+0x190>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	429a      	cmp	r2, r3
 800c780:	d203      	bcs.n	800c78a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c782:	4b17      	ldr	r3, [pc, #92]	; (800c7e0 <pvPortMalloc+0x188>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4a18      	ldr	r2, [pc, #96]	; (800c7e8 <pvPortMalloc+0x190>)
 800c788:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78c:	685a      	ldr	r2, [r3, #4]
 800c78e:	4b13      	ldr	r3, [pc, #76]	; (800c7dc <pvPortMalloc+0x184>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	431a      	orrs	r2, r3
 800c794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c796:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79a:	2200      	movs	r2, #0
 800c79c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c79e:	4b13      	ldr	r3, [pc, #76]	; (800c7ec <pvPortMalloc+0x194>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	4a11      	ldr	r2, [pc, #68]	; (800c7ec <pvPortMalloc+0x194>)
 800c7a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c7a8:	f7fe fcfc 	bl	800b1a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	f003 0307 	and.w	r3, r3, #7
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d00a      	beq.n	800c7cc <pvPortMalloc+0x174>
	__asm volatile
 800c7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ba:	f383 8811 	msr	BASEPRI, r3
 800c7be:	f3bf 8f6f 	isb	sy
 800c7c2:	f3bf 8f4f 	dsb	sy
 800c7c6:	60fb      	str	r3, [r7, #12]
}
 800c7c8:	bf00      	nop
 800c7ca:	e7fe      	b.n	800c7ca <pvPortMalloc+0x172>
	return pvReturn;
 800c7cc:	69fb      	ldr	r3, [r7, #28]
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3728      	adds	r7, #40	; 0x28
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
 800c7d6:	bf00      	nop
 800c7d8:	20004d64 	.word	0x20004d64
 800c7dc:	20004d78 	.word	0x20004d78
 800c7e0:	20004d68 	.word	0x20004d68
 800c7e4:	20004d5c 	.word	0x20004d5c
 800c7e8:	20004d6c 	.word	0x20004d6c
 800c7ec:	20004d70 	.word	0x20004d70

0800c7f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b086      	sub	sp, #24
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d04d      	beq.n	800c89e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c802:	2308      	movs	r3, #8
 800c804:	425b      	negs	r3, r3
 800c806:	697a      	ldr	r2, [r7, #20]
 800c808:	4413      	add	r3, r2
 800c80a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	685a      	ldr	r2, [r3, #4]
 800c814:	4b24      	ldr	r3, [pc, #144]	; (800c8a8 <vPortFree+0xb8>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4013      	ands	r3, r2
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d10a      	bne.n	800c834 <vPortFree+0x44>
	__asm volatile
 800c81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c822:	f383 8811 	msr	BASEPRI, r3
 800c826:	f3bf 8f6f 	isb	sy
 800c82a:	f3bf 8f4f 	dsb	sy
 800c82e:	60fb      	str	r3, [r7, #12]
}
 800c830:	bf00      	nop
 800c832:	e7fe      	b.n	800c832 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d00a      	beq.n	800c852 <vPortFree+0x62>
	__asm volatile
 800c83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c840:	f383 8811 	msr	BASEPRI, r3
 800c844:	f3bf 8f6f 	isb	sy
 800c848:	f3bf 8f4f 	dsb	sy
 800c84c:	60bb      	str	r3, [r7, #8]
}
 800c84e:	bf00      	nop
 800c850:	e7fe      	b.n	800c850 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	685a      	ldr	r2, [r3, #4]
 800c856:	4b14      	ldr	r3, [pc, #80]	; (800c8a8 <vPortFree+0xb8>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4013      	ands	r3, r2
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d01e      	beq.n	800c89e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d11a      	bne.n	800c89e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	685a      	ldr	r2, [r3, #4]
 800c86c:	4b0e      	ldr	r3, [pc, #56]	; (800c8a8 <vPortFree+0xb8>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	43db      	mvns	r3, r3
 800c872:	401a      	ands	r2, r3
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c878:	f7fe fc86 	bl	800b188 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	685a      	ldr	r2, [r3, #4]
 800c880:	4b0a      	ldr	r3, [pc, #40]	; (800c8ac <vPortFree+0xbc>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4413      	add	r3, r2
 800c886:	4a09      	ldr	r2, [pc, #36]	; (800c8ac <vPortFree+0xbc>)
 800c888:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c88a:	6938      	ldr	r0, [r7, #16]
 800c88c:	f000 f874 	bl	800c978 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c890:	4b07      	ldr	r3, [pc, #28]	; (800c8b0 <vPortFree+0xc0>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	3301      	adds	r3, #1
 800c896:	4a06      	ldr	r2, [pc, #24]	; (800c8b0 <vPortFree+0xc0>)
 800c898:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c89a:	f7fe fc83 	bl	800b1a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c89e:	bf00      	nop
 800c8a0:	3718      	adds	r7, #24
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	20004d78 	.word	0x20004d78
 800c8ac:	20004d68 	.word	0x20004d68
 800c8b0:	20004d74 	.word	0x20004d74

0800c8b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b085      	sub	sp, #20
 800c8b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c8ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c8be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c8c0:	4b27      	ldr	r3, [pc, #156]	; (800c960 <prvHeapInit+0xac>)
 800c8c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f003 0307 	and.w	r3, r3, #7
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00c      	beq.n	800c8e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	3307      	adds	r3, #7
 800c8d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f023 0307 	bic.w	r3, r3, #7
 800c8da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c8dc:	68ba      	ldr	r2, [r7, #8]
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	1ad3      	subs	r3, r2, r3
 800c8e2:	4a1f      	ldr	r2, [pc, #124]	; (800c960 <prvHeapInit+0xac>)
 800c8e4:	4413      	add	r3, r2
 800c8e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c8ec:	4a1d      	ldr	r2, [pc, #116]	; (800c964 <prvHeapInit+0xb0>)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c8f2:	4b1c      	ldr	r3, [pc, #112]	; (800c964 <prvHeapInit+0xb0>)
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	68ba      	ldr	r2, [r7, #8]
 800c8fc:	4413      	add	r3, r2
 800c8fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c900:	2208      	movs	r2, #8
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	1a9b      	subs	r3, r3, r2
 800c906:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	f023 0307 	bic.w	r3, r3, #7
 800c90e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	4a15      	ldr	r2, [pc, #84]	; (800c968 <prvHeapInit+0xb4>)
 800c914:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c916:	4b14      	ldr	r3, [pc, #80]	; (800c968 <prvHeapInit+0xb4>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	2200      	movs	r2, #0
 800c91c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c91e:	4b12      	ldr	r3, [pc, #72]	; (800c968 <prvHeapInit+0xb4>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	2200      	movs	r2, #0
 800c924:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	68fa      	ldr	r2, [r7, #12]
 800c92e:	1ad2      	subs	r2, r2, r3
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c934:	4b0c      	ldr	r3, [pc, #48]	; (800c968 <prvHeapInit+0xb4>)
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	4a0a      	ldr	r2, [pc, #40]	; (800c96c <prvHeapInit+0xb8>)
 800c942:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	4a09      	ldr	r2, [pc, #36]	; (800c970 <prvHeapInit+0xbc>)
 800c94a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c94c:	4b09      	ldr	r3, [pc, #36]	; (800c974 <prvHeapInit+0xc0>)
 800c94e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c952:	601a      	str	r2, [r3, #0]
}
 800c954:	bf00      	nop
 800c956:	3714      	adds	r7, #20
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr
 800c960:	2000115c 	.word	0x2000115c
 800c964:	20004d5c 	.word	0x20004d5c
 800c968:	20004d64 	.word	0x20004d64
 800c96c:	20004d6c 	.word	0x20004d6c
 800c970:	20004d68 	.word	0x20004d68
 800c974:	20004d78 	.word	0x20004d78

0800c978 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c978:	b480      	push	{r7}
 800c97a:	b085      	sub	sp, #20
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c980:	4b28      	ldr	r3, [pc, #160]	; (800ca24 <prvInsertBlockIntoFreeList+0xac>)
 800c982:	60fb      	str	r3, [r7, #12]
 800c984:	e002      	b.n	800c98c <prvInsertBlockIntoFreeList+0x14>
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	60fb      	str	r3, [r7, #12]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	687a      	ldr	r2, [r7, #4]
 800c992:	429a      	cmp	r2, r3
 800c994:	d8f7      	bhi.n	800c986 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	68ba      	ldr	r2, [r7, #8]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	687a      	ldr	r2, [r7, #4]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d108      	bne.n	800c9ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	685a      	ldr	r2, [r3, #4]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	441a      	add	r2, r3
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	68ba      	ldr	r2, [r7, #8]
 800c9c4:	441a      	add	r2, r3
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d118      	bne.n	800ca00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681a      	ldr	r2, [r3, #0]
 800c9d2:	4b15      	ldr	r3, [pc, #84]	; (800ca28 <prvInsertBlockIntoFreeList+0xb0>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d00d      	beq.n	800c9f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	685a      	ldr	r2, [r3, #4]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	441a      	add	r2, r3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	601a      	str	r2, [r3, #0]
 800c9f4:	e008      	b.n	800ca08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c9f6:	4b0c      	ldr	r3, [pc, #48]	; (800ca28 <prvInsertBlockIntoFreeList+0xb0>)
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	601a      	str	r2, [r3, #0]
 800c9fe:	e003      	b.n	800ca08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681a      	ldr	r2, [r3, #0]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ca08:	68fa      	ldr	r2, [r7, #12]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d002      	beq.n	800ca16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	687a      	ldr	r2, [r7, #4]
 800ca14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca16:	bf00      	nop
 800ca18:	3714      	adds	r7, #20
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr
 800ca22:	bf00      	nop
 800ca24:	20004d5c 	.word	0x20004d5c
 800ca28:	20004d64 	.word	0x20004d64

0800ca2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ca30:	2200      	movs	r2, #0
 800ca32:	4912      	ldr	r1, [pc, #72]	; (800ca7c <MX_USB_DEVICE_Init+0x50>)
 800ca34:	4812      	ldr	r0, [pc, #72]	; (800ca80 <MX_USB_DEVICE_Init+0x54>)
 800ca36:	f7fb ff49 	bl	80088cc <USBD_Init>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d001      	beq.n	800ca44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ca40:	f7f5 fbdc 	bl	80021fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ca44:	490f      	ldr	r1, [pc, #60]	; (800ca84 <MX_USB_DEVICE_Init+0x58>)
 800ca46:	480e      	ldr	r0, [pc, #56]	; (800ca80 <MX_USB_DEVICE_Init+0x54>)
 800ca48:	f7fb ff70 	bl	800892c <USBD_RegisterClass>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d001      	beq.n	800ca56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ca52:	f7f5 fbd3 	bl	80021fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ca56:	490c      	ldr	r1, [pc, #48]	; (800ca88 <MX_USB_DEVICE_Init+0x5c>)
 800ca58:	4809      	ldr	r0, [pc, #36]	; (800ca80 <MX_USB_DEVICE_Init+0x54>)
 800ca5a:	f7fb fea7 	bl	80087ac <USBD_CDC_RegisterInterface>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d001      	beq.n	800ca68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ca64:	f7f5 fbca 	bl	80021fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ca68:	4805      	ldr	r0, [pc, #20]	; (800ca80 <MX_USB_DEVICE_Init+0x54>)
 800ca6a:	f7fb ff95 	bl	8008998 <USBD_Start>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d001      	beq.n	800ca78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ca74:	f7f5 fbc2 	bl	80021fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ca78:	bf00      	nop
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	200000d8 	.word	0x200000d8
 800ca80:	20004d7c 	.word	0x20004d7c
 800ca84:	20000040 	.word	0x20000040
 800ca88:	200000c4 	.word	0x200000c4

0800ca8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ca90:	2200      	movs	r2, #0
 800ca92:	4905      	ldr	r1, [pc, #20]	; (800caa8 <CDC_Init_FS+0x1c>)
 800ca94:	4805      	ldr	r0, [pc, #20]	; (800caac <CDC_Init_FS+0x20>)
 800ca96:	f7fb fea3 	bl	80087e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ca9a:	4905      	ldr	r1, [pc, #20]	; (800cab0 <CDC_Init_FS+0x24>)
 800ca9c:	4803      	ldr	r0, [pc, #12]	; (800caac <CDC_Init_FS+0x20>)
 800ca9e:	f7fb fec1 	bl	8008824 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800caa2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	bd80      	pop	{r7, pc}
 800caa8:	20005858 	.word	0x20005858
 800caac:	20004d7c 	.word	0x20004d7c
 800cab0:	20005058 	.word	0x20005058

0800cab4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cab4:	b480      	push	{r7}
 800cab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cab8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800caba:	4618      	mov	r0, r3
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr

0800cac4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
 800caca:	4603      	mov	r3, r0
 800cacc:	6039      	str	r1, [r7, #0]
 800cace:	71fb      	strb	r3, [r7, #7]
 800cad0:	4613      	mov	r3, r2
 800cad2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cad4:	79fb      	ldrb	r3, [r7, #7]
 800cad6:	2b23      	cmp	r3, #35	; 0x23
 800cad8:	d84a      	bhi.n	800cb70 <CDC_Control_FS+0xac>
 800cada:	a201      	add	r2, pc, #4	; (adr r2, 800cae0 <CDC_Control_FS+0x1c>)
 800cadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cae0:	0800cb71 	.word	0x0800cb71
 800cae4:	0800cb71 	.word	0x0800cb71
 800cae8:	0800cb71 	.word	0x0800cb71
 800caec:	0800cb71 	.word	0x0800cb71
 800caf0:	0800cb71 	.word	0x0800cb71
 800caf4:	0800cb71 	.word	0x0800cb71
 800caf8:	0800cb71 	.word	0x0800cb71
 800cafc:	0800cb71 	.word	0x0800cb71
 800cb00:	0800cb71 	.word	0x0800cb71
 800cb04:	0800cb71 	.word	0x0800cb71
 800cb08:	0800cb71 	.word	0x0800cb71
 800cb0c:	0800cb71 	.word	0x0800cb71
 800cb10:	0800cb71 	.word	0x0800cb71
 800cb14:	0800cb71 	.word	0x0800cb71
 800cb18:	0800cb71 	.word	0x0800cb71
 800cb1c:	0800cb71 	.word	0x0800cb71
 800cb20:	0800cb71 	.word	0x0800cb71
 800cb24:	0800cb71 	.word	0x0800cb71
 800cb28:	0800cb71 	.word	0x0800cb71
 800cb2c:	0800cb71 	.word	0x0800cb71
 800cb30:	0800cb71 	.word	0x0800cb71
 800cb34:	0800cb71 	.word	0x0800cb71
 800cb38:	0800cb71 	.word	0x0800cb71
 800cb3c:	0800cb71 	.word	0x0800cb71
 800cb40:	0800cb71 	.word	0x0800cb71
 800cb44:	0800cb71 	.word	0x0800cb71
 800cb48:	0800cb71 	.word	0x0800cb71
 800cb4c:	0800cb71 	.word	0x0800cb71
 800cb50:	0800cb71 	.word	0x0800cb71
 800cb54:	0800cb71 	.word	0x0800cb71
 800cb58:	0800cb71 	.word	0x0800cb71
 800cb5c:	0800cb71 	.word	0x0800cb71
 800cb60:	0800cb71 	.word	0x0800cb71
 800cb64:	0800cb71 	.word	0x0800cb71
 800cb68:	0800cb71 	.word	0x0800cb71
 800cb6c:	0800cb71 	.word	0x0800cb71
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cb70:	bf00      	nop
  }

  return (USBD_OK);
 800cb72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	370c      	adds	r7, #12
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr

0800cb80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cb8a:	6879      	ldr	r1, [r7, #4]
 800cb8c:	4805      	ldr	r0, [pc, #20]	; (800cba4 <CDC_Receive_FS+0x24>)
 800cb8e:	f7fb fe49 	bl	8008824 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cb92:	4804      	ldr	r0, [pc, #16]	; (800cba4 <CDC_Receive_FS+0x24>)
 800cb94:	f7fb fe64 	bl	8008860 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cb98:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3708      	adds	r7, #8
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	20004d7c 	.word	0x20004d7c

0800cba8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b087      	sub	sp, #28
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	60f8      	str	r0, [r7, #12]
 800cbb0:	60b9      	str	r1, [r7, #8]
 800cbb2:	4613      	mov	r3, r2
 800cbb4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cbba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	371c      	adds	r7, #28
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr
	...

0800cbcc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b083      	sub	sp, #12
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	6039      	str	r1, [r7, #0]
 800cbd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	2212      	movs	r2, #18
 800cbdc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cbde:	4b03      	ldr	r3, [pc, #12]	; (800cbec <USBD_FS_DeviceDescriptor+0x20>)
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	370c      	adds	r7, #12
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr
 800cbec:	200000f4 	.word	0x200000f4

0800cbf0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b083      	sub	sp, #12
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	6039      	str	r1, [r7, #0]
 800cbfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	2204      	movs	r2, #4
 800cc00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cc02:	4b03      	ldr	r3, [pc, #12]	; (800cc10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	370c      	adds	r7, #12
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr
 800cc10:	20000108 	.word	0x20000108

0800cc14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	6039      	str	r1, [r7, #0]
 800cc1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc20:	79fb      	ldrb	r3, [r7, #7]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d105      	bne.n	800cc32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc26:	683a      	ldr	r2, [r7, #0]
 800cc28:	4907      	ldr	r1, [pc, #28]	; (800cc48 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc2a:	4808      	ldr	r0, [pc, #32]	; (800cc4c <USBD_FS_ProductStrDescriptor+0x38>)
 800cc2c:	f7fd f860 	bl	8009cf0 <USBD_GetString>
 800cc30:	e004      	b.n	800cc3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc32:	683a      	ldr	r2, [r7, #0]
 800cc34:	4904      	ldr	r1, [pc, #16]	; (800cc48 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc36:	4805      	ldr	r0, [pc, #20]	; (800cc4c <USBD_FS_ProductStrDescriptor+0x38>)
 800cc38:	f7fd f85a 	bl	8009cf0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc3c:	4b02      	ldr	r3, [pc, #8]	; (800cc48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3708      	adds	r7, #8
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop
 800cc48:	20006058 	.word	0x20006058
 800cc4c:	0800ea84 	.word	0x0800ea84

0800cc50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	4603      	mov	r3, r0
 800cc58:	6039      	str	r1, [r7, #0]
 800cc5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc5c:	683a      	ldr	r2, [r7, #0]
 800cc5e:	4904      	ldr	r1, [pc, #16]	; (800cc70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cc60:	4804      	ldr	r0, [pc, #16]	; (800cc74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cc62:	f7fd f845 	bl	8009cf0 <USBD_GetString>
  return USBD_StrDesc;
 800cc66:	4b02      	ldr	r3, [pc, #8]	; (800cc70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3708      	adds	r7, #8
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	20006058 	.word	0x20006058
 800cc74:	0800ea9c 	.word	0x0800ea9c

0800cc78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	4603      	mov	r3, r0
 800cc80:	6039      	str	r1, [r7, #0]
 800cc82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	221a      	movs	r2, #26
 800cc88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cc8a:	f000 f843 	bl	800cd14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cc8e:	4b02      	ldr	r3, [pc, #8]	; (800cc98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3708      	adds	r7, #8
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}
 800cc98:	2000010c 	.word	0x2000010c

0800cc9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b082      	sub	sp, #8
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	4603      	mov	r3, r0
 800cca4:	6039      	str	r1, [r7, #0]
 800cca6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cca8:	79fb      	ldrb	r3, [r7, #7]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d105      	bne.n	800ccba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ccae:	683a      	ldr	r2, [r7, #0]
 800ccb0:	4907      	ldr	r1, [pc, #28]	; (800ccd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ccb2:	4808      	ldr	r0, [pc, #32]	; (800ccd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ccb4:	f7fd f81c 	bl	8009cf0 <USBD_GetString>
 800ccb8:	e004      	b.n	800ccc4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ccba:	683a      	ldr	r2, [r7, #0]
 800ccbc:	4904      	ldr	r1, [pc, #16]	; (800ccd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ccbe:	4805      	ldr	r0, [pc, #20]	; (800ccd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ccc0:	f7fd f816 	bl	8009cf0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccc4:	4b02      	ldr	r3, [pc, #8]	; (800ccd0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3708      	adds	r7, #8
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	20006058 	.word	0x20006058
 800ccd4:	0800eab0 	.word	0x0800eab0

0800ccd8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	4603      	mov	r3, r0
 800cce0:	6039      	str	r1, [r7, #0]
 800cce2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cce4:	79fb      	ldrb	r3, [r7, #7]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d105      	bne.n	800ccf6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccea:	683a      	ldr	r2, [r7, #0]
 800ccec:	4907      	ldr	r1, [pc, #28]	; (800cd0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccee:	4808      	ldr	r0, [pc, #32]	; (800cd10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ccf0:	f7fc fffe 	bl	8009cf0 <USBD_GetString>
 800ccf4:	e004      	b.n	800cd00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccf6:	683a      	ldr	r2, [r7, #0]
 800ccf8:	4904      	ldr	r1, [pc, #16]	; (800cd0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccfa:	4805      	ldr	r0, [pc, #20]	; (800cd10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ccfc:	f7fc fff8 	bl	8009cf0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd00:	4b02      	ldr	r3, [pc, #8]	; (800cd0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3708      	adds	r7, #8
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	20006058 	.word	0x20006058
 800cd10:	0800eabc 	.word	0x0800eabc

0800cd14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cd1a:	4b0f      	ldr	r3, [pc, #60]	; (800cd58 <Get_SerialNum+0x44>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cd20:	4b0e      	ldr	r3, [pc, #56]	; (800cd5c <Get_SerialNum+0x48>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd26:	4b0e      	ldr	r3, [pc, #56]	; (800cd60 <Get_SerialNum+0x4c>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd2c:	68fa      	ldr	r2, [r7, #12]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	4413      	add	r3, r2
 800cd32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d009      	beq.n	800cd4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd3a:	2208      	movs	r2, #8
 800cd3c:	4909      	ldr	r1, [pc, #36]	; (800cd64 <Get_SerialNum+0x50>)
 800cd3e:	68f8      	ldr	r0, [r7, #12]
 800cd40:	f000 f814 	bl	800cd6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cd44:	2204      	movs	r2, #4
 800cd46:	4908      	ldr	r1, [pc, #32]	; (800cd68 <Get_SerialNum+0x54>)
 800cd48:	68b8      	ldr	r0, [r7, #8]
 800cd4a:	f000 f80f 	bl	800cd6c <IntToUnicode>
  }
}
 800cd4e:	bf00      	nop
 800cd50:	3710      	adds	r7, #16
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
 800cd56:	bf00      	nop
 800cd58:	1fff7a10 	.word	0x1fff7a10
 800cd5c:	1fff7a14 	.word	0x1fff7a14
 800cd60:	1fff7a18 	.word	0x1fff7a18
 800cd64:	2000010e 	.word	0x2000010e
 800cd68:	2000011e 	.word	0x2000011e

0800cd6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b087      	sub	sp, #28
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	60f8      	str	r0, [r7, #12]
 800cd74:	60b9      	str	r1, [r7, #8]
 800cd76:	4613      	mov	r3, r2
 800cd78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cd7e:	2300      	movs	r3, #0
 800cd80:	75fb      	strb	r3, [r7, #23]
 800cd82:	e027      	b.n	800cdd4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	0f1b      	lsrs	r3, r3, #28
 800cd88:	2b09      	cmp	r3, #9
 800cd8a:	d80b      	bhi.n	800cda4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	0f1b      	lsrs	r3, r3, #28
 800cd90:	b2da      	uxtb	r2, r3
 800cd92:	7dfb      	ldrb	r3, [r7, #23]
 800cd94:	005b      	lsls	r3, r3, #1
 800cd96:	4619      	mov	r1, r3
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	440b      	add	r3, r1
 800cd9c:	3230      	adds	r2, #48	; 0x30
 800cd9e:	b2d2      	uxtb	r2, r2
 800cda0:	701a      	strb	r2, [r3, #0]
 800cda2:	e00a      	b.n	800cdba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	0f1b      	lsrs	r3, r3, #28
 800cda8:	b2da      	uxtb	r2, r3
 800cdaa:	7dfb      	ldrb	r3, [r7, #23]
 800cdac:	005b      	lsls	r3, r3, #1
 800cdae:	4619      	mov	r1, r3
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	440b      	add	r3, r1
 800cdb4:	3237      	adds	r2, #55	; 0x37
 800cdb6:	b2d2      	uxtb	r2, r2
 800cdb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	011b      	lsls	r3, r3, #4
 800cdbe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cdc0:	7dfb      	ldrb	r3, [r7, #23]
 800cdc2:	005b      	lsls	r3, r3, #1
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	68ba      	ldr	r2, [r7, #8]
 800cdc8:	4413      	add	r3, r2
 800cdca:	2200      	movs	r2, #0
 800cdcc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cdce:	7dfb      	ldrb	r3, [r7, #23]
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	75fb      	strb	r3, [r7, #23]
 800cdd4:	7dfa      	ldrb	r2, [r7, #23]
 800cdd6:	79fb      	ldrb	r3, [r7, #7]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d3d3      	bcc.n	800cd84 <IntToUnicode+0x18>
  }
}
 800cddc:	bf00      	nop
 800cdde:	bf00      	nop
 800cde0:	371c      	adds	r7, #28
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr
	...

0800cdec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b08a      	sub	sp, #40	; 0x28
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cdf4:	f107 0314 	add.w	r3, r7, #20
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	601a      	str	r2, [r3, #0]
 800cdfc:	605a      	str	r2, [r3, #4]
 800cdfe:	609a      	str	r2, [r3, #8]
 800ce00:	60da      	str	r2, [r3, #12]
 800ce02:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce0c:	d13a      	bne.n	800ce84 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ce0e:	2300      	movs	r3, #0
 800ce10:	613b      	str	r3, [r7, #16]
 800ce12:	4b1e      	ldr	r3, [pc, #120]	; (800ce8c <HAL_PCD_MspInit+0xa0>)
 800ce14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce16:	4a1d      	ldr	r2, [pc, #116]	; (800ce8c <HAL_PCD_MspInit+0xa0>)
 800ce18:	f043 0301 	orr.w	r3, r3, #1
 800ce1c:	6313      	str	r3, [r2, #48]	; 0x30
 800ce1e:	4b1b      	ldr	r3, [pc, #108]	; (800ce8c <HAL_PCD_MspInit+0xa0>)
 800ce20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce22:	f003 0301 	and.w	r3, r3, #1
 800ce26:	613b      	str	r3, [r7, #16]
 800ce28:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ce2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ce2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce30:	2302      	movs	r3, #2
 800ce32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce34:	2300      	movs	r3, #0
 800ce36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce38:	2303      	movs	r3, #3
 800ce3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ce3c:	230a      	movs	r3, #10
 800ce3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce40:	f107 0314 	add.w	r3, r7, #20
 800ce44:	4619      	mov	r1, r3
 800ce46:	4812      	ldr	r0, [pc, #72]	; (800ce90 <HAL_PCD_MspInit+0xa4>)
 800ce48:	f7f6 f8e2 	bl	8003010 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ce4c:	4b0f      	ldr	r3, [pc, #60]	; (800ce8c <HAL_PCD_MspInit+0xa0>)
 800ce4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce50:	4a0e      	ldr	r2, [pc, #56]	; (800ce8c <HAL_PCD_MspInit+0xa0>)
 800ce52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce56:	6353      	str	r3, [r2, #52]	; 0x34
 800ce58:	2300      	movs	r3, #0
 800ce5a:	60fb      	str	r3, [r7, #12]
 800ce5c:	4b0b      	ldr	r3, [pc, #44]	; (800ce8c <HAL_PCD_MspInit+0xa0>)
 800ce5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce60:	4a0a      	ldr	r2, [pc, #40]	; (800ce8c <HAL_PCD_MspInit+0xa0>)
 800ce62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ce66:	6453      	str	r3, [r2, #68]	; 0x44
 800ce68:	4b08      	ldr	r3, [pc, #32]	; (800ce8c <HAL_PCD_MspInit+0xa0>)
 800ce6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce70:	60fb      	str	r3, [r7, #12]
 800ce72:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ce74:	2200      	movs	r2, #0
 800ce76:	2105      	movs	r1, #5
 800ce78:	2043      	movs	r0, #67	; 0x43
 800ce7a:	f7f5 fdb5 	bl	80029e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ce7e:	2043      	movs	r0, #67	; 0x43
 800ce80:	f7f5 fdce 	bl	8002a20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ce84:	bf00      	nop
 800ce86:	3728      	adds	r7, #40	; 0x28
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}
 800ce8c:	40023800 	.word	0x40023800
 800ce90:	40020000 	.word	0x40020000

0800ce94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b082      	sub	sp, #8
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800cea8:	4619      	mov	r1, r3
 800ceaa:	4610      	mov	r0, r2
 800ceac:	f7fb fdc1 	bl	8008a32 <USBD_LL_SetupStage>
}
 800ceb0:	bf00      	nop
 800ceb2:	3708      	adds	r7, #8
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b082      	sub	sp, #8
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	460b      	mov	r3, r1
 800cec2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ceca:	78fa      	ldrb	r2, [r7, #3]
 800cecc:	6879      	ldr	r1, [r7, #4]
 800cece:	4613      	mov	r3, r2
 800ced0:	00db      	lsls	r3, r3, #3
 800ced2:	4413      	add	r3, r2
 800ced4:	009b      	lsls	r3, r3, #2
 800ced6:	440b      	add	r3, r1
 800ced8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	78fb      	ldrb	r3, [r7, #3]
 800cee0:	4619      	mov	r1, r3
 800cee2:	f7fb fdfb 	bl	8008adc <USBD_LL_DataOutStage>
}
 800cee6:	bf00      	nop
 800cee8:	3708      	adds	r7, #8
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b082      	sub	sp, #8
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	460b      	mov	r3, r1
 800cef8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800cf00:	78fa      	ldrb	r2, [r7, #3]
 800cf02:	6879      	ldr	r1, [r7, #4]
 800cf04:	4613      	mov	r3, r2
 800cf06:	00db      	lsls	r3, r3, #3
 800cf08:	4413      	add	r3, r2
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	440b      	add	r3, r1
 800cf0e:	334c      	adds	r3, #76	; 0x4c
 800cf10:	681a      	ldr	r2, [r3, #0]
 800cf12:	78fb      	ldrb	r3, [r7, #3]
 800cf14:	4619      	mov	r1, r3
 800cf16:	f7fb fe94 	bl	8008c42 <USBD_LL_DataInStage>
}
 800cf1a:	bf00      	nop
 800cf1c:	3708      	adds	r7, #8
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}

0800cf22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf22:	b580      	push	{r7, lr}
 800cf24:	b082      	sub	sp, #8
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7fb ffc8 	bl	8008ec6 <USBD_LL_SOF>
}
 800cf36:	bf00      	nop
 800cf38:	3708      	adds	r7, #8
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}

0800cf3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf3e:	b580      	push	{r7, lr}
 800cf40:	b084      	sub	sp, #16
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cf46:	2301      	movs	r3, #1
 800cf48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	68db      	ldr	r3, [r3, #12]
 800cf4e:	2b02      	cmp	r3, #2
 800cf50:	d001      	beq.n	800cf56 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cf52:	f7f5 f953 	bl	80021fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf5c:	7bfa      	ldrb	r2, [r7, #15]
 800cf5e:	4611      	mov	r1, r2
 800cf60:	4618      	mov	r0, r3
 800cf62:	f7fb ff72 	bl	8008e4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7fb ff1a 	bl	8008da6 <USBD_LL_Reset>
}
 800cf72:	bf00      	nop
 800cf74:	3710      	adds	r7, #16
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
	...

0800cf7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7fb ff6d 	bl	8008e6a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	6812      	ldr	r2, [r2, #0]
 800cf9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cfa2:	f043 0301 	orr.w	r3, r3, #1
 800cfa6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6a1b      	ldr	r3, [r3, #32]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d005      	beq.n	800cfbc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cfb0:	4b04      	ldr	r3, [pc, #16]	; (800cfc4 <HAL_PCD_SuspendCallback+0x48>)
 800cfb2:	691b      	ldr	r3, [r3, #16]
 800cfb4:	4a03      	ldr	r2, [pc, #12]	; (800cfc4 <HAL_PCD_SuspendCallback+0x48>)
 800cfb6:	f043 0306 	orr.w	r3, r3, #6
 800cfba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cfbc:	bf00      	nop
 800cfbe:	3708      	adds	r7, #8
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	e000ed00 	.word	0xe000ed00

0800cfc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7fb ff5d 	bl	8008e96 <USBD_LL_Resume>
}
 800cfdc:	bf00      	nop
 800cfde:	3708      	adds	r7, #8
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	460b      	mov	r3, r1
 800cfee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cff6:	78fa      	ldrb	r2, [r7, #3]
 800cff8:	4611      	mov	r1, r2
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7fb ffb5 	bl	8008f6a <USBD_LL_IsoOUTIncomplete>
}
 800d000:	bf00      	nop
 800d002:	3708      	adds	r7, #8
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	460b      	mov	r3, r1
 800d012:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d01a:	78fa      	ldrb	r2, [r7, #3]
 800d01c:	4611      	mov	r1, r2
 800d01e:	4618      	mov	r0, r3
 800d020:	f7fb ff71 	bl	8008f06 <USBD_LL_IsoINIncomplete>
}
 800d024:	bf00      	nop
 800d026:	3708      	adds	r7, #8
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7fb ffc7 	bl	8008fce <USBD_LL_DevConnected>
}
 800d040:	bf00      	nop
 800d042:	3708      	adds	r7, #8
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b082      	sub	sp, #8
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d056:	4618      	mov	r0, r3
 800d058:	f7fb ffc4 	bl	8008fe4 <USBD_LL_DevDisconnected>
}
 800d05c:	bf00      	nop
 800d05e:	3708      	adds	r7, #8
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d13c      	bne.n	800d0ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d074:	4a20      	ldr	r2, [pc, #128]	; (800d0f8 <USBD_LL_Init+0x94>)
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	4a1e      	ldr	r2, [pc, #120]	; (800d0f8 <USBD_LL_Init+0x94>)
 800d080:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d084:	4b1c      	ldr	r3, [pc, #112]	; (800d0f8 <USBD_LL_Init+0x94>)
 800d086:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d08a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d08c:	4b1a      	ldr	r3, [pc, #104]	; (800d0f8 <USBD_LL_Init+0x94>)
 800d08e:	2204      	movs	r2, #4
 800d090:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d092:	4b19      	ldr	r3, [pc, #100]	; (800d0f8 <USBD_LL_Init+0x94>)
 800d094:	2202      	movs	r2, #2
 800d096:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d098:	4b17      	ldr	r3, [pc, #92]	; (800d0f8 <USBD_LL_Init+0x94>)
 800d09a:	2200      	movs	r2, #0
 800d09c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d09e:	4b16      	ldr	r3, [pc, #88]	; (800d0f8 <USBD_LL_Init+0x94>)
 800d0a0:	2202      	movs	r2, #2
 800d0a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d0a4:	4b14      	ldr	r3, [pc, #80]	; (800d0f8 <USBD_LL_Init+0x94>)
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d0aa:	4b13      	ldr	r3, [pc, #76]	; (800d0f8 <USBD_LL_Init+0x94>)
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d0b0:	4b11      	ldr	r3, [pc, #68]	; (800d0f8 <USBD_LL_Init+0x94>)
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d0b6:	4b10      	ldr	r3, [pc, #64]	; (800d0f8 <USBD_LL_Init+0x94>)
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d0bc:	4b0e      	ldr	r3, [pc, #56]	; (800d0f8 <USBD_LL_Init+0x94>)
 800d0be:	2200      	movs	r2, #0
 800d0c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d0c2:	480d      	ldr	r0, [pc, #52]	; (800d0f8 <USBD_LL_Init+0x94>)
 800d0c4:	f7f6 fa9e 	bl	8003604 <HAL_PCD_Init>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d001      	beq.n	800d0d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d0ce:	f7f5 f895 	bl	80021fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d0d2:	2180      	movs	r1, #128	; 0x80
 800d0d4:	4808      	ldr	r0, [pc, #32]	; (800d0f8 <USBD_LL_Init+0x94>)
 800d0d6:	f7f7 fcf6 	bl	8004ac6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d0da:	2240      	movs	r2, #64	; 0x40
 800d0dc:	2100      	movs	r1, #0
 800d0de:	4806      	ldr	r0, [pc, #24]	; (800d0f8 <USBD_LL_Init+0x94>)
 800d0e0:	f7f7 fcaa 	bl	8004a38 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d0e4:	2280      	movs	r2, #128	; 0x80
 800d0e6:	2101      	movs	r1, #1
 800d0e8:	4803      	ldr	r0, [pc, #12]	; (800d0f8 <USBD_LL_Init+0x94>)
 800d0ea:	f7f7 fca5 	bl	8004a38 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d0ee:	2300      	movs	r3, #0
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3708      	adds	r7, #8
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	20006258 	.word	0x20006258

0800d0fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d104:	2300      	movs	r3, #0
 800d106:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d108:	2300      	movs	r3, #0
 800d10a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d112:	4618      	mov	r0, r3
 800d114:	f7f6 fb93 	bl	800383e <HAL_PCD_Start>
 800d118:	4603      	mov	r3, r0
 800d11a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d11c:	7bfb      	ldrb	r3, [r7, #15]
 800d11e:	4618      	mov	r0, r3
 800d120:	f000 f942 	bl	800d3a8 <USBD_Get_USB_Status>
 800d124:	4603      	mov	r3, r0
 800d126:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d128:	7bbb      	ldrb	r3, [r7, #14]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3710      	adds	r7, #16
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}

0800d132 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d132:	b580      	push	{r7, lr}
 800d134:	b084      	sub	sp, #16
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
 800d13a:	4608      	mov	r0, r1
 800d13c:	4611      	mov	r1, r2
 800d13e:	461a      	mov	r2, r3
 800d140:	4603      	mov	r3, r0
 800d142:	70fb      	strb	r3, [r7, #3]
 800d144:	460b      	mov	r3, r1
 800d146:	70bb      	strb	r3, [r7, #2]
 800d148:	4613      	mov	r3, r2
 800d14a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d14c:	2300      	movs	r3, #0
 800d14e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d150:	2300      	movs	r3, #0
 800d152:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d15a:	78bb      	ldrb	r3, [r7, #2]
 800d15c:	883a      	ldrh	r2, [r7, #0]
 800d15e:	78f9      	ldrb	r1, [r7, #3]
 800d160:	f7f7 f864 	bl	800422c <HAL_PCD_EP_Open>
 800d164:	4603      	mov	r3, r0
 800d166:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d168:	7bfb      	ldrb	r3, [r7, #15]
 800d16a:	4618      	mov	r0, r3
 800d16c:	f000 f91c 	bl	800d3a8 <USBD_Get_USB_Status>
 800d170:	4603      	mov	r3, r0
 800d172:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d174:	7bbb      	ldrb	r3, [r7, #14]
}
 800d176:	4618      	mov	r0, r3
 800d178:	3710      	adds	r7, #16
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}

0800d17e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d17e:	b580      	push	{r7, lr}
 800d180:	b084      	sub	sp, #16
 800d182:	af00      	add	r7, sp, #0
 800d184:	6078      	str	r0, [r7, #4]
 800d186:	460b      	mov	r3, r1
 800d188:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d18a:	2300      	movs	r3, #0
 800d18c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d18e:	2300      	movs	r3, #0
 800d190:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d198:	78fa      	ldrb	r2, [r7, #3]
 800d19a:	4611      	mov	r1, r2
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7f7 f8ad 	bl	80042fc <HAL_PCD_EP_Close>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1a6:	7bfb      	ldrb	r3, [r7, #15]
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f000 f8fd 	bl	800d3a8 <USBD_Get_USB_Status>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3710      	adds	r7, #16
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b084      	sub	sp, #16
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d1d6:	78fa      	ldrb	r2, [r7, #3]
 800d1d8:	4611      	mov	r1, r2
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7f7 f985 	bl	80044ea <HAL_PCD_EP_SetStall>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1e4:	7bfb      	ldrb	r3, [r7, #15]
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f000 f8de 	bl	800d3a8 <USBD_Get_USB_Status>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3710      	adds	r7, #16
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}

0800d1fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1fa:	b580      	push	{r7, lr}
 800d1fc:	b084      	sub	sp, #16
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	6078      	str	r0, [r7, #4]
 800d202:	460b      	mov	r3, r1
 800d204:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d206:	2300      	movs	r3, #0
 800d208:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d20a:	2300      	movs	r3, #0
 800d20c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d214:	78fa      	ldrb	r2, [r7, #3]
 800d216:	4611      	mov	r1, r2
 800d218:	4618      	mov	r0, r3
 800d21a:	f7f7 f9ca 	bl	80045b2 <HAL_PCD_EP_ClrStall>
 800d21e:	4603      	mov	r3, r0
 800d220:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d222:	7bfb      	ldrb	r3, [r7, #15]
 800d224:	4618      	mov	r0, r3
 800d226:	f000 f8bf 	bl	800d3a8 <USBD_Get_USB_Status>
 800d22a:	4603      	mov	r3, r0
 800d22c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d22e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d230:	4618      	mov	r0, r3
 800d232:	3710      	adds	r7, #16
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d238:	b480      	push	{r7}
 800d23a:	b085      	sub	sp, #20
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	460b      	mov	r3, r1
 800d242:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d24a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d24c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d250:	2b00      	cmp	r3, #0
 800d252:	da0b      	bge.n	800d26c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d254:	78fb      	ldrb	r3, [r7, #3]
 800d256:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d25a:	68f9      	ldr	r1, [r7, #12]
 800d25c:	4613      	mov	r3, r2
 800d25e:	00db      	lsls	r3, r3, #3
 800d260:	4413      	add	r3, r2
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	440b      	add	r3, r1
 800d266:	333e      	adds	r3, #62	; 0x3e
 800d268:	781b      	ldrb	r3, [r3, #0]
 800d26a:	e00b      	b.n	800d284 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d26c:	78fb      	ldrb	r3, [r7, #3]
 800d26e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d272:	68f9      	ldr	r1, [r7, #12]
 800d274:	4613      	mov	r3, r2
 800d276:	00db      	lsls	r3, r3, #3
 800d278:	4413      	add	r3, r2
 800d27a:	009b      	lsls	r3, r3, #2
 800d27c:	440b      	add	r3, r1
 800d27e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d282:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d284:	4618      	mov	r0, r3
 800d286:	3714      	adds	r7, #20
 800d288:	46bd      	mov	sp, r7
 800d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28e:	4770      	bx	lr

0800d290 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b084      	sub	sp, #16
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	460b      	mov	r3, r1
 800d29a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d29c:	2300      	movs	r3, #0
 800d29e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d2aa:	78fa      	ldrb	r2, [r7, #3]
 800d2ac:	4611      	mov	r1, r2
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f7f6 ff97 	bl	80041e2 <HAL_PCD_SetAddress>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2b8:	7bfb      	ldrb	r3, [r7, #15]
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f000 f874 	bl	800d3a8 <USBD_Get_USB_Status>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3710      	adds	r7, #16
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}

0800d2ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d2ce:	b580      	push	{r7, lr}
 800d2d0:	b086      	sub	sp, #24
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	60f8      	str	r0, [r7, #12]
 800d2d6:	607a      	str	r2, [r7, #4]
 800d2d8:	603b      	str	r3, [r7, #0]
 800d2da:	460b      	mov	r3, r1
 800d2dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d2ec:	7af9      	ldrb	r1, [r7, #11]
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	f7f7 f8b0 	bl	8004456 <HAL_PCD_EP_Transmit>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2fa:	7dfb      	ldrb	r3, [r7, #23]
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f000 f853 	bl	800d3a8 <USBD_Get_USB_Status>
 800d302:	4603      	mov	r3, r0
 800d304:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d306:	7dbb      	ldrb	r3, [r7, #22]
}
 800d308:	4618      	mov	r0, r3
 800d30a:	3718      	adds	r7, #24
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}

0800d310 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b086      	sub	sp, #24
 800d314:	af00      	add	r7, sp, #0
 800d316:	60f8      	str	r0, [r7, #12]
 800d318:	607a      	str	r2, [r7, #4]
 800d31a:	603b      	str	r3, [r7, #0]
 800d31c:	460b      	mov	r3, r1
 800d31e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d320:	2300      	movs	r3, #0
 800d322:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d324:	2300      	movs	r3, #0
 800d326:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d32e:	7af9      	ldrb	r1, [r7, #11]
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	f7f7 f82c 	bl	8004390 <HAL_PCD_EP_Receive>
 800d338:	4603      	mov	r3, r0
 800d33a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d33c:	7dfb      	ldrb	r3, [r7, #23]
 800d33e:	4618      	mov	r0, r3
 800d340:	f000 f832 	bl	800d3a8 <USBD_Get_USB_Status>
 800d344:	4603      	mov	r3, r0
 800d346:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d348:	7dbb      	ldrb	r3, [r7, #22]
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3718      	adds	r7, #24
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}

0800d352 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d352:	b580      	push	{r7, lr}
 800d354:	b082      	sub	sp, #8
 800d356:	af00      	add	r7, sp, #0
 800d358:	6078      	str	r0, [r7, #4]
 800d35a:	460b      	mov	r3, r1
 800d35c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d364:	78fa      	ldrb	r2, [r7, #3]
 800d366:	4611      	mov	r1, r2
 800d368:	4618      	mov	r0, r3
 800d36a:	f7f7 f85c 	bl	8004426 <HAL_PCD_EP_GetRxCount>
 800d36e:	4603      	mov	r3, r0
}
 800d370:	4618      	mov	r0, r3
 800d372:	3708      	adds	r7, #8
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}

0800d378 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d378:	b480      	push	{r7}
 800d37a:	b083      	sub	sp, #12
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d380:	4b03      	ldr	r3, [pc, #12]	; (800d390 <USBD_static_malloc+0x18>)
}
 800d382:	4618      	mov	r0, r3
 800d384:	370c      	adds	r7, #12
 800d386:	46bd      	mov	sp, r7
 800d388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38c:	4770      	bx	lr
 800d38e:	bf00      	nop
 800d390:	20006764 	.word	0x20006764

0800d394 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d394:	b480      	push	{r7}
 800d396:	b083      	sub	sp, #12
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]

}
 800d39c:	bf00      	nop
 800d39e:	370c      	adds	r7, #12
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr

0800d3a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b085      	sub	sp, #20
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d3b6:	79fb      	ldrb	r3, [r7, #7]
 800d3b8:	2b03      	cmp	r3, #3
 800d3ba:	d817      	bhi.n	800d3ec <USBD_Get_USB_Status+0x44>
 800d3bc:	a201      	add	r2, pc, #4	; (adr r2, 800d3c4 <USBD_Get_USB_Status+0x1c>)
 800d3be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3c2:	bf00      	nop
 800d3c4:	0800d3d5 	.word	0x0800d3d5
 800d3c8:	0800d3db 	.word	0x0800d3db
 800d3cc:	0800d3e1 	.word	0x0800d3e1
 800d3d0:	0800d3e7 	.word	0x0800d3e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	73fb      	strb	r3, [r7, #15]
    break;
 800d3d8:	e00b      	b.n	800d3f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d3da:	2303      	movs	r3, #3
 800d3dc:	73fb      	strb	r3, [r7, #15]
    break;
 800d3de:	e008      	b.n	800d3f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	73fb      	strb	r3, [r7, #15]
    break;
 800d3e4:	e005      	b.n	800d3f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d3e6:	2303      	movs	r3, #3
 800d3e8:	73fb      	strb	r3, [r7, #15]
    break;
 800d3ea:	e002      	b.n	800d3f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d3ec:	2303      	movs	r3, #3
 800d3ee:	73fb      	strb	r3, [r7, #15]
    break;
 800d3f0:	bf00      	nop
  }
  return usb_status;
 800d3f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3714      	adds	r7, #20
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr

0800d400 <__errno>:
 800d400:	4b01      	ldr	r3, [pc, #4]	; (800d408 <__errno+0x8>)
 800d402:	6818      	ldr	r0, [r3, #0]
 800d404:	4770      	bx	lr
 800d406:	bf00      	nop
 800d408:	20000128 	.word	0x20000128

0800d40c <std>:
 800d40c:	2300      	movs	r3, #0
 800d40e:	b510      	push	{r4, lr}
 800d410:	4604      	mov	r4, r0
 800d412:	e9c0 3300 	strd	r3, r3, [r0]
 800d416:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d41a:	6083      	str	r3, [r0, #8]
 800d41c:	8181      	strh	r1, [r0, #12]
 800d41e:	6643      	str	r3, [r0, #100]	; 0x64
 800d420:	81c2      	strh	r2, [r0, #14]
 800d422:	6183      	str	r3, [r0, #24]
 800d424:	4619      	mov	r1, r3
 800d426:	2208      	movs	r2, #8
 800d428:	305c      	adds	r0, #92	; 0x5c
 800d42a:	f000 f92b 	bl	800d684 <memset>
 800d42e:	4b05      	ldr	r3, [pc, #20]	; (800d444 <std+0x38>)
 800d430:	6263      	str	r3, [r4, #36]	; 0x24
 800d432:	4b05      	ldr	r3, [pc, #20]	; (800d448 <std+0x3c>)
 800d434:	62a3      	str	r3, [r4, #40]	; 0x28
 800d436:	4b05      	ldr	r3, [pc, #20]	; (800d44c <std+0x40>)
 800d438:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d43a:	4b05      	ldr	r3, [pc, #20]	; (800d450 <std+0x44>)
 800d43c:	6224      	str	r4, [r4, #32]
 800d43e:	6323      	str	r3, [r4, #48]	; 0x30
 800d440:	bd10      	pop	{r4, pc}
 800d442:	bf00      	nop
 800d444:	0800da65 	.word	0x0800da65
 800d448:	0800da87 	.word	0x0800da87
 800d44c:	0800dabf 	.word	0x0800dabf
 800d450:	0800dae3 	.word	0x0800dae3

0800d454 <_cleanup_r>:
 800d454:	4901      	ldr	r1, [pc, #4]	; (800d45c <_cleanup_r+0x8>)
 800d456:	f000 b8af 	b.w	800d5b8 <_fwalk_reent>
 800d45a:	bf00      	nop
 800d45c:	0800ddbd 	.word	0x0800ddbd

0800d460 <__sfmoreglue>:
 800d460:	b570      	push	{r4, r5, r6, lr}
 800d462:	2268      	movs	r2, #104	; 0x68
 800d464:	1e4d      	subs	r5, r1, #1
 800d466:	4355      	muls	r5, r2
 800d468:	460e      	mov	r6, r1
 800d46a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d46e:	f000 f97d 	bl	800d76c <_malloc_r>
 800d472:	4604      	mov	r4, r0
 800d474:	b140      	cbz	r0, 800d488 <__sfmoreglue+0x28>
 800d476:	2100      	movs	r1, #0
 800d478:	e9c0 1600 	strd	r1, r6, [r0]
 800d47c:	300c      	adds	r0, #12
 800d47e:	60a0      	str	r0, [r4, #8]
 800d480:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d484:	f000 f8fe 	bl	800d684 <memset>
 800d488:	4620      	mov	r0, r4
 800d48a:	bd70      	pop	{r4, r5, r6, pc}

0800d48c <__sfp_lock_acquire>:
 800d48c:	4801      	ldr	r0, [pc, #4]	; (800d494 <__sfp_lock_acquire+0x8>)
 800d48e:	f000 b8d8 	b.w	800d642 <__retarget_lock_acquire_recursive>
 800d492:	bf00      	nop
 800d494:	20006985 	.word	0x20006985

0800d498 <__sfp_lock_release>:
 800d498:	4801      	ldr	r0, [pc, #4]	; (800d4a0 <__sfp_lock_release+0x8>)
 800d49a:	f000 b8d3 	b.w	800d644 <__retarget_lock_release_recursive>
 800d49e:	bf00      	nop
 800d4a0:	20006985 	.word	0x20006985

0800d4a4 <__sinit_lock_acquire>:
 800d4a4:	4801      	ldr	r0, [pc, #4]	; (800d4ac <__sinit_lock_acquire+0x8>)
 800d4a6:	f000 b8cc 	b.w	800d642 <__retarget_lock_acquire_recursive>
 800d4aa:	bf00      	nop
 800d4ac:	20006986 	.word	0x20006986

0800d4b0 <__sinit_lock_release>:
 800d4b0:	4801      	ldr	r0, [pc, #4]	; (800d4b8 <__sinit_lock_release+0x8>)
 800d4b2:	f000 b8c7 	b.w	800d644 <__retarget_lock_release_recursive>
 800d4b6:	bf00      	nop
 800d4b8:	20006986 	.word	0x20006986

0800d4bc <__sinit>:
 800d4bc:	b510      	push	{r4, lr}
 800d4be:	4604      	mov	r4, r0
 800d4c0:	f7ff fff0 	bl	800d4a4 <__sinit_lock_acquire>
 800d4c4:	69a3      	ldr	r3, [r4, #24]
 800d4c6:	b11b      	cbz	r3, 800d4d0 <__sinit+0x14>
 800d4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4cc:	f7ff bff0 	b.w	800d4b0 <__sinit_lock_release>
 800d4d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d4d4:	6523      	str	r3, [r4, #80]	; 0x50
 800d4d6:	4b13      	ldr	r3, [pc, #76]	; (800d524 <__sinit+0x68>)
 800d4d8:	4a13      	ldr	r2, [pc, #76]	; (800d528 <__sinit+0x6c>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800d4de:	42a3      	cmp	r3, r4
 800d4e0:	bf04      	itt	eq
 800d4e2:	2301      	moveq	r3, #1
 800d4e4:	61a3      	streq	r3, [r4, #24]
 800d4e6:	4620      	mov	r0, r4
 800d4e8:	f000 f820 	bl	800d52c <__sfp>
 800d4ec:	6060      	str	r0, [r4, #4]
 800d4ee:	4620      	mov	r0, r4
 800d4f0:	f000 f81c 	bl	800d52c <__sfp>
 800d4f4:	60a0      	str	r0, [r4, #8]
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	f000 f818 	bl	800d52c <__sfp>
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	60e0      	str	r0, [r4, #12]
 800d500:	2104      	movs	r1, #4
 800d502:	6860      	ldr	r0, [r4, #4]
 800d504:	f7ff ff82 	bl	800d40c <std>
 800d508:	68a0      	ldr	r0, [r4, #8]
 800d50a:	2201      	movs	r2, #1
 800d50c:	2109      	movs	r1, #9
 800d50e:	f7ff ff7d 	bl	800d40c <std>
 800d512:	68e0      	ldr	r0, [r4, #12]
 800d514:	2202      	movs	r2, #2
 800d516:	2112      	movs	r1, #18
 800d518:	f7ff ff78 	bl	800d40c <std>
 800d51c:	2301      	movs	r3, #1
 800d51e:	61a3      	str	r3, [r4, #24]
 800d520:	e7d2      	b.n	800d4c8 <__sinit+0xc>
 800d522:	bf00      	nop
 800d524:	08013820 	.word	0x08013820
 800d528:	0800d455 	.word	0x0800d455

0800d52c <__sfp>:
 800d52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d52e:	4607      	mov	r7, r0
 800d530:	f7ff ffac 	bl	800d48c <__sfp_lock_acquire>
 800d534:	4b1e      	ldr	r3, [pc, #120]	; (800d5b0 <__sfp+0x84>)
 800d536:	681e      	ldr	r6, [r3, #0]
 800d538:	69b3      	ldr	r3, [r6, #24]
 800d53a:	b913      	cbnz	r3, 800d542 <__sfp+0x16>
 800d53c:	4630      	mov	r0, r6
 800d53e:	f7ff ffbd 	bl	800d4bc <__sinit>
 800d542:	3648      	adds	r6, #72	; 0x48
 800d544:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d548:	3b01      	subs	r3, #1
 800d54a:	d503      	bpl.n	800d554 <__sfp+0x28>
 800d54c:	6833      	ldr	r3, [r6, #0]
 800d54e:	b30b      	cbz	r3, 800d594 <__sfp+0x68>
 800d550:	6836      	ldr	r6, [r6, #0]
 800d552:	e7f7      	b.n	800d544 <__sfp+0x18>
 800d554:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d558:	b9d5      	cbnz	r5, 800d590 <__sfp+0x64>
 800d55a:	4b16      	ldr	r3, [pc, #88]	; (800d5b4 <__sfp+0x88>)
 800d55c:	60e3      	str	r3, [r4, #12]
 800d55e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d562:	6665      	str	r5, [r4, #100]	; 0x64
 800d564:	f000 f86c 	bl	800d640 <__retarget_lock_init_recursive>
 800d568:	f7ff ff96 	bl	800d498 <__sfp_lock_release>
 800d56c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d570:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d574:	6025      	str	r5, [r4, #0]
 800d576:	61a5      	str	r5, [r4, #24]
 800d578:	2208      	movs	r2, #8
 800d57a:	4629      	mov	r1, r5
 800d57c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d580:	f000 f880 	bl	800d684 <memset>
 800d584:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d588:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d58c:	4620      	mov	r0, r4
 800d58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d590:	3468      	adds	r4, #104	; 0x68
 800d592:	e7d9      	b.n	800d548 <__sfp+0x1c>
 800d594:	2104      	movs	r1, #4
 800d596:	4638      	mov	r0, r7
 800d598:	f7ff ff62 	bl	800d460 <__sfmoreglue>
 800d59c:	4604      	mov	r4, r0
 800d59e:	6030      	str	r0, [r6, #0]
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	d1d5      	bne.n	800d550 <__sfp+0x24>
 800d5a4:	f7ff ff78 	bl	800d498 <__sfp_lock_release>
 800d5a8:	230c      	movs	r3, #12
 800d5aa:	603b      	str	r3, [r7, #0]
 800d5ac:	e7ee      	b.n	800d58c <__sfp+0x60>
 800d5ae:	bf00      	nop
 800d5b0:	08013820 	.word	0x08013820
 800d5b4:	ffff0001 	.word	0xffff0001

0800d5b8 <_fwalk_reent>:
 800d5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5bc:	4606      	mov	r6, r0
 800d5be:	4688      	mov	r8, r1
 800d5c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d5c4:	2700      	movs	r7, #0
 800d5c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d5ca:	f1b9 0901 	subs.w	r9, r9, #1
 800d5ce:	d505      	bpl.n	800d5dc <_fwalk_reent+0x24>
 800d5d0:	6824      	ldr	r4, [r4, #0]
 800d5d2:	2c00      	cmp	r4, #0
 800d5d4:	d1f7      	bne.n	800d5c6 <_fwalk_reent+0xe>
 800d5d6:	4638      	mov	r0, r7
 800d5d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5dc:	89ab      	ldrh	r3, [r5, #12]
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d907      	bls.n	800d5f2 <_fwalk_reent+0x3a>
 800d5e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d5e6:	3301      	adds	r3, #1
 800d5e8:	d003      	beq.n	800d5f2 <_fwalk_reent+0x3a>
 800d5ea:	4629      	mov	r1, r5
 800d5ec:	4630      	mov	r0, r6
 800d5ee:	47c0      	blx	r8
 800d5f0:	4307      	orrs	r7, r0
 800d5f2:	3568      	adds	r5, #104	; 0x68
 800d5f4:	e7e9      	b.n	800d5ca <_fwalk_reent+0x12>
	...

0800d5f8 <__libc_init_array>:
 800d5f8:	b570      	push	{r4, r5, r6, lr}
 800d5fa:	4d0d      	ldr	r5, [pc, #52]	; (800d630 <__libc_init_array+0x38>)
 800d5fc:	4c0d      	ldr	r4, [pc, #52]	; (800d634 <__libc_init_array+0x3c>)
 800d5fe:	1b64      	subs	r4, r4, r5
 800d600:	10a4      	asrs	r4, r4, #2
 800d602:	2600      	movs	r6, #0
 800d604:	42a6      	cmp	r6, r4
 800d606:	d109      	bne.n	800d61c <__libc_init_array+0x24>
 800d608:	4d0b      	ldr	r5, [pc, #44]	; (800d638 <__libc_init_array+0x40>)
 800d60a:	4c0c      	ldr	r4, [pc, #48]	; (800d63c <__libc_init_array+0x44>)
 800d60c:	f000 ffb8 	bl	800e580 <_init>
 800d610:	1b64      	subs	r4, r4, r5
 800d612:	10a4      	asrs	r4, r4, #2
 800d614:	2600      	movs	r6, #0
 800d616:	42a6      	cmp	r6, r4
 800d618:	d105      	bne.n	800d626 <__libc_init_array+0x2e>
 800d61a:	bd70      	pop	{r4, r5, r6, pc}
 800d61c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d620:	4798      	blx	r3
 800d622:	3601      	adds	r6, #1
 800d624:	e7ee      	b.n	800d604 <__libc_init_array+0xc>
 800d626:	f855 3b04 	ldr.w	r3, [r5], #4
 800d62a:	4798      	blx	r3
 800d62c:	3601      	adds	r6, #1
 800d62e:	e7f2      	b.n	800d616 <__libc_init_array+0x1e>
 800d630:	08013860 	.word	0x08013860
 800d634:	08013860 	.word	0x08013860
 800d638:	08013860 	.word	0x08013860
 800d63c:	08013864 	.word	0x08013864

0800d640 <__retarget_lock_init_recursive>:
 800d640:	4770      	bx	lr

0800d642 <__retarget_lock_acquire_recursive>:
 800d642:	4770      	bx	lr

0800d644 <__retarget_lock_release_recursive>:
 800d644:	4770      	bx	lr
	...

0800d648 <malloc>:
 800d648:	4b02      	ldr	r3, [pc, #8]	; (800d654 <malloc+0xc>)
 800d64a:	4601      	mov	r1, r0
 800d64c:	6818      	ldr	r0, [r3, #0]
 800d64e:	f000 b88d 	b.w	800d76c <_malloc_r>
 800d652:	bf00      	nop
 800d654:	20000128 	.word	0x20000128

0800d658 <free>:
 800d658:	4b02      	ldr	r3, [pc, #8]	; (800d664 <free+0xc>)
 800d65a:	4601      	mov	r1, r0
 800d65c:	6818      	ldr	r0, [r3, #0]
 800d65e:	f000 b819 	b.w	800d694 <_free_r>
 800d662:	bf00      	nop
 800d664:	20000128 	.word	0x20000128

0800d668 <memcpy>:
 800d668:	440a      	add	r2, r1
 800d66a:	4291      	cmp	r1, r2
 800d66c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d670:	d100      	bne.n	800d674 <memcpy+0xc>
 800d672:	4770      	bx	lr
 800d674:	b510      	push	{r4, lr}
 800d676:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d67a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d67e:	4291      	cmp	r1, r2
 800d680:	d1f9      	bne.n	800d676 <memcpy+0xe>
 800d682:	bd10      	pop	{r4, pc}

0800d684 <memset>:
 800d684:	4402      	add	r2, r0
 800d686:	4603      	mov	r3, r0
 800d688:	4293      	cmp	r3, r2
 800d68a:	d100      	bne.n	800d68e <memset+0xa>
 800d68c:	4770      	bx	lr
 800d68e:	f803 1b01 	strb.w	r1, [r3], #1
 800d692:	e7f9      	b.n	800d688 <memset+0x4>

0800d694 <_free_r>:
 800d694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d696:	2900      	cmp	r1, #0
 800d698:	d044      	beq.n	800d724 <_free_r+0x90>
 800d69a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d69e:	9001      	str	r0, [sp, #4]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	f1a1 0404 	sub.w	r4, r1, #4
 800d6a6:	bfb8      	it	lt
 800d6a8:	18e4      	addlt	r4, r4, r3
 800d6aa:	f000 fc3b 	bl	800df24 <__malloc_lock>
 800d6ae:	4a1e      	ldr	r2, [pc, #120]	; (800d728 <_free_r+0x94>)
 800d6b0:	9801      	ldr	r0, [sp, #4]
 800d6b2:	6813      	ldr	r3, [r2, #0]
 800d6b4:	b933      	cbnz	r3, 800d6c4 <_free_r+0x30>
 800d6b6:	6063      	str	r3, [r4, #4]
 800d6b8:	6014      	str	r4, [r2, #0]
 800d6ba:	b003      	add	sp, #12
 800d6bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d6c0:	f000 bc36 	b.w	800df30 <__malloc_unlock>
 800d6c4:	42a3      	cmp	r3, r4
 800d6c6:	d908      	bls.n	800d6da <_free_r+0x46>
 800d6c8:	6825      	ldr	r5, [r4, #0]
 800d6ca:	1961      	adds	r1, r4, r5
 800d6cc:	428b      	cmp	r3, r1
 800d6ce:	bf01      	itttt	eq
 800d6d0:	6819      	ldreq	r1, [r3, #0]
 800d6d2:	685b      	ldreq	r3, [r3, #4]
 800d6d4:	1949      	addeq	r1, r1, r5
 800d6d6:	6021      	streq	r1, [r4, #0]
 800d6d8:	e7ed      	b.n	800d6b6 <_free_r+0x22>
 800d6da:	461a      	mov	r2, r3
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	b10b      	cbz	r3, 800d6e4 <_free_r+0x50>
 800d6e0:	42a3      	cmp	r3, r4
 800d6e2:	d9fa      	bls.n	800d6da <_free_r+0x46>
 800d6e4:	6811      	ldr	r1, [r2, #0]
 800d6e6:	1855      	adds	r5, r2, r1
 800d6e8:	42a5      	cmp	r5, r4
 800d6ea:	d10b      	bne.n	800d704 <_free_r+0x70>
 800d6ec:	6824      	ldr	r4, [r4, #0]
 800d6ee:	4421      	add	r1, r4
 800d6f0:	1854      	adds	r4, r2, r1
 800d6f2:	42a3      	cmp	r3, r4
 800d6f4:	6011      	str	r1, [r2, #0]
 800d6f6:	d1e0      	bne.n	800d6ba <_free_r+0x26>
 800d6f8:	681c      	ldr	r4, [r3, #0]
 800d6fa:	685b      	ldr	r3, [r3, #4]
 800d6fc:	6053      	str	r3, [r2, #4]
 800d6fe:	4421      	add	r1, r4
 800d700:	6011      	str	r1, [r2, #0]
 800d702:	e7da      	b.n	800d6ba <_free_r+0x26>
 800d704:	d902      	bls.n	800d70c <_free_r+0x78>
 800d706:	230c      	movs	r3, #12
 800d708:	6003      	str	r3, [r0, #0]
 800d70a:	e7d6      	b.n	800d6ba <_free_r+0x26>
 800d70c:	6825      	ldr	r5, [r4, #0]
 800d70e:	1961      	adds	r1, r4, r5
 800d710:	428b      	cmp	r3, r1
 800d712:	bf04      	itt	eq
 800d714:	6819      	ldreq	r1, [r3, #0]
 800d716:	685b      	ldreq	r3, [r3, #4]
 800d718:	6063      	str	r3, [r4, #4]
 800d71a:	bf04      	itt	eq
 800d71c:	1949      	addeq	r1, r1, r5
 800d71e:	6021      	streq	r1, [r4, #0]
 800d720:	6054      	str	r4, [r2, #4]
 800d722:	e7ca      	b.n	800d6ba <_free_r+0x26>
 800d724:	b003      	add	sp, #12
 800d726:	bd30      	pop	{r4, r5, pc}
 800d728:	20006988 	.word	0x20006988

0800d72c <sbrk_aligned>:
 800d72c:	b570      	push	{r4, r5, r6, lr}
 800d72e:	4e0e      	ldr	r6, [pc, #56]	; (800d768 <sbrk_aligned+0x3c>)
 800d730:	460c      	mov	r4, r1
 800d732:	6831      	ldr	r1, [r6, #0]
 800d734:	4605      	mov	r5, r0
 800d736:	b911      	cbnz	r1, 800d73e <sbrk_aligned+0x12>
 800d738:	f000 f984 	bl	800da44 <_sbrk_r>
 800d73c:	6030      	str	r0, [r6, #0]
 800d73e:	4621      	mov	r1, r4
 800d740:	4628      	mov	r0, r5
 800d742:	f000 f97f 	bl	800da44 <_sbrk_r>
 800d746:	1c43      	adds	r3, r0, #1
 800d748:	d00a      	beq.n	800d760 <sbrk_aligned+0x34>
 800d74a:	1cc4      	adds	r4, r0, #3
 800d74c:	f024 0403 	bic.w	r4, r4, #3
 800d750:	42a0      	cmp	r0, r4
 800d752:	d007      	beq.n	800d764 <sbrk_aligned+0x38>
 800d754:	1a21      	subs	r1, r4, r0
 800d756:	4628      	mov	r0, r5
 800d758:	f000 f974 	bl	800da44 <_sbrk_r>
 800d75c:	3001      	adds	r0, #1
 800d75e:	d101      	bne.n	800d764 <sbrk_aligned+0x38>
 800d760:	f04f 34ff 	mov.w	r4, #4294967295
 800d764:	4620      	mov	r0, r4
 800d766:	bd70      	pop	{r4, r5, r6, pc}
 800d768:	2000698c 	.word	0x2000698c

0800d76c <_malloc_r>:
 800d76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d770:	1ccd      	adds	r5, r1, #3
 800d772:	f025 0503 	bic.w	r5, r5, #3
 800d776:	3508      	adds	r5, #8
 800d778:	2d0c      	cmp	r5, #12
 800d77a:	bf38      	it	cc
 800d77c:	250c      	movcc	r5, #12
 800d77e:	2d00      	cmp	r5, #0
 800d780:	4607      	mov	r7, r0
 800d782:	db01      	blt.n	800d788 <_malloc_r+0x1c>
 800d784:	42a9      	cmp	r1, r5
 800d786:	d905      	bls.n	800d794 <_malloc_r+0x28>
 800d788:	230c      	movs	r3, #12
 800d78a:	603b      	str	r3, [r7, #0]
 800d78c:	2600      	movs	r6, #0
 800d78e:	4630      	mov	r0, r6
 800d790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d794:	4e2e      	ldr	r6, [pc, #184]	; (800d850 <_malloc_r+0xe4>)
 800d796:	f000 fbc5 	bl	800df24 <__malloc_lock>
 800d79a:	6833      	ldr	r3, [r6, #0]
 800d79c:	461c      	mov	r4, r3
 800d79e:	bb34      	cbnz	r4, 800d7ee <_malloc_r+0x82>
 800d7a0:	4629      	mov	r1, r5
 800d7a2:	4638      	mov	r0, r7
 800d7a4:	f7ff ffc2 	bl	800d72c <sbrk_aligned>
 800d7a8:	1c43      	adds	r3, r0, #1
 800d7aa:	4604      	mov	r4, r0
 800d7ac:	d14d      	bne.n	800d84a <_malloc_r+0xde>
 800d7ae:	6834      	ldr	r4, [r6, #0]
 800d7b0:	4626      	mov	r6, r4
 800d7b2:	2e00      	cmp	r6, #0
 800d7b4:	d140      	bne.n	800d838 <_malloc_r+0xcc>
 800d7b6:	6823      	ldr	r3, [r4, #0]
 800d7b8:	4631      	mov	r1, r6
 800d7ba:	4638      	mov	r0, r7
 800d7bc:	eb04 0803 	add.w	r8, r4, r3
 800d7c0:	f000 f940 	bl	800da44 <_sbrk_r>
 800d7c4:	4580      	cmp	r8, r0
 800d7c6:	d13a      	bne.n	800d83e <_malloc_r+0xd2>
 800d7c8:	6821      	ldr	r1, [r4, #0]
 800d7ca:	3503      	adds	r5, #3
 800d7cc:	1a6d      	subs	r5, r5, r1
 800d7ce:	f025 0503 	bic.w	r5, r5, #3
 800d7d2:	3508      	adds	r5, #8
 800d7d4:	2d0c      	cmp	r5, #12
 800d7d6:	bf38      	it	cc
 800d7d8:	250c      	movcc	r5, #12
 800d7da:	4629      	mov	r1, r5
 800d7dc:	4638      	mov	r0, r7
 800d7de:	f7ff ffa5 	bl	800d72c <sbrk_aligned>
 800d7e2:	3001      	adds	r0, #1
 800d7e4:	d02b      	beq.n	800d83e <_malloc_r+0xd2>
 800d7e6:	6823      	ldr	r3, [r4, #0]
 800d7e8:	442b      	add	r3, r5
 800d7ea:	6023      	str	r3, [r4, #0]
 800d7ec:	e00e      	b.n	800d80c <_malloc_r+0xa0>
 800d7ee:	6822      	ldr	r2, [r4, #0]
 800d7f0:	1b52      	subs	r2, r2, r5
 800d7f2:	d41e      	bmi.n	800d832 <_malloc_r+0xc6>
 800d7f4:	2a0b      	cmp	r2, #11
 800d7f6:	d916      	bls.n	800d826 <_malloc_r+0xba>
 800d7f8:	1961      	adds	r1, r4, r5
 800d7fa:	42a3      	cmp	r3, r4
 800d7fc:	6025      	str	r5, [r4, #0]
 800d7fe:	bf18      	it	ne
 800d800:	6059      	strne	r1, [r3, #4]
 800d802:	6863      	ldr	r3, [r4, #4]
 800d804:	bf08      	it	eq
 800d806:	6031      	streq	r1, [r6, #0]
 800d808:	5162      	str	r2, [r4, r5]
 800d80a:	604b      	str	r3, [r1, #4]
 800d80c:	4638      	mov	r0, r7
 800d80e:	f104 060b 	add.w	r6, r4, #11
 800d812:	f000 fb8d 	bl	800df30 <__malloc_unlock>
 800d816:	f026 0607 	bic.w	r6, r6, #7
 800d81a:	1d23      	adds	r3, r4, #4
 800d81c:	1af2      	subs	r2, r6, r3
 800d81e:	d0b6      	beq.n	800d78e <_malloc_r+0x22>
 800d820:	1b9b      	subs	r3, r3, r6
 800d822:	50a3      	str	r3, [r4, r2]
 800d824:	e7b3      	b.n	800d78e <_malloc_r+0x22>
 800d826:	6862      	ldr	r2, [r4, #4]
 800d828:	42a3      	cmp	r3, r4
 800d82a:	bf0c      	ite	eq
 800d82c:	6032      	streq	r2, [r6, #0]
 800d82e:	605a      	strne	r2, [r3, #4]
 800d830:	e7ec      	b.n	800d80c <_malloc_r+0xa0>
 800d832:	4623      	mov	r3, r4
 800d834:	6864      	ldr	r4, [r4, #4]
 800d836:	e7b2      	b.n	800d79e <_malloc_r+0x32>
 800d838:	4634      	mov	r4, r6
 800d83a:	6876      	ldr	r6, [r6, #4]
 800d83c:	e7b9      	b.n	800d7b2 <_malloc_r+0x46>
 800d83e:	230c      	movs	r3, #12
 800d840:	603b      	str	r3, [r7, #0]
 800d842:	4638      	mov	r0, r7
 800d844:	f000 fb74 	bl	800df30 <__malloc_unlock>
 800d848:	e7a1      	b.n	800d78e <_malloc_r+0x22>
 800d84a:	6025      	str	r5, [r4, #0]
 800d84c:	e7de      	b.n	800d80c <_malloc_r+0xa0>
 800d84e:	bf00      	nop
 800d850:	20006988 	.word	0x20006988

0800d854 <iprintf>:
 800d854:	b40f      	push	{r0, r1, r2, r3}
 800d856:	4b0a      	ldr	r3, [pc, #40]	; (800d880 <iprintf+0x2c>)
 800d858:	b513      	push	{r0, r1, r4, lr}
 800d85a:	681c      	ldr	r4, [r3, #0]
 800d85c:	b124      	cbz	r4, 800d868 <iprintf+0x14>
 800d85e:	69a3      	ldr	r3, [r4, #24]
 800d860:	b913      	cbnz	r3, 800d868 <iprintf+0x14>
 800d862:	4620      	mov	r0, r4
 800d864:	f7ff fe2a 	bl	800d4bc <__sinit>
 800d868:	ab05      	add	r3, sp, #20
 800d86a:	9a04      	ldr	r2, [sp, #16]
 800d86c:	68a1      	ldr	r1, [r4, #8]
 800d86e:	9301      	str	r3, [sp, #4]
 800d870:	4620      	mov	r0, r4
 800d872:	f000 fb8d 	bl	800df90 <_vfiprintf_r>
 800d876:	b002      	add	sp, #8
 800d878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d87c:	b004      	add	sp, #16
 800d87e:	4770      	bx	lr
 800d880:	20000128 	.word	0x20000128

0800d884 <_puts_r>:
 800d884:	b570      	push	{r4, r5, r6, lr}
 800d886:	460e      	mov	r6, r1
 800d888:	4605      	mov	r5, r0
 800d88a:	b118      	cbz	r0, 800d894 <_puts_r+0x10>
 800d88c:	6983      	ldr	r3, [r0, #24]
 800d88e:	b90b      	cbnz	r3, 800d894 <_puts_r+0x10>
 800d890:	f7ff fe14 	bl	800d4bc <__sinit>
 800d894:	69ab      	ldr	r3, [r5, #24]
 800d896:	68ac      	ldr	r4, [r5, #8]
 800d898:	b913      	cbnz	r3, 800d8a0 <_puts_r+0x1c>
 800d89a:	4628      	mov	r0, r5
 800d89c:	f7ff fe0e 	bl	800d4bc <__sinit>
 800d8a0:	4b2c      	ldr	r3, [pc, #176]	; (800d954 <_puts_r+0xd0>)
 800d8a2:	429c      	cmp	r4, r3
 800d8a4:	d120      	bne.n	800d8e8 <_puts_r+0x64>
 800d8a6:	686c      	ldr	r4, [r5, #4]
 800d8a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8aa:	07db      	lsls	r3, r3, #31
 800d8ac:	d405      	bmi.n	800d8ba <_puts_r+0x36>
 800d8ae:	89a3      	ldrh	r3, [r4, #12]
 800d8b0:	0598      	lsls	r0, r3, #22
 800d8b2:	d402      	bmi.n	800d8ba <_puts_r+0x36>
 800d8b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8b6:	f7ff fec4 	bl	800d642 <__retarget_lock_acquire_recursive>
 800d8ba:	89a3      	ldrh	r3, [r4, #12]
 800d8bc:	0719      	lsls	r1, r3, #28
 800d8be:	d51d      	bpl.n	800d8fc <_puts_r+0x78>
 800d8c0:	6923      	ldr	r3, [r4, #16]
 800d8c2:	b1db      	cbz	r3, 800d8fc <_puts_r+0x78>
 800d8c4:	3e01      	subs	r6, #1
 800d8c6:	68a3      	ldr	r3, [r4, #8]
 800d8c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d8cc:	3b01      	subs	r3, #1
 800d8ce:	60a3      	str	r3, [r4, #8]
 800d8d0:	bb39      	cbnz	r1, 800d922 <_puts_r+0x9e>
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	da38      	bge.n	800d948 <_puts_r+0xc4>
 800d8d6:	4622      	mov	r2, r4
 800d8d8:	210a      	movs	r1, #10
 800d8da:	4628      	mov	r0, r5
 800d8dc:	f000 f906 	bl	800daec <__swbuf_r>
 800d8e0:	3001      	adds	r0, #1
 800d8e2:	d011      	beq.n	800d908 <_puts_r+0x84>
 800d8e4:	250a      	movs	r5, #10
 800d8e6:	e011      	b.n	800d90c <_puts_r+0x88>
 800d8e8:	4b1b      	ldr	r3, [pc, #108]	; (800d958 <_puts_r+0xd4>)
 800d8ea:	429c      	cmp	r4, r3
 800d8ec:	d101      	bne.n	800d8f2 <_puts_r+0x6e>
 800d8ee:	68ac      	ldr	r4, [r5, #8]
 800d8f0:	e7da      	b.n	800d8a8 <_puts_r+0x24>
 800d8f2:	4b1a      	ldr	r3, [pc, #104]	; (800d95c <_puts_r+0xd8>)
 800d8f4:	429c      	cmp	r4, r3
 800d8f6:	bf08      	it	eq
 800d8f8:	68ec      	ldreq	r4, [r5, #12]
 800d8fa:	e7d5      	b.n	800d8a8 <_puts_r+0x24>
 800d8fc:	4621      	mov	r1, r4
 800d8fe:	4628      	mov	r0, r5
 800d900:	f000 f958 	bl	800dbb4 <__swsetup_r>
 800d904:	2800      	cmp	r0, #0
 800d906:	d0dd      	beq.n	800d8c4 <_puts_r+0x40>
 800d908:	f04f 35ff 	mov.w	r5, #4294967295
 800d90c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d90e:	07da      	lsls	r2, r3, #31
 800d910:	d405      	bmi.n	800d91e <_puts_r+0x9a>
 800d912:	89a3      	ldrh	r3, [r4, #12]
 800d914:	059b      	lsls	r3, r3, #22
 800d916:	d402      	bmi.n	800d91e <_puts_r+0x9a>
 800d918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d91a:	f7ff fe93 	bl	800d644 <__retarget_lock_release_recursive>
 800d91e:	4628      	mov	r0, r5
 800d920:	bd70      	pop	{r4, r5, r6, pc}
 800d922:	2b00      	cmp	r3, #0
 800d924:	da04      	bge.n	800d930 <_puts_r+0xac>
 800d926:	69a2      	ldr	r2, [r4, #24]
 800d928:	429a      	cmp	r2, r3
 800d92a:	dc06      	bgt.n	800d93a <_puts_r+0xb6>
 800d92c:	290a      	cmp	r1, #10
 800d92e:	d004      	beq.n	800d93a <_puts_r+0xb6>
 800d930:	6823      	ldr	r3, [r4, #0]
 800d932:	1c5a      	adds	r2, r3, #1
 800d934:	6022      	str	r2, [r4, #0]
 800d936:	7019      	strb	r1, [r3, #0]
 800d938:	e7c5      	b.n	800d8c6 <_puts_r+0x42>
 800d93a:	4622      	mov	r2, r4
 800d93c:	4628      	mov	r0, r5
 800d93e:	f000 f8d5 	bl	800daec <__swbuf_r>
 800d942:	3001      	adds	r0, #1
 800d944:	d1bf      	bne.n	800d8c6 <_puts_r+0x42>
 800d946:	e7df      	b.n	800d908 <_puts_r+0x84>
 800d948:	6823      	ldr	r3, [r4, #0]
 800d94a:	250a      	movs	r5, #10
 800d94c:	1c5a      	adds	r2, r3, #1
 800d94e:	6022      	str	r2, [r4, #0]
 800d950:	701d      	strb	r5, [r3, #0]
 800d952:	e7db      	b.n	800d90c <_puts_r+0x88>
 800d954:	080137e0 	.word	0x080137e0
 800d958:	08013800 	.word	0x08013800
 800d95c:	080137c0 	.word	0x080137c0

0800d960 <puts>:
 800d960:	4b02      	ldr	r3, [pc, #8]	; (800d96c <puts+0xc>)
 800d962:	4601      	mov	r1, r0
 800d964:	6818      	ldr	r0, [r3, #0]
 800d966:	f7ff bf8d 	b.w	800d884 <_puts_r>
 800d96a:	bf00      	nop
 800d96c:	20000128 	.word	0x20000128

0800d970 <cleanup_glue>:
 800d970:	b538      	push	{r3, r4, r5, lr}
 800d972:	460c      	mov	r4, r1
 800d974:	6809      	ldr	r1, [r1, #0]
 800d976:	4605      	mov	r5, r0
 800d978:	b109      	cbz	r1, 800d97e <cleanup_glue+0xe>
 800d97a:	f7ff fff9 	bl	800d970 <cleanup_glue>
 800d97e:	4621      	mov	r1, r4
 800d980:	4628      	mov	r0, r5
 800d982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d986:	f7ff be85 	b.w	800d694 <_free_r>
	...

0800d98c <_reclaim_reent>:
 800d98c:	4b2c      	ldr	r3, [pc, #176]	; (800da40 <_reclaim_reent+0xb4>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4283      	cmp	r3, r0
 800d992:	b570      	push	{r4, r5, r6, lr}
 800d994:	4604      	mov	r4, r0
 800d996:	d051      	beq.n	800da3c <_reclaim_reent+0xb0>
 800d998:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d99a:	b143      	cbz	r3, 800d9ae <_reclaim_reent+0x22>
 800d99c:	68db      	ldr	r3, [r3, #12]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d14a      	bne.n	800da38 <_reclaim_reent+0xac>
 800d9a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9a4:	6819      	ldr	r1, [r3, #0]
 800d9a6:	b111      	cbz	r1, 800d9ae <_reclaim_reent+0x22>
 800d9a8:	4620      	mov	r0, r4
 800d9aa:	f7ff fe73 	bl	800d694 <_free_r>
 800d9ae:	6961      	ldr	r1, [r4, #20]
 800d9b0:	b111      	cbz	r1, 800d9b8 <_reclaim_reent+0x2c>
 800d9b2:	4620      	mov	r0, r4
 800d9b4:	f7ff fe6e 	bl	800d694 <_free_r>
 800d9b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d9ba:	b111      	cbz	r1, 800d9c2 <_reclaim_reent+0x36>
 800d9bc:	4620      	mov	r0, r4
 800d9be:	f7ff fe69 	bl	800d694 <_free_r>
 800d9c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d9c4:	b111      	cbz	r1, 800d9cc <_reclaim_reent+0x40>
 800d9c6:	4620      	mov	r0, r4
 800d9c8:	f7ff fe64 	bl	800d694 <_free_r>
 800d9cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d9ce:	b111      	cbz	r1, 800d9d6 <_reclaim_reent+0x4a>
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	f7ff fe5f 	bl	800d694 <_free_r>
 800d9d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d9d8:	b111      	cbz	r1, 800d9e0 <_reclaim_reent+0x54>
 800d9da:	4620      	mov	r0, r4
 800d9dc:	f7ff fe5a 	bl	800d694 <_free_r>
 800d9e0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d9e2:	b111      	cbz	r1, 800d9ea <_reclaim_reent+0x5e>
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	f7ff fe55 	bl	800d694 <_free_r>
 800d9ea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d9ec:	b111      	cbz	r1, 800d9f4 <_reclaim_reent+0x68>
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	f7ff fe50 	bl	800d694 <_free_r>
 800d9f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d9f6:	b111      	cbz	r1, 800d9fe <_reclaim_reent+0x72>
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	f7ff fe4b 	bl	800d694 <_free_r>
 800d9fe:	69a3      	ldr	r3, [r4, #24]
 800da00:	b1e3      	cbz	r3, 800da3c <_reclaim_reent+0xb0>
 800da02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800da04:	4620      	mov	r0, r4
 800da06:	4798      	blx	r3
 800da08:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800da0a:	b1b9      	cbz	r1, 800da3c <_reclaim_reent+0xb0>
 800da0c:	4620      	mov	r0, r4
 800da0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800da12:	f7ff bfad 	b.w	800d970 <cleanup_glue>
 800da16:	5949      	ldr	r1, [r1, r5]
 800da18:	b941      	cbnz	r1, 800da2c <_reclaim_reent+0xa0>
 800da1a:	3504      	adds	r5, #4
 800da1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da1e:	2d80      	cmp	r5, #128	; 0x80
 800da20:	68d9      	ldr	r1, [r3, #12]
 800da22:	d1f8      	bne.n	800da16 <_reclaim_reent+0x8a>
 800da24:	4620      	mov	r0, r4
 800da26:	f7ff fe35 	bl	800d694 <_free_r>
 800da2a:	e7ba      	b.n	800d9a2 <_reclaim_reent+0x16>
 800da2c:	680e      	ldr	r6, [r1, #0]
 800da2e:	4620      	mov	r0, r4
 800da30:	f7ff fe30 	bl	800d694 <_free_r>
 800da34:	4631      	mov	r1, r6
 800da36:	e7ef      	b.n	800da18 <_reclaim_reent+0x8c>
 800da38:	2500      	movs	r5, #0
 800da3a:	e7ef      	b.n	800da1c <_reclaim_reent+0x90>
 800da3c:	bd70      	pop	{r4, r5, r6, pc}
 800da3e:	bf00      	nop
 800da40:	20000128 	.word	0x20000128

0800da44 <_sbrk_r>:
 800da44:	b538      	push	{r3, r4, r5, lr}
 800da46:	4d06      	ldr	r5, [pc, #24]	; (800da60 <_sbrk_r+0x1c>)
 800da48:	2300      	movs	r3, #0
 800da4a:	4604      	mov	r4, r0
 800da4c:	4608      	mov	r0, r1
 800da4e:	602b      	str	r3, [r5, #0]
 800da50:	f7f4 fe3a 	bl	80026c8 <_sbrk>
 800da54:	1c43      	adds	r3, r0, #1
 800da56:	d102      	bne.n	800da5e <_sbrk_r+0x1a>
 800da58:	682b      	ldr	r3, [r5, #0]
 800da5a:	b103      	cbz	r3, 800da5e <_sbrk_r+0x1a>
 800da5c:	6023      	str	r3, [r4, #0]
 800da5e:	bd38      	pop	{r3, r4, r5, pc}
 800da60:	20006990 	.word	0x20006990

0800da64 <__sread>:
 800da64:	b510      	push	{r4, lr}
 800da66:	460c      	mov	r4, r1
 800da68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da6c:	f000 fd54 	bl	800e518 <_read_r>
 800da70:	2800      	cmp	r0, #0
 800da72:	bfab      	itete	ge
 800da74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da76:	89a3      	ldrhlt	r3, [r4, #12]
 800da78:	181b      	addge	r3, r3, r0
 800da7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800da7e:	bfac      	ite	ge
 800da80:	6563      	strge	r3, [r4, #84]	; 0x54
 800da82:	81a3      	strhlt	r3, [r4, #12]
 800da84:	bd10      	pop	{r4, pc}

0800da86 <__swrite>:
 800da86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da8a:	461f      	mov	r7, r3
 800da8c:	898b      	ldrh	r3, [r1, #12]
 800da8e:	05db      	lsls	r3, r3, #23
 800da90:	4605      	mov	r5, r0
 800da92:	460c      	mov	r4, r1
 800da94:	4616      	mov	r6, r2
 800da96:	d505      	bpl.n	800daa4 <__swrite+0x1e>
 800da98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da9c:	2302      	movs	r3, #2
 800da9e:	2200      	movs	r2, #0
 800daa0:	f000 f9c8 	bl	800de34 <_lseek_r>
 800daa4:	89a3      	ldrh	r3, [r4, #12]
 800daa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800daaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800daae:	81a3      	strh	r3, [r4, #12]
 800dab0:	4632      	mov	r2, r6
 800dab2:	463b      	mov	r3, r7
 800dab4:	4628      	mov	r0, r5
 800dab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800daba:	f000 b869 	b.w	800db90 <_write_r>

0800dabe <__sseek>:
 800dabe:	b510      	push	{r4, lr}
 800dac0:	460c      	mov	r4, r1
 800dac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dac6:	f000 f9b5 	bl	800de34 <_lseek_r>
 800daca:	1c43      	adds	r3, r0, #1
 800dacc:	89a3      	ldrh	r3, [r4, #12]
 800dace:	bf15      	itete	ne
 800dad0:	6560      	strne	r0, [r4, #84]	; 0x54
 800dad2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dad6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dada:	81a3      	strheq	r3, [r4, #12]
 800dadc:	bf18      	it	ne
 800dade:	81a3      	strhne	r3, [r4, #12]
 800dae0:	bd10      	pop	{r4, pc}

0800dae2 <__sclose>:
 800dae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dae6:	f000 b8d3 	b.w	800dc90 <_close_r>
	...

0800daec <__swbuf_r>:
 800daec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daee:	460e      	mov	r6, r1
 800daf0:	4614      	mov	r4, r2
 800daf2:	4605      	mov	r5, r0
 800daf4:	b118      	cbz	r0, 800dafe <__swbuf_r+0x12>
 800daf6:	6983      	ldr	r3, [r0, #24]
 800daf8:	b90b      	cbnz	r3, 800dafe <__swbuf_r+0x12>
 800dafa:	f7ff fcdf 	bl	800d4bc <__sinit>
 800dafe:	4b21      	ldr	r3, [pc, #132]	; (800db84 <__swbuf_r+0x98>)
 800db00:	429c      	cmp	r4, r3
 800db02:	d12b      	bne.n	800db5c <__swbuf_r+0x70>
 800db04:	686c      	ldr	r4, [r5, #4]
 800db06:	69a3      	ldr	r3, [r4, #24]
 800db08:	60a3      	str	r3, [r4, #8]
 800db0a:	89a3      	ldrh	r3, [r4, #12]
 800db0c:	071a      	lsls	r2, r3, #28
 800db0e:	d52f      	bpl.n	800db70 <__swbuf_r+0x84>
 800db10:	6923      	ldr	r3, [r4, #16]
 800db12:	b36b      	cbz	r3, 800db70 <__swbuf_r+0x84>
 800db14:	6923      	ldr	r3, [r4, #16]
 800db16:	6820      	ldr	r0, [r4, #0]
 800db18:	1ac0      	subs	r0, r0, r3
 800db1a:	6963      	ldr	r3, [r4, #20]
 800db1c:	b2f6      	uxtb	r6, r6
 800db1e:	4283      	cmp	r3, r0
 800db20:	4637      	mov	r7, r6
 800db22:	dc04      	bgt.n	800db2e <__swbuf_r+0x42>
 800db24:	4621      	mov	r1, r4
 800db26:	4628      	mov	r0, r5
 800db28:	f000 f948 	bl	800ddbc <_fflush_r>
 800db2c:	bb30      	cbnz	r0, 800db7c <__swbuf_r+0x90>
 800db2e:	68a3      	ldr	r3, [r4, #8]
 800db30:	3b01      	subs	r3, #1
 800db32:	60a3      	str	r3, [r4, #8]
 800db34:	6823      	ldr	r3, [r4, #0]
 800db36:	1c5a      	adds	r2, r3, #1
 800db38:	6022      	str	r2, [r4, #0]
 800db3a:	701e      	strb	r6, [r3, #0]
 800db3c:	6963      	ldr	r3, [r4, #20]
 800db3e:	3001      	adds	r0, #1
 800db40:	4283      	cmp	r3, r0
 800db42:	d004      	beq.n	800db4e <__swbuf_r+0x62>
 800db44:	89a3      	ldrh	r3, [r4, #12]
 800db46:	07db      	lsls	r3, r3, #31
 800db48:	d506      	bpl.n	800db58 <__swbuf_r+0x6c>
 800db4a:	2e0a      	cmp	r6, #10
 800db4c:	d104      	bne.n	800db58 <__swbuf_r+0x6c>
 800db4e:	4621      	mov	r1, r4
 800db50:	4628      	mov	r0, r5
 800db52:	f000 f933 	bl	800ddbc <_fflush_r>
 800db56:	b988      	cbnz	r0, 800db7c <__swbuf_r+0x90>
 800db58:	4638      	mov	r0, r7
 800db5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db5c:	4b0a      	ldr	r3, [pc, #40]	; (800db88 <__swbuf_r+0x9c>)
 800db5e:	429c      	cmp	r4, r3
 800db60:	d101      	bne.n	800db66 <__swbuf_r+0x7a>
 800db62:	68ac      	ldr	r4, [r5, #8]
 800db64:	e7cf      	b.n	800db06 <__swbuf_r+0x1a>
 800db66:	4b09      	ldr	r3, [pc, #36]	; (800db8c <__swbuf_r+0xa0>)
 800db68:	429c      	cmp	r4, r3
 800db6a:	bf08      	it	eq
 800db6c:	68ec      	ldreq	r4, [r5, #12]
 800db6e:	e7ca      	b.n	800db06 <__swbuf_r+0x1a>
 800db70:	4621      	mov	r1, r4
 800db72:	4628      	mov	r0, r5
 800db74:	f000 f81e 	bl	800dbb4 <__swsetup_r>
 800db78:	2800      	cmp	r0, #0
 800db7a:	d0cb      	beq.n	800db14 <__swbuf_r+0x28>
 800db7c:	f04f 37ff 	mov.w	r7, #4294967295
 800db80:	e7ea      	b.n	800db58 <__swbuf_r+0x6c>
 800db82:	bf00      	nop
 800db84:	080137e0 	.word	0x080137e0
 800db88:	08013800 	.word	0x08013800
 800db8c:	080137c0 	.word	0x080137c0

0800db90 <_write_r>:
 800db90:	b538      	push	{r3, r4, r5, lr}
 800db92:	4d07      	ldr	r5, [pc, #28]	; (800dbb0 <_write_r+0x20>)
 800db94:	4604      	mov	r4, r0
 800db96:	4608      	mov	r0, r1
 800db98:	4611      	mov	r1, r2
 800db9a:	2200      	movs	r2, #0
 800db9c:	602a      	str	r2, [r5, #0]
 800db9e:	461a      	mov	r2, r3
 800dba0:	f7f4 fd41 	bl	8002626 <_write>
 800dba4:	1c43      	adds	r3, r0, #1
 800dba6:	d102      	bne.n	800dbae <_write_r+0x1e>
 800dba8:	682b      	ldr	r3, [r5, #0]
 800dbaa:	b103      	cbz	r3, 800dbae <_write_r+0x1e>
 800dbac:	6023      	str	r3, [r4, #0]
 800dbae:	bd38      	pop	{r3, r4, r5, pc}
 800dbb0:	20006990 	.word	0x20006990

0800dbb4 <__swsetup_r>:
 800dbb4:	4b32      	ldr	r3, [pc, #200]	; (800dc80 <__swsetup_r+0xcc>)
 800dbb6:	b570      	push	{r4, r5, r6, lr}
 800dbb8:	681d      	ldr	r5, [r3, #0]
 800dbba:	4606      	mov	r6, r0
 800dbbc:	460c      	mov	r4, r1
 800dbbe:	b125      	cbz	r5, 800dbca <__swsetup_r+0x16>
 800dbc0:	69ab      	ldr	r3, [r5, #24]
 800dbc2:	b913      	cbnz	r3, 800dbca <__swsetup_r+0x16>
 800dbc4:	4628      	mov	r0, r5
 800dbc6:	f7ff fc79 	bl	800d4bc <__sinit>
 800dbca:	4b2e      	ldr	r3, [pc, #184]	; (800dc84 <__swsetup_r+0xd0>)
 800dbcc:	429c      	cmp	r4, r3
 800dbce:	d10f      	bne.n	800dbf0 <__swsetup_r+0x3c>
 800dbd0:	686c      	ldr	r4, [r5, #4]
 800dbd2:	89a3      	ldrh	r3, [r4, #12]
 800dbd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dbd8:	0719      	lsls	r1, r3, #28
 800dbda:	d42c      	bmi.n	800dc36 <__swsetup_r+0x82>
 800dbdc:	06dd      	lsls	r5, r3, #27
 800dbde:	d411      	bmi.n	800dc04 <__swsetup_r+0x50>
 800dbe0:	2309      	movs	r3, #9
 800dbe2:	6033      	str	r3, [r6, #0]
 800dbe4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dbe8:	81a3      	strh	r3, [r4, #12]
 800dbea:	f04f 30ff 	mov.w	r0, #4294967295
 800dbee:	e03e      	b.n	800dc6e <__swsetup_r+0xba>
 800dbf0:	4b25      	ldr	r3, [pc, #148]	; (800dc88 <__swsetup_r+0xd4>)
 800dbf2:	429c      	cmp	r4, r3
 800dbf4:	d101      	bne.n	800dbfa <__swsetup_r+0x46>
 800dbf6:	68ac      	ldr	r4, [r5, #8]
 800dbf8:	e7eb      	b.n	800dbd2 <__swsetup_r+0x1e>
 800dbfa:	4b24      	ldr	r3, [pc, #144]	; (800dc8c <__swsetup_r+0xd8>)
 800dbfc:	429c      	cmp	r4, r3
 800dbfe:	bf08      	it	eq
 800dc00:	68ec      	ldreq	r4, [r5, #12]
 800dc02:	e7e6      	b.n	800dbd2 <__swsetup_r+0x1e>
 800dc04:	0758      	lsls	r0, r3, #29
 800dc06:	d512      	bpl.n	800dc2e <__swsetup_r+0x7a>
 800dc08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc0a:	b141      	cbz	r1, 800dc1e <__swsetup_r+0x6a>
 800dc0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc10:	4299      	cmp	r1, r3
 800dc12:	d002      	beq.n	800dc1a <__swsetup_r+0x66>
 800dc14:	4630      	mov	r0, r6
 800dc16:	f7ff fd3d 	bl	800d694 <_free_r>
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	6363      	str	r3, [r4, #52]	; 0x34
 800dc1e:	89a3      	ldrh	r3, [r4, #12]
 800dc20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dc24:	81a3      	strh	r3, [r4, #12]
 800dc26:	2300      	movs	r3, #0
 800dc28:	6063      	str	r3, [r4, #4]
 800dc2a:	6923      	ldr	r3, [r4, #16]
 800dc2c:	6023      	str	r3, [r4, #0]
 800dc2e:	89a3      	ldrh	r3, [r4, #12]
 800dc30:	f043 0308 	orr.w	r3, r3, #8
 800dc34:	81a3      	strh	r3, [r4, #12]
 800dc36:	6923      	ldr	r3, [r4, #16]
 800dc38:	b94b      	cbnz	r3, 800dc4e <__swsetup_r+0x9a>
 800dc3a:	89a3      	ldrh	r3, [r4, #12]
 800dc3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dc40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc44:	d003      	beq.n	800dc4e <__swsetup_r+0x9a>
 800dc46:	4621      	mov	r1, r4
 800dc48:	4630      	mov	r0, r6
 800dc4a:	f000 f92b 	bl	800dea4 <__smakebuf_r>
 800dc4e:	89a0      	ldrh	r0, [r4, #12]
 800dc50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc54:	f010 0301 	ands.w	r3, r0, #1
 800dc58:	d00a      	beq.n	800dc70 <__swsetup_r+0xbc>
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	60a3      	str	r3, [r4, #8]
 800dc5e:	6963      	ldr	r3, [r4, #20]
 800dc60:	425b      	negs	r3, r3
 800dc62:	61a3      	str	r3, [r4, #24]
 800dc64:	6923      	ldr	r3, [r4, #16]
 800dc66:	b943      	cbnz	r3, 800dc7a <__swsetup_r+0xc6>
 800dc68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dc6c:	d1ba      	bne.n	800dbe4 <__swsetup_r+0x30>
 800dc6e:	bd70      	pop	{r4, r5, r6, pc}
 800dc70:	0781      	lsls	r1, r0, #30
 800dc72:	bf58      	it	pl
 800dc74:	6963      	ldrpl	r3, [r4, #20]
 800dc76:	60a3      	str	r3, [r4, #8]
 800dc78:	e7f4      	b.n	800dc64 <__swsetup_r+0xb0>
 800dc7a:	2000      	movs	r0, #0
 800dc7c:	e7f7      	b.n	800dc6e <__swsetup_r+0xba>
 800dc7e:	bf00      	nop
 800dc80:	20000128 	.word	0x20000128
 800dc84:	080137e0 	.word	0x080137e0
 800dc88:	08013800 	.word	0x08013800
 800dc8c:	080137c0 	.word	0x080137c0

0800dc90 <_close_r>:
 800dc90:	b538      	push	{r3, r4, r5, lr}
 800dc92:	4d06      	ldr	r5, [pc, #24]	; (800dcac <_close_r+0x1c>)
 800dc94:	2300      	movs	r3, #0
 800dc96:	4604      	mov	r4, r0
 800dc98:	4608      	mov	r0, r1
 800dc9a:	602b      	str	r3, [r5, #0]
 800dc9c:	f7f4 fcdf 	bl	800265e <_close>
 800dca0:	1c43      	adds	r3, r0, #1
 800dca2:	d102      	bne.n	800dcaa <_close_r+0x1a>
 800dca4:	682b      	ldr	r3, [r5, #0]
 800dca6:	b103      	cbz	r3, 800dcaa <_close_r+0x1a>
 800dca8:	6023      	str	r3, [r4, #0]
 800dcaa:	bd38      	pop	{r3, r4, r5, pc}
 800dcac:	20006990 	.word	0x20006990

0800dcb0 <__sflush_r>:
 800dcb0:	898a      	ldrh	r2, [r1, #12]
 800dcb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcb6:	4605      	mov	r5, r0
 800dcb8:	0710      	lsls	r0, r2, #28
 800dcba:	460c      	mov	r4, r1
 800dcbc:	d458      	bmi.n	800dd70 <__sflush_r+0xc0>
 800dcbe:	684b      	ldr	r3, [r1, #4]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	dc05      	bgt.n	800dcd0 <__sflush_r+0x20>
 800dcc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	dc02      	bgt.n	800dcd0 <__sflush_r+0x20>
 800dcca:	2000      	movs	r0, #0
 800dccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dcd2:	2e00      	cmp	r6, #0
 800dcd4:	d0f9      	beq.n	800dcca <__sflush_r+0x1a>
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dcdc:	682f      	ldr	r7, [r5, #0]
 800dcde:	602b      	str	r3, [r5, #0]
 800dce0:	d032      	beq.n	800dd48 <__sflush_r+0x98>
 800dce2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dce4:	89a3      	ldrh	r3, [r4, #12]
 800dce6:	075a      	lsls	r2, r3, #29
 800dce8:	d505      	bpl.n	800dcf6 <__sflush_r+0x46>
 800dcea:	6863      	ldr	r3, [r4, #4]
 800dcec:	1ac0      	subs	r0, r0, r3
 800dcee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dcf0:	b10b      	cbz	r3, 800dcf6 <__sflush_r+0x46>
 800dcf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dcf4:	1ac0      	subs	r0, r0, r3
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	4602      	mov	r2, r0
 800dcfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dcfc:	6a21      	ldr	r1, [r4, #32]
 800dcfe:	4628      	mov	r0, r5
 800dd00:	47b0      	blx	r6
 800dd02:	1c43      	adds	r3, r0, #1
 800dd04:	89a3      	ldrh	r3, [r4, #12]
 800dd06:	d106      	bne.n	800dd16 <__sflush_r+0x66>
 800dd08:	6829      	ldr	r1, [r5, #0]
 800dd0a:	291d      	cmp	r1, #29
 800dd0c:	d82c      	bhi.n	800dd68 <__sflush_r+0xb8>
 800dd0e:	4a2a      	ldr	r2, [pc, #168]	; (800ddb8 <__sflush_r+0x108>)
 800dd10:	40ca      	lsrs	r2, r1
 800dd12:	07d6      	lsls	r6, r2, #31
 800dd14:	d528      	bpl.n	800dd68 <__sflush_r+0xb8>
 800dd16:	2200      	movs	r2, #0
 800dd18:	6062      	str	r2, [r4, #4]
 800dd1a:	04d9      	lsls	r1, r3, #19
 800dd1c:	6922      	ldr	r2, [r4, #16]
 800dd1e:	6022      	str	r2, [r4, #0]
 800dd20:	d504      	bpl.n	800dd2c <__sflush_r+0x7c>
 800dd22:	1c42      	adds	r2, r0, #1
 800dd24:	d101      	bne.n	800dd2a <__sflush_r+0x7a>
 800dd26:	682b      	ldr	r3, [r5, #0]
 800dd28:	b903      	cbnz	r3, 800dd2c <__sflush_r+0x7c>
 800dd2a:	6560      	str	r0, [r4, #84]	; 0x54
 800dd2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd2e:	602f      	str	r7, [r5, #0]
 800dd30:	2900      	cmp	r1, #0
 800dd32:	d0ca      	beq.n	800dcca <__sflush_r+0x1a>
 800dd34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd38:	4299      	cmp	r1, r3
 800dd3a:	d002      	beq.n	800dd42 <__sflush_r+0x92>
 800dd3c:	4628      	mov	r0, r5
 800dd3e:	f7ff fca9 	bl	800d694 <_free_r>
 800dd42:	2000      	movs	r0, #0
 800dd44:	6360      	str	r0, [r4, #52]	; 0x34
 800dd46:	e7c1      	b.n	800dccc <__sflush_r+0x1c>
 800dd48:	6a21      	ldr	r1, [r4, #32]
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	4628      	mov	r0, r5
 800dd4e:	47b0      	blx	r6
 800dd50:	1c41      	adds	r1, r0, #1
 800dd52:	d1c7      	bne.n	800dce4 <__sflush_r+0x34>
 800dd54:	682b      	ldr	r3, [r5, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d0c4      	beq.n	800dce4 <__sflush_r+0x34>
 800dd5a:	2b1d      	cmp	r3, #29
 800dd5c:	d001      	beq.n	800dd62 <__sflush_r+0xb2>
 800dd5e:	2b16      	cmp	r3, #22
 800dd60:	d101      	bne.n	800dd66 <__sflush_r+0xb6>
 800dd62:	602f      	str	r7, [r5, #0]
 800dd64:	e7b1      	b.n	800dcca <__sflush_r+0x1a>
 800dd66:	89a3      	ldrh	r3, [r4, #12]
 800dd68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd6c:	81a3      	strh	r3, [r4, #12]
 800dd6e:	e7ad      	b.n	800dccc <__sflush_r+0x1c>
 800dd70:	690f      	ldr	r7, [r1, #16]
 800dd72:	2f00      	cmp	r7, #0
 800dd74:	d0a9      	beq.n	800dcca <__sflush_r+0x1a>
 800dd76:	0793      	lsls	r3, r2, #30
 800dd78:	680e      	ldr	r6, [r1, #0]
 800dd7a:	bf08      	it	eq
 800dd7c:	694b      	ldreq	r3, [r1, #20]
 800dd7e:	600f      	str	r7, [r1, #0]
 800dd80:	bf18      	it	ne
 800dd82:	2300      	movne	r3, #0
 800dd84:	eba6 0807 	sub.w	r8, r6, r7
 800dd88:	608b      	str	r3, [r1, #8]
 800dd8a:	f1b8 0f00 	cmp.w	r8, #0
 800dd8e:	dd9c      	ble.n	800dcca <__sflush_r+0x1a>
 800dd90:	6a21      	ldr	r1, [r4, #32]
 800dd92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd94:	4643      	mov	r3, r8
 800dd96:	463a      	mov	r2, r7
 800dd98:	4628      	mov	r0, r5
 800dd9a:	47b0      	blx	r6
 800dd9c:	2800      	cmp	r0, #0
 800dd9e:	dc06      	bgt.n	800ddae <__sflush_r+0xfe>
 800dda0:	89a3      	ldrh	r3, [r4, #12]
 800dda2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dda6:	81a3      	strh	r3, [r4, #12]
 800dda8:	f04f 30ff 	mov.w	r0, #4294967295
 800ddac:	e78e      	b.n	800dccc <__sflush_r+0x1c>
 800ddae:	4407      	add	r7, r0
 800ddb0:	eba8 0800 	sub.w	r8, r8, r0
 800ddb4:	e7e9      	b.n	800dd8a <__sflush_r+0xda>
 800ddb6:	bf00      	nop
 800ddb8:	20400001 	.word	0x20400001

0800ddbc <_fflush_r>:
 800ddbc:	b538      	push	{r3, r4, r5, lr}
 800ddbe:	690b      	ldr	r3, [r1, #16]
 800ddc0:	4605      	mov	r5, r0
 800ddc2:	460c      	mov	r4, r1
 800ddc4:	b913      	cbnz	r3, 800ddcc <_fflush_r+0x10>
 800ddc6:	2500      	movs	r5, #0
 800ddc8:	4628      	mov	r0, r5
 800ddca:	bd38      	pop	{r3, r4, r5, pc}
 800ddcc:	b118      	cbz	r0, 800ddd6 <_fflush_r+0x1a>
 800ddce:	6983      	ldr	r3, [r0, #24]
 800ddd0:	b90b      	cbnz	r3, 800ddd6 <_fflush_r+0x1a>
 800ddd2:	f7ff fb73 	bl	800d4bc <__sinit>
 800ddd6:	4b14      	ldr	r3, [pc, #80]	; (800de28 <_fflush_r+0x6c>)
 800ddd8:	429c      	cmp	r4, r3
 800ddda:	d11b      	bne.n	800de14 <_fflush_r+0x58>
 800dddc:	686c      	ldr	r4, [r5, #4]
 800ddde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d0ef      	beq.n	800ddc6 <_fflush_r+0xa>
 800dde6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dde8:	07d0      	lsls	r0, r2, #31
 800ddea:	d404      	bmi.n	800ddf6 <_fflush_r+0x3a>
 800ddec:	0599      	lsls	r1, r3, #22
 800ddee:	d402      	bmi.n	800ddf6 <_fflush_r+0x3a>
 800ddf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddf2:	f7ff fc26 	bl	800d642 <__retarget_lock_acquire_recursive>
 800ddf6:	4628      	mov	r0, r5
 800ddf8:	4621      	mov	r1, r4
 800ddfa:	f7ff ff59 	bl	800dcb0 <__sflush_r>
 800ddfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de00:	07da      	lsls	r2, r3, #31
 800de02:	4605      	mov	r5, r0
 800de04:	d4e0      	bmi.n	800ddc8 <_fflush_r+0xc>
 800de06:	89a3      	ldrh	r3, [r4, #12]
 800de08:	059b      	lsls	r3, r3, #22
 800de0a:	d4dd      	bmi.n	800ddc8 <_fflush_r+0xc>
 800de0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de0e:	f7ff fc19 	bl	800d644 <__retarget_lock_release_recursive>
 800de12:	e7d9      	b.n	800ddc8 <_fflush_r+0xc>
 800de14:	4b05      	ldr	r3, [pc, #20]	; (800de2c <_fflush_r+0x70>)
 800de16:	429c      	cmp	r4, r3
 800de18:	d101      	bne.n	800de1e <_fflush_r+0x62>
 800de1a:	68ac      	ldr	r4, [r5, #8]
 800de1c:	e7df      	b.n	800ddde <_fflush_r+0x22>
 800de1e:	4b04      	ldr	r3, [pc, #16]	; (800de30 <_fflush_r+0x74>)
 800de20:	429c      	cmp	r4, r3
 800de22:	bf08      	it	eq
 800de24:	68ec      	ldreq	r4, [r5, #12]
 800de26:	e7da      	b.n	800ddde <_fflush_r+0x22>
 800de28:	080137e0 	.word	0x080137e0
 800de2c:	08013800 	.word	0x08013800
 800de30:	080137c0 	.word	0x080137c0

0800de34 <_lseek_r>:
 800de34:	b538      	push	{r3, r4, r5, lr}
 800de36:	4d07      	ldr	r5, [pc, #28]	; (800de54 <_lseek_r+0x20>)
 800de38:	4604      	mov	r4, r0
 800de3a:	4608      	mov	r0, r1
 800de3c:	4611      	mov	r1, r2
 800de3e:	2200      	movs	r2, #0
 800de40:	602a      	str	r2, [r5, #0]
 800de42:	461a      	mov	r2, r3
 800de44:	f7f4 fc32 	bl	80026ac <_lseek>
 800de48:	1c43      	adds	r3, r0, #1
 800de4a:	d102      	bne.n	800de52 <_lseek_r+0x1e>
 800de4c:	682b      	ldr	r3, [r5, #0]
 800de4e:	b103      	cbz	r3, 800de52 <_lseek_r+0x1e>
 800de50:	6023      	str	r3, [r4, #0]
 800de52:	bd38      	pop	{r3, r4, r5, pc}
 800de54:	20006990 	.word	0x20006990

0800de58 <__swhatbuf_r>:
 800de58:	b570      	push	{r4, r5, r6, lr}
 800de5a:	460e      	mov	r6, r1
 800de5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de60:	2900      	cmp	r1, #0
 800de62:	b096      	sub	sp, #88	; 0x58
 800de64:	4614      	mov	r4, r2
 800de66:	461d      	mov	r5, r3
 800de68:	da08      	bge.n	800de7c <__swhatbuf_r+0x24>
 800de6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800de6e:	2200      	movs	r2, #0
 800de70:	602a      	str	r2, [r5, #0]
 800de72:	061a      	lsls	r2, r3, #24
 800de74:	d410      	bmi.n	800de98 <__swhatbuf_r+0x40>
 800de76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de7a:	e00e      	b.n	800de9a <__swhatbuf_r+0x42>
 800de7c:	466a      	mov	r2, sp
 800de7e:	f000 fb5d 	bl	800e53c <_fstat_r>
 800de82:	2800      	cmp	r0, #0
 800de84:	dbf1      	blt.n	800de6a <__swhatbuf_r+0x12>
 800de86:	9a01      	ldr	r2, [sp, #4]
 800de88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800de8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800de90:	425a      	negs	r2, r3
 800de92:	415a      	adcs	r2, r3
 800de94:	602a      	str	r2, [r5, #0]
 800de96:	e7ee      	b.n	800de76 <__swhatbuf_r+0x1e>
 800de98:	2340      	movs	r3, #64	; 0x40
 800de9a:	2000      	movs	r0, #0
 800de9c:	6023      	str	r3, [r4, #0]
 800de9e:	b016      	add	sp, #88	; 0x58
 800dea0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dea4 <__smakebuf_r>:
 800dea4:	898b      	ldrh	r3, [r1, #12]
 800dea6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dea8:	079d      	lsls	r5, r3, #30
 800deaa:	4606      	mov	r6, r0
 800deac:	460c      	mov	r4, r1
 800deae:	d507      	bpl.n	800dec0 <__smakebuf_r+0x1c>
 800deb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800deb4:	6023      	str	r3, [r4, #0]
 800deb6:	6123      	str	r3, [r4, #16]
 800deb8:	2301      	movs	r3, #1
 800deba:	6163      	str	r3, [r4, #20]
 800debc:	b002      	add	sp, #8
 800debe:	bd70      	pop	{r4, r5, r6, pc}
 800dec0:	ab01      	add	r3, sp, #4
 800dec2:	466a      	mov	r2, sp
 800dec4:	f7ff ffc8 	bl	800de58 <__swhatbuf_r>
 800dec8:	9900      	ldr	r1, [sp, #0]
 800deca:	4605      	mov	r5, r0
 800decc:	4630      	mov	r0, r6
 800dece:	f7ff fc4d 	bl	800d76c <_malloc_r>
 800ded2:	b948      	cbnz	r0, 800dee8 <__smakebuf_r+0x44>
 800ded4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ded8:	059a      	lsls	r2, r3, #22
 800deda:	d4ef      	bmi.n	800debc <__smakebuf_r+0x18>
 800dedc:	f023 0303 	bic.w	r3, r3, #3
 800dee0:	f043 0302 	orr.w	r3, r3, #2
 800dee4:	81a3      	strh	r3, [r4, #12]
 800dee6:	e7e3      	b.n	800deb0 <__smakebuf_r+0xc>
 800dee8:	4b0d      	ldr	r3, [pc, #52]	; (800df20 <__smakebuf_r+0x7c>)
 800deea:	62b3      	str	r3, [r6, #40]	; 0x28
 800deec:	89a3      	ldrh	r3, [r4, #12]
 800deee:	6020      	str	r0, [r4, #0]
 800def0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800def4:	81a3      	strh	r3, [r4, #12]
 800def6:	9b00      	ldr	r3, [sp, #0]
 800def8:	6163      	str	r3, [r4, #20]
 800defa:	9b01      	ldr	r3, [sp, #4]
 800defc:	6120      	str	r0, [r4, #16]
 800defe:	b15b      	cbz	r3, 800df18 <__smakebuf_r+0x74>
 800df00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df04:	4630      	mov	r0, r6
 800df06:	f000 fb2b 	bl	800e560 <_isatty_r>
 800df0a:	b128      	cbz	r0, 800df18 <__smakebuf_r+0x74>
 800df0c:	89a3      	ldrh	r3, [r4, #12]
 800df0e:	f023 0303 	bic.w	r3, r3, #3
 800df12:	f043 0301 	orr.w	r3, r3, #1
 800df16:	81a3      	strh	r3, [r4, #12]
 800df18:	89a0      	ldrh	r0, [r4, #12]
 800df1a:	4305      	orrs	r5, r0
 800df1c:	81a5      	strh	r5, [r4, #12]
 800df1e:	e7cd      	b.n	800debc <__smakebuf_r+0x18>
 800df20:	0800d455 	.word	0x0800d455

0800df24 <__malloc_lock>:
 800df24:	4801      	ldr	r0, [pc, #4]	; (800df2c <__malloc_lock+0x8>)
 800df26:	f7ff bb8c 	b.w	800d642 <__retarget_lock_acquire_recursive>
 800df2a:	bf00      	nop
 800df2c:	20006984 	.word	0x20006984

0800df30 <__malloc_unlock>:
 800df30:	4801      	ldr	r0, [pc, #4]	; (800df38 <__malloc_unlock+0x8>)
 800df32:	f7ff bb87 	b.w	800d644 <__retarget_lock_release_recursive>
 800df36:	bf00      	nop
 800df38:	20006984 	.word	0x20006984

0800df3c <__sfputc_r>:
 800df3c:	6893      	ldr	r3, [r2, #8]
 800df3e:	3b01      	subs	r3, #1
 800df40:	2b00      	cmp	r3, #0
 800df42:	b410      	push	{r4}
 800df44:	6093      	str	r3, [r2, #8]
 800df46:	da08      	bge.n	800df5a <__sfputc_r+0x1e>
 800df48:	6994      	ldr	r4, [r2, #24]
 800df4a:	42a3      	cmp	r3, r4
 800df4c:	db01      	blt.n	800df52 <__sfputc_r+0x16>
 800df4e:	290a      	cmp	r1, #10
 800df50:	d103      	bne.n	800df5a <__sfputc_r+0x1e>
 800df52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df56:	f7ff bdc9 	b.w	800daec <__swbuf_r>
 800df5a:	6813      	ldr	r3, [r2, #0]
 800df5c:	1c58      	adds	r0, r3, #1
 800df5e:	6010      	str	r0, [r2, #0]
 800df60:	7019      	strb	r1, [r3, #0]
 800df62:	4608      	mov	r0, r1
 800df64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df68:	4770      	bx	lr

0800df6a <__sfputs_r>:
 800df6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df6c:	4606      	mov	r6, r0
 800df6e:	460f      	mov	r7, r1
 800df70:	4614      	mov	r4, r2
 800df72:	18d5      	adds	r5, r2, r3
 800df74:	42ac      	cmp	r4, r5
 800df76:	d101      	bne.n	800df7c <__sfputs_r+0x12>
 800df78:	2000      	movs	r0, #0
 800df7a:	e007      	b.n	800df8c <__sfputs_r+0x22>
 800df7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df80:	463a      	mov	r2, r7
 800df82:	4630      	mov	r0, r6
 800df84:	f7ff ffda 	bl	800df3c <__sfputc_r>
 800df88:	1c43      	adds	r3, r0, #1
 800df8a:	d1f3      	bne.n	800df74 <__sfputs_r+0xa>
 800df8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df90 <_vfiprintf_r>:
 800df90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df94:	460d      	mov	r5, r1
 800df96:	b09d      	sub	sp, #116	; 0x74
 800df98:	4614      	mov	r4, r2
 800df9a:	4698      	mov	r8, r3
 800df9c:	4606      	mov	r6, r0
 800df9e:	b118      	cbz	r0, 800dfa8 <_vfiprintf_r+0x18>
 800dfa0:	6983      	ldr	r3, [r0, #24]
 800dfa2:	b90b      	cbnz	r3, 800dfa8 <_vfiprintf_r+0x18>
 800dfa4:	f7ff fa8a 	bl	800d4bc <__sinit>
 800dfa8:	4b89      	ldr	r3, [pc, #548]	; (800e1d0 <_vfiprintf_r+0x240>)
 800dfaa:	429d      	cmp	r5, r3
 800dfac:	d11b      	bne.n	800dfe6 <_vfiprintf_r+0x56>
 800dfae:	6875      	ldr	r5, [r6, #4]
 800dfb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfb2:	07d9      	lsls	r1, r3, #31
 800dfb4:	d405      	bmi.n	800dfc2 <_vfiprintf_r+0x32>
 800dfb6:	89ab      	ldrh	r3, [r5, #12]
 800dfb8:	059a      	lsls	r2, r3, #22
 800dfba:	d402      	bmi.n	800dfc2 <_vfiprintf_r+0x32>
 800dfbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfbe:	f7ff fb40 	bl	800d642 <__retarget_lock_acquire_recursive>
 800dfc2:	89ab      	ldrh	r3, [r5, #12]
 800dfc4:	071b      	lsls	r3, r3, #28
 800dfc6:	d501      	bpl.n	800dfcc <_vfiprintf_r+0x3c>
 800dfc8:	692b      	ldr	r3, [r5, #16]
 800dfca:	b9eb      	cbnz	r3, 800e008 <_vfiprintf_r+0x78>
 800dfcc:	4629      	mov	r1, r5
 800dfce:	4630      	mov	r0, r6
 800dfd0:	f7ff fdf0 	bl	800dbb4 <__swsetup_r>
 800dfd4:	b1c0      	cbz	r0, 800e008 <_vfiprintf_r+0x78>
 800dfd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfd8:	07dc      	lsls	r4, r3, #31
 800dfda:	d50e      	bpl.n	800dffa <_vfiprintf_r+0x6a>
 800dfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800dfe0:	b01d      	add	sp, #116	; 0x74
 800dfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfe6:	4b7b      	ldr	r3, [pc, #492]	; (800e1d4 <_vfiprintf_r+0x244>)
 800dfe8:	429d      	cmp	r5, r3
 800dfea:	d101      	bne.n	800dff0 <_vfiprintf_r+0x60>
 800dfec:	68b5      	ldr	r5, [r6, #8]
 800dfee:	e7df      	b.n	800dfb0 <_vfiprintf_r+0x20>
 800dff0:	4b79      	ldr	r3, [pc, #484]	; (800e1d8 <_vfiprintf_r+0x248>)
 800dff2:	429d      	cmp	r5, r3
 800dff4:	bf08      	it	eq
 800dff6:	68f5      	ldreq	r5, [r6, #12]
 800dff8:	e7da      	b.n	800dfb0 <_vfiprintf_r+0x20>
 800dffa:	89ab      	ldrh	r3, [r5, #12]
 800dffc:	0598      	lsls	r0, r3, #22
 800dffe:	d4ed      	bmi.n	800dfdc <_vfiprintf_r+0x4c>
 800e000:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e002:	f7ff fb1f 	bl	800d644 <__retarget_lock_release_recursive>
 800e006:	e7e9      	b.n	800dfdc <_vfiprintf_r+0x4c>
 800e008:	2300      	movs	r3, #0
 800e00a:	9309      	str	r3, [sp, #36]	; 0x24
 800e00c:	2320      	movs	r3, #32
 800e00e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e012:	f8cd 800c 	str.w	r8, [sp, #12]
 800e016:	2330      	movs	r3, #48	; 0x30
 800e018:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e1dc <_vfiprintf_r+0x24c>
 800e01c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e020:	f04f 0901 	mov.w	r9, #1
 800e024:	4623      	mov	r3, r4
 800e026:	469a      	mov	sl, r3
 800e028:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e02c:	b10a      	cbz	r2, 800e032 <_vfiprintf_r+0xa2>
 800e02e:	2a25      	cmp	r2, #37	; 0x25
 800e030:	d1f9      	bne.n	800e026 <_vfiprintf_r+0x96>
 800e032:	ebba 0b04 	subs.w	fp, sl, r4
 800e036:	d00b      	beq.n	800e050 <_vfiprintf_r+0xc0>
 800e038:	465b      	mov	r3, fp
 800e03a:	4622      	mov	r2, r4
 800e03c:	4629      	mov	r1, r5
 800e03e:	4630      	mov	r0, r6
 800e040:	f7ff ff93 	bl	800df6a <__sfputs_r>
 800e044:	3001      	adds	r0, #1
 800e046:	f000 80aa 	beq.w	800e19e <_vfiprintf_r+0x20e>
 800e04a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e04c:	445a      	add	r2, fp
 800e04e:	9209      	str	r2, [sp, #36]	; 0x24
 800e050:	f89a 3000 	ldrb.w	r3, [sl]
 800e054:	2b00      	cmp	r3, #0
 800e056:	f000 80a2 	beq.w	800e19e <_vfiprintf_r+0x20e>
 800e05a:	2300      	movs	r3, #0
 800e05c:	f04f 32ff 	mov.w	r2, #4294967295
 800e060:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e064:	f10a 0a01 	add.w	sl, sl, #1
 800e068:	9304      	str	r3, [sp, #16]
 800e06a:	9307      	str	r3, [sp, #28]
 800e06c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e070:	931a      	str	r3, [sp, #104]	; 0x68
 800e072:	4654      	mov	r4, sl
 800e074:	2205      	movs	r2, #5
 800e076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e07a:	4858      	ldr	r0, [pc, #352]	; (800e1dc <_vfiprintf_r+0x24c>)
 800e07c:	f7f2 f8b0 	bl	80001e0 <memchr>
 800e080:	9a04      	ldr	r2, [sp, #16]
 800e082:	b9d8      	cbnz	r0, 800e0bc <_vfiprintf_r+0x12c>
 800e084:	06d1      	lsls	r1, r2, #27
 800e086:	bf44      	itt	mi
 800e088:	2320      	movmi	r3, #32
 800e08a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e08e:	0713      	lsls	r3, r2, #28
 800e090:	bf44      	itt	mi
 800e092:	232b      	movmi	r3, #43	; 0x2b
 800e094:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e098:	f89a 3000 	ldrb.w	r3, [sl]
 800e09c:	2b2a      	cmp	r3, #42	; 0x2a
 800e09e:	d015      	beq.n	800e0cc <_vfiprintf_r+0x13c>
 800e0a0:	9a07      	ldr	r2, [sp, #28]
 800e0a2:	4654      	mov	r4, sl
 800e0a4:	2000      	movs	r0, #0
 800e0a6:	f04f 0c0a 	mov.w	ip, #10
 800e0aa:	4621      	mov	r1, r4
 800e0ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0b0:	3b30      	subs	r3, #48	; 0x30
 800e0b2:	2b09      	cmp	r3, #9
 800e0b4:	d94e      	bls.n	800e154 <_vfiprintf_r+0x1c4>
 800e0b6:	b1b0      	cbz	r0, 800e0e6 <_vfiprintf_r+0x156>
 800e0b8:	9207      	str	r2, [sp, #28]
 800e0ba:	e014      	b.n	800e0e6 <_vfiprintf_r+0x156>
 800e0bc:	eba0 0308 	sub.w	r3, r0, r8
 800e0c0:	fa09 f303 	lsl.w	r3, r9, r3
 800e0c4:	4313      	orrs	r3, r2
 800e0c6:	9304      	str	r3, [sp, #16]
 800e0c8:	46a2      	mov	sl, r4
 800e0ca:	e7d2      	b.n	800e072 <_vfiprintf_r+0xe2>
 800e0cc:	9b03      	ldr	r3, [sp, #12]
 800e0ce:	1d19      	adds	r1, r3, #4
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	9103      	str	r1, [sp, #12]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	bfbb      	ittet	lt
 800e0d8:	425b      	neglt	r3, r3
 800e0da:	f042 0202 	orrlt.w	r2, r2, #2
 800e0de:	9307      	strge	r3, [sp, #28]
 800e0e0:	9307      	strlt	r3, [sp, #28]
 800e0e2:	bfb8      	it	lt
 800e0e4:	9204      	strlt	r2, [sp, #16]
 800e0e6:	7823      	ldrb	r3, [r4, #0]
 800e0e8:	2b2e      	cmp	r3, #46	; 0x2e
 800e0ea:	d10c      	bne.n	800e106 <_vfiprintf_r+0x176>
 800e0ec:	7863      	ldrb	r3, [r4, #1]
 800e0ee:	2b2a      	cmp	r3, #42	; 0x2a
 800e0f0:	d135      	bne.n	800e15e <_vfiprintf_r+0x1ce>
 800e0f2:	9b03      	ldr	r3, [sp, #12]
 800e0f4:	1d1a      	adds	r2, r3, #4
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	9203      	str	r2, [sp, #12]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	bfb8      	it	lt
 800e0fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800e102:	3402      	adds	r4, #2
 800e104:	9305      	str	r3, [sp, #20]
 800e106:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e1ec <_vfiprintf_r+0x25c>
 800e10a:	7821      	ldrb	r1, [r4, #0]
 800e10c:	2203      	movs	r2, #3
 800e10e:	4650      	mov	r0, sl
 800e110:	f7f2 f866 	bl	80001e0 <memchr>
 800e114:	b140      	cbz	r0, 800e128 <_vfiprintf_r+0x198>
 800e116:	2340      	movs	r3, #64	; 0x40
 800e118:	eba0 000a 	sub.w	r0, r0, sl
 800e11c:	fa03 f000 	lsl.w	r0, r3, r0
 800e120:	9b04      	ldr	r3, [sp, #16]
 800e122:	4303      	orrs	r3, r0
 800e124:	3401      	adds	r4, #1
 800e126:	9304      	str	r3, [sp, #16]
 800e128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e12c:	482c      	ldr	r0, [pc, #176]	; (800e1e0 <_vfiprintf_r+0x250>)
 800e12e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e132:	2206      	movs	r2, #6
 800e134:	f7f2 f854 	bl	80001e0 <memchr>
 800e138:	2800      	cmp	r0, #0
 800e13a:	d03f      	beq.n	800e1bc <_vfiprintf_r+0x22c>
 800e13c:	4b29      	ldr	r3, [pc, #164]	; (800e1e4 <_vfiprintf_r+0x254>)
 800e13e:	bb1b      	cbnz	r3, 800e188 <_vfiprintf_r+0x1f8>
 800e140:	9b03      	ldr	r3, [sp, #12]
 800e142:	3307      	adds	r3, #7
 800e144:	f023 0307 	bic.w	r3, r3, #7
 800e148:	3308      	adds	r3, #8
 800e14a:	9303      	str	r3, [sp, #12]
 800e14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e14e:	443b      	add	r3, r7
 800e150:	9309      	str	r3, [sp, #36]	; 0x24
 800e152:	e767      	b.n	800e024 <_vfiprintf_r+0x94>
 800e154:	fb0c 3202 	mla	r2, ip, r2, r3
 800e158:	460c      	mov	r4, r1
 800e15a:	2001      	movs	r0, #1
 800e15c:	e7a5      	b.n	800e0aa <_vfiprintf_r+0x11a>
 800e15e:	2300      	movs	r3, #0
 800e160:	3401      	adds	r4, #1
 800e162:	9305      	str	r3, [sp, #20]
 800e164:	4619      	mov	r1, r3
 800e166:	f04f 0c0a 	mov.w	ip, #10
 800e16a:	4620      	mov	r0, r4
 800e16c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e170:	3a30      	subs	r2, #48	; 0x30
 800e172:	2a09      	cmp	r2, #9
 800e174:	d903      	bls.n	800e17e <_vfiprintf_r+0x1ee>
 800e176:	2b00      	cmp	r3, #0
 800e178:	d0c5      	beq.n	800e106 <_vfiprintf_r+0x176>
 800e17a:	9105      	str	r1, [sp, #20]
 800e17c:	e7c3      	b.n	800e106 <_vfiprintf_r+0x176>
 800e17e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e182:	4604      	mov	r4, r0
 800e184:	2301      	movs	r3, #1
 800e186:	e7f0      	b.n	800e16a <_vfiprintf_r+0x1da>
 800e188:	ab03      	add	r3, sp, #12
 800e18a:	9300      	str	r3, [sp, #0]
 800e18c:	462a      	mov	r2, r5
 800e18e:	4b16      	ldr	r3, [pc, #88]	; (800e1e8 <_vfiprintf_r+0x258>)
 800e190:	a904      	add	r1, sp, #16
 800e192:	4630      	mov	r0, r6
 800e194:	f3af 8000 	nop.w
 800e198:	4607      	mov	r7, r0
 800e19a:	1c78      	adds	r0, r7, #1
 800e19c:	d1d6      	bne.n	800e14c <_vfiprintf_r+0x1bc>
 800e19e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e1a0:	07d9      	lsls	r1, r3, #31
 800e1a2:	d405      	bmi.n	800e1b0 <_vfiprintf_r+0x220>
 800e1a4:	89ab      	ldrh	r3, [r5, #12]
 800e1a6:	059a      	lsls	r2, r3, #22
 800e1a8:	d402      	bmi.n	800e1b0 <_vfiprintf_r+0x220>
 800e1aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e1ac:	f7ff fa4a 	bl	800d644 <__retarget_lock_release_recursive>
 800e1b0:	89ab      	ldrh	r3, [r5, #12]
 800e1b2:	065b      	lsls	r3, r3, #25
 800e1b4:	f53f af12 	bmi.w	800dfdc <_vfiprintf_r+0x4c>
 800e1b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1ba:	e711      	b.n	800dfe0 <_vfiprintf_r+0x50>
 800e1bc:	ab03      	add	r3, sp, #12
 800e1be:	9300      	str	r3, [sp, #0]
 800e1c0:	462a      	mov	r2, r5
 800e1c2:	4b09      	ldr	r3, [pc, #36]	; (800e1e8 <_vfiprintf_r+0x258>)
 800e1c4:	a904      	add	r1, sp, #16
 800e1c6:	4630      	mov	r0, r6
 800e1c8:	f000 f880 	bl	800e2cc <_printf_i>
 800e1cc:	e7e4      	b.n	800e198 <_vfiprintf_r+0x208>
 800e1ce:	bf00      	nop
 800e1d0:	080137e0 	.word	0x080137e0
 800e1d4:	08013800 	.word	0x08013800
 800e1d8:	080137c0 	.word	0x080137c0
 800e1dc:	08013824 	.word	0x08013824
 800e1e0:	0801382e 	.word	0x0801382e
 800e1e4:	00000000 	.word	0x00000000
 800e1e8:	0800df6b 	.word	0x0800df6b
 800e1ec:	0801382a 	.word	0x0801382a

0800e1f0 <_printf_common>:
 800e1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1f4:	4616      	mov	r6, r2
 800e1f6:	4699      	mov	r9, r3
 800e1f8:	688a      	ldr	r2, [r1, #8]
 800e1fa:	690b      	ldr	r3, [r1, #16]
 800e1fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e200:	4293      	cmp	r3, r2
 800e202:	bfb8      	it	lt
 800e204:	4613      	movlt	r3, r2
 800e206:	6033      	str	r3, [r6, #0]
 800e208:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e20c:	4607      	mov	r7, r0
 800e20e:	460c      	mov	r4, r1
 800e210:	b10a      	cbz	r2, 800e216 <_printf_common+0x26>
 800e212:	3301      	adds	r3, #1
 800e214:	6033      	str	r3, [r6, #0]
 800e216:	6823      	ldr	r3, [r4, #0]
 800e218:	0699      	lsls	r1, r3, #26
 800e21a:	bf42      	ittt	mi
 800e21c:	6833      	ldrmi	r3, [r6, #0]
 800e21e:	3302      	addmi	r3, #2
 800e220:	6033      	strmi	r3, [r6, #0]
 800e222:	6825      	ldr	r5, [r4, #0]
 800e224:	f015 0506 	ands.w	r5, r5, #6
 800e228:	d106      	bne.n	800e238 <_printf_common+0x48>
 800e22a:	f104 0a19 	add.w	sl, r4, #25
 800e22e:	68e3      	ldr	r3, [r4, #12]
 800e230:	6832      	ldr	r2, [r6, #0]
 800e232:	1a9b      	subs	r3, r3, r2
 800e234:	42ab      	cmp	r3, r5
 800e236:	dc26      	bgt.n	800e286 <_printf_common+0x96>
 800e238:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e23c:	1e13      	subs	r3, r2, #0
 800e23e:	6822      	ldr	r2, [r4, #0]
 800e240:	bf18      	it	ne
 800e242:	2301      	movne	r3, #1
 800e244:	0692      	lsls	r2, r2, #26
 800e246:	d42b      	bmi.n	800e2a0 <_printf_common+0xb0>
 800e248:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e24c:	4649      	mov	r1, r9
 800e24e:	4638      	mov	r0, r7
 800e250:	47c0      	blx	r8
 800e252:	3001      	adds	r0, #1
 800e254:	d01e      	beq.n	800e294 <_printf_common+0xa4>
 800e256:	6823      	ldr	r3, [r4, #0]
 800e258:	68e5      	ldr	r5, [r4, #12]
 800e25a:	6832      	ldr	r2, [r6, #0]
 800e25c:	f003 0306 	and.w	r3, r3, #6
 800e260:	2b04      	cmp	r3, #4
 800e262:	bf08      	it	eq
 800e264:	1aad      	subeq	r5, r5, r2
 800e266:	68a3      	ldr	r3, [r4, #8]
 800e268:	6922      	ldr	r2, [r4, #16]
 800e26a:	bf0c      	ite	eq
 800e26c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e270:	2500      	movne	r5, #0
 800e272:	4293      	cmp	r3, r2
 800e274:	bfc4      	itt	gt
 800e276:	1a9b      	subgt	r3, r3, r2
 800e278:	18ed      	addgt	r5, r5, r3
 800e27a:	2600      	movs	r6, #0
 800e27c:	341a      	adds	r4, #26
 800e27e:	42b5      	cmp	r5, r6
 800e280:	d11a      	bne.n	800e2b8 <_printf_common+0xc8>
 800e282:	2000      	movs	r0, #0
 800e284:	e008      	b.n	800e298 <_printf_common+0xa8>
 800e286:	2301      	movs	r3, #1
 800e288:	4652      	mov	r2, sl
 800e28a:	4649      	mov	r1, r9
 800e28c:	4638      	mov	r0, r7
 800e28e:	47c0      	blx	r8
 800e290:	3001      	adds	r0, #1
 800e292:	d103      	bne.n	800e29c <_printf_common+0xac>
 800e294:	f04f 30ff 	mov.w	r0, #4294967295
 800e298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e29c:	3501      	adds	r5, #1
 800e29e:	e7c6      	b.n	800e22e <_printf_common+0x3e>
 800e2a0:	18e1      	adds	r1, r4, r3
 800e2a2:	1c5a      	adds	r2, r3, #1
 800e2a4:	2030      	movs	r0, #48	; 0x30
 800e2a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e2aa:	4422      	add	r2, r4
 800e2ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e2b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e2b4:	3302      	adds	r3, #2
 800e2b6:	e7c7      	b.n	800e248 <_printf_common+0x58>
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	4622      	mov	r2, r4
 800e2bc:	4649      	mov	r1, r9
 800e2be:	4638      	mov	r0, r7
 800e2c0:	47c0      	blx	r8
 800e2c2:	3001      	adds	r0, #1
 800e2c4:	d0e6      	beq.n	800e294 <_printf_common+0xa4>
 800e2c6:	3601      	adds	r6, #1
 800e2c8:	e7d9      	b.n	800e27e <_printf_common+0x8e>
	...

0800e2cc <_printf_i>:
 800e2cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2d0:	7e0f      	ldrb	r7, [r1, #24]
 800e2d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e2d4:	2f78      	cmp	r7, #120	; 0x78
 800e2d6:	4691      	mov	r9, r2
 800e2d8:	4680      	mov	r8, r0
 800e2da:	460c      	mov	r4, r1
 800e2dc:	469a      	mov	sl, r3
 800e2de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e2e2:	d807      	bhi.n	800e2f4 <_printf_i+0x28>
 800e2e4:	2f62      	cmp	r7, #98	; 0x62
 800e2e6:	d80a      	bhi.n	800e2fe <_printf_i+0x32>
 800e2e8:	2f00      	cmp	r7, #0
 800e2ea:	f000 80d8 	beq.w	800e49e <_printf_i+0x1d2>
 800e2ee:	2f58      	cmp	r7, #88	; 0x58
 800e2f0:	f000 80a3 	beq.w	800e43a <_printf_i+0x16e>
 800e2f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e2f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e2fc:	e03a      	b.n	800e374 <_printf_i+0xa8>
 800e2fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e302:	2b15      	cmp	r3, #21
 800e304:	d8f6      	bhi.n	800e2f4 <_printf_i+0x28>
 800e306:	a101      	add	r1, pc, #4	; (adr r1, 800e30c <_printf_i+0x40>)
 800e308:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e30c:	0800e365 	.word	0x0800e365
 800e310:	0800e379 	.word	0x0800e379
 800e314:	0800e2f5 	.word	0x0800e2f5
 800e318:	0800e2f5 	.word	0x0800e2f5
 800e31c:	0800e2f5 	.word	0x0800e2f5
 800e320:	0800e2f5 	.word	0x0800e2f5
 800e324:	0800e379 	.word	0x0800e379
 800e328:	0800e2f5 	.word	0x0800e2f5
 800e32c:	0800e2f5 	.word	0x0800e2f5
 800e330:	0800e2f5 	.word	0x0800e2f5
 800e334:	0800e2f5 	.word	0x0800e2f5
 800e338:	0800e485 	.word	0x0800e485
 800e33c:	0800e3a9 	.word	0x0800e3a9
 800e340:	0800e467 	.word	0x0800e467
 800e344:	0800e2f5 	.word	0x0800e2f5
 800e348:	0800e2f5 	.word	0x0800e2f5
 800e34c:	0800e4a7 	.word	0x0800e4a7
 800e350:	0800e2f5 	.word	0x0800e2f5
 800e354:	0800e3a9 	.word	0x0800e3a9
 800e358:	0800e2f5 	.word	0x0800e2f5
 800e35c:	0800e2f5 	.word	0x0800e2f5
 800e360:	0800e46f 	.word	0x0800e46f
 800e364:	682b      	ldr	r3, [r5, #0]
 800e366:	1d1a      	adds	r2, r3, #4
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	602a      	str	r2, [r5, #0]
 800e36c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e374:	2301      	movs	r3, #1
 800e376:	e0a3      	b.n	800e4c0 <_printf_i+0x1f4>
 800e378:	6820      	ldr	r0, [r4, #0]
 800e37a:	6829      	ldr	r1, [r5, #0]
 800e37c:	0606      	lsls	r6, r0, #24
 800e37e:	f101 0304 	add.w	r3, r1, #4
 800e382:	d50a      	bpl.n	800e39a <_printf_i+0xce>
 800e384:	680e      	ldr	r6, [r1, #0]
 800e386:	602b      	str	r3, [r5, #0]
 800e388:	2e00      	cmp	r6, #0
 800e38a:	da03      	bge.n	800e394 <_printf_i+0xc8>
 800e38c:	232d      	movs	r3, #45	; 0x2d
 800e38e:	4276      	negs	r6, r6
 800e390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e394:	485e      	ldr	r0, [pc, #376]	; (800e510 <_printf_i+0x244>)
 800e396:	230a      	movs	r3, #10
 800e398:	e019      	b.n	800e3ce <_printf_i+0x102>
 800e39a:	680e      	ldr	r6, [r1, #0]
 800e39c:	602b      	str	r3, [r5, #0]
 800e39e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e3a2:	bf18      	it	ne
 800e3a4:	b236      	sxthne	r6, r6
 800e3a6:	e7ef      	b.n	800e388 <_printf_i+0xbc>
 800e3a8:	682b      	ldr	r3, [r5, #0]
 800e3aa:	6820      	ldr	r0, [r4, #0]
 800e3ac:	1d19      	adds	r1, r3, #4
 800e3ae:	6029      	str	r1, [r5, #0]
 800e3b0:	0601      	lsls	r1, r0, #24
 800e3b2:	d501      	bpl.n	800e3b8 <_printf_i+0xec>
 800e3b4:	681e      	ldr	r6, [r3, #0]
 800e3b6:	e002      	b.n	800e3be <_printf_i+0xf2>
 800e3b8:	0646      	lsls	r6, r0, #25
 800e3ba:	d5fb      	bpl.n	800e3b4 <_printf_i+0xe8>
 800e3bc:	881e      	ldrh	r6, [r3, #0]
 800e3be:	4854      	ldr	r0, [pc, #336]	; (800e510 <_printf_i+0x244>)
 800e3c0:	2f6f      	cmp	r7, #111	; 0x6f
 800e3c2:	bf0c      	ite	eq
 800e3c4:	2308      	moveq	r3, #8
 800e3c6:	230a      	movne	r3, #10
 800e3c8:	2100      	movs	r1, #0
 800e3ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e3ce:	6865      	ldr	r5, [r4, #4]
 800e3d0:	60a5      	str	r5, [r4, #8]
 800e3d2:	2d00      	cmp	r5, #0
 800e3d4:	bfa2      	ittt	ge
 800e3d6:	6821      	ldrge	r1, [r4, #0]
 800e3d8:	f021 0104 	bicge.w	r1, r1, #4
 800e3dc:	6021      	strge	r1, [r4, #0]
 800e3de:	b90e      	cbnz	r6, 800e3e4 <_printf_i+0x118>
 800e3e0:	2d00      	cmp	r5, #0
 800e3e2:	d04d      	beq.n	800e480 <_printf_i+0x1b4>
 800e3e4:	4615      	mov	r5, r2
 800e3e6:	fbb6 f1f3 	udiv	r1, r6, r3
 800e3ea:	fb03 6711 	mls	r7, r3, r1, r6
 800e3ee:	5dc7      	ldrb	r7, [r0, r7]
 800e3f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e3f4:	4637      	mov	r7, r6
 800e3f6:	42bb      	cmp	r3, r7
 800e3f8:	460e      	mov	r6, r1
 800e3fa:	d9f4      	bls.n	800e3e6 <_printf_i+0x11a>
 800e3fc:	2b08      	cmp	r3, #8
 800e3fe:	d10b      	bne.n	800e418 <_printf_i+0x14c>
 800e400:	6823      	ldr	r3, [r4, #0]
 800e402:	07de      	lsls	r6, r3, #31
 800e404:	d508      	bpl.n	800e418 <_printf_i+0x14c>
 800e406:	6923      	ldr	r3, [r4, #16]
 800e408:	6861      	ldr	r1, [r4, #4]
 800e40a:	4299      	cmp	r1, r3
 800e40c:	bfde      	ittt	le
 800e40e:	2330      	movle	r3, #48	; 0x30
 800e410:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e414:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e418:	1b52      	subs	r2, r2, r5
 800e41a:	6122      	str	r2, [r4, #16]
 800e41c:	f8cd a000 	str.w	sl, [sp]
 800e420:	464b      	mov	r3, r9
 800e422:	aa03      	add	r2, sp, #12
 800e424:	4621      	mov	r1, r4
 800e426:	4640      	mov	r0, r8
 800e428:	f7ff fee2 	bl	800e1f0 <_printf_common>
 800e42c:	3001      	adds	r0, #1
 800e42e:	d14c      	bne.n	800e4ca <_printf_i+0x1fe>
 800e430:	f04f 30ff 	mov.w	r0, #4294967295
 800e434:	b004      	add	sp, #16
 800e436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e43a:	4835      	ldr	r0, [pc, #212]	; (800e510 <_printf_i+0x244>)
 800e43c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e440:	6829      	ldr	r1, [r5, #0]
 800e442:	6823      	ldr	r3, [r4, #0]
 800e444:	f851 6b04 	ldr.w	r6, [r1], #4
 800e448:	6029      	str	r1, [r5, #0]
 800e44a:	061d      	lsls	r5, r3, #24
 800e44c:	d514      	bpl.n	800e478 <_printf_i+0x1ac>
 800e44e:	07df      	lsls	r7, r3, #31
 800e450:	bf44      	itt	mi
 800e452:	f043 0320 	orrmi.w	r3, r3, #32
 800e456:	6023      	strmi	r3, [r4, #0]
 800e458:	b91e      	cbnz	r6, 800e462 <_printf_i+0x196>
 800e45a:	6823      	ldr	r3, [r4, #0]
 800e45c:	f023 0320 	bic.w	r3, r3, #32
 800e460:	6023      	str	r3, [r4, #0]
 800e462:	2310      	movs	r3, #16
 800e464:	e7b0      	b.n	800e3c8 <_printf_i+0xfc>
 800e466:	6823      	ldr	r3, [r4, #0]
 800e468:	f043 0320 	orr.w	r3, r3, #32
 800e46c:	6023      	str	r3, [r4, #0]
 800e46e:	2378      	movs	r3, #120	; 0x78
 800e470:	4828      	ldr	r0, [pc, #160]	; (800e514 <_printf_i+0x248>)
 800e472:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e476:	e7e3      	b.n	800e440 <_printf_i+0x174>
 800e478:	0659      	lsls	r1, r3, #25
 800e47a:	bf48      	it	mi
 800e47c:	b2b6      	uxthmi	r6, r6
 800e47e:	e7e6      	b.n	800e44e <_printf_i+0x182>
 800e480:	4615      	mov	r5, r2
 800e482:	e7bb      	b.n	800e3fc <_printf_i+0x130>
 800e484:	682b      	ldr	r3, [r5, #0]
 800e486:	6826      	ldr	r6, [r4, #0]
 800e488:	6961      	ldr	r1, [r4, #20]
 800e48a:	1d18      	adds	r0, r3, #4
 800e48c:	6028      	str	r0, [r5, #0]
 800e48e:	0635      	lsls	r5, r6, #24
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	d501      	bpl.n	800e498 <_printf_i+0x1cc>
 800e494:	6019      	str	r1, [r3, #0]
 800e496:	e002      	b.n	800e49e <_printf_i+0x1d2>
 800e498:	0670      	lsls	r0, r6, #25
 800e49a:	d5fb      	bpl.n	800e494 <_printf_i+0x1c8>
 800e49c:	8019      	strh	r1, [r3, #0]
 800e49e:	2300      	movs	r3, #0
 800e4a0:	6123      	str	r3, [r4, #16]
 800e4a2:	4615      	mov	r5, r2
 800e4a4:	e7ba      	b.n	800e41c <_printf_i+0x150>
 800e4a6:	682b      	ldr	r3, [r5, #0]
 800e4a8:	1d1a      	adds	r2, r3, #4
 800e4aa:	602a      	str	r2, [r5, #0]
 800e4ac:	681d      	ldr	r5, [r3, #0]
 800e4ae:	6862      	ldr	r2, [r4, #4]
 800e4b0:	2100      	movs	r1, #0
 800e4b2:	4628      	mov	r0, r5
 800e4b4:	f7f1 fe94 	bl	80001e0 <memchr>
 800e4b8:	b108      	cbz	r0, 800e4be <_printf_i+0x1f2>
 800e4ba:	1b40      	subs	r0, r0, r5
 800e4bc:	6060      	str	r0, [r4, #4]
 800e4be:	6863      	ldr	r3, [r4, #4]
 800e4c0:	6123      	str	r3, [r4, #16]
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e4c8:	e7a8      	b.n	800e41c <_printf_i+0x150>
 800e4ca:	6923      	ldr	r3, [r4, #16]
 800e4cc:	462a      	mov	r2, r5
 800e4ce:	4649      	mov	r1, r9
 800e4d0:	4640      	mov	r0, r8
 800e4d2:	47d0      	blx	sl
 800e4d4:	3001      	adds	r0, #1
 800e4d6:	d0ab      	beq.n	800e430 <_printf_i+0x164>
 800e4d8:	6823      	ldr	r3, [r4, #0]
 800e4da:	079b      	lsls	r3, r3, #30
 800e4dc:	d413      	bmi.n	800e506 <_printf_i+0x23a>
 800e4de:	68e0      	ldr	r0, [r4, #12]
 800e4e0:	9b03      	ldr	r3, [sp, #12]
 800e4e2:	4298      	cmp	r0, r3
 800e4e4:	bfb8      	it	lt
 800e4e6:	4618      	movlt	r0, r3
 800e4e8:	e7a4      	b.n	800e434 <_printf_i+0x168>
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	4632      	mov	r2, r6
 800e4ee:	4649      	mov	r1, r9
 800e4f0:	4640      	mov	r0, r8
 800e4f2:	47d0      	blx	sl
 800e4f4:	3001      	adds	r0, #1
 800e4f6:	d09b      	beq.n	800e430 <_printf_i+0x164>
 800e4f8:	3501      	adds	r5, #1
 800e4fa:	68e3      	ldr	r3, [r4, #12]
 800e4fc:	9903      	ldr	r1, [sp, #12]
 800e4fe:	1a5b      	subs	r3, r3, r1
 800e500:	42ab      	cmp	r3, r5
 800e502:	dcf2      	bgt.n	800e4ea <_printf_i+0x21e>
 800e504:	e7eb      	b.n	800e4de <_printf_i+0x212>
 800e506:	2500      	movs	r5, #0
 800e508:	f104 0619 	add.w	r6, r4, #25
 800e50c:	e7f5      	b.n	800e4fa <_printf_i+0x22e>
 800e50e:	bf00      	nop
 800e510:	08013835 	.word	0x08013835
 800e514:	08013846 	.word	0x08013846

0800e518 <_read_r>:
 800e518:	b538      	push	{r3, r4, r5, lr}
 800e51a:	4d07      	ldr	r5, [pc, #28]	; (800e538 <_read_r+0x20>)
 800e51c:	4604      	mov	r4, r0
 800e51e:	4608      	mov	r0, r1
 800e520:	4611      	mov	r1, r2
 800e522:	2200      	movs	r2, #0
 800e524:	602a      	str	r2, [r5, #0]
 800e526:	461a      	mov	r2, r3
 800e528:	f7f4 f860 	bl	80025ec <_read>
 800e52c:	1c43      	adds	r3, r0, #1
 800e52e:	d102      	bne.n	800e536 <_read_r+0x1e>
 800e530:	682b      	ldr	r3, [r5, #0]
 800e532:	b103      	cbz	r3, 800e536 <_read_r+0x1e>
 800e534:	6023      	str	r3, [r4, #0]
 800e536:	bd38      	pop	{r3, r4, r5, pc}
 800e538:	20006990 	.word	0x20006990

0800e53c <_fstat_r>:
 800e53c:	b538      	push	{r3, r4, r5, lr}
 800e53e:	4d07      	ldr	r5, [pc, #28]	; (800e55c <_fstat_r+0x20>)
 800e540:	2300      	movs	r3, #0
 800e542:	4604      	mov	r4, r0
 800e544:	4608      	mov	r0, r1
 800e546:	4611      	mov	r1, r2
 800e548:	602b      	str	r3, [r5, #0]
 800e54a:	f7f4 f894 	bl	8002676 <_fstat>
 800e54e:	1c43      	adds	r3, r0, #1
 800e550:	d102      	bne.n	800e558 <_fstat_r+0x1c>
 800e552:	682b      	ldr	r3, [r5, #0]
 800e554:	b103      	cbz	r3, 800e558 <_fstat_r+0x1c>
 800e556:	6023      	str	r3, [r4, #0]
 800e558:	bd38      	pop	{r3, r4, r5, pc}
 800e55a:	bf00      	nop
 800e55c:	20006990 	.word	0x20006990

0800e560 <_isatty_r>:
 800e560:	b538      	push	{r3, r4, r5, lr}
 800e562:	4d06      	ldr	r5, [pc, #24]	; (800e57c <_isatty_r+0x1c>)
 800e564:	2300      	movs	r3, #0
 800e566:	4604      	mov	r4, r0
 800e568:	4608      	mov	r0, r1
 800e56a:	602b      	str	r3, [r5, #0]
 800e56c:	f7f4 f893 	bl	8002696 <_isatty>
 800e570:	1c43      	adds	r3, r0, #1
 800e572:	d102      	bne.n	800e57a <_isatty_r+0x1a>
 800e574:	682b      	ldr	r3, [r5, #0]
 800e576:	b103      	cbz	r3, 800e57a <_isatty_r+0x1a>
 800e578:	6023      	str	r3, [r4, #0]
 800e57a:	bd38      	pop	{r3, r4, r5, pc}
 800e57c:	20006990 	.word	0x20006990

0800e580 <_init>:
 800e580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e582:	bf00      	nop
 800e584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e586:	bc08      	pop	{r3}
 800e588:	469e      	mov	lr, r3
 800e58a:	4770      	bx	lr

0800e58c <_fini>:
 800e58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e58e:	bf00      	nop
 800e590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e592:	bc08      	pop	{r3}
 800e594:	469e      	mov	lr, r3
 800e596:	4770      	bx	lr
